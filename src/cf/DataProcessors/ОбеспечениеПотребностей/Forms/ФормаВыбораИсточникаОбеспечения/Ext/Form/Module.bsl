
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение параметров динамических списков.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Склады, "Номенклатура",   Параметры.Номенклатура,   Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Склады, "Характеристика", Параметры.Характеристика, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Склады, "Склад",          Параметры.Склад,          Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Номенклатура, "ЕдиницаИзмерения");
	ЕдиницаИзмерения = Реквизиты.ЕдиницаИзмерения;
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	// Настройка внешнего вида формы.
	Элементы.ПоставщикиЦенаУпрУчет.Заголовок = СтрШаблон(НСтр("ru = 'Цена (%1)'"), ВалютаУпрУчета);
	Элементы.Доступно.Заголовок = СтрШаблон(НСтр("ru = 'Доступно (%1)'"), Реквизиты.ЕдиницаИзмерения);
	
	Если Параметры.ТипОбеспечения = Перечисления.ТипыОбеспечения.Покупка
		Или Параметры.ТипОбеспечения = Перечисления.ТипыОбеспечения.ПроизводствоНаСтороне Тогда
		
		Элементы.ГруппаПеремещение.Видимость = Ложь;
		Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
			
			ШаблонТекста = НСтр("ru = 'Выбор поставщика (Номенклатура: %1, Характеристика: %2, Склад: %3)'");
			Заголовок = СтрШаблон(ШаблонТекста, Параметры.Номенклатура, Параметры.Характеристика, Параметры.Склад);
			
		Иначе
			
			ШаблонТекста = НСтр("ru = 'Выбор поставщика (Номенклатура: %1, Склад: %2)'");
			Заголовок = СтрШаблон(ШаблонТекста, Параметры.Номенклатура, Параметры.Склад);
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаПоставщики.Видимость = Ложь;
		Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
			
			ШаблонТекста = НСтр("ru = 'Выбор склада (Номенклатура: %1, Характеристика: %2)'");
			Заголовок = СтрШаблон(ШаблонТекста, Параметры.Номенклатура, Параметры.Характеристика);
			
		Иначе
			
			Заголовок = СтрШаблон(НСтр("ru = 'Выбор склада (Номенклатура: %1)'"), Параметры.Номенклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПоставщикиЦенаУпрУчет.Видимость           = Ложь;
	Элементы.ПоставщикиЗарегистрирована.Видимость      = Ложь;
	Элементы.ПоставщикиВидЦены.Видимость               = Ложь;
	Элементы.ПоставщикиПоследняяПоставка.Видимость     = Ложь;
	Элементы.ПоставщикиВсегоПоставок.Видимость         = Ложь;
	Элементы.ГруппаУпаковкаВалюта.Видимость            = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЦеныПриИзменении(Элемент)
	
	ПриИзмененииФлаговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставкиПриИзменении(Элемент)
	
	ПриИзмененииФлаговНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоставщики

&НаКлиенте
Процедура ПоставщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСклады

&НаКлиенте
Процедура СкладыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыбратьНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриИзмененииФлаговНаСервере()
	
	Элементы.ПоставщикиЦенаУпрУчет.Видимость           = Ложь;
	Элементы.ПоставщикиЗарегистрирована.Видимость      = Ложь;
	Элементы.ПоставщикиВидЦены.Видимость               = Ложь;
	Элементы.ПоставщикиПоследняяПоставка.Видимость     = Ложь;
	Элементы.ПоставщикиВсегоПоставок.Видимость         = Ложь;
	Элементы.ГруппаУпаковкаВалюта.Видимость            = Ложь;
	
	// Установка свойств и параметров динамического списка "Поставщики".
	Если ЗарегистрированыЦены И БылиПоставки Тогда
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица              = "РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса =
			"ВЫБРАТЬ
			|	Поступление.Партнер               КАК Партнер,
			|	МАКСИМУМ(Поступление.Период)      КАК ПоследняяПоставка,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистратор) КАК ВсегоПоставок
			|ПОМЕСТИТЬ Закупки
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Поступление
			|		ПО Поступление.ХозяйственнаяОперация В (&ХозОперации)
			|		 И Поступление.Склад = &Склад
			|		 И Поступление.АналитикаУчетаНоменклатуры = КлючиАналитики.КлючАналитики
			|		 И Поступление.Активность
			|ГДЕ
			|	НЕ Поступление.Партнер ЕСТЬ NULL
			|		И КлючиАналитики.Номенклатура = &Номенклатура
			|		И КлючиАналитики.Характеристика = &Характеристика
			|	
			|СГРУППИРОВАТЬ ПО
			|	Поступление.Партнер
			|ИНДЕКСИРОВАТЬ ПО
			|	Партнер
			|;
			|
			|//////////////////////////////////////
			|ВЫБРАТЬ
			|	Цены.Партнер           КАК Поставщик,
			|	Цены.ВидЦеныПоставщика КАК ВидЦены,
			|	Цены.Упаковка          КАК Упаковка,
			|	Цены.Цена              КАК Цена,
			|	Цены.Валюта            КАК Валюта,
			|	Цены.Период            КАК Зарегистрирована,
			|	Закупки.ПоследняяПоставка КАК ПоследняяПоставка,
			|	Закупки.ВсегоПоставок     КАК ВсегоПоставок,
			|	ЕСТЬNULL(Цены.Цена * ВалютаЦены.Курс * ВалютаЦены.Кратность, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * &КоэффициентПересчетаЦены КАК ЦенаУпрУчет
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаЦены, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК Цены
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦены, ) КАК ВалютаЦены
			|		ПО Цены.Валюта = ВалютаЦены.Валюта
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Закупки КАК Закупки
			|		ПО Закупки.Партнер = Цены.Партнер
			|ГДЕ
			|	Цены.Партнер.Поставщик
			|		И НЕ Цены.Партнер.ПометкаУдаления
			|		И НЕ Закупки.Партнер ЕСТЬ NULL";
		
		СвойстваСписка.ТекстЗапроса = СтрЗаменить(СвойстваСписка.ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Цены.Упаковка","Цены.Номенклатура"));
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Поставщики, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Номенклатура",   Параметры.Номенклатура,   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Характеристика", Параметры.Характеристика, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Склад",          Параметры.Склад,          Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "ДатаЦены",       ТекущаяДатаСеанса(),      Истина);
		
		ХозОперации = Документы.ЗаказПоставщику.ХозяйственныеОперацииДокумента(Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "ХозОперации", ХозОперации, Истина);
		
		КоэффициентПересчетаЦены = 1 / РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(ТекущаяДатаСеанса());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "КоэффициентПересчетаЦены", КоэффициентПересчетаЦены, Истина);
		
		Элементы.ПоставщикиЦенаУпрУчет.Видимость            = Истина;
		Элементы.ПоставщикиЗарегистрирована.Видимость       = Истина;
		Элементы.ПоставщикиВидЦены.Видимость                = Истина;
		Элементы.ПоставщикиПоследняяПоставка.Видимость      = Истина;
		Элементы.ПоставщикиВсегоПоставок.Видимость          = Истина;
		Элементы.ГруппаУпаковкаВалюта.Видимость             = Истина;
		
	ИначеЕсли ЗарегистрированыЦены И Не БылиПоставки Тогда
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица              = "РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса =
			"ВЫБРАТЬ
			|	Цены.Партнер           КАК Поставщик,
			|	Цены.ВидЦеныПоставщика КАК ВидЦены,
			|	Цены.Упаковка          КАК Упаковка,
			|	Цены.Цена              КАК Цена,
			|	Цены.Валюта            КАК Валюта,
			|	Цены.Период            КАК Зарегистрирована,
			|	ДАТАВРЕМЯ(1,1,1)       КАК ПоследняяПоставка,
			|	0                      КАК ВсегоПоставок,
			|	
			|	ЕСТЬNULL(Цены.Цена * ВалютаЦены.Курс * ВалютаЦены.Кратность, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * &КоэффициентПересчетаЦены КАК ЦенаУпрУчет
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаЦены, Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК Цены
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаЦены, ) КАК ВалютаЦены
			|		ПО Цены.Валюта = ВалютаЦены.Валюта
			|ГДЕ
			|	Цены.Партнер.Поставщик
			|		И НЕ Цены.Партнер.ПометкаУдаления";
		
		СвойстваСписка.ТекстЗапроса = СтрЗаменить(СвойстваСписка.ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("Цены.Упаковка","Цены.Номенклатура"));
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Поставщики, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Номенклатура",   Параметры.Номенклатура,   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Характеристика", Параметры.Характеристика, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "ДатаЦены",       ТекущаяДатаСеанса(),      Истина);
		
		КоэффициентПересчетаЦены = 1 / РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыУправленческогоУчета(ТекущаяДатаСеанса());
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "КоэффициентПересчетаЦены", КоэффициентПересчетаЦены, Истина);
		
		Элементы.ПоставщикиЦенаУпрУчет.Видимость            = Истина;
		Элементы.ПоставщикиЗарегистрирована.Видимость       = Истина;
		Элементы.ПоставщикиВидЦены.Видимость                = Истина;
		Элементы.ГруппаУпаковкаВалюта.Видимость             = Истина;
		
	ИначеЕсли Не ЗарегистрированыЦены И БылиПоставки Тогда
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица              = "Справочник.Партнеры";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса =
			"ВЫБРАТЬ
			|	Поступление.Партнер               КАК Партнер,
			|	МАКСИМУМ(Поступление.Период)      КАК ПоследняяПоставка,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистратор) КАК ВсегоПоставок
			|ПОМЕСТИТЬ Закупки
			|ИЗ
			|	РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Поступление
			|		ПО Поступление.ХозяйственнаяОперация В (&ХозОперации)
			|		 И Поступление.Склад = &Склад
			|		 И Поступление.АналитикаУчетаНоменклатуры = КлючиАналитики.КлючАналитики
			|		 И Поступление.Активность
			|ГДЕ
			|	НЕ Поступление.Партнер ЕСТЬ NULL
			|		И КлючиАналитики.Номенклатура = &Номенклатура
			|		И КлючиАналитики.Характеристика = &Характеристика
			|	
			|СГРУППИРОВАТЬ ПО
			|	Поступление.Партнер
			|ИНДЕКСИРОВАТЬ ПО
			|	Партнер
			|;
			|
			|//////////////////////////////////////
			|ВЫБРАТЬ
			|	Закупки.Партнер                                            КАК Поставщик,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)       КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                   КАК Валюта,
			|	ДАТАВРЕМЯ(1,1,1)                                           КАК Зарегистрирована,
			|	0.00                                                       КАК Цена,
			|	0.00                                                       КАК ЦенаУпрУчет,
			|	Закупки.ПоследняяПоставка                                  КАК ПоследняяПоставка,
			|	Закупки.ВсегоПоставок                                      КАК ВсегоПоставок
			|ИЗ
			|	Справочник.Партнеры КАК ПартнерыПереопределяемый
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Закупки КАК Закупки
			|		ПО Закупки.Партнер = ПартнерыПереопределяемый.Ссылка
			|ГДЕ
			|	ПартнерыПереопределяемый.Поставщик
			|		И НЕ ПартнерыПереопределяемый.ПометкаУдаления
			|		И НЕ Закупки.Партнер ЕСТЬ NULL";
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Поставщики, СвойстваСписка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Номенклатура",   Параметры.Номенклатура,   Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Характеристика", Параметры.Характеристика, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "Склад",          Параметры.Склад,          Истина);
		ХозОперации = Документы.ЗаказПоставщику.ХозяйственныеОперацииДокумента(Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Поставщики, "ХозОперации", ХозОперации, Истина);
		
		Элементы.ПоставщикиПоследняяПоставка.Видимость      = Истина;
		Элементы.ПоставщикиВсегоПоставок.Видимость          = Истина;
		
	Иначе // Не ЗарегистрированыЦены И Не БылиПоставки
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица              = "Справочник.Партнеры";
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПартнерыПереопределяемый.Ссылка                            КАК Поставщик,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)       КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                   КАК Валюта,
			|	ДАТАВРЕМЯ(1,1,1)                                           КАК Зарегистрирована,
			|	0.00                                                       КАК Цена,
			|	0.00                                                       КАК ЦенаУпрУчет,
			|	ДАТАВРЕМЯ(1,1,1)                                           КАК ПоследняяПоставка,
			|	0                                                          КАК ВсегоПоставок
			|ИЗ
			|	Справочник.Партнеры КАК ПартнерыПереопределяемый
			|ГДЕ
			|	ПартнерыПереопределяемый.Поставщик
			|	И НЕ ПартнерыПереопределяемый.ПометкаУдаления";
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Поставщики, СвойстваСписка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНаКлиенте()
	
	ПараметрыПоставкиОптимальные = Новый Структура("ИсточникОбеспечения");
	ПараметрыПоставкиОптимальные.Вставить("Соглашение", ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка"));
	ПараметрыПоставкиОптимальные.Вставить("ЦенаВВалютеУправленческогоУчета", 0);
	ПараметрыПоставкиОптимальные.Вставить("ЦенаВВалютеСоглашения",           0);
	ПараметрыПоставкиОптимальные.Вставить("ВалютаСоглашения", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	ПараметрыПоставкиОптимальные.Вставить("ВидЦены", ПредопределенноеЗначение("Справочник.ВидыЦенПоставщиков.ПустаяСсылка"));
	
	Если Параметры.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") 
		Или Параметры.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.ПроизводствоНаСтороне") Тогда
			
			Если Элементы.Поставщики.ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекущаяСтрока = Элементы.Поставщики.ТекущиеДанные;
			
			Партнер = ТекущаяСтрока.Поставщик;
			
			Если ЗарегистрированыЦены Тогда
				
				УсловияЗакупок = УсловияЗакупокПартнера(Партнер, ТекущаяСтрока.ЦенаУпрУчет);
				
			Иначе
				
				УсловияЗакупок = УсловияЗакупокПартнера(Партнер, 0);
				
			КонецЕсли;
			
			ПараметрыПоставкиОптимальные.Вставить("ИсточникОбеспечения", Партнер);
			ПараметрыПоставкиОптимальные.Вставить("Соглашение",          УсловияЗакупок.Соглашение);
			ПараметрыПоставкиОптимальные.Вставить("ВалютаСоглашения",    УсловияЗакупок.Валюта);
			
			Если ЗарегистрированыЦены Тогда
				
				ПараметрыПоставкиОптимальные.Вставить("ЦенаВВалютеСоглашения",           УсловияЗакупок.Цена);
				ПараметрыПоставкиОптимальные.Вставить("ЦенаВВалютеУправленческогоУчета", ТекущаяСтрока.ЦенаУпрУчет);
				ПараметрыПоставкиОптимальные.Вставить("ВидЦены",                         ТекущаяСтрока.ВидЦены);
				
			КонецЕсли;
			
	Иначе
		
		Если Элементы.Склады.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПоставкиОптимальные.Вставить("ИсточникОбеспечения", Элементы.Склады.ТекущиеДанные.Склад);
		
	КонецЕсли;
	
	Результат = Новый Структура("ПараметрыПоставкиОптимальные", ПараметрыПоставкиОптимальные);
	ОповеститьОвыборе(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УсловияЗакупокПартнера(Партнер, Цена)
	
	Возврат ОбеспечениеСервер.УсловияЗакупокПартнера(Партнер, Цена);
	
КонецФункции

#КонецОбласти
