#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИмяОбъекта = ?(Параметры.Свойство("ОбъектСсылка"), Параметры.ОбъектСсылка.Метаданные().Имя, "");
	
	СписокВыбора = Элементы.ВидСправочника.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.НоменклатураЭСФ.Тип.Типы() Цикл
		ОписаниеТипаСсылки = Новый ОписаниеТипов(ЗначениеВМассиве(Тип));
		СписокВыбора.Добавить(Тип, ОписаниеТипаСсылки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
	ВидСправочника 		  = ВССерверПереопределяемый.ТипСправочникаДляПодбораПоУмолчанию();
	ТекущийВидСправочника = ВидСправочника;
	ВидСправочникаПриИзмененииНаСервере();
	
	// Получение сохраненных ранее настроек
	ВосстановленныеНастройки      = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборИсточниковПроисхождения", "ПараметрыПодбора");
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок     = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	СписокСвойств = "ДатаОстатка, Организация, СтруктурноеПодразделение, Склад, ИмяТаблицы, ПризнакУчетаНаВиртуальномСкладе, ПризнакУчетаНаВиртуальномСкладеГСВС";
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	
	МассивЭлементовОтбора = ЭСФКлиентСерверПереопределяемый.НайтиЭлементыИГруппыОтбора(Список.КомпоновщикНастроек.Настройки.Отбор, "ПризнакУникальногоТовара");
	ЭлементОтбораПризнакУникальногоТовара = ?(МассивЭлементовОтбора.Количество() = 0, Неопределено, МассивЭлементовОтбора[0]);
	
	Если ЭлементОтбораПризнакУникальногоТовара <> Неопределено Тогда
		
		Если Параметры.Свойство("ПризнакаУникальныйТовар") Тогда
			ПризнакаУникальныйТовар = Параметры.ПризнакаУникальныйТовар;
		Иначе
			ПризнакаУникальныйТовар = Ложь;
		КонецЕсли;	
		
		ЭлементОтбораПризнакУникальногоТовара.РежимОтображения 	= ?(ПризнакаУникальныйТовар, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		ЭлементОтбораПризнакУникальногоТовара.Использование		= ПризнакаУникальныйТовар;
		ЭлементОтбораПризнакУникальногоТовара.ПравоеЗначение	= ПризнакаУникальныйТовар;
		
	КонецЕсли;	
	
	Список.Параметры.УстановитьЗначениеПараметра("Организация"	, Организация);
	Список.Параметры.УстановитьЗначениеПараметра("СтруктурноеПодразделение"	, СтруктурноеПодразделение);
	Список.Параметры.УстановитьЗначениеПараметра("Склад"		, Склад);
	Список.Параметры.УстановитьЗначениеПараметра("ПоддержкаУчетаСтруктурныхПодразделений", Параметры.ПоддержкаУчетаСтруктурныхПодразделений);
	
	Если Параметры.ЭтоНовыйДокумент Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка"	, Новый МоментВремени(ДатаОстатка, Параметры.ОбъектСсылка));
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОстатка"	, Новый МоментВремени(ДатаОстатка));
	КонецЕсли;	
	
	Список.Параметры.УстановитьЗначениеПараметра("Период"		, КонецДня(ДатаОстатка));
	
	ОбновитьИнформационнуюНадписьПараметрыВыбора(ЭтаФорма);
	
	ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"ПризнакУчетаНаВиртуальномСкладе",
		ПризнакУчетаНаВиртуальномСкладе, 
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор,
		"ПризнакУчетаНаВиртуальномСкладеГСВС",
		ПризнакУчетаНаВиртуальномСкладеГСВС, 
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ФормаЗакрыта = Ложь;
	
	Если ВосстановленныеНастройки <> Неопределено Тогда
		Если ВосстановленныеНастройки.Свойство("ЗапрашиватьКоличество")  Тогда
			ЗапрашиватьКоличество = ВосстановленныеНастройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если ВосстановленныеНастройки.Свойство("ЗапрашиватьЦену") Тогда
			ЗапрашиватьЦену = ВосстановленныеНастройки.ЗапрашиватьЦену;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если ЗапрашиватьКоличество ИЛИ ЗапрашиватьЦену Тогда

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Товар"    				, Элемент.ТекущиеДанные.Товар);
			ПараметрыФормы.Вставить("ИсточникПроисхождения" , Элемент.ТекущиеДанные.Ссылка);
			ПараметрыФормы.Вставить("ЕдиницаИзмерения" 		, Элемент.ТекущиеДанные.ЕдиницаИзмерения);
			ПараметрыФормы.Вставить("Цена"            		, 0);
			ПараметрыФормы.Вставить("Количество"      		, 1);
			ПараметрыФормы.Вставить("ЕстьЦена"        		, ЗапрашиватьЦену);
			ПараметрыФормы.Вставить("ЕстьКоличество"  		, ЗапрашиватьКоличество);

			ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбраннуюНоменклатуруПродолжение", ЭтаФорма);
			ОткрытьФорму("Обработка.ПодборИсточниковПроисхождения.Форма.ВводПараметров", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
		Иначе
			СтруктураПараметрыНоменклатуры = Новый Структура;
			СтруктураПараметрыНоменклатуры.Вставить("Товар"    				, Элемент.ТекущиеДанные.Товар);
			СтруктураПараметрыНоменклатуры.Вставить("ИсточникПроисхождения" , Элемент.ТекущиеДанные.Ссылка);
			СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения"	 	, Элемент.ТекущиеДанные.ЕдиницаИзмерения);
			СтруктураПараметрыНоменклатуры.Вставить("Цена" 					, 0);
			
			ДобавитьВыбраннуюНоменклатуру(СтруктураПараметрыНоменклатуры);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураВозврата = ПриЗакрытииНаСервере();

	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФормаЗакрыта Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Возврат;	
	КонецЕсли;	

	Если НЕ ФормаЗакрыта И Не ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда

		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Отказ", Отказ);
		ТекстВопроса = НСтр("ru = 'Подобранный товар не перенесен в документ.
			|
			|Перенести?'");
		Режим = РежимДиалогаВопрос.ДаНетОтмена;	
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПеренестиТовары", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидСправочникаПриИзменении(Элемент)
	ВидСправочникаПриИзмененииНаСервере();
	Элементы.ИерархияСправочника.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСправочникаПриАктивизацииСтроки(Элемент)
	Элементы.Список.ТекущаяСтрока = Неопределено;
	УстановитьОтборПоИерархииСправочника(Элементы.ИерархияСправочника.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ИерархияСправочникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элементы.Список.ТекущаяСтрока = Неопределено;
	УстановитьОтборПоИерархииСправочника(Элементы.ИерархияСправочника.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	МассивСтруктурПодбора = ВыбратьВсеНаСервере();
	
	Для Каждого СтруктураПодбора Из МассивСтруктурПодбора Цикл
		ДобавитьВыбраннуюНоменклатуру(СтруктураПодбора, Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ВыбратьВсеНаСервере()
	
	// 1. Сформируем таблицу отобранной номенклатуры - копию динамического списка
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник                    = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя                = "Источник1";
	Источник.СтрокаСоединения   = "";
	Источник.ТипИсточникаДанных = "local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));

	НаборДанных.Имя            = "Запрос";
	НаборДанных.Запрос         = Список.ТекстЗапроса;
	НаборДанных.ИсточникДанных = "Источник1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;

	НастройкиКомпоновки = СкомпоноватьНастройки(СхемаКомпоновки);

	СкопироватьЭлементы(НастройкиКомпоновки.Отбор  , Список.Отбор);
	СкопироватьЭлементы(НастройкиКомпоновки.Порядок, Список.Порядок);
	
	Для Каждого ПараметрДанных Из Список.Параметры.Элементы Цикл
		НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ПараметрДанных.Параметр, ПараметрДанных.Значение);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаНоменклатуры);
	ПроцессорВывода.НачатьВывод();

	Пока Истина Цикл
	    
	    ЭлементРезультатаКомпоновкиДанных      = ПроцессорКомпоновкиДанных.Следующий();
	    Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда 
	        Прервать;
	    КонецЕсли;
	    
	    ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
	    
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	
	// 2. Сформируем массив для заполнения таб. части ПодобраннаяНоменклатура обработки
	МассивВозврата = Новый Массив;
	
	ЕстьКолонкаЦена         = ТаблицаНоменклатуры.Колонки.Найти("Цена") <> Неопределено;
	ЕстьКолонкаВалюта       = ТаблицаНоменклатуры.Колонки.Найти("Валюта") <> Неопределено;
	ЕстьКолонкаСпецификация = ТаблицаНоменклатуры.Колонки.Найти("Спецификация") <> Неопределено;
	
	Для Каждого СтрокаПодбора Из ТаблицаНоменклатуры Цикл
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Товар"    				, СтрокаПодбора.Товар);
		СтруктураПараметрыНоменклатуры.Вставить("ИсточникПроисхождения" , СтрокаПодбора.Ссылка);
		СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения"	 	, СтрокаПодбора.ЕдиницаИзмерения);
		СтруктураПараметрыНоменклатуры.Вставить("Цена" 					, 0);
		
		Если СтрокаПодбора.Остаток = 0 Тогда
			Продолжить;
		Иначе
			СтруктураПараметрыНоменклатуры.Вставить("Количество", СтрокаПодбора.Остаток);
		КонецЕсли;
		
		МассивВозврата.Добавить(СтруктураПараметрыНоменклатуры);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция СкомпоноватьНастройки(СхемаКомпоновки) Экспорт

	ИсточникНастроек    = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	// Добавим выбранные поля
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле               = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле          = Элемент.Поле;
			ВыбранноеПоле.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Поле                = ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек.Настройки;

КонецФункции

// Копирует элементы из одной коллекции в другую
&НаСервереБезКонтекста
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает массив и помещает в него переданное значение.
&НаСервере
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформационнуюНадписьПараметрыВыбора(Форма)

	//ЭлементыОтбора = Форма.Список.Отбор.Элементы;
	ЭлементыОтбора = Форма.Список.Параметры.Элементы;

	ПараметрДатаОстатка = Новый ПараметрКомпоновкиДанных("ДатаОстатка"); 
	ПараметрПериод 		= Новый ПараметрКомпоновкиДанных("Период"); 
	
	ТекстНадписи = "";

	Для Каждого Элемент Из ЭлементыОтбора Цикл
		Если Элемент.Параметр = ПараметрДатаОстатка Тогда
			Продолжить;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Элемент.Значение) и Элемент.Использование Тогда			
			ТекстНадписи = ТекстНадписи + ?(Элемент.Параметр = ПараметрПериод, Формат(Элемент.Значение,"ДФ=dd.MM.yyyy"),Элемент.Значение) + "; ";
		ИначеЕсли Элемент.Использование И Элемент.Параметр = Новый ПараметрКомпоновкиДанных("Организация") Тогда
			ТекстНадписи = ТекстНадписи + "<" + Элемент.Параметр + "> - не указана; ";
		ИначеЕсли Элемент.Использование Тогда
			ТекстНадписи = ТекстНадписи + "<" + Элемент.Параметр + "> - не указан; "; 	
		КонецЕсли;
	КонецЦикла;

	ТекстНадписи = Лев(ТекстНадписи, СтрДлина(ТекстНадписи) - 2);

	Форма.ИнформационнаяНадписьПараметровВыбора = ТекстНадписи;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуруПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВыбраннуюНоменклатуру(Результат, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуру(ПараметрыНоменклатуры, ВыбиратьВсе = Ложь) Экспорт

	Если ПараметрыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыНоменклатуры.Свойство("Количество") И ПараметрыНоменклатуры.Количество <> 0 Тогда
		Количество = ПараметрыНоменклатуры.Количество;
	Иначе
		Количество = 1;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("Товар"				, ПараметрыНоменклатуры.Товар);
	ПараметрыПоиска.Вставить("ИсточникПроисхождения", ПараметрыНоменклатуры.ИсточникПроисхождения);
	ПараметрыПоиска.Вставить("ЕдиницаИзмерения"	 	, ПараметрыНоменклатуры.ЕдиницаИзмерения);
	ПараметрыПоиска.Вставить("Цена"					, ПараметрыНоменклатуры.Цена);

	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыНоменклатуры);
		ТекущаяСтрока.Количество = Количество;
	Иначе
		ТекущаяСтрока            = РезультатПоиска[0];
		ТекущаяСтрока.Количество = Количество + ТекущаяСтрока.Количество;
	КонецЕсли;

	ТекущаяСтрока.ПризнакУчетаНаВиртуальномСкладе 	= ПризнакУчетаНаВиртуальномСкладе;
	ТекущаяСтрока.Сумма 							= ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	
	ТекущиеДанныеСписка = Элементы.Список.ТекущиеДанные;
	Если Не ВыбиратьВсе Тогда
		ТекущиеДанныеСписка.Остаток = ТекущиеДанныеСписка.Остаток - Количество;
	КонецЕсли;	
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	СтруктураВозврата = Новый Структура();

	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество"    , ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ЗапрашиватьЦену"          , ЗапрашиватьЦену);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПодборИсточниковПроисхождения", "ПараметрыПодбора", ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		АдресПодобраннойНоменклатурыВХранилище = ПоместитьПодобраннуюНоменклатуруВХранилище();
		СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПоместитьПодобраннуюНоменклатуруВХранилище()

	ТаблицаНоменклатуры = Объект.ПодобраннаяНоменклатура.Выгрузить();

	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);

	Возврат АдресПодобраннойНоменклатурыВХранилище;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаПеренестиТовары(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		ФормаЗакрыта       = Истина;
		Закрыть();
	ИначеЕсли  Результат = КодВозвратаДиалога.Нет Тогда
		ФормаЗакрыта = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПодобраннаяНоменклатура

&НаКлиенте
Процедура ПодобраннаяНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураКоличествоПриИзменении(Элемент)

	ТекущиеДанные       = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураЦенаПриИзменении(Элемент)

	ТекущиеДанные       = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидСправочникаПриИзмененииНаСервере()
	//Номенклатура
	Если ЗначениеЗаполнено(ВидСправочника) Тогда
		ИмяСправочника 			= Метаданные.НайтиПоТипу(ВидСправочника).Имя;
		ИмяТекущегоСправочника 	= Метаданные.НайтиПоТипу(ТекущийВидСправочника).Имя;
		
		ТекстДляЗамены 	= "Справочник." + ИмяСправочника;
		ЗаменяемыйТекст = "Справочник." + ИмяТекущегоСправочника;
		
		Если ИмяСправочника = Неопределено ИЛИ ИмяТекущегоСправочника = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		ИерархияСправочника.ТекстЗапроса 				 = СтрЗаменить(ИерархияСправочника.ТекстЗапроса, ЗаменяемыйТекст, ТекстДляЗамены);
		ИерархияСправочника.ОсновнаяТаблица 			 = ТекстДляЗамены;
		ИерархияСправочника.ДинамическоеСчитываниеДанных = Истина;
		
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, ЗаменяемыйТекст, ТекстДляЗамены);
		
		ТекущийВидСправочника = ВидСправочника; 
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьОтборПоИерархииСправочника(Товар)

	ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Список, "Номенклатура",
		Товар, ЗначениеЗаполнено(Товар), ВидСравненияКомпоновкиДанных.ВИерархии);

КонецПроцедуры

#КонецОбласти


