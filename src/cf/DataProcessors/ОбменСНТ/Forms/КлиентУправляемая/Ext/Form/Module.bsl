
#Область ОтправкаДокументовСНТ

&НаКлиенте
Процедура СоздатьСНТ(Знач Параметр) Экспорт
	
	МассивПервичныхДокументовСНТ = СНТКлиент.МассивПервичныхДокументовСНТ(Параметр);
	
	Если МассивПервичныхДокументовСНТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Исключаем все основания, в которых не содаржатся Товары (по документам без товаров не создаем СНТ)
	ТекстСообщенияНетТоваров = НСтр("ru='Для документов: '") + Символы.ПС;
	ПереченьДокументовБезТоваров = "";
	МассивДляУдаления = Новый Массив();
	Для Каждого ПервичныйДокумент Из МассивПервичныхДокументовСНТ Цикл
		
		ДокументСодержитТовары = ПроверитьОснованиеНаНаличиеТоваров(ПервичныйДокумент);
		
		Если Не ДокументСодержитТовары Тогда
			
			ПереченьДокументовБезТоваров = ПереченьДокументовБезТоваров + ПервичныйДокумент + "," + Символы.ПС;
			МассивДляУдаления.Добавить(ПервичныйДокумент);
		КонецЕсли;
		
	КонецЦикла;		
	
	Если ЗначениеЗаполнено(ПереченьДокументовБезТоваров) Тогда
			ТекстСообщенияНетТоваров = ТекстСообщенияНетТоваров + Лев(ПереченьДокументовБезТоваров, СтрДлина(ПереченьДокументовБезТоваров) - 2) + Символы.ПС + НСтр("ru='не может быть введена СНТ, отсутствуют данные по товарам.'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияНетТоваров);
						
			Для Каждого Документ Из МассивДляУдаления Цикл
				МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
			КонецЦикла;
	КонецЕсли;
	
	БылиДокументыБезТоваров = МассивДляУдаления.Количество() > 0;
	
	// Проверяем выбранные основания типа Возврат товаров от покупателя
	// оформление СНТ для таких документов возможно только для возвратов от розничного покупателя
	ДокументыВозвратовКУдалению = ПроверитьДокументыВозврата(МассивПервичныхДокументовСНТ);
	ПереченьНеподходящихДокументовВозврата = "";
	Если ДокументыВозвратовКУдалению.Количество() > 0 Тогда
		
		Для каждого Документ Из ДокументыВозвратовКУдалению Цикл
			ПереченьНеподходящихДокументовВозврата = ПереченьНеподходящихДокументовВозврата + Документ + "," + Символы.ПС;
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
		КонецЦикла;
		
		ТекстСообщенияЕстьНеподходящиеВозвраты = НСтр("ru='Для документов: '") + Символы.ПС +
			Лев(ПереченьНеподходящихДокументовВозврата, СтрДлина(ПереченьНеподходящихДокументовВозврата) - 2) + Символы.ПС + НСтр("ru='не может быть введена СНТ. СНТ можно ввести только для возвратов розничной продажи.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияЕстьНеподходящиеВозвраты);
		
		БылиДокументыБезТоваров = Истина;
		
	КонецЕсли;
	
	// Проверяем тип документа поступления, создание СНТ возможно только для операций импорта
	
	ДокументыПоступленияКУдалению = ПроверитьДокументыПоступления(МассивПервичныхДокументовСНТ);
	ПереченьНеподходящихДокументовПоступления = "";
	Если ДокументыПоступленияКУдалению.Количество() > 0 Тогда
		
		Для каждого Документ Из ДокументыПоступленияКУдалению Цикл
			ПереченьНеподходящихДокументовПоступления = ПереченьНеподходящихДокументовПоступления + Документ + "," + Символы.ПС;
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
		КонецЦикла;
		
		ТекстСообщенияЕстьНеподходящиеДокументыПоступления = НСтр("ru='Для документов поступления: '") + Символы.ПС +
			Лев(ПереченьНеподходящихДокументовПоступления, СтрДлина(ПереченьНеподходящихДокументовПоступления) - 2) + Символы.ПС + НСтр("ru='не может быть введена СНТ. СНТ можно ввести только для операции Импорт.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияЕстьНеподходящиеДокументыПоступления);
		
		БылиДокументыБезТоваров = Истина;
		
	КонецЕсли;
	
	// Проверяем выбранные основания на наличие уже созданных СНТ
	ДокументыССозданнымиСНТ = ПроверитьПервичныеДокументыНаНаличиеСНТ(МассивПервичныхДокументовСНТ);
	ПереченьДокументовУжеЕстьСНТ = "";
	ТекстСообщенияУжеЕстьСНТ = НСтр("ru='На основании документов:'") + Символы.ПС;
	Если ДокументыССозданнымиСНТ.Количество() > 0 Тогда
		
		Для Каждого Документ Из ДокументыССозданнымиСНТ Цикл
			
			ПереченьДокументовУжеЕстьСНТ = ПереченьДокументовУжеЕстьСНТ + Документ.ПервичныйДокумент + "," + Символы.ПС;
			
		КонецЦикла;
		
		ТекстСообщенияУжеЕстьСНТ = ТекстСообщенияУжеЕстьСНТ + Лев(ПереченьДокументовУжеЕстьСНТ, СтрДлина(ПереченьДокументовУжеЕстьСНТ) - 2) + Символы.ПС + НСтр("ru='уже созданы СНТ. Создать на основании них новые СНТ?'");
		
		ДополнительныеПараметры = Новый Структура("МассивПервичныхДокументовСНТ, ДокументыССозданнымиСНТ, БылиДокументыБезТоваров", МассивПервичныхДокументовСНТ, ДокументыССозданнымиСНТ, БылиДокументыБезТоваров);
		ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОСозданииНовыхСНТЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияУжеЕстьСНТ, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПродолжитьСозданиеСпискаСНТ(МассивПервичныхДокументовСНТ, БылиДокументыБезТоваров);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеСНТ(Знач МассивСНТ, Знач ДополнительныеПараметры) Экспорт
		
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	//НовыйМассивСНТ = ВСВызовСервера.ПроверитьНаличиеТоваровВиртуальногоСклада(МассивЭД, ДополнительныеПараметры);  
	
	НовыйМассивСНТ = МассивСНТ;
	
	Если НовыйМассивСНТ.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 
		
		Если НЕ СНТВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиСНТ(НовыйМассивСНТ, ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("МассивИсходящихСНТ", НовыйМассивСНТ);
		ОтправитьИсходящиеСНТПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ОтправитьИсходящиеСНТПослеВопросаУстановкиДаты", ЭтаФорма, ДополнительныеПараметры);
		СНТКлиент.УстановитьТекущуюДатуДляСНТВопрос(НовыйМассивСНТ, СНТКлиентСервер.ДействиеОтправка(), ОтправитьИсходящиеСНТПослеВопросаУстановкиДаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеСНТПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		//// если действие выполняется при закрытии открытии ИБ, очередь не должна очиститься в случае отмены исправления даты
		//Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
		//	ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(ДополнительныеПараметры.МассивИсходящихЭД);
		//КонецЕсли;

		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), ДополнительныеПараметры.МассивИсходящихСНТ);
		
		Возврат;

	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		СНТВызовСервера.УстановитьТекущуюДатуДляСНТ(ДополнительныеПараметры.МассивИсходящихСНТ, ДополнительныеПараметры.ТекущаяДата);
		ОтправитьИсходящиеСНТВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	Иначе
		ОтправитьИсходящиеСНТВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеСНТВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихСНТ = ДополнительныеПараметры.МассивИсходящихСНТ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ());
	
	КоллекцияСгруппированныхСНТ = СНТВызовСервера.СгруппироватьСНТПоСтруктурнымЕдиницам(МассивИсходящихСНТ);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхСНТ", КоллекцияСгруппированныхСНТ);
	
	ОтправитьИсходящиеСНТЗавершение = Новый ОписаниеОповещения("ОтправитьИсходящиеСНТЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата, ВызвавшийМодуль", КоллекцияСгруппированныхСНТ, Истина, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОтправитьИсходящиеСНТЗавершение, ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеСНТЗавершение(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихСНТ = ДополнительныеПараметры.МассивИсходящихСНТ;
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), МассивИсходящихСНТ);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВС = ВСВызовСервераПовтИсп.ПолучитьПараметрыВС();
	ВерсияВС = ПараметрыВС.ВерсияВС;

	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	КоллекцияСгруппированныхСНТ = ДополнительныеПараметры.КоллекцияСгруппированныхСНТ;
	
	КоллекцияПодписейСНТ = Новый Соответствие;
	КоллекцияАдресКоллекцииSntXML = Новый Соответствие;
	КоллекцияСоответствиеСНТ = Новый Соответствие;
	
	//+
	//Если ВСВызовСервера.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
	//	//Запрос ИД товаров для импортнвых документов
	//	КоллекцияСгруппированныхЭДИмпорт = ДополнительныеПараметры.КоллекцияСгруппированныхЭДИмпорт;
	//	
	//	// присвоение ИД импортным документам выполняется не в фоне, т.к. к моменту отправки ИД должны быть уже присвоены
	//	// а фоновое задание в силу своей параллельности может привести к тому, что когда будет выполняться фоновое задание на отправку (вызов ниже)
	//	// ФЗ по получению ИД еще не будет завершено.
	//	ВСВызовСервера.ПолучитьИдентификаторыТоваровУТТНизВС(КоллекцияСгруппированныхЭДИмпорт, ДанныеПрофилейИСЭСФ);
	//КонецЕсли;	
	//-
	
	Попытка
	
		Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			
			Для Каждого СгруппированныеСНТ Из КоллекцияСгруппированныхСНТ Цикл
				
				СтруктурнаяЕдиница = СгруппированныеСНТ.Ключ;
				МассивСНТ = СгруппированныеСНТ.Значение;
				
				ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
				
				ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);
				
				Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ) Тогда
					Возврат;	
				КонецЕсли;
				
				ТипПодписиЭСФ = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
				
				АдресКоллекцииSntXML = Неопределено;
				КоллекцияSignedContentXML = Неопределено;
				СНТВызовСервера.СоздатьИсходящиеSnt(МассивСНТ, Истина, ТипПодписиЭСФ, АдресКоллекцииSntXML, КоллекцияSignedContentXML, ВерсияВС);
				
				КоллекцияПодписейСНТ.Вставить(СтруктурнаяЕдиница, СНТКлиентСервер.НоваяКоллекцияПодписейСНТ(КоллекцияSignedContentXML, ДанныеКлючаЭЦП));
				
				КоллекцияСоответствиеСНТ.Вставить(СтруктурнаяЕдиница, ПолучитьИзВременногоХранилища(АдресКоллекцииSntXML));
				
				КоллекцияАдресКоллекцииSntXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииSntXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), МассивИсходящихСНТ);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки; 	
		
	// Создать и отправить коллекцию Invoice.
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
			КлючФоновогоЗадания = Новый УникальныйИдентификатор;
			
			ПараметрыЗадания = Новый Структура("ВерсияВС, КоллекцияСоответствиеСНТ, КоллекцияПодписейСНТ, ДанныеПрофилейИСЭСФ", ВерсияВС, КоллекцияСоответствиеСНТ, КоллекцияПодписейСНТ, ДанныеПрофилейИСЭСФ);
			ПараметрыВыполнения = СНТКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка СНТ'");
			ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
			
			Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ОтправитьИсходящиеSntВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Попытка
				
				Результат = СНТВызовСервера.ОтправитьИсходящиеSnt(
					ВерсияВС,
					КоллекцияАдресКоллекцииSntXML, 
					КоллекцияПодписейСНТ, 
					ДанныеПрофилейИСЭСФ
					);
					
			Исключение
				
				// обновим данные открытых форм, тк до вызова исключения часть СНТ может быть отправлена и обновлена в ИБ
				СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), МассивИсходящихСНТ);
				
				ВызватьИсключение ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииSntXML Из КоллекцияАдресКоллекцииSntXML Цикл
			
			АдресКоллекцииSntXML = СтрокаАдресКоллекцииSntXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииSntXML);
			
		КонецЦикла;

	Иначе 
		
		Результат = СНТВызовСервера.СоздатьИОтправитьКоллекциюSnt(КоллекцияСгруппированныхСНТ, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры, ВерсияВС);
		
	КонецЕсли;

	// Если отправляем из формы списка, делаем фоновую отправку
	Если ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Отправка документов в ИС ЭСФ'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("СНТ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), МассивИсходящихСНТ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИзменитьСтатусыСНТ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификаторФормыВладельца, Знач ЗапускатьФоновоеЗадание) Экспорт	
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		ТипПодписиЭСФ = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);			
		Результат = СНТВызовСервера.СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ТипПодписиЭСФ);
		
		СоответствиеПодписейСНТ = Новый Соответствие();
		sntActionInfoList = "";

		ТекстЗапроса = Результат.ТекстЗапроса; 
		
		Для Каждого ЭлементМассива из Результат.МассивЧастейЗапроса Цикл
			Подпись = СоздатьЭЦП(
			ЭлементМассива.СтрокаДляПодписи, 
			ДанныеКлючаЭЦП.КлючBase64, 
			ДанныеКлючаЭЦП.Пароль);
			ТекстЧастиЗапроса = СтрЗаменить(ЭлементМассива.ЧастьЗапроса, "[Signature]", Подпись);
			sntActionInfoList = sntActionInfoList + ТекстЧастиЗапроса;
			
			СоответствиеПодписейСНТ.Вставить(ЭлементМассива.ИД, Новый Структура("Подпись, ТипПодписи", Подпись, ТипПодписиЭСФ));	
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sntActionInfoList]", sntActionInfoList);
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ, СоответствиеПодписейСНТ", Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ, СоответствиеПодписейСНТ);
			
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			НаименованиеЗадания = НСтр("ru = '%1 СНТ'");
			НаименованиеЗадания = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ВыполнитьЗапросНаИзменениеСтатусовВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = СНТВызовСервера.ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ,, СоответствиеПодписейСНТ);
			
		КонецЕсли;
					
	Иначе 
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ", Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			
			НаименованиеЗадания = НСтр("ru = '%1 СНТ'");
			НаименованиеЗадания = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ИзменитьСтатусыСНТВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = СНТВызовСервера.ИзменитьСтатусыСНТ(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СпроситьПользователяОСозданииНовыхСНТЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	БылиИсключенияИзМассива = ДополнительныеПараметры.БылиДокументыБезТоваров;
	МассивПервичныхДокументовСНТ = ДополнительныеПараметры.МассивПервичныхДокументовСНТ;
	ДокументыССозданнымиСНТ 	 = ДополнительныеПараметры.ДокументыССозданнымиСНТ;
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого Документ Из ДокументыССозданнымиСНТ Цикл
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ.ПервичныйДокумент));
		КонецЦикла;

		БылиИсключенияИзМассива = Истина;
	КонецЕсли;
	
	//НепроведенныеПервичныеДокументы = ПроверитьНепроведенныеПервичныеДокументы (МассивПервичныхДокументовСНТ);
	//
	//ПереченьНепроведенныхПервчиныхДокументов = "";
	//ТекстСообщенияНепроведены = НСтр("ru='Документы:'") + Символы.ПС;

	//ДополнительныеПараметры = Новый Структура("МассивПервичныхДокументовСНТ, НепроведенныеПервичныеДокументы, БылиИсключенияИзМассива", МассивПервичныхДокументовСНТ, НепроведенныеПервичныеДокументы, БылиИсключенияИзМассива);

	//Если НепроведенныеПервичныеДокументы.Количество() > 0 Тогда
	//	Для Каждого Документ Из ДокументыССозданнымиСНТ Цикл
	//		
	//		ПереченьНепроведенныхПервчиныхДокументов = ПереченьНепроведенныхПервчиныхДокументов + Документ.ПервичныйДокумент + "," + Символы.ПС;
	//		
	//	КонецЦикла;
	//	ТекстСообщенияНепроведены = ТекстСообщенияНепроведены + Лев(ПереченьНепроведенныхПервчиныхДокументов, СтрДлина(ПереченьНепроведенныхПервчиныхДокументов) - 2) + Символы.ПС + НСтр("ru='не проведены. Провести документы?'");
	//	
	//	ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОПроведенииПервичныхДокументовЗавершение", ЭтаФорма, ДополнительныеПараметры);
	//	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияНепроведены, РежимДиалогаВопрос.ДаНет);
	//	
	//Иначе
		ПродолжитьСозданиеСпискаСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива);
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПользователяОПроведенииПервичныхДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	БылиИсключенияИзМассива = ДополнительныеПараметры.БылиИсключенияИзМассива;
	МассивПервичныхДокументовСНТ = ДополнительныеПараметры.МассивПервичныхДокументовСНТ;
	НепроведенныеПервичныеДокументы = ДополнительныеПараметры.НепроведенныеПервичныеДокументы;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
	
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
		КонецЦикла;

		БылиИсключенияИзМассива = Истина;
	КонецЕсли;
	
	ПродолжитьСозданиеСпискаСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива);
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеСпискаСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива)
	
	Если МассивПервичныхДокументовСНТ.Количество() > 1 Тогда 
		
		ДокументОснование = МассивПервичныхДокументовСНТ[0];
		
		ТипДокумента = ТипЗнч(ДокументОснование);
		
		МассивВидовДокумента = Новый Массив;
		
		МассивВидовДокумента.Добавить(ТипДокумента);
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("МассивДокументов"		, МассивПервичныхДокументовСНТ);
		ПараметрыСоздания.Вставить("МассивВидовДокумента"	, МассивВидовДокумента);
		ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
		ПараметрыСоздания.Вставить("ФормироватьСписокДокументов"		, Истина);
		ПараметрыСоздания.Вставить("НеРазбиватьДокумент"				, Ложь);
		ПараметрыСоздания.Вставить("ПодбиратьИсточникиПроисхождения"	, Истина);
		ПараметрыСоздания.Вставить("ДатаВыписки"	, ТекущаяДата());
		ПараметрыСоздания.Вставить("ТипСНТ"			, ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная"));
		
		СписокСНТ = СНТВызовСервера.СоздатьСписокСНТ(ПараметрыСоздания);
		
		Если СписокСНТ <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокСНТ)));
			ОткрытьФорму("Документ.СНТ.Форма.ФормаСпискаИсходящих", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	ИначеЕсли МассивПервичныхДокументовСНТ.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", МассивПервичныхДокументовСНТ[0]);
		ОткрытьФорму("Документ.СНТ.ФормаОбъекта", ПараметрыФормы);	
		
	Иначе
		// Если в этом массиве что-то есть, значит пытались создать СНТ только на основании документа(-ов) непроведённых (т.е. при создании второго экземпляра документа СНТ и отказе провести ДО) или без товаров и пользователю уже вывелось предупреждениие, дублировать не нужно
		Если Не БылиИсключенияИзМассива Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыТоваровСНТИзВС(Знач МассивСНТ, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхСНТ = СНТВызовСервера.СгруппироватьСНТПоСтруктурнымЕдиницам(МассивСНТ, Истина);
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхСНТ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхДокументов", КоллекцияСгруппированныхСНТ);
	ДополнительныеПараметры.Вставить("ТипДокумента", "СНТ");
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();		
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ПолучитьИдентификаторыТоваровПослеВыбораПрофилейИСЭСФ = Новый ОписаниеОповещения("ПолучитьИдентификаторыТоваровПослеВыбораПрофилейИСЭСФ", Контейнер, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ВызвавшийМодуль", КоллекцияСгруппированныхСНТ, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ПолучитьИдентификаторыТоваровПослеВыбораПрофилейИСЭСФ, ПараметрыФормы);	
		
	Иначе
		Контейнер.ПолучитьИдентификаторыТоваровПослеВыбораПрофилейИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСопоставлений

&НаКлиенте
Процедура ОтправитьСопоставлениеСНТиФНО(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
		
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСопоставленийСНТиФНО.Количество()=0 Тогда
		Возврат;
	Иначе
		
		//проверка 
		//Назым - вернуться
		//Если НЕ СНТВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиСНТ(МассивСопоставленийСНТиФНО, ДополнительныеПараметры) Тогда
		//	Возврат;
		//КонецЕсли;
		
		ДополнительныеПараметры.Вставить("МассивСопоставленийСНТиФНО", МассивСопоставленийСНТиФНО);
		//ОтправитьСопоставлениеСНТиФНОПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ОтправитьСопоставлениеСНТиФНОПослеВопросаУстановкиДаты", ЭтаФорма, ДополнительныеПараметры);
		//СНТКлиент.УстановитьТекущуюДатуДляСНТВопрос(НовыйМассивСНТ, СНТКлиентСервер.ДействиеОтправка(), ОтправитьСопоставлениеСНТиФНОПослеВопросаУстановкиДаты);
		
		ОтправитьСопоставлениеСНТиФНОВыборПараметровИСЭСФ(ДополнительныеПараметры);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСопоставлениеСНТиФНОВыборПараметровИСЭСФ(ДополнительныеПараметры) Экспорт
	
	МассивСопоставленийСНТиФНО = ДополнительныеПараметры.МассивСопоставленийСНТиФНО;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО());
	
	КоллекцияСгруппированныхСопоставленийСНТ = СНТВызовСервера.СгруппироватьСопоставленияСНТПоСтруктурнымЕдиницам(МассивСопоставленийСНТиФНО);
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхСопоставленийСНТ", КоллекцияСгруппированныхСопоставленийСНТ);
	
	ОтправитьСопоставлениеСНТиФНОЗавершение = Новый ОписаниеОповещения("ОтправитьСопоставлениеСНТиФНОЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата, ВызвавшийМодуль", КоллекцияСгруппированныхСопоставленийСНТ, Истина, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОтправитьСопоставлениеСНТиФНОЗавершение, ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСопоставлениеСНТиФНОЗавершение(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	МассивСопоставленийСНТиФНО = ДополнительныеПараметры.МассивСопоставленийСНТиФНО;
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), МассивСопоставленийСНТиФНО);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыВС = ВСВызовСервераПовтИсп.ПолучитьПараметрыВС();
	ВерсияВС = ПараметрыВС.ВерсияВС;

	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	КоллекцияСгруппированныхСопоставленийСНТ = ДополнительныеПараметры.КоллекцияСгруппированныхСопоставленийСНТ;
	
	КоллекцияПодписейСопоставленийСНТиФНО = Новый Соответствие;
	КоллекцияАдресКоллекцииfnoMatchingXML = Новый Соответствие;
	КоллекцияСоответствиеСопоставленийСНТиФНО = Новый Соответствие;
	
	Попытка
	
		Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			
			Для Каждого СгруппированныеСопоставленияСНТ Из КоллекцияСгруппированныхСопоставленийСНТ Цикл
				
				СтруктурнаяЕдиница = СгруппированныеСопоставленияСНТ.Ключ;
				МассивСопоставленийСНТ = СгруппированныеСопоставленияСНТ.Значение;
				
				ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
				
				ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);
				
				Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ) Тогда
					Возврат;	
				КонецЕсли;
				
				ТипПодписи = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
				
				АдресКоллекцииfnoMatchingXML = Неопределено;
				КоллекцияSignedContentXML = Неопределено;
				
				СНТВызовСервера.СоздатьИсходящиеfnoMatching(МассивСопоставленийСНТ, Истина, ТипПодписи, АдресКоллекцииfnoMatchingXML, КоллекцияSignedContentXML, ВерсияВС);
				
				КоллекцияПодписейСопоставленийСНТиФНО.Вставить(СтруктурнаяЕдиница, СНТКлиентСервер.НоваяКоллекцияПодписейСНТ(КоллекцияSignedContentXML, ДанныеКлючаЭЦП));
				КоллекцияСоответствиеСопоставленийСНТиФНО.Вставить(СтруктурнаяЕдиница, ПолучитьИзВременногоХранилища(АдресКоллекцииfnoMatchingXML));
				КоллекцияАдресКоллекцииfnoMatchingXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииfnoMatchingXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), МассивСопоставленийСНТиФНО);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки; 	
		
	// Создать и отправить коллекцию Invoice.
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
				
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
			КлючФоновогоЗадания = Новый УникальныйИдентификатор;
			
			ПараметрыЗадания = Новый Структура("ВерсияВС, КоллекцияСоответствиеСопоставленийСНТиФНО, КоллекцияПодписейСопоставленийСНТиФНО, ДанныеПрофилейИСЭСФ", 
												ВерсияВС, КоллекцияСоответствиеСопоставленийСНТиФНО, КоллекцияПодписейСопоставленийСНТиФНО, ДанныеПрофилейИСЭСФ);
												
			ПараметрыВыполнения = СНТКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка Сопоставлений СНТ и ФНО 328.00'");
			ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
			
			Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ОтправитьИсходящиеfnoMatchingВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Попытка
				
				Результат = СНТВызовСервера.ОтправитьИсходящиеfnoMatching(
					ВерсияВС,
					КоллекцияАдресКоллекцииfnoMatchingXML, 
					КоллекцияПодписейСопоставленийСНТиФНО, 
					ДанныеПрофилейИСЭСФ
					);
					
			Исключение
				
				// обновим данные открытых форм, тк до вызова исключения часть ЭСФ может быть отправлена и обновлена в ИБ
				СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), МассивСопоставленийСНТиФНО);
				
				ВызватьИсключение ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииfnoMatchingXML Из КоллекцияАдресКоллекцииfnoMatchingXML Цикл
			
			АдресКоллекцииSntXML = СтрокаАдресКоллекцииfnoMatchingXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииSntXML);
			
		КонецЦикла;

	Иначе 
		
		Результат = СНТВызовСервера.СоздатьИОтправитьКоллекциюfnoMatching(КоллекцияСгруппированныхСопоставленийСНТ, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры, ВерсияВС);
		
	КонецЕсли;

	// Если отправляем из формы списка, делаем фоновую отправку
	Если ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Отправка документов в ИС ЭСФ'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("СНТ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), МассивСопоставленийСНТиФНО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхСопСНТсФНО = СНТВызовСервера.СгруппироватьСопоставленияСНТПоСтруктурнымЕдиницам(МассивСопоставленийСНТиФНО);
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхСопСНТсФНО);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхСопСНТсФНО", КоллекцияСгруппированныхСопСНТсФНО);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОбновитьДокументыИСЭСФ = Новый ОписаниеОповещения("ОбновитьДокументыИСЭСФ", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхСопСНТсФНО);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыИСЭСФ, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыИСЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов документов Сопоставление СНТ с ФНО'");
		
		Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе

		СНТВызовСервера.ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ(ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("СопСНТсФНО_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(Знач МассивСопоставленийСНТиФНО, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхСопСНТсФНО = СНТВызовСервера.СгруппироватьСопоставленияСНТПоСтруктурнымЕдиницам(МассивСопоставленийСНТиФНО);
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхСопСНТсФНО);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхСопСНТсФНО", КоллекцияСгруппированныхСопСНТсФНО);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОшибкиДокументовИСЭСФ = Новый ОписаниеОповещения("ОшибкиДокументовИСЭСФ", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхСопСНТсФНО);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОшибкиДокументовИСЭСФ, ПараметрыФормы);	
		
	Иначе
		ОшибкиДокументовИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиДокументовИСЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка ошибок с сервера документов Сопоставление СНТ и ФНО 328.00'");
		
		Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторамВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе

		СНТВызовСервера.ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Загрузка ошибок с сервера документов Сопоставление СНТ и ФНО 328.00'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("СопСНТсФНО_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), ДополнительныеПараметры.КоллекцияСгруппированныхСопСНТсФНО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаXML
&НаКлиенте
Процедура ВыгрузитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
		
	Если МассивИсходящихСНТ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкиВозможностиВыгрузкиФайла() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьИсходящиеСНТПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ВыгрузитьИсходящиеСНТПослеВопросаУстановкиДаты", ЭтаФорма, Новый Структура("МассивИсходящихСНТ", МассивИсходящихСНТ));
	СНТКлиент.УстановитьТекущуюДатуДляЭДВопрос(МассивИсходящихСНТ, СНТКлиентСервер.ДействиеВыгрузка(), ВыгрузитьИсходящиеСНТПослеВопросаУстановкиДаты);	
КонецПроцедуры

&НаСервере
Функция ПроверкиВозможностиВыгрузкиФайла()
	
	Возврат ЭСФСерверПереопределяемый.ПроверкаПоддержкиМеханизмаВАвтономномРабочемМесте();
		
КонецФункции

&НаКлиенте
Процедура ВыгрузитьИсходящиеСНТПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;	
	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		СНТВызовСервера.УстановитьТекущуюДатуДляСНТ(ДополнительныеПараметры.МассивИсходящихСНТ, ДополнительныеПараметры.ТекущаяДата);
	КонецЕсли;
	
	XML = СНТВызовСервера.СоздатьXMLДляИмпортаВИСЭСФ(ДополнительныеПараметры.МассивИсходящихСНТ);
	
	Если НЕ ПустаяСтрока(XML) Тогда
		СНТКлиент.СохранитьXMLДляИмпортаВИСЭСФ(XML);
	КонецЕсли;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	ЭСФКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ());
	//ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры()); Мы же не будем менять дату первичного для ввода СНТ?

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	КонецЕсли;	
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);				
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

&НаКлиенте
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();		
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать Электронную сопроводительную накладную на товары.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает тип ключа (ГОСТ или RSA) файла PKCS#12.
//
// Параметры:
//  КлючBase64 - Строка - Ключевой контейнер в Base64, тип ключа которого необходимо определить.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера.
//
// Возвращаемое значение:
//  Строка - Тип ключа. См. КлючGOST(), КлючRSA().
//   Если не удалось определить тип ключа, то возвращается пустая строка.
//
&НаКлиенте
Функция ТипКлюча(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт
	
	СвойстваСертификата = СвойстваСертификата(КлючBase64, ПарольОтКлюча);	
	ТипКлюча = СвойстваСертификата.ТипКлюча;	
	Возврат ТипКлюча;
	
КонецФункции

// Возвращает сертификат открытого ключа в виде строки Base64.
//
// Параметры:
//  КлючBase64 - Строка - Файл PKCS#12 содержащий сертификат открытого ключа, в кодировке P12.
//  Пароль - Строка - Пароль к файлу PKCS#12 содержащему сертификат открытого ключа.
//
// Возвращаемое значение:
//  Строка - Сертификат открытого ключа в формате Base64.
//
&НаКлиенте
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач ПарольКлюча) Экспорт
		
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		Сертификат = Криптопровайдер.ПолучитьСертификат(ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64());
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось выполнить действие.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	СертификатBase64 = "";
	
	Для Счетчик = 1 По СтрЧислоСтрок(Сертификат) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(Сертификат, Счетчик);
		Если Найти(ТекущаяСтрока, " CERTIFICATE-----") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		СертификатBase64 = СертификатBase64 + СокрЛП(СтрПолучитьСтроку(Сертификат, Счетчик));
	КонецЦикла;
	
	СертификатBase64 = СокрЛП(СертификатBase64);
	
	Возврат СертификатBase64;
			
КонецФункции

// Возвращает свойства сертификата, извлеченные из файла *.p12.
// При выполнении происходит обращение к серверу.
//
// Параметры:
//  КлючBase64 - Строка - Файл P12 в кодировке Base64.
//  ПарольОтКлюча - Строка - Пароль от файла P12.
//
// Возвращаемое значение:
//  Структура - Свойства сертификата.
//   |- Ключ - Строка - Имя свойства сертификата.
//   |- Значение - Строка - Значение свойства сертификата.
//  Содержит все свойства из НоваяКоллекцияИдентификаторовСвойствСертификата().
//  Если какого-нибудь свойства не было в сертификате, то его значением будет пустая строка.
//
&НаКлиенте
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
&НаКлиенте
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
	
	СНТВызовСервера.ПроверитьИсходящиеСНТ(МассивИсходящихСНТ);
	
КонецПроцедуры

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаСервере(Версия = "", РежимТишины = Ложь) Экспорт
	
	Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);
			       		
	Возврат Подключается;	
	
КонецФункции

&НаКлиенте
Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ОписаниеОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

#КонецОбласти

#Область СерверныеПроцедурыИФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

&НаСервере
Функция ПроверитьПервичныеДокументыНаНаличиеСНТ(МассивПервичныхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СНТ.Ссылка) КАК Ссылка,
	               |	СНТ.ДокументОснование
	               |ИЗ
	               |	Документ.СНТ КАК СНТ
	               |ГДЕ
	               |	СНТ.ДокументОснование В(&Основание)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СНТ.ДокументОснование";
	
	Запрос.УстановитьПараметр("Основание", МассивПервичныхДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументовССНТ = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументССНТ = Новый Структура();
		
		ДокументССНТ.Вставить("СНТ", Выборка.Ссылка);
		ДокументССНТ.Вставить("ПервичныйДокумент", Выборка.ДокументОснование);
		
		МассивДокументовССНТ.Добавить(ДокументССНТ);
		
	КонецЦикла;
	
	Возврат МассивДокументовССНТ;
	
КонецФункции

&НаСервере
Функция ПроверитьНепроведенныеПервичныеДокументы(МассивПервичныхДокументов)
	
	НепроведенныеПервичныеДокументы = Новый Массив();
	
	Для Каждого Документ Из МассивПервичныхДокументов Цикл
		
		Если Не ЗначениеЗаполнено(Документ.Ссылка)
			Или Не Документ.Проведен
			//Или Документ.Объект.Модифицированность() 
			Тогда
			НепроведенныеПервичныеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НепроведенныеПервичныеДокументы;
	
КонецФункции

&Насервере
Функция ПроверитьОснованиеНаНаличиеТоваров(ПервичныйДокумент)
	
	ЕстьТовары = ЗначениеЗаполнено(ПервичныйДокумент.Товары);
	
	Возврат ЕстьТовары;
	
КонецФункции

&НаСервере
Функция ПроверитьДокументыВозврата(МассивПервичныхДокументов)
	
	МассивДокументов = СНТСерверПереопределяемый.ПолучитьДокументыВозвратаОптовыхПродаж(МассивПервичныхДокументов);
	Возврат МассивДокументов;
	
КонецФункции

&НаСервере
Функция ПроверитьДокументыПоступления(МассивПервичныхДокументов)
	
	МассивДокументов = СНТСерверПереопределяемый.ПолучитьДокументыПоступленияНеИмпорт(МассивПервичныхДокументов);
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти

#Область Криптография

&НаКлиенте
Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

&НаКлиенте
Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

&НаКлиенте
Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

&НаКлиенте
Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

#КонецОбласти

#Область Сертификат

&НаКлиенте
Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

&НаКлиенте
Функция НовыеСвойстваСертификата() 
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПримитивныеКонстанты

&НаКлиенте
Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

&НаКлиенте
Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

&НаКлиенте
Функция ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64() Экспорт
	Возврат 1;	
КонецФункции

&НаКлиенте
Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

// не имеет директив
Функция ИмяКомпонентыКриптографии() Экспорт
	
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс") + ЭСФВызовСервераПовтИсп.ПолучитьЭСФВерсияВнешнегоМодуля();
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "CryptoAPI" + УникальныйНомерКомпоненты;
	
КонецФункции

// не имеет директив
Функция ИмяОбъектаКриптографии() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографии() + ".Crypto";	
КонецФункции

&НаКлиенте
Функция ПолноеИмяФормыУстановкаКриптографии() Экспорт
	Возврат "Обработка.ОбменЭСФ.Форма.УстановкаКриптографии";	
КонецФункции

&НаКлиенте
Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

&НаКлиенте
Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

#КонецОбласти

#Область ОткрытиеФорм

&НаКлиенте
Процедура ПриОткрытииФормы(Форма, Отказ) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзменениеСтатусовСНТ(Знач Действие, Знач МассивСНТ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	ПараметрыФормы = СНТКлиентСервер.ПустыеПараметрыФормыИзменениеСтатусовСНТ();
	ПараметрыФормы.Действие = Действие;
	ПараметрыФормы.МассивСНТ = МассивСНТ;
	ПараметрыФормы.ЗапускатьФоновоеЗадание = ЗапускатьФоновоеЗадание;
	
	ОткрытьФорму("Обработка.ОбменСНТ.Форма.ИзменениеСтатусовСНТ", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СоздатьЭСФИзСНТ

&НаКлиенте
Процедура СоздатьЭСФИзСНТ(Знач Параметр) Экспорт
	
	МассивСНТ = СНТКлиент.МассивСНТ(Параметр);
		
	Если МассивСНТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСНТ.Количество() > 1 Тогда 
		
		ТекстВопроса = НСтр(
		"ru = 'Для выделенных СНТ будут созданы и записаны документы ЭСФ и Счет - фактура.
		|Продолжить?'");
		
		ДополнительныеПараметры = Новый Структура("МассивСНТ", МассивСНТ);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокЭСФИСФЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли МассивСНТ.Количество() = 1 Тогда
		
		ДополнительныеПараметры = Новый Структура("МассивСНТ", МассивСНТ);
		СоздатьСписокЭСФИСФЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	Иначе // МассивСНТ.Количество() = 0 Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы одну СНТ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписокЭСФИСФЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МассивСНТ = ДополнительныеПараметры.МассивСНТ;
		СписокСозданныхЭСФ = СНТВызовСервера.СоздатьСписокИсходящихЭСФиСФИзСНТ(МассивСНТ);
		
		Если СписокСозданныхЭСФ <> Неопределено И СписокСозданныхЭСФ.Количество() > 0 Тогда
			Для Каждого СозданногоЭСФ  Из СписокСозданныхЭСФ Цикл		
				Если ТипЗнч(СозданногоЭСФ) = Тип("ДокументСсылка.ЭСФ") Тогда
					ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), СозданногоЭСФ);	
				Иначе 
					ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры(), СозданногоЭСФ);
				КонецЕсли;
			КонецЦикла; 
			ПараметрыФормы = Новый Структура;	
			ПараметрыФормы.Вставить("МасивДокументов", СписокСозданныхЭСФ);
			ОткрытьФорму("Обработка.ОбменСНТ.Форма.СписокЭСФИСФ", ПараметрыФормы,, Истина);			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СоздатьПервчиныйдокументИзСНТ

&НаКлиенте
Процедура СоздатьПервичныйДокумент(Знач Параметр) Экспорт
	
	//МассивСНТДляСозданияПервичныхДокументов = СНТКлиент.МассивСНТДляСозданияПервичныхДокументов(Параметр);
	МассивСНТДляСозданияПервичныхДокументов = СНТКлиент.МассивСНТ(Параметр);
	
	Если МассивСНТДляСозданияПервичныхДокументов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСНТНеПоИмпорту = СНТВызовСервера.МассивСНТНеПоИмпорту(МассивСНТДляСозданияПервичныхДокументов);
	Если МассивСНТНеПоИмпорту.Количество() <> 0 Тогда
		Для Каждого СНТ Из МассивСНТНеПоИмпорту Цикл
			МассивСНТДляСозданияПервичныхДокументов.Удалить(МассивСНТДляСозданияПервичныхДокументов.Найти(СНТ));
		КонецЦикла;
	КонецЕсли;
	
	МассивСНТНаВозврат = СНТВызовСервера.МассивСНТНаВозврат(МассивСНТДляСозданияПервичныхДокументов);
	Если МассивСНТНаВозврат.Количество() > 0 И МассивСНТДляСозданияПервичныхДокументов.Количество() > МассивСНТНаВозврат.Количество() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для создания первичного документа необходимо выбрать только документы с типом ""На возврат"" или с типом ""Исправленная"" и ""Первичная"".'"));
		
		Возврат;
	КонецЕсли;
	
	СтруктураМассивСНТ = СНТВызовСервера.МассивСНТСДокументомОснованияИБез(Параметр);
	МассивСНТСДокументомОснования = СтруктураМассивСНТ.МассивСНТСДокументомОснования;
	МассивСНТБезДокументаОснования = СтруктураМассивСНТ.МассивСНТБезДокументаОснования;	
	
	Если МассивСНТДляСозданияПервичныхДокументов.Количество() > 1 Тогда 
		
		Если МассивСНТСДокументомОснования.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru = 'На основании документов: 
			|%1 
			|уже созданы документы - основания. Создать на основании них новые документы?'");
			ТекстМассивСНТСДокументомОснования = "";
			Для Каждого СтрокаМассива Из МассивСНТСДокументомОснования Цикл
				ТекстМассивСНТСДокументамиОснования = ТекстМассивСНТСДокументомОснования + ?(ТекстМассивСНТСДокументомОснования = "", "", "; 
				|") + СтрокаМассива;																									
			КонецЦикла;	
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекстМассивСНТСДокументамиОснования);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивСНТДляСозданияПервичныхДокументов", МассивСНТДляСозданияПервичныхДокументов);
			ДополнительныеПараметры.Вставить("МассивСНТБезДокументаОснования", МассивСНТБезДокументаОснования);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокПервичныхДокументовЗавершение",ЭтотОбъект , ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выделенных документов будут созданы и записаны документы - основания.
			|Продолжить?'");
			ТекстМассивСНТСДокументомОснования = "";
			
			ДополнительныеПараметры = Новый Структура("МассивСНТДляСозданияПервичныхДокументов", МассивСНТДляСозданияПервичныхДокументов);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
		
	ИначеЕсли МассивСНТДляСозданияПервичныхДокументов.Количество() = 1 Тогда
		
		Если МассивСНТСДокументомОснования.Количество() <> 0  Тогда
			ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже создан документ - основание.
			|Создать новый документ?'");
		Иначе
			ТекстВопроса = НСтр(
			"ru = 'Для СНТ будет создан и записан документ - основание.
			|Продолжить?'");
		КонецЕсли;	
		
		ДополнительныеПараметры = Новый Структура("МассивСНТДляСозданияПервичныхДокументов", МассивСНТДляСозданияПервичныхДокументов);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли МассивСНТНеПоИмпорту.Количество() <> 0 И МассивСНТДляСозданияПервичныхДокументов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для исходящих ""СНТ"" создание первичного документа возможно только для импорта.'"));
		
	Иначе 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписокПервичныхДокументовЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = Новый Структура("МассивСНТДляСозданияПервичныхДокументов", ДополнительныеПараметры.МассивСНТДляСозданияПервичныхДокументов);
	Иначе
		ДополнительныеПараметры = Новый Структура("МассивСНТДляСозданияПервичныхДокументов", ДополнительныеПараметры.МассивСНТБезДокументаОснования);
	КонецЕсли;
	
	//Если ДополнительныеПараметры.МассивСНТДляСозданияПервичныхДокументов.Количество() > 1 Тогда
		ТекстВопроса = НСтр(
		"ru = 'Для выделенных документов будут созданы и записаны документы поступления.
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьПервичныеДокументыЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыСНТИзИСЭСФ(Знач МассивСНТ, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхСНТ = СНТВызовСервера.СгруппироватьСНТПоСтруктурнымЕдиницам(МассивСНТ);
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхСНТ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхСНТ", КоллекцияСгруппированныхСНТ);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФ = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФ", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхСНТ);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыВыборДанныхПрофилейИСЭСФ, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВыборДанныхПрофилейИСЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхСНТ, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхСНТ, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов СНТ'");
		
		Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ОбновитьДокументыСНТИзИСЭСФВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
							
		СНТВызовСервера.ОбновитьДокументыСНТИзИСЭСФ(ДополнительныеПараметры.КоллекцияСгруппированныхСНТ, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("СНТ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), ДополнительныеПараметры.КоллекцияСгруппированныхСНТ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПервичныеДокументыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
	 
		СписокПервичныхДокументов = СНТВызовСервера.СоздатьСписокПервичныхДокументов(ДополнительныеПараметры);
		
		Если СписокПервичныхДокументов <> Неопределено И СписокПервичныхДокументов.Количество() > 0 Тогда
			СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ());
			ИмяПервичногоДокумента = СНТКлиентСерверПереопределяемый.ОпределитьНаименованиеПервичногоДокумента(СписокПервичныхДокументов[0]);
			
			Если СписокПервичныхДокументов.Количество() > 1 Тогда
				
				ПараметрыФормы = Новый Структура;	
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокПервичныхДокументов)));
				ОткрытьФорму("Документ." + ИмяПервичногоДокумента + ".Форма.ФормаСписка", ПараметрыФормы,, Истина);
				
			Иначе 
				//ПараметрыФормы = Новый Структура;	
				//ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокПервичныхДокументов)));
				//ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента", ПараметрыФормы,, Истина);
				
				ПТУ_БК = СНТКлиентПереопределяемый.ПроверитьИмяДокументаПТУ(ИмяПервичногоДокумента);
				Если ПТУ_БК Тогда
					ПоказатьЗначение(, СписокПервичныхДокументов[0]);
				Иначе
					ОткрытьФорму("Документ." + ИмяПервичногоДокумента + ".Форма.ФормаДокумента", Новый Структура("Ключ", СписокПервичныхДокументов[0]));
				КонецЕсли;
				
			Конецесли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокСНТ(Знач Направление = Неопределено) Экспорт
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		ОткрытьФорму("Документ.СНТ.Форма.ФормаСпискаВходящих");
	ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		ОткрытьФорму("Документ.СНТ.Форма.ФормаСпискаИсходящих");
	Иначе
		ОткрытьФорму("Документ.СНТ.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

#Область ВиртуальныеСкладыКонтрагентов

&НаКлиенте
Функция ОбновитьВиртуальныеСкладыКонтрагентовИзВС(Знач МассивСкладов, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхКонтрагентов = СНТВызовСервера.СгруппироватьВСКонтрагентовПоСтруктурнымЕдиницам(МассивСкладов);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхКонтрагентов", КоллекцияСгруппированныхКонтрагентов);
	
	ОбновитьСкладыВыборДанныхПрофилейИСЭСФ = Новый ОписаниеОповещения("ОбновитьВиртуальныеСкладыВыборДанныхПрофилейВС", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("ТребуетсяВыборПрофиляИСЭСФ, ВызвавшийМодуль", Истина, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьСкладыВыборДанныхПрофилейИСЭСФ, ПараметрыФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВиртуальныеСкладыВыборДанныхПрофилейВС(ДанныеПрофиляИСЭСФ, ДополнительныеПараметры) Экспорт
	
	Если ДанныеПрофиляИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхКонтрагентов, ДанныеПрофиляИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхКонтрагентов, ДанныеПрофиляИСЭСФ);
		
		ПараметрыВыполнения = СНТКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление виртуальных складов контрагентов'");
		
		Результат = СНТВызовСервера.ВыполнитьВФоне("СНТВызовСервера.ОбновитьВСКонтрагентовИзВСВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
		
		СНТВызовСервера.ОбновитьВСКонтрагентовИзВС(ДополнительныеПараметры.КоллекцияСгруппированныхКонтрагентов, ДанныеПрофиляИСЭСФ);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление виртуальных складов контрагентов'"));
		КонецЕсли;
		СНТКлиент.ОповеститьФормы("ВС_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		СНТКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьВСКонтрагента(), ДополнительныеПараметры.КоллекцияСгруппированныхКонтрагентов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеСНТПоОснованию

&НаКлиенте
Процедура ПерезаполнитьСНТ(Знач Параметр) Экспорт
	
	МассивСНТ = СНТКлиент.МассивСНТ(Параметр);
	
	Если МассивСНТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСНТ.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы одну СНТ.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхОснований = СНТВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхОснований(МассивСНТ);
	
	ПерезаполнитьСНТЗавершение = Новый ОписаниеОповещения("ПерезаполнитьСНТЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхОснований", СоответствиеДляОбновленияАктуальныхОснований));
	
	Если СоответствиеДляОбновленияАктуальныхОснований.Количество() = МассивСНТ.Количество() Тогда
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьСНТЗавершение, НСтр("ru = 'Перезаполнить СНТ на основании документов-оснований?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%СНТ%"" на основании документа-основания?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СНТ%", МассивСНТ[0]);
			ПоказатьВопрос(ПерезаполнитьСНТЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() <> 0 Тогда
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все электронные сопроводительные накладные.
             |
             |Всего СНТ: %ВсегоКоличество% шт.
             |Возможно перезаполнить СНТ: %ВозможноКоличество% шт.
             |
             |Перезаполнить электронные сопроводительные накладные на товары, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", 	 МассивСНТ.Количество());
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхОснований.Количество());
		ПоказатьВопрос(ПерезаполнитьСНТЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСНТЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		СоответствиеДляОбновленияАктуальныхОснований = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхОснований;
		СНТВызовСервера.ОбновитьАктуальныеСНТ(СоответствиеДляОбновленияАктуальныхОснований);
		ЭСФКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ());
		Если СоответствиеДляОбновленияАктуальныхОснований.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Электронные сопроводительные на товары успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхОснований.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Электронная сопроводительная накладная успешно перезаполнена.'"));
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СозданиеИсправленныхСНТ

&НаКлиенте
Процедура ВыписатьИсправленнуюСНТ(Знач Параметр) Экспорт
	
	МассивПервичныхДокументовСНТ = СНТКлиент.МассивПервичныхДокументовСНТ(Параметр);
	
	Если МассивПервичныхДокументовСНТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Исключаем все основания, в которых нет первичной СНТ
	ТекстСообщенияНетСНТ = НСтр("ru='Для документов: '") + Символы.ПС;
	ПереченьДокументовБезСНТ = "";
	МассивДляУдаления = Новый Массив();

	СоответствиеПервичныеДокументыДанныеСНТ = ПроверитьНаличиеСвязанныхСНТ(МассивПервичныхДокументовСНТ);
		
	Для Каждого ПервичныйДокумент Из МассивПервичныхДокументовСНТ Цикл
		
		ДанныеСНТ = СоответствиеПервичныеДокументыДанныеСНТ.Получить(ПервичныйДокумент);
		Если ДанныеСНТ = Неопределено Тогда
			ПереченьДокументовБезСНТ = ПереченьДокументовБезСНТ + ПервичныйДокумент + "," + Символы.ПС;
			МассивДляУдаления.Добавить(ПервичныйДокумент);
		КонецЕсли;
	КонецЦикла;		
	
	Если ЗначениеЗаполнено(ПереченьДокументовБезСНТ) Тогда
			ТекстСообщенияНетСНТ = ТекстСообщенияНетСНТ + Лев(ПереченьДокументовБезСНТ, СтрДлина(ПереченьДокументовБезСНТ) - 2) + Символы.ПС + НСтр("ru='не может быть введена исправительная СНТ, т.к. отсутствует первичная СНТ.'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщенияНетСНТ);
						
			Для Каждого Документ Из МассивДляУдаления Цикл
				МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
			КонецЦикла;
	КонецЕсли;
	
	БылиИсключенияИзМассива = МассивДляУдаления.Количество() > 0;
	
	ДокументыССозданнымиИсправленнымиСНТ = ПроверитьПервичныеДокументыНаНаличиеИсправленныхСНТ(МассивПервичныхДокументовСНТ);
	ПереченьДокументовУжеЕстьИсправленныеСНТ = "";
	ТекстСообщенияУжеЕстьИсправленныеСНТ = НСтр("ru='На основании документов:'") + Символы.ПС;
	МассивДляУдаления = Новый Массив();

	ДополнительныеПараметры = Новый Структура("МассивПервичныхДокументовСНТ, ДокументыССозданнымиИсправленнымиСНТ, СоответствиеПервичныеДокументыДанныеСНТ, БылиИсключенияИзМассива", МассивПервичныхДокументовСНТ, ДокументыССозданнымиИсправленнымиСНТ, СоответствиеПервичныеДокументыДанныеСНТ, БылиИсключенияИзМассива);

	Если ДокументыССозданнымиИсправленнымиСНТ.Количество() > 0 Тогда
		
		Для Каждого Документ Из ДокументыССозданнымиИсправленнымиСНТ Цикл
			
			ПереченьДокументовУжеЕстьИсправленныеСНТ = ПереченьДокументовУжеЕстьИсправленныеСНТ + Документ.ПервичныйДокумент + "," + Символы.ПС;
			МассивДляУдаления.Добавить(Документ);
		КонецЦикла;
		
		ТекстСообщенияУжеЕстьИсправленныеСНТ = ТекстСообщенияУжеЕстьИсправленныеСНТ + Лев(ПереченьДокументовУжеЕстьИсправленныеСНТ, СтрДлина(ТекстСообщенияУжеЕстьИсправленныеСНТ) - 2) + Символы.ПС + НСтр("ru='уже созданы исправленные СНТ. Создать на основании них новые СНТ?'");
		
		//ДополнительныеПараметры = Новый Структура("МассивПервичныхДокументовСНТ, ДокументыССозданнымиИсправленнымиСНТ", МассивПервичныхДокументовСНТ, ДокументыССозданнымиИсправленнымиСНТ);
		ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОСозданииНовыхИсправленныхСНТЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияУжеЕстьИсправленныеСНТ, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		//ПродолжитьСозданиеСпискаИсправленныхСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива);
		СпроситьПользователяОСозданииНовыхИсправленныхСНТЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры)
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПользователяОСозданииНовыхИсправленныхСНТЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	БылиИсключенияИзМассива = ДополнительныеПараметры.БылиИсключенияИзМассива;
	МассивПервичныхДокументовСНТ = ДополнительныеПараметры.МассивПервичныхДокументовСНТ;
	ДокументыССозданнымиИсправленнымиСНТ 	 = ДополнительныеПараметры.ДокументыССозданнымиИсправленнымиСНТ;
	СоответствиеПервичныеДокументыДанныеСНТ  = ДополнительныеПараметры.СоответствиеПервичныеДокументыДанныеСНТ;
		
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Для Каждого Документ Из ДокументыССозданнымиИсправленнымиСНТ Цикл
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ.ПервичныйДокумент));
		КонецЦикла;

		БылиИсключенияИзМассива = Истина;
	КонецЕсли;
	
	НепроведенныеПервичныеДокументы = ПроверитьНепроведенныеПервичныеДокументы (МассивПервичныхДокументовСНТ);
	
	ПереченьНепроведенныхПервчиныхДокументов = "";
	ТекстСообщенияНепроведены = НСтр("ru='Документы:'") + Символы.ПС;

	ДополнительныеПараметры = Новый Структура("МассивПервичныхДокументовСНТ, НепроведенныеПервичныеДокументы, БылиИсключенияИзМассива, СоответствиеПервичныеДокументыДанныеСНТ", МассивПервичныхДокументовСНТ, НепроведенныеПервичныеДокументы, БылиИсключенияИзМассива, СоответствиеПервичныеДокументыДанныеСНТ);

	Если НепроведенныеПервичныеДокументы.Количество() > 0 Тогда
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			ПереченьНепроведенныхПервчиныхДокументов = ПереченьНепроведенныхПервчиныхДокументов + Документ + "," + Символы.ПС;
		КонецЦикла;
		ТекстСообщенияНепроведены = ТекстСообщенияНепроведены + Лев(ПереченьНепроведенныхПервчиныхДокументов, СтрДлина(ПереченьНепроведенныхПервчиныхДокументов) - 2) + Символы.ПС + НСтр("ru='не проведены. Провести документы?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьПользователяОПроведенииПервичныхДокументовИсправленныеСНТЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщенияНепроведены, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПродолжитьСозданиеСпискаИсправленныхСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПользователяОПроведенииПервичныхДокументовИсправленныеСНТЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	БылиИсключенияИзМассива = ДополнительныеПараметры.БылиИсключенияИзМассива;
	МассивПервичныхДокументовСНТ = ДополнительныеПараметры.МассивПервичныхДокументовСНТ;
	НепроведенныеПервичныеДокументы = ДополнительныеПараметры.НепроведенныеПервичныеДокументы;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Для Каждого Документ Из НепроведенныеПервичныеДокументы Цикл
			МассивПервичныхДокументовСНТ.Удалить(МассивПервичныхДокументовСНТ.Найти(Документ));
		КонецЦикла;
		
		БылиИсключенияИзМассива = Истина;
	КонецЕсли;
	
	ПродолжитьСозданиеСпискаИсправленныхСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива, ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеСпискаИсправленныхСНТ(МассивПервичныхДокументовСНТ, БылиИсключенияИзМассива = Ложь, ДополнительныеПараметры)
	
	СоответствиеПервичныеДокументыДанныеСНТ = ДополнительныеПараметры.СоответствиеПервичныеДокументыДанныеСНТ;

	Если МассивПервичныхДокументовСНТ.Количество() > 1 Тогда 
		
		ДокументОснование = МассивПервичныхДокументовСНТ[0];
		
		ТипДокумента = ТипЗнч(ДокументОснование);
		
		МассивВидовДокумента = Новый Массив;
		
		МассивВидовДокумента.Добавить(ТипДокумента);
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("МассивДокументов"		, МассивПервичныхДокументовСНТ);
		ПараметрыСоздания.Вставить("МассивВидовДокумента"	, МассивВидовДокумента);
		ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
		ПараметрыСоздания.Вставить("ФормироватьСписокДокументов"		, Истина);
		ПараметрыСоздания.Вставить("НеРазбиватьДокумент"				, Ложь);
		ПараметрыСоздания.Вставить("ПодбиратьИсточникиПроисхождения"	, Истина);
		ПараметрыСоздания.Вставить("ДатаВыписки"	, ТекущаяДата());
		ПараметрыСоздания.Вставить("ТипСНТ"			, ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная"));
		ПараметрыСоздания.Вставить("СоответствиеПервичныеДокументыДанныеСНТ", СоответствиеПервичныеДокументыДанныеСНТ);
		ПараметрыСоздания.Вставить("ЭтоИсправленнаяСНТ", Истина);
		
		СписокСНТ = СНТВызовСервера.СоздатьСписокСНТ(ПараметрыСоздания);
		
		Если СписокСНТ <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокСНТ)));
			ОткрытьФорму("Документ.СНТ.Форма.ФормаСпискаИсходящих", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	ИначеЕсли МассивПервичныхДокументовСНТ.Количество() = 1 Тогда
		
		ДанныеСНТ = СоответствиеПервичныеДокументыДанныеСНТ.Получить(МассивПервичныхДокументовСНТ[0]);
		ПараметрыФормы = Новый Структура;
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", МассивПервичныхДокументовСНТ[0]);
		ДанныеЗаполнения.Вставить("ЭтоИсправленнаяСНТ", Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		Форма = ПолучитьФорму("Документ.СНТ.ФормаОбъекта", ПараметрыФормы);
		Форма.Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная");
		Форма.Объект.СвязанныйСНТ = ДанныеСНТ.Ссылка;
		Если Не ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерСвязанногоСНТ) Тогда
			Форма.Объект.РегистрационныйНомерСвязанногоСНТ =ДанныеСНТ.РегистрационныйНомерИСЭСФ;
		КонецЕсли;
		
		Форма.Открыть();
		
	Иначе
		// Если в этом массиве что-то есть, значит пытались создать СНТ только на основании документа(-ов) непроведённого ДО (т.е. при создании второго экземпляра документа СНТ и отказе провести ДО) или без товаров и пользователю уже вывелось предупреждениие, дублировать не нужно
		Если Не БылиИсключенияИзМассива Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один документ.'"));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&Насервере
Функция ПроверитьНаличиеСвязанныхСНТ(МассивПервичныхДокументовСНТ)
	
	Возврат СНТСервер.ПроверитьНаличиеСвязанныхСНТ(МассивПервичныхДокументовСНТ);
	
КонецФункции

&НаСервере
Функция ПроверитьПервичныеДокументыНаНаличиеИсправленныхСНТ(МассивПервичныхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СНТ.Ссылка) КАК Ссылка,
	               |	СНТ.ДокументОснование,
	               |	СНТ.ТипСНТ
	               |ПОМЕСТИТЬ ВТ_СНТ
	               |ИЗ
	               |	Документ.СНТ КАК СНТ
	               |ГДЕ
	               |	СНТ.ДокументОснование В(&Основание)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СНТ.ДокументОснование,
	               |	СНТ.ТипСНТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_СНТ.Ссылка) КАК Ссылка,
	               |	ВТ_СНТ.ДокументОснование
	               |ИЗ
	               |	ВТ_СНТ КАК ВТ_СНТ
	               |ГДЕ
	               |	ВТ_СНТ.ТипСНТ = &ТипСНТ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СНТ.ДокументОснование";
	
	Запрос.УстановитьПараметр("Основание", МассивПервичныхДокументов);
	Запрос.УстановитьПараметр("ТипСНТ", ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументовСИсправленнойСНТ = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументССНТ = Новый Структура();
		
		ДокументССНТ.Вставить("ИсправленнаяСНТ", Выборка.Ссылка);
		ДокументССНТ.Вставить("ПервичныйДокумент", Выборка.ДокументОснование);
		
		МассивДокументовСИсправленнойСНТ.Добавить(ДокументССНТ);
		
	КонецЦикла;
	
	Возврат МассивДокументовСИсправленнойСНТ;
	
КонецФункции

#КонецОбласти
