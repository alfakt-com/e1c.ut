#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем КэшированнаяФабрикаСНТ_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрикаSntInfo_Версия1;

#Область ОбработчикиСобытийМодуляОбъектаСНТ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий документа СНТ

Процедура ДокументСНТ_ОбработкаЗаполнения(ОбъектСНТ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ПросмотрЗагружаемогоСНТ") Тогда
		
		Если ДанныеЗаполнения.ПросмотрЗагружаемогоСНТ Тогда
			
			SntInfo = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ДанныеЗаполнения.XML, ФабрикаXDTO);
			ЗаполнитьСНТ(SntInfo, ДанныеЗаполнения.СтруктурнаяЕдиница, ДанныеЗаполнения.Реквизиты.Направление, ОбъектСНТ);
			ЗаполнитьЗначенияСвойств(ОбъектСНТ, ДанныеЗаполнения.Реквизиты);
			Возврат;
		КонецЕсли;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	ВидДвижения = СНТКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения().Получить(ТипДокумента);
	Если ВидДвижения = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = СНТСервер.ПолучитьПараметрыЗаполненияСНТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"		, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"	, Новый Массив);
	
	Если ВидДвижения = "Приход" Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены", Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены", ВидДвижения <> "ЭСФ");
	КонецЕсли;
	
	ЭтоИсправленнаяСНТ = Ложь;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ЭтоИсправленнаяСНТ") Тогда
		ЭтоИсправленнаяСНТ = ДанныеЗаполнения.ЭтоИсправленнаяСНТ;
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ЭтоИсправленнаяСНТ", ЭтоИсправленнаяСНТ);
	
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыЗаполнения);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		Для каждого СтруктураДокумента Из МассивДанныхДляЗаполнения Цикл
			
			Если МассивДанныхДляЗаполнения.Найти(СтруктураДокумента) > 0 Тогда
				НовыйДокументСНТ =Документы.СНТ.СоздатьДокумент();
			Иначе
				НовыйДокументСНТ = ОбъектСНТ;
			КонецЕсли; 
			
			//Заполняем шапку документа
			ЗаполнитьЗначенияСвойств(НовыйДокументСНТ, СтруктураДокумента.Реквизиты[0]);
			НовыйДокументСНТ.Дата = ПараметрыЗаполнения.ДатаДокумента;
			
			Если Не ЗначениеЗаполнено(НовыйДокументСНТ.Грузополучатель) Тогда
				НовыйДокументСНТ.Грузополучатель = СтруктураДокумента.Реквизиты[0].Получатель;
				НовыйДокументСНТ.ГрузополучательНаименование = СтруктураДокумента.Реквизиты[0].ПолучательНаименование;
				НовыйДокументСНТ.ГрузополучательИдентификатор = СтруктураДокумента.Реквизиты[0].ПолучательИдентификатор;
				НовыйДокументСНТ.ГрузополучательНерезидент = СтруктураДокумента.Реквизиты[0].ПолучательНерезидент;
				НовыйДокументСНТ.ГрузополучательКодСтраныОтправки = СтруктураДокумента.Реквизиты[0].ПолучательКодСтраны;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовыйДокументСНТ.Грузоотправитель) Тогда
				НовыйДокументСНТ.Грузоотправитель = СтруктураДокумента.Реквизиты[0].Поставщик;
				НовыйДокументСНТ.ГрузоотправительНаименование = СтруктураДокумента.Реквизиты[0].ПоставщикНаименование;
				НовыйДокументСНТ.ГрузоотправительИдентификатор = СтруктураДокумента.Реквизиты[0].ПоставщикИдентификатор;
				НовыйДокументСНТ.ГрузоотправительНерезидент = СтруктураДокумента.Реквизиты[0].ПоставщикНерезидент;
				НовыйДокументСНТ.ГрузоотправительКодСтраныОтправки = СтруктураДокумента.Реквизиты[0].ПоставщикКодСтраны;
			КонецЕсли;
			
			НовыйДокументСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий; 
			НовыйДокументСНТ.Состояние = Перечисления.СостоянияСНТ.Сформирован;
			
			// Если получатель РозничныйПокупатель
			СНТСерверПереопределяемый.ПолучательРозничныйПокупатель(НовыйДокументСНТ);
			
			//Заполняем табличную часть "Товары"
			Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
				
				НоваяСтрокаТЧ = НовыйДокументСНТ.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			КонецЦикла;
			
			//Заполняем табличную часть "ТоварыВС"
			Для Каждого СтрокаТЧ Из СтруктураДокумента.ТоварыВС Цикл
				
				НоваяСтрокаТЧ = НовыйДокументСНТ.ТоварыВС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
				НоваяСтрокаТЧ.ДополнительныйИдентификатор = СтрокаТЧ.ИсточникПроисхождения.ДополнительныйИдентификатор;
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрокаТЧ.НомерСтрокиСНТ) Тогда
					НоваяСтрокаТЧ.НомерСтрокиСНТ = НоваяСтрокаТЧ.НомерСтроки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСНТ_ОбработкаПроведения(ОбъектСНТ, Отказ, РежимПроведения) Экспорт
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ВСОбщегоНазначения.ПодготовитьНаборыЗаписейКПроведению(ОбъектСНТ);
	
	Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Ошибочный 
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Импортированный Тогда 
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запрещено проведение документа в статусах ""Ошибочный"", ""Черновик импортирован"".'"));
		Отказ = Истина;
	КонецЕсли;
	
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
		
		Если (СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ)) 
			И НЕ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Доставленный ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван) 
			Тогда
			
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа разрешено только в статусах ""Доставлен"", ""Подтвержден"", ""Отклонен"" или ""Отозван"" '"));
			Отказ = Истина;
			
		ИначеЕсли НЕ(СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ))
			И НЕ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван) Тогда 
			
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа разрешено только в статусах ""Подтвержден"", ""Отклонен"" или ""Отозван"" '"));
			Отказ = Истина;
			
		КонецЕсли;
		
		// Проверка входящих СНТ с условиями, когда не требуется подтверждение
		Если (СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ))
			И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Доставленный ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван) 
			И (НЕ ЗначениеЗаполнено(ОбъектСНТ.СкладПолучатель)) Тогда
			
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Не заполнено поле ""Склад получатель"".'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектСНТ.ДатаПриема = Дата(1,1,1) И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен Тогда
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. В разделе М. Приемка товара не заполнена ""Дата приема/отклонения товара""'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если ОбъектСНТ.ДатаОтзыва = Дата(1,1,1) И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван Тогда
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. В разделе Прочее не заполнена ""Дата отзыва товара""'"));
		Отказ = Истина;
	КонецЕсли;
		
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз
		И ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС Тогда 
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа не возможно в состоянии ""Ожидает идентификации товаров на ВС""'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз  
		И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (НЕ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден 
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен)) Тогда 
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Проведение документа разрешено только в статусах ""Подтвержден"" или ""Отклонен""  '"));
		Отказ = Истина;
	КонецЕсли;
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами 
		И НЕ (ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ПодтвержденПолучателем ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОтклоненПолучателем) 
	Тогда 
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Проведение документа разрешено только в статусах ""Подтвержден"" или ""Отклонен""  '"));
		Отказ = Истина;
	КонецЕсли;
		
	Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Ошибочный
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Импортированный Тогда 
		Возврат;
	КонецЕсли;
	
	// Проверка входящих СНТ, а также исходящих СНТ по импорту
	Если (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий 
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз))
		И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден 
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован) 
		И (НЕ ЗначениеЗаполнено(ОбъектСНТ.СкладПолучатель)) Тогда
		
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Не заполнено поле ""Склад получатель"".'"));
		Отказ = Истина;
	КонецЕсли;
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведенияСНТ(ОбъектСНТ.Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Обработка входящих СНТ, а также исходящих СНТ по импорту
	Если (((ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ))
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз)))
		И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
		
	КонецЕсли;
	//Обработка исходящих СНТ по экспорту с датой аннулирования (приход)
	Если (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Вывоз)
		И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован Тогда
			СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ, ПараметрыПроведения.ДатаАннулирования, ВидДвиженияНакопления.Приход);
	КонецЕсли;
	
	//Обработка входящих СНТ с видом возврат от розничного покупателя
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (ОбъектСНТ.ПоставщикРозничнаяРеализация ИЛИ ОбъектСНТ.ПоставщикФизическоеЛицо) Тогда
		
		//сделать приход по товарам на ВС
		СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
		Возврат;
		
	КонецЕсли;
	
	//Обработка входящих СНТ с условиями, когда не требуется подтверждение
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий И СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
		
		//сделать приход по товарам на ВС
		СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
		
		Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван Тогда
			СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ, ОбъектСНТ.ДатаОтзыва, ВидДвиженияНакопления.Расход);
		КонецЕсли;
		
	КонецЕсли;
	
	//Обработка исходящих СНТ
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий 
		И (ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз И НЕ ОбъектСНТ.ПредоставленВБумажномВиде)
		И (НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо) Тогда
		
		//выполнить контроль остатков по регистру "Товары на виртуальных складах"
		СНТСервер.ВыполнитьКонтрольТоварыОрганизацийНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, Отказ);
		
	КонецЕсли;
	
	//зарезервировать товары на ВС
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз
		И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Созданный 
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Доставленный 
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен
		ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Черновик)
		
		И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ ОбъектСНТ.ПоставщикНерезидент
		И НЕ (ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение И ОбъектСНТ.СкладПолучатель.ТипСклада = Перечисления.ТипыВиртуальныхСкладов.МобильныйСклад) //мобильный склад получателя
		И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		
	КонецЕсли;
	
	//для розницы, нерезидента, ФЛ товары резервируем только в статусе черновик
	//зарезервировать товары на ВС
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз
		И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Черновик
		И (ОбъектСНТ.ПоставщикРозничнаяРеализация ИЛИ ОбъектСНТ.ПоставщикФизическоеЛицо ИЛИ ОбъектСНТ.ПолучательНерезидент ИЛИ ОбъектСНТ.ПоставщикНерезидент
			ИЛИ (ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение И ОбъектСНТ.СкладПолучатель.ТипСклада = Перечисления.ТипыВиртуальныхСкладов.МобильныйСклад) //мобильный склад получателя
			ИЛИ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ)) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		
	КонецЕсли;

	//зарезервировать товары на ВС
	//снять резерв с товаров на ВС датой СНТ (т.к. ФЛ, нерезидент и РР не делают подтверждение) и сделать расход по товарам на ВС
	//-
	//сделать расход по товарам на ВС (так как при розничной торговле резервы не используются)
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (ОбъектСНТ.ПолучательНерезидент ИЛИ (ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение И ОбъектСНТ.СкладПолучатель.ТипСклада = Перечисления.ТипыВиртуальныхСкладов.МобильныйСклад) //мобильный склад получателя
			ИЛИ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ))
		И ОбъектСНТ.Статус <> Перечисления.СтатусыСНТ.Черновик
		Тогда
		
		//резервы в статусе Черновика
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
		
		СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
		
		Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван Тогда
			СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ, ОбъектСНТ.ДатаОтзыва, ВидДвиженияНакопления.Приход);
		КонецЕсли;
		
	КонецЕсли;
	
	//зарезервировать товары на ВС
	//снять резерв с товаров на ВС датой подтверждения и сделать расход по товарам на ВС
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден) Тогда
		
		Если НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо 
			И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
			
			СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
				
				СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
				СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
				
			КонецЕсли;
		
	КонецЕсли;
	
	//зарезервировать товары на ВС
	//снять резерв с товаров датой отклонения
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД) 
		И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо 
		И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
		
	КонецЕсли;
	
	//зарезервировать товары на ВС
	//снять резерв с товаров датой отзыва
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз
		И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван 
		И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо 
		И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаОтзыва,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
		
	КонецЕсли;
	
	//зарезервировать товары на ВС
	//снять резерв с товаров датой аннулирования
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз
		И НЕ ОбъектСНТ.ПредоставленВБумажномВиде
		И ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован 
		И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо 
		И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда
		
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
		СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ПараметрыПроведения.ДатаАннулирования,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
		
	КонецЕсли;
	
	
	// движения по бумажному СНТ
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ПредоставленВБумажномВиде Тогда
		
		Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Созданный 
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Черновик 
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Доставленный 
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен   Тогда
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ,Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			
		ИначеЕсли 	ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден Тогда
			
			СНТСервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСНТ.Движения, Отказ);
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ,Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
			
		ИначеЕсли ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен 
				ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД Тогда
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
			
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход,Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаПриема, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);

		ИначеЕсли
			ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван Тогда 
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаОтзыва,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
			
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаОтзыва,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);

			
		ИначеЕсли
			ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован  Тогда
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ, Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.Дата, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ);
			СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ПараметрыПроведения.ДатаАннулирования,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);
			
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ОбъектСНТ.ДатаВыпискиНаБумажномНосителе, ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Приход, Отказ,Перечисления.СпособВыпискиСНТ.ВБумажномВиде);
			//СНТСервер.СформироватьДвиженияТоваровНаВСВРезерве(ПараметрыПроведения.ДатаАннулирования,ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСВРезерве, ОбъектСНТ.Движения,ВидДвиженияНакопления.Расход, Отказ);

			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДокументСНТ_ПередЗаписью(ОбъектСНТ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ЕстьТоварыВССПустымиИдентификаторами = ТоварыВССПустымиИдентификаторами(ОбъектСНТ);

	ОбъектСНТ.Состояние = СНТСервер.СостояниеСНТ(ОбъектСНТ, ЕстьТоварыВССПустымиИдентификаторами);
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ТоварыВС Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ЭтиловыйСпирт Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТовары из ОбъектСНТ.Виноматериал Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.АлкогольнаяПродукцияКромеПива Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТовары Из ОбъектСНТ.ПивоПивныеНапитки Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаТовары Из ОбъектСНТ.ДанныеПоНефтепродуктам Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ДанныеПоБиотопливу Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ТабачнаяПродукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из ОбъектСНТ.ТоварыЭкспортныйКонтроль Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий
		И (ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.Сформирован ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОтклоненСервером
		ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС) Тогда
		
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа не возможно в состояниях ""Сформирован"", ""Отклонен сервером"", ""Ожидает идентификации товаров на ВС""'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.Автор) Тогда
		ОбъектСНТ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектСНТ.Контрагент) Тогда
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий Тогда
			Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") И
				ОбъектСНТ.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт") Тогда
				
				ОбъектСНТ.Контрагент = ОбъектСНТ.Поставщик;
			Иначе
				ОбъектСНТ.Контрагент = ОбъектСНТ.Получатель;
			КонецЕсли;
		Иначе
			ОбъектСНТ.Контрагент = ОбъектСНТ.Поставщик;
		КонецЕсли;
	КонецЕсли;
		
	РассчитатьСуммуДокументаСНТ(ОбъектСНТ);
	
	Если Не ЗначениеЗаполнено(ОбъектСНТ.Статус) Тогда
		ОбъектСНТ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Черновик");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.Номер) И НЕ ЗначениеЗаполнено(ОбъектСНТ.НомерСНТ) И ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		ОбъектСНТ.НомерСНТ = СНТСерверПереопределяемый.ПолучитьНомерНаПечать(ОбъектСНТ.Ссылка);
	КонецЕсли;
	
	Если (ОбъектСНТ.ПолучательФизическоеЛицо ИЛИ ОбъектСНТ.ПолучательРозничнаяРеализация) И Не ЗначениеЗаполнено(ОбъектСНТ.АдресДоставки) Тогда
		ОбъектСНТ.АдресДоставки = НСтр("ru = 'Адрес неизвестен'");
	ИначеЕсли (ОбъектСНТ.ПоставщикФизическоеЛицо ИЛИ ОбъектСНТ.ПоставщикРозничнаяРеализация) И Не ЗначениеЗаполнено(ОбъектСНТ.АдресОтправки) Тогда
		ОбъектСНТ.АдресОтправки = НСтр("ru = 'Адрес неизвестен'");
	КонецЕсли;
	
	//СозданиеИсточниковПроисхождения
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И
			(ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз ИЛИ ОбъектСНТ.ПредоставленВБумажномВиде) Тогда
			
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "Товары");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ТоварыВС");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ЭтиловыйСпирт");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "Виноматериал");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ПивоПивныеНапитки");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "АлкогольнаяПродукцияКромеПива");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ДанныеПоНефтепродуктам");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ДанныеПоБиотопливу");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ТабачнаяПродукция");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ДругиеТоварыЦифроваяМаркировка");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектСНТ, Отказ, "ТоварыЭкспортныйКонтроль");
			
			Если ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами И 
				(ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен)
			Тогда
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "Товары", 0);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТоварыВС", 1);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ЭтиловыйСпирт", 2);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "Виноматериал", 3);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ПивоПивныеНапитки", 4);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "АлкогольнаяПродукцияКромеПива", 5);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДанныеПоНефтепродуктам", 6);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДанныеПоБиотопливу", 7);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТабачнаяПродукция", 8);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДругиеТоварыЦифроваяМаркировка", 9);
				СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТоварыЭкспортныйКонтроль", 10);
			КонецЕсли;

		ИначеЕсли ОбъектСНТ.ЭтоНовый() Тогда
			НовыйСНТСсылка = Документы.СНТ.ПолучитьСсылку(Новый УникальныйИдентификатор);
			ОбъектСНТ.УстановитьСсылкуНового(НовыйСНТСсылка);
			
		ИначеЕсли ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И (ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз И НЕ ОбъектСНТ.ПредоставленВБумажномВиде)
			И (НЕ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден 
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен)) Тогда
			Возврат;
		Иначе
			//необходимо будет создать/обновить источники
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "Товары", 0);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТоварыВС", 1);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ЭтиловыйСпирт", 2);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "Виноматериал", 3);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ПивоПивныеНапитки", 4);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "АлкогольнаяПродукцияКромеПива", 5);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДанныеПоНефтепродуктам", 6);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДанныеПоБиотопливу", 7);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТабачнаяПродукция", 8);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ДругиеТоварыЦифроваяМаркировка", 9);
			СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, "ТоварыЭкспортныйКонтроль", 10);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьСуммуДокументаСНТ(ОбъектСНТ)
	
	СуммаТоварыВС 							 = ОбъектСНТ.ТоварыВС.Итог("Сумма");
	СуммаЭтиловыйСпирт 						 = ОбъектСНТ.ЭтиловыйСпирт.Итог("Сумма");
	СуммаВиноматериал 						 = ОбъектСНТ.Виноматериал.Итог("Сумма");
	СуммаПивоПивныеНапитки					 = ОбъектСНТ.ПивоПивныеНапитки.Итог("Сумма");
	СуммаАлкогольнаяПродукцияКромеПива		 = ОбъектСНТ.АлкогольнаяПродукцияКромеПива.Итог("Сумма");
	СуммаДанныеПоНефтепродуктам				 = ОбъектСНТ.ДанныеПоНефтепродуктам.Итог("Сумма");
	СуммаДанныеПоБиотопливу					 = ОбъектСНТ.ДанныеПоБиотопливу.Итог("Сумма");
	СуммаТабачнаяПродукция					 = ОбъектСНТ.ТабачнаяПродукция.Итог("Сумма");
	СуммаДругиеТоварыЦифроваяМаркировка		 = ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка.Итог("Сумма");
	СуммаТоварыЭкспортныйКонтроль 			 = ОбъектСНТ.ТоварыЭкспортныйКонтроль.Итог("Сумма");
	
	СуммаДокументаОбщая = СуммаТоварыВС + СуммаЭтиловыйСпирт + СуммаВиноматериал + СуммаПивоПивныеНапитки +
	СуммаАлкогольнаяПродукцияКромеПива + СуммаДанныеПоНефтепродуктам + СуммаДанныеПоБиотопливу + 
	СуммаТабачнаяПродукция + СуммаДругиеТоварыЦифроваяМаркировка +
	СуммаТоварыЭкспортныйКонтроль;
	
	ОбъектСНТ.СуммаДокумента = СуммаДокументаОбщая;
	
КонецПроцедуры

Процедура ДокументСНТ_ПриЗаписи(ОбъектСНТ, Отказ) Экспорт
	
	Если ОбъектСНТ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивСНТ = Новый Массив;
	МассивСНТ.Добавить(ОбъектСНТ.Ссылка);
	КлючиАналитикиУчетаСоответствий = СНТСервер.ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивСНТ, Истина);
	СНТСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, ОбъектСНТ.Направление, МассивСНТ);
	
КонецПроцедуры

Процедура ДокументСНТ_ОбработкаУдаленияПроведения(ОбъектСНТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументСНТ_ПриКопировании(ОбъектСНТ, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Идентификатор) Тогда
		ОбъектСНТ.Идентификатор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ЭЦП) Тогда
		ОбъектСНТ.ЭЦП = Неопределено;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ЭЦПУполномоченногоПодписыватьСНТ) Тогда
		ОбъектСНТ.ЭЦПУполномоченногоПодписыватьСНТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ЭЦПУполномоченногоПодтверждатьСНТ) Тогда
		ОбъектСНТ.ЭЦПУполномоченногоПодтверждатьСНТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.РегистрационныйНомерИСЭСФ) Тогда
		ОбъектСНТ.РегистрационныйНомерИСЭСФ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Статус) Тогда
		ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Черновик; // по умолчанию новый документ имеет статус Черновик
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДокументОснование) Тогда
		ОбъектСНТ.ДокументОснование = Неопределено; 
	КонецЕсли;
	
	Если ОбъектКопирования.Ошибки.Количество() > 0 Тогда
		ОбъектСНТ.Ошибки.Очистить(); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Номер) Тогда
		ОбъектСНТ.Номер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Состояние) Тогда
		ОбъектСНТ.Состояние = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Контрагент) Тогда
		ОбъектСНТ.Контрагент = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ФИОВыписывающегоСНТ) Тогда
		ОбъектСНТ.ФИОВыписывающегоСНТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаОтгрузкиТовара) Тогда
		ОбъектСНТ.ДатаОтгрузкиТовара = Дата(1, 1, 1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаРегистрацииИСЭСФ) Тогда
		ОбъектСНТ.ДатаРегистрацииИСЭСФ = Дата(1, 1, 1);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.ПриемПроизвел) Тогда
		ОбъектСНТ.ПриемПроизвел = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.ДатаПриема) Тогда
		ОбъектСНТ.ДатаПриема = Дата(1, 1, 1);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.ЭЦПЮрЛицаПрием) Тогда
		ОбъектСНТ.ЭЦПЮрЛицаПрием = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектКопирования.ФИОПодтвердившегоСНТ) Тогда
		ОбъектСНТ.ФИОПодтвердившегоСНТ = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектСНТ.Автор = Неопределено;
	КонецЕсли;
		
	//При обновлении СНТ очищать ИП не нужно
	ЭтоОбновлениеСНТ = ОбъектКопирования.ДополнительныеСвойства.Свойство("ОбновлениеСНТ") И ОбъектКопирования.ДополнительныеСвойства.ОбновлениеСНТ;
	Если НЕ ЭтоОбновлениеСНТ Тогда

		ТЧСНТ = СНТСерверПереопределяемый.ТабличныеЧастиДокументаСНТ();
		Для Каждого ТЧ Из ТЧСНТ Цикл
			Для Каждого Строка Из ОбъектСНТ[ТЧ.Значение] Цикл
				Строка.ДополнительныйИдентификатор = Неопределено;
				Строка.ИсточникПроисхождения = Неопределено;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСНТ_ПередУдалением(ОбъектСНТ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументСНТ_ОбработкаПроверкиЗаполнения(ОбъектСНТ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ ОбъектСНТ.ПредоставленВБумажномВиде Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВыпискиНаБумажномНосителе");
		МассивНепроверяемыхРеквизитов.Добавить("ПричинаВыпискиНаБумажномНосителе");
	КонецЕсли;
	
	СНТСерверПереопределяемый.ДокументСНТ_ОбработкаПроверкиЗаполнения(ОбъектСНТ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыВС.ТоварНаименование");
	
	СНТСерверПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументСНТ_ПриУстановкеНовогоНомера(ОбъектСНТ, СтандартнаяОбработка, Префикс) Экспорт
	
	Если ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		Префикс = "-В-";
	ИначеЕсли ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		Префикс = "-И-";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийМодуляОбъектаСопоставлениеСНТиФНО

Процедура ДокументСопоставлениеСНТиФНО_ОбработкаЗаполнения(ОбъектСопоставление, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
		
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ОбработкаПроведения(ОбъектСопоставление, Отказ, РежимПроведения) Экспорт
	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ВСОбщегоНазначения.ПодготовитьНаборыЗаписейКПроведению(ОбъектСопоставление);

	ПараметрыПроведения = ПодготовитьПараметрыПроведенияСопоставления(ОбъектСопоставление.Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СНТСервер.СформироватьДвиженияТоваровНаВССопоставление(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектСопоставление.Движения, Отказ);
	СНТСервер.СформироватьДвиженияСопоставленныхИсточниковПроисхождения(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаСопоставленныеИсточникиПроисхождения, ОбъектСопоставление.Движения, Отказ);
	
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ПередЗаписью(ОбъектСопоставление, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если ОбъектСопоставление.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбъектСопоставление.Автор) Тогда
		ОбъектСопоставление.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	//СозданиеИсточниковПроисхождения
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		Если ОбъектСопоставление.ЭтоНовый() Тогда
			НовоеСопоставлениеСсылка = Документы.СопоставлениеСНТиФНО.ПолучитьСсылку(Новый УникальныйИдентификатор);
			ОбъектСопоставление.УстановитьСсылкуНового(НовоеСопоставлениеСсылка);
		КонецЕсли;	
		//необходимо будет создать/обновить источники
		СоздатьОбновитьИсточникиПроисхождения(ОбъектСопоставление, "ТоварыСНТ", 0);
		
	КонецЕсли;


КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ПриЗаписи(ОбъектСопоставление, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ОбработкаУдаленияПроведения(ОбъектСопоставление, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ПриКопировании(ОбъектСопоставление, ОбъектКопирования) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Автор) Тогда
		ОбъектСопоставление.Автор = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.Комментарий) Тогда
		ОбъектСопоставление.Комментарий = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ПередУдалением(ОбъектСопоставление, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументСопоставлениеСНТиФНО_ОбработкаПроверкиЗаполнения(ОбъектСопоставление, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СНТСерверПереопределяемый.ДокументСопоставлениеСНТиФНО_ОбработкаПроверкиЗаполнения(ОбъектСопоставление, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти 

#Область СозданиеСНТ_НаОснованииУчетныхДокументов

Функция СоздатьСписокСНТ(ПараметрыСоздания) Экспорт 
	Возврат СНТСервер.СоздатьСписокСНТ(ПараметрыСоздания);
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыСоздания) Экспорт 
	Возврат СНТСервер.ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыСоздания);
КонецФункции

#КонецОбласти 

#Область ЗаполнениеХМЛФайлаСНТДляОтправки

Процедура УстановитьСтатусКонтрагента(Знач Фабрика, Знач СтатусИБ, Знач СтатусИСЭСФ, КонтрагентXDTO)
	
	Если СтатусИБ = Истина Тогда
		
		statuses = ЭСФСервер.ПолучитьСвойство(КонтрагентXDTO, "statuses", Неопределено);
		
		Если statuses = Неопределено Тогда
			statuses = ЭСФСервер.НовоеСвойствоОбъектаXDTO(КонтрагентXDTO, "statuses", Фабрика);			
		КонецЕсли;
		
		status = ЭСФСервер.НовыйЭлементСпискаXDTO(statuses.status, Фабрика, СтатусИСЭСФ);
		status = СтатусИСЭСФ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидТранспорта(Знач Фабрика, Знач СтатусИБ, Знач ВидТраспорта, ВидТранспортаXDTO)
	
	Если СтатусИБ = Истина Тогда
		
		transportTypes = ЭСФСервер.ПолучитьСвойство(ВидТранспортаXDTO, "transportTypes", Неопределено);
		
		Если transportTypes = Неопределено Тогда
			transportTypes = ЭСФСервер.НовоеСвойствоОбъектаXDTO(ВидТранспортаXDTO, "transportTypes", Фабрика);			
		КонецЕсли;
		
		transportType = ЭСФСервер.НовыйЭлементСпискаXDTO(transportTypes.transportType, Фабрика, ВидТраспорта);
		transportType = ВидТраспорта;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, ИмяТабличнойЧасти, СНТ)

	product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
	
	product.truOriginCode = СокрЛП(ТоварыСтрока.ПризнакПроисхождения); // Признак происхождения товара (G1-G10.2) pattern value="[1-5]
	product.tnvedCode = СокрЛП(ТоварыСтрока.КодТНВЭД); // Код товара (ТН ВЭД ЕАЭС) (G1 4, G2 5, G3 5, G4 5, G5 5, G6 5, G7 4, G8 5, G9 5, G10 7)
	
	Если ИмяТабличнойЧасти = "ЭтиловыйСпирт" ИЛИ ИмяТабличнойЧасти = "Виноматериал" ИЛИ ИмяТабличнойЧасти = "АлкогольнаяпродукцияКромеПива"
		ИЛИ ИмяТабличнойЧасти = "ДанныеПоНефтепродуктам" ИЛИ ИмяТабличнойЧасти = "ТабачнаяПродукция" Тогда
		product.productName = ТоварыСтрока.ТоварНаименование; // Наименование товара (G1 3, G2 4, G3 4, G4 3, G5 4, G6 4, G7 3, G8 4, G9 4, G 10.3)
	Иначе
		product.productName = СокрЛП(ТоварыСтрока.ТоварНаименование); // Наименование товара (G1 3, G2 4, G3 4, G4 3, G5 4, G6 4, G7 3, G8 4, G9 4, G 10.3)
	КонецЕсли;
		
	Если ИмяТабличнойЧасти = "ЭтиловыйСпирт" ИЛИ ИмяТабличнойЧасти = "Виноматериал" ИЛИ ИмяТабличнойЧасти = "АлкогольнаяпродукцияКромеПива"
		ИЛИ ИмяТабличнойЧасти = "ДанныеПоНефтепродуктам" ИЛИ ИмяТабличнойЧасти = "ТабачнаяПродукция" Тогда
		
		product.pinCode = ТоварыСтрока.ПинКод; // ПИН-код
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ТоварыВС" ИЛИ ИмяТабличнойЧасти = "ПивоПивныеНапитки" ИЛИ ИмяТабличнойЧасти = "ДанныеПоНефтепродуктам" 
		ИЛИ ИмяТабличнойЧасти = "ДанныеПоБиотопливу" ИЛИ ИмяТабличнойЧасти = "ТабачнаяПродукция" ИЛИ ИмяТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда 
		
		product.measureUnitCode = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияКод);
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ТоварыВС" ИЛИ ИмяТабличнойЧасти = "ДанныеПоНефтепродуктам" ИЛИ ИмяТабличнойЧасти = "ДанныеПоБиотопливу" 
		ИЛИ ИмяТабличнойЧасти = "ТабачнаяПродукция" ИЛИ ИмяТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда
		
		product.quantity = ТоварыСтрока.Количество; // Количество
	КонецЕсли;

	product.price = ТоварыСтрока.Цена; // Цена товара за единицу товара (G1 7, G2 7, G3 7, G4 10, G5 10, G6 8, G7 7, G8 10, G9 7, G 10 10)
	product.priceWithoutTax = ТоварыСтрока.СуммаБезНалогов; // Стоимость товара без косвенных налогов (G1 8, G2 8, G3 8, G4 11, G5 11, G6 9, G7 8, G8 11, G9 8, G10 11)
	
	Если ЗначениеЗаполнено(ТоварыСтрока.СуммаАкциза) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
		product.exciseAmount = ТоварыСтрока.СуммаАкциза; // Сумма акциза (G1 9, G2 9, G3 9, G4 12, G5 12, G6 10, G7 9, G8 12, G9 9, G10 12)
	КонецЕсли;
	//28-12-2020 изменения в схеме
	Если (ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) ИЛИ (ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) И ТоварыСтрока.СтавкаАкцизаЧисло = 0)) И СНТСервер.ЕстьСвойство(product, "exciseRate") Тогда
		product.exciseRate = ТоварыСтрока.СтавкаАкцизаЧисло; // Ставка акциза (G1 9/1, G2 9/2, G3 9/1, G4 13/1, G5 12/2, G6 10/1, G7 9/1, G8 12/1, G9 9/1, G10 12/1)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаНДС) И НЕ ТоварыСтрока.БезНДС Тогда
		product.ndsRate = ТоварыСтрока.СтавкаНДСЧисло; // Ставка НДС (G1 10, G2 10, G3 10, G4 13, G5 13, G6 11, G7 10, G8 13, G9 10, G10 13)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТоварыСтрока.СуммаНДС) ИЛИ ТоварыСтрока.СтавкаНДСЧисло = 0 Тогда
		product.ndsAmount = ТоварыСтрока.СуммаНДС; // Сумма НДС (G1 11, G2 11, G3 11, G4 14, G5 14, G6 12, G7 11, G8 14, G9 11, G10 14)
	КонецЕсли;

	product.priceWithTax = ТоварыСтрока.Сумма; // Общая стоимость  товара с косвенными налогами (G1 12, G2 12, G3 12, G4 15, G5 15, G6 13, G7 12, G8 15, G9 12, G10 15)
	
	Если НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) ТОгда
		// № заявления о выпуске товаров до подачи декларации на товары, заявления о ввозе товаров 
		// и уплате косвенных налогов, СТ-1 или СТ-KZ, первичной СНТ (G1 14, G2 14, G3 14, G4 17, G5 16, G6 15, G7 14, G8 17, G9 14, G10 17)
		product.declarationNumberForSnt = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС); 
	КонецЕсли;
	
	// Номер товарной позиции из заявления о выпуске товаров до подачи декларации на товары , о ввозе товаров 
	// и уплате косвенных налогов или Декларации на товары, первичной СНТ (G1 15, G2 15, G3 15, G4 18, G5 17, G6 16, G7 15, G8 18, G9 15, G10 18)
	Если НЕ ПустаяСтрока(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) ТОгда
		product.productNumberInDeclaration = СокрЛП(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении); 
	КонецЕсли;
	
	// Идентификатор товара в ИС ЭСФ  (G1 13, G2 13, G3 13, G4 16, G5 15, G6 14, G7 13, G8 16, G9 13, G10 16)
	Если ЗначениеЗаполнено(ТоварыСтрока.ИдентификаторТовара) Тогда
		product.productId = СокрЛП(Формат(Строка(ТоварыСтрока.ИдентификаторТовара),"ЧН=0; ЧГ="));
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ТоварыВС" ИЛИ ИмяТабличнойЧасти = "ЭтиловыйСпирт" ИЛИ ИмяТабличнойЧасти = "Виноматериал"
		ИЛИ ИмяТабличнойЧасти = "ПивоПивныеНапитки" ИЛИ ИмяТабличнойЧасти = "АлкогольнаяпродукцияКромеПива"
		ИЛИ ИмяТабличнойЧасти = "ТабачнаяПродукция" ИЛИ ИмяТабличнойЧасти = "ДругиеТоварыЦифроваяМаркировка" Тогда
		
		Если ЗначениеЗаполнено(ТоварыСтрока.GTIN) Тогда
			product.gtinCode = ТоварыСтрока.GTIN; // Код товара (GTIN)
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТоварыСтрока.ДополнительнаяИнформация) Тогда
		product.additionalInfo = СокрЛП(ТоварыСтрока.ДополнительнаяИнформация); // Дополнительная информация (G1 17, G2 17, G3 17, G4 20, G5 19, G6 17, G7 16, G8 20, G9 16, G10 19)
	КонецЕсли;
	
	//product.productNumber = ТоварыСтрока.НомерСтроки; // Номер товарной позиции в СНТ (G1 1, G2 1, G3 1, G4 1, G5 1, G6 1, G7 1, G8 1, G9 1, G10 1)
	product.productNumber = ТоварыСтрока.НомерСтрокиСНТ;
	
	Возврат product;
	
КонецФункции

Функция ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока)
	
	ТоварСтрока.ДополнительнаяИнформация			= СНТСервер.ПолучитьСвойство(ТоварXDTO, "additionalInfo", "");
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "declarationNumberForSnt") Тогда
		ТоварСтрока.НомерЗаявленияВРамкахТС			= СНТСервер.ПолучитьСвойство(ТоварXDTO, "declarationNumberForSnt", "");
	КонецЕсли;
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "gtinCode") Тогда
		ТоварСтрока.GTIN							= СНТСервер.ПолучитьСвойство(ТоварXDTO, "gtinCode", "");
	КонецЕсли;
	
	//28-12-2020 изменения в схеме
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "exciseRate") Тогда
		ТоварСтрока.СтавкаАкцизаЧисло = СНТСервер.ПолучитьСвойство(ТоварXDTO, "exciseRate", 0);
	КонецЕсли;
	
	ТоварСтрока.СуммаАкциза							= СНТСервер.ПолучитьСвойство(ТоварXDTO, "exciseAmount", 0);
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "measureUnitCode") Тогда
		ТоварСтрока.ЕдиницаИзмеренияКод				= СНТСервер.ПолучитьСвойство(ТоварXDTO, "measureUnitCode", "");
	КонецЕсли;
	ТоварСтрока.СуммаНДС							= СНТСервер.ПолучитьСвойство(ТоварXDTO, "ndsAmount", 0);
	ТоварСтрока.СтавкаНДСЧисло						= СНТСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", 0);
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "pinCode") Тогда
		ТоварСтрока.ПинКод							= СНТСервер.ПолучитьСвойство(ТоварXDTO, "pinCode", 0);
	КонецЕсли;
	ТоварСтрока.Цена								= СНТСервер.ПолучитьСвойство(ТоварXDTO, "price", 0);
	ТоварСтрока.Сумма 								= СНТСервер.ПолучитьСвойство(ТоварXDTO, "priceWithTax", 0);
	ТоварСтрока.СуммаБезНалогов 					= СНТСервер.ПолучитьСвойство(ТоварXDTO, "priceWithoutTax", 0);
	ТоварСтрока.ИдентификаторТовара 				= СНТСервер.ПолучитьСвойство(ТоварXDTO, "productId", "");
	ТоварСтрока.ТоварНаименование					= СНТСервер.ПолучитьСвойство(ТоварXDTO, "productName", "");
	ТоварСтрока.НомерСтрокиСНТ						= СНТСервер.ПолучитьСвойство(ТоварXDTO, "productNumber", "");
	ТоварСтрока.НомерПозицииВДекларацииИлиЗаявлении = СНТСервер.ПолучитьСвойство(ТоварXDTO, "productNumberInDeclaration", "");
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "productType") Тогда // Для ТЧ G4. Пиво и пивные напитки
		ТоварСтрока.ВидПродукта						= СНТСервер.ПолучитьСвойство(ТоварXDTO, "productType", "");
	КонецЕсли;
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "productionType") Тогда // Для ТЧ G5. Алкогольная продукция (кроме пива и пивного напитка)
		ТоварСтрока.ВидПродукта						= СНТСервер.ПолучитьСвойство(ТоварXDTO, "productionType", "");
	КонецЕсли;
	
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "quantity") Тогда
		ТоварСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
	КонецЕсли;
	
	ТоварСтрока.КодТНВЭД							= СНТСервер.ПолучитьСвойство(ТоварXDTO, "tnvedCode", "");
	ТоварСтрока.ПризнакПроисхождения 				= СНТСервер.ПолучитьСвойство(ТоварXDTO, "truOriginCode", "");
	
	//при чтении через фабрику тег появляется в объекте XDTO, даже если тега не было в полученном ХМЛ, поэтому доп. проверка нужна
	Если СНТСервер.ЕстьСвойство(ТоварXDTO, "ndsRate") Тогда
		СтавкаНДС = СНТСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", Неопределено);
		ТоварСтрока.БезНДС = ?(СтавкаНДС = Неопределено, Истина, Ложь);
	Иначе	
		ТоварСтрока.БезНДС = Ложь;
	КонецЕсли;
	
	Возврат ТоварСтрока;
	
КонецФункции

Процедура ЗаполнитьSNT(Знач СНТ, Знач Фабрика, SNT, ВерсияСНТ)
	
	// здесь можно определить порядок в зависимости от версии бланка
	ЗаполнитьSNT_Версия1(СНТ, Фабрика, SNT);
	
КонецПроцедуры

Процедура ЗаполнитьSNT_Версия1(Знач СНТ, Знач Фабрика, SNT)// Отправка СНТ
	
	// Раздел А. Общий раздел.
	#Область ОбщийРаздел
	
	SNT.sntType = СНТКлиентСервер.ТипИСЭСФ(СНТ.ТипСНТ); 
	SNT.date = Формат(СНТ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Дата оформления  СНТ (A 2)
	SNT.number = СНТ.НомерСНТ;// Регистрационный номер СНТ учетной системы (A 1)
	
	Если ЗначениеЗаполнено(СНТ.ДатаВыпискиНаБумажномНосителе) Тогда	
		SNT.datePaper = Формат(СНТ.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Дата выписки СНТ на бумажном носителе (A 2.1)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНТ.ПричинаВыпискиНаБумажномНосителе) Тогда
		SNT.reasonPaper = СНТКлиентСервер.ПричинаВыпискиНаБумагеИСЭСФ(СНТ.ПричинаВыпискиНаБумажномНосителе); // Причина выписки на бумажном носителе (A 2.1.1)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНТ.ДатаОтгрузкиТовара) Тогда
		SNT.shippingDate = Формат(СНТ.ДатаОтгрузкиТовара, "ДФ=dd.MM.yyyy; ДП=01.01.0001");//Дата отгрузки товара (A 3)
	КонецЕсли;	
		
	// исправленная, на возврат СНТ
	Если (СНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров ИЛИ СНТ.ТипСНТ = Перечисления.ТипыСНТ.Исправленная)
		И ЗначениеЗаполнено(СНТ.СвязанныйСНТ)
		И ЗначениеЗаполнено(СНТ.РегистрационныйНомерСвязанногоСНТ) Тогда
		
		SNT.relatedRegistrationNumber = СокрЛП(СНТ.РегистрационныйНомерСвязанногоСНТ); // Регистрационный номер (исправляемой, на возврат) СНТ в ИС ЭСФ (A 5.1, A 6.1)
	КонецЕсли;
	
	Если СНТ.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(СНТ.РегистрационныйНомерИСМПТ) Тогда
			SNT.digitalMarkingNotificationNumber = СокрЛП(СНТ.РегистрационныйНомерИСМПТ); // Регистрационный номер Акта/Уведомления по цифровой маркировке (A 4.2)
		КонецЕсли;
		Если ЗначениеЗаполнено(СНТ.ДатаРегистрацииИСМПТ) Тогда
			SNT.digitalMarkingNotificationDate = СокрЛП(СНТ.ДатаРегистрацииИСМПТ); // Дата Акта/Уведомления по цифровой маркировке (A 4.2.1)
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНТ.ВидОперации) И НЕ СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Реализация Тогда
		Если СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение") ИЛИ СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами") Тогда
			SNT.transferType = СНТКлиентСервер.ВидПеремещенияИСЭСФ(СНТ.ВидПеремещения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.ВидВывоза) Тогда
			sntExport = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "sntExport", Фабрика); 
			sntExport.exportType = СНТКлиентСервер.ВидЭкспортаИСЭСФ(СНТ.ВидВывоза); // Вывоз товаров с территории РК (A 8)
			Если СНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ Тогда
				sntExport.sezCode = СНТ.ИдентификаторТерриторииСЭЗ; // Экспорт: Код (идентификатор) территории СЭЗ (A 8.5.1)
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.ВидВвоза) Тогда
			sntImport = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "sntImport", Фабрика); 
			sntImport.importType = СНТКлиентСервер.ВидИмпортаИСЭСФ(СНТ.ВидВвоза); // Ввоз товаров на территорию РК (A 7)
			Если СНТ.ВидВвоза = Перечисления.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ Тогда
				sntImport.sezCode = СНТ.ИдентификаторТерриторииСЭЗ; // Импорт: Код (идентификатор) территории СЭЗ (A 7.5.1)
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	SNT.currencyCode = СокрЛП(СНТ.ВалютаКод); //Код валюты (50)
	
	Если СНТ.ВалютаКод <> "KZT" Тогда
		SNT.currencyRate = СНТ.КурсВалюты; //Курс валюты (51)
	КонецЕсли;
	
	#КонецОбласти
	
	// Раздел B. Реквизиты поставщика.
	#Область РеквизитыПоставщика
	seller = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "seller", Фабрика); // Реквизиты поставщика (B)
	
	Если НЕ СНТ.ПоставщикРозничнаяРеализация Тогда
		//Если НЕ СНТ.ВидВвоза = Перечисления.ВидыВвозаСНТ.Импорт И НЕ СНТ.ПоставщикНерезидент Тогда
		Если ЗначениеЗаполнено(СНТ.ПоставщикИдентификатор) Тогда
			seller.tin = СокрЛП(СНТ.ПоставщикИдентификатор); // ИИН/БИН поставщика/получателя (B 13, C 22)
		КонецЕсли;
		seller.actualAddress = СНТ.АдресОтправки; // Фактический адрес отправки/отгрузки (B 20)
		Если ЗначениеЗаполнено(СНТ.СкладОтправкиИдентификатор) Тогда
			seller.storeId = СокрЛП(Формат(СНТ.СкладОтправкиИдентификатор,"ЧН=0; ЧГ=")); // Идентификатор склада отправки/отгрузки (B 21)
		КонецЕсли;
	КонецЕсли;
	
	Если СНТ.ПоставщикНерезидент Тогда
		seller.nonResident = СНТ.ПоставщикНерезидент; // Нерезидент (B 13.1)
	КонецЕсли;

	seller.name = СокрЛП(СНТ.ПоставщикНаименование); // Наименование поставщика/получателя (B 14, C 23)
	
	Если НЕ ПустаяСтрока(СНТ.ПоставщикБИНСтруктурногоПодразделения) Тогда
		seller.branchTin = СНТ.ПоставщикБИНСтруктурногоПодразделения; // БИН структурного подразделения поставщика/получателя (B 15, C 24)
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(СНТ.ПоставщикБИНРеорганизованногоЛица) Тогда
		seller.reorganizedTin = СокрЛП(СНТ.ПоставщикБИНРеорганизованногоЛица); // БИН реорганизованного лица (B 16)
	КонецЕсли;
	
	// Категория поставщика (B 17)
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикАдвокат, "LAWYER", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикНотариус, "NOTARY", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикМедиатор, "MEDIATOR", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикЧастныйСудебныйИсполнитель, "BAILIFF", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикФизическоеЛицо, "INDIVIDUAL", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикРозничнаяРеализация, "RETAIL", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикРозничныйРеализатор, "RETAILER", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикФармацевтическийПроизводитель, "PHARMACEUTIC_PRODUCER", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикЛизингополучатель, "LESSEE", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикЛизингодатель, "LESSOR", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикДоверитель, "PRINCIPAL", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикКомитент, "COMMITTENT", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикКомиссионер, "BROKER", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикУчастникСРП, "SHARING_AGREEMENT_PARTICIPANT", seller);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПоставщикУчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", seller);
	
	seller.registerCountryCode = СокрЛП(СНТ.ПоставщикКодСтраны); // Код страны регистрации поставщика (B 18)
	seller.countryCode = СокрЛП(СНТ.ПоставщикКодСтраныОтправки);// Код страны отправки/отгрузки (B 19)

	#КонецОбласти
	
	// Раздел С. Реквизиты получателя
	#Область РеквизитыПолучателя
	customer = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "customer", Фабрика); // Реквизиты получателя (C)
	
	Если НЕ СНТ.ПолучательРозничнаяРеализация Тогда
		Если ЗначениеЗаполнено(СНТ.ПолучательИдентификатор) Тогда
			customer.tin = СокрЛП(СНТ.ПолучательИдентификатор); // ИИН/БИН поставщика/получателя (B 13, C 22)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.АдресДоставки) Тогда
			customer.actualAddress = СНТ.АдресДоставки; // Фактический адрес доставки/поставки (C 29)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.СкладДоставкиИдентификатор) Тогда
			customer.storeId = Формат(СНТ.СкладДоставкиИдентификатор,"ЧГ="); // Идентификатор склада доставки/поставки (C 30)
		КонецЕсли;
	КонецЕсли;
	
	Если СНТ.ПолучательНерезидент Тогда
		customer.nonResident = СНТ.ПолучательНерезидент; // Нерезидент (C 22.1)
	КонецЕсли;
	
	customer.name = СокрЛП(СНТ.ПолучательНаименование); // Наименование поставщика/получателя (B 14, C 23)
	
	Если Не ПустаяСтрока(СНТ.ПолучательБИНСтруктурногоПодразделения) Тогда
		customer.branchTin = СНТ.ПолучательБИНСтруктурногоПодразделения; // БИН структурного подразделения поставщика/получателя (B 15, C 24)
	КонецЕсли;
	
	Если Не ПустаяСтрока(СНТ.ПолучательБИНРеорганизованногоЛица) Тогда
		customer.reorganizedTin = СокрЛП(СНТ.ПолучательБИНРеорганизованногоЛица);// БИН реорганизованного лица (C 25)
	КонецЕсли;
	
	// Категория получателя (C 26)
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательАдвокат, "LAWYER", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательНотариус, "NOTARY", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательМедиатор, "MEDIATOR", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательЧастныйСудебныйИсполнитель, "BAILIFF", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательФизическоеЛицо, "INDIVIDUAL", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательРозничнаяРеализация, "RETAIL", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательРозничныйРеализатор, "RETAILER", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательФармацевтическийПроизводитель, "PHARMACEUTIC_PRODUCER", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательЛизингополучатель, "LESSEE", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательЛизингодатель, "LESSOR", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательДоверитель, "PRINCIPAL", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательКомитент, "COMMITTENT", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательКомиссионер, "BROKER", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательУчастникСРП, "SHARING_AGREEMENT_PARTICIPANT", customer);
	УстановитьСтатусКонтрагента(Фабрика, СНТ.ПолучательУчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", customer);
	
	customer.registerCountryCode = СокрЛП(СНТ.ПолучательКодСтраны); // Код страны регистрации получателя (C 27)
	customer.countryCode = СокрЛП(СНТ.ПолучательКодСтраныДоставки);// Код страны доставки/поставки (C 28)
	
	#КонецОбласти
	
	// Раздел D. Реквизиты Грузоотправителя И Грузополучателя (D) - (D1)
	#Область РеквизитыГрузоотправителяИГрузополучателя
	//Грузоотправитель
	consignor = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "consignor", Фабрика);
	
	consignor.name = СокрЛП(СНТ.ГрузоотправительНаименование); //Наименование грузоотправителя (D 32)
	
	Если НЕ ПустаяСтрока(СНТ.ГрузоотправительИдентификатор) Тогда
		consignor.tin = СокрЛП(СНТ.ГрузоотправительИдентификатор);
	КонецЕсли;
	
	consignor.nonResident = СНТ.ГрузоотправительНерезидент;
	consignor.countryCode = СокрЛП(СНТ.ГрузоотправительКодСтраныОтправки);
	
	Если НЕ ПустаяСтрока(СНТ.ГрузоотправительДополнительныеСведения) Тогда
		consignor.additionalInfo = СНТ.ГрузоотправительДополнительныеСведения;
	КонецЕсли;
	
	//Грузополучатель
	consignee = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "consignee", Фабрика);
	
	consignee.name = СокрЛП(СНТ.ГрузополучательНаименование); //Наименование грузополучателя (D 35)
	
	Если НЕ ПустаяСтрока(СНТ.ГрузополучательИдентификатор) Тогда
		consignee.tin = СокрЛП(СНТ.ГрузополучательИдентификатор);
	КонецЕсли;
	
	consignee.nonResident = СНТ.ГрузополучательНерезидент;
	consignee.countryCode = СокрЛП(СНТ.ГрузополучательКодСтраныОтправки);
	
	Если НЕ ПустаяСтрока(СНТ.ГрузополучательДополнительныеСведения) Тогда
		consignee.additionalInfo = СНТ.ГрузополучательДополнительныеСведения;
	КонецЕсли;
	
	#КонецОбласти
	
	// Раздел Е. Сведения по перевозке
	#Область СведениПоПеревозке
	shippingInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "shippingInfo", Фабрика);
	
	Если НЕ ПустаяСтрока(СНТ.ПеревозчикНаименование) Тогда
		shippingInfo.name = Строка(СНТ.ПеревозчикНаименование); // Наименование перевозчика (E 37)
	КонецЕсли;
	
	Если СНТ.ПеревозчикНерезидент Тогда
		shippingInfo.nonResident = СНТ.ПеревозчикНерезидент; // Нерезидент (E 37.1)
	КонецЕсли;

	Если НЕ ПустаяСтрока(СНТ.ПеревозчикИдентификатор) Тогда
		shippingInfo.tin = СНТ.ПеревозчикИдентификатор; // ИИН/БИН (E 38)
	КонецЕсли;
	
	//СведенияОПланТранспорте	
	УстановитьВидТранспорта(Фабрика, СНТ.АвтомобильныйТранспорт, "AUTOMOBILE", shippingInfo);
	УстановитьВидТранспорта(Фабрика, СНТ.ЖелезнодорожныйТранспорт, "RAILWAY", shippingInfo);
	УстановитьВидТранспорта(Фабрика, СНТ.ВоздушныйТранспорт, "AIR", shippingInfo);
	УстановитьВидТранспорта(Фабрика, СНТ.МорскойТранспорт, "MARINE", shippingInfo);
	УстановитьВидТранспорта(Фабрика, СНТ.Трубопровод, "PIPELINE", shippingInfo);
	УстановитьВидТранспорта(Фабрика, СНТ.Мультимодальный, "MULTIMODAL", shippingInfo);
	
	Если СНТ.АвтомобильныйТранспорт Тогда
		shippingInfo.carStateNumber = СНТ.НомерТС; // Гос. номер АТС (39.1 а1.1)
		Если ЗначениеЗаполнено(СНТ.ГосномерПрицепа) Тогда
			shippingInfo.trailerStateNumber = СНТ.ГосномерПрицепа; // Гос. номер прицепа (39.1 а2.1)
		КонецЕсли; 
	КонецЕсли; 
	
	Если СНТ.ВоздушныйТранспорт Тогда
		shippingInfo.boardNumber = СНТ.НомерБорта; // Номер борта (39.1 с1)
	КонецЕсли;
	
	Если СНТ.ЖелезнодорожныйТранспорт Тогда
		shippingInfo.carriageNumber = СНТ.НомерВагона; // Номер вагона (39.1 b1)
	КонецЕсли;
	
	Если СНТ.МорскойТранспорт Тогда
		shippingInfo.shipNumber = СНТ.НомерСудна; // Номер судна (39.1 d1)
	КонецЕсли;
	
	// Раздел Е1. Заправка воздушного судна
	Если СНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна Тогда
		fillingOfAircraft = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "fillingOfAircraft", Фабрика);
		fillingOfAircraft.aircraftRegistrationNumber = СНТ.ЗВСРегистрационныйНомерБорта; // Регистрационный номер борта (E1 41)
		fillingOfAircraft.aircraftType = СНТ.ЗВСТипВоздушногоСудна; // Тип воздушного судна (E1 40)
		fillingOfAircraft.flightNumber = СНТ.ЗВСНомерРейса; // Номер рейса (E1 42)
		fillingOfAircraft.warrantNumber = СНТ.ЗВСНомерРасходногоОрдераТребованиеЗаправки; // Номер расходного ордера или требование на заправку воздушного борта (E1 43)
	КонецЕсли;
	#КонецОбласти
	
	// Раздел F. Договор (контракт) на поставку (F) - (F1)
	#Область ДоговорНаПоставку
	contract = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "contract", Фабрика);
	Если СНТ.БезДоговора Тогда
		contract.isContract = Ложь; // Признак наличия договора (контракта) или приложения к договору (F 44.a, F 44.b)
	Иначе
		contract.isContract = Истина; // Признак наличия договора (контракта) или приложения к договору (F 44.a, F 44.b)
		
		Если ЗначениеЗаполнено(СНТ.ДоговорПоставкиНомер) Тогда
			contract.number = СНТ.ДоговорПоставкиНомер; // Номер (F 44.1)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.ДоговорПоставкиДата) Тогда
			contract.date = Формат(СНТ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Дата (F 44.2)
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СНТ.ДоговорПоставкиУсловияОплаты) Тогда
		contract.termOfContractPayment = СНТ.ДоговорПоставкиУсловияОплаты;// Условия оплаты по договору (45)
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СНТ.ДоговорПоставкиУсловияПоставки) Тогда
		contract.deliveryCondition = СНТ.ДоговорПоставкиУсловияПоставки;// Условия поставки (ИНКОТЕРМС) (46)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНТ.ДоговорВРамкахУСДПолучательНомер) Или ЗначениеЗаполнено(СНТ.ДоговорВРамкахУСДПолучательДата)
		Или ЗначениеЗаполнено(СНТ.ДоговорВРамкахУСДПолучательДата) Или ЗначениеЗаполнено(СНТ.ДоговорВРамкахУСДПоставщикДата) Тогда
		
		// Раздел F1. Договор в рамках УСД/СРП
		sharingParticipantContract = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "sharingParticipantContract", Фабрика);
		
		Если НЕ ПустаяСтрока(СНТ.ДоговорВРамкахУСДПолучательНомер) Тогда
			sharingParticipantContract.customerNumber = СНТ.ДоговорВРамкахУСДПолучательНомер; // Получатель: Номер (F1 48)
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(СНТ.ДоговорВРамкахУСДПолучательДата) Тогда
			sharingParticipantContract.customerDate = Формат(СНТ.ДоговорВРамкахУСДПолучательДата, "ДФ=dd.MM.yyyy;"); // Получатель: Дата (F1 49)
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СНТ.ДоговорВРамкахУСДПоставщикНомер) Тогда
			sharingParticipantContract.sellerNumber = СНТ.ДоговорВРамкахУСДПоставщикНомер; // Поставщик: Номер (F1 46)
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(СНТ.ДоговорВРамкахУСДПоставщикДата) Тогда
			sharingParticipantContract.sellerDate = Формат(СНТ.ДоговорВРамкахУСДПоставщикДата, "ДФ=dd.MM.yyyy;"); // Поставщик: Дата (F1 47)
		КонецЕсли;
	
	КонецЕсли;	
	#КонецОбласти 
		
	// Данные по товарам (G1-G10)
	#Область ДанныеПоТоварам	
	
	// Данные по товарам (G 1)
	Если СНТ.ТоварыВС.Количество() > 0 Тогда
		SntProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "productSet", Фабрика);
		SntProductSet.totalExciseAmount = СНТ.ТоварыВС.Итог("СуммаАкциза");
		SntProductSet.totalNdsAmount = СНТ.ТоварыВС.Итог("СуммаНДС");
		SntProductSet.totalPriceWithTax = СНТ.ТоварыВС.Итог("Сумма");
		SntProductSet.totalPriceWithoutTax = СНТ.ТоварыВС.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SntProductSet, "products", Фабрика); 
		
		Для Каждого ТоварыСтрока Из СНТ.ТоварыВС Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ТоварыВС", СНТ);
		КонецЦикла;
	КонецЕсли;
	
	// Данные по алкогольной продукции (G 2 - 5)
	Если СНТ.ЭтиловыйСпирт.Количество() > 0 ИЛИ СНТ.Виноматериал.Количество() > 0 ИЛИ СНТ.ПивоПивныеНапитки.Количество() > 0  ИЛИ СНТ.АлкогольнаяпродукцияКромеПива.Количество() > 0 Тогда
		
		alcoholSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "alcoholSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.НомерЛицензииПоставщика) Тогда
			alcoholSet.sellerLicenseNumber = СНТ.НомерЛицензииПоставщика; // Номер лицензии поставщика (52)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.АдресПоставщикаПоЛицензии) Тогда
			alcoholSet.sellerLicenseAddress = СНТ.АдресПоставщикаПоЛицензии; // Адрес поставщика по лицензии (53)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.НомерЛицензииПолучателя) Тогда
			alcoholSet.customerLicenseNumber = СНТ.НомерЛицензииПолучателя; // Номер лицензии получателя (54)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.АдресПолучателяПоЛицензии) Тогда
			alcoholSet.customerLicenseAddress = СНТ.АдресПолучателяПоЛицензии; // Адрес получателя по лицензии (55)
		КонецЕсли;
		
	КонецЕсли;
	
	// G2.ЭтиловыйСпирт
	Если СНТ.ЭтиловыйСпирт.Количество() > 0 Тогда
		ethanolProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholSet, "ethanolProductSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG2) Тогда
			ethanolProductSet.operationCode = Строка(СНТ.КодОперацииG2);// Код операции (56) pattern value="1|2|3|15"
		КонецЕсли;
		
		ethanolProductSet.totalExciseAmount = СНТ.ЭтиловыйСпирт.Итог("СуммаАкциза");
		ethanolProductSet.totalNdsAmount = СНТ.ЭтиловыйСпирт.Итог("СуммаНДС");
		ethanolProductSet.totalPriceWithTax = СНТ.ЭтиловыйСпирт.Итог("Сумма");
		ethanolProductSet.totalPriceWithoutTax = СНТ.ЭтиловыйСпирт.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(ethanolProductSet, "products", Фабрика); 	
		
		Для Каждого ТоварыСтрока Из СНТ.ЭтиловыйСпирт Цикл		
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ЭтиловыйСпирт", СНТ);
			product.quantityInLiters = ТоварыСтрока.Количество;// Количество (в литрах) (G 2.6)
			product.spiritPercent = ТоварыСтрока.Крепость; //Крепость (% содержания спирта) (G2 9/1) (28-12-2020 изменения в схеме)
		КонецЦикла;
		
	КонецЕсли;
	
	// G3.Виноматериал
	Если СНТ.Виноматериал.Количество() > 0 Тогда
		wineMaterialProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholSet, "wineMaterialProductSet", Фабрика); 
		wineMaterialProductSet.totalExciseAmount = СНТ.Виноматериал.Итог("СуммаАкциза");
		wineMaterialProductSet.totalNdsAmount = СНТ.Виноматериал.Итог("СуммаНДС");
		wineMaterialProductSet.totalPriceWithTax = СНТ.Виноматериал.Итог("Сумма");
		wineMaterialProductSet.totalPriceWithoutTax = СНТ.Виноматериал.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(wineMaterialProductSet, "products", Фабрика); 	
		Для Каждого ТоварыСтрока Из СНТ.Виноматериал Цикл		
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "Виноматериал", СНТ);
			product.quantityInLiters = ТоварыСтрока.Количество;// Количество (в литрах) (G 3.6)
		Конеццикла;
	КонецЕсли;
	
	// G4.ПивоПивныеНапитки
	Если СНТ.ПивоПивныеНапитки.Количество() > 0 Тогда
		alcoholBeerProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholSet, "alcoholBeerProductSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG4) Тогда
			alcoholBeerProductSet.operationCode = Строка(СНТ.КодОперацииG4);// Код операции (59). pattern value="5|6|7|8|9|10|11|15
		КонецЕсли;
		
		alcoholBeerProductSet.totalExciseAmount = СНТ.ПивоПивныеНапитки.Итог("СуммаАкциза");
		alcoholBeerProductSet.totalNdsAmount = СНТ.ПивоПивныеНапитки.Итог("СуммаНДС");
		alcoholBeerProductSet.totalPriceWithTax = СНТ.ПивоПивныеНапитки.Итог("Сумма");
		alcoholBeerProductSet.totalPriceWithoutTax = СНТ.ПивоПивныеНапитки.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholBeerProductSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ПивоПивныеНапитки Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ПивоПивныеНапитки", СНТ);
			product.productType = СокрЛП(ТоварыСтрока.ВидПродукта);// Вид продукта (G 4.5)
			Если ЗначениеЗаполнено(ТоварыСтрока.ЕмкостьТары) Тогда
				product.containerCapacity = ТоварыСтрока.ЕмкостьТары;// Емкость тары (в литрах) (G 4.7)
			КонецЕсли;
			product.containerCount = ТоварыСтрока.КоличествоУпаковок;// Количество бутылок (G 4.8)
			Если ЗначениеЗаполнено(ТоварыСтрока.КоличествоВУпаковке) Тогда
				product.containerCountInPack = ТоварыСтрока.КоличествоВУпаковке; // Количество (бутылок, банок) в упаковке (G4 9)
			КонецЕсли; 
			product.quantityInLiters = ТоварыСтрока.Количество; // Количество общее(в литрах) (G 4.10)
		КонецЦикла;
	КонецЕсли;
	
	// G5.АлкогольнаяПродукцияКромеПива
	Если СНТ.АлкогольнаяпродукцияКромеПива.Количество() > 0 Тогда
		alcoholExceptBeerProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholSet, "alcoholExceptBeerProductSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG5) Тогда
			alcoholExceptBeerProductSet.operationCode = Строка(СНТ.КодОперацииG5);// Код операции (61) pattern value="5|6|7|8|9|10|11|15
		КонецЕсли;
		
		alcoholExceptBeerProductSet.totalExciseAmount = СНТ.АлкогольнаяпродукцияКромеПива.Итог("СуммаАкциза");
		alcoholExceptBeerProductSet.totalNdsAmount = СНТ.АлкогольнаяпродукцияКромеПива.Итог("СуммаНДС");
		alcoholExceptBeerProductSet.totalPriceWithTax = СНТ.АлкогольнаяпродукцияКромеПива.Итог("Сумма");
		alcoholExceptBeerProductSet.totalPriceWithoutTax = СНТ.АлкогольнаяпродукцияКромеПива.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(alcoholExceptBeerProductSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.АлкогольнаяпродукцияКромеПива Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "АлкогольнаяпродукцияКромеПива", СНТ);
			product.productionType = СокрЛП(ТоварыСтрока.ВидПродукта); // Вид продукции (G 5.6)
			product.containerCapacity = ТоварыСтрока.ЕмкостьТары; // Емкость тары (в литрах) (G 5.7)
			product.containerCount = ТоварыСтрока.КоличествоБутылок; // Количество бутылок (G 5.8)
			product.quantityInLiters = ТоварыСтрока.Количество; // Количество общее (в литрах) (G 5.9)
			product.spiritPercent = ТоварыСтрока.Крепость; // Крепость (% содержания спирта) (28-12-2020 изменения в схеме)
		КонецЦикла;
	КонецЕсли;
	
	// G6.ДанныеПоНефтепродуктам
	Если СНТ.ДанныеПоНефтепродуктам.Количество() > 0 Тогда
		SntOilSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "oilSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG6) Тогда
			SntOilSet.operationCode = Строка(СНТ.КодОперацииG6); // Код операции (63) pattern value="19|20|21|22|25|26|28"
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СНТ.ТипПоставщикаG6) Тогда
			SntOilSet.productSellerType = СНТ.ТипПоставщикаG6; // Тип поставщика (64)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.КодОГДОтправкиG6) Тогда
			SntOilSet.kogdOfSender = СНТ.КодОГДОтправкиG6; // Код органа государственных доходов адреса отгрузки (65)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.КодОГДДоставкиG6) Тогда
			SntOilSet.kogdOfRecipient = СНТ.КодОГДДоставкиG6; // Код органа государственных доходов адреса поставки (66)	
		КонецЕсли;	
		
		SntOilSet.totalExciseAmount = СНТ.ДанныеПоНефтепродуктам.Итог("СуммаАкциза");
		SntOilSet.totalNdsAmount = СНТ.ДанныеПоНефтепродуктам.Итог("СуммаНДС");
		SntOilSet.totalPriceWithTax = СНТ.ДанныеПоНефтепродуктам.Итог("Сумма");
		SntOilSet.totalPriceWithoutTax = СНТ.ДанныеПоНефтепродуктам.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SntOilSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ДанныеПоНефтепродуктам Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ДанныеПоНефтепродуктам", СНТ);
		КонецЦикла;
	КонецЕсли;
	
	// G7.ДанныеПоБиотопливу
	Если СНТ.ДанныеПоБиотопливу.Количество() > 0 Тогда
		
		biofuelSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "biofuelSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОГДОтправкиG7) Тогда
			biofuelSet.kogdOfSender = СНТ.КодОГДОтправкиG7; // Код органа государственных доходов адреса отгрузки (70)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.КодОГДДоставкиG7) Тогда
			biofuelSet.kogdOfRecipient = СНТ.КодОГДДоставкиG7; // Код органа государственных доходов адреса поставки (71)
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG7) Тогда
			biofuelSet.operationCode = Строка(СНТ.КодОперацииG7); // Код операции (68) pattern value="30|31|34|37
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СНТ.ТипПоставщикаG7) Тогда
			biofuelSet.productSellerType = СНТ.ТипПоставщикаG7; // Тип поставщика (69)
		КонецЕсли;
		
		biofuelSet.totalExciseAmount = СНТ.ДанныеПоБиотопливу.Итог("СуммаАкциза");
		biofuelSet.totalNdsAmount = СНТ.ДанныеПоБиотопливу.Итог("СуммаНДС");
		biofuelSet.totalPriceWithTax = СНТ.ДанныеПоБиотопливу.Итог("Сумма");
		biofuelSet.totalPriceWithoutTax = СНТ.ДанныеПоБиотопливу.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(biofuelSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ДанныеПоБиотопливу Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ДанныеПоБиотопливу", СНТ);
		КонецЦикла;
	КонецЕсли;
	
	// G8.ТабачнаяПродукция
	Если СНТ.ТабачнаяПродукция.Количество() > 0 Тогда
		tobaccoSet= ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "tobaccoSet", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОперацииG8) Тогда
			tobaccoSet.operationCode = Строка(СНТ.КодОперацииG8); //Код операции (G8 74) pattern value="38|39|40|41|42|43"
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.КодОГДОтправкиG8) Тогда
			tobaccoSet.kogdOfSender = СНТ.КодОГДОтправкиG8; // Код ОГД адреса отправки/отгрузки (G8 75)
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СНТ.КодОГДДоставкиG8) Тогда
			tobaccoSet.kogdOfRecipient = СНТ.КодОГДДоставкиG8; // Код ОГД адреса доставки/поставки (G8 76)
		КонецЕсли;
		
		tobaccoSet.totalExciseAmount = СНТ.ТабачнаяПродукция.Итог("СуммаАкциза");
		tobaccoSet.totalNdsAmount = СНТ.ТабачнаяПродукция.Итог("СуммаНДС");
		tobaccoSet.totalPriceWithTax = СНТ.ТабачнаяПродукция.Итог("Сумма");
		tobaccoSet.totalPriceWithoutTax = СНТ.ТабачнаяПродукция.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(tobaccoSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ТабачнаяПродукция Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ТабачнаяПродукция", СНТ);
			Если ЗначениеЗаполнено(ТоварыСтрока.КоличествоВПачке) Тогда
				product.quantityInPack = ТоварыСтрока.КоличествоВПачке; // Количество табачного изделия в пачке (в штуках, килограммах, миллилитрах) (G 8.7)
			КонецЕсли;
			product.numberOfPacks = ТоварыСтрока.КоличествоПачек; // Количество пачек, капсул, картриджей , резервуаров (в штуках) (G8 8)
		КонецЦикла;
	КонецЕсли;

	// G9.ДругиеТоварыЦифроваяМаркировка
	Если СНТ.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 Тогда
		
		SntOtherProductWithDigitalMarkSet= ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "OtherProductWithDigitalMarkSet", Фабрика);
		
		SntOtherProductWithDigitalMarkSet.totalExciseAmount = СНТ.ДругиеТоварыЦифроваяМаркировка.Итог("СуммаАкциза");
		SntOtherProductWithDigitalMarkSet.totalNdsAmount = СНТ.ДругиеТоварыЦифроваяМаркировка.Итог("СуммаНДС");
		SntOtherProductWithDigitalMarkSet.totalPriceWithTax = СНТ.ДругиеТоварыЦифроваяМаркировка.Итог("Сумма");
		SntOtherProductWithDigitalMarkSet.totalPriceWithoutTax = СНТ.ДругиеТоварыЦифроваяМаркировка.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SntOtherProductWithDigitalMarkSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ДругиеТоварыЦифроваяМаркировка Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ДругиеТоварыЦифроваяМаркировка",СНТ);
			product.packageQuantity = ТоварыСтрока.Количество; // Количество потребительских упаковок(в штуках) (G9 6)
		КонецЦикла;
	КонецЕсли;
	
	// G10.ТоварыЭкспортныйКонтроль
	Если СНТ.ТоварыЭкспортныйКонтроль.Количество() > 0 Тогда
		SntExportControlProductSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "ExportControlProductSet", Фабрика);
		SntExportControlProductSet.totalExciseAmount = СНТ.ТоварыЭкспортныйКонтроль.Итог("СуммаАкциза");
		SntExportControlProductSet.totalNdsAmount = СНТ.ТоварыЭкспортныйКонтроль.Итог("СуммаНДС");
		SntExportControlProductSet.totalPriceWithTax = СНТ.ТоварыЭкспортныйКонтроль.Итог("Сумма");
		SntExportControlProductSet.totalPriceWithoutTax = СНТ.ТоварыЭкспортныйКонтроль.Итог("СуммаБезНалогов");
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SntExportControlProductSet, "products", Фабрика);
		Для Каждого ТоварыСтрока Из СНТ.ТоварыЭкспортныйКонтроль Цикл
			product = ЗаполнитьSNT_ДобавитьБазовыеСведенияОТоваре(products, ТоварыСтрока, Фабрика, "ТоварыЭкспортныйКонтроль", СНТ);
			product.permissiveDocumentNumber = СокрЛП(ТоварыСтрока.НомерЛицензии); // Номер Лицензия/Разрешение документа (G10 4)
			product.permissiveDocumentIssueDate = Формат(ТоварыСтрока.ДатаВыдачиЛицензии, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Номер Лицензия/Разрешение: Дата выдачи (G10 5)
			product.permissiveDocumentExpireDate = Формат(ТоварыСтрока.ДатаОкончанияЛицензии, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Номер Лицензия/Разрешение: Дата окончания (G10 6)
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти 
	
	//Раздел К. Данные о грузе, перевозимом на автомобильном транспорте carCargoInfo
	#Область ДанныеОГрузеПеревозимомНаАвтомобильномТранспорте	
	carCargoInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "carCargoInfo", Фабрика);
	Если ЗначениеЗаполнено(СНТ.НомерОттискаПломбы) Или ЗначениеЗаполнено(СНТ.ФИОВодителя) Или ЗначениеЗаполнено(СНТ.ИИНВодителя) Тогда
			
		Если НЕ ПустаяСтрока (СНТ.НомерОттискаПломбы) Тогда
			carCargoInfo.stampPrintNumber = СНТ.НомерОттискаПломбы;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (СНТ.ФИОВодителя) Тогда
			carCargoInfo.driverFIO = СНТ.ФИОВодителя;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока (СНТ.ИИНВодителя) Тогда
			carCargoInfo.driverTin = СНТ.ИИНВодителя;
		КонецЕсли;
		
	КонецЕсли;	
	
	//Раздел K1. Сведение о грузе CargoInfo
	Если СНТ.СведенияОГрузе.Количество() > 0 Тогда
		 
		cargoInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(carCargoInfo, "cargoInfo", Фабрика);
		
		Для Каждого ГрузСтрока Из СНТ.СведенияОГрузе Цикл
			cargo = ЭСФСервер.НовыйЭлементСпискаXDTO(cargoInfo.cargoInfo, Фабрика);
			
			Если НЕ ПустаяСтрока (ГрузСтрока.КлассГруза) Тогда
				cargo.cargoClass = ГрузСтрока.КлассГруза; //Класс груза (K 1.8)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.КодГруза) Тогда
				cargo.cargoCode = ГрузСтрока.КодГруза; //Код груза (K 1.7)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.НоменклатурныйНомер) Тогда
				cargo.code = ГрузСтрока.НоменклатурныйНомер; //Номенклатурный номер (код) (K 1.2)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.Документы) Тогда
				cargo.documents = ГрузСтрока.Документы; //С грузом следуют документы (K 1.3)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.МассаБрутто) Тогда
				cargo.grossWeight = ГрузСтрока.МассаБрутто; //Масса брутто (т.) (K 1.9)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.МассаНетто) Тогда
				cargo.netWeight = ГрузСтрока.МассаНетто; //Масса нетто (т.) (K 1.10)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.НомерСтроки) Тогда
				cargo.number = ГрузСтрока.НомерСтроки; //№ п/п (K 1.1)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.ВидУпаковки) Тогда
				cargo.packagingType = ГрузСтрока.ВидУпаковки; //Вид упаковки (K 1.4)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.КоличествоМест) Тогда
				cargo.seatsNumber = ГрузСтрока.КоличествоМест; //Кол-во мест (K 1.5)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ГрузСтрока.СпособОпределенияМассы) Тогда
				cargo.weightDeterminationType = ГрузСтрока.СпособОпределенияМассы; //Способ опредления массы (K 1.6)
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Раздел K2. Погрузочно-разгрузочные операции LoadingUnloadingInfo
	Если СНТ.ПогрузочноРазгрузочныеОперации.Количество() > 0 Тогда
		
		loadingUnloadingInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(carCargoInfo, "loadingUnloadingInfo", Фабрика);
		
		Для Каждого ПогрузРазгрузОперацCтрока Из СНТ.ПогрузочноРазгрузочныеОперации Цикл
			loadUnloadInfo = ЭСФСервер.НовыйЭлементСпискаXDTO(loadingUnloadingInfo.loadingUnloadingInfo, Фабрика);
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.ВремяПрибытия) Тогда
				loadUnloadInfo.arrivalDate = Формат(ПогрузРазгрузОперацCтрока.ВремяПрибытия, "ДФ=dd.MM.yyyy HH.mm.ss; ДП=01.01.0001 0:00:00"); //Время прибытия (K 2.15)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.ВремяУбытия) Тогда
				loadUnloadInfo.departureDate = Формат(ПогрузРазгрузОперацCтрока.ВремяУбытия, "ДФ=dd.MM.yyyy HH.mm.ss; ДП=01.01.0001 0:00:00"); //Время убытия (K 2.16)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.Простой) Тогда
				loadUnloadInfo.downtime = ПогрузРазгрузОперацCтрока.Простой; //Простой (K 2.17)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.ВремяПростоя) Тогда
				loadUnloadInfo.downtimeDate = Формат(ПогрузРазгрузОперацCтрока.ВремяПростоя, "ДФ=dd.MM.yyyy HH.mm.ss; ДП=01.01.0001 0:00:00"); //Время простоя (мин.) (K 2.18)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.Исполнитель) Тогда
				loadUnloadInfo.executor = ПогрузРазгрузОперацCтрока.Исполнитель; //Исполнитель (перевозчик, отправитель, получатель) (K 2.12)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.СпособПогрузки) Тогда
				loadUnloadInfo.loadingType = ПогрузРазгрузОперацCтрока.СпособПогрузки; //Способ погрузки (ручной, нал. мех. грузопод., емк. ковша) (K 2.13)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.КодСпособаПогрузки) Тогда
				loadUnloadInfo.loadingTypeCode = ПогрузРазгрузОперацCтрока.КодСпособаПогрузки; //Код способа погрузки (K 2.14)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.Наименование) Тогда
				loadUnloadInfo.name = ПогрузРазгрузОперацCтрока.Наименование; //Наименов., колич. (K 2.19)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.Операция) Тогда
				loadUnloadInfo.operation = ПогрузРазгрузОперацCтрока.Операция; //Операция (K 2.11)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.ПодписьОтветственногоЛица) Тогда
				loadUnloadInfo.responsiblePersonSignature = ПогрузРазгрузОперацCтрока.ПодписьОтветственногоЛица; //Подпись ответстственного лица (K 2.20)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПогрузРазгрузОперацCтрока.ТранспортныеУслуги) Тогда
				loadUnloadInfo.transportServices = ПогрузРазгрузОперацCтрока.ТранспортныеУслуги; //Транспортные услуги (K 2.21)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//Раздел K3. Прочие сведения (заполняется перевозчиком) OtherInfo
	Если СНТ.ПрочиеСведения.Количество() > 0 Тогда
		
		otherInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(carCargoInfo, "otherInfo", Фабрика);
		
		Для Каждого ПрочиеСведенияCтрока Из СНТ.ПрочиеСведения Цикл
			otherInf = ЭСФСервер.НовыйЭлементСпискаXDTO(otherInfo.otherInfo, Фабрика);
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.ПоправочныйКоэффициентВодитель) Тогда
				otherInf.driverCoefficient = ПрочиеСведенияCтрока.ПоправочныйКоэффициентВодитель; //Поправочный коэффициент (расценка водителя)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.КодЭкспедиции) Тогда
				otherInf.expeditionCode = ПрочиеСведенияCтрока.КодЭкспедиции; //Код экспедиции
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.РасстояниеПоГруппам1) Тогда
				otherInf.firstGroupTransportationDistance = ПрочиеСведенияCтрока.РасстояниеПоГруппам1; //Расстояние перевозок по группам дорог (І гр.) (км.)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.ЗаТранспортныеУслугиКлиент) Тогда
				otherInf.fromClient = ПрочиеСведенияCтрока.ЗаТранспортныеУслугиКлиент; //За транспортные услуги с клиента
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.РасстояниеПоГруппамГород) Тогда
				otherInf.inCityTransportationDistance = ПрочиеСведенияCтрока.РасстояниеПоГруппамГород; //Расстояние перевозок по группам дорог (в гор.) (км.)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.ПоправочныйКоэффициентОсновнойТариф) Тогда
				otherInf.mainCoefficient = ПрочиеСведенияCтрока.ПоправочныйКоэффициентОсновнойТариф; //Поправ. коэфф. (основной тариф)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.НомерСтроки) Тогда
				otherInf.number = ПрочиеСведенияCтрока.НомерСтроки; //№ п/п
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.Штраф) Тогда
				otherInf.penalty = ПрочиеСведенияCтрока.Штраф; //Штраф
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.РасстояниеПоГруппам2) Тогда
				otherInf.secondGroupTransportationDistance = ПрочиеСведенияCтрока.РасстояниеПоГруппам2; //Расстояние перевозок по группам дорог (ІІ гр.) (км.)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.Отметки) Тогда
				otherInf.setActMarks = ПрочиеСведенияCтрока.Отметки; //Отметки о составленных актах
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.РасстояниеПоГруппам3) Тогда
				otherInf.thirdGroupTransportationDistance = ПрочиеСведенияCтрока.РасстояниеПоГруппам3; //Расстояние перевозок по группам дорог (ІІІ гр.) (км.)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.ЗаТранспортныеУслугиВодитель) Тогда
				otherInf.toDriver = ПрочиеСведенияCтрока.ЗаТранспортныеУслугиВодитель; //За транспортные услуги водителю
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ПрочиеСведенияCтрока.РасстояниеПоГруппамВсего) Тогда
				otherInf.totalTransportationDistance = ПрочиеСведенияCтрока.РасстояниеПоГруппамВсего; //Расстояние перевозок по группам дорог (всего) (км.)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	//Раздел К4. Раздел K4. Таксировка TaxInfo	
	Если СНТ.Таксировка.Количество() > 0 Тогда
		
		taxInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(carCargoInfo, "taxInfo", Фабрика);
		
		Для Каждого ТаксировкаCтрока Из СНТ.Таксировка Цикл
			taxInf = ЭСФСервер.НовыйЭлементСпискаXDTO(taxInfo.taxInfo, Фабрика);
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.РасчетСтоимости) Тогда
				taxInf.costCalculation = ТаксировкаCтрока.РасчетСтоимости; //Расчет стоимости (K 4.2)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.СкидкаПростой) Тогда
				taxInf.discountForDowntime = ТаксировкаCтрока.СкидкаПростой; //Скидка за сокр. простоя (K 4.11)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.ЗаСпецТранспорт) Тогда
				taxInf.forSpecialTransport = ТаксировкаCтрока.ЗаСпецТранспорт; //За спец. трансп (K 4.5)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.ЗаТонны) Тогда
				taxInf.forTonns = ТаксировкаCтрока.ЗаТонны; //За тонны (K 4.3)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.ЗаТранспортныеУслуги) Тогда
				taxInf.forTransportServices = ТаксировкаCтрока.ЗаТранспортныеУслуги; //За трансп. услуги (K 4.6)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.СверхнормативПогруз) Тогда
				taxInf.loading = ТаксировкаCтрока.СверхнормативПогруз; //Погруз (K 4.8)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.ПогрузочноРазгрузочныеРаботы) Тогда
				taxInf.loadingUnloadingWork = ТаксировкаCтрока.ПогрузочноРазгрузочныеРаботы; //Погр.-разгр. раб (тонн) (K 4.7)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.ПрочиеДоплаты) Тогда
				taxInf.otherSurcharge = ТаксировкаCтрока.ПрочиеДоплаты; //Прочие доплаты (K 4.10)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.Таксировка) Тогда
				taxInf.tax = ТаксировкаCтрока.Таксировка; //Таксировка (K 4.13)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.Всего) Тогда
				taxInf.total = ТаксировкаCтрока.Всего; //Всего (K 4.12)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.Недогруз) Тогда
				taxInf.underload = ТаксировкаCтрока.Недогруз; //Недогруз автомоб. и прицепа (K 4.4)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока (ТаксировкаCтрока.СверхнормативРазгруз) Тогда
				taxInf.unloading = ТаксировкаCтрока.СверхнормативРазгруз; //Разгр (K 4.9)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Раздел L. Сведения по отпуску товара 
	#Область СведенияПоОтпускуТовара
	
	releaseGoodsInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "releaseGoodsInfo", Фабрика);
	
	Если НЕ ПустаяСтрока(СНТ.НомерДоверенностиОтпуск) Тогда
		releaseGoodsInfo.powerOfAttorneyNumber = СНТ.НомерДоверенностиОтпуск; // Номер доверенности, по которой осуществляется отпуск товара (83.2)
	КонецЕсли;
	
	Если СНТ.ДатаДоверенностиОтпуск <> Дата(1, 1, 1) Тогда
		releaseGoodsInfo.powerOfAttorneyDate = Формат(СНТ.ДатаДоверенностиОтпуск, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); // Дата доверенности, по которой осуществляется отпуск товара (83.3)
	КонецЕсли;
	
	// releaseGoodsInfo.releaseProducer - 84. Отпуск товара произвел от имени
	#КонецОбласти
	
	// Раздел M. Сведения о приемке товара------------- нет отдельным параметром в Схеме
	
	// Раздел O. Справочные сведения
	#Область СправочныеСведения
	Если ЗначениеЗаполнено(СНТ.КодОГДПоставщика) Или ЗначениеЗаполнено(СНТ.КодОГДПолучателя) Тогда
		directoryInfo = ЭСФСервер.НовоеСвойствоОбъектаXDTO(SNT, "directoryInfo", Фабрика);
		
		Если ЗначениеЗаполнено(СНТ.КодОГДПоставщика) Тогда
			directoryInfo.sellerKogd = Формат(СНТ.КодОГДПоставщика, "ЧВН="); // Код ОГД по месту нахождения (жительства) поставщика/отправителя (O 91)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СНТ.КодОГДПолучателя) Тогда
			directoryInfo.customerKogd = СНТ.КодОГДПолучателя; // Код ОГД по месту нахождения (жительства) получателя (O 92)
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти	
	
КонецПроцедуры

Функция НовыйSNT(Знач СНТ, Знач Фабрика, Знач ВерсияСНТ = "InvoiceV2", ВерсияИСЭСФ)
	
	Если ВерсияСНТ = "SntV1" Тогда
		ПространствоИмен = "v1.snt"
	Иначе
		ПространствоИмен = "v2.snt"
	КонецЕсли;	
	
	ТипSNT = Фабрика.Тип(ПространствоИмен, ВерсияСНТ);
	SNT = Фабрика.Создать(ТипSNT);
	
	ЗаполнитьSNT(СНТ, Фабрика, SNT, ВерсияСНТ);
	
	Возврат SNT;
	
КонецФункции

#КонецОбласти 

#Область ОтправкаСНТ

// См. СНТСервер.СоздатьИсходящиеSNT()
Процедура СоздатьИсходящиеSNT(
	Знач МассивСНТ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиСНТ,
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	// здесь можно переопределить структуру выгрузки в зависимости от версии ИС ЭСФ
	
	СоздатьИсходящиеSNT_ВерсияАПИ11(МассивСНТ, 
	УстанавливатьПодпись, 
	ТипПодписиСНТ, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник,
	ВерсияИСЭСФ);
	
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеSNT_ВерсияАПИ1(
	Знач МассивСНТ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаСНТ_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаСНТ Из МассивСНТ Цикл		
		
		// Чтобы при отправке СНТ не выполнять запись дважды:
		// При создании СНТ заполняются некоторые реквизиты СНТ, но СНТ не записывается.
		// При отправке СНТ данные реквизиты заполняются теми же значениями, но СНТ уже записывается.
		// Подробнее см. заполнение и запись СНТ в методе ОтправитьИсходящиеInvoice().
		ОбъектСНТ = СсылкаСНТ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		//Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
		//	ОбъектСНТ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		//Иначе
		//	ОбъектСНТ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		//КонецЕсли;
		ОбъектСНТ.ТипПодписи = ТипПодписи;
		
		InvoiceXDTO = НовыйSNT(ОбъектСНТ, Фабрика, "SntV1", ВерсияИСЭСФ);
		
		InvoiceXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "snt", Фабрика);
		
		//=========
		InvoiceXML = СтрЗаменить(InvoiceXML, "<snt xmlns=""v1.snt"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<snt>");
		
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""abstractSnt.snt""", "");		
		
		// Префикс версии		
		InvoiceXML = СтрЗаменить(InvoiceXML, "<snt>", "<v1:snt xmlns:a=""abstractSnt.snt"" xmlns:v1=""v1.snt"">	");		
		InvoiceXML = СтрЗаменить(InvoiceXML, "</snt>", "</v1:snt>");		
		
		//Для отправки через API структура обернута в <invoiceBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			КоллекцияSignedContentXML.Вставить(СсылкаСНТ, InvoiceHashXML);
			
			//Для отправки через API добавляем обертку <invoiceBody>
			InvoiceXML = "<sntBody><![CDATA[" + InvoiceXML + "]]></sntBody>";
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписи);
			InvoiceXML = "<sntInfo>" + InvoiceXML + "<version>sntV1</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType></sntInfo>";
			
		КонецЕсли;
		
		КоллекцияInvoiceXML.Вставить(СсылкаСНТ, InvoiceXML);
		
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеSNT_ВерсияАПИ11(
	Знач МассивСНТ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаСНТ_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаСНТ Из МассивСНТ Цикл		
		
		// Чтобы при отправке СНТ не выполнять запись дважды:
		// При создании СНТ заполняются некоторые реквизиты СНТ, но СНТ не записывается.
		// При отправке СНТ данные реквизиты заполняются теми же значениями, но СНТ уже записывается.
		// Подробнее см. заполнение и запись СНТ в методе ОтправитьИсходящиеInvoice().
		ОбъектСНТ = СсылкаСНТ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		//Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
		//	ОбъектСНТ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		//Иначе
		//	ОбъектСНТ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		//КонецЕсли;
		ОбъектСНТ.ТипПодписи = ТипПодписи;
		
		InvoiceXDTO = НовыйSNT(ОбъектСНТ, Фабрика, "SntV1", ВерсияИСЭСФ);
		
		InvoiceXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "snt", Фабрика);
		
		// Доработать канонический XML.
		// платформа 8.3.9.1818 в клиент-сервере не удаляет теги xmlns, в файловой базе теги удаляются
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""""", "");	
		InvoiceXML = СтрЗаменить(InvoiceXML, " =""""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "xmlns", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, " =""abstractSnt.snt""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<default:", "<");
		InvoiceXML = СтрЗаменить(InvoiceXML, "</default:", "</");
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns="""" xmlns:d2p1=""v1.snt""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, " :d2p1=""v1.snt""", "");
		
		//=========
		InvoiceXML = СтрЗаменить(InvoiceXML, "<snt xmlns=""v1.snt"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<snt>");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<snt =""v1.snt"" :xs=""http://www.w3.org/2001/XMLSchema"" :xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<snt>");
		
		InvoiceXML = СтрЗаменить(InvoiceXML, "<snt>", "<v1:snt xmlns:asnt=""abstractSnt.snt"" xmlns:v1=""v1.snt"">	");
		InvoiceXML = СтрЗаменить(InvoiceXML, "</snt>", "</v1:snt>");
		
		// Для отправки через API структура обернута в <invoiceBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			КоллекцияSignedContentXML.Вставить(СсылкаСНТ, InvoiceHashXML);
			
			// Для отправки через API добавляем обертку <invoiceBody>
			InvoiceXML = "<sntBody><![CDATA[" + InvoiceXML + "]]></sntBody>";
			// Добавляем заготовку для подписи
			ТипПодписиСтрока = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписи);
			InvoiceXML = "<sntInfo>" + InvoiceXML + "<version>SntV1</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписиСтрока+"</signatureType></sntInfo>";
			
		КонецЕсли;
		
		КоллекцияInvoiceXML.Вставить(СсылкаСНТ, InvoiceXML);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьСНТПоСтруктурнымЕдиницам(Знач МассивСНТ, ОткрыватьСессиюФилиаломПолучателем = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	               |				И СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	               |				И ТИПЗНАЧЕНИЯ(СНТ.Получатель) = &ТипПодразделенияОрганизаций
	               |			ТОГДА СНТ.Получатель
	               |		КОГДА СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	               |				И СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	               |				И &ОткрыватьСессиюФилиаломПолучателем
	               |			ТОГДА ВЫБОР
	               |					КОГДА ТИПЗНАЧЕНИЯ(СНТ.Получатель)<> &ТипКонтрагенты
	               |						ТОГДА СНТ.Получатель
	               |					ИНАЧЕ СНТ.Организация
	               |				КОНЕЦ
	               |		КОГДА ТИПЗНАЧЕНИЯ(СНТ.Поставщик) = &ТипПодразделенияОрганизаций
	               |			ТОГДА СНТ.Поставщик
	               |		ИНАЧЕ СНТ.Организация
	               |	КОНЕЦ КАК СтруктурнаяЕдиница,
	               |	СНТ.Ссылка КАК СНТ
	               |ИЗ
	               |	Документ.СНТ КАК СНТ
	               |ГДЕ
	               |	СНТ.Ссылка В(&МассивСНТ)
	               |ИТОГИ ПО
	               |	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	Запрос.УстановитьПараметр("ТипПодразделенияОрганизаций", СНТСерверПереопределяемый.ПолучитьТипПодразделенияОрганизаций());
	Запрос.УстановитьПараметр("ТипКонтрагенты", СНТСерверПереопределяемый.ПолучитьТипКонтрагенты());
	Запрос.УстановитьПараметр("ОткрыватьСессиюФилиаломПолучателем", ОткрыватьСессиюФилиаломПолучателем);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхСНТ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивСНТ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивСНТ.Добавить(ВыборкаДетальныеЗаписи.СНТ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхСНТ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивСНТ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указана организация:
			|%1'");
			
			СтрокаСписокСНТ = "";
			Для Каждого СсылкаСНТ Из СгруппированныйМассивСНТ Цикл
				СтрокаСписокСНТ = СтрокаСписокСНТ + "- " + СсылкаСНТ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокСНТ = СокрЛП(СтрокаСписокСНТ);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокСНТ);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхСНТ;
	
КонецФункции

Функция Переопределяемый_СгруппироватьСопоставленияСНТПоСтруктурнымЕдиницам(Знач МассивСопоставленийСНТ) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СопоставлениеСНТиФНО.Организация КАК СтруктурнаяЕдиница,
	|	СопоставлениеСНТиФНО.Ссылка КАК СопоставлениеСНТ
	|ИЗ
	|	Документ.СопоставлениеСНТиФНО КАК СопоставлениеСНТиФНО
	|ГДЕ
	|	СопоставлениеСНТиФНО.Ссылка В(&МассивСопоставленийСНТ)
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивСопоставленийСНТ", МассивСопоставленийСНТ);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхСНТ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивСопоставленийСНТ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивСопоставленийСНТ.Добавить(ВыборкаДетальныеЗаписи.СопоставлениеСНТ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхСНТ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивСопоставленийСНТ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указана организация:
			|%1'");
			
			СтрокаСписокСНТ = "";
			Для Каждого СсылкаСопоставление Из СгруппированныйМассивСопоставленийСНТ Цикл
				СтрокаСписокСНТ = СтрокаСписокСНТ + "- " + СсылкаСопоставление + Символы.ПС;
			КонецЦикла;
			СтрокаСписокСНТ = СокрЛП(СтрокаСписокСНТ);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокСНТ);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхСНТ;
	
КонецФункции

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьSnt(ВерсияВС, Знач КоллекцияДанныеКоллекцииSntXML, Знач КоллекцияПодписейСНТ, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированнаяSntXML Из КоллекцияДанныеКоллекцииSntXML Цикл
		
		СтруктурнаяЕдиница = СгруппированнаяSntXML.Ключ;
		ДанныеКоллекцииSntXML = СгруппированнаяSntXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииSntXML) = Тип("Соответствие") Тогда
			КоллекцияSntXML = ДанныеКоллекцииSntXML;
		Иначе
			КоллекцияSntXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииSntXML);
		КонецЕсли;
		
		ДанныеСтруктурнойЕдиницы 	= ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		ОткрытыйКлючЭЦП 			= ДанныеСтруктурнойЕдиницы.ОткрытыйСертификатBase64;
		КоллекцияПодписей 			= КоллекцияПодписейСНТ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		Результат = ОтправитьИсходящиеSnt(ВерсияВС, КоллекцияSntXML, КоллекцияПодписей, ДанныеПрофиляИСЭСФ, ОткрытыйКлючЭЦП);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьИсходящиеSnt(ВерсияВС, Знач КоллекцияSntXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
	
	ПредельныйРазмерПакетаИсходящих = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияSntXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящих;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеSnt", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));
	
	РезультатОтправки = Новый Соответствие;
	// Сформируем пакеты на отправку с учетом предельного размера пакета
	СчетчикПакета = 0;
	НомерПакета = 0;
	КоллекцияSntXMLПакета = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из КоллекцияSntXML Цикл		
		СчетчикПакета = СчетчикПакета + 1;
		КоллекцияSntXMLПакета.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		// Если это предельный размер пакета, то отправляем его и формируем новый
		Если (СчетчикПакета = ПредельныйРазмерПакетаИсходящих) ИЛИ (СчетчикПакета = ОбщийРазмерКолекцииНаОтправку) Тогда
			НомерПакета = НомерПакета + 1;
			
			СообщениеПользователя = Новый СообщениеПользователю;
			
			Текст = НСтр("ru = 'Происходит отправка пакета сопроводительных накладных на товары %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);	
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			РезультатОтправкиПакета = ОтправитьПакетИсходящихSnt(ВерсияВС, КоллекцияSntXMLПакета, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии);
			КоллекцияSntXMLПакета.Очистить();
			ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета);
			
			// уменьшим количество оставшихся документов
			ОбщийРазмерКолекцииНаОтправку = ОбщийРазмерКолекцииНаОтправку - СчетчикПакета;
			СчетчикПакета = 0;
		КонецЕсли;		
		
	КонецЦикла;
	
	МассивПринятых = Новый Массив;
	МассивОшибочных = Новый Массив;
	//небльшая информация об отправке
	Если РезультатОтправки.Количество() > 1 Тогда
		Для Каждого СтрокаРезультата Из РезультатОтправки Цикл
			Если СтрокаРезультата.Значение.ПринятИСЭСФ Тогда
				МассивПринятых.Добавить(СтрокаРезультата.Ключ);
			Иначе
				МассивОшибочных.Добавить(СтрокаРезультата.Ключ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ТекстСообщения =  НСтр("ru = 'Отправка сопроводительных накладных на товары завершена'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеSnt", "Информация", , , ТекстСообщения);
	
	КоличествоПринятых = МассивПринятых.Количество();
	Если КоличествоПринятых > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Принято %1 СНТ из %2'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоПринятых, КоллекцияSntXML.Количество());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеSnt", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
	КоличествоОшибочных = МассивОшибочных.Количество();
	Если КоличествоОшибочных > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Отклонено %1 СНТ из %2'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоОшибочных, КоллекцияSntXML.Количество());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеSnt", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
	// Обновим статусы отправленных ЭСФ, после завершения отправки всех пакетов
	ОбновитьДокументыСНТПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияВС);
	
	Возврат РезультатОтправки;
	
КонецФункции

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьПакетИсходящихSnt(ВерсияВС, Знач КоллекцияSntXMLПакета, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
	
	Если ИдентификаторСессии = Неопределено Тогда
		ТекстОшибки = "";
		
		Попытка
			ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗакрытьСессию = Истина;		
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	МассивОтправляемыхСНТ = Новый Массив();
	
	sntSet = "";
	Для Каждого ЭлементКоллекции Из КоллекцияSntXMLПакета Цикл
		sntXML = ЭлементКоллекции.Значение;
		ЭЦП = КоллекцияПодписей[ЭлементКоллекции.Ключ];
		sntXML = СтрЗаменить(sntXML, "[%ЭЦП%]", ЭЦП);		
		sntSet = sntSet + sntXML + Символы.ПС; 	
		
		МассивОтправляемыхСНТ.Добавить(ЭлементКоллекции.Ключ);
		
	КонецЦикла;
	
	ОтветXML = ВыполнитьsntUploadRequest(sntSet, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОтправитьИсходящиеsnt'"), 
		УровеньЖурналаРегистрации.Информация,,,
		"Отправлен пакет документов для ВС (snt)");
		
		РезультатОтправкиПакета = Новый Соответствие;
		Для Каждого ЭлементКоллекции Из КоллекцияSntXMLПакета Цикл
			sntXML = ЭлементКоллекции.Значение;
			
			РезультатСтруктура = Новый Структура;
			
			// Удалим Секцию CDATA для разбора XML
			sntXMLБезCDATA = СтрЗаменить(sntXML, "<sntBody><![CDATA[", "<sntBody>");
			sntXMLБезCDATA = СтрЗаменить(sntXMLБезCDATA, "]]></sntBody>", "</sntBody>");	
			
			sntXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(sntXMLБезCDATA, ФабрикаXDTO);
			
			РезультатСтруктура.Вставить("Номер", sntXDTO.sntBody.snt.number);
			РезультатСтруктура.Вставить("Дата", sntXDTO.sntBody.snt.date);
			
			РезультатСтруктура.Вставить("ТипПодписи", ЭСФКлиентСервер.ТипПодписиИБ(sntXDTO.signatureType));
			РезультатСтруктура.Вставить("ПринятИСЭСФ", Ложь);
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатОтправкиПакета.Вставить(ЭлементКоллекции.Ключ, РезультатСтруктура);
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ЗаполнитьРезультатОтправкиИсходящихSnt(ОтветXDTO, "acceptedList", РезультатОтправкиПакета, МассивОтправляемыхСНТ);
		ЗаполнитьРезультатОтправкиИсходящихSnt(ОтветXDTO, "declinedList", РезультатОтправкиПакета, МассивОтправляемыхСНТ);
		
		ЗаписатьИзмененияСНТПослеОтправкиПакета(РезультатОтправкиПакета, КоллекцияПодписей);
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОтправитьИсходящиеSnt'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При отправке исходящих СНТ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции

Функция ВыполнитьsntUploadRequest(Знач SntSetXML, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС)
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросsntUploadRequest_Версия1").ПолучитьТекст();	
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[uFormSet]", SntSetXML);
	
	ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService(),,ВерсияВС); 	
	
	Если ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда		
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService(),,ВерсияВС); 
	КонецЕсли;
	
	Возврат ОтветXML;
	
КонецФункции

Функция ИмяСервисаUploadSntService() Экспорт
	Возврат "UploadSntService";	
КонецФункции

Процедура ЗаполнитьРезультатОтправкиИсходящихSnt(Знач ОтветXDTO, Знач ИмяЭлемента, Результат, МассивОтправляемыхСНТ)
	
	resultSet = ОтветXDTO.Body.sntUploadResponse[ИмяЭлемента];
	sntUploadResult = СНТСервер.ПолучитьСвойство(resultSet, "sntUploadResult", Неопределено);	
	
	Если sntUploadResult = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	sntUploadResult = ЭСФСервер.СписокXDTOИзОбъектXDTO(sntUploadResult);
	
	
	Для Индекс = 0 По sntUploadResult.Количество() - 1 Цикл
		
		standardResponse = sntUploadResult.Получить(Индекс);
		number = СНТСервер.ПолучитьСвойство(standardResponse, "number", Неопределено);
		date = СНТСервер.ПолучитьСвойство(standardResponse, "date", Неопределено);
		
		Для Каждого ЭлементРезультата Из Результат Цикл
			
			Если number <> Неопределено И date <> Неопределено Тогда
				Если ЭлементРезультата.Значение.Номер = number 
					И ЭлементРезультата.Значение.Дата = date Тогда
					
					ЭлементРезультата.Значение.ПринятИСЭСФ = ?(ИмяЭлемента = "acceptedList", Истина, Ложь);
					ЭлементРезультата.Значение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "sntId", "");
					
					errors = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorList", Неопределено);
					Если errors <> Неопределено Тогда
						errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
						ЭлементРезультата.Значение.Ошибки = Новый Массив;
						Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
							error = errorsList.Получить(ИндексОшибки);
							ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
							// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
							// с сервера на клиент приводи к ошибке мутабельного значения.
							Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
								ОшибкаПоле = "";
							КонецЕсли;
							ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
							Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
							ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
						КонецЦикла;
					КонецЕсли;
					
					ИндексСНТ = МассивОтправляемыхСНТ.Найти(ЭлементРезультата.Ключ);
					МассивОтправляемыхСНТ.Удалить(ИндексСНТ);
				КонецЕсли;
			Иначе
				
				ОшибочнаяСНТ = МассивОтправляемыхСНТ[Индекс];
				Если ЭлементРезультата.Ключ  = ОшибочнаяСНТ Тогда
					
					errorList = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorList", Неопределено);
					Если errorList <> Неопределено Тогда
						errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errorList.error);
						ЭлементРезультата.Значение.Ошибки = Новый Массив;
						Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
							error = errorsList.Получить(ИндексОшибки);
							ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
							// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
							// с сервера на клиент приводи к ошибке мутабельного значения.
							Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
								ОшибкаПоле = "";
							КонецЕсли;
							ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
							Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
							ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияСНТПослеОтправкиПакета(РезультатОтправки, КоллекцияПодписей, УполномоченныйСотрудник = Неопределено)
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл		
		СНТ = ЭлементРезультата.Ключ.ПолучитьОбъект();
		
		СНТ.Идентификатор = ЭлементРезультата.Значение.Идентификатор;
		
		СНТ.ТипПодписи = ЭлементРезультата.Значение.ТипПодписи;

		Если СНТ.ТипПодписи = Перечисления.ТипыПодписиЭСФ.ЮридическоеЛицо Тогда
			СНТ.ЭЦПЮрЛицаОтпуск = КоллекцияПодписей[ЭлементРезультата.Ключ];
		ИначеЕсли СНТ.ТипПодписи = Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо Тогда
			СНТ.ЭЦПУполномоченногоПодписыватьСНТ = КоллекцияПодписей[ЭлементРезультата.Ключ];
		КонецЕсли;
		
		Если ЭлементРезультата.Значение.Ошибки = Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементРезультата.Значение.Идентификатор) Тогда
				СНТ.Ошибки.Очистить();
			КонецЕсли;
		Иначе
			СНТ.Ошибки.Очистить();
			Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
				ОшибкиСтрока = СНТ.Ошибки.Добавить();
				ОшибкиСтрока.Текст = Ошибка.Текст;
				ОшибкиСтрока.Поле = Ошибка.Поле;
			КонецЦикла;
		КонецЕсли;
		
		// Очистить поля ЭСФ, которые будут заполнены после успешного приема в ИС ЭСФ.
		СНТ.РегистрационныйНомерИСЭСФ = "";
		СНТ.Статус = Перечисления.СтатусыСНТ.ПустаяСсылка();
		
		СНТ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		СНТ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета)
	Для Каждого ЭлементКоллекции Из РезультатОтправкиПакета Цикл
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;		
КонецПроцедуры

Процедура ОбновитьДокументыСНТПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияИСЭСФ)
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных ЭСФ. 
	МассивИдентификаторовСНТ = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторовСНТ.Добавить(Идентификатор);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При отправке исправленных ЭСФ, исправляемые ЭСФ, а также их дополнительные ЭСФ, 
	// автоматически становятся аннулированными в ИС ЭСФ.
	//
	// Для того, чтобы информация об аннулировании отобразилась в 1С, 
	// необходимо обновить статусы исправляемых ЭСФ и их дополнительных ЭСФ.
	Если ТипЗнч(ПрофильИСЭСФ.СтруктурнаяЕдиница) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	Иначе
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница;	
	КонецЕсли;
	//ДополнитьМассивИдентификаторамиАннулируемыхСНТ(СтруктурнаяЕдиница, МассивИдентификаторовЭСФ);
	
	ПредельныйРазмерПакетаСНТ = 1000;
	КоличествоСНТ = МассивИдентификаторовСНТ.Количество();
	СчетчикСНТ = 0;
	МассивИдентификаторовСНТДляОтправки = Новый Массив;
	
	Если КоличествоСНТ > ПредельныйРазмерПакетаСНТ Тогда
		
		Для Каждого СтрокаМассива Из МассивИдентификаторовСНТ Цикл
			
			СчетчикСНТ = СчетчикСНТ + 1;
			
			МассивИдентификаторовСНТДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикСНТ%ПредельныйРазмерПакетаСНТ = 0 ИЛИ СчетчикСНТ = КоличествоСНТ) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных ЭСФ.
			ОбновитьСтатусыСНТПоИдентификаторам(МассивИдентификаторовСНТДляОтправки, Перечисления.НаправленияСНТ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовСНТДляОтправки.Очистить();
			
		КонецЦикла;
		
	Иначе
		
		// Выполнить обновление статусов отправленных ЭСФ.
		ОбновитьСтатусыСНТПоИдентификаторам(МассивИдентификаторовСНТ, Перечисления.НаправленияСНТ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМассивИдентификаторамиАннулируемыхСНТ(Знач СтруктурнаяЕдиница, МассивИдентификаторовЭСФ)
	//
	////////////////////////////////////////////////////////////////////////////////
	//// Создать пустые параметры поиска исправленных ЭСФ.	
	//	
	//ИменаРеквизитов = "ПометкаУдаления, Идентификатор, Направление, Вид";
	//ПараметрыПоискаЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);	
	//
	//
	//
	//
	////////////////////////////////////////////////////////////////////////////////
	//// Заполнить параметры поиска исправленных ЭСФ.
	//
	//Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
	//	
	//	СтрокаПараметрыПоискаЭСФ = ПараметрыПоискаЭСФ.Добавить();
	//	СтрокаПараметрыПоискаЭСФ.ПометкаУдаления = Ложь;
	//	СтрокаПараметрыПоискаЭСФ.Идентификатор = Идентификатор;
	//	СтрокаПараметрыПоискаЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий;
	//	СтрокаПараметрыПоискаЭСФ.Вид = Перечисления.ВидыЭСФ.Исправленный;
	//	
	//КонецЦикла;	
	//
	//
	//
	//
	////////////////////////////////////////////////////////////////////////////////	
	//// Найти исправленные документы ЭСФ.
	//ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	//ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	//ТаблицаИсправленныхДокументовЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);	
	//
	//
	//
	//
	////////////////////////////////////////////////////////////////////////////////		
	//// Создать массив исправленных ЭСФ.	
	//
	//МассивИсправленныхЭСФ = Новый Массив;	
	//Для Каждого СтрокаТаблицы Из ТаблицаИсправленныхДокументовЭСФ Цикл		
	//	Если ЗначениеЗаполнено(СтрокаТаблицы.НайденнаяСсылка) Тогда
	//		МассивИсправленныхЭСФ.Добавить(СтрокаТаблицы.НайденнаяСсылка);	
	//	КонецЕсли;		
	//КонецЦикла;
	//	
	//МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
	//
	//
	//
	//
	////////////////////////////////////////////////////////////////////////////////
	//// Дополнить массив идентификаторов, идентификаторами исправляемых ЭСФ,
	//// а также идентификаторами дополнительных ЭСФ, для исправляемых ЭСФ.
	//
	//Для Каждого Идентификатор Из МассивИдентификаторовАннулируемыхЭСФ Цикл
	//	МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
	//КонецЦикла;
	//
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаСНТ

// См. СНТКлиент.ПроверитьИсходящиеСНТ().
Процедура ПроверитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
	
	Если ТипЗнч(МассивИсходящихСНТ) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаСНТ Из МассивИсходящихСНТ Цикл
		РезультатПроверки = ПроверитьСНТ(СсылкаСНТ);
		ТекстСообщения = ТекстСообщенияПоРезультатуПроверкиСНТ(СсылкаСНТ, РезультатПроверки);
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаСНТ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьСНТ(СсылкаСНТ) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиСНТ();
	
	// Объект СНТ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектСНТ = СсылкаСНТ.ПолучитьОбъект();
	
	Попытка
		ПроверитьРазличныеДанныеСНТ(ОбъектСНТ, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения СНТ возникла ошибка:
		|%1'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПустойРезультатПроверкиСНТ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки", Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура СообщитьОбнаруженыОшибки(Знач СсылкаСНТ, Знач РезультатПроверки) Экспорт
	
	Если РезультатПроверки.УведомительныеОшибки.Количество() <> 0
		ИЛИ РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Обнаружены ошибки при проверке документа: ""%1"".
		|Для просмотра списка ошибок воспользуйтесь командой ""Проверка"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаСНТ);
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаСНТ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПоРезультатуПроверкиСНТ(Знач СсылкаСНТ, Знач РезультатПроверки, Знач УведомительныеОшибки = Истина, Знач ЗапрещающиеОшибки = Истина) Экспорт
	
	ТекстСообщения = "";
	
	Если (НЕ УведомительныеОшибки) И (НЕ ЗапрещающиеОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗапрещающиеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.ЗапрещающиеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если УведомительныеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.УведомительныеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		
		ТекстСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Ошибок не обнаружено при проверке документа ""%1"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаСНТ);
		
	Иначе
		
		ЗаголовокСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Обнаружены ошибки при проверке документа ""%1"":'");
		
		ЗаголовокСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаСНТ);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеСНТ(ОбъектСНТ, РезультатПроверки) Экспорт
	
	// Проверка всех обязательных реквизитов
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ТипСНТ) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен тип СНТ.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.Номер) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер СНТ.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.НомерСНТ) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен номер СНТ учетной системы.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ВалютаКод) Тогда
		ТекстСообщения = НСтр("ru = 'А. Не заполнен код валюты.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнено наименование получателя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательКодСтраныДоставки) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен код страны доставки.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.АдресДоставки) И (Не ОбъектСНТ.ПолучательРозничнаяРеализация ИЛИ Не ОбъектСНТ.ПолучательФизическоеЛицо) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не заполнен адрес доставки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ГрузоотправительКодСтраныОтправки) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнен код страны грузоотправителя.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ГрузополучательКодСтраныОтправки) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнен код страны грузополучателя.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектСНТ.Грузополучатель) Тогда
		ТекстСообщения = НСтр("ru = 'D. Не заполнен грузополучатель.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектСНТ.ПричинаВыпискиНаБумажномНосителе) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указана причина выписки на бумаге.'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ДатаВыпискиНаБумажномНосителе > '20210101000000' И 
		ОбъектСНТ.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке") Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. На указанную дату есть обязательства по выписке. Вы не можете вводить бумажный СНТ с причиной ""Отсутствовало требование по выписке СНТ"" .'");		
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если  ОбъектСНТ.ЕстьДругиеТоварыЦифроваяМаркировка
		И ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 
		И Не ЗначениеЗаполнено(ОбъектСНТ.РегистрационныйНомерИСМПТ) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Акт/Уведомление по цифровой маркировке не заполнен, в то время как заполнен раздел G9 Данные по товарам, подлежащим маркировке средствами идентификации (цифровая маркировка).'");		
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектСНТ.РегистрационныйНомерИСМПТ) 
		И Не ОбъектСНТ.ДатаРегистрацииИСМПТ <> '00010101000000'  Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не заполнена  дата акта/уведомления по цифровой маркировке не заполнен.'");		
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") И НЕ ЗначениеЗаполнено(ОбъектСНТ.ВидВвоза) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указан вид ввоза.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") И НЕ ЗначениеЗаполнено(ОбъектСНТ.ВидВывоза) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указан вид вывоза.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение") И НЕ ЗначениеЗаполнено(ОбъектСНТ.ВидПеремещения) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указан вид перемещения.'");		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ИдентификаторТерриторииСЭЗ) 
		И ОбъектСНТ.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ")  Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Наименование СЭЗ должно быть заполнена.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектСНТ.ЕстьДругиеТоварыЦифроваяМаркировка И ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 
		И (ОбъектСНТ.ЭтиловыйСпирт.Количество() > 0 ИЛИ ОбъектСНТ.Виноматериал.Количество() > 0  ИЛИ ОбъектСНТ.ПивоПивныеНапитки.Количество() > 0  ИЛИ ОбъектСНТ.АлкогольнаяПродукцияКромеПива.Количество() > 0 
		    ИЛИ ОбъектСНТ.ДанныеПоНефтепродуктам.Количество() > 0  ИЛИ ОбъектСНТ.ДанныеПоБиотопливу.Количество() > 0  ИЛИ ОбъектСНТ.ТабачнаяПродукция.Количество() > 0 ) Тогда
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не допускается одновременное заполнение разделов по маркированным и подакцизным товарам (за исключением цифровой маркировки).'");		
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Поставщик
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПоставщикНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не заполнено наименование поставщика/отправителя.'"); 
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") И НЕ ОбъектСНТ.ПоставщикНерезидент 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.ПоставщикИдентификатор) 
		И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация
		И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан БИН/ИИН поставщика или неверно указана категория (нерезидент).'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПоставщикКодСтраны) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан код страны регистрации поставщика.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПоставщикКодСтраныОтправки) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан код страны отправки/отгрузки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.АдресОтправки) И НЕ ОбъектСНТ.ПоставщикРозничнаяРеализация Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан адрес отправки/отгрузки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ПоставщикРозничнаяРеализация И ЗначениеЗаполнено(ОбъектСНТ.ПоставщикИдентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'В. При указании категории поставщика Розничная торговля БИН/ИИН должен быть пустым.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ПоставщикРозничнаяРеализация	И ОбъектСНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная") Тогда
		ТекстСообщения = НСтр("ru = 'В. В первичной СНТ недопустима категория поставщика Розничная торговля.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз")
		И ОбъектСНТ.ВидПеремещения <> ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС") 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.СкладОтправкиИдентификатор)
		И Не ОбъектСНТ.ПоставщикРозничнаяРеализация 
		И НЕ ОбъектСНТ.ПоставщикФизическоеЛицо Тогда
		
		ТекстСообщения = НСтр("ru = 'В. Не указан идентификатор склада отправки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И ОбъектСНТ.ВидПеремещения = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаРК") 
		И (ОбъектСНТ.ПоставщикАдвокат ИЛИ ОбъектСНТ.ПоставщикЛизингодатель
		ИЛИ ОбъектСНТ.ПоставщикЛизингополучатель ИЛИ ОбъектСНТ.ПоставщикКомиссионер ИЛИ ОбъектСНТ.ПоставщикКомитент
		ИЛИ ОбъектСНТ.ПоставщикМедиатор ИЛИ ОбъектСНТ.ПоставщикНотариус ИЛИ ОбъектСНТ.ПоставщикРозничныйРеализатор
		ИЛИ ОбъектСНТ.ПоставщикЧастныйСудебныйИсполнитель ИЛИ ОбъектСНТ.ПоставщикФармацевтическийПроизводитель
		ИЛИ ОбъектСНТ.ПоставщикРозничнаяРеализация ИЛИ ОбъектСНТ.ПоставщикФизическоеЛицо) Тогда
		
		ТекстСообщения = НСтр("ru = 'В. Выбранная категория поставщика недоступна для выбора при перемещении.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Получатель
	Если НЕ ОбъектСНТ.ПолучательРозничнаяРеализация И НЕ ОбъектСНТ.ПолучательНерезидент И НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательИдентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'С. Не указан БИН/ИИН получателя.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательНаименование) Тогда
		ТекстСообщения = НСтр("ru = 'В. Наименование получателя отсутствует'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательКодСтраны) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан код страны регистрации получателя.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ПолучательКодСтраныДоставки) Тогда
		ТекстСообщения = НСтр("ru = 'В. Не указан код страны доставки/поставки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектСНТ.ПолучательРозничнаяРеализация И ЗначениеЗаполнено(ОбъектСНТ.ПолучательИдентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'С. При указании БИН/ИИН получателя нельзя выбрать категорию Розничная реализация.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ПолучательРозничнаяРеализация И ОбъектСНТ.ПолучательНаименование <> "Розничная реализация" Тогда
		ТекстСообщения = НСтр("ru = 'С. В наименовании получателя должна быть указана ""Розничная реализация"".'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И ОбъектСНТ.ВидПеремещения = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаРК") 
		И (ОбъектСНТ.ПолучательАдвокат ИЛИ ОбъектСНТ.ПолучательЛизингодатель
		ИЛИ ОбъектСНТ.ПолучательЛизингополучатель ИЛИ ОбъектСНТ.ПолучательКомиссионер ИЛИ ОбъектСНТ.ПолучательКомитент
		ИЛИ ОбъектСНТ.ПолучательМедиатор ИЛИ ОбъектСНТ.ПолучательНотариус ИЛИ ОбъектСНТ.ПолучательРозничныйРеализатор
		ИЛИ ОбъектСНТ.ПолучательЧастныйСудебныйИсполнитель ИЛИ ОбъектСНТ.ПолучательФармацевтическийПроизводитель
		ИЛИ ОбъектСНТ.ПолучательРозничнаяРеализация ИЛИ ОбъектСНТ.ПолучательФизическоеЛицо) Тогда
		
		ТекстСообщения = НСтр("ru = 'С. Выбранная категория получателя недоступна для выбора при перемещении.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
		
	//Сведения о перевозке
	Если ОбъектСНТ.АвтомобильныйТранспорт И НЕ ЗначениеЗаполнено(ОбъектСНТ.НомерТС) Тогда
		ТекстСообщения = НСтр("ru = 'Е. Не указан гос.номер АТС.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.АвтомобильныйТранспорт И ЗначениеЗаполнено(ОбъектСНТ.НомерТС) 
		И СНТКлиентСерверПереопределяемый.НеВерноУказанНомерАвто(ОбъектСНТ.НомерТС) Тогда
		ТекстСообщения = НСтр("ru = 'Е. Не верно указан гос. номер АТС. Могут быть указаны только цифры и латинские буквы.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.АвтомобильныйТранспорт И ЗначениеЗаполнено(ОбъектСНТ.ГосномерПрицепа) 
		И СНТКлиентСерверПереопределяемый.НеВерноУказанНомерАвто(ОбъектСНТ.ГосномерПрицепа) Тогда
		
		ТекстСообщения = НСтр("ru = 'Е. Не верно указан гос. номер прицепа. Могут быть указаны только цифры и латинские буквы.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидВывоза = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна")
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.ЗВСТипВоздушногоСудна) Тогда
		
		ТекстСообщения = НСтр("ru = 'Е1. Заправка воздушного судна. Не указан тип воздушного судна.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидВывоза = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна")
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.ЗВСРегистрационныйНомерБорта) Тогда
		
		ТекстСообщения = НСтр("ru = 'Е1. Заправка воздушного судна. Не указан регистрационный номер борта.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ОбъектСНТ.ВидВывоза = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна")
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.ЗВСНомерРейса) Тогда
		
		ТекстСообщения = НСтр("ru = 'Е1. Заправка воздушного судна. Не указан номер рейса.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	Если ОбъектСНТ.ВидВывоза = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна")
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.ЗВСНомерРасходногоОрдераТребованиеЗаправки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Е1. Заправка воздушного судна. Не указан Номер расходного ордера или требование на заправку воздушного борта.'");		
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	//Договор на поставку
	Если НЕ ОбъектСНТ.БезДоговора И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорПоставкиНомер) Тогда
		ТекстСообщения = НСтр("ru = 'F. Не указан номер договора поставки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ОбъектСНТ.БезДоговора И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорПоставкиДата) Тогда
		ТекстСообщения = НСтр("ru = 'F. Не указана дата договора поставки.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	//Договор на поставку  УСД
	Если ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПоставщикДата) И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПоставщикНомер) Тогда
		ТекстСообщения = НСтр("ru = 'F. Отсутствует номер документа, определяющего поверенного (оператора) поставщика.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПоставщикНомер) И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПоставщикДата) Тогда
		ТекстСообщения = НСтр("ru = 'F. Отсутствует дата документа, определяющего поверенного (оператора) поставщика.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПолучательДата) И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПолучательНомер) Тогда
		ТекстСообщения = НСтр("ru = 'F. Отсутствует номер документа, определяющего поверенного (оператора) получателя.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПолучательНомер) И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДоговорВРамкахУСДПолучательДата) Тогда
		ТекстСообщения = НСтр("ru = 'F. Отсутствует дата документа, определяющего поверенного (оператора) получателя.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;

	//Данные по товарам
	Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ВалютаКод) Тогда
		ТекстСообщения = НСтр("ru = 'G. Не указан код валюты.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура ("Количество, ЕдиницаИзмеренияКод, Количество, 
	|Пинкод, Крепость, ВидПродукта, ЕмкостьТары, КоличествоПачек, КоличествоВПачке,КоличествоУпаковок, КоличествоВУпаковке,
	|КоличествоВКилограммах, КоличествоВМиллилитрах, НомерЛицензии, ДатаВыдачиЛицензии, ДатаОкончанияЛицензии, КоличествоБутылок", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
	
	//G1.ТоварыВС
	Если ОбъектСНТ.ТоварыВС.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод = " СНТТовары.ЕдиницаИзмеренияКод, "; 
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		ТаблицаТоваров = ОбъектСНТ.ТоварыВС.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ТоварыВС", "G1. Данные по товарам виртуального склада", НовыйСтруктураРеквизитов, РезультатПроверки);
	КонецЕсли;
	
	//Проверка убрана - пока нет точных сведений, для каких видов опаераций обязательны
	////Проверка заполнения лицензий, общих реквизитов для разделов (G2-G9)
	//Если (ОбъектСНТ.ЭтиловыйСпирт.Количество() > 0 ИЛИ ОбъектСНТ.Виноматериал.Количество() > 0
	//	ИЛИ ОбъектСНТ.ПивоПивныеНапитки.Количество() > 0 ИЛИ ОбъектСНТ.АлкогольнаяпродукцияКромеПива.Количество() > 0)
	//	И ОбъектСНТ.КодОперацииG2
	//	Тогда
	//	
	//	Если НЕ ОбъектСНТ.ПоставщикНерезидент И Не ЗначениеЗаполнено(ОбъектСНТ.НомерЛицензииПоставщика) Тогда
	//		
	//		ТекстСообщения = НСтр("ru = 'G. Данные по алкогольной продукции. ""Номер лицензии поставщика"" не указан.'");
	//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//		
	//		Если Не ЗначениеЗаполнено(ОбъектСНТ.АдресПоставщикаПоЛицензии) Тогда
	//			ТекстСообщения = НСтр("ru = 'G. Данные по алкогольной продукции. ""Адрес поставщика по лицензии"" не указан.'");
	//			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);	
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если (НЕ ОбъектСНТ.ПолучательНерезидент И НЕ ОбъектСНТ.ПолучательРозничнаяРеализация) И Не ЗначениеЗаполнено(ОбъектСНТ.НомерЛицензииПолучателя) Тогда
	//		
	//		ТекстСообщения = НСтр("ru = 'G. Данные по алкогольной продукции. ""Номер лицензии получателя"" не указан.'");
	//		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	//		
	//		Если Не ЗначениеЗаполнено(ОбъектСНТ.АдресПолучателяПоЛицензии) Тогда
	//			ТекстСообщения = НСтр("ru = 'G. Данные по алкогольной продукции. ""Адрес получателя по лицензии"" не указан.'");
	//			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);	
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если (НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз")
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И НЕ ОбъектСНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров"))
		И ОбъектСНТ.ЭтиловыйСпирт.Количество() > 0 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.КодОперацииG2) 
		Тогда
		
		ТекстСообщения = НСтр("ru = 'G2. Данные по алкогольной продукции. Код операции не указан.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	Если (НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз")
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И НЕ ОбъектСНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров"))
		И ОбъектСНТ.ПивоПивныеНапитки.Количество() > 0 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.КодОперацииG4) 
		Тогда
		
		ТекстСообщения = НСтр("ru = 'G4. Пиво и пивные напитки. Код операции не указан.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	Если (НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз")
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И НЕ ОбъектСНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров"))
		И ОбъектСНТ.АлкогольнаяПродукцияКромеПива.Количество() > 0 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.КодОперацииG5) 
		Тогда
		
		ТекстСообщения = НСтр("ru = 'G5. Алкогольная продукция (кроме пива и пивных напитков). Код операции не указан.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	Если ((НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз")
		И НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
		И НЕ ОбъектСНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров")) ИЛИ
		ОбъектСНТ.ПолучательРозничнаяРеализация)
		И ОбъектСНТ.ТабачнаяПродукция.Количество() > 0 
		И НЕ ЗначениеЗаполнено(ОбъектСНТ.КодОперацииG8) 
		Тогда
		
		ТекстСообщения = НСтр("ru = 'G8. Данные по табачной продукции (исключая цифровую маркировку). Код операции не указан.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//G2.ЭтиловыйСпирт
	Если ОбъектСНТ.ЭтиловыйСпирт.Количество() > 0 Тогда
		НовыйСтруктураРеквизитов = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		НовыйСтруктураРеквизитов.ПинКод = " СНТТовары.ПинКод, "; 
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.Крепость = " СНТТовары.Крепость, ";
		
		ТаблицаТоваров = ОбъектСНТ.ЭтиловыйСпирт.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ЭтиловыйСпирт", "G2. Этиловый спирт", НовыйСтруктураРеквизитов, РезультатПроверки);
				
	КонецЕсли;
	
	//G3.Виноматериал
	Если ОбъектСНТ.Виноматериал.Количество() > 0 Тогда
		НовыйСтруктураРеквизитов = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		НовыйСтруктураРеквизитов.ПинКод = " СНТТовары.ПинКод, "; 
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		
		ТаблицаТоваров = ОбъектСНТ.Виноматериал.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "Виноматериал", "G3. Виноматериал", НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	//G4.ПивоПивныеНапитки
	Если ОбъектСНТ.ПивоПивныеНапитки.Количество() > 0 Тогда
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.ВидПродукта = " СНТТовары.ВидПродукта, "; 
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ЕмкостьТары = " СНТТовары.ЕмкостьТары, ";
		НовыйСтруктураРеквизитов.КоличествоУпаковок = " СНТТовары.КоличествоУпаковок, ";
		НовыйСтруктураРеквизитов.КоличествоВУпаковке = " СНТТовары.КоличествоВУпаковке, ";
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод = " СНТТовары.ЕдиницаИзмеренияКод, "; 
		
		ТаблицаТоваров = ОбъектСНТ.ПивоПивныеНапитки.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ПивоПивныеНапитки", "G4. Пиво и пивные напитки", НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	//G5.АлкогольнаяПродукцияКромеПива
	Если ОбъектСНТ.АлкогольнаяпродукцияКромеПива.Количество() > 0 Тогда
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
		НовыйСтруктураРеквизитов.ВидПродукта = " СНТТовары.ВидПродукта, "; 
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ЕмкостьТары = " СНТТовары.ЕмкостьТары, ";
		НовыйСтруктураРеквизитов.КоличествоБутылок = " СНТТовары.КоличествоБутылок, ";
		НовыйСтруктураРеквизитов.ПинКод = " СНТТовары.ПинКод, ";
		НовыйСтруктураРеквизитов.Крепость = " СНТТовары.Крепость, ";
		
		ТаблицаТоваров = ОбъектСНТ.АлкогольнаяпродукцияКромеПива.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "АлкогольнаяпродукцияКромеПива", "G5. Алкогольная продукция (кроме пива и пивных напитков)",НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	//G6.ДанныеПоНефтепродуктам
	Если ОбъектСНТ.ДанныеПоНефтепродуктам.Количество() > 0 Тогда
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ПинКод = " СНТТовары.ПинКод, ";
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод = " СНТТовары.ЕдиницаИзмеренияКод, ";
		
		ТаблицаТоваров = ОбъектСНТ.ДанныеПоНефтепродуктам.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ДанныеПоНефтепродуктам", "G6. Данные по нефтепродуктам", НовыйСтруктураРеквизитов, РезультатПроверки);
	КонецЕсли;
	
	//G7.ДанныеПоБиотопливу
	Если ОбъектСНТ.ДанныеПоБиотопливу.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.Количество = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод = " СНТТовары.ЕдиницаИзмеренияКод, "; 
		ТаблицаТоваров = ОбъектСНТ.ДанныеПоБиотопливу.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ДанныеПоБиотопливу", "G7. Данные по биотопливу", НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	//G8.ТабачнаяПродукция(исключая цифровую маркировку)
	Если ОбъектСНТ.ТабачнаяПродукция.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод         = " СНТТовары.ЕдиницаИзмеренияКод, "; 
		НовыйСтруктураРеквизитов.Количество                  = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.КоличествоПачек             = " СНТТовары.КоличествоПачек, ";
		НовыйСтруктураРеквизитов.КоличествоВПачке            = " СНТТовары.КоличествоВПачке, ";
		НовыйСтруктураРеквизитов.ПинКод                      = " СНТТовары.ПинКод, ";
		ТаблицаТоваров = ОбъектСНТ.ТабачнаяПродукция.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ТабачнаяПродукция", "G8. Данные по табачной продукции (исключая цифровую маркировку)", НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
		
	//G9.ДругиеТоварыЦифроваяМаркировка
	Если ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.Количество                  = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод         = " СНТТовары.ЕдиницаИзмеренияКод, ";
		ТаблицаТоваров = ОбъектСНТ.ДругиеТоварыЦифроваяМаркировка.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ДругиеТоварыЦифроваяМаркировка", "G9. Данные по товарам, подлежащим маркировке средствами идентификации (цифровая маркировка)", НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	//G10.ТоварыЭкспортныйКонтроль
	Если ОбъектСНТ.ТоварыЭкспортныйКонтроль.Количество() > 0 Тогда
		
		НовыйСтруктураРеквизитов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
			НовыйСтруктураРеквизитов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		НовыйСтруктураРеквизитов.НомерЛицензии               = " СНТТовары.НомерЛицензии, "; 
		НовыйСтруктураРеквизитов.Количество                  = " СНТТовары.Количество, ";
		НовыйСтруктураРеквизитов.ЕдиницаИзмеренияКод         = " СНТТовары.ЕдиницаИзмеренияКод, ";
		НовыйСтруктураРеквизитов.ДатаВыдачиЛицензии          = " СНТТовары.ДатаВыдачиЛицензии, ";
		НовыйСтруктураРеквизитов.ДатаОкончанияЛицензии       = " СНТТовары.ДатаОкончанияЛицензии, ";
		ТаблицаТоваров = ОбъектСНТ.ТоварыЭкспортныйКонтроль.Выгрузить();
		ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, "ТоварыЭкспортныйКонтроль", "G10. Данные по товарам, подлежащим экспортному контролю (двойного назначения, военного назначения)",НовыйСтруктураРеквизитов, РезультатПроверки);
		
	КонецЕсли;
	
	// Раздел К
	Если ОбъектСНТ.СведенияОГрузе.Количество() > 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(ОбъектСНТ.НомерОттискаПломбы) Тогда
			ТекстСообщения = НСтр("ru = 'F. Не указан Номер оттиска пломбы.'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ФИОВодителя) Тогда
			ТекстСообщения = НСтр("ru = 'F. Не указаны ФИО водителя.'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектСНТ.ИИНВодителя) Тогда
			ТекстСообщения = НСтр("ru = 'F. Не указан ИИН водителя.'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Для Каждого Груз Из ОбъектСНТ.СведенияОГрузе Цикл 
			Если НЕ ЗначениеЗаполнено(Груз.СпособОпределенияМассы) Тогда
				ТекстСообщения = НСтр("ru = 'К. Сведения о грузе. Не заполнен ""Способ определения массы"" в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Груз.НомерСтроки);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Груз.КодГруза) Тогда
				ТекстСообщения = НСтр("ru = 'К. Сведения о грузе. Не заполнен ""Код груза"" в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Груз.НомерСтроки);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Груз.КлассГруза) Тогда
				ТекстСообщения = НСтр("ru = 'К. Сведения о грузе. Не заполнен ""Класс груза"" в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Груз.НомерСтроки);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Груз.МассаБрутто) Тогда
				ТекстСообщения = НСтр("ru = 'К. Сведения о грузе. Не заполнена ""Масса брутто"" в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Груз.НомерСтроки);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Груз.МассаНетто) Тогда
				ТекстСообщения = НСтр("ru = 'К. Сведения о грузе. Не заполнена ""Масса нетто"" в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Груз.НомерСтроки);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Раздел L	
	Если ЗначениеЗаполнено(ОбъектСНТ.НомерДоверенностиОтпуск) И НЕ ЗначениеЗаполнено(ОбъектСНТ.ДатаДоверенностиОтпуск) Тогда
		ТекстСообщения = НСтр("ru = 'L. Сведения по отпуску товара. Отсутствует дата доверенности.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.ДатаДоверенностиОтпуск) И НЕ ЗначениеЗаполнено(ОбъектСНТ.НомерДоверенностиОтпуск) Тогда
		ТекстСообщения = НСтр("ru = 'L. Сведения по отпуску товара. Отсутствует номер доверенности.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	

	// Раздел О
	Если ЗначениеЗаполнено(ОбъектСНТ.КодОГДПоставщика) И Строка(СтрДлина(ОбъектСНТ.КодОГДПоставщика)) < "4" Тогда 
		ТекстСообщения = НСтр("ru = 'О. Справочные сведения. Поле ""Код ОГД по месту нахождения (жительства) поставщика\отправителя"" должно содержать от 4 до 6 знаков.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСНТ.КодОГДПолучателя) И Строка(СтрДлина(ОбъектСНТ.КодОГДПолучателя)) < "4" Тогда 
		ТекстСообщения = НСтр("ru = 'О. Справочные сведения. Поле ""Код ОГД по месту нахождения (жительства) получателя"" должно содержать от 4 до 6 знаков.'");
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
	// Прочее
	Если Не ЗначениеЗаполнено(ОбъектСНТ.Организация) Тогда 
		ТекстСообщения = НСтр("ru = 'Прочее. Не заполнено поле ""Организация"".'");
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТаблицуТовары(ОбъектСНТ, ТаблицаТоваров, НаименованиеТабличнойЧасти, ПредставлениеТабличнойЧасти, СтруктураРеквизитов, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СНТТовары.НомерСтроки,
	|	СНТТовары.НомерСтрокиСНТ,
	|	СНТТовары.ПризнакПроисхождения,
	|	СНТТовары.ТоварНаименование,
	|	СНТТовары.КодТНВЭД,
	|	СНТТовары.Цена,
	|	СНТТовары.СуммаБезНалогов,
	|	СНТТовары.Сумма,
	|	СНТТовары.СтавкаАкцизаЧисло,
	|	СНТТовары.СтавкаНДСЧисло,
	|	СНТТовары.СуммаНДС,
	|	СНТТовары.СуммаАкциза,
	|	СНТТовары.НомерЗаявленияВРамкахТС,
	|	СНТТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТТовары.ИдентификаторТовара,"
	
	+ СтруктураРеквизитов.Количество + ""
	+ СтруктураРеквизитов.ЕдиницаИзмеренияКод + ""
	+ СтруктураРеквизитов.Пинкод + ""
	+ СтруктураРеквизитов.Крепость + ""
	+ СтруктураРеквизитов.КоличествоБутылок + ""
	+ СтруктураРеквизитов.ВидПродукта + ""
	+ СтруктураРеквизитов.ЕмкостьТары + ""
	+ СтруктураРеквизитов.КоличествоПачек + ""
	+ СтруктураРеквизитов.КоличествоВПачке + ""
	+ СтруктураРеквизитов.КоличествоВКилограммах + ""
	+ СтруктураРеквизитов.КоличествоВМиллилитрах + ""
	+ СтруктураРеквизитов.НомерЛицензии + ""
	+ СтруктураРеквизитов.ДатаВыдачиЛицензии + ""
	+ СтруктураРеквизитов.ДатаОкончанияЛицензии + ""
	+ СтруктураРеквизитов.КоличествоУпаковок + ""
	+ СтруктураРеквизитов.КоличествоВУпаковке + ""
	+ "
	|	&НаименованиеТабличнойЧасти
	|ПОМЕСТИТЬ ВТ_СНТТовары
	|ИЗ
	|	&ТаблицаТовары КАК СНТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ *
	|ИЗ
	|	ВТ_СНТТовары КАК ВТ_СНТТовары";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаименованиеТабличнойЧасти", НаименованиеТабличнойЧасти);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ПризнакПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Признак происхождения"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ТоварНаименование) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Наименование/Вид товара"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Цена) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Цена"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.КодТНВЭД) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Код ТНВЭД"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.СуммаБезНалогов) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Стоимость без налогов"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Сумма) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Стоимость с налогами"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, НаименованиеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СтавкаАкцизаЧисло) И НЕ ЗначениеЗаполнено(Выборка.СуммаАкциза) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Сумма акциза"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СтавкаНДСЧисло) И НЕ ЗначениеЗаполнено(Выборка.СуммаНДС) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Сумма НДС"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НЕ ОбъектСНТ.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт") 
			И НЕ ОбъектСНТ.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозВременноВывезенногоТовара")
			И НЕ ОбъектСНТ.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозНаПереработку")
			И НЕ ОбъектСНТ.ВидПеремещения = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС"))
			И НЕ ЗначениеЗаполнено(Выборка.ИдентификаторТовара) И НаименованиеТабличнойЧасти <> "Товары" Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Идентификатор товара в ИС ЭСФ"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
			И НЕ ОбъектСНТ.ВидПеремещения = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС"))
			И НЕ ЗначениеЗаполнено(Выборка.НомерЗаявленияВРамкахТС) 
			И (Выборка.ПризнакПроисхождения = "1" ИЛИ Выборка.ПризнакПроисхождения = "2") Тогда
			
			ТекстСообщения = НСтр("ru = '%2. ""№ ЗВТ ДТ № СТ-1 или СТ-KZ, первичной СНТ"" отсутствует в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НЕ ОбъектСНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
			И НЕ ОбъектСНТ.ВидПеремещения = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС"))
			И НЕ ЗначениеЗаполнено(Выборка.НомерПозицииВДекларацииИлиЗаявлении) 
			И (Выборка.ПризнакПроисхождения = "1" ИЛИ Выборка.ПризнакПроисхождения = "2") Тогда
			
			ТекстСообщения = НСтр("ru = '%2. ""№ товарной позиции из ЗВТ ДТ № СТ-1 или СТ-KZ, первичной СНТ"" отсутствует в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "Товары" ИЛИ НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль")
			И НЕ ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияКод) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Код единицы измерения (ИС ЭСФ)"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "Товары"
			ИЛИ НаименованиеТабличнойЧасти = "ЭтиловыйСпирт" 
			ИЛИ НаименованиеТабличнойЧасти = "Виноматериал"
			ИЛИ НаименованиеТабличнойЧасти = "ТабачнаяПродукция"
			ИЛИ НаименованиеТабличнойЧасти = "ДругиеТоварыЦифроваяМаркировка"
			ИЛИ НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль")
			И НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "ПивоПивныеНапитки"
			ИЛИ НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива")
			И НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество (в литрах)"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам" 
			ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоБиотопливу")
			И НЕ ЗначениеЗаполнено(Выборка.Количество) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество (в тоннах)"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "ЭтиловыйСпирт" 
			ИЛИ НаименованиеТабличнойЧасти = "Виноматериал"
			ИЛИ НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива"
			ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам"
			ИЛИ НаименованиеТабличнойЧасти = "ТабачнаяПродукция")
			И НЕ ЗначениеЗаполнено(Выборка.ПинКод) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""ПИН-код"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" 
			И ((Выборка.ЕдиницаИзмеренияКод = "778") ИЛИ (Выборка.ЕдиницаИзмеренияКод = "868") ИЛИ (Выборка.ЕдиницаИзмеренияКод = "881") ИЛИ (Выборка.ЕдиницаИзмеренияКод = "991"))
			И НЕ ЗначениеЗаполнено(Выборка.ЕмкостьТары) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""ЕмкостьТары"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива" И НЕ ЗначениеЗаполнено(Выборка.ЕмкостьТары) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""ЕмкостьТары"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ПивоПивныеНапитки"
			И НЕ ЗначениеЗаполнено(Выборка.КоличествоУпаковок) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество бутылок"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива"
			И НЕ ЗначениеЗаполнено(Выборка.КоличествоБутылок) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество бутылок"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;	
		
		Если НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" И НЕ ЗначениеЗаполнено(Выборка.ВидПродукта) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Вид продукта"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива" И НЕ ЗначениеЗаполнено(Выборка.ВидПродукта) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""Вид продукции"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;

		
		Если НаименованиеТабличнойЧасти = "ТабачнаяПродукция" И НЕ ЗначениеЗаполнено(Выборка.КоличествоПачек) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество пачек (в штуках)"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ТабачнаяПродукция" 
			И НЕ ЗначениеЗаполнено(Выборка.КоличествоВПачке) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнено ""Количество в пачке"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ДанныеПоБиотопливу" ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам" Тогда
			Если (Выборка.ЕдиницаИзмеренияКод <> "168") И (Выборка.ЕдиницаИзмеренияКод <> "112") Тогда
				
				ТекстСообщения = НСтр("ru = '%2. ""Код единицы измерения (ИС ЭСФ)"" (Тонна, Литр) не соответствует допустимым значениям в строке №%1.'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ТабачнаяПродукция" Тогда
			Если (Выборка.ЕдиницаИзмеренияКод <> "796") И (Выборка.ЕдиницаИзмеренияКод <> "166") И (Выборка.ЕдиницаИзмеренияКод <> "111") 
				И (Выборка.ЕдиницаИзмеренияКод <> "5111") И (Выборка.ЕдиницаИзмеренияКод <> "8751") И (Выборка.ЕдиницаИзмеренияКод <> "8753") 
				И (Выборка.ЕдиницаИзмеренияКод <> "944") И (Выборка.ЕдиницаИзмеренияКод <> "945") Тогда
				
				ТекстСообщения = НСтр("ru = '%2. ""Код единицы измерения (ИС ЭСФ)"" (штуки, килограммы, миллилитры, одна пачка, коробка, блок, капсула, картридж) не соответствует допустимым значениям в строке №%1.'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда
			Если НЕ ЗначениеЗаполнено(Выборка.НомерЛицензии) Тогда
				
				ТекстСообщения = НСтр("ru = '%2. Не заполнен номер разрешительного документа в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(Выборка.НомерЛицензии) 
				ИЛИ ЗначениеЗаполнено(Выборка.ДатаВыдачиЛицензии)) 
				И НЕ ЗначениеЗаполнено(Выборка.ДатаОкончанияЛицензии) Тогда
				
				ТекстСообщения = НСтр("ru = '%2. Не заполнена дата окончания разрешительного документа в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(Выборка.НомерЛицензии) 
				ИЛИ ЗначениеЗаполнено(Выборка.ДатаОкончанияЛицензии)) 
				И НЕ ЗначениеЗаполнено(Выборка.ДатаВыдачиЛицензии) Тогда
				
				ТекстСообщения = НСтр("ru = '%2. Не заполнена дата выдачи разрешительного документа в строке №%1.'"); 
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" Тогда
			Если (Выборка.ЕдиницаИзмеренияКод <> "778") И (Выборка.ЕдиницаИзмеренияКод <> "868") И (Выборка.ЕдиницаИзмеренияКод <> "881") 
				И (Выборка.ЕдиницаИзмеренияКод <> "991") И (Выборка.ЕдиницаИзмеренияКод <> "112")Тогда
				
				ТекстСообщения = НСтр("ru = '%2. В графе ""Код единицы измерения (ИС ЭСФ)"" в строке №%1 можно выбирать только следующие значения: Упаковка, Бутылка, Банка условная, Кега, Литр.'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
				
				РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если (НаименованиеТабличнойЧасти = "ЭтиловыйСпирт" ИЛИ НаименованиеТабличнойЧасти = "АлкогольнаяпродукцияКромеПива")
			И (Выборка.Крепость = 0) Тогда
			
			ТекстСообщения = НСтр("ru = '%2. Не заполнена ""Крепость"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.НомерСтрокиСНТ) Тогда
			ТекстСообщения = НСтр("ru = '%2. Не заполнен ""№ п/п СНТ"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			ТекстСообщения, Выборка.НомерСтроки, ПредставлениеТабличнойЧасти);
			
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаСНТ_В_ХМЛ

// Возвращает XML строку, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо поместить в XML строку для импорта в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  Строка - Строка, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//  Если МассивЭСФ пустой или если есть ЭСФ, которые заполнены некорректно, то возвращается пустая строка.
//
Функция СоздатьXMLДляИмпортаВИСЭСФ(Знач МассивСНТ) Экспорт
	
	Если МассивСНТ.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВсеДокументыЗаполненыКорректно = Истина;
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	Для Каждого СсылкаСНТ Из МассивСНТ Цикл
		
		РезультатПроверки = ПроверитьСНТ(СсылкаСНТ);		
		СообщитьОбнаруженыОшибки(СсылкаСНТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			ВсеДокументыЗаполненыКорректно = Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	//ХМЛ будем выгружать всегда по актуальной версии ИС ЭСФ
	ВерсияИСЭСФ = ЭСФКлиентСервер.КонтейнерМетодов().АктуальнаяВерсияИСЭСФ();
	
	// При выгрузке тип подписи принудительно устанавливается в значение "УполномоченноеЛицо",
	// т.к. при загрузке в ИС ЭСФ узел signatureType должен обязательно присутствовать и быть заполненным.
	// При отправке ЭСФ средствами ИС ЭСФ устанавливается корректное значение.
	ТипПодписиСНТ = Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо;
	
	КоллекцияSntXML = Неопределено;
	СоздатьИсходящиеSNT(МассивСНТ, Ложь, ТипПодписиСНТ, КоллекцияSntXML, Неопределено, ,ВерсияИСЭСФ);
	
	XML = "<?xml version=""1.0"" encoding=""UTF-8""?><snt:sntInfoContainer xmlns:snt=""snt""><sntInfoSet>[SntSet]</sntInfoSet></snt:sntInfoContainer>";		
	       
	SntSetXML = "";
	Для Каждого ЭлементКоллекции Из КоллекцияSntXML Цикл
		SntXML = ЭлементКоллекции.Значение;			
		SntSetXML = SntSetXML + "<sntInfo><version>SntV1</version><documentInfo><sntBody><![CDATA[" + SntXML + "]]></sntBody></documentInfo></sntInfo>"; 		
	КонецЦикла;	
	
	XML = СтрЗаменить(XML, "[SntSet]", SntSetXML); 
	
	Возврат XML;
	
КонецФункции

#КонецОбласти

#Область Работа_с_XML_и_XDTO

Функция НоваяФабрикаXDTOИзXSD(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	НоваяФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция НоваяФабрикаXDTOИзWSDL(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	WSОпределения = Новый WSОпределения(ИмяВременногоФайла);
	НоваяФабрикаXDTO = WSОпределения.ФабрикаXDTO;
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция ФабрикаСНТ_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаСНТ_XML_API_ЭЦП_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаСНТ_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.querySntV1XsdResponse.xsdList.xsd);
		КэшированнаяФабрикаСНТ_XML_API_ЭЦП_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаСНТ_XML_API_ЭЦП_Версия1;
	
КонецФункции

Функция ФабрикаXDTOИзСпискаXSD(СписокXSD)
	
	МассивИменXSDФайлов = Новый Массив;
	
	Для Каждого ТекстXSD Из СписокXSD Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
		МассивИменXSDФайлов.Добавить(ИмяВременногоФайла);
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
		ЗаписьТекста.Записать(ТекстXSD);
		ЗаписьТекста.Закрыть();
		
	КонецЦикла;
	
	Фабрика = СоздатьФабрикуXDTO(МассивИменXSDФайлов); 		
	
	Для Каждого ИмяВременногоФайла Из МассивИменXSDФайлов Цикл
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
	Возврат Фабрика;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Функция ЭтоМодульнаяОшибка(Знач ОтветXML, ИнформацияОбОшибке = Неопределено) Экспорт
	
	ЭтоОшибка = Ложь;
	
	ИнформацияОбОшибке = Новый Структура(
	"faultcode, faultstring, type, description, ЛокализованноеПредставление, ПодробноеПредставление", 
	"", "", "", "", "", "");
	
	Если ОтветXML = "<html><body>No service was found.</body></html>" Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "<html><body>No service was found.</body></html>";
		ЭтоОшибка = Истина;
		
		// при сбоях сервера ИС ЭСФ ответ может быть пустым, или содержать информацию о недоступности страницы	
	ИначеЕсли ОтветXML = ""
		ИЛИ НЕ Найти(ОтветXML, "An error occurred.") = 0 Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "Сервер ИС ЭСФ не отвечает на запрос";
		ЭтоОшибка = Истина;
		
	Иначе		
		
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		Попытка
			ИнформацияОбОшибке.faultcode = СокрЛП(ОбъектXDTO.Body.Fault.faultcode);
			ИнформацияОбОшибке.faultstring = СокрЛП(ОбъектXDTO.Body.Fault.faultstring);
			ЭтоОшибка = Истина;
		Исключение
			ЭтоОшибка = Ложь;
		КонецПопытки;
		
		Если ЭтоОшибка Тогда
			
			Попытка
				КоллекцияДеталейОшибки = ОбъектXDTO.Body.Fault.detail.Свойства(); 
				ИнформацияОбОшибке.type = СокрЛП(КоллекцияДеталейОшибки[0].Имя);
				ИнформацияОбОшибке.description = СокрЛП(ОбъектXDTO.Body.Fault.detail[ИнформацияОбОшибке.type].description);
			Исключение
				// Ничего не делать.	
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОбОшибке.ЛокализованноеПредставление = ЛокализованноеПредставлениеМодульнойОшибки(
	ИнформацияОбОшибке.faultcode, 
	ИнформацияОбОшибке.faultstring, 
	ИнформацияОбОшибке.type, 
	ИнформацияОбОшибке.description);
	
	ПодробноеПредставление = "";
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.ЛокализованноеПредставление) Тогда	
		ПодробноеПредставление = ПодробноеПредставление + ИнформацияОбОшибке.ЛокализованноеПредставление + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) 
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring)
		ИЛИ	ЗначениеЗаполнено(ИнформацияОбОшибке.type)
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + Символы.ПС + "Техническая информация: " + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultcode: " + ИнформацияОбОшибке.faultcode + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultstring: " + ИнформацияОбОшибке.faultstring + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.type) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "type: " + ИнформацияОбОшибке.type + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "description: " + ИнформацияОбОшибке.description + Символы.ПС;	
	КонецЕсли;
	
	ПодробноеПредставление = ?(ПустаяСтрока(ИнформацияОбОшибке.ЛокализованноеПредставление), Символы.ПС, "") + СокрЛП(ПодробноеПредставление);
	
	ИнформацияОбОшибке.ПодробноеПредставление = ПодробноеПредставление;
	
	Возврат ЭтоОшибка;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаСессияЗакрыта(Знач ОтветXML) Экспорт
	
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветXML);	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		SessionClosedException = ОбъектXDTO.Body.Fault.detail.SessionClosedException;
		ЭтоОшибкаСессияЗакрыта = Истина;
	Исключение
		ЭтоОшибкаСессияЗакрыта = Ложь;
	КонецПопытки; 
	
	Возврат ЭтоОшибкаСессияЗакрыта;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(Знач ОтветXML) Экспорт
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	ЭтоОшибкаЕстьАктивнаяСессиия = Ложь;
	Если Найти(ОтветXML, "User already has opened session")>0 Тогда
		ЭтоОшибкаЕстьАктивнаяСессиия = Истина;
	КонецЕсли;	
	
	Возврат ЭтоОшибкаЕстьАктивнаяСессиия;
КонецФункции	

Функция ЛокализованноеПредставлениеМодульнойОшибки(faultcode, faultstring, type, detail)
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", faultstring);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда		
		ЛокализованноеПредставление = МассивНайденныхСтрок[0].ТекстИБ;		
	Иначе
		ЛокализованноеПредставление = "";	
	КонецЕсли;
	
	Возврат ЛокализованноеПредставление;
	
КонецФункции

#КонецОбласти

#Область ОткрытиеЗакрытиеСессии

// См. ЭСФСервер.ЗакрытьСессию()
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияИСЭСФ = Неопределено, ЭтоРучноеЗакрытие = Ложь, ПарольАутентификации = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Макет = ПолучитьМакет("ЗапросCloseSession_Версия2");		
	
	Пароль = ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, ПарольАутентификации); 
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        Пароль);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
	
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ЗакрытьСессию'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		"При закрытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'Сессия успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессию'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия: " + ИдентификаторСессии);
			
			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				
				Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
					ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
				КонецЕсли;
				
				Текст = НСтр("ru = 'Сессия по профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		Иначе
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСервисаSessionService() Экспорт
	Возврат "SessionService";
КонецФункции

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
	Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ВерсияИСЭСФ) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Макет = ПолучитьМакет("ЗапросCreateSession_Версия2");
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		//ОшибкаОткрытияСессии = СтрЗаменить(ОшибкаОткрытияСессии, "%ТекстОшибки%", ИнформацияОбОшибке.ПодробноеПредставление);	 
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
КонецФункции

//	currentSessionStatusResponse type currentSessionStatusResponse
// 	status type sessionStatus - type string with restriction - enum { 'OK', 'CLOSED', 'NOT_FOUND' }
Функция ПолучитьСтатусСессии(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СтатусСессии = Неопределено;	
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ЗапросCurrentSessionStatus");			
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , );
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменСНТ.ПроверитьСтатусСессии'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Проверка статуса сессии: " + ИдентификаторСессии);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СтатусСессии = ОтветXDTO.Body.currentSessionStatusResponse.status;	
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ПроверитьСтатусСессииВС'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При проверке статуса сессии ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;    	              	
	
	Возврат СтатусСессии;
	
КонецФункции

Функция СессияАктивна(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СессияАктивна = Ложь;
	Если ВРЕГ(ПолучитьСтатусСессии(ИдентификаторСессии, ПрофильИСЭСФ, ВерсияИСЭСФ)) = "OK" Тогда
		СессияАктивна = Истина;
	КонецЕсли;	
	
	Возврат СессияАктивна;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСНТ

// См. ЭСФСервер.ПолучитьНовыеЭСФ()
Функция ПолучитьНовыеСНТ(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;	                                      	
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
	ТолькоСоздатьОбновитьФайлы = ?(ПараметрыВыгрузки.Свойство("ТолькоСоздатьОбновитьФайлы"), ПараметрыВыгрузки.ТолькоСоздатьОбновитьФайлы, Ложь);
	
	СообщениеПользователя = Новый СообщениеПользователю;
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	ВерсияВС = Неопределено;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начата синхронизация с ИС ЭСФ.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Входящий = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий");
	Исходящий = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий");	
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;		
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка); 				
		
		ПараметрыМетодаВходящихСНТ = СНТСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("querySntUpdates"), Перечисления.НаправленияЭСФ.ПустаяСсылка());	
		
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихСНТ, , ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияВС);		
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		МассивСНТДляПолученияИдентификаторовТоваров = Новый Массив(); // накапливаем ссылки ЭСФ, чтобы отправить завтрос на получение идентификаторов товаров
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение новых и измененных входящих СНТ. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхСНТ(Перечисления.НаправленияСНТ.Входящий, СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияВС, ПараметрыМетодаВходящихСНТ, МассивИдентификаторовДляОбновленияСтатусаПриема, МассивСНТДляПолученияИдентификаторовТоваров);					
		КонецЦикла;
		
		ПодтвердитьДоставкуВходящихСНТ(МассивИдентификаторовДляОбновленияСтатусаПриема, СтруктураПрофиляСинхронизации, ИдентификаторСессии); // Отправка уведомления о приеме
		
		ЭСФВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСЭСФ);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
		
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Синхронизация с ИС ЭСФ успешно завершена.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеНовыхСНТ(Знач НаправлениеСНТ, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема = Неопределено, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаSntInfo = ФабрикаСНТ_XML_API_ЭЦП_Версия1(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "50"); 
	lastSntId = ?(ПараметрыМетода.Свойство(ВРег("lastSntId")), ПараметрыМетода.lastSntId, "0");
	lastEventDate = Дата(2010,01,01); 
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) и ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;		
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;			
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросQuerySntUpdates_Версия1").ПолучитьТекст();
	
	ПредыдущийLastEventDate = Неопределено;
	ПредыдущийlastSntId = Неопределено;
	
	ПоследнийБлок = Ложь; 
	
	Пока НЕ ПоследнийБлок И (LastEventDate<>ПредыдущийLastEventDate ИЛИ lastSntId<>ПредыдущийlastSntId) Цикл
		
		ПредыдущийLastEventDate = LastEventDate;
		ПредыдущийlastSntId = lastSntId;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
		
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastSntId]", lastSntId); // 5.0
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
		
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService(),,ВерсияИСЭСФ);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			
			sntInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryUpdatesResponse.sntInfoList, "sntInfo", Неопределено);				
			
			Если ТолькоСоздатьОбновитьФайлы Тогда
				//СоздатьОбновитьПрисоединенныеФайлыСуществующихСНТ(sntInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Иначе
				МассивИсключаемыхИД = Новый Массив;
				МассивСНТДляПодтвержденияПолученияВходящихСНТ = Новый Массив;  // накапливаем ссылки для отправки подтверждения получения только для входящих
				СоздатьОбновитьПолучаемыеСНТ(sntInfoList, НаправлениеСНТ, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, Ложь, МассивИсключаемыхИД, Истина, МассивЭСФДляПолученияИдентификаторовТоваров, МассивСНТДляПодтвержденияПолученияВходящихСНТ, ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Пользователь); 
				СформироватьМассивIDДляПодтвержденияПолучениеВходящихСНТ(sntInfoList, МассивИдентификаторовДляОбновленияСтатусаПриема, МассивСНТДляПодтвержденияПолученияВходящихСНТ);
				Для Каждого ИД Из МассивИсключаемыхИД Цикл
					ИндексЭлемента = МассивИдентификаторовДляОбновленияСтатусаПриема.Найти(ИД);
					Если ИндексЭлемента <> Неопределено Тогда
						МассивИдентификаторовДляОбновленияСтатусаПриема.Удалить(ИндексЭлемента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Сохранение  параметров
			ПоследнийБлок = XMLЗначение(Тип("Булево"),ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryUpdatesResponse,"lastBlock", Истина));			
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryUpdatesResponse, "lastEventDate",0); 
			lastSntId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryUpdatesResponse, "lastSntId",0); 
			
			
			ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
			Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
				//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекундов, возвращаемых сервером
				ПараметрДата = ПараметрДата - 1;
			КонецЕсли;
			
			СНТСервер.СохранитьПараметрыМетода(
			ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
			ВРег("querySntUpdates"), 
			Перечисления.НаправленияЭСФ.ПустаяСсылка(), 
			ВРег("lastEventDate"), 
			ПараметрДата);
			
			СНТСервер.СохранитьПараметрыМетода(
			ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
			ВРег("querySntUpdates"), 
			Перечисления.НаправленияЭСФ.ПустаяСсылка(), 
			ВРег("lastSntId"), 
			lastSntId);
			
			Если ПолучитьОднуПорцию Тогда
				//чтобы не возникало зацикливания
				ПоследнийБлок = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
			
			ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			ПредыдущийLastEventDate = Неопределено;			
			ПредыдущийlastSntId = Неопределено;			
			
		Иначе
			
			ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменСНТ.ПолучитьНовыеСНТ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При получении новых СНТ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?(ПоследнийБлок ИЛИ (LastEventDate = ПредыдущийLastEventDate И lastSntId = ПредыдущийlastSntId), Истина, Ложь);
	
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

Функция СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации) Экспорт 
	СоответствиеПараметровСинхронизации = Новый Соответствие;
	Для Каждого Элемент Из МассивПрофилейИСЭСФСДатойСинхронизации Цикл
		СоответствиеПараметровСинхронизации.Вставить(Элемент.ПрофильИСЭСФ, Новый Структура("ДатаНачалаСинхронизацииВходящихСНТ, ДатаНачалаСинхронизацииИсходящихСНТ",Элемент.ДатаНачалаСинхронизацииВходящихСНТ, Элемент.ДатаНачалаСинхронизацииИсходящихСНТ ));		
	КонецЦикла;	
	Возврат СоответствиеПараметровСинхронизации;
КонецФункции

Процедура ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихСНТ, ПараметрыМетодаИсходящихСНТ = Неопределено,знач ДанныеПрофиля, знач СоответствиеПараметровСинхронизации)
	
	Если СоответствиеПараметровСинхронизации <> Неопределено Тогда
		Параметр = СоответствиеПараметровСинхронизации.Получить(ДанныеПрофиля.Ссылка);
		Если Параметр <> Неопределено Тогда
			Если ПараметрыМетодаВходящихСНТ <> Неопределено Тогда
				ПараметрыМетодаВходящихСНТ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииВходящихСНТ);	
			КонецЕсли;
			
			Если ПараметрыМетодаИсходящихСНТ <> Неопределено Тогда
				ПараметрыМетодаИсходящихСНТ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииИсходящихСНТ);
			КонецЕсли
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры	

Процедура СоздатьОбновитьПолучаемыеСНТ (Знач sntInfoList, Знач НаправлениеСНТ, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыСНТ, МассивИсключаемыхИД = Неопределено, Знач Провести = Ложь, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено, МассивСНТДляПодтвержденияПолученияВходящихСНТ = Неопределено, Пользователь = Неопределено, МассивСНТДляПолученияДанныхПоСопоставлению = Неопределено) Экспорт
	
	Если sntInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	sntInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(sntInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивСНТ = НовыйМассивЗагружаемыхСНТ(sntInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыСНТ, Пользователь);
		
		// Создать массив новых СНТ (которых еще нет в ИБ)
		// для заполнения ссылочных полей по текстовым и числовым представлениям.
		МассивНовыхСНТ = Новый Массив;
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			Если ОбъектСНТ.Ссылка.Пустая() Тогда
				МассивНовыхСНТ.Добавить(ОбъектСНТ);
			КонецЕсли;
		КонецЦикла;
		
		// Создать коллекцию старых СНТ (которые уже были в ИБ)
		// содержащую объекты СНТ до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхСНТ = Новый Массив;
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			Если НЕ ОбъектСНТ.Ссылка.Пустая() Тогда
				КопияОбъектаСНТ = ОбъектСНТ.Скопировать();
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектСНТ", КопияОбъектаСНТ);
				Структура.Вставить("ОбновленныйОбъектСНТ", ОбъектСНТ);
				МассивСтарыхСНТ.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы СНТ.
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			Если НЕ ОбъектСНТ.Ссылка.Пустая() Тогда
				СНТСервер.ОчиститьОбъект(ОбъектСНТ, "Идентификатор, ДокументОснование, Организация, СтруктурноеПодразделение, СтруктурноеПодразделениеПолучатель, Направление, НомерСНТ, Дата, ДатаПриема, ВидОперации, Автор, КурсВалюты, Комментарий");
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы СНТ.
		МассивПропускаемыхСНТ = Новый Массив;
		
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			SntInfo = НайтиSntInfoПоId(sntInfoList, ОбъектСНТ.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(SntInfo, "registrationNumber", "");
				ЗаполнитьСНТ(SntInfo, СтруктурнаяЕдиница, НаправлениеСНТ, ОбъектСНТ);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщ = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия СНТ формату.
				|Подробную информацию об ошибке смотрите в журанале регистрации.'");
				ТекстСообщ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщ, ОбъектСНТ.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщ;
				СообщениеПользователя.Сообщить();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменСНТ.СоздатьОбновитьПолучаемыеСНТ'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

				
				МассивПропускаемыхСНТ.Добавить(ОбъектСНТ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектСНТ.Идентификатор);
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		Для Каждого ОбъектСНТ Из МассивПропускаемыхСНТ Цикл
			ИндексЭлемента = МассивСНТ.Найти(ОбъектСНТ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивСНТ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхСНТ.Найти(ОбъектСНТ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхСНТ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы СНТ.
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			Если ЗначениеЗаполнено(ОбъектСНТ.Дата) Тогда
				ОбъектСНТ.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
				|%2,
				|%3'");
				Причина1 = "";
				Причина2 = "";
				Если Не ЗначениеЗаполнено(ОбъектСНТ.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ОбъектСНТ.ДатаОтгрузкиТовара) Тогда
					Причина2 = НСтр("ru = '- не удалось определить дату оборота'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектСНТ.РегистрационныйНомерИСЭСФ, Причина1, Причина2);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхСНТ.Добавить(ОбъектСНТ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектСНТ.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ОбъектСНТ Из МассивПропускаемыхСНТ Цикл
			ИндексЭлемента = МассивСНТ.Найти(ОбъектСНТ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивСНТ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхСНТ.Найти(ОбъектСНТ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхСНТ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;	
		
		МассивНаименованийТабличныхЧастей = ПолучитьМассивНаименованийТабличныхЧастейСНТ();
		
		ЗаполнитьСсылочныеРеквизитыДокументовСНТ(Неопределено, Неопределено, Неопределено, НаправлениеСНТ, МассивНовыхСНТ, МассивНаименованийТабличныхЧастей, СтруктурнаяЕдиница);
		ВосстановитьСсылочныеРеквизитыДокументовСНТ(МассивСтарыхСНТ, МассивНаименованийТабличныхЧастей);
		
		// Повторно записать старые и новые документы СНТ.
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			
			ОбъектСНТ.Записать();
			
		КонецЦикла;
		
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			
			Если ТипЗнч(МассивСНТДляПодтвержденияПолученияВходящихСНТ) = Тип("Массив") Тогда
				
				Если ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
					МассивСНТДляПодтвержденияПолученияВходящихСНТ.Добавить(ОбъектСНТ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗнч(МассивСНТДляПолученияДанныхПоСопоставлению) = Тип("Массив") Тогда
			СформироватьМассивДляПолученияДанныхПоСопоставлению(МассивСНТ, МассивСНТДляПолученияДанныхПоСопоставлению);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ПровестиВходящиеСНТ(МассивСНТ);
		
		УстановитьПривилегированныйРежим(Ложь);
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.СоздатьОбновитьПолучаемыеСНТ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбновитьПрисоединенныеФайлыСуществующихСНТ(Знач InvoiceInfoList, Знач СтруктурнаяЕдиница)
	
КонецПроцедуры

Процедура СформироватьМассивIDДляПодтвержденияПолучениеВходящихСНТ(Знач sntInfoList, МассивИдентификаторовСНТ, МассивСНТДляПодтвержденияПолученияВходящихСНТ)
	Если МассивСНТДляПодтвержденияПолученияВходящихСНТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов СНТ.	
	Для Каждого СНТ Из МассивСНТДляПодтвержденияПолученияВходящихСНТ Цикл
		
		Если ЗначениеЗаполнено(СНТ.Идентификатор) Тогда
			
			МассивИдентификаторовСНТ.Добавить(СНТ.Идентификатор);	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СформироватьМассивДляПолученияДанныхПоСопоставлению(МассивСНТ, МассивСНТДляДляПолученияДанныхСопоставления)
	
	Если МассивСНТДляДляПолученияДанныхСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Создать и заполнить массив идентификаторов СНТ.	
	Для Каждого СНТ Из МассивСНТ Цикл
		
		Если ЗначениеЗаполнено(СНТ.СтатусСопоставленияДляСНТ) И (СНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром ИЛИ СНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ОжидаетсяСопоставлениеИмпортёра) Тогда
			МассивСНТДляДляПолученияДанныхСопоставления.Добавить(СНТ.Идентификатор);	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция НовыйМассивЗагружаемыхСНТ(Знач sntInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеСНТ, Знач УчитыватьВсеСтатусыЭСФ, Пользователь = Неопределено)
	
	МассивСНТ = Новый Массив;
	
	// Создать массив идентификаторов Invoice.
	МассивИдентификаторов = Новый Массив;
	Для Каждого sntInfo Из sntInfoList Цикл
		
		Если УчитыватьВсеСтатусыЭСФ Тогда
			
			МассивИдентификаторов.Добавить(sntInfo.sntId);
			
		Иначе
			
			СтатусSnt = СНТКлиентСервер.СтатусСНТ_ИБ(sntInfo.status );
			
			Если СтатусSnt <> Перечисления.СтатусыСНТ.Черновик 
				И СтатусSnt <> Перечисления.СтатусыСНТ.Ошибочный
				И СтатусSnt <> Перечисления.СтатусыСНТ.Импортированный Тогда
				
				МассивИдентификаторов.Добавить(sntInfo.sntId);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихСНТ = НайтиСуществующиеСНТПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов ЭСФ.
	// Если ТолькоСуществующиеЭСФ, то только старых объектов ЭСФ.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихСНТ Цикл
		
		ИдентификаторСНТ = ЭлементКоллекции.Ключ;
		СсылкаСНТ = ЭлементКоллекции.Значение;
		
		Если СсылкаСНТ.Пустая() Тогда
			Если НЕ ТолькоСуществующиеСНТ Тогда
				ОбъектСНТ = Документы.СНТ.СоздатьДокумент();
				ОбъектСНТ.Идентификатор = ИдентификаторСНТ;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ТекущийПользовательНеУказан = ЭСФСерверПереопределяемый.ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь);
				Если ТекущийПользовательНеУказан Тогда  
					ОбъектСНТ.Автор = Пользователь;
				Иначе
					ОбъектСНТ.Автор = ТекущийПользователь;
				КонецЕсли;
				
				МассивСНТ.Добавить(ОбъектСНТ);
			КонецЕсли;
		Иначе
			МассивСНТ.Добавить(СсылкаСНТ.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключить проверку даты запрета изменения при записи ЭСФ.
	Для Каждого ОбъектСНТ Из МассивСНТ Цикл
		ОбъектСНТ.ДополнительныеСвойства.Вставить(СНТКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		ОбъектСНТ.ДополнительныеСвойства.Вставить("ОбновлениеСНТ", Истина);
	КонецЦикла;
	
	Возврат МассивСНТ;
	
КонецФункции

Процедура ЗаполнитьСНТ(Знач SntInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеСНТ, СНТ) Экспорт
	
	ЗаполнитьСНТ_Версия1(SntInfo, СтруктурнаяЕдиница, НаправлениеСНТ, СНТ);	
	
КонецПроцедуры

Процедура ЗаполнитьСНТ_Версия1(Знач SntInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеСНТ, СНТ) Экспорт //Получение СНТ
	
	ФабрикаSNT = ФабрикаСНТ_XML_API_ЭЦП_Версия1();	
	ТипSnt = КэшированнаяФабрикаСНТ_XML_API_ЭЦП_Версия1.Тип("v1.snt", "SntV1");
	documentInfo = СНТСервер.ПолучитьСвойство(SntInfo, "documentInfo", Неопределено);
	sntBody = СНТСервер.ПолучитьСвойство(documentInfo, "sntBody", ""); 
	ТекстСНТ = sntBody;
	Snt = СНТСервер.ОбъектXDTOИзСтрокиXML(ТекстСНТ, ФабрикаSNT, ТипSnt);
	
	#Область Ошибки
	Errors =  СНТСервер.ПолучитьСвойство(documentInfo.errors, "error", Неопределено);
	
	Если Errors <> Неопределено Тогда
		
			ДанныеОшибки = ДанныеОшибкиСНТ(documentInfo);
			
			СНТ.Ошибки.Очистить();
			Для Каждого Строка из ДанныеОшибки.Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = СНТ.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
				
			КонецЦикла;
		КонецЕсли;
	
	#КонецОбласти
	
	// Раздел А. Общий раздел.
	#Область ОбщийРаздел
	
	ДатаСНТССервера = СНТСервер.ДатаИБ(Snt.date);
	Если СНТ.Дата = Дата(1,1,1) ИЛИ НачалоДня(СНТ.Дата) <> НачалоДня(ДатаСНТССервера) ИЛИ СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") ИЛИ СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.ПустаяСсылка") ТОГДА
		СНТ.Дата = ДатаСНТССервера;
	КонецЕсли;
	
	//номер обновляем только во входящих, т.к. в исходчящих своя нумерация
	//с префиксами и нулями
	//Если СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") ИЛИ СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.ПустаяСсылка") ТОГДА
	Если НЕ ЗначениеЗаполнено(СНТ.НомерСНТ) Тогда
		СНТ.НомерСНТ = СНТСервер.ПолучитьСвойство(Snt, "number", "");
	КонецЕсли;
	//КонецЕсли;
	
	СНТ.РегистрационныйНомерИСЭСФ = СНТСервер.ПолучитьСвойство(SntInfo, "registrationNumber", "");
	СНТ.ДатаРегистрацииИСЭСФ = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(documentInfo, "inputDate", "01.01.0001"));
	СНТ.ДатаОтгрузкиТовара = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(Snt, "shippingDate", "01.01.0001"));
	
	СНТ.РегистрационныйНомерИСМПТ = СНТСервер.ПолучитьСвойство(Snt, "digitalMarkingNotificationNumber", "");
	СНТ.ДатаРегистрацииИСМПТ = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(Snt, "digitalMarkingNotificationDate", "01.01.0001"));
	
	СНТ.ТипСНТ = СНТКлиентСервер.ТипИБ(Snt.sntType);
	СНТ.Причина = ПричинаИБ(СНТСервер.ПолучитьСвойство(SntInfo, "cancelReason", ""));
	СНТ.ДатаВыпискиНаБумажномНосителе = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(Snt, "datePaper", "01.01.0001"));
	СНТ.ПричинаВыпискиНаБумажномНосителе = СНТКлиентСервер.ПричинаВыпискиНаБумагеИБ(СНТСервер.ПолучитьСвойство(Snt, "reasonPaper", ""));
	
	Если ЗначениеЗаполнено(СНТ.ДатаВыпискиНаБумажномНосителе) И ЗначениеЗаполнено(СНТ.ПричинаВыпискиНаБумажномНосителе) Тогда
		СНТ.ПредоставленВБумажномВиде = Истина;
	КонецЕсли;
	
	СНТ.РегистрационныйНомерСвязанногоСНТ = СНТСервер.ПолучитьСвойство(Snt, "relatedRegistrationNumber", "");
	
	СНТ.ВалютаКод = СНТСервер.ПолучитьСвойство(Snt, "currencyCode", "");
	КурсВалюты = СНТСервер.ПолучитьСвойство(Snt, "currencyRate", Неопределено);
	Если КурсВалюты <> Неопределено Тогда
		СНТ.КурсВалюты = КурсВалюты;
	КонецЕсли;
	
	sntExport = СНТСервер.ПолучитьСвойство(Snt, "sntExport", Неопределено);
	
	Если sntExport <> Неопределено Тогда
		СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз");
		СНТ.ВидВывоза = СНТКлиентСервер.ВидЭкспортаИБ(СНТСервер.ПолучитьСвойство(sntExport, "exportType", ""));
	КонецЕсли;
	
	sntImport = СНТСервер.ПолучитьСвойство(Snt, "sntImport", Неопределено);
	
	Если sntImport <> Неопределено Тогда
		СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз");
		СНТ.ВидВвоза = СНТКлиентСервер.ВидИмпортаИБ(СНТСервер.ПолучитьСвойство(sntImport, "importType", ""));
	КонецЕсли;
	
	transferType = СНТСервер.ПолучитьСвойство(Snt, "transferType", Неопределено);
	
	Если transferType <> Неопределено Тогда
		СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение");
		
		СНТ.ВидПеремещения = СНТКлиентСервер.ВидПеремещенияИБ(transferType);
	КонецЕсли;
	#КонецОбласти
	
	// Раздел B. Реквизиты поставщика.
	#Область РеквизитыПоставщика
	
	seller = ЭСФСервер.ПолучитьСвойство(Snt, "seller", Неопределено);
	
	СНТ.ПоставщикИдентификатор = СНТСервер.ПолучитьСвойство(seller, "tin", "");
	СНТ.ПоставщикНаименование = СНТСервер.ПолучитьСвойство(seller, "name", "");
	СНТ.ПоставщикБИНСтруктурногоПодразделения = СНТСервер.ПолучитьСвойство(seller, "branchTin", "");
	СНТ.АдресОтправки = СНТСервер.ПолучитьСвойство(seller, "actualAddress", "");
	СНТ.ПоставщикКодСтраныОтправки = СНТСервер.ПолучитьСвойство(seller, "countryCode", "");
	СНТ.ПоставщикНерезидент = ?(СНТСервер.ПолучитьСвойство(seller, "nonResident", "false") = "false", Ложь, Истина);
	СНТ.ПоставщикКодСтраны = СНТСервер.ПолучитьСвойство(seller, "registerCountryCode", "");
	СНТ.ПоставщикБИНРеорганизованногоЛица = СНТСервер.ПолучитьСвойство(seller, "reorganizedTin", "");
	
	statuses = ЭСФСервер.ПолучитьСвойство(seller, "statuses", Неопределено);
	Если statuses <> Неопределено Тогда	
		
		statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
		
		Если statusList <> Неопределено Тогда	
			
			statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
			
			СоответствиеСтатусовПоставщика = Новый Соответствие;
			СоответствиеСтатусовПоставщика.Вставить("LAWYER", "Адвокат");
			СоответствиеСтатусовПоставщика.Вставить("NOTARY", "Нотариус");
			СоответствиеСтатусовПоставщика.Вставить("MEDIATOR", "Медиатор");
			СоответствиеСтатусовПоставщика.Вставить("BAILIFF", "ЧастныйСудебныйИсполнитель");
			СоответствиеСтатусовПоставщика.Вставить("INDIVIDUAL", "ФизическоеЛицо");
			СоответствиеСтатусовПоставщика.Вставить("RETAIL", "РозничнаяРеализация");
			СоответствиеСтатусовПоставщика.Вставить("RETAILER", "РозничныйРеализатор");
			СоответствиеСтатусовПоставщика.Вставить("PHARMACEUTIC_PRODUCER", "ФармацевтическийПроизводитель");
			СоответствиеСтатусовПоставщика.Вставить("LESSEE", "Лизингополучатель");
			СоответствиеСтатусовПоставщика.Вставить("LESSOR", "Лизингодатель");	
			СоответствиеСтатусовПоставщика.Вставить("PRINCIPAL", "Доверитель");
			СоответствиеСтатусовПоставщика.Вставить("COMMITTENT", "Комитент");
			СоответствиеСтатусовПоставщика.Вставить("BROKER", "Комиссионер");
			СоответствиеСтатусовПоставщика.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
			СоответствиеСтатусовПоставщика.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");	
			
			Для Каждого status Из statusList Цикл
				ИмяРеквизита = СоответствиеСтатусовПоставщика[status];
				Если ИмяРеквизита <> Неопределено Тогда
					СНТ["Поставщик"+ИмяРеквизита] = Истина;	
				Иначе
					ЗаписьЖурналаРегистрации("СНТ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	СНТ.СкладОтправкиИдентификатор = Число(СНТСервер.ПолучитьСвойство(seller, "storeId", 0));
	#КонецОбласти
	
	// Раздел С. Реквизиты получателя
	#Область РеквизитыПолучателя
	
	customer = ЭСФСервер.ПолучитьСвойство(Snt, "customer", Неопределено);
	
	СНТ.ПолучательИдентификатор = СНТСервер.ПолучитьСвойство(customer, "tin", "");
	СНТ.ПолучательНаименование = СНТСервер.ПолучитьСвойство(customer, "name", "");
	СНТ.ПолучательБИНСтруктурногоПодразделения = СНТСервер.ПолучитьСвойство(customer, "branchTin", "");
	СНТ.АдресДоставки = СНТСервер.ПолучитьСвойство(customer, "actualAddress", "");
	СНТ.ПолучательКодСтраныДоставки = СНТСервер.ПолучитьСвойство(customer, "countryCode", "");
	СНТ.ПолучательНерезидент = ?(СНТСервер.ПолучитьСвойство(customer, "nonResident", "false") = "false", Ложь, Истина);
	СНТ.ПолучательКодСтраны = СНТСервер.ПолучитьСвойство(customer, "registerCountryCode", "");
	СНТ.ПолучательБИНРеорганизованногоЛица = СНТСервер.ПолучитьСвойство(customer, "reorganizedTin", "");
	
	statuses = ЭСФСервер.ПолучитьСвойство(customer, "statuses", Неопределено);
	Если statuses <> Неопределено Тогда	
		
		statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
		
		Если statusList <> Неопределено Тогда	
			
			statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
			
			СоответствиеСтатусовПолучателя = Новый Соответствие;
			СоответствиеСтатусовПолучателя.Вставить("LAWYER", "Адвокат");
			СоответствиеСтатусовПолучателя.Вставить("NOTARY", "Нотариус");
			СоответствиеСтатусовПолучателя.Вставить("MEDIATOR", "Медиатор");
			СоответствиеСтатусовПолучателя.Вставить("BAILIFF", "ЧастныйСудебныйИсполнитель");
			СоответствиеСтатусовПолучателя.Вставить("INDIVIDUAL", "ФизическоеЛицо");
			СоответствиеСтатусовПолучателя.Вставить("RETAIL", "РозничнаяРеализация");
			СоответствиеСтатусовПолучателя.Вставить("RETAILER", "РозничныйРеализатор");
			СоответствиеСтатусовПолучателя.Вставить("PHARMACEUTIC_PRODUCER", "ФармацевтическийПроизводитель");
			СоответствиеСтатусовПолучателя.Вставить("LESSEE", "Лизингополучатель");
			СоответствиеСтатусовПолучателя.Вставить("LESSOR", "Лизингодатель");	
			СоответствиеСтатусовПолучателя.Вставить("PRINCIPAL", "Доверитель");
			СоответствиеСтатусовПолучателя.Вставить("COMMITTENT", "Комитент");
			СоответствиеСтатусовПолучателя.Вставить("BROKER", "Комиссионер");
			СоответствиеСтатусовПолучателя.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
			СоответствиеСтатусовПолучателя.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");	
			
			Для Каждого status Из statusList Цикл
				ИмяРеквизита = СоответствиеСтатусовПолучателя[status];
				Если ИмяРеквизита <> Неопределено Тогда
					СНТ["Получатель"+ИмяРеквизита] = Истина;	
				Иначе
					ЗаписьЖурналаРегистрации("СНТ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СНТ.СкладДоставкиИдентификатор = Число(СНТСервер.ПолучитьСвойство(customer, "storeId", 0));
	
	#КонецОбласти
	
	// Раздел D. Реквизиты Грузоотправителя И Грузополучателя (D) - (D1)	
	#Область РеквизитыГрузоотправителяИГрузополучателя
	//Грузоотправитель
	consignor = СНТСервер.ПолучитьСвойство(Snt, "consignor", Неопределено);
	Если consignor <> Неопределено Тогда
		СНТ.ГрузоотправительИдентификатор = СНТСервер.ПолучитьСвойство(consignor, "tin", "");
		СНТ.ГрузоотправительНаименование = СНТСервер.ПолучитьСвойство(consignor, "name", ""); 
		СНТ.ГрузоотправительНерезидент = ?(СНТСервер.ПолучитьСвойство(consignor, "nonResident", "") = "false", Ложь, Истина);
		СНТ.ГрузоотправительКодСтраныОтправки = СНТСервер.ПолучитьСвойство(consignor, "countryCode", "");
		СНТ.ГрузоотправительДополнительныеСведения = СНТСервер.ПолучитьСвойство(consignor, "additionalInfo", "");
	КонецЕсли;
	
	//Грузополучатель
	consignee = СНТСервер.ПолучитьСвойство(Snt, "consignee", Неопределено);
	Если consignee <> Неопределено Тогда
		СНТ.ГрузополучательИдентификатор = СНТСервер.ПолучитьСвойство(consignee, "tin", "");
		СНТ.ГрузополучательНаименование = СНТСервер.ПолучитьСвойство(consignee, "name", ""); 
		СНТ.ГрузополучательНерезидент = ?(СНТСервер.ПолучитьСвойство(consignee, "nonResident", "") = "false", Ложь, Истина); 
		СНТ.ГрузополучательКодСтраныОтправки = СНТСервер.ПолучитьСвойство(consignee, "countryCode", "");
		СНТ.ГрузополучательДополнительныеСведения = СНТСервер.ПолучитьСвойство(consignee, "additionalInfo", ""); 
	КонецЕсли;
	
	#КонецОбласти
	
	// Раздел Е. Сведения по перевозке 
	#Область СведениПоПеревозке
	
	shippingInfo = СНТСервер.ПолучитьСвойство(Snt, "shippingInfo", Неопределено);
	
	Если shippingInfo <> Неопределено Тогда
		
		СНТ.НомерБорта = СНТСервер.ПолучитьСвойство(shippingInfo, "boardNumber", "");
		СНТ.НомерТС = СНТСервер.ПолучитьСвойство(shippingInfo, "carStateNumber", "");
		СНТ.НомерВагона = СНТСервер.ПолучитьСвойство(shippingInfo, "carriageNumber", "");
		СНТ.ПеревозчикНаименование = СНТСервер.ПолучитьСвойство(shippingInfo, "name", "");
		СНТ.ПеревозчикНерезидент = СНТСервер.ПолучитьСвойство(shippingInfo, "nonResident", Ложь);
		СНТ.НомерСудна = СНТСервер.ПолучитьСвойство(shippingInfo, "shipNumber", "");
		СНТ.ПеревозчикИдентификатор = СНТСервер.ПолучитьСвойство(shippingInfo, "tin", "");
		СНТ.ГосномерПрицепа = СНТСервер.ПолучитьСвойство(shippingInfo, "trailerStateNumber", "");
		
		//СведенияОПланТранспорте
		transportTypes = СНТСервер.ПолучитьСвойство(shippingInfo, "transportTypes", Неопределено);
		Если transportTypes <> Неопределено Тогда	
			
			transportTypeList = ЭСФСервер.ПолучитьСвойство(transportTypes, "transportType", Неопределено);
			
			Если transportTypeList <> Неопределено Тогда	
				
				transportTypeList = ЭСФСервер.СписокXDTOИзОбъектXDTO(transportTypeList);
				
				СоответствиеВидовТранспорта = Новый Соответствие;
				СоответствиеВидовТранспорта.Вставить("AUTOMOBILE", "АвтомобильныйТранспорт");
				СоответствиеВидовТранспорта.Вставить("RAILWAY", "ЖелезнодорожныйТранспорт");
				СоответствиеВидовТранспорта.Вставить("AIR", "ВоздушныйТранспорт");
				СоответствиеВидовТранспорта.Вставить("MARINE", "МорскойТранспорт");
				СоответствиеВидовТранспорта.Вставить("PIPELINE", "Трубопровод");
				СоответствиеВидовТранспорта.Вставить("MULTIMODAL", "Мультимодальный");
				
				Для Каждого transportType Из transportTypeList Цикл
					ИмяРеквизита = СоответствиеВидовТранспорта[transportType];
					Если ИмяРеквизита <> Неопределено Тогда
						СНТ[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("СНТ. Неизвестный вид транспорта", УровеньЖурналаРегистрации.Ошибка, , , transportType);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел Е1. Заправка воздушного судна
	fillingOfAircraft = СНТСервер.ПолучитьСвойство(Snt, "fillingOfAircraft", Неопределено);
	
	Если fillingOfAircraft <> Неопределено Тогда
		СНТ.ЗВСРегистрационныйНомерБорта = СНТСервер.ПолучитьСвойство(fillingOfAircraft, "aircraftRegistrationNumber", "");
		СНТ.ЗВСТипВоздушногоСудна = СНТСервер.ПолучитьСвойство(fillingOfAircraft, "aircraftType", "");
		СНТ.ЗВСНомерРейса = СНТСервер.ПолучитьСвойство(fillingOfAircraft, "flightNumber", "");
		СНТ.ЗВСНомерРасходногоОрдераТребованиеЗаправки = СНТСервер.ПолучитьСвойство(fillingOfAircraft, "warrantNumber", "");
	Конецесли;
	#КонецОбласти
	
	// Раздел F. Договор (контракт) на поставку (F) - (F1)
	#Область ДоговорНаПоставку
	
	contract = СНТСервер.ПолучитьСвойство(Snt, "contract", Неопределено);
	
	Если contract <> Неопределено Тогда
		СНТ.БезДоговора = ?(СНТСервер.ПолучитьСвойство(contract, "isContract", "") = "false", Истина, Ложь); 
		СНТ.ДоговорПоставкиДата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(contract, "date", "01.01.0001"));		
		СНТ.ДоговорПоставкиУсловияПоставки = СНТСервер.ПолучитьСвойство(contract, "deliveryCondition", "");
		СНТ.ДоговорПоставкиНомер = СНТСервер.ПолучитьСвойство(contract, "number", "");
		СНТ.ДоговорПоставкиУсловияОплаты = СНТСервер.ПолучитьСвойство(contract, "termOfContractPayment", "");
	Конецесли;
	
	// Раздел F1. Договор в рамках УСД/СРП
	sharingParticipantContract = СНТСервер.ПолучитьСвойство(Snt, "sharingParticipantContract", Неопределено);
	
	Если sharingParticipantContract <> Неопределено Тогда
		СНТ.ДоговорВРамкахУСДПолучательНомер = СНТСервер.ПолучитьСвойство(sharingParticipantContract, "customerNumber", "");
		СНТ.ДоговорВРамкахУСДПолучательДата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(sharingParticipantContract, "customerDate", "01.01.0001"));
		СНТ.ДоговорВРамкахУСДПоставщикНомер = СНТСервер.ПолучитьСвойство(sharingParticipantContract, "sellerNumber", "");
		СНТ.ДоговорВРамкахУСДПоставщикДата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(sharingParticipantContract, "sellerDate", "01.01.0001"));		
	Конецесли;
	#КонецОбласти
	
	#Область ДанныеПоТоварам
	
	#Область G1ДанныеПоТоварам
	productSet = СНТСервер.ПолучитьСвойство(Snt, "productSet", Неопределено);
	
	Если productSet <> Неопределено Тогда
		
		products = СНТСервер.ПолучитьСвойство(productSet, "products", Неопределено);
		Если products <> Неопределено Тогда
			
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ТоварыВС.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область G2G3G4G5ДанныеПоТоварам
	SntAlcoholSet = СНТСервер.ПолучитьСвойство(Snt, "alcoholSet", Неопределено);
	
	Если SntAlcoholSet <> Неопределено Тогда
		
		СНТ.НомерЛицензииПоставщика = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "sellerLicenseNumber", Неопределено);
		СНТ.АдресПоставщикаПоЛицензии = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "sellerLicenseAddress", Неопределено);
		СНТ.НомерЛицензииПолучателя = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "customerLicenseNumber", Неопределено);
		СНТ.АдресПолучателяПоЛицензии = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "customerLicenseAddress", Неопределено);
		
		#Область G2ЭтиловыйСпирт
		ethanolProductSet = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "ethanolProductSet", Неопределено);
		
		Если ethanolProductSet <> Неопределено Тогда
			
			СНТ.ЕстьЭтиловыйСпирт = Истина;
			СНТ.КодОперацииG2 = СНТСервер.ПолучитьСвойство(ethanolProductSet, "operationCode", 0);
			
			products = СНТСервер.ПолучитьСвойство(ethanolProductSet, "products", Неопределено);
			Если products <> Неопределено Тогда
				СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
				СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
				
				Для Каждого ТоварXDTO Из СписокТоваров Цикл
					ТоварСтрока = СНТ.ЭтиловыйСпирт.Добавить();
					ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
					ТоварСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantityInLiters", 0);
					Если СНТСервер.ЕстьСвойство(ТоварXDTO, "spiritPercent") Тогда 
						ТоварСтрока.Крепость = СНТСервер.ПолучитьСвойство(ТоварXDTO, "spiritPercent", 0);
					КонецЕсли;
					ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область G3Виноматериал
		wineMaterialProductSet = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "wineMaterialProductSet", Неопределено);
		
		Если wineMaterialProductSet <> Неопределено Тогда
			
			СНТ.ЕстьВиноматериал = Истина;
			
			products = СНТСервер.ПолучитьСвойство(wineMaterialProductSet, "products", Неопределено);
			Если products <> Неопределено Тогда
				СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
				СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
				
				Для Каждого ТоварXDTO Из СписокТоваров Цикл
					ТоварСтрока = СНТ.Виноматериал.Добавить();
					ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
					ТоварСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantityInLiters", 0);
					ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область G4ПивоПивныеНапитки
		alcoholBeerProductSet = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "alcoholBeerProductSet", Неопределено);
		
		Если alcoholBeerProductSet <> Неопределено Тогда
			
			СНТ.ЕстьПивоПивныеНапитки = Истина;
			
			СНТ.КодОперацииG4 = СНТСервер.ПолучитьСвойство(alcoholBeerProductSet, "operationCode", 0);
			
			products = СНТСервер.ПолучитьСвойство(alcoholBeerProductSet, "products", Неопределено);
			Если products <> Неопределено Тогда
				СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
				СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
				
				Для Каждого ТоварXDTO Из СписокТоваров Цикл
					ТоварСтрока = СНТ.ПивоПивныеНапитки.Добавить();
					ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
					ТоварСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantityInLiters", 0);
					ТоварСтрока.ЕмкостьТары = СНТСервер.ПолучитьСвойство(ТоварXDTO, "containerCapacity", 0);
					ТоварСтрока.КоличествоУпаковок = СНТСервер.ПолучитьСвойство(ТоварXDTO, "containerCount", 0);
					ТоварСтрока.КоличествоВУпаковке = СНТСервер.ПолучитьСвойство(ТоварXDTO, "containerCountInPack", 0);
					ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		#КонецОбласти
		
		#Область G5АлкогольнаяПродукцияКромеПива
		alcoholExceptBeerProductSet = СНТСервер.ПолучитьСвойство(SntAlcoholSet, "alcoholExceptBeerProductSet", Неопределено);
		
		Если alcoholExceptBeerProductSet <> Неопределено Тогда
			
			СНТ.ЕстьАлкоголь = Истина;
			
			СНТ.КодОперацииG5 = СНТСервер.ПолучитьСвойство(alcoholExceptBeerProductSet, "operationCode", 0);
			
			products = СНТСервер.ПолучитьСвойство(alcoholExceptBeerProductSet, "products", Неопределено);
			Если products <> Неопределено Тогда
				СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
				СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
				
				Для Каждого ТоварXDTO Из СписокТоваров Цикл
					ТоварСтрока = СНТ.АлкогольнаяПродукцияКромеПива.Добавить();
					ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
					ТоварСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantityInLiters", 0);
					ТоварСтрока.ЕмкостьТары = СНТСервер.ПолучитьСвойство(ТоварXDTO, "containerCapacity", 0);
					ТоварСтрока.КоличествоБутылок = СНТСервер.ПолучитьСвойство(ТоварXDTO, "containerCount", 0);
					Если СНТСервер.ЕстьСвойство(ТоварXDTO, "spiritPercent") Тогда
						ТоварСтрока.Крепость = СНТСервер.ПолучитьСвойство(ТоварXDTO, "spiritPercent", 0);
					КонецЕсли;
					ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		#КонецОбласти
	#КонецОбласти
	
	#Область G6ДанныеПоНефтепродуктам
	oilSet = СНТСервер.ПолучитьСвойство(Snt, "oilSet", Неопределено);
	
	Если oilSet <> Неопределено Тогда
		
		СНТ.ЕстьНефтепродукты = Истина;
		
		СНТ.КодОперацииG6 = СНТСервер.ПолучитьСвойство(oilSet, "operationCode", 0);
		СНТ.ТипПоставщикаG6 = СНТСервер.ПолучитьСвойство(oilSet, "productSellerType", "");
		СНТ.КодОГДОтправкиG6 = СНТСервер.ПолучитьСвойство(oilSet, "kogdOfSender", 0);
		СНТ.КодОГДДоставкиG6 = СНТСервер.ПолучитьСвойство(oilSet, "kogdOfRecipient", 0);
		
		products = СНТСервер.ПолучитьСвойство(oilSet, "products", Неопределено);
		Если products <> Неопределено Тогда	
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ДанныеПоНефтепродуктам.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;	
		КонецЕсли; 
		
	КонецЕсли;
	#КонецОбласти
	
	#Область G7ДанныеПоБиотопливу
	biofuelSet = СНТСервер.ПолучитьСвойство(Snt, "biofuelSet", Неопределено);
	
	Если biofuelSet <> Неопределено Тогда
		
		СНТ.ЕстьБиотопливо = Истина;
		
		СНТ.КодОперацииG7 = СНТСервер.ПолучитьСвойство(biofuelSet, "operationCode", 0);
		СНТ.ТипПоставщикаG7 = СНТСервер.ПолучитьСвойство(biofuelSet, "productSellerType", "");
		СНТ.КодОГДОтправкиG7 = СНТСервер.ПолучитьСвойство(biofuelSet, "kogdOfSender", 0);
		СНТ.КодОГДДоставкиG7 = СНТСервер.ПолучитьСвойство(biofuelSet, "kogdOfRecipient", 0);
		
		products = СНТСервер.ПолучитьСвойство(biofuelSet, "products", Неопределено);
		Если products <> Неопределено Тогда
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ДанныеПоБиотопливу.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область G8ТабачнаяПродукция
	tobaccoSet = СНТСервер.ПолучитьСвойство(Snt, "tobaccoSet", Неопределено);
	
	Если tobaccoSet <> Неопределено Тогда
		
		СНТ.ЕстьТабачныеИзделия = Истина;
		
		СНТ.КодОперацииG8 = СНТСервер.ПолучитьСвойство(tobaccoSet, "operationCode", 0);
		СНТ.КодОГДОтправкиG8 = СНТСервер.ПолучитьСвойство(tobaccoSet, "kogdOfSender", 0);
		СНТ.КодОГДДоставкиG8 = СНТСервер.ПолучитьСвойство(tobaccoSet, "kogdOfRecipient", 0);
		
		products = СНТСервер.ПолучитьСвойство(tobaccoSet, "products", Неопределено);
		Если products <> Неопределено Тогда
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ТабачнаяПродукция.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ТоварСтрока.ТоварНаименование = СНТСервер.ПолучитьСвойство(ТоварXDTO, "productName", "");
				ТоварСтрока.КоличествоПачек = СНТСервер.ПолучитьСвойство(ТоварXDTO, "numberOfPacks", 0);
				ТоварСтрока.КоличествоВПачке = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantityInPack", 0);
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область G9ДругиеТоварыЦифроваяМаркировка
	otherProductWithDigitalMarkSet = СНТСервер.ПолучитьСвойство(Snt, "otherProductWithDigitalMarkSet", Неопределено);
	
	Если otherProductWithDigitalMarkSet <> Неопределено Тогда
		
		СНТ.ЕстьДругиеТоварыЦифроваяМаркировка = Истина;
		
		products = СНТСервер.ПолучитьСвойство(otherProductWithDigitalMarkSet, "products", Неопределено);
		Если products <> Неопределено Тогда
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ДругиеТоварыЦифроваяМаркировка.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область G10ТоварыЭкспортныйКонтроль
	exportControlProductSet = СНТСервер.ПолучитьСвойство(Snt, "exportControlProductSet", Неопределено);
	
	Если exportControlProductSet <> Неопределено Тогда
		
		СНТ.ЕстьТоварыЭК = Истина;
		
		products = СНТСервер.ПолучитьСвойство(exportControlProductSet, "products", Неопределено);
		Если products <> Неопределено Тогда
			СписокТоваров = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
			СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
			
			Для Каждого ТоварXDTO Из СписокТоваров Цикл
				ТоварСтрока = СНТ.ТоварыЭкспортныйКонтроль.Добавить();
				ТоварСтрока = ЗаполнитьСНТ_ДобавитьБазовыеСведенияОТоваре(ТоварXDTO, ТоварСтрока);
				ТоварСтрока.НомерЛицензии = СНТСервер.ПолучитьСвойство(ТоварXDTO, "permissiveDocumentNumber", "");
				ТоварСтрока.ДатаВыдачиЛицензии = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(ТоварXDTO, "permissiveDocumentIssueDate", "01.01.0001"));
				ТоварСтрока.ДатаОкончанияЛицензии = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(ТоварXDTO, "permissiveDocumentExpireDate", "01.01.0001"));
				ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	// Раздел L. Сведения по отпуску товара 
	#Область СведенияПоОтпускуТовара
	
	releaseGoodsInfo =  СНТСервер.ПолучитьСвойство(Snt, "releaseGoodsInfo", Неопределено);
	
	Если releaseGoodsInfo <> Неопределено Тогда		
		СНТ.ДатаДоверенностиОтпуск = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(releaseGoodsInfo, "powerOfAttorneyDate", "01.01.0001"));
		СНТ.НомерДоверенностиОтпуск = СНТСервер.ПолучитьСвойство(releaseGoodsInfo, "powerOfAttorneyNumber", "");
	КонецЕсли;
	
	СНТ.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(СНТСервер.ПолучитьСвойство(documentInfo, "signatureType", ""));
	
	Если СНТ.ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо")  Тогда
		СНТ.ЭЦПЮрЛицаОтпуск = СНТСервер.ПолучитьСвойство(documentInfo, "signature", "");
	Иначе 
		СНТ.ЭЦПУполномоченногоПодписыватьСНТ = СНТСервер.ПолучитьСвойство(documentInfo, "signature", "");
	КонецЕсли; 
	
	СНТ.ФИОВыписывающегоСНТ = СНТСервер.ПолучитьСвойство(documentInfo, "senderSignerName", ""); 
	
	#КонецОбласти
	
	// Раздел M. Сведения о приемке товара
	#Область СведенияОПриемкеТовара
	
	acceptanceGoodsInfo = СНТСервер.ПолучитьСвойство(SntInfo, "acceptanceGoodsInfo", Неопределено);
	
	Если acceptanceGoodsInfo <> Неопределено Тогда
		
		ДатаПриемПолученная = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "acceptanceOrRejectionDate", Дата(1, 1, 1)));
		
		Если СНТ.ДатаПриема = Дата(1,1,1)
			ИЛИ (СНТ.Направление = Перечисления.НаправленияСНТ.Входящий И НачалоДня(СНТ.ДатаПриема) <> НачалоДня(ДатаПриемПолученная)) Тогда
			//так как дата приема полученная передается без времени, нам нужно заполнить время, потому что движения формируются с учето времени
			//Если дата СНТ и дата приема равно текущей дате, то мы дату приему установливаем просто текущей датой
			//Если дата СНТ = дате приема, но не равно текущей дате, то дата приему приравниваем к дате документа, с учетмо времени
			//Если даты не равны, означает, что дата приема была позднее, то дата приема заполняется с сервера, время оставляем 00:00:00
			Если НачалоДня(СНТ.Дата) = НачалоДня(ДатаПриемПолученная) И НачалоДня(СНТ.Дата) =  НачалоДня(ТекущаяДатаСеанса()) Тогда
				СНТ.ДатаПриема = ТекущаяДатаСеанса();
			ИначеЕсли НачалоДня(СНТ.Дата) = НачалоДня(ДатаПриемПолученная) Тогда
				СНТ.ДатаПриема = СНТ.Дата;
			Иначе 
				СНТ.ДатаПриема = ДатаПриемПолученная;
			КонецЕсли; 			
		КонецЕсли;
		
		СНТ.ФИОПодтвердившегоСНТ = СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "acceptanceOrRejectionName", "");
		СНТ.ПриемПроизвел = СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "acceptanceOrRejectionProducer", "");
		СНТ.ЭЦПЮрЛицаПрием = СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "companySignature", "");
		СНТ.ЭЦПУполномоченногоПодтверждатьСНТ = СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "operatorSignature", "");
		СНТ.ДатаДоверенностиПриемка = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "powerOfAttorneyDate", ""));
		СНТ.НомерДоверенностиПриемка = СНТСервер.ПолучитьСвойство(acceptanceGoodsInfo, "powerOfAttorneyNumber", "");
		
	КонецЕсли;
		
	#КонецОбласти
	
	// Раздел N. Отметки ОГД
	#Область ОтметкиОГД

	ogdMarksInfo = СНТСервер.ПолучитьСвойство(SntInfo, "ogdMarksInfo", Неопределено);

	// automotiveCheckpointId (87) // ogdEmployeeFullName (88)
	Если ogdMarksInfo <> Неопределено Тогда
		СНТ.ФИОСотрудникаОГД = СНТСервер.ПолучитьСвойство(ogdMarksInfo, "ogdEmployeeFullName", ""); // Ф.И.О. сотрудника ОГД /сотрудника уполномоченного органа (организации) (N 89)
	КонецЕсли;
	
	#КонецОбласти

	// Раздел O. Справочные сведения
	#Область СправочныеСведения
	
	directoryInfo = СНТСервер.ПолучитьСвойство(Snt, "directoryInfo", Неопределено);
	
	Если directoryInfo <> Неопределено Тогда
		СНТ.КодОГДПоставщика = СНТСервер.ПолучитьСвойство(directoryInfo, "sellerKogd", 0);
		СНТ.КодОГДПолучателя = СНТСервер.ПолучитьСвойство(directoryInfo, "customerKogd", 0);
	КонецЕсли;
	
	#КонецОбласти	
	
	// Прочие сведения.
	#Область ПрочиеСведения
	
	СНТ.Статус = СНТКлиентСервер.СтатусСНТ_ИБ(СНТСервер.ПолучитьСвойство(SntInfo, "status", ""));
	Если СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.ПустаяСсылка") Тогда
		СНТ.Направление = ОпределитьНаправлениеСНТ(СНТ, СтруктурнаяЕдиница);
	КонецЕсли;
	СНТ.Идентификатор = SntInfo.sntId;
	
	Если СНТ.Статус = Перечисления.СтатусыСНТ.Отозван И СНТ.ДатаОтзыва = Дата(1,1,1) Тогда
		СНТ.ДатаОтзыва = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(SntInfo, "lastUpdateDate", Дата(1, 1, 1)));
	КонецЕсли;
	
	#КонецОбласти
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);
	СНТ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	
	Если НаправлениеСНТ = Перечисления.НаправленияСНТ.Входящий Тогда
		
		Если ЗначениеЗаполнено(СНТ.Организация) И НЕ ЗначениеЗаполнено(СНТ.СкладДоставкиИдентификатор) Тогда
			СкладНераспределенныхТоваров = ВССервер.ПолучитьСкладНераспределенныхТоваровОрганизации(СНТ.Организация);
			СНТ.СкладПолучатель = СкладНераспределенныхТоваров;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСуществующиеСНТПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
	
	// Создать пустую таблицу параметров поиска ЭСФ.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовСНТ = СНТСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.СНТ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеСНТ = ПараметрыПоискаДокументовСНТ.Добавить();
		ОписаниеСНТ.Идентификатор = Идентификатор;
		ОписаниеСНТ.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = СНТСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыСНТ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовСНТ, Метаданные.Документы.СНТ, ИдентификационныйНомер);
	
	СуществующиеСНТ = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.СНТ.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеСНТ.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы ЭСФ, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыСНТ Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеСНТ.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеСНТ.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеСНТ;
	
КонецФункции

Функция НайтиСсылкиПоЗначениямРеквизитов(Знач ЗначенияРеквизитов, Знач ОбъектМетаданных, Знач ИдентификационныйНомер = Неопределено) Экспорт
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	ИмяВидаОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1); // "Документ", "Справочник" и т.д.
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	// Сформировать массив имен реквизитов.
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Колонка Из ЗначенияРеквизитов.Колонки Цикл
		МассивИменРеквизитов.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	// Подготовить строку запроса %ИменаРеквизитов%.
	ИменаРеквизитов = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		ИменаРеквизитов = ИменаРеквизитов + "ЗначенияРеквизитов." + ИмяРеквизита + ", ";	
	КонецЦикла;
	Если Прав(ИменаРеквизитов, 2) = ", " Тогда
		ИменаРеквизитов = Сред(ИменаРеквизитов, 1, СтрДлина(ИменаРеквизитов) - 2);	
	КонецЕсли;
	
	// Подготовить строку запроса %УсловияСоединения%.
	УсловияСоединения = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		
		Если ИмяРеквизита = "Дата" Тогда
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = НАЧАЛОПЕРИОДА(%ИмяОбъекта%.%ИмяРеквизита%, День))";
		Иначе
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		КонецЕсли;	
		
		Условие = СтрЗаменить(Условие, "%ИмяОбъекта%", ИмяОбъекта);
		Условие = СтрЗаменить(Условие, "%ИмяРеквизита%", ИмяРеквизита);
		УсловияСоединения = УсловияСоединения + Условие + " И ";	
	КонецЦикла;	
	Если Прав(УсловияСоединения, 3) = " И " Тогда
		УсловияСоединения = Сред(УсловияСоединения, 1, СтрДлина(УсловияСоединения) - 3);	
	КонецЕсли;
	
	// Сформировать текст запроса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%
	|ПОМЕСТИТЬ ЗначенияРеквизитов
	|ИЗ
	|	&ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%,
	|	ЕСТЬNULL(%ИмяОбъекта%.Ссылка, ЗНАЧЕНИЕ(%ИмяВидаОбъекта%.%ИмяОбъекта%.ПустаяСсылка)) КАК НайденнаяСсылка
	|ИЗ
	|	ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВидаОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|		ПО (%УсловияСоединения%)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИменаРеквизитов%",   ИменаРеквизитов);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияСоединения%", УсловияСоединения);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%",        ИмяОбъекта);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВидаОбъекта%",    ИмяВидаОбъекта);	
	Запрос.УстановитьПараметр("ЗначенияРеквизитов", ЗначенияРеквизитов);
	
	РезультатПоиска = Запрос.Выполнить().Выгрузить();
	
	//////////////////////////////////////////////////////////////////////////////
	// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.
	// Работает только для документов ЭСФ, для остальных объектов переменная ОтборПоСтруктурнойЕдинице должна быть Неопределено.
	
	Если ИдентификационныйНомер <> Неопределено И ИмяОбъекта <> "СопоставлениеСНТиФНО" Тогда
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СНТ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	СНТ.Направление = &Исходящий
		|	И СНТ.Ссылка В(&МассивСНТ)
		|	И (СНТ.ПоставщикИдентификатор = &ИдентификационныйНомер
		|			ИЛИ СНТ.ПоставщикБИНСтруктурногоПодразделения = &ИдентификационныйНомер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СНТ.Ссылка
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	(СНТ.Направление = &Входящий
		|			ИЛИ (СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
		|				ИЛИ СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Перемещение)
		|					И СНТ.Направление = &Исходящий
		|				ИЛИ СНТ.ПоставщикРозничнаяРеализация
		|					И СНТ.Направление = &Исходящий))
		|	И СНТ.Ссылка В(&МассивСНТ)
		|	И (СНТ.ПолучательИдентификатор = &ИдентификационныйНомер
		|			ИЛИ СНТ.ПолучательБИНСтруктурногоПодразделения = &ИдентификационныйНомер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СНТ.Ссылка
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|	И СНТ.Направление = &Исходящий
		|	И СНТ.Ссылка В(&МассивСНТ)
		|	И (СНТ.ПолучательИдентификатор = &ИдентификационныйНомер
		|			ИЛИ СНТ.ПолучательБИНСтруктурногоПодразделения = &ИдентификационныйНомер)";
		
		Запрос.УстановитьПараметр("МассивСНТ", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		Запрос.УстановитьПараметр("Исходящий", Перечисления.НаправленияСНТ.Исходящий);
		Запрос.УстановитьПараметр("Входящий", Перечисления.НаправленияСНТ.Входящий);
		Запрос.УстановитьПараметр("ИдентификационныйНомер", ИдентификационныйНомер);
		
		ТаблицаСНТПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
		МассивСНТПринадлежащихСтруктурнойЕдинице = ТаблицаСНТПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
		
		// Удалить из результатов поиска документы СНТ, которые не принадлежат указанной структурной единице.
		Для Каждого СтрокаРезультата Из РезультатПоиска Цикл
			Если МассивСНТПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда
				
				// Если Истина, значит СНТ не принадлежит указанной структурной единице,
				// поэтому ссылку на данный СНТ нужно очистить.
				СтрокаРезультата.НайденнаяСсылка = Документы.СНТ.ПустаяСсылка();
				
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИдентификационныйНомер <> Неопределено И ИмяОбъекта = "СопоставлениеСНТиФНО" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СопоставлениеСНТиФНО.Ссылка
		|ИЗ
		|	Документ.СопоставлениеСНТиФНО КАК СопоставлениеСНТиФНО
		|ГДЕ
		|	СопоставлениеСНТиФНО.Ссылка В(&МассивСопСНТсФНО)
		|	И (СопоставлениеСНТиФНО.ИдентификационныйНомер = &ИдентификационныйНомер)";
		
		Запрос.УстановитьПараметр("МассивСопСНТсФНО", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		Запрос.УстановитьПараметр("ИдентификационныйНомер", ИдентификационныйНомер);
		
		ТаблицаСопСНТсФНОПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
		МассивСопСНТсФНОПринадлежащихСтруктурнойЕдинице = ТаблицаСопСНТсФНОПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
		
		// Удалить из результатов поиска документы Сопоставление СНТ с ФНО, которые не принадлежат указанной структурной единице.
		Для Каждого СтрокаРезультата Из РезультатПоиска Цикл
			Если МассивСопСНТсФНОПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда
				// Если Истина, значит Сопоставление СНТ с ФНО не принадлежит указанной структурной единице,
				// поэтому ссылку на данный Сопоставление СНТ с ФНО нужно очистить.
				СтрокаРезультата.НайденнаяСсылка = Документы.СопоставлениеСНТиФНО.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция НайтиSntInfoПоId(Знач sntInfoList, Знач id)
	
	НайденныйSntInfo = Неопределено;
	
	Для Каждого ТекущийSntInfo Из sntInfoList Цикл
		Если ТекущийSntInfo.sntId = id Тогда
			НайденныйSntInfo = ТекущийSntInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйSntInfo;
	
КонецФункции

Функция ЗаполнитьСтатусУведомленияПоСопоставлениюДляСНТ(НаправлениеСНТ, СНТ, ТоварСтрока) Экспорт
	
	Если НаправлениеСНТ = Перечисления.НаправленияСНТ.Входящий И ЗначениеЗаполнено(ТоварСтрока.НомерЗаявленияВРамкахТС) И СтрНайти(ТоварСтрока.НомерЗаявленияВРамкахТС, "KZ-SNT-") > 0 Тогда
		СНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ОжидаетсяСопоставлениеИмпортёра;
	Иначе
		СНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.НеТребуетсяСопоставление;
	КонецЕсли;
	
КонецФункции // ()

#КонецОбласти

#Область ОбновлениеСтатусовСНТ

Функция ОбновитьСтатусыСНТПоИдентификаторам(Знач МассивИдентификаторовСНТ, Знач НаправлениеСНТ, Знач ПрофильИСЭСФ, ИдентификаторСессии, МассивСНТДляПолученияДанныхПоСопоставлению = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторСНТ Из МассивИдентификаторовСНТ Цикл
		Если ЗначениеЗаполнено(ИдентификаторСНТ) Тогда
			idList = idList + "<id>" + ИдентификаторСНТ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросQuerySntStatusById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторСНТ Из МассивИдентификаторовСНТ Цикл
			Результат.Вставить(ИдентификаторСНТ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		sntSummaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryStatusByIdResponse.sntSummaryList, "sntSummary", Неопределено);
		
		Если sntSummaryList <> Неопределено Тогда
			
			sntSummaryList = ЭСФСервер.СписокXDTOИзОбъектXDTO(sntSummaryList);
			
			МассивИдентификаторовОшибочныхСНТ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По sntSummaryList.Количество() - 1 Цикл
				sntSummary = sntSummaryList.Получить(Индекс);
				ДанныеСтатуса = ДанныеСтатусаSnt(sntSummary);
				Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
				Если ДанныеСтатуса.Статус = Перечисления.СтатусыСНТ.Ошибочный Тогда
					МассивИдентификаторовОшибочныхСНТ.Добавить(ДанныеСтатуса.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			//Получим ошибки ошибочных ЭСФ
			Если МассивИдентификаторовОшибочныхСНТ.Количество() > 0 Тогда
				РезультатОшибочныхСНТ = ПолучитьОшибкиСНТПоИдентификаторам(МассивИдентификаторовОшибочныхСНТ, Неопределено, ПрофильИСЭСФ, ИдентификаторСессии);
				Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхСНТ);	
				
			КонецЕсли;
			
			//Массив для хранения ссылок на СНТ с типом Отозван, Отклонен
			КоллекцияСсылокСНТ = Новый Массив;
			
			// Обновить документы ЭСФ.
			ОтразитьИзмененияСтатусовСНТ(Результат, СтруктурнаяЕдиница,,КоллекцияСсылокСНТ, МассивСНТДляПолученияДанныхПоСопоставлению, НаправлениеСНТ);
			ОбновитьСтатусыЭСФПриИзмененииСНТ(КоллекцияСсылокСНТ, ИдентификаторСессии, ПрофильИСЭСФ);

		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьСтатусыСНТПоИдентификаторам'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При получении статусов СНТ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСтатусыЭСФПриИзмененииСНТ(Знач МассивСНТ, Знач ИдентификаторСессии, Знач ПрофильИСЭСФ)
		
	КоллекцияСНТДляОбновленияЭСФ = Новый Массив;
	КоллекцияИДИсходящихЭСФ = Новый Массив;
	КоллекцияИДВходящихЭСФ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СНТ.Ссылка
	|ПОМЕСТИТЬ ВТ_СНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка В(&МассивСНТ)
	|	И (СНТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Отозван)
	|			ИЛИ СНТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Отклонен))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭСФ.Идентификатор,
	|	ЭСФ.Направление КАК Направление
	|ИЗ
	|	ВТ_СНТ КАК ВТ_СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ВТ_СНТ.Ссылка = ЭСФ.СНТ
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНаправление = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
				
		ВыборкаДетальныеЗаписи = ВыборкаНаправление.Выбрать();
		КоллекцияЭСФДляОбновленияСтатусов = Новый Массив;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоллекцияЭСФДляОбновленияСтатусов.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
		КонецЦикла;
		
		Если ВыборкаНаправление.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
			КоллекцияИДИсходящихЭСФ = КоллекцияЭСФДляОбновленияСтатусов;
		ИначеЕсли ВыборкаНаправление.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
			КоллекцияИДВходящихЭСФ = КоллекцияЭСФДляОбновленияСтатусов;
		КонецЕсли;
		
	КонецЦикла;
			
		
	РезультатОбновленияВходящихЭСФ = ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам(КоллекцияИДВходящихЭСФ, Перечисления.НаправленияЭСФ.Входящий, ПрофильИСЭСФ, ИдентификаторСессии);
	РезультатОбновленияИсходящихЭСФ = ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам(КоллекцияИДИсходящихЭСФ, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
	
	
	Если РезультатОбновленияВходящихЭСФ.Количество() <> 0 Или РезультатОбновленияИсходящихЭСФ.Количество() <> 0 Тогда
		ТекстСообщения = НСтр("ru='Обновлены статусы связанных документов ЭСФ.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтразитьИзмененияСтатусовСНТ", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСтатусаSnt(Знач sntSummaryXDTO)
	
	ДанныеСтатуса = Новый Структура;
	
	ДанныеСтатуса.Вставить("Идентификатор", Формат(sntSummaryXDTO.sntId, "ЧГ="));
	
	date = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "inputDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоступленияСНТВСистему", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомерИСЭСФ", registrationNumber);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	status = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "status", "");
	ДанныеСтатуса.Вставить("Статус", СНТКлиентСервер.СтатусСНТ_ИБ(status));
	
	cancelReason = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "cancelReason", "");
	ДанныеСтатуса.Вставить("Причина", cancelReason);
	
	matchingNotification = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "matchingNotification", "");
	Если  matchingNotification = "true" Или  matchingNotification = "false" Тогда
		matchingNotification = Булево(matchingNotification);	
	Иначе
		matchingNotification = Неопределено;
	КонецЕсли;
	
	ДанныеСтатуса.Вставить("ВыполненоСопоставление", matchingNotification);

	recipientTin = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "recipientTin", "");
	ДанныеСтатуса.Вставить("БинПолучателя", recipientTin);

	senderTin = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "senderTin", "");
	ДанныеСтатуса.Вставить("БинОтправителя", senderTin);

	version = ЭСФСервер.ПолучитьСвойство(sntSummaryXDTO, "version", "");
	ДанныеСтатуса.Вставить("ВерсияСНТ", version);
	
	// На данный момент из ИС ЭСФ удален пользовательский статус (state).
	// Пользовательский статус не удален из конфигурации, т.к. есть вероятность, что его вернут в ИС ЭСФ. 
	ДанныеСтатуса.Вставить("ПользовательскийСтатус", Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка());
	
	Возврат ДанныеСтатуса;
	
КонецФункции

// Обновляет документы СНТ, на основании новых данных статусов.
//
// Параметры:
//   КоллекцияСтатусовСНТ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струткруа - См. в описании функции ДанныеСтатусаInvoice().
//   СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница.
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияСтатусовСНТ(Знач КоллекцияСтатусовСНТ, Знач СтруктурнаяЕдиница, Знач СоответствиеПодписейСНТ = Неопределено, КоллекцияСсылокСНТ = Неопределено, КоллекцияСсылокСНТДляПолученияДанныхПоСопоставлению = Неопределено, Знач НаправлениеСНТ = Неопределено)
	
	СтарыеДанныеСтатусовСНТ = НоваяВыборкаДанныеСтатусовСНТ(КоллекцияСтатусовСНТ, СтруктурнаяЕдиница, НаправлениеСНТ);
	
	КоличествоОбновленных = 0;
	
	Пока СтарыеДанныеСтатусовСНТ.Следующий() Цикл
		
		НовыеДанныеСтатусовСНТ = КоллекцияСтатусовСНТ.Получить(СтарыеДанныеСтатусовСНТ.Идентификатор);  
		
		Если НовыеДанныеСтатусовСНТ <> Неопределено Тогда
			
			ОбновитьСНТ = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовСНТ.Свойство("Ошибки") И НовыеДанныеСтатусовСНТ.Ошибки.Количество() > 0;
			
			Если ЕстьОшибки Тогда
				ОбновитьСНТ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСНТ.РегистрационныйНомерИСЭСФ <> НовыеДанныеСтатусовСНТ.РегистрационныйНомерИСЭСФ Тогда
				ОбновитьСНТ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСНТ.ДатаРегистрацииИСЭСФ <> НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему Тогда
				ОбновитьСНТ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСНТ.Статус <> НовыеДанныеСтатусовСНТ.Статус Тогда
				ОбновитьСНТ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСНТ.Направление = Перечисления.НаправленияСНТ.Входящий
				И ((СтарыеДанныеСтатусовСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ОжидаетсяСопоставлениеИмпортёра И НовыеДанныеСтатусовСНТ.ВыполненоСопоставление) ИЛИ
				((СтарыеДанныеСтатусовСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром) И НЕ НовыеДанныеСтатусовСНТ.ВыполненоСопоставление)) Тогда
				ОбновитьСНТ = Истина;
			КонецЕсли;
			
			Если ОбновитьСНТ Тогда
				
				КоличествоОбновленных = КоличествоОбновленных + 1;
				
				ОбъектСНТ = СтарыеДанныеСтатусовСНТ.СНТ.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему <> Дата(1, 1, 1)) И НачалоДня(НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему) <> НачалоДня(ОбъектСНТ.Дата) Тогда
					ОбъектСНТ.Дата = НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему;
					ОбъектСНТ.УстановитьВремя();
				КонецЕсли;
				
				Если НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему <> ОбъектСНТ.ДатаРегистрацииИСЭСФ Тогда
					ОбъектСНТ.ДатаРегистрацииИСЭСФ = НовыеДанныеСтатусовСНТ.ДатаПоступленияСНТВСистему;
				КонецЕсли;
				
				ОбъектСНТ.РегистрационныйНомерИСЭСФ = НовыеДанныеСтатусовСНТ.РегистрационныйНомерИСЭСФ;
				ОбъектСНТ.Статус = НовыеДанныеСтатусовСНТ.Статус;
				
				Если СоответствиеПодписейСНТ <> Неопределено 
					И (НовыеДанныеСтатусовСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден
					ИЛИ НовыеДанныеСтатусовСНТ.Статус = Перечисления.СтатусыСНТ.Отклонен) Тогда
					ОбъектСНТ.ЭЦПЮрЛицаПрием = СоответствиеПодписейСНТ[СтарыеДанныеСтатусовСНТ.Идентификатор].Подпись;
					ОбъектСНТ.ДатаПриема = НовыеДанныеСтатусовСНТ.ДатаПоследнегоОбновления;
				КонецЕсли;
				
				Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван
					И (ОбъектСНТ.ДатаОтзыва = Дата(1,1,1) ИЛИ (НачалоДня(ОбъектСНТ.ДатаОтзыва) <> НачалоДня(НовыеДанныеСтатусовСНТ.ДатаПоследнегоОбновления))) Тогда
					ОбъектСНТ.ДатаОтзыва = НовыеДанныеСтатусовСНТ.ДатаПоследнегоОбновления;
				КонецЕсли;
				
				// Отразить содержимое узла cancelReason.
				Если ЕстьОшибки Тогда
					ОбъектСНТ.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовСНТ.Ошибки Цикл
						ОшибкиСтрока = ОбъектСНТ.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
					
				ИначеЕсли НЕ ПустаяСтрока(НовыеДанныеСтатусовСНТ.Причина) Тогда
					
					Если ПустаяСтрока(НовыеДанныеСтатусовСНТ.РегистрационныйНомерИСЭСФ) Тогда
						ОшибкиСтрока = ОбъектСНТ.Ошибки.Добавить();
						ОшибкиСтрока.Текст = НовыеДанныеСтатусовСНТ.Причина;
						ОшибкиСтрока.Поле = "";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НовыеДанныеСтатусовСНТ.Причина) Тогда
					Если НовыеДанныеСтатусовСНТ.Статус = Перечисления.СтатусыСНТ.Отозван
						ИЛИ НовыеДанныеСтатусовСНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован Тогда
						ОбъектСНТ.Причина = ПричинаИБ(НовыеДанныеСтатусовСНТ.Причина);
					КонецЕсли;
				КонецЕсли;
				
				Если СтарыеДанныеСтатусовСНТ.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
					Если СтарыеДанныеСтатусовСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ОжидаетсяСопоставлениеИмпортёра И НовыеДанныеСтатусовСНТ.ВыполненоСопоставление Тогда
						ОбъектСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром;
						Если ТипЗнч(КоллекцияСсылокСНТДляПолученияДанныхПоСопоставлению) = Тип("Массив") Тогда
							КоллекцияСсылокСНТДляПолученияДанныхПоСопоставлению.Добавить(ОбъектСНТ.Ссылка);
						КонецЕсли;			
					ИначеЕсли СтарыеДанныеСтатусовСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром И НЕ НовыеДанныеСтатусовСНТ.ВыполненоСопоставление Тогда
						ОбъектСНТ.СтатусСопоставленияДляСНТ = Перечисления.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром;
						Если ТипЗнч(КоллекцияСсылокСНТДляПолученияДанныхПоСопоставлению) = Тип("Массив") Тогда
							КоллекцияСсылокСНТДляПолученияДанныхПоСопоставлению.Добавить(ОбъектСНТ.Ссылка);
						КонецЕсли;			
					КонецЕсли;
				КонецЕсли;
				
				ОбъектСНТ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектСНТ.Записать();
				
				Если (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Отозван И ОбъектСНТ.Проведен)
					//СНТ по импорту (вид операции = ввоз) автоматически не проводим, т.к. после подтверждения требуется получение ИД товаров.
					//ИЛИ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден И ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации <> Перечисления.ВидыОперацийСНТ.Ввоз) Тогда
					ИЛИ (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден И ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И НЕ(ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз ИЛИ ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)) Тогда
					ОбъектСНТ.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				Если КоллекцияСсылокСНТ <> Неопределено Тогда
					КоллекцияСсылокСНТ.Добавить(ОбъектСНТ.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ (ЗначениеЗаполнено(НаправлениеСНТ) И НаправлениеСНТ = Перечисления.НаправленияСНТ.Входящий) Тогда
		Если КоличествоОбновленных > 0 Тогда
			ТекстСообщения = НСтр("ru='Обновлены статусы отправленных документов.'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтразитьИзмененияСтатусовСНТ", "Информация", , , ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru='Статусы документов СНТ не изменены.'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтразитьИзмененияСтатусовСНТ", "Информация", , , ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяВыборкаДанныеСтатусовСНТ(Знач КоллекцияСтатусовСНТ, Знач СтруктурнаяЕдиница, Знач НаправлениеСНТ = Неопределено)
	
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.СНТ.Реквизиты.Идентификатор.Тип);	
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовСНТ Цикл
		СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
		СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТ.Идентификатор КАК Идентификатор,
	|	СНТ.Ссылка,
	|	СНТ.РегистрационныйНомерИСЭСФ,
	|	СНТ.Статус,
	|	СНТ.ДатаРегистрацииИСЭСФ,
	|	СНТ.Организация,
	|	СНТ.СтатусСопоставленияДляСНТ,
	|	СНТ.Направление
	|ПОМЕСТИТЬ СНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|	И СНТ.Направление = &Направление
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	СНТ.Ссылка КАК СНТ,
	|	СНТ.РегистрационныйНомерИСЭСФ КАК РегистрационныйНомерИСЭСФ,
	|	СНТ.Статус КАК Статус,
	|	СНТ.ДатаРегистрацииИСЭСФ,
	|	СНТ.Организация КАК Организация,
	|	СНТ.СтатусСопоставленияДляСНТ,
	|	СНТ.Направление
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СНТ КАК СНТ
	|		ПО Идентификаторы.Идентификатор = СНТ.Идентификатор";
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);
	
	Если ЗначениеЗаполнено(НаправлениеСНТ) Тогда
		Запрос.УстановитьПараметр("Направление", НаправлениеСНТ);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СНТ.Направление = &Направление", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// См. СНТСервер.СоздатьЗапросНаИзменениеСтатусов()          
Функция СоздатьЗапросНаИзменениеСтатусовСНТ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеКлючаЭЦП, Знач ТипПодписиЭСФ) Экспорт
	
	ДанныеСертификата = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СвойстваСертификата(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
	СоответствиеПодписейСНТ = Новый Соответствие();
	// Сформировать текст запроса.
	ТекстЗапроса = ПолучитьМакет("ЗапросSntChangeStatus").ПолучитьТекст();
	sntActionInfoList = "";
	sntActionInfo = "<sntActionInfo><sntActionBody><![CDATA[[SntAction]]]></sntActionBody><sntId>[sntID]</sntId><sntVersion>SntV1</sntVersion><signature>[Signature]</signature><signatureType>[signatureType]</signatureType><certificate>[x509Certificate]</certificate></sntActionInfo>";	
	sntAction = "<v1:sntAction xmlns:asnt=""abstractSnt.snt"" xmlns:v1=""v1.snt""><sntId>[sntID]</sntId><actionType>[actionType]</actionType><originalDocumentSignature>[originalDocumentSignature]</originalDocumentSignature><cause>[cause]</cause>[ДанныеОПодтвердителе]</v1:sntAction>";
	acceptanceGoodsBody = "<acceptanceGoodsBody><v1:sntAcceptanceGoods xmlns:asnt=""abstractSnt.snt"" xmlns:v1=""v1.snt""><acceptanceOrRejectionProducer>[Подтвердитель]</acceptanceOrRejectionProducer><acceptanceOrRejectionDate>[ДатаПодтверждения]</acceptanceOrRejectionDate><acceptanceOrRejectionName>[ИмяПодтвердителя]</acceptanceOrRejectionName></v1:sntAcceptanceGoods></acceptanceGoodsBody>";
	МассивЧастейЗапроса = Новый Массив;	
	
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл
		
		sntActionInfoТекущегоДокумента = sntActionInfo;
		sntActionТекущегоДокумента = sntAction;
		acceptanceGoodsBodyТекущегоДокумента = acceptanceGoodsBody;
		
		// Заполнить параметр [Действие].
		Если Действие = СНТКлиентСервер.ДействиеПодтверждение() Тогда
			ТекстДействие = "CONFIRM";
			sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "<cause>[cause]</cause>", "");
		ИначеЕсли Действие = СНТКлиентСервер.ДействиеОтклонение() Тогда
			ТекстДействие = "DECLINE";
		ИначеЕсли Действие = СНТКлиентСервер.ДействиеОтзыв() Тогда
			ТекстДействие = "REVOKE";
		Иначе
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьЗапросНаИзменениеСтатусовСНТ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		КонецЕсли;
		
		//Заполнить данные по подтвердителю если это подтверждение
		//убрать параметр [ДанныеОПодтвердителе] если это не подтверждение
		Если Действие = СНТКлиентСервер.ДействиеПодтверждение() Тогда
			acceptanceGoodsBodyТекущегоДокумента = СтрЗаменить(acceptanceGoodsBody, "[Подтвердитель]", ДанныеСертификата.ИмяФамилияСубъекта + ДанныеСертификата.ОтчествоСубъекта);
			acceptanceGoodsBodyТекущегоДокумента = СтрЗаменить(acceptanceGoodsBodyТекущегоДокумента, "[ДатаПодтверждения]", ТекущаяДата());
			acceptanceGoodsBodyТекущегоДокумента = СтрЗаменить(acceptanceGoodsBodyТекущегоДокумента, "[ИмяПодтвердителя]", ДанныеСертификата.ИмяФамилияСубъекта + ДанныеСертификата.ОтчествоСубъекта);
			
			sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[ДанныеОПодтвердителе]", acceptanceGoodsBodyТекущегоДокумента);
		Иначе
			sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[ДанныеОПодтвердителе]", "");
		КонецЕсли;
		
		ДанныеСНТ = ЭлементКоллеции.Значение;
		sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[sntID]", ДанныеСНТ.ИД);
		sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[cause]", ДанныеСНТ.Причина);
		sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[actionType]", ТекстДействие);
		sntActionТекущегоДокумента = СтрЗаменить(sntActionТекущегоДокумента, "[originalDocumentSignature]", ДанныеСНТ.ЭЦП);
		
		sntActionInfoТекущегоДокумента = СтрЗаменить(sntActionInfoТекущегоДокумента, "[SntAction]", sntActionТекущегоДокумента);
		sntActionInfoТекущегоДокумента = СтрЗаменить(sntActionInfoТекущегоДокумента, "[x509Certificate]", ДанныеКлючаЭЦП.ОткрытыйСертификатBase64);
		sntActionInfoТекущегоДокумента = СтрЗаменить(sntActionInfoТекущегоДокумента, "[sntID]", ДанныеСНТ.ИД);
		sntActionInfoТекущегоДокумента = СтрЗАменить(sntActionInfoТекущегоДокумента, "[signatureType]", ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭСФ));
		
		
		МассивЧастейЗапроса.Добавить(Новый Структура("ИД, ЧастьЗапроса, СтрокаДляПодписи", ДанныеСНТ.ИД, sntActionInfoТекущегоДокумента, sntActionТекущегоДокумента));
	
	КонецЦикла;
		
	СтрокаДляПодписи = "";
	
	Результат = Новый Структура("ТекстЗапроса, МассивЧастейЗапроса", ТекстЗапроса, МассивЧастейЗапроса);
	
	Возврат Результат;
	
КонецФункции

// См. СНТСервер.ВыполнитьЗапросНаИзменениеСтатусов() 
Функция ВыполнитьЗапросНаИзменениеСтатусовСНТ(Знач Действие, Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено, СоответствиеПодписейСНТ = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ИменаЭлементовРезультата = "ТекущийСтатус, СтатусИзменился, Ошибка, ПодписьДействия";
		ИменаЭлементовОшибки = "Есть, Код, Представление, Расшифровка, Текст, ПолеОшибки";
		
		// Выполнить начальное заполнение результата по ЗапросXML.
		КоллекцияРезультатов = Новый Соответствие;
		ЗапросXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ЗапросXML, ФабрикаXDTO);
		ИмяУзла = ЗапросXDTO.Body.Свойства()[0].Имя;
		sntActionInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ЗапросXDTO.Body[ИмяУзла].sntActionInfoList.sntActionInfo);
		Для Индекс = 0 По sntActionInfoList.Количество() - 1 Цикл
			sntActionInfo = sntActionInfoList.Получить(Индекс);
			Идентификатор = sntActionInfo.sntId;
			Результат = Новый Структура(ИменаЭлементовРезультата);
			Результат.СтатусИзменился = Ложь;
			
			Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
			Результат.Ошибка.Есть = Ложь;
			Результат.Ошибка.Код = "";
			Результат.Ошибка.Представление = "";
			Результат.Ошибка.Расшифровка = "";
			Результат.Ошибка.Текст = "";
			Результат.Ошибка.ПолеОшибки = "";
			
			КоллекцияРезультатов.Вставить(Идентификатор, Результат);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИмяУзла = ОтветXDTO.Body.Свойства()[0].Имя;
		changeStatusResultList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body[ИмяУзла].resultList, "changeStatusResult", Неопределено);
		
		// Заполнить КоллекцияРезультатов, обновить документы СНТ.
		Если changeStatusResultList <> Неопределено Тогда
			
			changeStatusResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(changeStatusResultList);
			
			// Заполнить КоллекцияРезультатов.
			Для ИндексChangeStatusResultList = 0 По changeStatusResultList.Количество() - 1 Цикл
				
				Результат = Новый Структура(ИменаЭлементовРезультата);
				Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
				
				changeStatusResult = changeStatusResultList.Получить(ИндексChangeStatusResultList);
				Результат.ТекущийСтатус = ДанныеСтатусаSnt(changeStatusResult.sntSummary);
				Результат.СтатусИзменился = ?(ВРег(changeStatusResult.isChanged) = "TRUE", Истина, Ложь);
				
				// Заполнить сведения об ошибке, если она произошла при изменении статуса.
				Результат.Ошибка.Есть = Ложь;
				errors = ЭСФСервер.ПолучитьСвойство(changeStatusResult, "errors", Неопределено);
				Если errors <> Неопределено Тогда
					Если ТипЗнч(errors.error) = Тип("СписокXDTO") Тогда
						
						Для ИндексОшибки = 0 По errors.error.Количество() - 1 Цикл
							error = errors.error.Получить(ИндексОшибки);
							КодОшибки = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
							ТекстОшибки = ЭСФСервер.ПолучитьСвойство(error, "text", "");
							ПолеОшибки = ЭСФСервер.ПолучитьСвойство(error, "property", "");
							Если КодОшибки <> "" Тогда
								Результат.Ошибка.Есть = Истина;
								Результат.Ошибка.Код = КодОшибки;
								ДанныеОшибки = ДанныеОшибкиИзмененияСтатусаСНТ(КодОшибки, Действие);
								Результат.Ошибка.Представление = ДанныеОшибки.Представление;
								Результат.Ошибка.Расшифровка = ДанныеОшибки.Расшифровка;
								Результат.Ошибка.Текст = ТекстОшибки;
								Результат.Ошибка.ПолеОшибки = ПолеОшибки;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(errors.error) = Тип("ОбъектXDTO") Тогда
						
						КодОшибки = ЭСФСервер.ПолучитьСвойство(errors.error, "errorCode", "");
						ТекстОшибки = ЭСФСервер.ПолучитьСвойство(errors.error, "text", "");
						Если КодОшибки <> "" Тогда
							Результат.Ошибка.Есть = Истина;
							Результат.Ошибка.Код = КодОшибки;
							ДанныеОшибки = ДанныеОшибкиИзмененияСтатусаСНТ(КодОшибки, Действие);
							Результат.Ошибка.Представление = ДанныеОшибки.Представление;
							Результат.Ошибка.Расшифровка = ДанныеОшибки.Расшифровка;
							Результат.Ошибка.Текст = ТекстОшибки;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				КоллекцияРезультатов.Вставить(Результат.ТекущийСтатус.Идентификатор, Результат);
				
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			КоллекцияСтатусовСНТ = Новый Соответствие;
			Для Каждого ЭлементКоллекции ИЗ КоллекцияРезультатов Цикл
				КоллекцияСтатусовСНТ.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ТекущийСтатус); 
			КонецЦикла;
			
			//Массив для хранения ссылок на СНТ с типом Отозван, Отклонен.
			КоллекцияСсылокСНТ = Новый Массив;
			
			ОтразитьИзмененияСтатусовСНТ(КоллекцияСтатусовСНТ, СтруктурнаяЕдиница, СоответствиеПодписейСНТ, КоллекцияСсылокСНТ);  //, СоответствиеПодписейСНТ, Действие
			ОбновитьСтатусыЭСФПриИзмененииСНТ(КоллекцияСсылокСНТ, ИдентификаторСессии, ПрофильИСЭСФ);
			
			Если КоллекцияСсылокСНТ.Количество() <> 0 Тогда
				//Заполним массив СНТ и отправим запрос на получение идентификаторов товаров
				МассивСНТДляПолученияИдентификаторов = Новый Массив;
				Для Каждого СНТ Из КоллекцияСсылокСНТ Цикл
					Если СНТ.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение") ИЛИ
						СНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
						Продолжить;
					КонецЕсли;
					МассивСНТДляПолученияИдентификаторов.Добавить(СНТ);
				КонецЦикла;
				ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
				ОбработкаОбменЭСФ.ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивСНТДляПолученияИдентификаторов, ПрофильИСЭСФ, , Истина);
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаИзменениеСтатусов'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При изменении статуса возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

Функция ДанныеОшибкиИзмененияСтатусаСНТ(Знач КодОшибки, Знач Действие)
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Код", КодОшибки);
	ДанныеОшибки.Вставить("Представление", "");
	ДанныеОшибки.Вставить("Расшифровка", "");
	ДанныеОшибки.Вставить("Текст", "");
	
	// Заполнить представление, расшифровку ошибки.
	Если КодОшибки = "WRONG_STATUS" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный статус СНТ'");
		ДанныеОшибки.Расшифровка = НСтр("ru = 'СНТ имеет статус, который не позволяет выполнить выбранное действие.'");
		
	ИначеЕсли КодОшибки = "WRONG_TYPE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный тип СНТ'");
		
	ИначеЕсли КодОшибки = "WRONG_DATE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Истек срок возможности отклонения СНТ'");
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Истек срок возможности отклонения СНТ.'");
		
	ИначеЕсли КодОшибки = "SIGNATURE_VERIFICATION_FAILED" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Ошибка проверки подписи при изменении статуса'");
		
	ИначеЕсли КодОшибки = "SNT_CANCEL_PERIOD_EXPIRED" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Сроки отзыва просрочены.'");
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Отзыву подлежит СНТ в предусмотренные правилами сроки.'");
		
	Иначе
		
		ДанныеОшибки.Представление = КодОшибки;
		
	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
КонецФункции

Функция ПолучитьОшибкиСНТПоИдентификаторам(Знач МассивИдентификаторовСНТ, Знач НаправлениеСНТ, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторСНТ Из МассивИдентификаторовСНТ Цикл
		Если ЗначениеЗаполнено(ИдентификаторСНТ) Тогда
			idList = idList + "<id>" + ИдентификаторСНТ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросSntErrorByID").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторСНТ Из МассивИдентификаторовСНТ Цикл
			Результат.Вставить(ИдентификаторСНТ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		sntErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryErrorByIdResponse.sntErrorList, "sntError", Неопределено);
		
		Если sntErrorList <> Неопределено Тогда
			
			sntErrorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(sntErrorList);
			
			МассивИдентификаторовОшибочныхСНТ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По sntErrorList.Количество() - 1 Цикл
				sntError = sntErrorList.Получить(Индекс);
				ДанныеОшибки = ДанныеОшибкиСНТ(sntError);
				Результат.Вставить(ДанныеОшибки.Идентификатор, ДанныеОшибки);
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			Если ОбновитьОшибкиВДокументах Тогда
				ОтразитьИзмененияОшибокСНТ(Результат, СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьСтатусыСНТПоИдентификаторам'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При получении статусов СНТ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиСНТ(Знач sntErrorListXDTO, ТаблицаЛокализацииОшибок = Неопределено)
	
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле",  Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	ДанныеОшибки.Вставить("Идентификатор", Формат(ЭСФСервер.ПолучитьСвойство(sntErrorListXDTO, "sntId", ""), "ЧГ="));
	
	
	errors = ЭСФСервер.ПолучитьСвойство(sntErrorListXDTO.errors, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
			ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
			// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
			// с сервера на клиент приводи к ошибке мутабельного значения.
			Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
				ОшибкаПоле = "";
			КонецЕсли;
			ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
			Если ПустаяСтрока(ОшибкаТекст) Тогда
				Если ТаблицаЛокализацииОшибок = Неопределено Тогда
					ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
				КонецЕсли;
				ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
				ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
				ОшибкаТекст = ОшибкаТекст.ТекстИБ;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаОшибок.Добавить();
			СтрокаТаблицы.Поле = ОшибкаПоле;
			СтрокаТаблицы.Текст = ОшибкаТекст;
			
		КонецЦикла;
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);
		
	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
КонецФункции

Процедура ОтразитьИзмененияОшибокСНТ(Знач КоллекцияСтатусовСНТ, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовСНТ = НоваяВыборкаДанныеСтатусовСНТ(КоллекцияСтатусовСНТ, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовСНТ.Следующий() Цикл
		
		НовыеДанныеОшибокСНТ = КоллекцияСтатусовСНТ.Получить(СтарыеДанныеСтатусовСНТ.Идентификатор);  
		
		Если НовыеДанныеОшибокСНТ <> Неопределено И НовыеДанныеОшибокСНТ.Ошибки <> Неопределено Тогда
			
			ОбъектСНТ = СтарыеДанныеСтатусовСНТ.СНТ.ПолучитьОбъект();
			ОбъектСНТ.Ошибки.Очистить();
			Ошибки = НовыеДанныеОшибокСНТ.Ошибки;
			Для Каждого Строка из Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = ОбъектСНТ.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
				
			КонецЦикла;
			
			ОбъектСНТ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
			ОбъектСНТ.Записать();
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъединитьРезультатыПолученияСтатусовИОшибок(Соответствие1, Соответствие2)
	
	Для Каждого Элемент из Соответствие2 Цикл
		ЭлементСоответствие1 = Соответствие1.Получить(Элемент.Ключ);
		Если ЭлементСоответствие1 <> Неопределено 
			И ТипЗнч(Элемент.Значение) = Тип("Структура") 
			И Элемент.Значение.Свойство("Ошибки")
			И Элемент.Значение.Ошибки.Количество() > 0 Тогда
			ЭлементСоответствие1.Вставить("Ошибки", Элемент.Значение.Ошибки);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие1;	
КонецФункции

#КонецОбласти

#Область ПечатьСНТ

Функция ПечатьСНТ(МассивСНТ, ОбъектыПечати = Неопределено) Экспорт
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СНТ.Ссылка,
	|	СНТ.МестоРеализацииНеРК
	|ПОМЕСТИТЬ ВТ_СНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТ.Ссылка,
	|	СНТ.Номер,
	|	СНТ.Дата,
	|	СНТ.Идентификатор,
	|	СНТ.РегистрационныйНомерИСЭСФ,
	|	СНТ.ДатаОтгрузкиТовара,
	|	СНТ.ЕстьЭтиловыйСпирт,
	|	СНТ.ЕстьВиноматериал,
	|	СНТ.ЕстьПивоПивныеНапитки,
	|	СНТ.ЕстьАлкоголь,
	|	СНТ.ЕстьНефтепродукты,
	|	СНТ.ЕстьБиотопливо,
	|	СНТ.ЕстьТабачныеИзделия,
	|	СНТ.ЕстьТоварыЭК,
	|	СНТ.ЕстьДругиеТоварыЦифроваяМаркировка,
	|	СНТ.РегистрационныйНомерИСМПТ,
	|	СНТ.ДатаРегистрацииИСЭСФ,
	|	СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная) КАК Исправленный,
	|	ВЫБОР
	|		КОГДА СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная)
	|			ТОГДА СНТ.РегистрационныйНомерСвязанногоСНТ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК РегистрационныйНомерСвязанногоСНТ,
	|	СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров) КАК ВозвратТоваров,
	|	ВЫБОР
	|		КОГДА СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА СНТ.РегистрационныйНомерСвязанногоСНТ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВозвратТоваровРегистрационныйНомер,
	|	СНТ.Валюта,
	|	ВЫБОР
	|		КОГДА СНТ.ВалютаКод <> ""KZT""
	|			ТОГДА СНТ.КурсВалюты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКурс,
	|	СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Перемещение) КАК ЕстьПеремещениеТовара,
	|	СНТ.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаРК) КАК ВПределахОдногоЛицаРК,
	|	СНТ.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС) КАК ВПределахОдногоЛицаЕАЭС,
	|	СНТ.ВидПеремещения = ЗНАЧЕНИЕ(Перечисление.ВидыПеремещенияСНТ.ИноеПеремещение) КАК ИноеПеремещение,
	|	СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз) КАК ЕстьВвозТовара,
	|	СНТ.ВидВвоза = ЗНАЧЕНИЕ(Перечисление.ВидыВвозаСНТ.Импорт) КАК Импорт,
	|	СНТ.ВидВвоза = ЗНАЧЕНИЕ(Перечисление.ВидыВвозаСНТ.ВвозНаПереработку) КАК ВвозНаПереработку,
	|	СНТ.ВидВвоза = ЗНАЧЕНИЕ(Перечисление.ВидыВвозаСНТ.ВременныйВвоз) КАК ВременныйВвоз,
	|	СНТ.ВидВвоза = ЗНАЧЕНИЕ(Перечисление.ВидыВвозаСНТ.ВвозВременноВывезенногоТовара) КАК ВвозВременноВывезенногоТовара,
	|	СНТ.ВидВвоза = ЗНАЧЕНИЕ(Перечисление.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ) КАК ВвозТоваровНаТерриториюСЭЗ,
	|	СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Вывоз) КАК ЕстьВывозТовара,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.Экспорт) КАК Экспорт,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.ВывозНаПереработку) КАК ВывозНаПереработку,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.ВременныйВывоз) КАК ВременныйВывоз,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.ВывозВременноВвезенногоТовара) КАК ВывозВременноВвезенногоТовара,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ) КАК ВывозТоваровСТерриторииСЭЗ,
	|	СНТ.ВидВывоза = ЗНАЧЕНИЕ(Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна) КАК ЗаправкаВоздушногоСудна,
	|	СНТ.ИдентификаторТерриторииСЭЗ КАК ИдентификаторТерриторииСЭЗ,
	|	СНТ.ПоставщикИдентификатор,
	|	СНТ.ПоставщикНерезидент,
	|	СНТ.ПоставщикНаименование,
	|	СНТ.ПоставщикБИНСтруктурногоПодразделения,
	|	СНТ.ПоставщикБИНРеорганизованногоЛица,
	|	СНТ.ПоставщикКодСтраны,
	|	СНТ.ПоставщикКодСтраныОтправки,
	|	СНТ.АдресОтправки,
	|	СНТ.СкладОтправкиИдентификатор,
	|	СНТ.ПолучательИдентификатор,
	|	СНТ.ПолучательНерезидент,
	|	СНТ.ПолучательНаименование,
	|	СНТ.ПолучательБИНСтруктурногоПодразделения,
	|	СНТ.ПолучательБИНРеорганизованногоЛица,
	|	СНТ.ПолучательКодСтраны,
	|	СНТ.ПолучательКодСтраныДоставки,
	|	СНТ.АдресДоставки,
	|	СНТ.СкладДоставкиИдентификатор,
	|	СНТ.ГрузоотправительИдентификатор,
	|	СНТ.ГрузоотправительНаименование,
	|	СНТ.ГрузоотправительНерезидент,
	|	СНТ.ГрузоотправительКодСтраныОтправки,
	|	СНТ.ГрузополучательИдентификатор,
	|	СНТ.ГрузополучательНаименование,
	|	СНТ.ГрузополучательНерезидент,
	|	СНТ.ГрузополучательКодСтраныОтправки,
	|	СНТ.Перевозчик,
	|	СНТ.ПеревозчикИдентификатор,
	|	СНТ.ПеревозчикНерезидент,
	|	СНТ.АвтомобильныйТранспорт,
	|	СНТ.НомерТС,
	|	СНТ.ГосномерПрицепа,
	|	СНТ.ЖелезнодорожныйТранспорт,
	|	СНТ.НомерВагона,
	|	СНТ.ВоздушныйТранспорт,
	|	СНТ.НомерБорта,
	|	СНТ.МорскойТранспорт,
	|	СНТ.НомерСудна,
	|	СНТ.Трубопровод,
	|	СНТ.Мультимодальный,
	|	СНТ.БезДоговора,
	|	ВЫБОР
	|		КОГДА СНТ.ДоговорПоставки <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьДоговор,
	|	СНТ.ДоговорПоставкиНомер,
	|	СНТ.ДоговорПоставкиДата,
	|	СНТ.ДоговорПоставкиУсловияОплаты,
	|	СНТ.ДоговорПоставкиУсловияПоставки,
	|	СНТ.ДоговорВРамкахУСДПоставщикНомер,
	|	СНТ.ДоговорВРамкахУСДПоставщикДата,
	|	СНТ.ДоговорВРамкахУСДПолучательНомер,
	|	СНТ.ДоговорВРамкахУСДПолучательДата,
	|	СНТ.ОтпускПроизвел,
	|	СНТ.ЭЦПЮрЛицаОтпуск,
	|	СНТ.ЭЦПУполномоченногоПодписыватьСНТ,
	|	СНТ.ФИОВыписывающегоСНТ,
	|	СНТ.НомерДоверенностиОтпуск,
	|	СНТ.ДатаДоверенностиОтпуск,
	|	СНТ.ПриемПроизвел,
	|	СНТ.ДатаПриема,
	|	СНТ.ЭЦПЮрЛицаПрием,
	|	СНТ.ЭЦПУполномоченногоПодтверждатьСНТ,
	|	СНТ.ФИОПодтвердившегоСНТ,
	|	СНТ.НомерДоверенностиПриемка,
	|	СНТ.ДатаДоверенностиПриемка,
	|	СНТ.ПунктАвтомобильногоПропуска,
	|	СНТ.ФИОСотрудникаОГД,
	|	СНТ.ДатаВремяПересеченияГосударственнойГраницы,
	|	СНТ.МаркаАТСФакт,
	|	СНТ.ГосНомерАТСФакт,
	|	СНТ.ФИОВодителяФакт,
	|	СНТ.ИИНВодителяФакт,
	|	СНТ.КодОГДПоставщика,
	|	СНТ.КодОГДПолучателя,
	|	СНТ.НомерЛицензииПоставщика,
	|	СНТ.АдресПоставщикаПоЛицензии,
	|	СНТ.НомерЛицензииПолучателя,
	|	СНТ.АдресПолучателяПоЛицензии,
	|	СНТ.КодОперацииG2,
	|	СНТ.КодОперацииG4,
	|	СНТ.КодОперацииG5,
	|	СНТ.КодОперацииG6,
	|	СНТ.ТипПоставщикаG6,
	|	СНТ.КодОГДОтправкиG6,
	|	СНТ.КодОГДДоставкиG6,
	|	СНТ.КодОперацииG7,
	|	СНТ.ТипПоставщикаG7,
	|	СНТ.КодОГДОтправкиG7,
	|	СНТ.КодОГДДоставкиG7,
	|	СНТ.КодОперацииG8,
	|	СНТ.КодОГДОтправкиG8,
	|	СНТ.КодОГДДоставкиG8,
	|	СНТ.НомерОттискаПломбы,
	|	СНТ.ФИОВодителя,
	|	СНТ.ИИНВодителя,
	|	СНТ.ПоставщикАдвокат,
	|	СНТ.ПоставщикДоверитель,
	|	СНТ.ПоставщикЛизингодатель,
	|	СНТ.ПоставщикЛизингополучатель,
	|	СНТ.ПоставщикКомиссионер,
	|	СНТ.ПоставщикКомитент,
	|	СНТ.ПоставщикМедиатор,
	|	СНТ.ПоставщикНотариус,
	|	СНТ.ПоставщикРозничнаяРеализация,
	|	СНТ.ПоставщикРозничныйРеализатор,
	|	СНТ.ПоставщикУчастникСРП,
	|	СНТ.ПоставщикУчастникСовместнойДеятельности,
	|	СНТ.ПоставщикФармацевтическийПроизводитель,
	|	СНТ.ПоставщикФизическоеЛицо,
	|	СНТ.ПоставщикЧастныйСудебныйИсполнитель,
	|	СНТ.ПолучательАдвокат,
	|	СНТ.ПолучательДоверитель,
	|	СНТ.ПолучательЛизингодатель,
	|	СНТ.ПолучательЛизингополучатель,
	|	СНТ.ПолучательКомиссионер,
	|	СНТ.ПолучательКомитент,
	|	СНТ.ПолучательМедиатор,
	|	СНТ.ПолучательНотариус,
	|	СНТ.ПолучательРозничнаяРеализация,
	|	СНТ.ПолучательРозничныйРеализатор,
	|	СНТ.ПолучательУчастникСРП,
	|	СНТ.ПолучательУчастникСовместнойДеятельности,
	|	СНТ.ПолучательФармацевтическийПроизводитель,
	|	СНТ.ПолучательФизическоеЛицо,
	|	СНТ.ПолучательЧастныйСудебныйИсполнитель
	|ИЗ
	|	ВТ_СНТ КАК ВТ_СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ КАК СНТ
	|		ПО ВТ_СНТ.Ссылка = СНТ.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТТоварыВС.Ссылка КАК Ссылка,
	|	СНТТоварыВС.НомерСтроки КАК НомерСтроки,
	|	СНТТоварыВС.ТоварНаименование,
	|	СНТТоварыВС.КодТНВЭД КАК КодТовара,
	|	СНТТоварыВС.ЕдиницаИзмерения,
	|	СНТТоварыВС.Количество,
	|	СНТТоварыВС.Цена,
	|	СНТТоварыВС.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТТоварыВС.СтавкаАкцизаЧисло,
	|	СНТТоварыВС.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТТоварыВС.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТТоварыВС.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТТоварыВС.БезНДС КАК БезНДС,
	|	СНТТоварыВС.СуммаНДС КАК СуммаНДС,
	|	СНТТоварыВС.Сумма КАК Сумма,
	|	СНТТоварыВС.НомерЗаявленияВРамкахТС,
	|	СНТТоварыВС.ПризнакПроисхождения,
	|	СНТТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТТоварыВС.ИдентификаторТовара,
	|	СНТТоварыВС.GTIN,
	|	СНТТоварыВС.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ТоварыВС КАК СНТТоварыВС
	|		ПО (СНТТоварыВС.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТЭтиловыйСпирт.Ссылка КАК Ссылка,
	|	СНТЭтиловыйСпирт.НомерСтроки КАК НомерСтроки,
	|	СНТЭтиловыйСпирт.ТоварНаименование,
	|	СНТЭтиловыйСпирт.КодТНВЭД КАК КодТовара,
	|	СНТЭтиловыйСпирт.Количество,
	|	СНТЭтиловыйСпирт.Цена,
	|	СНТЭтиловыйСпирт.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТЭтиловыйСпирт.СтавкаАкцизаЧисло,
	|	СНТЭтиловыйСпирт.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТЭтиловыйСпирт.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТЭтиловыйСпирт.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТЭтиловыйСпирт.БезНДС КАК БезНДС,
	|	СНТЭтиловыйСпирт.СуммаНДС КАК СуммаНДС,
	|	СНТЭтиловыйСпирт.Сумма КАК Сумма,
	|	СНТЭтиловыйСпирт.НомерЗаявленияВРамкахТС,
	|	СНТЭтиловыйСпирт.ПризнакПроисхождения,
	|	СНТЭтиловыйСпирт.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТЭтиловыйСпирт.ИдентификаторТовара,
	|	СНТЭтиловыйСпирт.ПинКод,
	|	СНТЭтиловыйСпирт.Крепость,
	|	СНТЭтиловыйСпирт.GTIN,
	|	СНТЭтиловыйСпирт.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ЭтиловыйСпирт КАК СНТЭтиловыйСпирт
	|		ПО (СНТЭтиловыйСпирт.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТВиноматериал.Ссылка КАК Ссылка,
	|	СНТВиноматериал.НомерСтроки КАК НомерСтроки,
	|	СНТВиноматериал.ТоварНаименование,
	|	СНТВиноматериал.КодТНВЭД КАК КодТовара,
	|	СНТВиноматериал.Количество,
	|	СНТВиноматериал.Цена,
	|	СНТВиноматериал.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТВиноматериал.СтавкаАкцизаЧисло,
	|	СНТВиноматериал.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТВиноматериал.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТВиноматериал.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТВиноматериал.БезНДС КАК БезНДС,
	|	СНТВиноматериал.СуммаНДС КАК СуммаНДС,
	|	СНТВиноматериал.Сумма КАК Сумма,
	|	СНТВиноматериал.НомерЗаявленияВРамкахТС,
	|	СНТВиноматериал.ПризнакПроисхождения,
	|	СНТВиноматериал.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТВиноматериал.ИдентификаторТовара,
	|	СНТВиноматериал.ПинКод,
	|	СНТВиноматериал.GTIN,
	|	СНТВиноматериал.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.Виноматериал КАК СНТВиноматериал
	|		ПО (СНТВиноматериал.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТПивоПивныеНапитки.Ссылка КАК Ссылка,
	|	СНТПивоПивныеНапитки.НомерСтроки КАК НомерСтроки,
	|	СНТПивоПивныеНапитки.ТоварНаименование,
	|	СНТПивоПивныеНапитки.КодТНВЭД КАК КодТовара,
	|	СНТПивоПивныеНапитки.Цена,
	|	СНТПивоПивныеНапитки.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТПивоПивныеНапитки.СтавкаАкцизаЧисло,
	|	СНТПивоПивныеНапитки.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТПивоПивныеНапитки.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТПивоПивныеНапитки.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТПивоПивныеНапитки.БезНДС КАК БезНДС,
	|	СНТПивоПивныеНапитки.СуммаНДС КАК СуммаНДС,
	|	СНТПивоПивныеНапитки.Сумма КАК Сумма,
	|	СНТПивоПивныеНапитки.НомерЗаявленияВРамкахТС,
	|	СНТПивоПивныеНапитки.ПризнакПроисхождения,
	|	СНТПивоПивныеНапитки.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТПивоПивныеНапитки.ИдентификаторТовара,
	|	СНТПивоПивныеНапитки.ВидПродукта,
	|	СНТПивоПивныеНапитки.ЕдиницаИзмерения,
	|	СНТПивоПивныеНапитки.Количество,
	|	СНТПивоПивныеНапитки.ЕмкостьТары,
	|	СНТПивоПивныеНапитки.КоличествоУпаковок,
	|	СНТПивоПивныеНапитки.КоличествоВУпаковке,
	|	СНТПивоПивныеНапитки.GTIN,
	|	СНТПивоПивныеНапитки.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ПивоПивныеНапитки КАК СНТПивоПивныеНапитки
	|		ПО (СНТПивоПивныеНапитки.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТАлкогольнаяпродукцияКромеПива.Ссылка КАК Ссылка,
	|	СНТАлкогольнаяпродукцияКромеПива.НомерСтроки КАК НомерСтроки,
	|	СНТАлкогольнаяпродукцияКромеПива.ТоварНаименование,
	|	СНТАлкогольнаяпродукцияКромеПива.КодТНВЭД КАК КодТовара,
	|	СНТАлкогольнаяпродукцияКромеПива.Цена,
	|	СНТАлкогольнаяпродукцияКромеПива.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТАлкогольнаяпродукцияКромеПива.СтавкаАкцизаЧисло,
	|	СНТАлкогольнаяпродукцияКромеПива.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТАлкогольнаяпродукцияКромеПива.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТАлкогольнаяпродукцияКромеПива.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТАлкогольнаяпродукцияКромеПива.БезНДС КАК БезНДС,
	|	СНТАлкогольнаяпродукцияКромеПива.СуммаНДС КАК СуммаНДС,
	|	СНТАлкогольнаяпродукцияКромеПива.Сумма КАК Сумма,
	|	СНТАлкогольнаяпродукцияКромеПива.НомерЗаявленияВРамкахТС,
	|	СНТАлкогольнаяпродукцияКромеПива.ПризнакПроисхождения,
	|	СНТАлкогольнаяпродукцияКромеПива.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТАлкогольнаяпродукцияКромеПива.ИдентификаторТовара,
	|	СНТАлкогольнаяпродукцияКромеПива.Количество,
	|	СНТАлкогольнаяпродукцияКромеПива.ВидПродукта,
	|	СНТАлкогольнаяпродукцияКромеПива.ЕмкостьТары,
	|	СНТАлкогольнаяпродукцияКромеПива.КоличествоБутылок,
	|	СНТАлкогольнаяпродукцияКромеПива.ПинКод,
	|	СНТАлкогольнаяпродукцияКромеПива.Крепость,
	|	СНТАлкогольнаяпродукцияКромеПива.GTIN,
	|	СНТАлкогольнаяпродукцияКромеПива.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК СНТАлкогольнаяпродукцияКромеПива
	|		ПО (СНТАлкогольнаяпродукцияКромеПива.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТДанныеПоНефтепродуктам.Ссылка КАК Ссылка,
	|	СНТДанныеПоНефтепродуктам.НомерСтроки КАК НомерСтроки,
	|	СНТДанныеПоНефтепродуктам.ТоварНаименование,
	|	СНТДанныеПоНефтепродуктам.КодТНВЭД КАК КодТовара,
	|	СНТДанныеПоНефтепродуктам.Цена,
	|	СНТДанныеПоНефтепродуктам.ЕдиницаИзмерения,
	|	СНТДанныеПоНефтепродуктам.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТДанныеПоНефтепродуктам.СтавкаАкцизаЧисло,
	|	СНТДанныеПоНефтепродуктам.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТДанныеПоНефтепродуктам.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТДанныеПоНефтепродуктам.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТДанныеПоНефтепродуктам.БезНДС КАК БезНДС,
	|	СНТДанныеПоНефтепродуктам.СуммаНДС КАК СуммаНДС,
	|	СНТДанныеПоНефтепродуктам.Сумма КАК Сумма,
	|	СНТДанныеПоНефтепродуктам.НомерЗаявленияВРамкахТС,
	|	СНТДанныеПоНефтепродуктам.ПризнакПроисхождения,
	|	СНТДанныеПоНефтепродуктам.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТДанныеПоНефтепродуктам.ИдентификаторТовара,
	|	СНТДанныеПоНефтепродуктам.Количество,
	|	СНТДанныеПоНефтепродуктам.ПинКод,
	|	СНТДанныеПоНефтепродуктам.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ДанныеПоНефтепродуктам КАК СНТДанныеПоНефтепродуктам
	|		ПО (СНТДанныеПоНефтепродуктам.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТДанныеПоБиотопливу.Ссылка КАК Ссылка,
	|	СНТДанныеПоБиотопливу.НомерСтроки КАК НомерСтроки,
	|	СНТДанныеПоБиотопливу.ТоварНаименование,
	|	СНТДанныеПоБиотопливу.КодТНВЭД КАК КодТовара,
	|	СНТДанныеПоБиотопливу.Цена,
	|	СНТДанныеПоБиотопливу.ЕдиницаИзмерения,
	|	СНТДанныеПоБиотопливу.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТДанныеПоБиотопливу.СтавкаАкцизаЧисло,
	|	СНТДанныеПоБиотопливу.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТДанныеПоБиотопливу.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТДанныеПоБиотопливу.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТДанныеПоБиотопливу.БезНДС КАК БезНДС,
	|	СНТДанныеПоБиотопливу.СуммаНДС КАК СуммаНДС,
	|	СНТДанныеПоБиотопливу.Сумма КАК Сумма,
	|	СНТДанныеПоБиотопливу.НомерЗаявленияВРамкахТС,
	|	СНТДанныеПоБиотопливу.ПризнакПроисхождения,
	|	СНТДанныеПоБиотопливу.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТДанныеПоБиотопливу.ИдентификаторТовара,
	|	СНТДанныеПоБиотопливу.Количество,
	|	СНТДанныеПоБиотопливу.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ДанныеПоБиотопливу КАК СНТДанныеПоБиотопливу
	|		ПО (СНТДанныеПоБиотопливу.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТТабачнаяПродукция.Ссылка КАК Ссылка,
	|	СНТТабачнаяПродукция.НомерСтроки КАК НомерСтроки,
	|	СНТТабачнаяПродукция.ТоварНаименование,
	|	СНТТабачнаяПродукция.КодТНВЭД КАК КодТовара,
	|	СНТТабачнаяПродукция.ЕдиницаИзмерения,
	|	СНТТабачнаяПродукция.Количество,
	|	СНТТабачнаяПродукция.Цена,
	|	СНТТабачнаяПродукция.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТТабачнаяПродукция.СтавкаАкцизаЧисло,
	|	СНТТабачнаяПродукция.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТТабачнаяПродукция.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТТабачнаяПродукция.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТТабачнаяПродукция.БезНДС КАК БезНДС,
	|	СНТТабачнаяПродукция.СуммаНДС КАК СуммаНДС,
	|	СНТТабачнаяПродукция.Сумма КАК Сумма,
	|	СНТТабачнаяПродукция.НомерЗаявленияВРамкахТС,
	|	СНТТабачнаяПродукция.ПризнакПроисхождения,
	|	СНТТабачнаяПродукция.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТТабачнаяПродукция.ИдентификаторТовара,
	|	СНТТабачнаяПродукция.КоличествоПачек,
	|	СНТТабачнаяПродукция.КоличествоВПачке,
	|	СНТТабачнаяПродукция.ПинКод,
	|	СНТТабачнаяПродукция.GTIN,
	|	СНТТабачнаяПродукция.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ТабачнаяПродукция КАК СНТТабачнаяПродукция
	|		ПО (СНТТабачнаяПродукция.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТДругиеТоварыЦифроваяМаркировка.Ссылка КАК Ссылка,
	|	СНТДругиеТоварыЦифроваяМаркировка.НомерСтроки КАК НомерСтроки,
	|	СНТДругиеТоварыЦифроваяМаркировка.ТоварНаименование,
	|	СНТДругиеТоварыЦифроваяМаркировка.КодТНВЭД КАК КодТовара,
	|	СНТДругиеТоварыЦифроваяМаркировка.ЕдиницаИзмерения,
	|	СНТДругиеТоварыЦифроваяМаркировка.Количество,
	|	СНТДругиеТоварыЦифроваяМаркировка.Цена,
	|	СНТДругиеТоварыЦифроваяМаркировка.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТДругиеТоварыЦифроваяМаркировка.СтавкаАкцизаЧисло,
	|	СНТДругиеТоварыЦифроваяМаркировка.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТДругиеТоварыЦифроваяМаркировка.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТДругиеТоварыЦифроваяМаркировка.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТДругиеТоварыЦифроваяМаркировка.БезНДС КАК БезНДС,
	|	СНТДругиеТоварыЦифроваяМаркировка.СуммаНДС КАК СуммаНДС,
	|	СНТДругиеТоварыЦифроваяМаркировка.Сумма КАК Сумма,
	|	СНТДругиеТоварыЦифроваяМаркировка.НомерЗаявленияВРамкахТС,
	|	СНТДругиеТоварыЦифроваяМаркировка.ПризнакПроисхождения,
	|	СНТДругиеТоварыЦифроваяМаркировка.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТДругиеТоварыЦифроваяМаркировка.ИдентификаторТовара,
	|	СНТДругиеТоварыЦифроваяМаркировка.GTIN,
	|	СНТДругиеТоварыЦифроваяМаркировка.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК СНТДругиеТоварыЦифроваяМаркировка
	|		ПО (СНТДругиеТоварыЦифроваяМаркировка.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТТоварыЭкспортныйКонтроль.Ссылка КАК Ссылка,
	|	СНТТоварыЭкспортныйКонтроль.НомерСтроки КАК НомерСтроки,
	|	СНТТоварыЭкспортныйКонтроль.ТоварНаименование,
	|	СНТТоварыЭкспортныйКонтроль.КодТНВЭД КАК КодТовара,
	|	СНТТоварыЭкспортныйКонтроль.ЕдиницаИзмерения,
	|	СНТТоварыЭкспортныйКонтроль.Количество,
	|	СНТТоварыЭкспортныйКонтроль.Цена,
	|	СНТТоварыЭкспортныйКонтроль.СуммаБезНалогов КАК СуммаБезНалогов,
	|	СНТТоварыЭкспортныйКонтроль.СтавкаАкцизаЧисло,
	|	СНТТоварыЭкспортныйКонтроль.СуммаАкциза КАК СуммаАкциза,
	|	ВЫБОР
	|		КОГДА СНТ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СНТТоварыЭкспортныйКонтроль.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ СНТТоварыЭкспортныйКонтроль.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	СНТТоварыЭкспортныйКонтроль.БезНДС КАК БезНДС,
	|	СНТТоварыЭкспортныйКонтроль.СуммаНДС КАК СуммаНДС,
	|	СНТТоварыЭкспортныйКонтроль.Сумма КАК Сумма,
	|	СНТТоварыЭкспортныйКонтроль.НомерЗаявленияВРамкахТС,
	|	СНТТоварыЭкспортныйКонтроль.ПризнакПроисхождения,
	|	СНТТоварыЭкспортныйКонтроль.НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТТоварыЭкспортныйКонтроль.ИдентификаторТовара,
	|	СНТТоварыЭкспортныйКонтроль.НомерЛицензии,
	|	СНТТоварыЭкспортныйКонтроль.ДатаВыдачиЛицензии,
	|	СНТТоварыЭкспортныйКонтроль.ДатаОкончанияЛицензии,
	|	СНТТоварыЭкспортныйКонтроль.ДополнительнаяИнформация
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ТоварыЭкспортныйКонтроль КАК СНТТоварыЭкспортныйКонтроль
	|		ПО (СНТТоварыЭкспортныйКонтроль.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТСведенияОГрузе.Ссылка КАК Ссылка,
	|	СНТСведенияОГрузе.НомерСтроки КАК НомерСтроки,
	|	СНТСведенияОГрузе.НоменклатурныйНомер,
	|	СНТСведенияОГрузе.Документы,
	|	СНТСведенияОГрузе.ВидУпаковки,
	|	СНТСведенияОГрузе.КоличествоМест,
	|	СНТСведенияОГрузе.СпособОпределенияМассы,
	|	СНТСведенияОГрузе.КодГруза,
	|	СНТСведенияОГрузе.КлассГруза,
	|	СНТСведенияОГрузе.МассаБрутто,
	|	СНТСведенияОГрузе.МассаНетто
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.СведенияОГрузе КАК СНТСведенияОГрузе
	|		ПО (СНТСведенияОГрузе.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СНТПогрузочноРазгрузочныеОперации.Ссылка КАК Ссылка,
	|	СНТПогрузочноРазгрузочныеОперации.НомерСтроки КАК НомерСтроки,
	|	СНТПогрузочноРазгрузочныеОперации.Операция,
	|	СНТПогрузочноРазгрузочныеОперации.Исполнитель,
	|	СНТПогрузочноРазгрузочныеОперации.СпособПогрузки,
	|	СНТПогрузочноРазгрузочныеОперации.КодСпособаПогрузки,
	|	СНТПогрузочноРазгрузочныеОперации.ВремяПрибытия,
	|	СНТПогрузочноРазгрузочныеОперации.ВремяУбытия,
	|	СНТПогрузочноРазгрузочныеОперации.Простой,
	|	СНТПогрузочноРазгрузочныеОперации.ВремяПростоя,
	|	СНТПогрузочноРазгрузочныеОперации.Наименование,
	|	СНТПогрузочноРазгрузочныеОперации.ПодписьОтветственногоЛица,
	|	СНТПогрузочноРазгрузочныеОперации.ТранспортныеУслуги
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ПогрузочноРазгрузочныеОперации КАК СНТПогрузочноРазгрузочныеОперации
	|		ПО (СНТПогрузочноРазгрузочныеОперации.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТПрочиеСведения.НомерСтроки КАК НомерСтроки,
	|	СНТПрочиеСведения.РасстояниеПоГруппамВсего,
	|	СНТПрочиеСведения.РасстояниеПоГруппамГород,
	|	СНТПрочиеСведения.РасстояниеПоГруппам1,
	|	СНТПрочиеСведения.РасстояниеПоГруппам2,
	|	СНТПрочиеСведения.РасстояниеПоГруппам3,
	|	СНТПрочиеСведения.КодЭкспедиции,
	|	СНТПрочиеСведения.ЗаТранспортныеУслугиКлиент,
	|	СНТПрочиеСведения.ЗаТранспортныеУслугиВодитель,
	|	СНТПрочиеСведения.ПоправочныйКоэффициентВодитель,
	|	СНТПрочиеСведения.ПоправочныйКоэффициентОсновнойТариф,
	|	СНТПрочиеСведения.Штраф,
	|	СНТПрочиеСведения.Отметки
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.ПрочиеСведения КАК СНТПрочиеСведения
	|		ПО (СНТПрочиеСведения.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТТаксировка.РасчетСтоимости,
	|	СНТТаксировка.ЗаТонны,
	|	СНТТаксировка.Недогруз,
	|	СНТТаксировка.ЗаСпецТранспорт,
	|	СНТТаксировка.ЗаТранспортныеУслуги,
	|	СНТТаксировка.ПогрузочноРазгрузочныеРаботы,
	|	СНТТаксировка.СверхнормативПогруз,
	|	СНТТаксировка.СверхнормативРазгруз,
	|	СНТТаксировка.ПрочиеДоплаты,
	|	СНТТаксировка.СкидкаПростой,
	|	СНТТаксировка.Всего,
	|	СНТТаксировка.Таксировка
	|ИЗ
	|	ВТ_СНТ КАК СНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ.Таксировка КАК СНТТаксировка
	|		ПО (СНТТаксировка.Ссылка = СНТ.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СНТТаксировка.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСНТ);
	Запрос.УстановитьПараметр("ТекстБезНДС", НСтр("ru = 'Без НДС'"));
	Запрос.УстановитьПараметр("ТекстБезНДСНеРК", НСтр("ru = 'Без НДС - не РК'"));
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеПоДокументам = Результат[1].Выбрать();
	ДанныеТовары = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеЭтиловыйСпирт = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеВиноматериал = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПиво = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеАлкогольПр = Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеНефтепродукт = Результат[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеБиотопливо = Результат[8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТабачНеЦифрМарк = Результат[9].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеДрТоварыЦифрМарк = Результат[10].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварЭкспертКонтроль = Результат[11].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеСведенияОГрузе = Результат[12].Выбрать();
	ДанныеПогрРазгОперац = Результат[13].Выбрать();
	ДанныеПрочиеСведен = Результат[14].Выбрать();
	ДанныеТаксировка = Результат[15].Выбрать();
	
	МассивОбластей = Новый Массив;
	СтруктураОбластей = Новый Структура;	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ОбменСНТ.ПФ_MXL_СНТ");
	
	//Области Макет
	СтруктураОбластей.Вставить("ОбластьШапкаСНТ", Макет.ПолучитьОбласть("ШапкаСНТ"));
	СтруктураОбластей.Вставить("ОбластьРазделAШапка", Макет.ПолучитьОбласть("РазделAШапка"));
	СтруктураОбластей.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA"));
	
	Для Секция = 1 По 10 Цикл
		СтруктураОбластей.Вставить("ОбластьРазделG" + Секция + "ШапкаТаблица", Макет.ПолучитьОбласть("РазделG" + Секция + "ШапкаТаблица"));
		СтруктураОбластей.Вставить("ОбластьРазделG" + Секция + "СтрокаТаблица", Макет.ПолучитьОбласть("РазделG" + Секция + "СтрокаТаблица"));
		СтруктураОбластей.Вставить("ОбластьРазделG" + Секция + "ПодвалТаблица", Макет.ПолучитьОбласть("РазделG" + Секция + "ПодвалТаблица"));
	КонецЦикла;
	
	СтруктураОбластей.Вставить("ОбластьРазделАлкогольШапка", Макет.ПолучитьОбласть("РазделАлкогольШапка"));
	
	СтруктураОбластей.Вставить("ОбластьРазделKШапка", Макет.ПолучитьОбласть("РазделKШапка"));
	СтруктураОбластей.Вставить("ОбластьРазделK1ШапкаТаблица", Макет.ПолучитьОбласть("РазделK1ШапкаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK1СтрокаТаблица", Макет.ПолучитьОбласть("РазделK1СтрокаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK2ШапкаТаблица", Макет.ПолучитьОбласть("РазделK2ШапкаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK2СтрокаТаблица", Макет.ПолучитьОбласть("РазделK2СтрокаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK3ШапкаТаблица", Макет.ПолучитьОбласть("РазделK3ШапкаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK3СтрокаТаблица", Макет.ПолучитьОбласть("РазделK3СтрокаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK4ШапкаТаблица", Макет.ПолучитьОбласть("РазделK4ШапкаТаблица"));
	СтруктураОбластей.Вставить("ОбластьРазделK4СтрокаТаблица", Макет.ПолучитьОбласть("РазделK4СтрокаТаблица"));
	
	СтруктураОбластей.Вставить("ОбластьРазделL", Макет.ПолучитьОбласть("РазделL"));	
	СтруктураОбластей.Вставить("ОбластьРазделM", Макет.ПолучитьОбласть("РазделM"));
	СтруктураОбластей.Вставить("ОбластьРазделN", Макет.ПолучитьОбласть("РазделN"));
	СтруктураОбластей.Вставить("ОбластьРазделO", Макет.ПолучитьОбласть("РазделO"));
	
	СтруктураОбластей.Вставить("ОбластьРазделBCDD1EFF1", Макет.ПолучитьОбласть("РазделBCDD1EFF1"));
	
	МассивОбластей.Добавить(СтруктураОбластей);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СНТ";
	
	Пока ДанныеПоДокументам.Следующий() Цикл
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;	
		ОбластиМакета = МассивОбластей[МассивОбластей.Количество()-1];
		
		ДанныеТовары.Сбросить();
		ДанныеЭтиловыйСпирт.Сбросить();
		
		//Заголовок печатной формы
		ТабДокумент.Вывести(ОбластиМакета.ОбластьШапкаСНТ);
		
		//Раздел А
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделAШапка);
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделA.Параметры, ДанныеПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделA);
		
		//РазделBCDD1EFF1
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделBCDD1EFF1.Параметры, ДанныеПоДокументам);

		КатегорияПоставщика = ""; 
		СтруктураКатегорий = Новый Структура ("КатегорияПоставщика1, КатегорияПоставщика2, КатегорияПоставщика3, КатегорияПоставщика4, КатегорияПоставщика5,
												|КатегорияПоставщика6, КатегорияПоставщика7, КатегорияПоставщика8, КатегорияПоставщика9, КатегорияПоставщика10,
												|КатегорияПоставщика11, КатегорияПоставщика12, КатегорияПоставщика13, КатегорияПоставщика14, КатегорияПоставщика15");
		Если ДанныеПоДокументам.ПоставщикАдвокат Тогда
			СтруктураКатегорий.КатегорияПоставщика1 = "Адвокат";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикДоверитель Тогда
			СтруктураКатегорий.КатегорияПоставщика2 = "Доверитель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикЛизингодатель Тогда
			СтруктураКатегорий.КатегорияПоставщика3 = "Лизингодатель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикЛизингополучатель Тогда
			СтруктураКатегорий.КатегорияПоставщика4 = "Лизингополучатель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикКомиссионер Тогда
			СтруктураКатегорий.КатегорияПоставщика5 = "Комиссионер";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикКомитент Тогда
			СтруктураКатегорий.КатегорияПоставщика6 = "Комитент";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикМедиатор Тогда
			СтруктураКатегорий.КатегорияПоставщика7 = "Медиатор";
		КонецЕсли;
			
		Если ДанныеПоДокументам.ПоставщикНотариус Тогда
			СтруктураКатегорий.КатегорияПоставщика8 = "Нотариус";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикРозничнаяРеализация Тогда
			СтруктураКатегорий.КатегорияПоставщика9 = "Розничная реализация";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикРозничныйРеализатор Тогда
			СтруктураКатегорий.КатегорияПоставщика10 = "Розничный реализатор";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикУчастникСРП Тогда
			СтруктураКатегорий.КатегорияПоставщика11 = "Участник СРП";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикУчастникСовместнойДеятельности Тогда
			СтруктураКатегорий.КатегорияПоставщика12 = "Участник совместной деятельности";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикФармацевтическийПроизводитель Тогда
			СтруктураКатегорий.КатегорияПоставщика13 = "Фармацевтический производитель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикФизическоеЛицо Тогда
			СтруктураКатегорий.КатегорияПоставщика14 = "Физическое лицо";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПоставщикЧастныйСудебныйИсполнитель Тогда
			СтруктураКатегорий.КатегорияПоставщика15 = "Частный судебный исполнитель";
		КонецЕсли;
		
		Для Каждого Категория Из СтруктураКатегорий Цикл
			Если ЗначениеЗаполнено(Категория.Значение) Тогда
				Если ЗначениеЗаполнено(КатегорияПоставщика) Тогда
					КатегорияПоставщика = КатегорияПоставщика + ", " + Категория.Значение;
				Иначе
					КатегорияПоставщика = КатегорияПоставщика + Категория.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбластиМакета.ОбластьРазделBCDD1EFF1.Параметры.КатегорияПоставщика = КатегорияПоставщика;
		
		
		//категория получателя
		КатегорияПолучателя = ""; 
		СтруктураКатегорийПолучателя = Новый Структура ("КатегорияПолучателя1, КатегорияПолучателя2, КатегорияПолучателя3, КатегорияПолучателя4, КатегорияПолучателя5,
												|КатегорияПолучателя6, КатегорияПолучателя7, КатегорияПолучателя8, КатегорияПолучателя9, КатегорияПолучателя10,
												|КатегорияПолучателя11, КатегорияПолучателя12, КатегорияПолучателя13, КатегорияПолучателя14, КатегорияПолучателя15");
		
		Если ДанныеПоДокументам.ПолучательАдвокат Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя1 = "Адвокат";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательДоверитель Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя2 = "Доверитель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательЛизингодатель Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя3 = "Лизингодатель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательЛизингополучатель Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя4 = "Лизингополучатель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательКомиссионер Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя5 = "Комиссионер";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательКомитент Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя6 = "Комитент";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательМедиатор Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя7 = "Медиатор";
		КонецЕсли;
			
		Если ДанныеПоДокументам.ПолучательНотариус Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя8 = "Нотариус";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательРозничнаяРеализация Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя9 = "Розничная реализация";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательРозничныйРеализатор Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя10 = "Розничный реализатор";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательУчастникСРП Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя11 = "Участник СРП";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательУчастникСовместнойДеятельности Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя12 = "Участник совместной деятельности";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательФармацевтическийПроизводитель Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя13 = "Фармацевтический производитель";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательФизическоеЛицо Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя14 = "Физическое лицо";
		КонецЕсли;
		
		Если ДанныеПоДокументам.ПолучательЧастныйСудебныйИсполнитель Тогда
			СтруктураКатегорийПолучателя.КатегорияПолучателя15 = "Частный судебный исполнитель";
		КонецЕсли;
		
		Для Каждого Категория Из СтруктураКатегорийПолучателя Цикл
			Если ЗначениеЗаполнено(Категория.Значение) Тогда
				Если ЗначениеЗаполнено(КатегорияПолучателя) Тогда
					КатегорияПолучателя = КатегорияПолучателя + ", " + Категория.Значение;
				Иначе
					КатегорияПолучателя = КатегорияПолучателя + Категория.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбластиМакета.ОбластьРазделBCDD1EFF1.Параметры.КатегорияПолучателя = КатегорияПолучателя;

		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделBCDD1EFF1);
		
		//Раздел G1 Данные товаров
		Пока ДанныеТовары.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG1ШапкаТаблица);
			ДанныеТовара = ДанныеТовары.Выбрать();
			Пока ДанныеТовара.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG1СтрокаТаблица.Параметры, ДанныеТовара);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG1СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG1ПодвалТаблица.Параметры, ДанныеТовары);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG1ПодвалТаблица);
		КонецЦикла;
		
		//Раздел G2
		Если ЗначениеЗаполнено(ДанныеПоДокументам.НомерЛицензииПоставщика)
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.АдресПоставщикаПоЛицензии) 
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.НомерЛицензииПолучателя)
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.АдресПолучателяПоЛицензии)Тогда
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделАлкогольШапка.Параметры, ДанныеПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделАлкогольШапка);
		КонецЕсли;
		// Данные этиловый спирт
		Пока ДанныеЭтиловыйСпирт.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ОбластиМакета.ОбластьРазделG2ШапкаТаблица.Параметры.КодОперацииG2 = ДанныеПоДокументам.КодОперацииG2;
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG2ШапкаТаблица);
			ДанныеПоЭтиловыйСпирт = ДанныеЭтиловыйСпирт.Выбрать();
			Пока ДанныеПоЭтиловыйСпирт.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG2СтрокаТаблица.Параметры, ДанныеПоЭтиловыйСпирт);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG2СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG2ПодвалТаблица.Параметры, ДанныеЭтиловыйСпирт);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG2ПодвалТаблица);
		КонецЦикла;
		// Данные виноматериал
		Пока ДанныеВиноматериал.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG3ШапкаТаблица);
			ДанныеВиноматериала = ДанныеВиноматериал.Выбрать();
			Пока ДанныеВиноматериала.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG3СтрокаТаблица.Параметры, ДанныеВиноматериала);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG3СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG3ПодвалТаблица.Параметры, ДанныеВиноматериал);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG3ПодвалТаблица);
		КонецЦикла;
		// Данные пиво и пивные напитки
		Пока ДанныеПиво.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ОбластиМакета.ОбластьРазделG4ШапкаТаблица.Параметры.КодОперацииG4 = ДанныеПоДокументам.КодОперацииG4;
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG4ШапкаТаблица);
			ДанныеПоПиво = ДанныеПиво.Выбрать();
			Пока ДанныеПоПиво.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG4СтрокаТаблица.Параметры, ДанныеПоПиво);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG4СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG4ПодвалТаблица.Параметры, ДанныеПиво);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG4ПодвалТаблица);
		КонецЦикла;
		// Данные алкогольная продукция
		Пока ДанныеАлкогольПр.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ОбластиМакета.ОбластьРазделG5ШапкаТаблица.Параметры.КодОперацииG5 = ДанныеПоДокументам.КодОперацииG5;
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG5ШапкаТаблица);
			ДанныеПоАлкогольПр = ДанныеАлкогольПр.Выбрать();
			Пока ДанныеПоАлкогольПр.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG5СтрокаТаблица.Параметры, ДанныеПоАлкогольПр);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG5СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG5ПодвалТаблица.Параметры, ДанныеАлкогольПр);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG5ПодвалТаблица);
		КонецЦикла;
		// Данные по нефтепродуктам
		Пока ДанныеНефтепродукт.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG6ШапкаТаблица.Параметры, ДанныеПоДокументам,"КодОперацииG6,ТипПоставщикаG6,КодОГДОтправкиG6,КодОГДДоставкиG6");
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG6ШапкаТаблица);
			ДанныеПоНефтепродукт = ДанныеНефтепродукт.Выбрать();
			Пока ДанныеПоНефтепродукт.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG6СтрокаТаблица.Параметры, ДанныеПоНефтепродукт);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG6СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG6ПодвалТаблица.Параметры, ДанныеНефтепродукт);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG6ПодвалТаблица);
		КонецЦикла;
		// Данные по биотопливу
		Пока ДанныеБиотопливо.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG7ШапкаТаблица.Параметры, ДанныеПоДокументам,"КодОперацииG7,ТипПоставщикаG7,КодОГДОтправкиG7,КодОГДДоставкиG7");
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG7ШапкаТаблица);
			ДанныеПоБиотопливо = ДанныеБиотопливо.Выбрать();
			Пока ДанныеПоБиотопливо.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG7СтрокаТаблица.Параметры, ДанныеПоБиотопливо);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG7СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG7ПодвалТаблица.Параметры, ДанныеБиотопливо);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG7ПодвалТаблица);
		КонецЦикла;
		// Данные по табачной продукции (исключая цифровую маркировку)
		Пока ДанныеТабачНеЦифрМарк.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG8ШапкаТаблица.Параметры, ДанныеПоДокументам,"КодОперацииG8,КодОГДОтправкиG8,КодОГДДоставкиG8");
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG8ШапкаТаблица);
			ДанныеПоТабачНеЦифрМарк = ДанныеТабачНеЦифрМарк.Выбрать();
			Пока ДанныеПоТабачНеЦифрМарк.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG8СтрокаТаблица.Параметры, ДанныеПоТабачНеЦифрМарк);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG8СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG8ПодвалТаблица.Параметры, ДанныеТабачНеЦифрМарк);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG8ПодвалТаблица);
		КонецЦикла;
		// Данные по другим товарам (цифровая маркировка)
		Пока ДанныеДрТоварыЦифрМарк.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG9ШапкаТаблица);
			ДанныеПоДрТоварыЦифрМарк = ДанныеДрТоварыЦифрМарк.Выбрать();
			Пока ДанныеПоДрТоварыЦифрМарк.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG9СтрокаТаблица.Параметры, ДанныеПоДрТоварыЦифрМарк);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG9СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG9ПодвалТаблица.Параметры, ДанныеДрТоварыЦифрМарк);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG9ПодвалТаблица);
		КонецЦикла;
		// Данные по товарам, подлежащим экспортному контролю (двойного назначения, военного назначения)
		Пока ДанныеТоварЭкспертКонтроль.НайтиСледующий(ДанныеПоДокументам.Ссылка) Цикл
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG10ШапкаТаблица);
			ДанныеПоТоварЭкспертКонтроль = ДанныеТоварЭкспертКонтроль.Выбрать();
			Пока ДанныеПоТоварЭкспертКонтроль.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG10СтрокаТаблица.Параметры, ДанныеПоТоварЭкспертКонтроль);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG10СтрокаТаблица);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG10ПодвалТаблица.Параметры, ДанныеТоварЭкспертКонтроль);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG10ПодвалТаблица);
		КонецЦикла;
		
		// Раздел К - Данные о грузе,перевозимом на автомобильном транспорте
		Если ЗначениеЗаполнено(ДанныеПоДокументам.НомерОттискаПломбы)
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.ФИОВодителя) 
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.ИИНВодителя)Тогда
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделKШапка.Параметры, ДанныеПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделKШапка);
			
			//Раздел K1. Сведение о грузе и Раздел K2. Погрузочно-разгрузочные операции 
			Если ДанныеСведенияОГрузе.Количество()<> 0 ИЛИ ДанныеПогрРазгОперац.Количество()<>0 Тогда
				
				Если ДанныеСведенияОГрузе.Количество() >= ДанныеПогрРазгОперац.Количество() Тогда
					ДанныеСнаружи = ДанныеСведенияОГрузе;
					ДанныеВнутри = ДанныеПогрРазгОперац;
					ОбластьСнаружи = ОбластиМакета.ОбластьРазделK1СтрокаТаблица;
					ОбластьВнутри = ОбластиМакета.ОбластьРазделK2СтрокаТаблица;
				Иначе
					ДанныеСнаружи = ДанныеПогрРазгОперац;
					ДанныеВнутри = ДанныеСведенияОГрузе;
					ОбластьСнаружи = ОбластиМакета.ОбластьРазделK2СтрокаТаблица;
					ОбластьВнутри = ОбластиМакета.ОбластьРазделK1СтрокаТаблица;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK1ШапкаТаблица);
				ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделK2ШапкаТаблица,,,Истина);
				
				Пока ДанныеСнаружи.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьСнаружи.Параметры, ДанныеСнаружи);
					Если ДанныеВнутри.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(ОбластьВнутри.Параметры, ДанныеВнутри);
					Иначе
						Для Параметр = 0 по ОбластьВнутри.Параметры.Количество()-1 Цикл
							ОбластьВнутри.Параметры.Установить(Параметр,"");
						КонецЦикла;	
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK1СтрокаТаблица);
					ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделK2СтрокаТаблица,,,Истина);
				КонецЦикла;
			КонецЕсли;
			
			//Раздел K3. Прочие сведения (заполняется перевозчиком) и Раздел K4. Таксировка
			Если ДанныеПрочиеСведен.Количество() <> 0 ИЛИ ДанныеТаксировка.Количество() <>0 Тогда
				
				Если ДанныеПрочиеСведен.Количество() >= ДанныеТаксировка.Количество() Тогда
					ДанныеСнаружи = ДанныеПрочиеСведен;
					ДанныеВнутри = ДанныеТаксировка;
					ОбластьСнаружи = ОбластиМакета.ОбластьРазделK3СтрокаТаблица;
					ОбластьВнутри = ОбластиМакета.ОбластьРазделK4СтрокаТаблица;
				Иначе
					ДанныеСнаружи = ДанныеТаксировка;
					ДанныеВнутри = ДанныеПрочиеСведен;
					ОбластьСнаружи = ОбластиМакета.ОбластьРазделK4СтрокаТаблица;
					ОбластьВнутри = ОбластиМакета.ОбластьРазделK3СтрокаТаблица;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK3ШапкаТаблица);
				ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделK4ШапкаТаблица,,,Истина);
				
				Пока ДанныеСнаружи.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьСнаружи.Параметры, ДанныеСнаружи);
					Если ДанныеВнутри.Следующий() Тогда
						ЗаполнитьЗначенияСвойств(ОбластьВнутри.Параметры, ДанныеВнутри);
					Иначе
						Для Параметр = 0 по ОбластьВнутри.Параметры.Количество()-1 Цикл
							ОбластьВнутри.Параметры.Установить(Параметр,"");
						КонецЦикла;	
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK3СтрокаТаблица);
					ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделK4СтрокаТаблица,,,Истина);
				КонецЦикла;		
			КонецЕсли;
		КонецЕсли;

		//Раздел L Сведения по отпуску товара	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделL.Параметры, ДанныеПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделL);
		
		//Раздел M
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделM.Параметры, ДанныеПоДокументам);
		ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделM,,,Истина);
		
		//Раздел N
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделN.Параметры, ДанныеПоДокументам);
		ТабДокумент.Присоединить(ОбластиМакета.ОбластьРазделN,,,Истина);
		
		//Раздел O
		Если ЗначениеЗаполнено(ДанныеПоДокументам.КодОГДПоставщика)
			ИЛИ ЗначениеЗаполнено(ДанныеПоДокументам.КодОГДПолучателя) Тогда
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделO.Параметры, ДанныеПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделO);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область СоздатьЭСФИзСНТ
// См. СНТСервер.ЗаполнитьИсходящийЭСФИзСНТ()
Процедура ЗаполнитьИсходящийЭСФИзСНТ(Знач СсылкаСНТ, ОбъектЭСФ) Экспорт
	
	МассивСНТ = Новый Массив();
	МассивСНТ.Добавить(СсылкаСНТ);
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	
	РезультатыЗапросовПоРеквизитам = РезультатЗапросаПоРеквизитамСНТ(МассивСНТ);
	ВыборкаРеквизиты = РезультатыЗапросовПоРеквизитам.Выбрать();
	
	// Заполнить ОбъектЭСФ.
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		// Заполнить реквизиты ОбъектЭСФ.
		ОбъектЭСФ.ВерсияБланкаЭСФ = 2;
		ОбъектЭСФ.Номер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.СчетФактура);
		ОбъектЭСФ.СНТ = ВыборкаРеквизиты.Ссылка;
		ОбъектЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ);
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов = ВыборкаРеквизиты; 
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ, ВыборкаРеквизиты);
		
		Товары = РезультатЗапросаПоТоварам(ВыборкаРеквизиты.Ссылка);
		Услуги = РезультатЗапросаПоУслугам(ВыборкаРеквизиты.Ссылка);
		
		// Заполнить таблицу "Поставщики".
		ПоставщикиСтрока = ОбъектЭСФ.Поставщики.Добавить();
		ЗаполнитьРеквизитыПоставщикаИзСНТ(ПоставщикиСтрока, ВыборкаРеквизиты);
		
		ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = ВыборкаРеквизиты.РегистрационныйНомерИСЭСФ;
		ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Дата;
		
		// Заполнить таблицу "Получатели".
		ПолучателиСтрока = ОбъектЭСФ.Получатели.Добавить();
		ЗаполнитьРеквизитыПолучателяИзСНТ(ПолучателиСтрока, ВыборкаРеквизиты);
		
		Для Каждого Товар Из Товары Цикл
			СтрокаТовары = ОбъектЭСФ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, Товар);
			
			//если тип пошлины = ЕАЭС и документ партии СНТ по импорту, то проверяем сопоставлены ли ФНО и СНТ
			Если Товар.ТипПошлины = Перечисления.ТипыПошлинВС.ЕАЭС И ЗначениеЗаполнено(Товар.ДокументПартии) Тогда
				Если ТипЗнч(Товар.ДокументПартии) = Тип("ДокументСсылка.СНТ") И Товар.ДокументПартии.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз Тогда
					
					Если ЗначениеЗаполнено(Товар.ИсточникПроисхожденияПослеСопоставления) Тогда
						СтрокаТовары.ИсточникПроисхождения = Товар.ИсточникПроисхожденияПослеСопоставления;
						ЗаполнитьЗначенияСвойств(СтрокаТовары, Товар.ИсточникПроисхожденияПослеСопоставления);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТовары.НомерИзСНТ = Строка(Товар.НомерРазделаИзСНТ) + "/" + Строка(Товар.НомерСтроки);
			
			//для доп. ЭСФ количественные и суммовые значения заполняем со знаком минус
			Если ВыборкаРеквизиты.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров Тогда
				СтрокаТовары.Количество = - СтрокаТовары.Количество;
				СтрокаТовары.СуммаБезНалогов = - СтрокаТовары.СуммаБезНалогов;
				СтрокаТовары.СуммаАкциза = - СтрокаТовары.СуммаАкциза;
				СтрокаТовары.ОборотПоРеализации = - СтрокаТовары.ОборотПоРеализации;
				СтрокаТовары.СуммаНДС = - СтрокаТовары.СуммаНДС;
				СтрокаТовары.Сумма = - СтрокаТовары.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Услуга Из Услуги Цикл
			СтрокаТовары = ОбъектЭСФ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, Услуга);
		КонецЦикла;
		
		// Очистить таблицу "Ошибки".
		ОбъектЭСФ.Ошибки.Очистить();
		
		// Заполнить автора.
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
			ОбъектЭСФ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
		КонецЕсли;
		
		// Показать различные предупреждения после заполнения ЭСФ.
		
		// Проверить, что БИК ГУ равен "KKMFKZ2A".
		Если ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК)
			И ОбъектЭСФ.ГосучреждениеБИК <> ОбработкаОбменЭСФ.ГосучреждениеБИК() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'БИК госучреждения отличается от ""[СтандартныйБИК]"".'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "[СтандартныйБИК]",  ОбработкаОбменЭСФ.ГосучреждениеБИК()); 
			Сообщение.Поле = "Объект.ГосучреждениеБИК";
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РезультатЗапросаПоРеквизитамСНТ(МассивСНТ) Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СНТ.Ссылка,
	|	СНТ.Дата,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	СНТ.ДокументОснование,
	|	ВЫБОР
	|		КОГДА СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|		КОГДА СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров) 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный)
	|	КОНЕЦ КАК Вид,
	|	СНТ.ВидОперации,
	|	СНТ.ГрузоотправительИдентификатор,
	|	СНТ.ГрузоотправительНаименование,
	|	СНТ.Грузоотправитель,
	|	СНТ.АдресОтправки,
	|	СНТ.ГрузополучательИдентификатор,
	|	СНТ.ГрузополучательНаименование,
	|	СНТ.Грузополучатель,
	|	СНТ.АдресДоставки,
	|	СНТ.ДоговорПоставкиНомер,
	|	СНТ.ДоговорПоставкиДата,
	|	СНТ.ДоговорПоставкиУсловияПоставки,
	|	СНТ.ДоговорПоставкиУсловияОплаты,
	|	СНТ.ДоговорПоставки,
	|	СНТ.НомерДоверенностиОтпуск КАК ДоверенностьНаПоставкуНомер,
	|	СНТ.ДатаДоверенностиОтпуск КАК ДоверенностьНаПоставкуДата,
	|	СНТ.АдресДоставки КАК ПунктНазначения,
	|	СНТ.Валюта,
	|	СНТ.ВалютаКод,
	|	СНТ.КурсВалюты,
	|	СНТ.ТипПодписи,
	|	СНТ.ЭЦП,
	|	СНТ.Причина,
	|	СНТ.Контрагент,
	|	СНТ.Организация,
	|	СНТ.ГрузополучательКодСтраныОтправки КАК ГрузополучательКодСтраны,
	|	СНТ.ГрузоотправительКодСтраныОтправки КАК ГрузоотправительКодСтраны,
	|	СНТ.ДоговорПоставкиУсловияПоставки,
	|	СНТ.СкладОтправитель КАК Склад,
	|	СНТ.СкладОтправкиИдентификатор,
	|	ИСТИНА КАК ОтражаетсяВВС,
	|	СНТ.МестоРеализацииНеРК,
	|	СНТ.Поставщик,
	|	СНТ.ПоставщикИдентификатор,
	|	СНТ.ПоставщикНаименование,
	|	СНТ.ПоставщикБИНСтруктурногоПодразделения,
	|	СНТ.ПоставщикБИНРеорганизованногоЛица,
	|	СНТ.ПоставщикАдвокат,
	|	СНТ.ПоставщикНотариус,
	|	СНТ.ПоставщикМедиатор,
	|	СНТ.ПоставщикЧастныйСудебныйИсполнитель КАК ПоставщикСудебныйИсполнитель,
	|	ЛОЖЬ КАК ПоставщикЭкспортер,
	|	СНТ.ПоставщикФизическоеЛицо,
	|	СНТ.ПоставщикРозничнаяРеализация,
	|	СНТ.ПоставщикФармацевтическийПроизводитель,
	|	СНТ.ПоставщикЛизингополучатель,
	|	СНТ.ПоставщикЛизингодатель,
	|	СНТ.ПоставщикДоверитель,
	|	СНТ.ПоставщикКомитент,
	|	СНТ.ПоставщикКомиссионер,
	|	СНТ.ПоставщикУчастникСРП,
	|	СНТ.ПоставщикУчастникСовместнойДеятельности,
	|	СНТ.ПоставщикКодСтраны,
	|	СНТ.Получатель,
	|	СНТ.ПолучательИдентификатор,
	|	СНТ.ПолучательНаименование,
	|	СНТ.ПолучательНерезидент КАК ПолучательНерезидентВерсия2,
	|	СНТ.ПолучательБИНРеорганизованногоЛица,
	|	СНТ.ПолучательБИНСтруктурногоПодразделения,
	|	СНТ.ПолучательЛизингополучатель,
	|	СНТ.ПолучательДоверитель,
	|	СНТ.ПолучательКомитент,
	|	СНТ.ПолучательКомиссионер,
	|	СНТ.ПолучательУчастникСРП,
	|	СНТ.ПолучательУчастникСовместнойДеятельности,
	|	СНТ.ПолучательАдвокат,
	|	СНТ.ПолучательНотариус,
	|	СНТ.ПолучательМедиатор,
	|	СНТ.ПолучательЧастныйСудебныйИсполнитель КАК ПолучательСудебныйИсполнитель,
	|	СНТ.ПолучательРозничнаяРеализация,
	|	СНТ.ПолучательФизическоеЛицо,
	|	СНТ.РегистрационныйНомерИСЭСФ,
	|	СНТ.ПолучательКодСтраны,
	|	ЕСТЬNULL(СНТ.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК Поставщик_ДокументПодтверждающийПоставку,
	|	ЕСТЬNULL(СНТ.ДокументОснование.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Поставщик_ДокументПодтверждающийПоставкуДата,
	|	СНТ.ТипСНТ,
	|	СНТ.АвтомобильныйТранспорт,
	|	СНТ.ЖелезнодорожныйТранспорт,
	|	СНТ.ВоздушныйТранспорт,
	|	СНТ.МорскойТранспорт,
	|	СНТ.Трубопровод
	|ПОМЕСТИТЬ ДанныеСНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка В(&МассивСНТ)
	|;
	|" + СНТСерверПереопределяемый.ДополнитьТекстЗапросаДляЭСФ() + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСНТ.Ссылка,
	|	ДанныеСНТ.Дата,
	|	ДанныеСНТ.Направление,
	|	ДанныеСНТ.ТипСНТ,
	|	ВЫБОР 
	|		КОГДА ДанныеПоСчетФактуре.ДатаОборота Есть NULL
	|			ТОГДА ДанныеСНТ.Дата
	|		ИНАЧЕ ДанныеПоСчетФактуре.ДатаОборота
	|	КОНЕЦ КАК ДатаОборота,
	|	ДанныеСНТ.Вид,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Вывоз)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК Поставщик_Экспортер,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ГрузополучательИдентификатор
	|		ИНАЧЕ ДанныеСНТ.ГрузоотправительИдентификатор
	|	КОНЕЦ КАК ГрузоотправительИдентификатор,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ГрузополучательНаименование
	|		ИНАЧЕ ДанныеСНТ.ГрузоотправительНаименование
	|	КОНЕЦ КАК ГрузоотправительНаименование,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.Грузополучатель
	|		ИНАЧЕ ДанныеСНТ.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеСНТ.АдресОтправки,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ГрузоотправительИдентификатор
	|		ИНАЧЕ ДанныеСНТ.ГрузополучательИдентификатор
	|	КОНЕЦ КАК ГрузополучательИдентификатор,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ГрузоотправительНаименование
	|		ИНАЧЕ ДанныеСНТ.ГрузополучательНаименование
	|	КОНЕЦ КАК ГрузополучательНаименование,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.Грузоотправитель
	|		ИНАЧЕ ДанныеСНТ.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ДанныеСНТ.АдресДоставки,
	|	ДанныеСНТ.ДоговорПоставкиНомер,
	|	ДанныеСНТ.ДоговорПоставкиДата,
	|	ДанныеСНТ.ДоговорПоставкиУсловияОплаты,
	|	ДанныеСНТ.ДоговорПоставкиУсловияПоставки,
	|	ДанныеСНТ.ДоговорПоставки,
	|	ДанныеСНТ.ДоверенностьНаПоставкуНомер,
	|	ДанныеСНТ.ДоверенностьНаПоставкуДата,
	|	ДанныеСНТ.ПунктНазначения,
	|	ДанныеСНТ.Валюта,
	|	ДанныеСНТ.ВалютаКод,
	|	ДанныеСНТ.КурсВалюты,
	|	ДанныеСНТ.ТипПодписи,
	|	ДанныеСНТ.ЭЦП,
	|	ДанныеСНТ.Причина,
	|	ДанныеСНТ.Контрагент,
	|	ДанныеСНТ.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ГрузоотправительКодСтраны
	|		ИНАЧЕ ДанныеСНТ.ГрузополучательКодСтраны
	|	КОНЕЦ КАК ГрузополучательКодСтраны,
	|	ДанныеСНТ.ДоговорПоставкиУсловияПоставки,
	|	ДанныеСНТ.Склад,
	|	ДанныеСНТ.СкладОтправкиИдентификатор,
	|	ДанныеСНТ.ОтражаетсяВВС,
	|	ДанныеСНТ.МестоРеализацииНеРК,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.Получатель
	|		ИНАЧЕ ДанныеСНТ.Поставщик
	|	КОНЕЦ КАК Поставщик_Поставщик,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПолучательИдентификатор
	|		ИНАЧЕ ДанныеСНТ.ПоставщикИдентификатор
	|	КОНЕЦ КАК Поставщик_ПоставщикИдентификатор,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПолучательНаименование
	|		ИНАЧЕ ДанныеСНТ.ПоставщикНаименование
	|	КОНЕЦ КАК Поставщик_ПоставщикНаименование,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПолучательБИНСтруктурногоПодразделения
	|		ИНАЧЕ ДанныеСНТ.ПоставщикБИНСтруктурногоПодразделения
	|	КОНЕЦ КАК Поставщик_БИНФилиала,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПолучательБИНРеорганизованногоЛица
	|		ИНАЧЕ ДанныеСНТ.ПоставщикБИНРеорганизованногоЛица
	|	КОНЕЦ КАК Поставщик_БИНРеорганизованногоЛица,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикАдвокат
	|	КОНЕЦ КАК Поставщик_Адвокат,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикНотариус
	|	КОНЕЦ КАК Поставщик_Нотариус,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикМедиатор
	|	КОНЕЦ КАК Поставщик_Медиатор,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикСудебныйИсполнитель
	|	КОНЕЦ КАК Поставщик_СудебныйИсполнитель,
	|	ДанныеСНТ.ПоставщикФизическоеЛицо КАК Поставщик_ФизическоеЛицо,
	|	ДанныеСНТ.ПоставщикРозничнаяРеализация КАК Поставщик_РозничнаяРеализация,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикФармацевтическийПроизводитель
	|	КОНЕЦ КАК Поставщик_ФармацевтическийПроизводитель,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикЛизингополучатель
	|	КОНЕЦ КАК Поставщик_Лизингополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикЛизингодатель
	|	КОНЕЦ КАК Поставщик_Лизингодатель,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикДоверитель
	|	КОНЕЦ КАК Поставщик_Доверитель,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикКомитент
	|	КОНЕЦ КАК Поставщик_Комитент,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикКомиссионер
	|	КОНЕЦ КАК Поставщик_Комиссионер,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикУчастникСРП
	|	КОНЕЦ КАК Поставщик_УчастникСРП,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ДанныеСНТ.ПоставщикУчастникСовместнойДеятельности
	|	КОНЕЦ КАК Поставщик_УчастникСовместнойДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.Поставщик
	|		ИНАЧЕ ДанныеСНТ.Получатель
	|	КОНЕЦ КАК Получатель_Получатель,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПоставщикИдентификатор
	|		ИНАЧЕ ДанныеСНТ.ПолучательИдентификатор
	|	КОНЕЦ КАК Получатель_ПолучательИдентификатор,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПоставщикНаименование
	|		ИНАЧЕ ДанныеСНТ.ПолучательНаименование
	|	КОНЕЦ КАК Получатель_ПолучательНаименование,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА """"
	|		ИНАЧЕ ДанныеСНТ.ПолучательНерезидентВерсия2
	|	КОНЕЦ КАК Получатель_НерезидентВерсия2,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПоставщикБИНРеорганизованногоЛица
	|		ИНАЧЕ ДанныеСНТ.ПолучательБИНРеорганизованногоЛица
	|	КОНЕЦ КАК Получатель_БИНРеорганизованногоЛица,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПоставщикБИНСтруктурногоПодразделения
	|		ИНАЧЕ ДанныеСНТ.ПолучательБИНСтруктурногоПодразделения
	|	КОНЕЦ КАК Получатель_БИНФилиала,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ДанныеСНТ.ПоставщикКодСтраны
	|		ИНАЧЕ ДанныеСНТ.ПолучательКодСтраны
	|	КОНЕЦ КАК Получатель_КодСтраны,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|				И ДанныеСНТ.ПоставщикРозничнаяРеализация
	|			ТОГДА Истина
	|		ИНАЧЕ ДанныеСНТ.ПолучательРозничнаяРеализация
	|	КОНЕЦ КАК Получатель_РозничнаяРеализация,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.ПолучательРозничнаяРеализация
	|				ИЛИ ДанныеСНТ.ПоставщикРозничнаяРеализация
	|			ТОГДА Ложь
	|		ИНАЧЕ ДанныеСНТ.ПолучательФизическоеЛицо
	|	КОНЕЦ КАК Получатель_ФизическоеЛицо,
	|	ДанныеСНТ.ПолучательЛизингополучатель КАК Получатель_Лизингодатель,
	|	ДанныеСНТ.ПолучательДоверитель КАК Получатель_Доверитель,
	|	ДанныеСНТ.ПолучательКомитент КАК Получатель_Комитент,
	|	ДанныеСНТ.ПолучательКомиссионер КАК Получатель_Комиссионер,
	|	ДанныеСНТ.ПолучательУчастникСРП КАК Получатель_УчастникСРП,
	|	ДанныеСНТ.ПолучательУчастникСовместнойДеятельности КАК Получатель_УчастникСовместнойДеятельности,
	|	ДанныеСНТ.ПолучательАдвокат КАК Получатель_Адвокат,
	|	ДанныеСНТ.ПолучательНотариус КАК Получатель_Нотариус,
	|	ДанныеСНТ.ПолучательМедиатор КАК Получатель_Медиатор,
	|	ДанныеСНТ.ПолучательСудебныйИсполнитель КАК Получатель_СудебныйИсполнитель,
	|	ДанныеСНТ.Поставщик_ДокументПодтверждающийПоставку КАК Поставщик_ДокументПодтверждающийПоставку,
	|	ДанныеСНТ.РегистрационныйНомерИСЭСФ,
	|	ДанныеСНТ.Поставщик_ДокументПодтверждающийПоставкуДата КАК Поставщик_ДокументПодтверждающийПоставкуДата,
	|	ВЫБОР
	|		КОГДА ДанныеСНТ.АвтомобильныйТранспорт
	|			ТОГДА ""30""
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ДанныеСНТ.ЖелезнодорожныйТранспорт
	|			ТОГДА ""20""
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ДанныеСНТ.ВоздушныйТранспорт
	|			ТОГДА ""40""
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ДанныеСНТ.МорскойТранспорт
	|			ТОГДА ""10""
	|		ИНАЧЕ ВЫБОР
	|		КОГДА ДанныеСНТ.Трубопровод
	|			ТОГДА ""71""
	|		ИНАЧЕ """"
	|	КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК СпособОтправленияПоКлассификатору,
	|	ВЫБОР 
	|		КОГДА ДанныеПоПолучателю.ГосударственноеУчреждение 
	|			ТОГДА """ + ОбработкаОбменЭСФ.ГосучреждениеБИК() + """ 
	|		ИНАЧЕ """" 
	|	КОНЕЦ КАК ГосучреждениеБИК,
	|	ДанныеПоПолучателю.ГосударственноеУчреждение,
	|	ДанныеПоПолучателю.Получатель_Адрес,
	|	ДанныеПоПолучателю.ПоверенныйПокупателяБИН,
	|	ДанныеПоПолучателю.ПоверенныйПокупателяАдресМестонахождения,
	|	ДанныеПоПолучателю.ПоверенныйПокупателяНаименование,
	|	ДанныеПоПоставщику.Поставщик_НомерСвидетельстваПоНДС,
	|	ДанныеПоПоставщику.Поставщик_СерияСвидетельстваПоНДС,
	|	ДанныеПоПоставщику.Поставщик_Адрес,
	|	ДанныеПоПоставщику.Поставщик_КБе,
	|	ДанныеПоПоставщику.Поставщик_ИИК,
	|	ДанныеПоПоставщику.Поставщик_БИК,
	|	ДанныеПоПоставщику.Поставщик_НаименованиеБанка,
	|	ДанныеПоСчетФактуре.СтруктурноеПодразделение,
	|	ДанныеПоСчетФактуре.СчетФактура,
	|	ДанныеПоОсновнымЭСФ.ОсновнойЭСФ КАК СвязанныйЭСФ,
	|	ДанныеПоОсновнымЭСФ.ОсновнойЭСФНомер КАК СвязанныйЭСФНомер,
	|	ДанныеПоОсновнымЭСФ.ОсновнойЭСФДата КАК СвязанныйЭСФДата,
	|	ДанныеПоОсновнымЭСФ.ОсновнойЭСФРегистрационныйНомер КАК СвязанныйЭСФРегистрационныйНомер
	|
	|ИЗ
	|	ДанныеСНТ КАК ДанныеСНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоПоставщику КАК ДанныеПоПоставщику
	|		ПО (ВЫБОР
	|				КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|					ТОГДА ДанныеСНТ.Получатель = ДанныеПоПоставщику.Поставщик
	|				ИНАЧЕ ДанныеСНТ.Поставщик = ДанныеПоПоставщику.Поставщик
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоПолучателю КАК ДанныеПоПолучателю
	|		ПО (ВЫБОР
	|				КОГДА ДанныеСНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|					ТОГДА ДанныеСНТ.Поставщик = ДанныеПоПолучателю.Получатель
	|				ИНАЧЕ ДанныеСНТ.Получатель = ДанныеПоПолучателю.Получатель
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоСчетФактуре КАК ДанныеПоСчетФактуре
	|		ПО ДанныеСНТ.ДокументОснование = ДанныеПоСчетФактуре.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоОсновнымЭСФ КАК ДанныеПоОсновнымЭСФ
	|		ПО ДанныеСНТ.ДокументОснование = ДанныеПоОсновнымЭСФ.ДокументОснование
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Возврат Результат	
	
КонецФункции

Функция РезультатЗапросаПоТоварам(СНТ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СНТ);
		
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СНТТовары.ТоварНаименование,
	               |	СНТТовары.Товар,
	               |	СНТТовары.КодТНВЭД,
	               |	СНТТовары.ЕдиницаИзмерения,
	               |	СНТТовары.ЕдиницаИзмерения.НаименованиеПолное КАК ЕдиницаИзмеренияНаименование,
	               |	СНТТовары.Количество,
	               |	СНТТовары.Цена,
	               |	СНТТовары.СуммаБезНалогов,
	               |	СНТТовары.СтавкаАкцизаЧисло,
	               |	СНТТовары.СтавкаАкциза,
	               |	СНТТовары.СуммаАкциза,
	               |	СНТТовары.СтавкаНДСЧисло,
	               |	СНТТовары.БезНДС,
	               |	СНТТовары.СтавкаНДС,
	               |	СНТТовары.СуммаНДС,
	               |	СНТТовары.СуммаБезНалогов + СНТТовары.СуммаАкциза КАК ОборотПоРеализации,
	               |	СНТТовары.Сумма,
	               |	СНТТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	               |	СНТТовары.ПризнакПроисхождения,
	               |	СНТТовары.НомерПозицииВДекларацииИлиЗаявлении,
	               |	СНТТовары.ИдентификаторТовара,
	               |	СНТТовары.ЕдиницаИзмеренияКод,
	               |	СНТТовары.ИсточникПроисхождения,
	               |	СНТТовары.ДополнительныйИдентификатор,
	               |	ЛОЖЬ КАК ПризнакУчетаНаВиртуальномСкладе,
	               |	СНТТовары.НомерСтроки КАК НомерСтроки,
	               |	0 КАК НомерРазделаИзСНТ
	               |ПОМЕСТИТЬ ТоварыСНТ
	               |ИЗ
	               |	Документ.СНТ.Товары КАК СНТТовары
	               |ГДЕ
	               |	СНТТовары.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТоварыВС.ТоварНаименование,
	               |	ТоварыВС.Товар,
	               |	ТоварыВС.КодТНВЭД,
	               |	ТоварыВС.ЕдиницаИзмерения,
	               |	ТоварыВС.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ТоварыВС.Количество,
	               |	ТоварыВС.Цена,
	               |	ТоварыВС.СуммаБезНалогов,
	               |	ТоварыВС.СтавкаАкцизаЧисло,
	               |	ТоварыВС.СтавкаАкциза,
	               |	ТоварыВС.СуммаАкциза,
	               |	ТоварыВС.СтавкаНДСЧисло,
	               |	ТоварыВС.БезНДС,
	               |	ТоварыВС.СтавкаНДС,
	               |	ТоварыВС.СуммаНДС,
	               |	ТоварыВС.СуммаБезНалогов + ТоварыВС.СуммаАкциза,
	               |	ТоварыВС.Сумма,
	               |	ТоварыВС.НомерЗаявленияВРамкахТС,
	               |	ТоварыВС.ПризнакПроисхождения,
	               |	ТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ТоварыВС.ИдентификаторТовара,
	               |	ТоварыВС.ЕдиницаИзмеренияКод,
	               |	ТоварыВС.ИсточникПроисхождения,
	               |	ТоварыВС.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ТоварыВС.НомерСтрокиСНТ,
	               |	1
	               |ИЗ
	               |	Документ.СНТ.ТоварыВС КАК ТоварыВС
	               |ГДЕ
	               |	ТоварыВС.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СНТЭтиловыйСпирт.ТоварНаименование,
	               |	СНТЭтиловыйСпирт.Товар,
	               |	СНТЭтиловыйСпирт.КодТНВЭД,
	               |	СНТЭтиловыйСпирт.ЕдиницаИзмерения,
	               |	СНТЭтиловыйСпирт.ЕдиницаИзмерения.НаименованиеПолное,
	               |	СНТЭтиловыйСпирт.Количество,
	               |	СНТЭтиловыйСпирт.Цена,
	               |	СНТЭтиловыйСпирт.СуммаБезНалогов,
	               |	СНТЭтиловыйСпирт.СтавкаАкцизаЧисло,
	               |	СНТЭтиловыйСпирт.СтавкаАкциза,
	               |	СНТЭтиловыйСпирт.СуммаАкциза,
	               |	СНТЭтиловыйСпирт.СтавкаНДСЧисло,
	               |	СНТЭтиловыйСпирт.БезНДС,
	               |	СНТЭтиловыйСпирт.СтавкаНДС,
	               |	СНТЭтиловыйСпирт.СуммаНДС,
	               |	СНТЭтиловыйСпирт.СуммаБезНалогов + СНТЭтиловыйСпирт.СуммаАкциза,
	               |	СНТЭтиловыйСпирт.Сумма,
	               |	СНТЭтиловыйСпирт.НомерЗаявленияВРамкахТС,
	               |	СНТЭтиловыйСпирт.ПризнакПроисхождения,
	               |	СНТЭтиловыйСпирт.НомерПозицииВДекларацииИлиЗаявлении,
	               |	СНТЭтиловыйСпирт.ИдентификаторТовара,
	               |	""112"",
	               |	СНТЭтиловыйСпирт.ИсточникПроисхождения,
	               |	СНТЭтиловыйСпирт.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	СНТЭтиловыйСпирт.НомерСтрокиСНТ,
	               |	2
	               |ИЗ
	               |	Документ.СНТ.ЭтиловыйСпирт КАК СНТЭтиловыйСпирт
	               |ГДЕ
	               |	СНТЭтиловыйСпирт.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СНТВиноматериал.ТоварНаименование,
	               |	СНТВиноматериал.Товар,
	               |	СНТВиноматериал.КодТНВЭД,
	               |	СНТВиноматериал.ЕдиницаИзмерения,
	               |	СНТВиноматериал.ЕдиницаИзмерения.НаименованиеПолное,
	               |	СНТВиноматериал.Количество,
	               |	СНТВиноматериал.Цена,
	               |	СНТВиноматериал.СуммаБезНалогов,
	               |	СНТВиноматериал.СтавкаАкцизаЧисло,
	               |	СНТВиноматериал.СтавкаАкциза,
	               |	СНТВиноматериал.СуммаАкциза,
	               |	СНТВиноматериал.СтавкаНДСЧисло,
	               |	СНТВиноматериал.БезНДС,
	               |	СНТВиноматериал.СтавкаНДС,
	               |	СНТВиноматериал.СуммаНДС,
	               |	СНТВиноматериал.СуммаБезНалогов + СНТВиноматериал.СуммаАкциза,
	               |	СНТВиноматериал.Сумма,
	               |	СНТВиноматериал.НомерЗаявленияВРамкахТС,
	               |	СНТВиноматериал.ПризнакПроисхождения,
	               |	СНТВиноматериал.НомерПозицииВДекларацииИлиЗаявлении,
	               |	СНТВиноматериал.ИдентификаторТовара,
	               |	""112"",
	               |	СНТВиноматериал.ИсточникПроисхождения,
	               |	СНТВиноматериал.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	СНТВиноматериал.НомерСтрокиСНТ,
	               |	3
	               |ИЗ
	               |	Документ.СНТ.Виноматериал КАК СНТВиноматериал
	               |ГДЕ
	               |	СНТВиноматериал.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СНТПивоПивныеНапитки.ТоварНаименование,
	               |	СНТПивоПивныеНапитки.Товар,
	               |	СНТПивоПивныеНапитки.КодТНВЭД,
	               |	СНТПивоПивныеНапитки.ЕдиницаИзмерения,
	               |	СНТПивоПивныеНапитки.ЕдиницаИзмерения.НаименованиеПолное,
	               |	СНТПивоПивныеНапитки.КоличествоУпаковок,
	               |	СНТПивоПивныеНапитки.Цена,
	               |	СНТПивоПивныеНапитки.СуммаБезНалогов,
	               |	СНТПивоПивныеНапитки.СтавкаАкцизаЧисло,
	               |	СНТПивоПивныеНапитки.СтавкаАкциза,
	               |	СНТПивоПивныеНапитки.СуммаАкциза,
	               |	СНТПивоПивныеНапитки.СтавкаНДСЧисло,
	               |	СНТПивоПивныеНапитки.БезНДС,
	               |	СНТПивоПивныеНапитки.СтавкаНДС,
	               |	СНТПивоПивныеНапитки.СуммаНДС,
	               |	СНТПивоПивныеНапитки.СуммаБезНалогов + СНТПивоПивныеНапитки.СуммаАкциза,
	               |	СНТПивоПивныеНапитки.Сумма,
	               |	СНТПивоПивныеНапитки.НомерЗаявленияВРамкахТС,
	               |	СНТПивоПивныеНапитки.ПризнакПроисхождения,
	               |	СНТПивоПивныеНапитки.НомерПозицииВДекларацииИлиЗаявлении,
	               |	СНТПивоПивныеНапитки.ИдентификаторТовара,
	               |	СНТПивоПивныеНапитки.ЕдиницаИзмеренияКод,
	               |	СНТПивоПивныеНапитки.ИсточникПроисхождения,
	               |	СНТПивоПивныеНапитки.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	СНТПивоПивныеНапитки.НомерСтрокиСНТ,
	               |	4
	               |ИЗ
	               |	Документ.СНТ.ПивоПивныеНапитки КАК СНТПивоПивныеНапитки
	               |ГДЕ
	               |	СНТПивоПивныеНапитки.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АлкогольнаяпродукцияКромеПива.ТоварНаименование,
	               |	АлкогольнаяпродукцияКромеПива.Товар,
	               |	АлкогольнаяпродукцияКромеПива.КодТНВЭД,
	               |	АлкогольнаяпродукцияКромеПива.ЕдиницаИзмерения,
	               |	АлкогольнаяпродукцияКромеПива.ЕдиницаИзмерения.НаименованиеПолное,
	               |	АлкогольнаяпродукцияКромеПива.КоличествоБутылок,
	               |	АлкогольнаяпродукцияКромеПива.Цена,
	               |	АлкогольнаяпродукцияКромеПива.СуммаБезНалогов,
	               |	АлкогольнаяпродукцияКромеПива.СтавкаАкцизаЧисло,
	               |	АлкогольнаяпродукцияКромеПива.СтавкаАкциза,
	               |	АлкогольнаяпродукцияКромеПива.СуммаАкциза,
	               |	АлкогольнаяпродукцияКромеПива.СтавкаНДСЧисло,
	               |	АлкогольнаяпродукцияКромеПива.БезНДС,
	               |	АлкогольнаяпродукцияКромеПива.СтавкаНДС,
	               |	АлкогольнаяпродукцияКромеПива.СуммаНДС,
	               |	АлкогольнаяпродукцияКромеПива.СуммаБезНалогов + АлкогольнаяпродукцияКромеПива.СуммаАкциза,
	               |	АлкогольнаяпродукцияКромеПива.Сумма,
	               |	АлкогольнаяпродукцияКромеПива.НомерЗаявленияВРамкахТС,
	               |	АлкогольнаяпродукцияКромеПива.ПризнакПроисхождения,
	               |	АлкогольнаяпродукцияКромеПива.НомерПозицииВДекларацииИлиЗаявлении,
	               |	АлкогольнаяпродукцияКромеПива.ИдентификаторТовара,
	               |	""868"",
	               |	АлкогольнаяпродукцияКромеПива.ИсточникПроисхождения,
	               |	АлкогольнаяпродукцияКромеПива.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	АлкогольнаяпродукцияКромеПива.НомерСтрокиСНТ,
	               |	5
	               |ИЗ
	               |	Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК АлкогольнаяпродукцияКромеПива
	               |ГДЕ
	               |	АлкогольнаяпродукцияКромеПива.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДанныеПоНефтепродуктам.ТоварНаименование,
	               |	ДанныеПоНефтепродуктам.Товар,
	               |	ДанныеПоНефтепродуктам.КодТНВЭД,
	               |	ДанныеПоНефтепродуктам.ЕдиницаИзмерения,
	               |	ДанныеПоНефтепродуктам.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ДанныеПоНефтепродуктам.Количество,
	               |	ДанныеПоНефтепродуктам.Цена,
	               |	ДанныеПоНефтепродуктам.СуммаБезНалогов,
	               |	ДанныеПоНефтепродуктам.СтавкаАкцизаЧисло,
	               |	ДанныеПоНефтепродуктам.СтавкаАкциза,
	               |	ДанныеПоНефтепродуктам.СуммаАкциза,
	               |	ДанныеПоНефтепродуктам.СтавкаНДСЧисло,
	               |	ДанныеПоНефтепродуктам.БезНДС,
	               |	ДанныеПоНефтепродуктам.СтавкаНДС,
	               |	ДанныеПоНефтепродуктам.СуммаНДС,
	               |	ДанныеПоНефтепродуктам.СуммаБезНалогов + ДанныеПоНефтепродуктам.СуммаАкциза,
	               |	ДанныеПоНефтепродуктам.Сумма,
	               |	ДанныеПоНефтепродуктам.НомерЗаявленияВРамкахТС,
	               |	ДанныеПоНефтепродуктам.ПризнакПроисхождения,
	               |	ДанныеПоНефтепродуктам.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ДанныеПоНефтепродуктам.ИдентификаторТовара,
	               |	ДанныеПоНефтепродуктам.ЕдиницаИзмеренияКод,
	               |	ДанныеПоНефтепродуктам.ИсточникПроисхождения,
	               |	ДанныеПоНефтепродуктам.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ДанныеПоНефтепродуктам.НомерСтрокиСНТ,
	               |	6
	               |ИЗ
	               |	Документ.СНТ.ДанныеПоНефтепродуктам КАК ДанныеПоНефтепродуктам
	               |ГДЕ
	               |	ДанныеПоНефтепродуктам.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДанныеПоБиотопливу.ТоварНаименование,
	               |	ДанныеПоБиотопливу.Товар,
	               |	ДанныеПоБиотопливу.КодТНВЭД,
	               |	ДанныеПоБиотопливу.ЕдиницаИзмерения,
	               |	ДанныеПоБиотопливу.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ДанныеПоБиотопливу.Количество,
	               |	ДанныеПоБиотопливу.Цена,
	               |	ДанныеПоБиотопливу.СуммаБезНалогов,
	               |	ДанныеПоБиотопливу.СтавкаАкцизаЧисло,
	               |	ДанныеПоБиотопливу.СтавкаАкциза,
	               |	ДанныеПоБиотопливу.СуммаАкциза,
	               |	ДанныеПоБиотопливу.СтавкаНДСЧисло,
	               |	ДанныеПоБиотопливу.БезНДС,
	               |	ДанныеПоБиотопливу.СтавкаНДС,
	               |	ДанныеПоБиотопливу.СуммаНДС,
	               |	ДанныеПоБиотопливу.СуммаБезНалогов + ДанныеПоБиотопливу.СуммаАкциза,
	               |	ДанныеПоБиотопливу.Сумма,
	               |	ДанныеПоБиотопливу.НомерЗаявленияВРамкахТС,
	               |	ДанныеПоБиотопливу.ПризнакПроисхождения,
	               |	ДанныеПоБиотопливу.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ДанныеПоБиотопливу.ИдентификаторТовара,
	               |	ДанныеПоБиотопливу.ЕдиницаИзмеренияКод,
	               |	ДанныеПоБиотопливу.ИсточникПроисхождения,
	               |	ДанныеПоБиотопливу.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ДанныеПоБиотопливу.НомерСтрокиСНТ,
	               |	7
	               |ИЗ
	               |	Документ.СНТ.ДанныеПоБиотопливу КАК ДанныеПоБиотопливу
	               |ГДЕ
	               |	ДанныеПоБиотопливу.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТабачнаяПродукция.ТоварНаименование,
	               |	ТабачнаяПродукция.Товар,
	               |	ТабачнаяПродукция.КодТНВЭД,
	               |	ТабачнаяПродукция.ЕдиницаИзмерения,
	               |	ТабачнаяПродукция.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ТабачнаяПродукция.КоличествоПачек,
	               |	ТабачнаяПродукция.Цена,
	               |	ТабачнаяПродукция.СуммаБезНалогов,
	               |	ТабачнаяПродукция.СтавкаАкцизаЧисло,
	               |	ТабачнаяПродукция.СтавкаАкциза,
	               |	ТабачнаяПродукция.СуммаАкциза,
	               |	ТабачнаяПродукция.СтавкаНДСЧисло,
	               |	ТабачнаяПродукция.БезНДС,
	               |	ТабачнаяПродукция.СтавкаНДС,
	               |	ТабачнаяПродукция.СуммаНДС,
	               |	ТабачнаяПродукция.СуммаБезНалогов + ТабачнаяПродукция.СуммаАкциза,
	               |	ТабачнаяПродукция.Сумма,
	               |	ТабачнаяПродукция.НомерЗаявленияВРамкахТС,
	               |	ТабачнаяПродукция.ПризнакПроисхождения,
	               |	ТабачнаяПродукция.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ТабачнаяПродукция.ИдентификаторТовара,
	               |	ТабачнаяПродукция.ЕдиницаИзмеренияКод,
	               |	ТабачнаяПродукция.ИсточникПроисхождения,
	               |	ТабачнаяПродукция.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ТабачнаяПродукция.НомерСтрокиСНТ,
	               |	8
	               |ИЗ
	               |	Документ.СНТ.ТабачнаяПродукция КАК ТабачнаяПродукция
	               |ГДЕ
	               |	ТабачнаяПродукция.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДругиеТоварыЦифроваяМаркировка.ТоварНаименование,
	               |	ДругиеТоварыЦифроваяМаркировка.Товар,
	               |	ДругиеТоварыЦифроваяМаркировка.КодТНВЭД,
	               |	ДругиеТоварыЦифроваяМаркировка.ЕдиницаИзмерения,
	               |	ДругиеТоварыЦифроваяМаркировка.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ДругиеТоварыЦифроваяМаркировка.Количество,
	               |	ДругиеТоварыЦифроваяМаркировка.Цена,
	               |	ДругиеТоварыЦифроваяМаркировка.СуммаБезНалогов,
	               |	ДругиеТоварыЦифроваяМаркировка.СтавкаАкцизаЧисло,
	               |	ДругиеТоварыЦифроваяМаркировка.СтавкаАкциза,
	               |	ДругиеТоварыЦифроваяМаркировка.СуммаАкциза,
	               |	ДругиеТоварыЦифроваяМаркировка.СтавкаНДСЧисло,
	               |	ДругиеТоварыЦифроваяМаркировка.БезНДС,
	               |	ДругиеТоварыЦифроваяМаркировка.СтавкаНДС,
	               |	ДругиеТоварыЦифроваяМаркировка.СуммаНДС,
	               |	ДругиеТоварыЦифроваяМаркировка.СуммаБезНалогов + ДругиеТоварыЦифроваяМаркировка.СуммаАкциза,
	               |	ДругиеТоварыЦифроваяМаркировка.Сумма,
	               |	ДругиеТоварыЦифроваяМаркировка.НомерЗаявленияВРамкахТС,
	               |	ДругиеТоварыЦифроваяМаркировка.ПризнакПроисхождения,
	               |	ДругиеТоварыЦифроваяМаркировка.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ДругиеТоварыЦифроваяМаркировка.ИдентификаторТовара,
	               |	ДругиеТоварыЦифроваяМаркировка.ЕдиницаИзмеренияКод,
	               |	ДругиеТоварыЦифроваяМаркировка.ИсточникПроисхождения,
	               |	ДругиеТоварыЦифроваяМаркировка.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ДругиеТоварыЦифроваяМаркировка.НомерСтрокиСНТ,
	               |	9
	               |ИЗ
	               |	Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК ДругиеТоварыЦифроваяМаркировка
	               |ГДЕ
	               |	ДругиеТоварыЦифроваяМаркировка.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТоварыЭкспортныйКонтроль.ТоварНаименование,
	               |	ТоварыЭкспортныйКонтроль.Товар,
	               |	ТоварыЭкспортныйКонтроль.КодТНВЭД,
	               |	ТоварыЭкспортныйКонтроль.ЕдиницаИзмерения,
	               |	ТоварыЭкспортныйКонтроль.ЕдиницаИзмерения.НаименованиеПолное,
	               |	ТоварыЭкспортныйКонтроль.Количество,
	               |	ТоварыЭкспортныйКонтроль.Цена,
	               |	ТоварыЭкспортныйКонтроль.СуммаБезНалогов,
	               |	ТоварыЭкспортныйКонтроль.СтавкаАкцизаЧисло,
	               |	ТоварыЭкспортныйКонтроль.СтавкаАкциза,
	               |	ТоварыЭкспортныйКонтроль.СуммаАкциза,
	               |	ТоварыЭкспортныйКонтроль.СтавкаНДСЧисло,
	               |	ТоварыЭкспортныйКонтроль.БезНДС,
	               |	ТоварыЭкспортныйКонтроль.СтавкаНДС,
	               |	ТоварыЭкспортныйКонтроль.СуммаНДС,
	               |	ТоварыЭкспортныйКонтроль.СуммаБезНалогов + ТоварыЭкспортныйКонтроль.СуммаАкциза,
	               |	ТоварыЭкспортныйКонтроль.Сумма,
	               |	ТоварыЭкспортныйКонтроль.НомерЗаявленияВРамкахТС,
	               |	ТоварыЭкспортныйКонтроль.ПризнакПроисхождения,
	               |	ТоварыЭкспортныйКонтроль.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ТоварыЭкспортныйКонтроль.ИдентификаторТовара,
	               |	ТоварыЭкспортныйКонтроль.ЕдиницаИзмеренияКод,
	               |	ТоварыЭкспортныйКонтроль.ИсточникПроисхождения,
	               |	ТоварыЭкспортныйКонтроль.ДополнительныйИдентификатор,
	               |	ИСТИНА,
	               |	ТоварыЭкспортныйКонтроль.НомерСтрокиСНТ,
	               |	10
	               |ИЗ
	               |	Документ.СНТ.ТоварыЭкспортныйКонтроль КАК ТоварыЭкспортныйКонтроль
	               |ГДЕ
	               |	ТоварыЭкспортныйКонтроль.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыСНТ.ТоварНаименование,
	               |	ТоварыСНТ.Товар,
	               |	ТоварыСНТ.КодТНВЭД,
	               |	ТоварыСНТ.Количество,
	               |	ТоварыСНТ.Цена,
	               |	ТоварыСНТ.СуммаБезНалогов,
	               |	ТоварыСНТ.СтавкаАкцизаЧисло,
	               |	ТоварыСНТ.СтавкаАкциза,
	               |	ТоварыСНТ.СуммаАкциза,
	               |	ТоварыСНТ.СтавкаНДСЧисло,
	               |	ТоварыСНТ.БезНДС,
	               |	ТоварыСНТ.СтавкаНДС,
	               |	ТоварыСНТ.СуммаНДС,
	               |	ТоварыСНТ.ОборотПоРеализации,
	               |	ТоварыСНТ.Сумма,
	               |	ЕСТЬNULL(ИсточникиПроисхождения.НомерЗаявленияВРамкахТС, ТоварыСНТ.НомерЗаявленияВРамкахТС) КАК НомерЗаявленияВРамкахТС,
	               |	ТоварыСНТ.ПризнакПроисхождения,
	               |	ЕСТЬNULL(ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении, ТоварыСНТ.НомерПозицииВДекларацииИлиЗаявлении) КАК НомерПозицииВДекларацииИлиЗаявлении,
	               |	ТоварыСНТ.ИдентификаторТовара,
	               |	ТоварыСНТ.ДополнительныйИдентификатор,
	               |	ТоварыСНТ.ИсточникПроисхождения,
	               |	ТоварыСНТ.ПризнакУчетаНаВиртуальномСкладе,
	               |	ТоварыСНТ.НомерСтроки КАК НомерСтроки,
	               |	ТоварыСНТ.НомерРазделаИзСНТ КАК НомерРазделаИзСНТ,
	               |	ТоварыСНТ.ЕдиницаИзмеренияКод,
	               |	ТоварыСНТ.ЕдиницаИзмерения,
	               |	ТоварыСНТ.ЕдиницаИзмеренияНаименование,
	               |	ЕСТЬNULL(ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС, """") КАК ТоварНаименованиеВРамкахТС,
	               |	ЕСТЬNULL(ИсточникиПроисхождения.ТипПошлины, ЗНАЧЕНИЕ(Перечисление.ТипыПошлинВС.ПустаяСсылка)) КАК ТипПошлины,
	               |	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	               |	ЕСТЬNULL(СопоставленныеИП.ИсточникПроисхожденияПослеСопоставления, ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)) КАК ИсточникПроисхожденияПослеСопоставления
	               |ИЗ
	               |	ТоварыСНТ КАК ТоварыСНТ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	               |		ПО ТоварыСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставленныеИсточникиПроисхождения КАК СопоставленныеИП
	               |		ПО ТоварыСНТ.ИсточникПроисхождения = СопоставленныеИП.ИсточникПроисхожденияДоСопоставления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерРазделаИзСНТ,
	               |	НомерСтроки";	
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;	

КонецФункции

Функция РезультатЗапросаПоУслугам(СНТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = СНТСерверПереопределяемый.ТекстЗапросаПоУслугамВводЭСФИзСНТ();
	
	Запрос.УстановитьПараметр("СНТДокументОснование", СНТ.ДокументОснование);
	
	ТЧРезультат = Запрос.Выполнить().Выгрузить();    
	
	Возврат ТЧРезультат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыПоставщикаИзСНТ(ПоставщикиСтрока, ВыборкаРеквизиты)
	
	ЗаполнитьЗначенияСвойствПоПрефиксу(ПоставщикиСтрока, ВыборкаРеквизиты, "Поставщик_");
	
	ПоставщикиСтрока.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСерверПереопределяемый.ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(ВыборкаРеквизиты.Поставщик_Поставщик);	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПолучателяИзСНТ(ПолучателиСтрока, ВыборкаРеквизиты)
	
	ЗаполнитьЗначенияСвойствПоПрефиксу(ПолучателиСтрока, ВыборкаРеквизиты, "Получатель_");
	
КонецПроцедуры

//Заполняет ДокументПодтверждающийПоставкуНомер и ДокументПодтверждающийПоставкуДата
//в зависимости от наличия и заполненности полей НомерДокументаГЗ и ДатаДокументаГЗ в документе-основании счета фактуры
//
Процедура ЗаполнитьРеквизитыДокументаПодтверждающегоПоставку(Знач ВыборкаРеквизиты, ПоставщикиСтрока, ОбъектЭСФ = Неопределено)
	
	Если ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку) Тогда
		Если ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("НомерДокументаГЗ", ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку.Метаданные()) 
			И ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("ДатаДокументаГЗ", ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку.Метаданные()) Тогда
			
			
			НомерДокументаГЗ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку, "НомерДокументаГЗ");
			ДатаДокументаГЗ  = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку, "ДатаДокументаГЗ");
			Если ЗначениеЗаполнено(НомерДокументаГЗ) И ЗначениеЗаполнено(ДатаДокументаГЗ) Тогда
				ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер	= НомерДокументаГЗ;
				ОбъектЭСФ.ДокументПодтверждающийПоставкуДата    = ДатаДокументаГЗ;
			Иначе
				ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
				ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;	
			КонецЕсли;
		Иначе
			ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
			ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;		
		КонецЕсли;
	Иначе
		ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствПоПрефиксу(Приемник, Знач Источник, Знач Префикс, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено) 
	
	Если ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		РезультатЗапроса = Источник.Владелец();
		
		СтруктураИсточник = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Если Найти(Колонка.Имя, Префикс) = 1 Тогда
				ИмяПоля = СтрЗаменить(Колонка.Имя, Префикс, "");
				СтруктураИсточник.Вставить(ИмяПоля, Источник[Колонка.Имя]);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураИсточник, СписокСвойств, ИсключаяСвойства); 
	
	Если СтрНайти(Строка(Приемник), "Поставщики") <> 0 Тогда
		СНТКлиентСерверПереопределяемый.ПолучитьАдресПоставщикаПолучателяВЭСФИзСНТ(Приемник, Источник.Поставщик_Поставщик, Источник.Дата);
	ИначеЕсли СтрНайти(Строка(Приемник), "Получатели") <> 0 Тогда
		СНТКлиентСерверПереопределяемый.ПолучитьАдресПоставщикаПолучателяВЭСФИзСНТ(Приемник, Источник.Получатель_Получатель, Источник.Дата);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает несколько ЭСФ И СФ на основании нескольких СНТ.
//
Функция СоздатьСписокИсходящихЭСФиСФИзСНТ(МассивСНТ) Экспорт
	
	СписокСозданныхСчетовФактурИЭСФ = СНТСерверПереопределяемый.СоздатьСписокИсходящихЭСФиСФИзСНТ(МассивСНТ);
	
	Возврат СписокСозданныхСчетовФактурИЭСФ;
	
КонецФункции

// См. СНТСервер.СопоставитьДанныеЭСФИЗСНТ()
Процедура СопоставитьДанныеЭСФИЗСНТ(СсылкаСНТ, ОбъектЭСФ, РезультатПроверки) Экспорт

	// Объект СНТ не записывается, он получается только для сокращения обращений к ИБ.
	СопоставляемыйОбъектСНТ = СсылкаСНТ.ПолучитьОбъект();
	СравнитьЭСФиСНТ(СопоставляемыйОбъектСНТ, ОбъектЭСФ, РезультатПроверки);

КонецПроцедуры

// - Реквизит - проверяется совпадение значений реквизитов.
// - ТабличнойЧастьРеквизит - перебираются все строки табличной части и проверяется, что указанный реквизит совпадает.
Процедура СравнитьЭСФиСНТ(Знач СопоставляемыйОбъектСНТ, Знач ОбъектЭСФ, РезультатПроверки) Экспорт
	
	ТаблицаРазличий = Новый ТаблицаЗначений;
	ТаблицаРазличий.Колонки.Добавить("Сообщение");
	
	// Получить объекты ЭСФ и СНТ, т.к. обращаться множество раз к реквизитам объекта,
	// может быть оптимальнее, чем к реквизитам ссылки.
	
	ТаблицаРеквизитовДляПроверки = РеквизитыДляСравненияЭСФиСНТ();
	РеквизитТабличнойЧасти = ТаблицаРеквизитовДляПроверки.РеквизитТабличнойЧасти;
	ТабличнаяЧастьРеквизит = ТаблицаРеквизитовДляПроверки.ТабличнаяЧастьРеквизит;
	Реквизит = ТаблицаРеквизитовДляПроверки.Реквизит;
	
	// Раздел G. реквизит "Курс валюты"
	Если ОбъектЭСФ.ВалютаКод <> "KZT" Тогда
		Если ОбъектЭСФ.КурсВалюты <> СопоставляемыйОбъектСНТ.КурсВалюты Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'G. Данные по товарам (работам, услугам). Отличается значение реквизита ""Курс"" от значения реквизита ""Курс валюты"" в СНТ.'"));	
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектЭСФ.Вид <> ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		
		Для каждого Строка Из Реквизит Цикл
			Если СопоставляемыйОбъектСНТ[Строка.ИмяРеквизитаСНТ] <> ОбъектЭСФ[Строка.ИмяРеквизитаЭСФ] Тогда
				Различие = ТаблицаРазличий.Добавить();
				Различие.Сообщение = НСтр("ru = '%1. Отличается значение реквизита ""%2"" от значения реквизита ""%3"" в СНТ.'");
				Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				Различие.Сообщение, Строка.СинонимРазделаЭСФ, Строка.СинонимРеквизитаЭСФ, Строка.СинонимРеквизитаСНТ);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если СопоставляемыйОбъектСНТ.ДатаОтгрузкиТовара <> ОбъектЭСФ.ДатаОборота Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'A. Общий раздел. Отличается значение реквизита ""Дата оборота"" от значения реквизита грузоотправителя ""Дата отгрузки товара"" в СНТ.'"));	
		КонецЕсли;
		
		// реверсная проверка
		Если СопоставляемыйОбъектСНТ.ГрузополучательИдентификатор <> ОбъектЭСФ.ГрузоотправительИдентификатор Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'D. Грузоотправитель. Отличается значение реквизита грузоотправителя ""ИИН/БИН"" от значения реквизита грузополучателя ""ИИН/БИН"" в СНТ.'"));	
		КонецЕсли;
		
		// реверсная проверка
		Если СопоставляемыйОбъектСНТ.ГрузоотправительИдентификатор <> ОбъектЭСФ.ГрузополучательИдентификатор Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'D. Грузоотправитель. Отличается значение реквизита грузополучателя ""ИИН/БИН"" от значения реквизита грузоотправителя ""ИИН/БИН"" в СНТ.'"));	
		КонецЕсли;
		
		// реверсная проверка
		Если СопоставляемыйОбъектСНТ.ГрузоотправительКодСтраныОтправки <> ОбъектЭСФ.ГрузополучательКодСтраны Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'D. Грузоотправитель. Отличается значение реквизита грузополучателя ""Код страны"" от значения реквизита ""Код страны отправки"" в СНТ.'"));	
		КонецЕсли;
		
		Если СопоставляемыйОбъектСНТ.РегистрационныйНомерИСЭСФ <> ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = (НСтр("ru = 'F. Документы поставки. Отличается значение реквизита ""Номер документа поставки"" от значения реквизита грузоотправителя ""Регистрационный номер СНТ в ИС ЭСФ"" в СНТ.'"));	
		КонецЕсли;

	КонецЕсли;
	
	//Поставщик, Получатель
	Для каждого Строка Из ТабличнаяЧастьРеквизит Цикл
		Если ОбъектЭСФ[Строка.ИмяТабличнойЧастиЭСФ][0][Строка.ИмяРеквизитаЭСФ] <> СопоставляемыйОбъектСНТ[Строка.ИмяРеквизитаСНТ] Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = НСтр("ru = '%1. Отличается значение реквизита ""%2"" от значения реквизита ""%3"" в СНТ.'");
			Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			Различие.Сообщение, Строка.СинонимРазделаЭСФ, Строка.СинонимРеквизитаЭСФ, Строка.СинонимРеквизитаСНТ);
		КонецЕсли;
	КонецЦикла;
		
	ТабличныеЧастиСНТ = ТабличныеЧастиДокументаСНТВС();
	ПараметрыОтбора = Новый Структура;
	Для каждого СтрокаТЧ Из ОбъектЭСФ.Товары Цикл
		ПараметрыОтбора.Вставить("ИдентификаторТовара", СтрокаТЧ.ИдентификаторТовара);
		Для каждого ТЧ Из ТабличныеЧастиСНТ Цикл
			НайденныеСтроки = СопоставляемыйОбъектСНТ[ТЧ].НайтиСтроки(ПараметрыОтбора);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НомерСтроки = СтрокаТЧ.НомерСтроки Тогда
					
					Для каждого Строка Из РеквизитТабличнойЧасти Цикл
						Если СопоставляемыйОбъектСНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров
							И (Строка.ИмяРеквизитаЭСФ = "СуммаБезНалогов" ИЛИ Строка.ИмяРеквизитаЭСФ = "СуммаНДС" ИЛИ Строка.ИмяРеквизитаЭСФ = "Сумма") Тогда
							Продолжить;
						КонецЕсли; 
						Если СтрокаТЧ[Строка.ИмяРеквизитаЭСФ] <> НайденнаяСтрока[Строка.ИмяРеквизитаСНТ] Тогда
							Различие = ТаблицаРазличий.Добавить();
							Различие.Сообщение = НСтр("ru = '%1. В табличной части ""%2"", строка № ""%3"", отличается значение реквизита ""%4"" от значения реквизита ""%5"" в СНТ.'");
							Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Различие.Сообщение, Строка.СинонимРазделаЭСФ, Строка.СинонимТабличнойЧастиЭСФ, СтрокаТЧ.НомерСтроки, Строка.СинонимРеквизитаЭСФ, Строка.СинонимРеквизитаСНТ);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли; 	
				
			КонецЦикла; 
			
		КонецЦикла;
	КонецЦикла;
	
	//////////////////////////////// Проверки с условиями
	// B. Поставщики - ИИН/БИН. Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП Поставщик - 46 Номер и 47 Дата, то не заполняется
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаНомер) 
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаДата)
		И ОбъектЭСФ.Поставщики[0].ПоставщикИдентификатор <> СопоставляемыйОбъектСНТ.ПоставщикИдентификатор 
		И ОбъектЭСФ.Вид <> ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'B. Поставщики. Отличается значение реквизита ""ИИН, БИН поставщика"" от значения реквизита ""ИИН/БИН поставщика"" в СНТ.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаНомер) 
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаДата)
		И ОбъектЭСФ.Поставщики[0].ПоставщикИдентификатор <> СопоставляемыйОбъектСНТ.ПолучательИдентификатор 
		И ОбъектЭСФ.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'B. Поставщики. Отличается значение реквизита ""ИИН, БИН поставщика"" от значения реквизита ""ИИН/БИН получателя"" в СНТ.'"));
	КонецЕсли;
	
	// B. Поставщики - Экспортер должен соответсвовать одному из значений поля 8. Вывоз товаров с территории РК: 8.1 Экспорт из документа "СНТ"
	Если (((СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.Экспорт)
		ИЛИ (СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ВременныйВывоз)
		ИЛИ (СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ВывозВременноВвезенногоТовара)
		ИЛИ (СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ВывозНаПереработку)
		ИЛИ (СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ)
		ИЛИ (СопоставляемыйОбъектСНТ.ВидВывоза = Перечисления.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна))
		И НЕ ОбъектЭСФ.Поставщики[0].Экспортер) Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'B. Поставщики. Отличается значение реквизита ""Экспортёр"" от значения реквизита ""Вывоз товаров с территории РК"" в СНТ.'"));
	КонецЕсли;
	
	// B. Поставщики - ИИН/БИН. Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП Поставщик - 46 Номер и 47 Дата, то не заполняется
	Если ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаНомер) 
		И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаДата)
		И ЗначениеЗаполнено(ОбъектЭСФ.Поставщики[0].ПоставщикИдентификатор) 
		И ЗначениеЗаполнено(СопоставляемыйОбъектСНТ.ПоставщикИдентификатор)
		И ОбъектЭСФ.Поставщики[0].ПоставщикИдентификатор = СопоставляемыйОбъектСНТ.ПоставщикИдентификатор Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'B. Поставщики. Не заполнять значение реквизита ""ИИН, БИН поставщика"" и значение реквизита ""ИИН/БИН поставщика"" в СНТ.
		| Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП - Номер и Дата.'"));
	КонецЕсли;
	
	// C. Получатель - ИИН/БИН. Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП Получатель - 48 Номер и 49 Дата, то не заполняется
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяНомер)
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяДата)
		И ОбъектЭСФ.Получатели[0].ПолучательИдентификатор <> СопоставляемыйОбъектСНТ.ПолучательИдентификатор 
		И ОбъектЭСФ.Вид <> ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'C. Получатели. Отличается значение реквизита ""ИИН, БИН получателя"" от значения реквизита ""ИИН/БИН получателя"" в СНТ.'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяНомер)
		И НЕ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяДата)
		И ОбъектЭСФ.Получатели[0].ПолучательИдентификатор <> СопоставляемыйОбъектСНТ.ПоставщикИдентификатор 
		И ОбъектЭСФ.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'C. Получатели. Отличается значение реквизита ""ИИН, БИН получателя"" от значения реквизита ""ИИН/БИН поставщика"" в СНТ.'"));
	КонецЕсли;
	
	// C. Получатель - при установленной категории «G - участник СРП» или «D- участник договора о совместной деятельности»
	// C. Получатель - ИИН/БИН. Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП Получатель - 48 Номер и 49 Дата, то не заполняется
	Если ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяНомер)
		И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяДата)
		И ЗначениеЗаполнено(ОбъектЭСФ.Получатели[0].ПолучательИдентификатор)
		И ЗначениеЗаполнено(СопоставляемыйОбъектСНТ.ПолучательИдентификатор)
		И ОбъектЭСФ.Получатели[0].ПолучательИдентификатор = СопоставляемыйОбъектСНТ.ПолучательИдентификатор Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'C. Получатели. Не заполнять значение реквизита ""ИИН, БИН получателя"" и значение реквизита ""ИИН/БИН получателя"" в СНТ.
		| Если заполнены поля в Раздел F1. Договор (контракт) а рамках УСД/СРП - Номер и Дата.'"));
	КонецЕсли;
	
	// E. Условия поставки - Способ отправления 39.1. Вид транспорта
	//30 - Автодорожный транспорт, за исключением транспортных средств, указанных под кодами 31, 32 - АвтомобильныйТранспорт
	//20 - Железнодорожный транспорт - ЖелезнодорожныйТранспорт
	//40 - Воздушный транспорт - ВоздушныйТранспорт
	//10 - Морской/речной транспорт - МорскойТранспорт
	//71 - Трубопроводный транспорт - Трубопровод
	//Нет проверки - Мультимодальный
	Если (((СопоставляемыйОбъектСНТ.ВоздушныйТранспорт) ИЛИ (СопоставляемыйОбъектСНТ.ЖелезнодорожныйТранспорт)
		ИЛИ (СопоставляемыйОбъектСНТ.МорскойТранспорт) ИЛИ (СопоставляемыйОбъектСНТ.Трубопровод)
		ИЛИ (СопоставляемыйОбъектСНТ.АвтомобильныйТранспорт))
		ИЛИ (ЗначениеЗаполнено(ОбъектЭСФ.СпособОтправленияПоКлассификатору)))
		И (НЕ СопоставляемыйОбъектСНТ.Мультимодальный) Тогда
		
		ВоздушныйТранспорт = ?(ОбъектЭСФ.СпособОтправленияПоКлассификатору = "40", Истина, Ложь);
		МорскойТранспорт = ?(ОбъектЭСФ.СпособОтправленияПоКлассификатору = "10", Истина, Ложь);
		Трубопроводный = ?(ОбъектЭСФ.СпособОтправленияПоКлассификатору = "71", Истина, Ложь);
		ЖелезнодорожныйТранспорт = ?(ОбъектЭСФ.СпособОтправленияПоКлассификатору = "20", Истина, Ложь);
		АвтомобильныйТранспорт = ?(ОбъектЭСФ.СпособОтправленияПоКлассификатору = "30", Истина, Ложь);
		
		Сообщение = (НСтр("ru = 'E. Условия поставки. Отличается значение реквизита ""Способ отправления"" от значения реквизита '"));
		Если СопоставляемыйОбъектСНТ.ВоздушныйТранспорт И НЕ ВоздушныйТранспорт Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Воздушный"" в СНТ.";
		КонецЕсли;
		Если СопоставляемыйОбъектСНТ.МорскойТранспорт И НЕ МорскойТранспорт Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Морской или внутренний водный"" в СНТ.";
		КонецЕсли; 
		Если СопоставляемыйОбъектСНТ.Трубопровод И НЕ Трубопроводный Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Трубопровод"" в СНТ.";
		КонецЕсли; 
		Если СопоставляемыйОбъектСНТ.ЖелезнодорожныйТранспорт И НЕ ЖелезнодорожныйТранспорт Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Железнодорожный"" в СНТ.";
		КонецЕсли; 
		Если СопоставляемыйОбъектСНТ.АвтомобильныйТранспорт И НЕ АвтомобильныйТранспорт Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Автомобильный"" в СНТ.";
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектЭСФ.СпособОтправленияПоКлассификатору) И 
			(НЕ СопоставляемыйОбъектСНТ.АвтомобильныйТранспорт И НЕ СопоставляемыйОбъектСНТ.ЖелезнодорожныйТранспорт
			И НЕ СопоставляемыйОбъектСНТ.Трубопровод и НЕ СопоставляемыйОбъектСНТ.МорскойТранспорт и НЕ СопоставляемыйОбъектСНТ.ВоздушныйТранспорт)Тогда
			Различие = ТаблицаРазличий.Добавить();
			Различие.Сообщение = Сообщение + """Сведения о планируемом транспорте"" в СНТ.";
		КонецЕсли;
	КонецЕсли;
	
	// Раздел F. Реквизиты документов, подтверждающих поставку товаров, работ, услуг 
	Если ОбъектЭСФ.ДокументПодтверждающийПоставкуДата <> НачалоДня(СопоставляемыйОбъектСНТ.Дата) Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'F. Документы поставки. Отличается значение реквизита ""Дата документа поставки"" от значения реквизита ""Дата оформления СНТ"" в СНТ.'"));
	КонецЕсли;
	
	// I. Поверенный поставщика - при заполнении полей 46 и 47 документа СНТ
	Если (ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаНомер) ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПоставщикаДата))
		И (ОбъектЭСФ.ДоговорПорученияПоставщикаНомер <> СопоставляемыйОбъектСНТ.ДоговорВРамкахУСДПоставщикНомер 
		ИЛИ ОбъектЭСФ.ДоговорПорученияПоставщикаДата <> СопоставляемыйОбъектСНТ.ДоговорВРамкахУСДПоставщикДата) Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'I. Поверенный поставщика. Отличается значение реквизита ""Договора поручения поставщика"" от значения реквизита ""Договора поставщика в рамках УСД/СРП"" в СНТ.'"));
	КонецЕсли;
	// J. Поверенный получателя - при заполнении полей 48 и 49 документа СНТ
	Если (ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяНомер) ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПорученияПокупателяДата))
		И (ОбъектЭСФ.ДоговорПорученияПокупателяНомер <> СопоставляемыйОбъектСНТ.ДоговорВРамкахУСДПолучательНомер 
		ИЛИ ОбъектЭСФ.ДоговорПорученияПокупателяДата <> СопоставляемыйОбъектСНТ.ДоговорВРамкахУСДПолучательДата) Тогда
		Различие = ТаблицаРазличий.Добавить();
		Различие.Сообщение = (НСтр("ru = 'J. Поверенный получателя. Отличается значение реквизита ""Договора поручения получателя"" от значения реквизита ""Договора получателя в рамках УСД/СРП"" в СНТ.'"));
	КонецЕсли;
		
	ТаблицаРазличий.Сортировать("Сообщение");
		
	Если ТаблицаРазличий.Количество() <> 0 Тогда
		
		СтрокаВсеРазличия = "";
		Для Каждого СтрокаТаблицыРазличий Из ТаблицаРазличий Цикл
			СтрокаВсеРазличия = СтрокаВсеРазличия + "- " + СтрокаТаблицыРазличий.Сообщение + Символы.ПС;
		КонецЦикла;
		
		СтрокаВсеРазличия =НСтр("ru = 'Недопустимые различия между ЭСФ и СНТ:'") + Символы.ПС + СтрокаВсеРазличия;
		
		РезультатПроверки.УведомительныеОшибки.Добавить(СтрокаВсеРазличия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыДляСравненияЭСФиСНТ()
	
	ТабличнаяЧастьРеквизитДляПроверки = Новый ТаблицаЗначений;
	
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("ТипПроверки");
	//ЭСФ
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("ИмяТабличнойЧастиЭСФ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("ИмяРеквизитаЭСФ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимТабличнойЧастиЭСФ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимРеквизитаЭСФ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимРазделаЭСФ");
	//СНТ
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("ИмяТабличнойЧастиСНТ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("ИмяРеквизитаСНТ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимТабличнойЧастиСНТ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимРеквизитаСНТ");
	ТабличнаяЧастьРеквизитДляПроверки.Колонки.Добавить("СинонимРазделаСНТ");
	
	РеквизитТабличнойЧастиДляПроверки = ТабличнаяЧастьРеквизитДляПроверки.Скопировать();
	РеквизитДокументаДляПроверки = ТабличнаяЧастьРеквизитДляПроверки.Скопировать();

	Макет = ПолучитьМакет("РеквизитыДляПроверкиЭСФиСНТ");
	ОбластьРеквизитовДляПроверки = Макет.ПолучитьОбласть("ЭСФиСНТ");
	
	Для НомерСтроки = 1 По ОбластьРеквизитовДляПроверки.ВысотаТаблицы Цикл
		
		Если СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) = "ТабличнаяЧастьРеквизит" Тогда
			РеквизитДляПроверки = ТабличнаяЧастьРеквизитДляПроверки.Добавить();
		ИначеЕсли СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) = "РеквизитТабличнойЧасти" Тогда
			РеквизитДляПроверки = РеквизитТабличнойЧастиДляПроверки.Добавить();
		ИначеЕсли СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) = "Реквизит" Тогда
			РеквизитДляПроверки = РеквизитДокументаДляПроверки.Добавить();
		КонецЕсли;
		
		РеквизитДляПроверки.ТипПроверки = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		
		РеквизитДляПроверки.ИмяТабличнойЧастиЭСФ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		РеквизитДляПроверки.ИмяРеквизитаЭСФ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		РеквизитДляПроверки.СинонимТабличнойЧастиЭСФ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
		РеквизитДляПроверки.СинонимРеквизитаЭСФ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 5, НомерСтроки, 5).Текст);
		РеквизитДляПроверки.СинонимРазделаЭСФ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 6, НомерСтроки, 6).Текст);
		
		РеквизитДляПроверки.ИмяТабличнойЧастиСНТ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 7, НомерСтроки, 7).Текст);
		РеквизитДляПроверки.ИмяРеквизитаСНТ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 8, НомерСтроки, 8).Текст);
		РеквизитДляПроверки.СинонимТабличнойЧастиСНТ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 9, НомерСтроки, 9).Текст);
		РеквизитДляПроверки.СинонимРеквизитаСНТ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 10, НомерСтроки, 10).Текст);
		РеквизитДляПроверки.СинонимРазделаСНТ = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 11, НомерСтроки, 11).Текст);
		
	КонецЦикла;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТабличнаяЧастьРеквизит", ТабличнаяЧастьРеквизитДляПроверки);
	СтруктураРеквизитов.Вставить("РеквизитТабличнойЧасти", РеквизитТабличнойЧастиДляПроверки);
	СтруктураРеквизитов.Вставить("Реквизит", РеквизитДокументаДляПроверки);

	Возврат СтруктураРеквизитов;
	
КонецФункции

#КонецОбласти

#Область СоздатьПервичныйДокументИзСНТ

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт 
	Возврат СНТСервер.СоздатьСписокПервичныхДокументов(ПараметрыСоздания);
КонецФункции

#КонецОбласти

#Область ЗаполнениеСсылочныхРеквизитовСНТ

// Заполняет ссылочные реквизиты объектов ЭСФ по их текстовым или числовым представлениям.
// Например, заполняет ссылку на товар, ссылку на ставку НДС, ссылку на поставщика и т.д.
//
// Параметры:
//  СоответствиеВалюты - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеВалюты().
//  СоответствиеАкцизы - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы().
//  ТаблицаНДС - ТаблицаЗначений - См. ЭСФСерверПовтИсп.НоваяТаблицаНДС(). 
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, у которых необходимо заполнить ссылочные реквизиты.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылочныеРеквизитыДокументовСНТ(
	Знач СоответствиеВалюты = Неопределено, 
	Знач СоответствиеАкцизы = Неопределено, 
	Знач ТаблицаНДС = Неопределено, 
	Знач НаправлениеСНТ, 
	МассивСНТ,
	МассивНаименованийТабличныхЧастей,  СтруктурнаяЕдиница = Неопределено) Экспорт
	
	НаправлениеВходящие = Перечисления.НаправленияСНТ.Входящий;
	НаправлениеИсходящие = Перечисления.НаправленияСНТ.Исходящий;
	МассивВходящихСНТ = Новый Массив;
	МассивИсходящихСНТ = Новый Массив;
	РазделитьМассивПоНаправлениямСНТ(МассивСНТ, МассивВходящихСНТ, МассивИсходящихСНТ);
	
	СоответствиеВалюты = ?(СоответствиеВалюты = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеВалюты(), СоответствиеВалюты);
	СоответствиеАкцизы = ?(СоответствиеАкцизы = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы(), СоответствиеАкцизы);
	ТаблицаНДС = ?(ТаблицаНДС = Неопределено, ЭСФСерверПовтИсп.НоваяТаблицаНДС(), ТаблицаНДС);
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(НаправлениеВходящие, МассивВходящихСНТ);
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(НаправлениеИсходящие, МассивИсходящихСНТ);
	
	ЗаполнитьСсылкиНаВалюты(СоответствиеВалюты, МассивСНТ);
	ЗаполнитьСсылкиНаАкцизы(СоответствиеАкцизы, МассивСНТ, МассивНаименованийТабличныхЧастей);
	ЗаполнитьСсылкиНаНДС(ТаблицаНДС, МассивСНТ, МассивНаименованийТабличныхЧастей);
	ЗаполнитьСсылкиНаЕдиницыИзмеренияИТовары(НаправлениеСНТ, МассивСНТ, МассивНаименованийТабличныхЧастей);
	ЗаполнитьСсылкиНаДоговорыПоставки(МассивСНТ);
	ЗаполнитьСсылкиНаВиртуальныеСклады(НаправлениеСНТ, МассивСНТ, СтруктурнаяЕдиница);
	
	ЗаполнитьСсылкиНаСвязанныеСНТ(МассивСНТ);
	
КонецПроцедуры

Процедура РазделитьМассивПоНаправлениямСНТ(МассивСНТ, МассивВходящихСНТ, МассивИсходящихСНТ)
	//Разделяем массив по входящим и исходящим. В случае если направление не указано - исключаем такие документы
	Для Каждого СНТ из МассивСНТ Цикл
		Если СНТ.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
			МассивВходящихСНТ.Добавить(СНТ);
		ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз Тогда
			МассивВходящихСНТ.Добавить(СНТ);
		ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий Тогда
			МассивИсходящихСНТ.Добавить(СНТ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументовСНТ(МассивСтарыхСНТ, МассивНаименованийТабличныхЧастей)
	
	Для Каждого Структура Из МассивСтарыхСНТ Цикл
		ВосстановитьСсылочныеРеквизитыОдногоСНТ(Структура.ИсходныйОбъектСНТ, Структура.ОбновленныйОбъектСНТ, МассивНаименованийТабличныхЧастей);	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, в которых необходимо заполнить ссылки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(Знач НаправлениеСНТ, МассивСНТ)
	
	// Очистить ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
	Для Каждого СНТ Из МассивСНТ Цикл
		
		СНТ.Грузоотправитель = Неопределено;
		СНТ.Грузополучатель = Неопределено;
		СНТ.Получатель = Неопределено;
		СНТ.Поставщик = Неопределено;
		
	КонецЦикла;
	
	ИмяТаблицыКонтрагентов = СНТВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеСНТ);	
	ИмяТаблицыСтруктурныхЕдиниц = СНТВызовСервераПовтИсп.ИмяТаблицыСтруктурныхЕдиниц(НаправлениеСНТ);
	ИмяРеквизитаКонтрагента = СНТВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеСНТ);
	ИмяРеквизитаСтруктурнойЕдиницы = СНТВызовСервераПовтИсп.ИмяРеквизитаСтруктурнойЕдиницы(НаправлениеСНТ);
	
	// Заполнить массивы идентификациооных номеров контрагентов и организаций для поиска ссылок.
	ИдентификационныеНомераКонтрагентов = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;
	Для Каждого СНТ Из МассивСНТ Цикл
		
		// Добавить в массивы идентификаторы (БИН, ИИН) грузоотправителей и грузополучателей.
		Если НЕ ПустаяСтрока(СНТ.ГрузоотправительИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(СНТ.ГрузоотправительИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СНТ.ГрузоотправительИдентификатор);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СНТ.ГрузополучательИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(СНТ.ГрузополучательИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СНТ.ГрузополучательИдентификатор);
		КонецЕсли;
		
		// Добавить в массивы идентификаторы (БИН, ИИН) поставщиков и получателей.	
		Если НЕ ПустаяСтрока(СНТ[ИмяРеквизитаКонтрагента+"Идентификатор"]) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(СНТ[ИмяРеквизитаКонтрагента+"Идентификатор"]);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СНТ[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]) Тогда
			ИдентификационныеНомераКонтрагентов.Добавить(СНТ[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]);
		КонецЕсли;
		
	КонецЦикла;
		
	// Найти ссылки на контрагентов и структурные единицы по идентификаторам (БИН, ИИН).
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;	
	Для Каждого СНТ Из МассивСНТ Цикл
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			Если СНТ.ГрузоотправительИдентификатор = Идентификатор Тогда
				СНТ.Грузоотправитель = Контрагент;
			КонецЕсли;
			
			Если СНТ.ГрузополучательИдентификатор = Идентификатор И НаправлениеСНТ <> Перечисления.НаправленияСНТ.Входящий Тогда
				СНТ.Грузополучатель = Контрагент;
			КонецЕсли;
			
			// Заполнить ссылки на контрагентов в таблице поставщиков или получателей.
			Если СНТ[(ИмяРеквизитаКонтрагента + "Идентификатор")] = Идентификатор Тогда
				СНТ[ИмяРеквизитаКонтрагента] = Контрагент; 
			КонецЕсли;
		КонецЦикла;
		//	
	КонецЦикла;
	
	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого СНТ Из МассивСНТ Цикл
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			СтруктурнаяЕдиница = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			Если СНТ.ГрузоотправительИдентификатор = Идентификатор И НЕ ЗначениеЗаполнено(СНТ.Грузоотправитель) И НаправлениеСНТ <> Перечисления.НаправленияСНТ.Исходящий Тогда
				СНТ.Грузоотправитель = СтруктурнаяЕдиница;
			КонецЕсли;
			
			Если СНТ.ГрузополучательИдентификатор = Идентификатор Тогда
				СНТ.Грузополучатель = СтруктурнаяЕдиница;	
			КонецЕсли;
			
			// Заполнить ссылки на организации в таблице поставщиков или получателей.
			Если СНТ[(ИмяРеквизитаСтруктурнойЕдиницы + "Идентификатор")] = Идентификатор Тогда
				СНТ[ИмяРеквизитаСтруктурнойЕдиницы] = СтруктурнаяЕдиница; 
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылки на контрагентов и организации для указанных идентификационных номеров.
//
// Параметры:
//  ИдентификационныеНомераКонтрагентов - Массив - Идентификационные номера (БИН, ИИН) контрагентов, 
//   по которым необходимо найти ссылки на контрагентов.
//  ИдентификационныеНомераСтруктурныхЕдиниц - Массив - Идентификационные номера (БИН, ИИН) организаций, 
//   по которым необходимо найти ссылки на организации.
//
// Возвращаемое значение:
//  Структура - Найденные соответствия идентификационных номеров и ссылок.
//   |- СоответствияКонтрагентов - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//   |- СоответствияСтруктурныхЕдиниц - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//
Функция НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	Знач ИдентификационныеНомераКонтрагентов, Знач ИдентификационныеНомераСтруктурныхЕдиниц) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.%КонтрагентИНН КАК Идентификатор,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.%КонтрагентИНН В(&ИдентификационныеНомераКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.%ОрганизацияИНН КАК Идентификатор,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.%ОрганизацияИНН В(&ИдентификационныеНомераСтруктурныхЕдиниц)
	|	И НЕ Организации.ПометкаУдаления";
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер,
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер В(&ИдентификационныеНомераСтруктурныхЕдиниц)
		|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|	И НЕ ПодразделенияОрганизаций.УказыватьРеквизитыГоловнойОрганизации";
		
	КонецЕсли;
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответсвиеИменРеквизитов.Вставить("%ОрганизацияИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификационныеНомераКонтрагентов", ИдентификационныеНомераКонтрагентов);	
	Запрос.УстановитьПараметр("ИдентификационныеНомераСтруктурныхЕдиниц", ИдентификационныеНомераСтруктурныхЕдиниц);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("СоответствияКонтрагентов", Новый Соответствие);
	Результат.Вставить("СоответствияСтруктурныхЕдиниц", Новый Соответствие);
	
	ВыборкаКонтрагенты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		Результат.СоответствияКонтрагентов.Вставить(ВыборкаКонтрагенты.Идентификатор, ВыборкаКонтрагенты.Ссылка);
	КонецЦикла;
	
	ВыборкаОрганизации = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Результат.СоответствияСтруктурныхЕдиниц.Вставить(ВыборкаОрганизации.Идентификатор, ВыборкаОрганизации.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСсылкиНаВалюты(Знач СоответствиеВалюты, МассивСНТ)
	
	Для Каждого СНТ Из МассивСНТ Цикл
		СНТ.Валюта = СоответствиеВалюты[СНТ.ВалютаКод];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаАкцизы(Знач СоответствиеАкцизы, МассивСНТ, МассивНаименованийТабличныхЧастей)
	
	Для Каждого СНТ Из МассивСНТ Цикл
		Для Каждого НаименованиеТабличнойЧасти Из МассивНаименованийТабличныхЧастей Цикл 
			Для Каждого СтрокаТовары Из СНТ[НаименованиеТабличнойЧасти] Цикл
				СтрокаТовары.СтавкаАкциза = СоответствиеАкцизы[СтрокаТовары.СтавкаАкцизаЧисло];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаНДС(Знач ТаблицаНДС, МассивСНТ, МассивНаименованийТабличныхЧастей)
	
	Для Каждого СНТ Из МассивСНТ Цикл
		Для Каждого НаименованиеТабличнойЧасти Из МассивНаименованийТабличныхЧастей Цикл
			Для Каждого СтрокаТовары Из СНТ[НаименованиеТабличнойЧасти] Цикл
				ПараметрыОтбора = Новый Структура("СтавкаНДСЧисло, БезНДС", СтрокаТовары.СтавкаНДСЧисло, СтрокаТовары.БезНДС);
				МассивНайденныхСтрок = ТаблицаНДС.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТовары.СтавкаНДС = МассивНайденныхСтрок[0].СтавкаНДС;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаЕдиницыИзмеренияИТовары(НаправлениеСНТ, МассивСНТ, МассивНаименованийТабличныхЧастей)
	
	ИмяРеквизитаКонтрагента = СНТВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеСНТ);
	ИмяТаблицыКонтрагентов = СНТВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеСНТ);	
	
	ТаблицаТоваровИЕдиницИзмерений = Новый ТаблицаЗначений;
	ТипКонтрагент = Метаданные.РегистрыСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Измерения.Контрагент.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("Контрагент", ТипКонтрагент);
	ТипЕдиницаИзмеренияКод = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("ЕдиницаИзмеренияКод", ТипЕдиницаИзмеренияКод);
	ТипТоварНаименование = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ТоварНаименование.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);
	
	Для Каждого СНТ Из МассивСНТ Цикл
		
		Если ЗначениеЗаполнено(СНТ[ИмяРеквизитаКонтрагента]) Тогда
			Для Каждого НаименованиеТабличнойЧасти Из МассивНаименованийТабличныхЧастей Цикл
				Для Каждого СтрокаТаблицыТовары Из СНТ[НаименованиеТабличнойЧасти] Цикл
					СтрокаТаблицыТоваровИЕдиницИзмерений = ТаблицаТоваровИЕдиницИзмерений.Добавить();
					СтрокаТаблицыТоваровИЕдиницИзмерений.Контрагент = СНТ[ИмяРеквизитаКонтрагента];
					Если НаименованиеТабличнойЧасти = "ТоварыВС" ИЛИ НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам" 
						ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоБиотопливу" ИЛИ НаименованиеТабличнойЧасти = "ТабачнаяПродукция" ИЛИ НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда
						ЕдиницаИзмеренияКодИлиНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод), СтрокаТаблицыТовары.ЕдиницаИзмеренияКод, "");
						СтрокаТаблицыТоваровИЕдиницИзмерений.ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(ЕдиницаИзмеренияКодИлиНаименование);
					КонецЕсли;
					СтрокаТаблицыТоваровИЕдиницИзмерений.ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, "");
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ТоварНаименование КАК ТоварНаименование
	|ПОМЕСТИТЬ ТоварыПоКонтрагентам
	|ИЗ
	|	&ТоварыИЕдиницыИзмеренияПоКонтрагентам КАК ТоварыИЕдиницыИзмеренияПоКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмеренияКод,
	|	ТоварНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаСоответствий.КлючАналитики КАК КлючАналитики,
	|	ТоварыПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод,
	|	ТоварыПоКонтрагентам.ТоварНаименование
	|ПОМЕСТИТЬ КлючиАналитикиПоТоварам
	|ИЗ
	|	ТоварыПоКонтрагентам КАК ТоварыПоКонтрагентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаСоответствий КАК АналитикаУчетаСоответствий
	|		ПО ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод = АналитикаУчетаСоответствий.ЕдиницаИзмеренияКод
	|			И ТоварыПоКонтрагентам.ТоварНаименование = АналитикаУчетаСоответствий.ТоварНаименование
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаУчетаСоответствий.КлючАналитики,
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод,
	|	ТоварыПоКонтрагентам.ТоварНаименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПоКонтрагентам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Контрагент,
	|	КлючиАналитикиПоТоварам.ЕдиницаИзмеренияКод,
	|	КлючиАналитикиПоТоварам.ТоварНаименование,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Товар,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.ЕдиницаИзмерения,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.КоэффициентПересчета
	|ИЗ
	|	КлючиАналитикиПоТоварам КАК КлючиАналитикиПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров КАК СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров
	|		ПО КлючиАналитикиПоТоварам.КлючАналитики = СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.КлючАналитикиСоответствия
	|			И КлючиАналитикиПоТоварам.Контрагент = СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Контрагент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТоварыИЕдиницыИзмеренияПоКонтрагентам", ТаблицаТоваровИЕдиницИзмерений);
	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	
	//Получить наименования единиц измерений
	ЭСФСерверПереопределяемый.ЗаполнитьНаименованияЕдиницИзмерений(ТаблицаСоответствий);
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	Для Каждого СНТ Из МассивСНТ Цикл
		
		Если ЗначениеЗаполнено(СНТ[ИмяРеквизитаКонтрагента]) Тогда
			Для Каждого НаименованиеТабличнойЧасти Из МассивНаименованийТабличныхЧастей Цикл
				
				Для Каждого СтрокаТаблицыТовары Из СНТ[НаименованиеТабличнойЧасти] Цикл
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Контрагент", СНТ[ИмяРеквизитаКонтрагента]);
					ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, "");
					ПараметрыОтбора.Вставить("ТоварНаименование", ТоварНаименование);
					Если НаименованиеТабличнойЧасти = "ТоварыВС" ИЛИ НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам" 
						ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоБиотопливу" ИЛИ НаименованиеТабличнойЧасти = "ТабачнаяПродукция" ИЛИ НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда
						ПараметрыОтбора.Вставить("ЕдиницаИзмеренияКод", СтрокаТаблицыТовары.ЕдиницаИзмеренияКод);
					КонецЕсли;
						
					МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
					Если МассивНайденныхСтрок.Количество() <> 0 Тогда
						НайденнаяСтрока = МассивНайденныхСтрок[0]; 
						СтрокаТаблицыТовары.Товар = НайденнаяСтрока.Товар;
						СтрокаТаблицыТовары.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмерения;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаСвязанныеСНТ(МассивСНТ)
	
	// Создать пустую таблицу параметров поиска ЭСФ.
	//Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
	//	ИменаРеквизитов = "Номер, Дата, Направление, ПометкаУдаления, Организация, СтруктурноеПодразделение";
	//Иначе
		ИменаРеквизитов = "РегистрационныйНомерИСЭСФ, Направление, ПометкаУдаления, Организация";
	//КонецЕсли;
	ПараметрыПоискаДокументовСНТ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.СНТ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого СНТ Из МассивСНТ Цикл
		Если ЗначениеЗаполнено(СНТ.РегистрационныйНомерСвязанногоСНТ) Тогда
			ОписаниеСНТ = ПараметрыПоискаДокументовСНТ.Добавить();
			ОписаниеСНТ.РегистрационныйНомерИСЭСФ = СНТ.РегистрационныйНомерСвязанногоСНТ;
			
			ОписаниеСНТ.Направление = СНТ.Направление;
			//если получаем входящий СНТ по возврату, то нужно искать связанный СНТ исходящий
			Если СНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров И СНТ.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
				ОписаниеСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий;
			КонецЕсли;
			
			ОписаниеСНТ.ПометкаУдаления = Ложь;
			
			ОписаниеСНТ.Организация = СНТ.Организация;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ПараметрыПоискаДокументовСНТ.Количество() <> 0 Тогда
		
		// Параметр ИдентификационныйНомер не заполняется, т.к. поиск выполняется 
		// по совпадению значений реквизитов Организация и СтруктурноеПодразделение.
		НайденныеДокументыСНТ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовСНТ, Метаданные.Документы.СНТ);
		
		// Заполнить ссылки на связанные ЭСФ.
		Для Каждого СНТ Из МассивСНТ Цикл
			
			Если ЗначениеЗаполнено(СНТ.РегистрационныйНомерСвязанногоСНТ) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("РегистрационныйНомерИСЭСФ", СНТ.РегистрационныйНомерСвязанногоСНТ);
				ПараметрыОтбора.Вставить("Направление", СНТ.Направление);
				
				Если СНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров И СНТ.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
					ПараметрыОтбора.Вставить("Направление", Перечисления.НаправленияСНТ.Исходящий);
				КонецЕсли; 
				
				ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
				
				МассивНайденныхСтрок = НайденныеДокументыСНТ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СНТ.СвязанныйСНТ = МассивНайденныхСтрок[0].НайденнаяСсылка;
				Иначе
					Комментарий = НСтр(
					"ru = 'Рег. номер: %РегистрационныйНомерИСЭСФ%'");
					Комментарий = СтрЗаменить(Комментарий, "%РегистрационныйНомерИСЭСФ%", СНТ.РегистрационныйНомерСвязанногоСНТ);
					ЗаписьЖурналаРегистрации("СНТ. Не найден СНТ", УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизит ДоговорПоставки в документах ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, в которых необходимо заполнить реквизит ДоговорПоставки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
// 
Процедура ЗаполнитьСсылкиНаДоговорыПоставки(МассивСНТ)
	
	СНТСерверПереопределяемый.ЗаполнитьСсылкиНаДоговорыПоставки(МассивСНТ);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаВиртуальныеСклады(НаправлениеСНТ, МассивСНТ, СтруктурнаяЕдиница)
	
	МассивИдентификаторовСкладов = Новый Массив;
	СоответствиеИдентификаторовСкладов = Новый Соответствие;
	
	Для Каждого ОбъектСНТ Из МассивСНТ Цикл
		
		Если ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
			
			Если ЗначениеЗаполнено(ОбъектСНТ.СкладДоставкиИдентификатор) Тогда
				МассивИдентификаторовСкладов.Добавить(ОбъектСНТ.СкладДоставкиИдентификатор);
				ОбъектСНТ.СкладПолучатель = Неопределено;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ОбъектСНТ.СкладОтправкиИдентификатор) Тогда
				МассивИдентификаторовСкладов.Добавить(ОбъектСНТ.СкладОтправкиИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВиртуальныеСклады.Ссылка, ЗНАЧЕНИЕ(Документ.СНТ.ПустаяСсылка)) КАК ВиртуальныйСклад,
	|	ВиртуальныеСклады.ИдентификаторСклада
	|ИЗ
	|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
	|ГДЕ
	|	ВиртуальныеСклады.Организация = &Организация
	|	И ВиртуальныеСклады.ИдентификаторСклада В(&МассивИдентификаторовСкладов)";
	
	Запрос.УстановитьПараметр("Организация", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("МассивИдентификаторовСкладов", МассивИдентификаторовСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеИдентификаторовСкладов.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторСклада, ВыборкаДетальныеЗаписи.ВиртуальныйСклад);
	КонецЦикла;
	
	Если СоответствиеИдентификаторовСкладов.Количество() > 0 Тогда
		
		Для Каждого ОбъектСНТ Из МассивСНТ Цикл
			
			Если ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
				ВиртуальныйСклад = СоответствиеИдентификаторовСкладов.Получить(ОбъектСНТ.СкладДоставкиИдентификатор);
				
				Если ЗначениеЗаполнено(ВиртуальныйСклад) Тогда
					ОбъектСНТ.СкладПолучатель = ВиртуальныйСклад;
					ОбъектСНТ.АдресДоставки = ВиртуальныйСклад.Адрес;
				КонецЕсли;
			ИначеЕсли ОбъектСНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") 
				И НЕ ЗначениеЗаполнено(ОбъектСНТ.СкладОтправитель) Тогда
				
				ВиртуальныйСклад = СоответствиеИдентификаторовСкладов.Получить(ОбъектСНТ.СкладОтправкиИдентификатор);
				ОбъектСНТ.СкладОтправитель = ВиртуальныйСклад;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоСНТ(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, МассивНаименованийТабличныхЧастей)
	
	ОбновленныйОбъектСНТ.СвязанныйСНТ = ИсходныйОбъектСНТ.СвязанныйСНТ;
	ОбновленныйОбъектСНТ.Грузоотправитель = ИсходныйОбъектСНТ.Грузоотправитель;
	ОбновленныйОбъектСНТ.Грузополучатель = ИсходныйОбъектСНТ.Грузополучатель;
	ОбновленныйОбъектСНТ.Поставщик = ИсходныйОбъектСНТ.Поставщик;
	ОбновленныйОбъектСНТ.Получатель = ИсходныйОбъектСНТ.Получатель;
	ОбновленныйОбъектСНТ.ДоговорПоставки = ИсходныйОбъектСНТ.ДоговорПоставки;
	ОбновленныйОбъектСНТ.Валюта = ИсходныйОбъектСНТ.Валюта;
	ОбновленныйОбъектСНТ.Организация = ИсходныйОбъектСНТ.Организация;
	ОбновленныйОбъектСНТ.СкладПолучатель = ИсходныйОбъектСНТ.СкладПолучатель;
	ОбновленныйОбъектСНТ.СкладОтправитель = ИсходныйОбъектСНТ.СкладОтправитель;
	ОбновленныйОбъектСНТ.Перевозчик = ИсходныйОбъектСНТ.Перевозчик;
	
	Для Каждого НаименованиеТабличнойЧасти Из МассивНаименованийТабличныхЧастей Цикл 
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "Товар", "ТоварНаименование");
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "СтавкаАкциза", "СуммаАкциза");
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "СтавкаНДС", "СтавкаНДСЧисло");
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ИсточникПроисхождения", "НомерСтроки");
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ИдентификаторТовара", "НомерСтроки");
		
		Если НаименованиеТабличнойЧасти = "ТоварыВС" ИЛИ НаименованиеТабличнойЧасти = "ПивоПивныеНапитки" ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоНефтепродуктам" 
			ИЛИ НаименованиеТабличнойЧасти = "ДанныеПоБиотопливу" ИЛИ НаименованиеТабличнойЧасти = "ТабачнаяПродукция" ИЛИ НаименованиеТабличнойЧасти = "ТоварыЭкспортныйКонтроль" Тогда
			ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ЕдиницаИзмерения", "ЕдиницаИзмеренияКод");
		Иначе
			ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ЕдиницаИзмерения", "НомерСтроки");
		КонецЕсли;
		
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ДополнительныйИдентификатор", "НомерСтроки");
		ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектСНТ, ОбновленныйОбъектСНТ, НаименованиеТабличнойЧасти, "ТоварНаименованиеВРамкахТС", "НомерСтроки");
	КонецЦикла;
	
	Если (ИсходныйОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		И ОбновленныйОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение Тогда
		
		ОбновленныйОбъектСНТ.ВидОперации = ИсходныйОбъектСНТ.ВидОперации;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧасти(
	ИсходныйОбъектСНТ,
	ОбновленныйОбъектСНТ,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки)
	
	Если ОбновленныйОбъектСНТ[ИмяТабличнойЧасти].Количество() = ИсходныйОбъектСНТ[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъектСНТ[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъектСНТ[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектСНТ[ИмяТабличнойЧасти][Индекс];
			
			Если ТипЗнч(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]) = Тип("Строка") Тогда
				ОбновленнаяРеквизитПроверки = СокрЛП(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]);
				ИсходнаяРеквизитПроверки    = СокрЛП(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]);
			Иначе
				ОбновленнаяРеквизитПроверки = ОбновленнаяСтрока[ИмяРеквизитаДляПроверки];
				ИсходнаяРеквизитПроверки    = ИсходнаяСтрока[ИмяРеквизитаДляПроверки];
			КонецЕсли;
			
			Если ОбновленнаяРеквизитПроверки = ИсходнаяРеквизитПроверки Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном СНТ.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", СНТКлиентСервер.КраткоеПредставлениеСНТ(ОбновленныйОбъектСНТ.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(ОбновленныйОбъектСНТ.Ссылка);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном СНТ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", СНТКлиентСервер.КраткоеПредставлениеСНТ(ОбновленныйОбъектСНТ.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъектСНТ.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервиса(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ИмяВебСервиса <> "VersionService" И ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
	
	// используемая версия API - v1, за исключением методов VersionService, которые не версионируются
	ВерсияВебСервиса = "";
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 И ИмяВебСервиса <> "VersionService" Тогда
		ВерсияВебСервиса = "/api1";
		
		ТекстМетода = СтрЗаменить(ТекстМетода, "namespace.esf", "esf");
		ТекстМетода = СтрЗаменить(ТекстМетода, "xmlns:nam=", "xmlns:esf=");
		ТекстМетода = СтрЗаменить(ТекстМетода, "nam:", "esf:");
	КонецЕсли;	
	
	// подключение к серверу
	ПараметрыПодключения = ЭСФСерверПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если ПараметрыПодключения.СерверИСЭСФ_HTTPS Тогда 
		
		HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.СерверИСЭСФ_Адрес, 
		ПараметрыПодключения.СерверИСЭСФ_Порт, 
		, 
		, 
		ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
		?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
		Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.СерверИСЭСФ_Адрес, 
		ПараметрыПодключения.СерверИСЭСФ_Порт, 
		, 
		, 
		ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
		?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверИСЭСФ_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ПричинаИБ(Знач ПричинаИСЭСФ)
	
	ПричинаИБ = ПричинаИСЭСФ;
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", ПричинаИСЭСФ);
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда
		ПричинаИБ = МассивНайденныхСтрок[0].ТекстИБ;
	КонецЕсли;
	
	Возврат ПричинаИБ;
	
КонецФункции 

Функция ИмяСервисаSntWebService() Экспорт
	Возврат "SntWebService";	
КонецФункции

Функция ИмяСервисаSessionServiceVS() Экспорт
	Возврат "VstoreSessionService";                                        	
КонецФункции

Функция ИмяСервисаTaxPayerStoreService() Экспорт
	Возврат "TaxpayerStoreWebService";
КонецФункции

Функция ИмяСервисаFnoMatchingWebService() Экспорт
	Возврат "FnoMatchingWebService";	
КонецФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаВС(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ВерсияВС = Неопределено) Экспорт
	
	Если ИмяВебСервиса <> "VstoreVersionService" И ВерсияВС = Неопределено Тогда
		ВерсияВС = "5.0.0.";
	КонецЕсли;	
	
	// используемая версия API - v1, за исключением методов VersionService, которые не версионируются
	ВерсияВебСервиса = "";
	
	// подключение к серверу
	ПараметрыПодключения = ВССервер.ПолучитьПараметрыПодключенияКСерверуВС();
	
	Если ПараметрыПодключения.СерверВС_HTTPS Тогда 
		
		HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.СерверВС_Адрес, 
		ПараметрыПодключения.СерверВС_Порт, 
		, 
		, 
		ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
		?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
		Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
		ПараметрыПодключения.СерверВС_Адрес, 
		ПараметрыПодключения.СерверВС_Порт, 
		, 
		, 
		ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
		?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверВС_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с модулем виртуального склада ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ВС недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ПолучитьМассивНаименованийТабличныхЧастейСНТ() Экспорт
	
	МассивНаименованийТабличныхЧастей = Новый Массив;
	
	МассивНаименованийТабличныхЧастей.Добавить("ТоварыВС");
	МассивНаименованийТабличныхЧастей.Добавить("ЭтиловыйСпирт");
	МассивНаименованийТабличныхЧастей.Добавить("Виноматериал");
	МассивНаименованийТабличныхЧастей.Добавить("ПивоПивныеНапитки");
	МассивНаименованийТабличныхЧастей.Добавить("АлкогольнаяпродукцияКромеПива");
	МассивНаименованийТабличныхЧастей.Добавить("ДанныеПоНефтепродуктам");
	МассивНаименованийТабличныхЧастей.Добавить("ДанныеПоБиотопливу");
	МассивНаименованийТабличныхЧастей.Добавить("ТабачнаяПродукция");
	МассивНаименованийТабличныхЧастей.Добавить("ДругиеТоварыЦифроваяМаркировка");
	МассивНаименованийТабличныхЧастей.Добавить("ТоварыЭкспортныйКонтроль");
	
	Возврат МассивНаименованийТабличныхЧастей;
	
КонецФункции

Функция ОпределитьНаправлениеСНТ(СНТ, СтруктурнаяЕдиница)
	
	ИдентификационныйНомер = "%СтруктурнаяЕдиницаИдентификационныйНомер";
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%СтруктурнаяЕдиницаИдентификационныйНомер", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ИдентификационныйНомер, СоответсвиеИменРеквизитов);

	БинСтруктурнойЕдиницы = СтруктурнаяЕдиница[ИдентификационныйНомер];
	ПрисутствуетВПоставщиках = ?(СНТ.ПоставщикИдентификатор = БинСтруктурнойЕдиницы, Истина, Ложь); 
	ПрисутствуетВПолучателях = ?(СНТ.ПолучательИдентификатор = БинСтруктурнойЕдиницы, Истина, Ложь);
	
	Направление = Перечисления.НаправленияСНТ.ПустаяСсылка();
	
	Если ПрисутствуетВПоставщиках Тогда
		Направление = Перечисления.НаправленияСНТ.Исходящий;
	ИначеЕсли ПрисутствуетВПолучателях Тогда
		
		Если ЗначениеЗаполнено(СНТ.ВидВвоза) Тогда
			Направление = Перечисления.НаправленияСНТ.Исходящий;
		Иначе	
			Направление = Перечисления.НаправленияСНТ.Входящий;
		КонецЕсли;	
	Иначе
		Направление = Перечисления.НаправленияСНТ.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция ФабрикаSntInfo_Версия1()
	
	Если КэшированнаяФабрикаSntInfo_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаSntInfo_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.querySntInfoXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаSntInfo_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаSntInfo_Версия1;
	
КонецФункции

Функция ВыполнитьЗапросНаПодтверждениеПолученияВходящихСНТ(Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии)
	
	ЗапросXMLСИдентификаторомСессии = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXMLСИдентификаторомСессии, ИмяСервисаSntWebService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		// Результат выполнения метода не обрабатывается.
		
	ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
		
		ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ);
		ВыполнитьЗапросНаПодтверждениеПолученияВходящихСНТ(ЗапросXML, ПрофильИСЭСФ, ИдентификаторСессии);
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ВыполнитьЗапросНаПодтверждениеПолученияВходящихСНТ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При отправке подтверждения о доставке СНТ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецФункции

Процедура ПодтвердитьДоставкуВходящихСНТ(МассивИдентификаторовСНТ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	// Уведомить ИС ЭСФ о том, что отправленные ЭСФ были приняты (доставлены).
	ПредельныйРазмерПакетаИдентификаторов = 250; // ограничение ИС ЭСФ		
	ОбщийРазмерКолекции = МассивИдентификаторовСНТ.Количество();
	КоличествоПакетов = ОбщийРазмерКолекции/ПредельныйРазмерПакетаИдентификаторов;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	НомерПакета = 1;
	СчетчикПакета = 0;
	ПакетДляОтправки = Новый Массив;	
	Для Каждого Идентификатор Из МассивИдентификаторовСНТ Цикл
		СчетчикПакета = СчетчикПакета + 1;
		ПакетДляОтправки.Добавить(Идентификатор);
		
		Если (СчетчикПакета = ПредельныйРазмерПакетаИдентификаторов) ИЛИ (СчетчикПакета = ОбщийРазмерКолекции) Тогда
			СообщениеПользователя = Новый СообщениеПользователю;
			
			Текст = НСтр("ru = 'Отправляется подтверждение о приеме сопроводительных накладных на товары: %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(Текст);
			
			ТекстЗапроса = СоздатьЗапросНаПодтверждениеПолученияВходящихСНТ(ПакетДляОтправки);	
			ВыполнитьЗапросНаПодтверждениеПолученияВходящихСНТ(ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);	
			
			СчетчикПакета = 0;
			ПакетДляОтправки = Новый Массив;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Функция СоздатьЗапросНаПодтверждениеПолученияВходящихСНТ(Знач МассивИдентификаторовСНТ)
	
	ТекстЗапроса = ПолучитьМакет("ЗапросQueryViewSnt").ПолучитьТекст();	
	
	СтрокаСписокИдентификаторов = "";
	ШаблонИдентификатора = "<id>[Идентификатор]</id>";
	
	Для Каждого Идентификатор Из МассивИдентификаторовСНТ Цикл
		
		ИдентификаторПоШаблону = ШаблонИдентификатора;
		ИдентификаторПоШаблону = СтрЗаменить(ИдентификаторПоШаблону, "[Идентификатор]", Формат(Идентификатор, "ЧГ="));
		СтрокаСписокИдентификаторов = СтрокаСписокИдентификаторов + ИдентификаторПоШаблону;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[idList]", СтрокаСписокИдентификаторов);	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбработатьРезультатыИзмененияСтатусов(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокСНТ.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					НайденнаяСтрока.ОшибкаТекст = РезультатИзмененияСтатуса.Значение.Ошибка.Текст;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					НайденнаяСтрока.ОшибкаТекст = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'СНТ не найден в ИС ЭСФ.'");
				
				ТекстРасшифровки = НСтр("ru = 'Сопроводительная накладная на товары, с идентификатором ""%Идентификатор%"", не найдена в ИС ЭСФ.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТоварыВССПустымиИдентификаторами(ОбъектСНТ)
	
	ЕстьПустыеДополнительныеИдентификаторыТоваров = Ложь;
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз)
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров)
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		Тогда
		
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий И СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) 
			И (ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Доставленный) Тогда
			
			ЕстьПустыеДополнительныеИдентификаторыТоваров = ПроверитьСНТНаНаличиеИдентификаторовТоваровВС(ОбъектСНТ);
			
		ИначеЕсли ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда
			ЕстьПустыеДополнительныеИдентификаторыТоваров = ПроверитьСНТНаНаличиеИдентификаторовТоваровВС(ОбъектСНТ);
		ИначеЕсли ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден Тогда
			ЕстьПустыеДополнительныеИдентификаторыТоваров = ПроверитьСНТНаНаличиеИдентификаторовТоваровВС(ОбъектСНТ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьПустыеДополнительныеИдентификаторыТоваров;
	
КонецФункции

Функция ПроверитьСНТНаНаличиеИдентификаторовТоваровВС(ОбъектСНТ)
	
	ЕстьПустыеДополнительныеИдентификаторыТоваров = Ложь;
	
	ПроверяемыеТабличныеЧасти = ТабличныеЧастиДокументаСНТВС();
	
	Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий
		ИЛИ (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий 
		И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз) Тогда
		
		Для каждого ТабличнаяЧасть Из ПроверяемыеТабличныеЧасти Цикл
			Если ОбъектСНТ[ТабличнаяЧасть].Количество() > 0 Тогда
				Для Каждого Товар Из ОбъектСНТ[ТабличнаяЧасть] Цикл
					Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификатор)Тогда
						ЕстьПустыеДополнительныеИдентификаторыТоваров = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда
		
		Для каждого ТабличнаяЧасть Из ПроверяемыеТабличныеЧасти Цикл
			Если ОбъектСНТ[ТабличнаяЧасть].Количество() > 0 Тогда
				Для Каждого Товар Из ОбъектСНТ[ТабличнаяЧасть] Цикл
					Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификаторПолучатель)Тогда
						ЕстьПустыеДополнительныеИдентификаторыТоваров = Истина;
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат ЕстьПустыеДополнительныеИдентификаторыТоваров;
	
КонецФункции

Функция ТабличныеЧастиДокументаСНТВС()
	
	ТабличныеЧастиВыбора = Новый Массив;
	ТабличныеЧастиВыбора.Добавить("ТоварыВС");
	ТабличныеЧастиВыбора.Добавить("ЭтиловыйСпирт");
	ТабличныеЧастиВыбора.Добавить("Виноматериал");
	ТабличныеЧастиВыбора.Добавить("ПивоПивныеНапитки");
	ТабличныеЧастиВыбора.Добавить("АлкогольнаяПродукцияКромеПива");
	ТабличныеЧастиВыбора.Добавить("ДанныеПоНефтепродуктам");
	ТабличныеЧастиВыбора.Добавить("ДанныеПоБиотопливу");
	ТабличныеЧастиВыбора.Добавить("ТабачнаяПродукция");
	ТабличныеЧастиВыбора.Добавить("ДругиеТоварыЦифроваяМаркировка");
	ТабличныеЧастиВыбора.Добавить("ТоварыЭкспортныйКонтроль");

	Возврат ТабличныеЧастиВыбора;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСНТ

Процедура ОбновитьДокументыСНТИзИСЭСФ(Знач МассивСНТ, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	ИдентификаторСессии = ОткрытьСессию(ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбновитьДокументыСНТПоИдентификатору(МассивСНТ, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ, ИдентификаторСессии);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьДокументыСНТИзИСЭСФ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыСНТПоИдентификатору(Знач МассивСНТ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ, ИдентификаторСессии) Экспорт
	
	//ФабрикаSntInfo = ФабрикаSntInfo_Версия1(); // Фабрика для приема сообщений с секцией CDATA
	
	Если МассивСНТ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакетаСНТ = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыСНТ.Ссылка,
	|	ДокументыСНТ.Идентификатор,
	|	ВЫБОР КОГДА ДокументыСНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз) 
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Входящий) 
	|	ИНАЧЕ ДокументыСНТ.Направление 
	|	КОНЕЦ КАК Направление,
	|	ДокументыСНТ.ТипСНТ
	|ИЗ
	|	Документ.СНТ КАК ДокументыСНТ
	|ГДЕ
	|	ДокументыСНТ.Ссылка В(&МассивСНТ)
	|	И НЕ ДокументыСНТ.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		СписокИдентификаторов = "";
		
		КоличествоСНТ = Выборка.Количество();
		
		СчетчикСНТ = 0;
		
		МассивИдентификаторовНайденныхСНТ = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			// считаем общее количество ЭСФ
			СчетчикСНТ = СчетчикСНТ + 1;
			
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				
				СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""[СНТ]"" не удалось обновить из ИС ЭСФ, так как в документе не заполнен реквизит ""Идентификатор"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СНТ]", СНТКлиентСервер.КраткоеПредставлениеСНТ(Выборка.Ссылка));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикСНТ%ПредельныйРазмерПакетаСНТ = 0 ИЛИ СчетчикСНТ = КоличествоСНТ) Тогда
				Продолжить;
			КонецЕсли;				
			
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				
				/////////////////////////////////////////////////////////////////////////////
				// Создать и выполнить запрос к API ИС ЭСФ.
				
				ПоследнийБлок = Ложь; // в 5.0 ориентируемся на этот маркер запроса, так как сервер возвращает дату с милисекундами, а Платформа округляет дату до секунд	
				Пока НЕ ПоследнийБлок Цикл
					
					ЗапросXML = ПолучитьМакет("ЗапросQuerySntById").ПолучитьТекст();
					ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
					ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
					
					ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаSntWebService(), , ВерсияИСЭСФ); 
					
					
					/////////////////////////////////////////////////////////////////////////////
					// Обработать результат запроса к API ИС ЭСФ.
					
					ИнформацияОбОшибке = Неопределено;
					Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
						
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
												
						SntInfoList = ОтветXDTO.Body.sntQueryByIdResponse.sntInfoList;
						SntInfoList = ЭСФСервер.ПолучитьСвойство(SntInfoList, "sntInfo", Неопределено); 
						
						Если SntInfoList <> Неопределено Тогда					
							
							SntInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(SntInfoList);
							МассивСНТДляПолученияСтатусаПоСопоставлению = Новый Массив;
							СоздатьОбновитьПолучаемыеСНТ(SntInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина,,,,,,МассивСНТДляПолученияСтатусаПоСопоставлению);
							
							
							//////////////////////////////////////////////////////////////////////////
							// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
							
							// Создать и заполнить массив идентификаторов ЭСФ, которые удалось найти в ИС ЭСФ.
							Для Каждого SntInfo Из SntInfoList Цикл
								ИдентификаторСНТ = ЭСФСервер.ПолучитьСвойство(SntInfo, "sntId", "");
								Если ЗначениеЗаполнено(ИдентификаторСНТ) Тогда
									МассивИдентификаторовНайденныхСНТ.Добавить(ИдентификаторСНТ);
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						ПоследнийБлок = XMLЗначение(Тип("Булево"),ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.sntQueryByIdResponse,"lastBlock", Истина));					
					Иначе
						
						ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
						
						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменСНТ.ОбновитьДокументыСНТПоИдентификатору'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						ВызватьИсключение НСтр("ru = 'При обновлении СНТ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
						
					КонецЕсли;
				КонецЦикла;
				ЭтоПоследняяПорция = ПоследнийБлок;
				
				ВыполнялосьОбращениеКСерверу = Истина;	
				
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			СписокИдентификаторов = "";
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		Если ВыполнялосьОбращениеКСерверу Тогда
			
			// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
					Если МассивИдентификаторовНайденныхСНТ.Найти(Выборка.Идентификатор) = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Документ ""[СНТ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден СНТ с идентификатором: ""[Идентификатор]"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СНТ]", СНТКлиентСервер.КраткоеПредставлениеСНТ(Выборка.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Идентификатор]", Выборка.Идентификатор);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//МассивИсправленныхСНТ = Новый Массив;
			//Выборка.Сбросить();
			//Пока Выборка.Следующий() Цикл
			//	Если Выборка.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
			//		МассивИсправленныхЭСФ.Добавить(Выборка.Ссылка);	
			//	КонецЕсли;
			//КонецЦикла;
			
			//Если МассивИсправленныхЭСФ.Количество() <> 0 Тогда
			//	МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
			//	ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
			//КонецЕсли;
			
			Если МассивСНТДляПолученияСтатусаПоСопоставлению <> Неопределено И МассивСНТДляПолученияСтатусаПоСопоставлению.Количество() <> 0 Тогда
				МассивСНТДляПолученияДанныхПоСопоставлению = Новый Массив;
				ОбновитьСтатусыСНТПоИдентификаторам(МассивСНТДляПолученияСтатусаПоСопоставлению, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии, МассивСНТДляПолученияДанныхПоСопоставлению);
				ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
				ОбработкаОбменЭСФ.ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивСНТДляПолученияДанныхПоСопоставлению, ПрофильИСЭСФ, , Истина,, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляПроведенияСНТ

Функция ПодготовитьПараметрыПроведенияСНТ(ДокументСсылка, Отказ) Экспорт	
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
	Запрос.УстановитьПараметр("ПустоеПодразделение", ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	Запрос.УстановитьПараметр("ТипПодразделенияОрганизаций", ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций());
	
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст 		= ТекстЗапросаРеквизитыДокументаСНТ(НомераТаблиц);
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	ПараметрыПроведения.Вставить("ДатаАннулирования", Реквизиты.ДатаАннулирования);
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаТоварыНаВС_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	+ ТекстЗапросаТаблицаТоварыНаВСВРезерве_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения);
	
	Если Реквизиты.Направление = Перечисления.НаправленияСНТ.Входящий Или 
		(Реквизиты.Направление = Перечисления.НаправленияСНТ.Исходящий И Реквизиты.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз) Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
	ИначеЕсли Реквизиты.ПоставщикРозничнаяРеализация ИЛИ Реквизиты.ПоставщикФизическоеЛицо Тогда
		//для документов возврата от розничного покупателя / физического лица
		ВидДвижения = ВидДвиженияНакопления.Приход;
	Иначе
		ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	Запрос.УстановитьПараметр("ЗначениеУслуги", Строка(6));
	
	ПараметрыПроведения.Вставить("ВидДвижения", ВидДвижения);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

//Подготовка параметров
Функция ТекстЗапросаРеквизитыДокументаСНТ(НомераТаблиц)
	
	НомераТаблиц.Вставить("вт_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ИсправленныеСНТ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СНТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Подтвержден)
	|			ТОГДА ЕСТЬNULL(СНТ.ДатаПриема, СНТ.Дата)
	|		ИНАЧЕ СНТ.Дата
	|	КОНЕЦ КАК Дата,
	|	СНТ.Организация,
	|	ВЫБОР КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами) И ТИПЗНАЧЕНИЯ(СНТ.Получатель) = ТИП(Справочник.Организации) 
	|		ТОГДА СНТ.Получатель
	|		ИНАЧЕ СНТ.Организация
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	СНТ.Получатель,
	|	СНТ.Ссылка,
	|	ВЫБОР
	|		КОГДА СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Входящий)
	|				ИЛИ СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	|					И (СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	|						ИЛИ СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|							И СНТ.ПоставщикРозничнаяРеализация
	|						ИЛИ СНТ.ПоставщикФизическоеЛицо)
	|			ТОГДА СНТ.СкладПолучатель
	|		ИНАЧЕ СНТ.СкладОтправитель
	|	КОНЕЦ КАК Склад,
	|	СНТ.СкладПолучатель КАК СкладПолучатель,
	|	СНТ.ДокументОснование КАК ДокументОснование,
	|	СНТ.ВидОперации,
	|	СНТ.Направление,
	|	СНТ.Статус,
	|	СНТ.СвязанныйСНТ,
	|	СНТ.ТипСНТ,
	|	ВЫБОР";
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И ТИПЗНАЧЕНИЯ(СНТ.Поставщик) = &ТипПодразделенияОрганизаций
		|				И НЕ СНТ.Поставщик.УказыватьРеквизитыГоловнойОрганизации
		|			ТОГДА СНТ.Поставщик
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И ТИПЗНАЧЕНИЯ(СНТ.Поставщик) = &ТипПодразделенияОрганизаций
		|				И СНТ.Поставщик.УказыватьРеквизитыГоловнойОрганизации
		|			ТОГДА &ПустоеПодразделение
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.Поставщик) = &ТипПодразделенияОрганизаций
		|				И ТИПЗНАЧЕНИЯ(СНТ.СкладОтправитель.Организация) = &ТипПодразделенияОрганизаций
		|			ТОГДА СНТ.СтруктурноеПодразделение
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.Поставщик) = &ТипПодразделенияОрганизаций
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.СкладОтправитель.Организация) = &ТипПодразделенияОрганизаций
		|			ТОГДА &ПустоеПодразделение";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|		КОГДА СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	|				И НЕ СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	|				И НЕ СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА СНТ.СтруктурноеПодразделение
	|		КОГДА (СНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Входящий)
	|				ИЛИ СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	|				ИЛИ СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров))
	|			ТОГДА СНТ.СтруктурноеПодразделениеПолучатель
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК СтруктурноеПодразделение,
	|	ВЫБОР";
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И ТИПЗНАЧЕНИЯ(СНТ.Получатель) = &ТипПодразделенияОрганизаций
		|				И НЕ СНТ.Получатель.УказыватьРеквизитыГоловнойОрганизации
		|			ТОГДА СНТ.Получатель
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И ТИПЗНАЧЕНИЯ(СНТ.Получатель) = &ТипПодразделенияОрганизаций
		|				И СНТ.Получатель.УказыватьРеквизитыГоловнойОрганизации
		|			ТОГДА &ПустоеПодразделение
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.Получатель) = &ТипПодразделенияОрганизаций
		|				И ТИПЗНАЧЕНИЯ(СНТ.СкладПолучатель.Организация) = &ТипПодразделенияОрганизаций
		|			ТОГДА СНТ.СтруктурноеПодразделениеПолучатель
		|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.Получатель) = &ТипПодразделенияОрганизаций
		|				И НЕ ТИПЗНАЧЕНИЯ(СНТ.СкладПолучатель.Организация) = &ТипПодразделенияОрганизаций
		|			ТОГДА &ПустоеПодразделение";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	|			ТОГДА СНТ.СтруктурноеПодразделениеПолучатель
	|		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Перемещение)
	|			ТОГДА СНТ.СтруктурноеПодразделениеПолучатель
	|		ИНАЧЕ &ПустоеПодразделение
	|	КОНЕЦ КАК СтруктурноеПодразделениеПолучатель,
	|	СНТ.ПоставщикРозничнаяРеализация,
	|	СНТ.ПолучательРозничнаяРеализация,
	|	СНТ.ПолучательФизическоеЛицо,
	|	СНТ.ПолучательНерезидент,
	|	СНТ.ПоставщикНерезидент,
	|	СНТ.ПоставщикФизическоеЛицо
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СНТ.Ссылка,
	|	СНТ.Дата,
	|	СНТ.СвязанныйСНТ,
	|	СНТ.ТипСНТ
	|ПОМЕСТИТЬ ВТ_ИсправленныеСНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная)
	|	И СНТ.СвязанныйСНТ = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Получатель,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.СкладПолучатель КАК СкладПолучатель,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Направление,
	|	Реквизиты.Статус,
	|	ВЫБОР
	|		КОГДА Реквизиты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Аннулирован)
	|			ТОГДА ЕСТЬNULL(ВТ_ИсправленныеСНТ.Дата, Реквизиты.Дата)
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК ДатаАннулирования,
	|	Реквизиты.СвязанныйСНТ,
	|	Реквизиты.ТипСНТ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Реквизиты.Склад.Организация) = &ТипПодразделенияОрганизаций
	|				И НЕ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	|		ТОГДА &ПустоеПодразделение
	|		ИНАЧЕ Реквизиты.СтруктурноеПодразделение
	|	КОНЕЦ КАК СтруктурноеПодразделение,
	|	Реквизиты.ПоставщикРозничнаяРеализация,
	|	Реквизиты.ПолучательРозничнаяРеализация,
	|	Реквизиты.ПолучательФизическоеЛицо,
	|	Реквизиты.ПолучательНерезидент,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Реквизиты.СкладПолучатель.Организация) = &ТипПодразделенияОрганизаций
	|				И НЕ Реквизиты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	|		ТОГДА &ПустоеПодразделение
	|		ИНАЧЕ Реквизиты.СтруктурноеПодразделениеПолучатель
	|	КОНЕЦ КАК СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.ПоставщикФизическоеЛицо,
	|	Реквизиты.ПоставщикНерезидент,
	|	Реквизиты.ВидОперации КАК ТипФормы,
	|	Реквизиты.ОрганизацияПолучатель
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсправленныеСНТ КАК ВТ_ИсправленныеСНТ
	|		ПО Реквизиты.Ссылка = ВТ_ИсправленныеСНТ.СвязанныйСНТ";
	
	Возврат ТекстЗапроса; 
	
КонецФункции

//Подготовка таблицы товаров на ВС
Функция ТекстЗапросаТаблицаТоварыНаВС_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Возврат СНТСерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВС_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения);
	
КонецФункции

//Подготовка таблицы товаров на ВС
Функция ТекстЗапросаТаблицаТоварыНаВСВРезерве_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Возврат СНТСерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВСВРезерве_СНТ(НомераТаблиц, Реквизиты, ПараметрыПроведения);		
	
КонецФункции

//Процедура проведения входящих документов СНТ при обновлении и получении
Процедура ПровестиВходящиеСНТ(МассивСНТ,Знач НаправлениеСНТ = Неопределено)
	
	Если МассивСНТ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектСНТ Из МассивСНТ Цикл
		//В случае если массив содержит ссылки а не объекты
		Если ТипЗнч(ОбъектСНТ) = Тип("ДокументСсылка.СНТ") Тогда
			ОбъектСНТ = ОбъектСНТ.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Черновик 
			ИЛИ ОбъектСНТ.Статус = Перечисления.СтатусыСНТ.Ошибочный Тогда 
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Запрещено проведение документа в статусах ""Черновик"", ""Ошибочный"".'"));
			Возврат;
		КонецЕсли;
		
		ЕстьПустыеДополнительныеИдентификаторыТоваров = ТоварыВССПустымиИдентификаторами(ОбъектСНТ);
		ОбъектСНТ.Состояние = СНТСервер.СостояниеСНТ(ОбъектСНТ, ЕстьПустыеДополнительныеИдентификаторыТоваров);
		
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз
			И (НЕ(ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ПодтвержденПолучателем ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОтклоненПолучателем)) Тогда
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Проведение документа разрешено только в статусах ""Подтвержден"" или ""Отклонен""'"));
			ОбъектСНТ.Записать();
			Возврат;
		КонецЕсли;
			
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий
			И (НЕ(ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ПодтвержденПолучателем ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОтклоненПолучателем)) Тогда
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не проведен, движения не сформированы. Проведение документа разрешено только в статусах ""Подтвержден"" или ""Отклонен""  '"));
			ОбъектСНТ.Записать();
			Возврат;
		КонецЕсли;
		
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами 
			И НЕ (ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ПодтвержденПолучателем ИЛИ ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.ОтклоненПолучателем) 
		Тогда 
			ОбъектСНТ.Записать();
			Возврат;
		КонецЕсли;
		
		КлючевыеПоляЗаполнены = ОбъектСНТ.ПроверитьЗаполнение();
		
		Если КлючевыеПоляЗаполнены Тогда
			
			НачатьТранзакцию();
			
			Попытка
				ОбъектСНТ.Записать(РежимЗаписиДокумента.Проведение);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не проведен документ с регистрационным номером %1 по причине не заполненных полей'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектСНТ.Номер);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляПроведенияСопоставлениеФНОиСНТ

Функция ПодготовитьПараметрыПроведенияСопоставления(ДокументСсылка, Отказ) Экспорт	
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос 						   = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
	Запрос.УстановитьПараметр("ПустоеПодразделение", ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст 		= ТекстЗапросаРеквизитыДокументаСопоставления(НомераТаблиц);
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	
	Реквизиты = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
		
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаТаблицаТоварыНаВС_Сопоставление(НомераТаблиц, Реквизиты, ПараметрыПроведения)
					+ ТекстЗапросаТаблицаСопоставленныеИП(НомераТаблиц, Реквизиты, ПараметрыПроведения);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

//Подготовка параметров
Функция ТекстЗапросаРеквизитыДокументаСопоставления(НомераТаблиц)
	
	НомераТаблиц.Вставить("вт_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СопоставлениеСНТиФНО.Дата Как Дата, 
	|	СопоставлениеСНТиФНО.Организация,
	|	СопоставлениеСНТиФНО.Ссылка,
	|	СопоставлениеСНТиФНО.СтруктурноеПодразделение КАК СтруктурноеПодразделение
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.СопоставлениеСНТиФНО КАК СопоставлениеСНТиФНО
	|ГДЕ
	|	СопоставлениеСНТиФНО.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.СтруктурноеПодразделение
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Подготовка таблицы товаров на ВС
Функция ТекстЗапросаТаблицаТоварыНаВС_Сопоставление(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	Возврат СНТСерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВС_Сопоставление(НомераТаблиц, Реквизиты, ПараметрыПроведения);
	
КонецФункции

Функция ТекстЗапросаТаблицаСопоставленныеИП(НомераТаблиц, Реквизиты, ПараметрыПроведения)
	
	НомераТаблиц.Вставить("ТаблицаСопоставленныеИсточникиПроисхождения", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СопоставлениеТовары.НомерСтроки КАК НомерСтроки,
	|	СопоставлениеТовары.ИсточникПроисхождения КАК ИсточникПроисхожденияДоСопоставления,
	|	СопоставлениеТовары.ИсточникПроисхожденияПолучатель КАК ИсточникПроисхожденияПослеСопоставления,
	|	""СопоставленныеИП"" КАК ИмяСписка
	|ИЗ
	|	Документ.СопоставлениеСНТиФНО.ТоварыСНТ КАК СопоставлениеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|		ПО СопоставлениеТовары.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	СопоставлениеТовары.ИсточникПроисхождения <> &ПустойИсточникПроисхождения
	|	И СопоставлениеТовары.ИсточникПроисхожденияПолучатель <> &ПустойИсточникПроисхождения
	|
	|";

	Возврат ТекстЗапроса + ВСВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

#КонецОбласти

#Область ИсточникиПроисхождения

Процедура СоздатьОбновитьИсточникиПроисхождения(ОбъектСНТ, ИмяТабличнойЧасти, НомерТабличнойЧасти)
	
	ТаблицаИсточниковПроисхождения = ВССервер.ПустаяТаблицаИсточниковПроисхождения();
	//будут хранится данные по измененным строкам, для создания новых источников происхождения
	ТаблицаИсточниковПроисхожденияДляОбработки = ТаблицаИсточниковПроисхождения.СкопироватьКолонки();
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерПозицииВДекларацииИлиЗаявленииЧисло", Новый ОписаниеТипов("Число"));	
	
	Для Каждого СтрокаТовар Из ОбъектСНТ[ИмяТабличнойЧасти] Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовар.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектСНТ) = Тип("ДокументОбъект.СНТ") Тогда
			
			//услуги не участвует в ИП
			Если СтрокаТовар.ПризнакПроисхождения  = "6" Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНомерИП = ТаблицаИсточниковПроисхождения.Добавить();
			СтрокаНомерИП.ГСВС              		  = ВСВызовСервера.ПолучитьГСВС(СтрокаТовар.ИдентификаторТовара, СтрокаТовар.КодТНВЭД);
			СтрокаНомерИП.МеткаТовара				  = ВСКлиентСервер.ОпределитьМеткуПоИдентификатору(СтрокаТовар.ИдентификаторТовара);;
			СтрокаНомерИП.ТипПроисхождения			  = ВСКлиентСервер.ОпределитьТипПроисхожденияПоПризнакуПроисхождения(СтрокаТовар.ПризнакПроисхождения);
			СтрокаНомерИП.ТипПошлины				  = ВСКлиентСервер.ОпределитьТипПошлины(СтрокаТовар.НомерЗаявленияВРамкахТС);
			СтрокаНомерИП.СсылкаИсточникПроисхождения = СтрокаТовар.ИсточникПроисхождения;
			
			Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда 
				СтрокаНомерИП.ДополнительныйИдентификатор = СтрокаТовар.ДополнительныйИдентификаторПолучатель;
			Иначе
				СтрокаНомерИП.ДополнительныйИдентификатор = СтрокаТовар.ДополнительныйИдентификатор;
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "ТабачнаяПродукция" ИЛИ ИмяТабличнойЧасти = "ДанныеПоНефтепродуктам" 
				ИЛИ ИмяТабличнойЧасти = "АлкогольнаяПродукцияКромеПива" ИЛИ ИмяТабличнойЧасти = "Виноматериал" 
				ИЛИ ИмяТабличнойЧасти = "ЭтиловыйСпирт" Тогда
				
				СтрокаНомерИП.ПинКод = СтрокаТовар.ПинКод;
			КонецЕсли; 
			
			Если ИмяТабличнойЧасти = "АлкогольнаяПродукцияКромеПива" ИЛИ ИмяТабличнойЧасти = "ЭтиловыйСпирт" Тогда
				СтрокаНомерИП.Крепость = СтрокаТовар.Крепость;
			КонецЕсли;
			
			Если ИмяТабличнойЧасти <> "Товары" И (ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий ИЛИ ОбъектСНТ.ВидВвоза = Перечисления.ВидыВвозаСНТ.Импорт) Тогда 
				СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Истина;
			Иначе
				СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Ложь;
			КонецЕсли;
			
			Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз Тогда
				СтрокаНомерИП.НомерЗаявленияВРамкахТС				= ОбъектСНТ.РегистрационныйНомерИСЭСФ;
				СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении	= Строка(НомерТабличнойЧасти) + "/" + Строка(СтрокаТовар.НомерСтроки);
				СтрокаНомерИП.ТоварНаименованиеВРамкахТС			= СтрокаТовар.ТоварНаименование;
				СтрокаНомерИП.ТипПошлины							= Перечисления.ТипыПошлинВС.ЕАЭС;
				СтрокаНомерИП.СтранаПроисхожденияТовара				= СНТСерверПереопределяемый.ПолучитьСтрануПроисхожденияТовараПоКодуАльфа(ОбъектСНТ.ПоставщикКодСтраны);
				
			ИначеЕсли ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Входящий 
				И ЗначениеЗаполнено(СтрокаТовар.НомерЗаявленияВРамкахТС) И СтрНайти(СтрокаТовар.НомерЗаявленияВРамкахТС, "KZ-SNT-") > 0 Тогда
				
				Если ЗначениеЗаполнено(СтрокаТовар.НомерФНО) И ЗначениеЗаполнено(СтрокаТовар.НомерПозицииИзФНО) Тогда
					
					СтрокаНомерИП.НомерПервичнойСНТ = СтрокаТовар.НомерЗаявленияВРамкахТС;
					СтрокаНомерИП.НомерПозицииИзПервичнойСНТ = СтрокаТовар.НомерПозицииВДекларацииИлиЗаявлении;
					СтрокаНомерИП.НомерЗаявленияВРамкахТС = СтрокаТовар.НомерФНО;
					СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении = СтрокаТовар.НомерПозицииИзФНО;
					
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТовар.НомерФНО) И НЕ ЗначениеЗаполнено(СтрокаТовар.НомерПозицииИзФНО) Тогда
					
					СтрокаНомерИП.НомерПервичнойСНТ = "";
					СтрокаНомерИП.НомерПозицииИзПервичнойСНТ = "";
					СтрокаНомерИП.НомерЗаявленияВРамкахТС = СтрокаТовар.НомерЗаявленияВРамкахТС;
					СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении = СтрокаТовар.НомерПозицииВДекларацииИлиЗаявлении;
					
				КонецЕсли;
				
				СтрокаНомерИП.ТоварНаименованиеВРамкахТС = СтрокаТовар.ТоварНаименованиеВРамкахТС;
				СтрокаНомерИП.СтранаПроисхожденияТовара = ВСКлиентСервер.ОпределитьСтрануПоПризнакуПроисхождения(СтрокаТовар.ПризнакПроисхождения);
			
			Иначе
				СтрокаНомерИП.НомерЗаявленияВРамкахТС					= СтрокаТовар.НомерЗаявленияВРамкахТС;
				СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении		= СтрокаТовар.НомерПозицииВДекларацииИлиЗаявлении;
				СтрокаНомерИП.ТоварНаименованиеВРамкахТС				= СтрокаТовар.ТоварНаименованиеВРамкахТС;
				СтрокаНомерИП.СтранаПроисхожденияТовара					= ВСКлиентСервер.ОпределитьСтрануПоПризнакуПроисхождения(СтрокаТовар.ПризнакПроисхождения);
			КонецЕсли;

		Иначе
			
			СтрокаНомерИП = ТаблицаИсточниковПроисхождения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНомерИП, СтрокаТовар.ИсточникПроисхождения);
			
			СтрокаНомерИП.НомерЗаявленияВРамкахТС				= СтрокаТовар.НомерЗаявленияВРамкахТС;
			СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении	= Формат(СтрокаТовар.НомерПозицииВЗаявлении,"ЧГ=0");
			СтрокаНомерИП.ТоварНаименованиеВРамкахТС			= СтрокаТовар.ТоварНаименованиеВРамкахТС;

		КонецЕсли;
		
		СтрокаНомерИП.ДокументПартии	= ?(ОбъектСНТ.ЭтоНовый(), ОбъектСНТ.ПолучитьСсылкуНового(), ОбъектСНТ.Ссылка);
		СтрокаНомерИП.НомерСтроки		= СтрокаТовар.НомерСтроки;
		СтрокаНомерИП.Номенклатура		= СтрокаТовар.Товар;
		СтрокаНомерИП.КодТНВЭД			= СтрокаТовар.КодТНВЭД;
		
	КонецЦикла;	
	
	//уберем строки, по которым не было изменений в ключевой аналитике ИП в исправленном ЭСФ
	Если ТипЗнч(ОбъектСНТ) = Тип("ДокументОбъект.СНТ") Тогда 
		ТипСНТ = ОбъектСНТ.ТипСНТ;
		Если ТипСНТ = Перечисления.ТипыСНТ.Исправленная Тогда
			СравнитьКлючевыеРеквизитыИсправленногоИОсновногоСНТ(ТаблицаИсточниковПроисхождения, ОбъектСНТ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаИсточниковПроисхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Для новых документов по-умолчанию сразу создаем источники происхожденя
	Если ОбъектСНТ.ЭтоНовый() Тогда
		
		Если ТипЗнч(ОбъектСНТ) = Тип("ДокументОбъект.СНТ") Тогда
			ВССервер.СоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхождения, ОбъектСНТ[ИмяТабличнойЧасти], );
		Иначе
			ВССервер.СоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхождения, ОбъектСНТ[ИмяТабличнойЧасти], Истина);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСНТ) = Тип("ДокументОбъект.СНТ") Тогда
		ТаблицаСИзмененнымиДанными = ИзмененнаяТаблицаКлючевыхРеквизитов(ТаблицаИсточниковПроисхождения, ОбъектСНТ, ИмяТабличнойЧасти);
	Иначе
		ТаблицаСИзмененнымиДанными = ИзмененнаяТаблицаКлючевыхРеквизитовСопоставления(ТаблицаИсточниковПроисхождения, ОбъектСНТ);
	КонецЕсли;
	
	МассивОтработанныхСтрок = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТаблицаИсточниковПроисхождения Цикл
		
		СтрокаКлючевыеИзменения = ТаблицаСИзмененнымиДанными.Найти(СтрокаТЧ.СсылкаИсточникПроисхождения, "СсылкаИсточникПроисхождения");
		
		//если нет изменений по ключевым реквизтам, обновить неключевые поля, если они изменены
		Если СтрокаКлючевыеИзменения = Неопределено И ЗначениеЗаполнено(СтрокаТЧ.СсылкаИсточникПроисхождения) Тогда
			ВССервер.ОбновитьРеквизитыИсточникаПроисхождения(СтрокаТЧ, СтрокаТЧ.СсылкаИсточникПроисхождения);
			ОбновитьРеквизитыЗаявленияВИсточникахПроисхождения(СтрокаТЧ, СтрокаТЧ.СсылкаИсточникПроисхождения);
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаИсточниковПроисхожденияДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ); 
		//очищаем ранее назначенный источник происхождения
		НоваяСтрока.СсылкаИсточникПроисхождения = ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
	КонецЦикла;
	
	Если ТипЗнч(ОбъектСНТ) = Тип("ДокументОбъект.СНТ") Тогда
		Если ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И ОбъектСНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда
			ВССервер.НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхожденияДляОбработки, ОбъектСНТ[ИмяТабличнойЧасти], Истина);
		Иначе
			ВССервер.НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхожденияДляОбработки, ОбъектСНТ[ИмяТабличнойЧасти], );
		КонецЕсли;
	Иначе
		ВССервер.НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхожденияДляОбработки, ОбъектСНТ[ИмяТабличнойЧасти], Истина);
	КонецЕсли;
	
КонецПроцедуры

//Обновляет реквизиты заявления в рамках ТС в случаях, когда пришел номер ФНО с сервера после сопоставления
Процедура ОбновитьРеквизитыЗаявленияВИсточникахПроисхождения(СтрокаИП, ИсточникПроисхождения)
	
	ДанныеИП = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаИП);
	ОбъектИсточникПроисхождения =  ИсточникПроисхождения.ПолучитьОбъект();
	
	Если ОбъектИсточникПроисхождения.НомерЗаявленияВРамкахТС <> ДанныеИП.НомерЗаявленияВРамкахТС Тогда
		ОбъектИсточникПроисхождения.НомерЗаявленияВРамкахТС = ДанныеИП.НомерЗаявленияВРамкахТС;
	КонецЕсли;
	
	Если ОбъектИсточникПроисхождения.НомерПозицииВДекларацииИлиЗаявлении <> ДанныеИП.НомерПозицииВДекларацииИлиЗаявлении Тогда
		ОбъектИсточникПроисхождения.НомерПозицииВДекларацииИлиЗаявлении = ДанныеИП.НомерПозицииВДекларацииИлиЗаявлении;
	КонецЕсли;
	
	Если ОбъектИсточникПроисхождения.НомерПервичнойСНТ <> ДанныеИП.НомерПервичнойСНТ Тогда
		ОбъектИсточникПроисхождения.НомерПервичнойСНТ = ДанныеИП.НомерПервичнойСНТ;
	КонецЕсли;
	
	Если ОбъектИсточникПроисхождения.НомерПозицииИзПервичнойСНТ <> ДанныеИП.НомерПозицииИзПервичнойСНТ Тогда
		ОбъектИсточникПроисхождения.НомерПозицииИзПервичнойСНТ = ДанныеИП.НомерПозицииИзПервичнойСНТ;
	КонецЕсли;
	
	Если ОбъектИсточникПроисхождения.Модифицированность() Тогда
		Попытка
			ОбъектИсточникПроисхождения.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура СравнитьКлючевыеРеквизитыИсправленногоИОсновногоСНТ(ТаблицаИсточниковПроисхождения, ОбъектКорректировочныйСНТ)
	
	ОсновнаяСНТ = ОбъектКорректировочныйСНТ.СвязанныйСНТ;
	ТипСНТ 		= ОбъектКорректировочныйСНТ.ТипСНТ;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновнаяСНТ", ОсновнаяСНТ);
	Запрос.УстановитьПараметр("ТаблицаИсточниковПроисхождения", ТаблицаИсточниковПроисхождения);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.НомерСтроки,
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ИсточникиПроисхождения.Номенклатура КАК Номенклатура,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.МеткаТовара КАК МеткаТовара,
	|	ИсточникиПроисхождения.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхождения.ГСВС КАК ГСВС,
	|	ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|	
	|ПОМЕСТИТЬ ВТ_НовыеДанныеНомераИП
	|ИЗ
	|	&ТаблицаИсточниковПроисхождения КАК ИсточникиПроисхождения
	|;
	|
	| ВЫБРАТЬ
	|	СНТТовары.НомерСтроки КАК НомерСтроки,
	|	СНТТовары.КодТНВЭД КАК КодТНВЭД,
	|	СНТТовары.Товар КАК Товар,
	|	СНТТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	СНТТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	СНТТовары.ТоварНаименование КАК ТоварНаименованиеВРамкахТС,
	|	СНТТовары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	ИсточникиПроисхождения.МеткаТовара,
	|	СНТТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ ВТ_ОсновнаяСНТТовары
	|
	|ИЗ
	|	Документ.СНТ.ТоварыВС КАК СНТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО СНТТовары.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|ГДЕ
	|	СНТТовары.Ссылка = &ОсновнаяСНТ
	|
	|;
	|ВЫБРАТЬ
	|	ИсточникиПроисхожденияИсправленного.НомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхожденияОсновного.ИсточникПроисхождения, ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)) КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхожденияОсновного.ДополнительныйИдентификатор КАК ДополнительныйИдентификаторОсновного
	|ИЗ
	|	ВТ_НовыеДанныеНомераИП КАК ИсточникиПроисхожденияИсправленного
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновнаяСНТТовары КАК ИсточникиПроисхожденияОсновного
	|		ПО ИсточникиПроисхожденияИсправленного.Номенклатура = ИсточникиПроисхожденияОсновного.Товар 
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.КодТНВЭД = ИсточникиПроисхожденияОсновного.КодТНВЭД
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.НомерЗаявленияВРамкахТС = ИсточникиПроисхожденияОсновного.НомерЗаявленияВРамкахТС
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.НомерПозицииВДекларацииИлиЗаявлении = ИсточникиПроисхожденияОсновного.НомерПозицииВДекларацииИлиЗаявлении
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.ТоварНаименованиеВРамкахТС = ИсточникиПроисхожденияОсновного.ТоварНаименованиеВРамкахТС
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.ДополнительныйИдентификатор = ИсточникиПроисхожденияОсновного.ДополнительныйИдентификатор
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.МеткаТовара = ИсточникиПроисхожденияОсновного.МеткаТовара
	|//%Доп%			И ИсточникиПроисхожденияИсправленного.НомерСтроки = ИсточникиПроисхожденияОсновного.НомерСтроки
	|";
	
	Если ТипСНТ = Перечисления.ТипыСНТ.Исправленная Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Испр%", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Доп%", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СсылкаИсточникПроисхождения) Тогда
			//в исправленном - найден источник, значит аналитика совпадает - новые ИП не создаем
			//в дополнительном - ИП в принципе не создаем, берем ИП основного
			
			//удалим строку из таблицы
			УдаляемаяСтрока = ТаблицаИсточниковПроисхождения.Найти(Выборка.НомерСтроки, "НомерСтроки");
			ТаблицаИсточниковПроисхождения.Удалить(УдаляемаяСтрока);
			
			//в исправленный СНТ подставляем источник из основного СНТ
			СтрокаДокумента = ОбъектКорректировочныйСНТ.Товары.Найти(Выборка.НомерСтроки, "НомерСтроки");
			СтрокаДокумента.ИсточникПроисхождения = Выборка.СсылкаИсточникПроисхождения;
			
			//Если СтрокаДокумента.Количество <= 0 И ТипСНТ = Перечисления.ТипыСНТ.Дополнительный Тогда
			//	СтрокаДокумента.ДополнительныйИдентификатор = Выборка.ДополнительныйИдентификаторОсновного;		
			//КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Функция ИзмененнаяТаблицаКлючевыхРеквизитов(ТаблицаИсточниковПроисхождения, ОбъектСНТ, ИмяТабличнойЧасти)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсточниковПроисхождения", ТаблицаИсточниковПроисхождения);
	Запрос.УстановитьПараметр("ДокументСсылка", ОбъектСНТ.Ссылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СНТ.Ссылка КАК Ссылка,
	|	СНТ.РегистрационныйНомерИСЭСФ КАК РегистрационныйНомерИСЭСФ,
	|	СНТ.Направление КАК Направление,
	|	СНТ.ВидОперации КАК ВидОперации
	|ПОМЕСТИТЬ ВТ_ДанныеСНТ
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка = &ДокументСсылка
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ИсточникиПроисхождения.Номенклатура КАК Номенклатура,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|   ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|   ИсточникиПроисхождения.НомерПозицииИзПервичнойСНТ КАК НомерПозицииИзПервичнойСНТ,
	|   ИсточникиПроисхождения.НомерПервичнойСНТ КАК НомерПервичнойСНТ,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_НовыеДанныеНомераИП
	|ИЗ
	|	&ТаблицаИсточниковПроисхождения КАК ИсточникиПроисхождения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	|	ТЧТовары.Ссылка КАК ДокументПартии,
	|	ТЧТовары.Товар КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеСНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	|				И ВТ_ДанныеСНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	|				И ТЧТовары.НомерЗаявленияВРамкахТС = """"
	|			ТОГДА ВТ_ДанныеСНТ.РегистрационныйНомерИСЭСФ
	|		ИНАЧЕ ТЧТовары.НомерЗаявленияВРамкахТС
	|	КОНЕЦ КАК НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ВТ_ДанныеСНТ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Исходящий)
	|				И ВТ_ДанныеСНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
	|				И ТЧТовары.НомерПозицииВДекларацииИлиЗаявлении = """"
	|			ТОГДА ВТ_НовыеДанныеНомераИП.НомерПозицииВДекларацииИлиЗаявлении
	|		ИНАЧЕ ТЧТовары.НомерПозицииВДекларацииИлиЗаявлении
	|	КОНЕЦ КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ТЧТовары.ТоварНаименование КАК ТоварНаименование,
	|	ТЧТовары.ИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	ТЧТовары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВТ_ДанныеТЧ
	|ИЗ
	|	Документ.СНТ.%ИмяТабличнойЧасти КАК ТЧТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеСНТ КАК ВТ_ДанныеСНТ
	|		ПО (ТЧТовары.Ссылка = ВТ_ДанныеСНТ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НовыеДанныеНомераИП КАК ВТ_НовыеДанныеНомераИП
	|		ПО (ТЧТовары.Ссылка = ВТ_НовыеДанныеНомераИП.ДокументПартии
	|				И ТЧТовары.ДополнительныйИдентификатор = ВТ_НовыеДанныеНомераИП.ДополнительныйИдентификатор)
	|ГДЕ
	|	ТЧТовары.Ссылка = &ДокументСсылка
	|	И НЕ ТЧТовары.ПризнакПроисхождения = ""6""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(Товары.Счетчик) КАК Счетчик
	|ПОМЕСТИТЬ ВТ_Сбор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧТовары.КодТНВЭД,
	|		ТЧТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|		ТЧТовары.НомерЗаявленияВРамкахТС,
	|		ТЧТовары.ТоварНаименование,
	|		ТЧТовары.ДокументПартии,
	|		ТЧТовары.СсылкаИсточникПроисхождения,
	|		ТЧТовары.Номенклатура,
	|		ТЧТовары.ДополнительныйИдентификатор,
	|		-1 КАК Счетчик
	|	ИЗ
	|		ВТ_ДанныеТЧ КАК ТЧТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПроисхождения.КодТНВЭД,
	|		ВЫБОР КОГДА ИсточникиПроисхождения.НомерПозицииИзПервичнойСНТ = """" ТОГДА 		
	|			ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении
	|		ИНАЧЕ
	|			ИсточникиПроисхождения.НомерПозицииИзПервичнойСНТ
	|		КОНЕЦ КАК НомерПозицииВДекларацииИлиЗаявлении,
	|		ВЫБОР КОГДА ИсточникиПроисхождения.НомерПервичнойСНТ = """" ТОГДА 		
	|			ИсточникиПроисхождения.НомерЗаявленияВРамкахТС
	|		ИНАЧЕ
	|			ИсточникиПроисхождения.НомерПервичнойСНТ
	|		КОНЕЦ КАК НомерЗаявленияВРамкахТС,
	|		ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС,
	|		ИсточникиПроисхождения.ДокументПартии,
	|		ИсточникиПроисхождения.СсылкаИсточникПроисхождения,
	|		ИсточникиПроисхождения.Номенклатура,
	|		ИсточникиПроисхождения.ДополнительныйИдентификатор,
	|		ИсточникиПроисхождения.Счетчик
	|	ИЗ
	|		ВТ_НовыеДанныеНомераИП КАК ИсточникиПроисхождения) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КодТНВЭД,
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.НомерЗаявленияВРамкахТС,
	|	Товары.ТоварНаименование,
	|	Товары.СсылкаИсточникПроисхождения,
	|	Товары.Номенклатура,
	|	Товары.ДокументПартии,
	|	Товары.ДополнительныйИдентификатор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Товары.Счетчик) <> 0
	|		ИЛИ Товары.СсылкаИсточникПроисхождения = &ПустойИсточникПроисхождения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сбор.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(ВТ_Сбор.Счетчик) КАК Счетчик
	|ИЗ
	|	ВТ_Сбор КАК ВТ_Сбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Сбор.СсылкаИсточникПроисхождения";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти", ИмяТабличнойЧасти); 
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ИзмененнаяТаблицаКлючевыхРеквизитовСопоставления(ТаблицаИсточниковПроисхождения, ОбъектСопоставление)
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("ТаблицаИсточниковПроисхождения", ТаблицаИсточниковПроисхождения);
	Запрос.УстановитьПараметр("ДокументСсылка", ОбъектСопоставление.Ссылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ИсточникиПроисхождения.Номенклатура КАК Номенклатура,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхождения.ГСВС КАК ГСВС,
	|   ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_НовыеДанныеНомераИП
	|ИЗ
	|	&ТаблицаИсточниковПроисхождения КАК ИсточникиПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(Товары.Счетчик) КАК Счетчик
	|ПОМЕСТИТЬ ВТ_Сбор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	|		ТЧТовары.НомерПозицииВЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|		ТЧТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|		ТЧТовары.ТоварНаименование КАК ТоварНаименование,
	|		ТЧТовары.Ссылка КАК ДокументПартии,
	|		ТЧТовары.ИсточникПроисхожденияПолучатель КАК СсылкаИсточникПроисхождения,
	|		ТЧТовары.Товар КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка) КАК ГСВС,
	|		ТЧТовары.ИсточникПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|		-1 КАК Счетчик
	|	ИЗ
	|		Документ.СопоставлениеСНТиФНО.ТоварыСНТ КАК ТЧТовары
	|	ГДЕ
	|		ТЧТовары.Ссылка = &ДокументСсылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПроисхождения.КодТНВЭД,
	|		ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении,
	|		ИсточникиПроисхождения.НомерЗаявленияВРамкахТС,
	|		ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС,
	|		ИсточникиПроисхождения.ДокументПартии,
	|		ИсточникиПроисхождения.СсылкаИсточникПроисхождения,
	|		ИсточникиПроисхождения.Номенклатура,
	|		ИсточникиПроисхождения.ГСВС,
	|		ИсточникиПроисхождения.ДополнительныйИдентификатор,
	|		ИсточникиПроисхождения.Счетчик
	|	ИЗ
	|		ВТ_НовыеДанныеНомераИП КАК ИсточникиПроисхождения) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КодТНВЭД,
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.НомерЗаявленияВРамкахТС,
	|	Товары.ТоварНаименование,
	|	Товары.СсылкаИсточникПроисхождения,
	|	Товары.Номенклатура,
	|	Товары.ГСВС,
	|	Товары.ДокументПартии,
	|	Товары.ДополнительныйИдентификатор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Товары.Счетчик) <> 0
	|		ИЛИ Товары.СсылкаИсточникПроисхождения = &ПустойИсточникПроисхождения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сбор.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(ВТ_Сбор.Счетчик) КАК Счетчик
	|ИЗ
	|	ВТ_Сбор КАК ВТ_Сбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Сбор.СсылкаИсточникПроисхождения";
	
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ЗаполнитьТоварыСУчетомИсточниковПроисхождения(Объект, Отказ = Ложь, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата"		 , Объект.Дата);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяСписка"	 , ИмяТабличнойЧасти);	

	СНТСерверПереопределяемый.ЗаполнитьСтруктурноеПодразделениеВПараметрах(Объект, ПараметрыФормы);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СНТ") Тогда
		Если Объект.ТипСНТ = Перечисления.ТипыСНТ.Исправленная Тогда
			ПараметрыФормы.Вставить("СвязанныйСНТ", Объект.СвязанныйСНТ); 
		ИначеЕсли  Объект.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров 
			И Объект.Направление = Перечисления.НаправленияСНТ.Исходящий 
			И ТипЗНЧ(Объект.ДокументОснование)  =  СНТСерверПереопределяемый.ПолучитьТипДокументаВозвратОтПокупателя() Тогда
			ПараметрыФормы.Вставить("СвязанныйСНТ", Объект.СвязанныйСНТ); 
			ПараметрыФормы.Вставить("ЭтоВозвратСНТ", Истина);			
		КонецЕсли;
		
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
			ПараметрыФормы.Вставить("Склад", Объект.СкладПолучатель);			
		Иначе	
			ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);	
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СНТ") Тогда
		ПараметрыФормы.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить()));		
	Иначе			
		ПараметрыФормы.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));		
	КонецЕсли;	
	
	АдресХранилища = СНТСервер.ЗаполнитьИсточникиПроисхождения(ПараметрыФормы, Отказ);	
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СНТ") Тогда
		Объект[ИмяТабличнойЧасти].Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));   	
	Иначе	
		Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));   	
	КонецЕсли;	
	
КонецПроцедуры

//Процедура заполняет признаки происхождения по умолчанию в документах
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ДанныеДляЗаполненияПП, ДокументОбъект) Экспорт
	
	//При заполнении вытягиваем данные по ГСВС через Код ТНВЭД, и смотрим на признак перечня изъятий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТоварИзТЧ", ДанныеДляЗаполненияПП);
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Товар КАК Товар,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.ИмяТЧ КАК ИмяТЧ	
	|ПОМЕСТИТЬ вт_Товар
	|ИЗ
	|	&ТоварИзТЧ КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товар.НомерСтроки,
	|	вт_Товар.Товар.Представление КАК ТоварПредставление,
	|	вт_Товар.КодТНВЭД,
	|	вт_Товар.ИмяТЧ,
	|	ВЫБОР
	|		КОГДА СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий
	|					ТОГДА 2
	|				ИНАЧЕ ""Нет данных""
	|			КОНЕЦ
	|	КОНЕЦ КАК ПризнакПроисхождения
	|ИЗ
	|	вт_Товар КАК вт_Товар
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
	|					&Дата,
	|					НоменклатураГСВС.КодГСВС В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт_Товар.КодТНВЭД
	|						ИЗ
	|							вт_Товар КАК вт_Товар)) КАК СведенияОНоменклатуреГСВС
	|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС.Ссылка
	|		ПО вт_Товар.КодТНВЭД = ГСВС.КодГСВС
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|			И (СведенияОНоменклатуреГСВС.ПризнакАктивности)";

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекСтрока = ДокументОбъект[ВыборкаДетальныеЗаписи.ИмяТЧ][ВыборкаДетальныеЗаписи.НомерСтроки-1];
			Если ВыборкаДетальныеЗаписи.ПризнакПроисхождения <> "Нет данных" Тогда
				ТекСтрока.ПризнакПроисхождения = ВыборкаДетальныеЗаписи.ПризнакПроисхождения;
			Иначе
				ТекСтрока.ПризнакПроисхождения = "5";
				
				ТекстОшибки = НСтр("ru = 'Для товара ""%1"" отсутствуют данные по ГСВС.
				|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению.'");
				
				ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ВыборкаДетальныеЗаписи.ТоварПредставление);
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ВыборкаДетальныеЗаписи.ИмяТЧ, ВыборкаДетальныеЗаписи.НомерСтроки, "ПризнакПроисхождения"),,)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСозданиеПоискДоговора

Функция НайтиДоговорыПоставкиПоДаннымСНТ(Знач ОбъектСНТ, Знач СтрокаКонтрагент) Экспорт
	
	Возврат СНТСерверПереопределяемый.НайтиДоговорыПоставкиПоДаннымСНТ(ОбъектСНТ,СтрокаКонтрагент);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Процедура ЗаполнитьРеквизитыКонтрагента(Знач ОбъектСНТ, Знач Поставщик) Экспорт
	
	СНТСерверПереопределяемый.ЗаполнитьРеквизитыКонтрагента(ОбъектСНТ, Поставщик);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеСозданиеВСКонтрагента

Функция ПолучитьВСКонтрагента(ПрофильИСЭСФ, МассивКонтрагентов, ВерсияВС = Неопределено) Экспорт
	
	ИдентификаторСессии = ВССервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
	
	Если ВерсияВС = Неопределено Тогда
		ПараметрыЭСФ = ВСВызовСервераПовтИсп.ПолучитьПараметрыВС();
		ВерсияВС = ПараметрыЭСФ.ВерсияВС;
	КонецЕсли;	
	
	Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросВСtaxpayerStoreListByTinRequest_Версия1");
	Иначе
		Макет = ПолучитьМакет("ЗапросВСtaxpayerStoreListByTinRequest_Версия1");
	КонецЕсли;		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]", ИдентификаторСессии);
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТаблицаВС = Новый ТаблицаЗначений;
	ТаблицаВС.Колонки.Добавить("id", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(12, 0, ДопустимыйЗнак.Любой)));
	ТаблицаВС.Колонки.Добавить("address", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(400)));
	ТаблицаВС.Колонки.Добавить("isCooperativeStore", ТипБулево);
	ТаблицаВС.Колонки.Добавить("isDefault", ТипБулево);
	ТаблицаВС.Колонки.Добавить("isInherited",ТипБулево);
	ТаблицаВС.Колонки.Добавить("isJointStore", ТипБулево);
	ТаблицаВС.Колонки.Добавить("isPostingGoods", ТипБулево);
	ТаблицаВС.Колонки.Добавить("isPublicStore", ТипБулево);//по состоянию на 26.05.2020 не отображается на стенде
	ТаблицаВС.Колонки.Добавить("parentId", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(12)));
	ТаблицаВС.Колонки.Добавить("responsiblePersonIin",  Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(12)));
	ТаблицаВС.Колонки.Добавить("status", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(50)));
	ТаблицаВС.Колонки.Добавить("storeName", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(400)));
	ТаблицаВС.Колонки.Добавить("storeTypeCode", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(50)));
	ТаблицаВС.Колонки.Добавить("tin", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(12)));
	ТаблицаВС.Колонки.Добавить("ВыбратьДляСоздания", ТипБулево);
	
	ИмяРеквизитаБИН = "%КонтрагентИНН";
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить(ИмяРеквизитаБИН, "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ИмяРеквизитаБИН, СоответствиеИменРеквизитов);

	Для каждого Контрагент Из МассивКонтрагентов Цикл
		
		ТекстЗапросаПовтор = СтрЗаменить(ТекстЗапроса, "[taxpayerTin]", Контрагент[ИмяРеквизитаБИН]);
		
		ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапросаПовтор, ИмяСервисаTaxPayerStoreService(), , ВерсияВС);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			taxpayerStoreList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.taxpayerStoreListByTinResponse.taxpayerStoreList, "taxpayerStoreData", Неопределено);
			taxpayerStoreList = ЭСФСервер.СписокXDTOИзОбъектXDTO(taxpayerStoreList);
			Для Каждого taxpayerStore Из taxpayerStoreList Цикл
				Если taxpayerStore <> Неопределено Тогда
					Новаястрока = ТаблицаВС.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, taxpayerStore.taxpayerStore);
				Иначе
					ТекстСообщения = НСтр("ru='Не получены склады для контрагента %1. Проверьте наличие складов в модуле Виртуальный Склад ИС ЭСФ.'");
					ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			//ВССервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
			
			// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменСНТ.ПолучитьВСКонтрагента'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = НСтр("ru='Не получены склады для контрагента %1'")+ Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Контрагент);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			//ВызватьИсключение НСтр("ru = 'При получении виртуальных складов из ИС ЭСФ произошла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменСНТ.ПолучитьВСКонтрагента'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ВССервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	
	Если ТаблицаВС.Количество() <> 0  Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаВС", ТаблицаВС);
		Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаВС.id,
		|	ТаблицаВС.address,
		|	ТаблицаВС.isCooperativeStore,
		|	ТаблицаВС.isDefault,
		|	ТаблицаВС.isInherited,
		|	ТаблицаВС.isJointStore,
		|	ТаблицаВС.isPostingGoods,
		|	ТаблицаВС.isPublicStore,
		|	ТаблицаВС.parentId,
		|	ТаблицаВС.responsiblePersonIin,
		|	ТаблицаВС.status,
		|	ТаблицаВС.storeName,
		|	ТаблицаВС.storeTypeCode,
		|	ТаблицаВС.tin,
		|	ТаблицаВС.ВыбратьДляСоздания
		|ПОМЕСТИТЬ ВТ_ТаблицаВС
		|ИЗ
		|	&ТаблицаВС КАК ТаблицаВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.%КонтрагентИНН КАК ИдентификационныйКодЛичности,
		|	Контрагенты.Ссылка КАК Контрагент
		|ПОМЕСТИТЬ ВТ_Контрагенты
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В(&МассивКонтрагентов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Контрагенты.Контрагент,
		|	ВТ_ТаблицаВС.id,
		|	ВТ_ТаблицаВС.address,
		|	ВТ_ТаблицаВС.isCooperativeStore,
		|	ВТ_ТаблицаВС.isDefault,
		|	ВТ_ТаблицаВС.isInherited,
		|	ВТ_ТаблицаВС.isJointStore,
		|	ВТ_ТаблицаВС.isPostingGoods,
		|	ВТ_ТаблицаВС.isPublicStore,
		|	ВТ_ТаблицаВС.parentId,
		|	ВТ_ТаблицаВС.responsiblePersonIin,
		|	ВТ_ТаблицаВС.status,
		|	ВТ_ТаблицаВС.storeName,
		|	ВТ_ТаблицаВС.storeTypeCode,
		|	ВТ_ТаблицаВС.tin,
		|	ВТ_ТаблицаВС.ВыбратьДляСоздания
		|ИЗ
		|	ВТ_ТаблицаВС КАК ВТ_ТаблицаВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ПО ВТ_ТаблицаВС.tin = ВТ_Контрагенты.ИдентификационныйКодЛичности"; 
		
		СоответсвиеИменРеквизитов = Новый Соответствие;
		СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
		
		ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);	
		ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаВСКонтрагентов = РезультатЗапроса.Выгрузить();
	КонецЕсли; 
	
	Возврат ТаблицаВСКонтрагентов;
	
КонецФункции

// Возвращает коллекцию Складов, сгруппированных по структурным единицам.
// Для группировки используются значение организация//
// Параметры:
//  МассивСкладов - Массив - Массив виртуальных складов, которые необходимо сгруппировать по структурным единицам.
//
// Возвращаемое значение:
//  Соответствие - Коллекция виртуальных складов, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ВС, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьВСКонтрагентовПоСтруктурнымЕдиницам(Знач МассивСкладов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВиртуальныеСкладыКонтрагента.Ссылка КАК Склад,
	|	ВиртуальныеСкладыКонтрагента.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.ВиртуальныеСкладыКонтрагента КАК ВиртуальныеСкладыКонтрагента
	|ГДЕ
	|	ВиртуальныеСкладыКонтрагента.Ссылка В(&МассивСкладов)
	|	И ВиртуальныеСкладыКонтрагента.ЭтоГруппа = Ложь
	|ИТОГИ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхКонтрагентов = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивСкладов = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивСкладов.Добавить(ВыборкаДетальныеЗаписи.Склад);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.Контрагент) Тогда
			КоллекцияСгруппированныхКонтрагентов.Вставить(ВыборкаСтруктурнаяЕдиница.Контрагент, СгруппированныйМассивСкладов);
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В складах не указан контрагент:
			|%1'");
			
			СтрокаСписокСклад = "";
			Для Каждого СсылкаСклад Из СгруппированныйМассивСкладов Цикл
				СтрокаСписокЭД = СтрокаСписокЭД + "- " + СсылкаСклад + Символы.ПС;
			КонецЦикла;
			СтрокаСписокСклад = СокрЛП(СтрокаСписокЭД);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокСклад);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхКонтрагентов;
	
КонецФункции

Процедура ОбновитьВСКонтрагентовИзВС(Знач МассивКонтрагентов, Знач КоллекцияСгруппированныхКонтрагентов, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ВерсияИСВС = Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
		
		СкладыXDTO = ПолучитьВСКонтрагента(ДанныеПрофиляИСЭСФ, МассивКонтрагентов, ВерсияИСВС);
		
		//Создадим и заполним соответствие для дальнейшего поиска нужных
		СоотвествиеПолученныхСкладов = Новый Соответствие;
		Для Каждого СкладXDTO Из СкладыXDTO Цикл
			СоотвествиеПолученныхСкладов.Вставить(Число(СкладXDTO.id), СкладXDTO);
		КонецЦикла;
		
		Для Каждого Склады Из КоллекцияСгруппированныхКонтрагентов Цикл
			МассивВСКонтрагентов = Склады.Значение;
			Для Каждого Склад Из МассивВСКонтрагентов Цикл
				ПолученныйСклад = СоотвествиеПолученныхСкладов[Склад.ИдентификаторСклада];
				Если ПолученныйСклад = Неопределено Тогда
					
					Если Склад.Статус <> Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС Тогда
						ОбъектСклад = Склад.ПолучитьОбъект();
						ОбъектСклад.Статус = Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС;
						ОбъектСклад.Записать();
						
						ТекстСообщения = НСтр("ru = 'Склад %Склад% не найден на сервере. Статус склада установлен на ""%СинонимНеСозданНаВС%""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", СокрЛП(ОбъектСклад.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СинонимНеСозданНаВС%", Строка(Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС));
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли
					
				Иначе
					
					ЕстьИзменения = Ложь;
					ОбновленныеПоля = Новый Массив;
					
					ОбъектСклад = Склад.ПолучитьОбъект();
					Если НЕ ОбъектСклад.Наименование = ПолученныйСклад.storeName Тогда
						ОбъектСклад.Наименование = ПолученныйСклад.storeName;
						ЕстьИзменения = Истина;
						ОбновленныеПоля.Добавить("Наименование");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПолученныйСклад.address) И НЕ ОбъектСклад.Адрес = ПолученныйСклад.address Тогда
						ОбъектСклад.Адрес = ПолученныйСклад.address;
						ЕстьИзменения = Истина;
						ОбновленныеПоля.Добавить("Местоположение склада");
					КонецЕсли;
					
					СтатусВС = ВСКлиентСервер.СтатусСклада_ИБ(ПолученныйСклад.status);
					Если НЕ ОбъектСклад.Статус = СтатусВС Тогда
						ОбъектСклад.Статус = СтатусВС;
						ЕстьИзменения = Истина;
						ОбновленныеПоля.Добавить("Статус");
					КонецЕсли;
					
					Если ЕстьИзменения Тогда
						ОбъектСклад.Записать();
						
						ТекстСообщения =  НСтр("ru = 'У склада %Склад% обновлены поля: %ОбновленныеПоля%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", СокрЛП(ОбъектСклад.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбновленныеПоля%", СтрСоединить(ОбновленныеПоля, ", "));
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьВСКонтрагентовИзВС'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаСопоставленияСНТиФНО

Функция ФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаСопоставлениеСНТ_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryfnoMatchingXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1;
	
КонецФункции

Процедура СоздатьИсходящиеfnoMatching(
	Знач МассивСопоставленийСНТиФНО, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи,
	КоллекцияfnoMatchingXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	
	// здесь можно переопределить структуру выгрузки в зависимости от версии ИС ЭСФ
	
	СоздатьИсходящиеfnoMatching_ВерсияАПИ11(МассивСопоставленийСНТиФНО, 
	УстанавливатьПодпись, 
	ТипПодписи, 
	КоллекцияfnoMatchingXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник,
	ВерсияИСЭСФ);
	
	
КонецПроцедуры

Процедура СоздатьИсходящиеfnoMatching_ВерсияАПИ11(
	Знач МассивСопоставленийСНТиФНО, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиСНТиФНО, 
	КоллекцияfnoMatchingXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияfnoMatchingXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаСопоставлениеСНТиФНО Из МассивСопоставленийСНТиФНО Цикл
		
		ОбъектСопоставлениеСНТиФНО = СсылкаСопоставлениеСНТиФНО.ПолучитьОбъект();
		ОбъектСопоставлениеСНТиФНО.ТипПодписи = ТипПодписиСНТиФНО;
		
		fnoMatchingXDTO = НовыйfnoMatching(ОбъектСопоставлениеСНТиФНО, Фабрика, "fnoMatchingV1", ВерсияИСЭСФ);
		
		fnoMatchingXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(fnoMatchingXDTO, "fnoMatching", Фабрика);
		//=========
		fnoMatchingXML = СтрЗаменить(fnoMatchingXML, "<fnoMatching xmlns=""v1.fnoMatching"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "");
		//
		//// Префикс версии
		fnoMatchingXML = СтрЗаменить(fnoMatchingXML, "</fnoMatching>", "</ns2:fnoMatching>");
		fnoMatchingXML = СтрЗаменить(fnoMatchingXML, " xmlns="""""" xmlns:d2p1=""v1.fnoMatching""", "");
		fnoMatchingXML = СтрЗаменить(fnoMatchingXML, " xsi:type=""xs:string""", "");
		
		//Для отправки через API структура обернута в <fnoMatchingBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			fnoMatchingBodyHashXML = fnoMatchingXML;
			КоллекцияSignedContentXML.Вставить(СсылкаСопоставлениеСНТиФНО, fnoMatchingBodyHashXML);
			
			//Для отправки через API добавляем обертку <invoiceBody>
			fnoMatchingXML = "<fnoMatchingBody><![CDATA[<ns2:fnoMatching xmlns:ns2=""fno.matching"">" + fnoMatchingXML + "]]></fnoMatchingBody>";
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиСНТиФНО);
			fnoMatchingXML = "<fnoMatchingInfo>" + fnoMatchingXML + "<signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType></fnoMatchingInfo>";
			
		КонецЕсли;
		
		КоллекцияfnoMatchingXML.Вставить(СсылкаСопоставлениеСНТиФНО, fnoMatchingXML);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьfnoMatching(Знач СопоставлениеСНТ, Знач Фабрика, fnoMatching, ВерсияСопоставления)
	
	//список документов СНТ
	sourceDocumentList = ЭСФСервер.НовоеСвойствоОбъектаXDTO(fnoMatching, "sourceDocumentList", Фабрика);
	
	СтруктураОтбораТоваровСНТ = Новый Структура("НомерРазделаСНТ");
	Для Каждого ДокументСНТ Из СопоставлениеСНТ.СНТ Цикл 
		
		sourceDocument = ЭСФСервер.НовыйЭлементСпискаXDTO(sourceDocumentList.sourceDocument, Фабрика);
		
		sourceDocument.registrationNumber = ДокументСНТ.РегистрационныйНомер;	
		//sourceDocument.date				= Формат(ДокументСНТ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		sourceDocument.date				  = ЗаписатьДатуJSON(ДокументСНТ.Дата, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		sourceDocument.totalSum			  = ДокументСНТ.Сумма;
		sourceDocument.customerTin	 	  = СопоставлениеСНТ.ИдентификационныйНомер;
		sourceDocument.documentVersion	  = "SntV1";
		
		products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(sourceDocument, "products", Фабрика);
		
		СтруктураОтбораТоваровСНТ.НомерРазделаСНТ = ДокументСНТ.НомерСтроки; 
		МассивТоваров = СопоставлениеСНТ.ТоварыСНТ.НайтиСтроки(СтруктураОтбораТоваровСНТ);
		Для Каждого СтрокаТоварыСНТ Из МассивТоваров Цикл
			
			SourceProduct = ЭСФСервер.НовыйЭлементСпискаXDTO(products.Product, Фабрика);
			
			SourceProduct.idx 				= СтрокаТоварыСНТ.НомерСтрокиВСНТ;
			SourceProduct.name				= СтрокаТоварыСНТ.ТоварНаименование;
			SourceProduct.tnvedCode			= СтрокаТоварыСНТ.КодТНВЭД;
			SourceProduct.measureUnitCode	= СокрЛП(СтрокаТоварыСНТ.ЕдиницаИзмеренияКод);
			SourceProduct.quantity			= СтрокаТоварыСНТ.Количество;
			SourceProduct.price				= СтрокаТоварыСНТ.Цена;
			SourceProduct.fnoNumber			= СтрокаТоварыСНТ.НомерЗаявленияВРамкахТС;
			SourceProduct.fnoProductNumber	= Строка(Формат(СтрокаТоварыСНТ.НомерПозицииВЗаявлении,"ЧГ=0"));
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	//список документов ФНО
	fnoList = ЭСФСервер.НовоеСвойствоОбъектаXDTO(fnoMatching, "fnoList", Фабрика);
	
	СтруктураОтбораТоваровФНО = Новый Структура("НомерРазделаФНО");
	Для Каждого ДокументФНО Из СопоставлениеСНТ.ФНО Цикл 
		
		FnoCompact = ЭСФСервер.НовыйЭлементСпискаXDTO(fnoList.Fno, Фабрика);
		
		FnoCompact.registrationNumber = ДокументФНО.РегистрационныйНомер;	
		//FnoCompact.date			  = Формат(ДокументФНО.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		FnoCompact.date				  = ЗаписатьДатуJSON(ДокументФНО.Дата, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		FnoCompact.totalSum			  = ДокументФНО.Сумма;
		FnoCompact.customerTin	 	  = СопоставлениеСНТ.ИдентификационныйНомер;
		
		productList = ЭСФСервер.НовоеСвойствоОбъектаXDTO(FnoCompact, "productList", Фабрика);
		
		СтруктураОтбораТоваровФНО.НомерРазделаФНО = ДокументФНО.НомерСтроки; 
		МассивТоваров = СопоставлениеСНТ.ТоварыФНО.НайтиСтроки(СтруктураОтбораТоваровФНО);
		
		Для Каждого СтрокаТоварыФНО Из МассивТоваров Цикл
			
			FnoProductCompact = ЭСФСервер.НовыйЭлементСпискаXDTO(productList.Product, Фабрика);
			
			FnoProductCompact.name				= СтрокаТоварыФНО.ТоварНаименование;
			FnoProductCompact.tnvedCode			= СтрокаТоварыФНО.КодТНВЭД;
			FnoProductCompact.measureUnitCode	= СокрЛП(СтрокаТоварыФНО.ЕдиницаИзмеренияКод);
			FnoProductCompact.quantity			= СтрокаТоварыФНО.Количество;
			FnoProductCompact.price				= СтрокаТоварыФНО.Цена;
			FnoProductCompact.fnoNumber			= ДокументФНО.РегистрационныйНомер;
			FnoProductCompact.ProductNumber		= Строка(Формат(СтрокаТоварыФНО.НомерПозицииВЗаявлении, "ЧГ=0"));
			
		КонецЦикла;		
	КонецЦикла;	
	
	//шапка
	fnoMatching.creatorTin  = СопоставлениеСНТ.ИдентификационныйНомер;
	fnoMatching.number		= СопоставлениеСНТ.Номер;
	fnoMatching.type   		= "SNT_FNO";
	
КонецПроцедуры

Функция НовыйfnoMatching(Знач СопоставлениеСНТ, Знач Фабрика, Знач ВерсияСопоставления = "fnoMatchingV1", ВерсияИСЭСФ)
	
	ПространствоИмен = "v1.fnoMatching";
	ТипfnoMatching = Фабрика.Тип(ПространствоИмен, ВерсияСопоставления);
	
	fnoMatching = Фабрика.Создать(ТипfnoMatching);
	
	ЗаполнитьfnoMatching(СопоставлениеСНТ, Фабрика, fnoMatching, ВерсияСопоставления);
	
	Возврат fnoMatching;
	
КонецФункции

Функция ОтправитьfnoMatching(ВерсияВС, Знач КоллекцияДанныеКоллекцииfnoMatchingXML, Знач КоллекцияПодписейФНОиСНТ, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированнаяfnoMatchingXML Из КоллекцияДанныеКоллекцииfnoMatchingXML Цикл
		
		СтруктурнаяЕдиница = СгруппированнаяfnoMatchingXML.Ключ;
		ДанныеКоллекцииfnoMatchingXML = СгруппированнаяfnoMatchingXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииfnoMatchingXML) = Тип("Соответствие") Тогда
			КоллекцияXML = ДанныеКоллекцииfnoMatchingXML;
		Иначе
			КоллекцияXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииfnoMatchingXML);
		КонецЕсли;
		
		ДанныеСтруктурнойЕдиницы 	= ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		ОткрытыйКлючЭЦП 			= ДанныеСтруктурнойЕдиницы.ОткрытыйСертификатBase64;
		КоллекцияПодписей 			= КоллекцияПодписейФНОиСНТ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		Результат = ОтправитьИсходящиеfnoMatching(ВерсияВС, КоллекцияXML, КоллекцияПодписей, ДанныеПрофиляИСЭСФ, ОткрытыйКлючЭЦП);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьИсходящиеfnoMatching(ВерсияВС, Знач КоллекцияXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
	
	ПредельныйРазмерПакетаИсходящих = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящих;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеfnoMatching", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));
	
	РезультатОтправки = Новый Соответствие;
	// Сформируем пакеты на отправку с учетом предельного размера пакета
	СчетчикПакета = 0;
	НомерПакета = 0;
	КоллекцияXMLПакета = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из КоллекцияXML Цикл		
		СчетчикПакета = СчетчикПакета + 1;
		КоллекцияXMLПакета.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		// Если это предельный размер пакета, то отправляем его и формируем новый
		Если (СчетчикПакета = ПредельныйРазмерПакетаИсходящих) ИЛИ (СчетчикПакета = ОбщийРазмерКолекцииНаОтправку) Тогда
			НомерПакета = НомерПакета + 1;
			
			СообщениеПользователя = Новый СообщениеПользователю;
			
			Текст = НСтр("ru = 'Происходит отправка пакета сопоcтавлений СНТ и ФНО 328.00 %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);	
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			РезультатОтправкиПакета = ОтправитьПакетИсходящихfnoMatching(ВерсияВС, КоллекцияXMLПакета, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии);
			
			КоллекцияXMLПакета.Очистить();
			
			ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета);
			
			// уменьшим количество оставшихся документов
			ОбщийРазмерКолекцииНаОтправку = ОбщийРазмерКолекцииНаОтправку - СчетчикПакета;
			СчетчикПакета = 0;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	МассивПринятых = Новый Массив;
	МассивОшибочных = Новый Массив;
	//небольшая информация об отправке
	Если РезультатОтправки.Количество() > 1 Тогда
		Для Каждого СтрокаРезультата Из РезультатОтправки Цикл
			Если СтрокаРезультата.Значение.ПринятИСЭСФ Тогда
				МассивПринятых.Добавить(СтрокаРезультата.Ключ);
			Иначе
				МассивОшибочных.Добавить(СтрокаРезультата.Ключ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ТекстСообщения =  НСтр("ru = 'Отправка сопоставлений СНТ и ФНО 328.00 завершена'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеfnoMatching", "Информация", , , ТекстСообщения);
	
	КоличествоОшибочных = МассивОшибочных.Количество();
	Если КоличествоОшибочных > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Отклонено %1 сопоставление СНТ и ФНО 328.00 из %2'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоОшибочных, КоллекцияXML.Количество());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтправитьИсходящиеfnoMatching", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
	// Обновим статусы отправленных документов сопоставления СНТ и ФНО, после завершения отправки всех пакетов
	ОбновитьДокументыСопоставлениеСНТсФНОПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияВС);
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ОтправитьПакетИсходящихfnoMatching(ВерсияВС, Знач КоллекцияfnoMatchingXMLПакета, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
	
	Если ИдентификаторСессии = Неопределено Тогда
		ТекстОшибки = "";
		
		Попытка
			ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗакрытьСессию = Истина;		
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	МассивОтправляемыхСНТиФНО = Новый Массив();
	
	fnoMatchingSet = "";
	Для Каждого ЭлементКоллекции Из КоллекцияfnoMatchingXMLПакета Цикл
		fnoMatchingXML = ЭлементКоллекции.Значение;
		ЭЦП = КоллекцияПодписей[ЭлементКоллекции.Ключ];
		fnoMatchingXML = СтрЗаменить(fnoMatchingXML, "[%ЭЦП%]", ЭЦП);
		fnoMatchingSet = fnoMatchingSet + fnoMatchingXML + Символы.ПС;
		
		МассивОтправляемыхСНТиФНО.Добавить(ЭлементКоллекции.Ключ);
		
	КонецЦикла;
	
	ОтветXML = ВыполнитьfnoMatchingUploadRequest(fnoMatchingSet, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОтправитьПакетИсходящихfnoMatching'"), 
		УровеньЖурналаРегистрации.Информация,,,
		"Отправлен пакет документов сопоставлений СНТ и ФНО 328.00");
		
		РезультатОтправкиПакета = Новый Соответствие;
		Для Каждого ЭлементКоллекции Из КоллекцияfnoMatchingXMLПакета Цикл
			fnoMatchingXML = ЭлементКоллекции.Значение;
			
			РезультатСтруктура = Новый Структура;
			
			// Удалим Секцию CDATA для разбора XML
			fnoMatchingXMLБезCDATA = СтрЗаменить(fnoMatchingXML, "<![CDATA[<ns2:fnoMatching xmlns:ns2=""fno.matching"">", "");
			fnoMatchingXMLБезCDATA = СтрЗаменить(fnoMatchingXMLБезCDATA, "</ns2:fnoMatching>]]></fnoMatchingBody>", "</fnoMatchingBody>");
			fnoMatchingXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(fnoMatchingXMLБезCDATA, ФабрикаXDTO);
			
			РезультатСтруктура.Вставить("Номер", fnoMatchingXDTO.fnoMatchingBody.number);
			РезультатСтруктура.Вставить("ТипПодписи", ЭСФКлиентСервер.ТипПодписиИБ(fnoMatchingXDTO.signatureType));
			РезультатСтруктура.Вставить("ПринятИСЭСФ", Ложь);
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатОтправкиПакета.Вставить(ЭлементКоллекции.Ключ, РезультатСтруктура);
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		// Список успешно принятых на обработку документов.
		ЗаполнитьРезультатОтправкиfnoMatching(ОтветXDTO, "acceptedList", РезультатОтправкиПакета, МассивОтправляемыхСНТиФНО);
		// Список отклоненных Системой документов из-за ошибок ФЛК.
		ЗаполнитьРезультатОтправкиfnoMatching(ОтветXDTO, "declinedList", РезультатОтправкиПакета, МассивОтправляемыхСНТиФНО);
		
		ЗаписатьИзмененияСопоставленияСНТПослеОтправкиПакета(РезультатОтправкиПакета, КоллекцияПодписей);
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОтправитьПакетИсходящихfnoMatching'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При отправке сопоставлений СНТ и ФНО 328.00 возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции

Функция ВыполнитьfnoMatchingUploadRequest(Знач fnoMatchingSetXML, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС)
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросfnoMatchingUploadRequest_Версия1").ПолучитьТекст();	
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[fnoMatchingSet]", fnoMatchingSetXML);
	
	ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаFnoMatchingWebService(),,ВерсияВС); 	
	
	Если ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда		
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаFnoMatchingWebService(),,ВерсияВС); 
	КонецЕсли;
	
	Возврат ОтветXML;
	
КонецФункции

Процедура ЗаполнитьРезультатОтправкиfnoMatching(Знач ОтветXDTO, Знач ИмяЭлемента, Результат, МассивОтправляемыхСНТиФНО)
	
	resultSet = ОтветXDTO.Body.fnoMatchingUploadResponse[ИмяЭлемента];
	UploadResult = СНТСервер.ПолучитьСвойство(resultSet, "fnoMatchingUploadResult", Неопределено);	
	
	Если UploadResult = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	UploadResult = ЭСФСервер.СписокXDTOИзОбъектXDTO(UploadResult);	
	
	Для Индекс = 0 По UploadResult.Количество() - 1 Цикл
		
		standardResponse = UploadResult.Получить(Индекс);
		number = СНТСервер.ПолучитьСвойство(standardResponse, "number", Неопределено);
		date = СНТСервер.ПолучитьСвойство(standardResponse, "date", Неопределено);
		
		Для Каждого ЭлементРезультата Из Результат Цикл
			
			Если number <> Неопределено И date <> Неопределено Тогда
				Если ЭлементРезультата.Значение.Номер = number Тогда
					//И ЭлементРезультата.Значение.Дата = date Тогда
					
					ЭлементРезультата.Значение.ПринятИСЭСФ = ?(ИмяЭлемента = "acceptedList", Истина, Ложь);
					ЭлементРезультата.Значение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "fnoMatchingId", "");
					
					errors = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorList", Неопределено);
					Если errors <> Неопределено Тогда
						errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
						ЭлементРезультата.Значение.Ошибки = Новый Массив;
						Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
							error = errorsList.Получить(ИндексОшибки);
							ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
							// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
							// с сервера на клиент приводи к ошибке мутабельного значения.
							Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
								ОшибкаПоле = "";
							КонецЕсли;
							ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
							Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
							ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				errorList = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorList", Неопределено);
				Если errorList <> Неопределено Тогда
					errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errorList.error);
					ЭлементРезультата.Значение.Ошибки = Новый Массив;
					Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
						error = errorsList.Получить(ИндексОшибки);
						ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
						// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
						// с сервера на клиент приводи к ошибке мутабельного значения.
						Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
							ОшибкаПоле = "";
						КонецЕсли;
						ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
						Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
						ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
					КонецЦикла;
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияСопоставленияСНТПослеОтправкиПакета(РезультатОтправки, КоллекцияПодписей, УполномоченныйСотрудник = Неопределено)
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл		
		СопоставлениеСНТ = ЭлементРезультата.Ключ.ПолучитьОбъект();
		
		СопоставлениеСНТ.Идентификатор = ЭлементРезультата.Значение.Идентификатор;
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			СопоставлениеСНТ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			СопоставлениеСНТ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		СопоставлениеСНТ.ЭЦП = КоллекцияПодписей[ЭлементРезультата.Ключ];
		СопоставлениеСНТ.ТипПодписи = ЭлементРезультата.Значение.ТипПодписи;
		
		Если ЭлементРезультата.Значение.Ошибки = Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементРезультата.Значение.Идентификатор) Тогда
				СопоставлениеСНТ.Ошибки.Очистить();
			КонецЕсли;
		Иначе
			СопоставлениеСНТ.Ошибки.Очистить();
			Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
				ОшибкиСтрока = СопоставлениеСНТ.Ошибки.Добавить();
				ОшибкиСтрока.Текст = Ошибка.Текст;
				ОшибкиСтрока.Поле = Ошибка.Поле;
			КонецЦикла;
		КонецЕсли;
		
		// Очистить поля, которые будут заполнены после успешного приема в ИС ЭСФ.
		СопоставлениеСНТ.РегистрационныйНомер = "";
		СопоставлениеСНТ.Статус = Перечисления.СтатусыСНТ.ПустаяСсылка();
		
		СопоставлениеСНТ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		СопоставлениеСНТ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументыСопоставлениеСНТсФНОПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияИСЭСФ)
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗакрытьСессию = Истина;
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных документов Сопоставление СНТ с ФНО. 
	МассивИдентификаторовСопСНТсФНО = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторовСопСНТсФНО.Добавить(Идентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ПредельныйРазмерПакетаСопСНТсФНО = 1000;
	КоличествоСопСНТсФНО = МассивИдентификаторовСопСНТсФНО.Количество();
	СчетчикСопСНТсФНО = 0;
	МассивИдентификаторовСопСНТсФНОДляОтправки = Новый Массив;
	
	Если КоличествоСопСНТсФНО > ПредельныйРазмерПакетаСопСНТсФНО Тогда
		Для Каждого СтрокаМассива Из МассивИдентификаторовСопСНТсФНО Цикл
			
			СчетчикСопСНТсФНО = СчетчикСопСНТсФНО + 1;
			
			МассивИдентификаторовСопСНТсФНОДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикСопСНТсФНО%ПредельныйРазмерПакетаСопСНТсФНО = 0 ИЛИ СчетчикСопСНТсФНО = КоличествоСопСНТсФНО) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных форм Сопоставление СНТ с ФНО.
			ОбновитьСтатусыСопоставлениеСНТсФНОПоИдентификаторам(МассивИдентификаторовСопСНТсФНОДляОтправки, ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовСопСНТсФНОДляОтправки.Очистить();
		КонецЦикла;
		
	Иначе
		// Выполнить обновление статусов отправленных форм Сопоставление СНТ с ФНО.
		ОбновитьСтатусыСопоставлениеСНТсФНОПоИдентификаторам(МассивИдентификаторовСопСНТсФНО, ПрофильИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьСтатусыСопоставлениеСНТсФНОПоИдентификаторам(Знач МассивИдентификаторовСопСНТсФНО, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;
	
	idList = "";
	Для Каждого ИдентификаторСопСНТсФНО Из МассивИдентификаторовСопСНТсФНО Цикл
		Если ЗначениеЗаполнено(ИдентификаторСопСНТсФНО) Тогда
			idList = idList + "<id>" + ИдентификаторСопСНТсФНО + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Сформировать запрос на получение статусов по идентификаторам.
	// Пока получаем статус с помощью метода QueryById, так как отдельно пока нет 27.10.2020
	ЗапросXML = ПолучитьМакет("ЗапросfnoMatchingQueryById").ПолучитьТекст();
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаFnoMatchingWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторСопСНТсФНО Из МассивИдентификаторовСопСНТсФНО Цикл
			Результат.Вставить(ИдентификаторСопСНТсФНО, Неопределено);
		КонецЦикла;
					
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		//ОтветXDTO.Body.fnoMatchingQueryByIdResponse.recordsCount
		fnoMatchingInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОтветXDTO.Body.fnoMatchingQueryByIdResponse.fnoMatchingInfoList.fnoMatchingInfo);
		
		МассивИдентификаторовОшибочныхСопСНТсФНО = Новый Массив;
		// Заполнить Результат.
		Для Индекс = 0 По fnoMatchingInfoList.Количество() - 1 Цикл
			fnoMatchingList = fnoMatchingInfoList.Получить(Индекс);
			ДанныеСтатуса = ДанныеСтатусаСопоставлениеСНТсФНО(fnoMatchingList);
			Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
			Если ДанныеСтатуса.Статус = Перечисления.СтатусыСопоставленийСНТиФНО.Ошибочный Тогда
				МассивИдентификаторовОшибочныхСопСНТсФНО.Добавить(ДанныеСтатуса.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		//Получим ошибки ошибочных документов Сопоставление СНТ с ФНО.
		Если МассивИдентификаторовОшибочныхСопСНТсФНО.Количество() > 0 Тогда
			РезультатОшибочныхСопСНТсФНО = ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(МассивИдентификаторовОшибочныхСопСНТсФНО, ПрофильИСЭСФ, ИдентификаторСессии);
			Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхСопСНТсФНО);
		КонецЕсли;
		
		// Обновить документы Сопоставление СНТ с ФНО.
		ОтразитьИзмененияСтатусовСопоставлениеСНТсФНО(Результат, СтруктурнаяЕдиница);
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьСтатусыСопоставлениеСНТсФНОПоИдентификаторам'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		//ВызватьИсключение НСтр("ru = 'При получении статусов Сопоставление СНТ и ФНО 328.00 по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
		// Временно на любую ошибку по документам Сопоставление СНТ с ФНО 328.00 будет выдаваться исключение чтоб получить данные ошибки отдельной командой 19.02.2021
		ВызватьИсключение НСтр("ru = 'При получении статусов по идентификаторам возникла ошибка. Возможно в документе Сопоставление СНТ и ФНО 328.00 есть ошибки.
									 |Рекомендуем воспользоваться кнопкой ""Загрузить ошибки с сервера"".'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСтатусаСопоставлениеСНТсФНО(Знач fnoMatchingList)
	
	ДанныеСтатуса = Новый Структура;
	//<id>20593852951552000</id>
	//<inputDate>2020-10-26T16:56:24+06:00</inputDate>
	//<lastUpdateDate>2020-10-26T16:56:24+06:00</lastUpdateDate>
	//<registrationNumber>840121401384/FS/20201026/60984648</registrationNumber>
	//<status>PROCESSED</status>
	ДанныеСтатуса.Вставить("Идентификатор", Формат(fnoMatchingList.Id, "ЧГ="));
	
	date = ЭСФСервер.ПолучитьСвойство(fnoMatchingList, "inputDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоступленияСопоставлениеСНТсФНОВСистему", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(fnoMatchingList, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомер", registrationNumber);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(fnoMatchingList, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	status = ЭСФСервер.ПолучитьСвойство(fnoMatchingList, "status", ""); 
	ДанныеСтатуса.Вставить("Статус", СНТКлиентСервер.СтатусСопоставлениеСНТсФНО_ИБ(status));
	
	Возврат ДанныеСтатуса;
	
КонецФункции

// Обновляет документы Сопоставление СНТ с ФНО, на основании новых данных статусов.
Процедура ОтразитьИзмененияСтатусовСопоставлениеСНТсФНО(Знач КоллекцияСтатусовСопСНТсФНО, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовСопСНТсФНО = НоваяВыборкаДанныеСтатусовСопоставлениеСНТсФНО(КоллекцияСтатусовСопСНТсФНО, СтруктурнаяЕдиница);
	
	КоличествоОбновленных = 0;
	
	Пока СтарыеДанныеСтатусовСопСНТсФНО.Следующий() Цикл
		
		НовыеДанныеСтатусовСопСНТсФНО = КоллекцияСтатусовСопСНТсФНО.Получить(СтарыеДанныеСтатусовСопСНТсФНО.Идентификатор);
		
		Если НовыеДанныеСтатусовСопСНТсФНО <> Неопределено Тогда
			
			ОбновитьСопСНТсФНО = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовСопСНТсФНО.Свойство("Ошибки") И НовыеДанныеСтатусовСопСНТсФНО.Ошибки.Количество() > 0;
			
			Если ЕстьОшибки Тогда
				ОбновитьСопСНТсФНО = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСопСНТсФНО.РегистрационныйНомер <> НовыеДанныеСтатусовСопСНТсФНО.РегистрационныйНомер Тогда
				ОбновитьСопСНТсФНО = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовСопСНТсФНО.Статус <> НовыеДанныеСтатусовСопСНТсФНО.Статус Тогда
				ОбновитьСопСНТсФНО = Истина;
			КонецЕсли;
			
			Если ОбновитьСопСНТсФНО Тогда
				
				КоличествоОбновленных = КоличествоОбновленных + 1;
				
				ОбъектСопСНТсФНО = СтарыеДанныеСтатусовСопСНТсФНО.СопоставлениеСНТсФНО.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовСопСНТсФНО.ДатаПоступленияСопоставлениеСНТсФНОВСистему <> Дата(1, 1, 1)) И НачалоДня(НовыеДанныеСтатусовСопСНТсФНО.ДатаПоступленияСопоставлениеСНТсФНОВСистему) <> НачалоДня(ОбъектСопСНТсФНО.Дата) Тогда
					ОбъектСопСНТсФНО.Дата = НовыеДанныеСтатусовСопСНТсФНО.ДатаПоступленияСопоставлениеСНТсФНОВСистему;
					ОбъектСопСНТсФНО.УстановитьВремя();
				КонецЕсли;
				
				ОбъектСопСНТсФНО.РегистрационныйНомер = НовыеДанныеСтатусовСопСНТсФНО.РегистрационныйНомер;
				ОбъектСопСНТсФНО.Статус = НовыеДанныеСтатусовСопСНТсФНО.Статус;

				// Отразить содержимое узла cancelReason.
				Если ЕстьОшибки Тогда
					ОбъектСопСНТсФНО.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовСопСНТсФНО.Ошибки Цикл
						ОшибкиСтрока = ОбъектСопСНТсФНО.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
				КонецЕсли;
				
				ОбъектСопСНТсФНО.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектСопСНТсФНО.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОбновленных > 0 Тогда
		ТекстСообщения = НСтр("ru='Обновлены статусы отправленных документов.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтразитьИзмененияСтатусовСопоставлениеСНТсФНО", "Информация", , , ТекстСообщения);
	Иначе
		ТекстСообщения = НСтр("ru='Статусы документов Сопоставление СНТ с ФНО не изменены.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменСНТ.ОтразитьИзмененияСтатусовСопоставлениеСНТсФНО", "Информация", , , ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(Знач МассивИдентификаторовСопСНТсФНО, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторСопСНТсФНО Из МассивИдентификаторовСопСНТсФНО Цикл
		Если ТипЗнч(ИдентификаторСопСНТсФНО) = Тип("ДокументСсылка.СопоставлениеСНТиФНО") Тогда
			Если ЗначениеЗаполнено(ИдентификаторСопСНТсФНО.Идентификатор) Тогда
				idList = idList + "<id>" + ИдентификаторСопСНТсФНО.Идентификатор + "</id>";
			КонецЕсли;;
		ИначеЕсли ЗначениеЗаполнено(ИдентификаторСопСНТсФНО) Тогда
			idList = idList + "<id>" + ИдентификаторСопСНТсФНО + "</id>";
		КонецЕсли; 
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросfnoMatchingErrorById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаFnoMatchingWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторСопСНТсФНО Из МассивИдентификаторовСопСНТсФНО Цикл
			Результат.Вставить(ИдентификаторСопСНТсФНО, Неопределено);
		КонецЦикла;

		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		RecordsCount = Число(ОтветXDTO.Body.fnoMatchingErrorByIdResponse.recordsCount);
		Если RecordsCount > 1 Тогда
			ErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.fnoMatchingErrorByIdResponse.errorInfos, "errorInfo", Неопределено);
			errorInfoList = ?(ErrorList <> Неопределено, ЭСФСервер.СписокXDTOИзОбъектXDTO(ErrorList), "");
		Иначе
			ErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.fnoMatchingErrorByIdResponse.errorInfos.errorInfo, "errors", Неопределено);
		КонецЕсли;
					
		Если ErrorList <> Неопределено Тогда
			
			Если errorInfoList <> "" И errorInfoList <> Неопределено Тогда
				Для Индекс = 0 По errorInfoList.Количество() - 1 Цикл
					Error = errorInfoList.Получить(Индекс);
					Идентификатор = Формат(Error.fnoMatchingId, "ЧГ=");
					ДанныеОшибки = ДанныеОшибкиСопоставлениеСНТсФНО(Error);
					Результат.Вставить(Идентификатор, ДанныеОшибки);
				КонецЦикла;
			Иначе
				Идентификатор = Формат(ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.fnoMatchingErrorByIdResponse.errorInfos.errorInfo, "fnoMatchingId", ""), "ЧГ=");
				ДанныеОшибки = ДанныеОшибкиСопоставлениеСНТсФНО(ErrorList);
				Результат.Вставить(Идентификатор, ДанныеОшибки);
			КонецЕсли; 
			
			Если ДанныеОшибки.Количество() <> 0 Тогда
				
				ОбновитьОшибкиВДокументах = Истина;
				// Обновить документы Сопоставление СНТ с ФНО.
				Если ОбновитьОшибкиВДокументах Тогда
					ОтразитьИзмененияОшибокСопоставлениеСНТсФНО(Результат, СтруктурнаяЕдиница);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Получение ошибок с сервера возможно только для документов ""Сопоставление СНТ с ФНО 328.00"" без регистрационного номера.'");
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		КонецЕсли;
		
	Иначе	
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьСтатусыСопоставлениеСНТсФНОПоИдентификаторам'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При получении статусов Сопоставление СНТ с ФНО 328.00 по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиСопоставлениеСНТсФНО (Знач ErrorListXDTO, ТаблицаЛокализацииОшибок = Неопределено)
	
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.СопоставлениеСНТиФНО.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле", Метаданные.Документы.СопоставлениеСНТиФНО.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	
	errors = ЭСФСервер.ПолучитьСвойство(ErrorListXDTO, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
			ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
			// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
			// с сервера на клиент приводи к ошибке мутабельного значения.
			Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
				ОшибкаПоле = "";
			КонецЕсли;
			ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
			Если ПустаяСтрока(ОшибкаТекст) Тогда
				Если ТаблицаЛокализацииОшибок = Неопределено Тогда
					ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
				КонецЕсли;
				ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
				ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
				ОшибкаТекст = ОшибкаТекст.ТекстИБ;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаОшибок.Добавить();
			СтрокаТаблицы.Поле = ОшибкаПоле;
			СтрокаТаблицы.Текст = ОшибкаТекст;
		КонецЦикла;
		
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);
	КонецЕсли;
	
	Возврат ДанныеОшибки;
	
КонецФункции

Процедура ОтразитьИзмененияОшибокСопоставлениеСНТсФНО(Знач КоллекцияСтатусовСопСНТсФНО, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовСопСНТсФНО = НоваяВыборкаДанныеСтатусовСопоставлениеСНТсФНО(КоллекцияСтатусовСопСНТсФНО, СтруктурнаяЕдиница);
	
	Пока СтарыеДанныеСтатусовСопСНТсФНО.Следующий() Цикл
		
		НовыеДанныеОшибокСопСНТсФНО = КоллекцияСтатусовСопСНТсФНО.Получить(СтарыеДанныеСтатусовСопСНТсФНО.Идентификатор);
		
		Если НовыеДанныеОшибокСопСНТсФНО <> Неопределено И НовыеДанныеОшибокСопСНТсФНО.Ошибки <> Неопределено Тогда
			
			ОбъектСопСНТсФНО = СтарыеДанныеСтатусовСопСНТсФНО.СопоставлениеСНТсФНО.ПолучитьОбъект();
			ОбъектСопСНТсФНО.Ошибки.Очистить();
			Ошибки = НовыеДанныеОшибокСопСНТсФНО.Ошибки;
			Для Каждого Строка из Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = ОбъектСопСНТсФНО.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
			КонецЦикла;
			
			ОбъектСопСНТсФНО.Статус = Перечисления.СтатусыСопоставленийСНТиФНО.Ошибочный;
			ОбъектСопСНТсФНО.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
			ОбъектСопСНТсФНО.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяВыборкаДанныеСтатусовСопоставлениеСНТсФНО(Знач КоллекцияСтатусовСопСНТсФНО, Знач СтруктурнаяЕдиница)
	
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.СопоставлениеСНТиФНО.Реквизиты.Идентификатор.Тип);
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовСопСНТсФНО Цикл
		Если ТипЗнч(ЭлементКоллекции.Ключ) = Тип("Строка") Тогда
			СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
			СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СопСНТсФНО.Идентификатор КАК Идентификатор,
	|	СопСНТсФНО.Ссылка,
	|	СопСНТсФНО.РегистрационныйНомер,
	|	СопСНТсФНО.Статус,
	|	СопСНТсФНО.Организация
	|ПОМЕСТИТЬ СопСНТсФНО
	|ИЗ
	|	Документ.СопоставлениеСНТиФНО КАК СопСНТсФНО
	|ГДЕ
	|	СопСНТсФНО.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	СопСНТсФНО.Ссылка КАК СопоставлениеСНТсФНО,
	|	СопСНТсФНО.РегистрационныйНомер КАК РегистрационныйНомер,
	|	СопСНТсФНО.Статус КАК Статус,
	|	СопСНТсФНО.Организация КАК Организация
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопСНТсФНО КАК СопСНТсФНО
	|		ПО Идентификаторы.Идентификатор = СопСНТсФНО.Идентификатор";
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеСопоставлениеСНТсФНО

Процедура ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ(Знач МассивСопСНТсФНО, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	ИдентификаторСессии = ОткрытьСессию(ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
	
	НачатьТранзакцию();
	
	Попытка
		ОбновитьДокументыСопоставлениеСНТсФНОПоИдентификатору(МассивСопСНТсФНО, ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ;//ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыСопоставлениеСНТсФНОПоИдентификатору(Знач МассивСопСНТсФНО, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	Если МассивСопСНТсФНО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакета = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыСопСНТиФНО.Ссылка,
	|	ДокументыСопСНТиФНО.Идентификатор
	|ИЗ
	|	Документ.СопоставлениеСНТиФНО КАК ДокументыСопСНТиФНО
	|ГДЕ
	|	ДокументыСопСНТиФНО.Ссылка В(&МассивСопСНТсФНО)
	|	И НЕ ДокументыСопСНТиФНО.Идентификатор = """"";
	
	Запрос.УстановитьПараметр("МассивСопСНТсФНО", МассивСопСНТсФНО);
	Выборка = Запрос.Выполнить().Выбрать();

	СписокИдентификаторов = "";
	КоличествоСопСНТсФНО = Выборка.Количество();
	СчетчикСопСНТсФНО = 0;
	МассивИдентификаторовНайденныхСопСНТсФНО = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		// считаем общее количество документов Сопоставление СНТ с ФНО
		СчетчикСопСНТсФНО = СчетчикСопСНТсФНО + 1;
		
		Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
			СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
		Иначе
			ТекстСообщения = НСтр("ru = 'Документ ""[СопСНТиФНО]"" не удалось обновить из ИС ЭСФ, так как в документе не заполнен реквизит ""Идентификатор"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СопСНТиФНО]", СНТКлиентСервер.КраткоеПредставлениеСНТ(Выборка.Ссылка));
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
		Если НЕ (СчетчикСопСНТсФНО%ПредельныйРазмерПакета = 0 ИЛИ СчетчикСопСНТсФНО = КоличествоСопСНТсФНО) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
			/////////////////////////////////////////////////////////////////////////////
			// Создать и выполнить запрос к API ИС ЭСФ.
			ЗапросXML = ПолучитьМакет("ЗапросfnoMatchingQueryById").ПолучитьТекст();
			ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
			
			// Выполнить запрос на получение статусов по идентификаторам.
			ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаFnoMatchingWebService()); 
			
			// Обработать результат запроса на получение статусов по идентификаторам.
			
			/////////////////////////////////////////////////////////////////////////////
			// Обработать результат запроса к API ИС ЭСФ.
			ИнформацияОбОшибке = Неопределено;
			Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
				
				ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
				//ОтветXDTO.Body.fnoMatchingQueryByIdResponse.recordsCount
				fnoMatchingInfoList = ОтветXDTO.Body.fnoMatchingQueryByIdResponse.fnoMatchingInfoList;
				fnoMatchingInfoList = ЭСФСервер.ПолучитьСвойство(fnoMatchingInfoList, "fnoMatchingInfo", Неопределено); 
				
				Если fnoMatchingInfoList <> Неопределено Тогда
					fnoMatchingInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОтветXDTO.Body.fnoMatchingQueryByIdResponse.fnoMatchingInfoList.fnoMatchingInfo);
					СоздатьОбновитьПолучаемыеСопоставлениеСНТсФНО(fnoMatchingInfoList, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
					
					//////////////////////////////////////////////////////////////////////////
					// Сообщить пользователю, если не удалось найти документ Сопоставление СНТ с ФНО по идентификатору.
					
					// Создать и заполнить массив идентификаторов документов Сопоставление СНТ с ФНО, которые удалось найти в ИС ЭСФ.
					Для Каждого fnoMatchingInfo Из fnoMatchingInfoList Цикл
						ИдентификаторСопСНТсФНО = ЭСФСервер.ПолучитьСвойство(fnoMatchingInfo, "id", "");
						Если ЗначениеЗаполнено(ИдентификаторСопСНТсФНО) Тогда
							МассивИдентификаторовНайденныхСопСНТсФНО.Добавить(ИдентификаторСопСНТсФНО);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
				
				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменСНТ.ОбновитьДокументыСопоставлениеСНТсФНОПоИдентификатору'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				//ВызватьИсключение НСтр("ru = 'При обновлении документов Сопоставление СНТ с ФНО по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				
				// Временно на любую ошибку по документам Сопоставление СНТ с ФНО 328.00 будет выдаваться исключение чтоб получить данные ошибки отдельной командой 19.02.2021
				ВызватьИсключение НСтр("ru = 'При получении статусов по идентификаторам возникла ошибка. Возможно в документе Сопоставление СНТ и ФНО 328.00 есть ошибки.
											 |Рекомендуем воспользоваться кнопкой ""Загрузить ошибки с сервера"".'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
				
			КонецЕсли;
			
			ВыполнялосьОбращениеКСерверу = Истина;
			
		КонецЕсли;
		
		// Обнулим данные для следующей порции
		СписокИдентификаторов = "";
		
	КонецЦикла;
	
	Если ВыполнялосьОбращениеКСерверу Тогда
		
		// Сообщить пользователю, если не удалось найти документ Сопоставление СНТ с ФНО по идентификатору.
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				Если МассивИдентификаторовНайденныхСопСНТсФНО.Найти(Выборка.Идентификатор) = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Документ ""[СопСНТиФНО]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден документ Сопоставление СНТ с ФНО с идентификатором: ""[Идентификатор]"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СопСНТиФНО]", СНТКлиентСервер.КраткоеПредставлениеСНТ(Выборка.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Идентификатор]", Выборка.Идентификатор);
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецПроцедуры

Процедура СоздатьОбновитьПолучаемыеСопоставлениеСНТсФНО (Знач fnoMatchingInfoList, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыСопСНТсФНО, МассивИсключаемыхИД = Неопределено, Знач Провести = Ложь, Пользователь = Неопределено) Экспорт
	
	Если fnoMatchingInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивСопСНТсФНО = НовыйМассивЗагружаемыхСопСНТсФНО(fnoMatchingInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыСопСНТсФНО, Пользователь);
				
		// Создать коллекцию старых документов СопоставлениеСНТсФНО (которые уже были в ИБ)
		// содержащую объекты СопоставлениеСНТсФНО до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхСопСНТсФНО = Новый Массив;
		Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
			Если НЕ ОбъектСопСНТсФНО.Ссылка.Пустая() Тогда
				КопияОбъектаСопСНТсФНО = ОбъектСопСНТсФНО.Скопировать();
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектСопСНТсФНО", КопияОбъектаСопСНТсФНО);
				Структура.Вставить("ОбновленныйОбъектСопСНТсФНО", ОбъектСопСНТсФНО);
				МассивСтарыхСопСНТсФНО.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы Сопоставление СНТ с ФНО.
		
		Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
			Если НЕ ОбъектСопСНТсФНО.Ссылка.Пустая() Тогда
				// Табличные части ФНО и СНТ, не будут обновляться, до реализации метода получения документа Сопоставление СНТс ФНО сервера.
				СНТСервер.ОчиститьОбъект(ОбъектСопСНТсФНО, "Идентификатор, Организация, Дата, Автор, Комментарий");
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы Сопоставление СНТ с ФНО.
		МассивПропускаемыхСопСНТсФНО = Новый Массив;
		
		Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
			fnoMatchingInfo = НайтиfnoMatchingInfoПоId(fnoMatchingInfoList, ОбъектСопСНТсФНО.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(fnoMatchingInfo, "registrationNumber", "");
				ЗаполнитьФНО(fnoMatchingInfo, СтруктурнаяЕдиница, ОбъектСопСНТсФНО);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщ = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия документа Сопоставление СНТ с ФНО формату.'");
				ТекстСообщ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщ, ОбъектСопСНТсФНО.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщ;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхСопСНТсФНО.Добавить(ОбъектСопСНТсФНО);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектСопСНТсФНО.Идентификатор);
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		// Записать старые и новые документы Сопоставление СНТ с ФНО.
		Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
			Если ЗначениеЗаполнено(ОбъектСопСНТсФНО.Дата) Тогда
				ОбъектСопСНТсФНО.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
				|%2'");
				Причина1 = "";
				Если Не ЗначениеЗаполнено(ОбъектСопСНТсФНО.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектСопСНТсФНО.РегистрационныйНомер, Причина1);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхСопСНТсФНО.Добавить(ОбъектСопСНТсФНО);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектСопСНТсФНО.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		ВосстановитьСсылочныеРеквизитыДокументовСопСНТсФНО(МассивСтарыхСопСНТсФНО);
		
		// Повторно записать старые и новые документы Сопоставление СНТ с ФНО.
		Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
			ОбъектСопСНТсФНО.Записать();
		КонецЦикла;
				
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.СоздатьОбновитьПолучаемыеДокументыСопоставлениеСНТсФНО'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйМассивЗагружаемыхСопСНТсФНО(Знач fnoMatchingInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеСопСНТсФНО, Знач УчитыватьВсеСтатусыСопСНТсФНО, Пользователь = Неопределено)
	
	МассивСопСНТсФНО = Новый Массив;
	
	// Создать массив идентификаторов
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого fnoMatchingInfo Из fnoMatchingInfoList Цикл
		
		Если УчитыватьВсеСтатусыСопСНТсФНО Тогда
			МассивИдентификаторов.Добавить(fnoMatchingInfo.Id);
		Иначе
			СтатусSnt = СНТКлиентСервер.СтатусСопоставлениеСНТсФНО_ИБ(fnoMatchingInfo.status);
			
			Если СтатусSnt <> Перечисления.СтатусыСНТ.Черновик 
				И СтатусSnt <> Перечисления.СтатусыСНТ.Ошибочный
				И СтатусSnt <> Перечисления.СтатусыСНТ.Импортированный Тогда
				
				МассивИдентификаторов.Добавить(fnoMatchingInfo.Id);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихСопСНТсФНО = НайтиСуществующиеСопСНТсФНОПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов Сопоставление СНТ с ФНО.
	// Если ТолькоСуществующиеСопСНТсФНО, то только старых объектов Сопоставление СНТ с ФНО.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихСопСНТсФНО Цикл
		
		ИдентификаторСопСНТсФНО = ЭлементКоллекции.Ключ;
		СсылкаСопСНТсФНО = ЭлементКоллекции.Значение;
		
		Если СсылкаСопСНТсФНО.Пустая() Тогда
			Если НЕ ТолькоСуществующиеСопСНТсФНО Тогда
				ОбъектСопСНТсФНО = Документы.СопоставлениеСНТиФНО.СоздатьДокумент();
				ОбъектСопСНТсФНО.Идентификатор = ИдентификаторСопСНТсФНО;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ТекущийПользовательНеУказан = ЭСФСерверПереопределяемый.ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь);
				Если ТекущийПользовательНеУказан Тогда
					ОбъектСопСНТсФНО.Автор = Пользователь;
				Иначе
					ОбъектСопСНТсФНО.Автор = ТекущийПользователь;
				КонецЕсли;
				
				МассивСопСНТсФНО.Добавить(ОбъектСопСНТсФНО);
			КонецЕсли;
		Иначе
			МассивСопСНТсФНО.Добавить(СсылкаСопСНТсФНО.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключить проверку даты запрета изменения при записи документа Сопоставление СНТ с ФНО.
	Для Каждого ОбъектСопСНТсФНО Из МассивСопСНТсФНО Цикл
		ОбъектСопСНТсФНО.ДополнительныеСвойства.Вставить(СНТКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
	КонецЦикла;
	
	Возврат МассивСопСНТсФНО;
	
КонецФункции

Функция НайтиСуществующиеСопСНТсФНОПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
	
	// Создать пустую таблицу параметров поиска документов Сопоставление СНТ с ФНО.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовСопСНТсФНО = СНТСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.СопоставлениеСНТиФНО);
	
	// Заполнить таблицу параметров поиска документов Сопоставление СНТ с ФНО.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеСопСНТсФНО = ПараметрыПоискаДокументовСопСНТсФНО.Добавить();
		ОписаниеСопСНТсФНО.Идентификатор = Идентификатор;
		ОписаниеСопСНТсФНО.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = СНТСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыСопСНТсФНО = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовСопСНТсФНО, Метаданные.Документы.СопоставлениеСНТиФНО, ИдентификационныйНомер);
	
	СуществующиеСопСНТсФНО = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.СопоставлениеСНТиФНО.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеСопСНТсФНО.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы Сопоставление СНТ с ФНО, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыСопСНТсФНО Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеСопСНТсФНО.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеСопСНТсФНО.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеСопСНТсФНО;
	
КонецФункции

Функция НайтиfnoMatchingInfoПоId(Знач fnoMatchingInfoList, Знач id)
	
	НайденныйfnoMatchingInfo = Неопределено;
	
	Для Каждого ТекущийfnoMatchingInfo Из fnoMatchingInfoList Цикл
		Если ТекущийfnoMatchingInfo.Id = id Тогда
			НайденныйfnoMatchingInfo = ТекущийfnoMatchingInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйfnoMatchingInfo;
	
КонецФункции

Процедура ЗаполнитьФНО(Знач fnoMatchingInfo, Знач СтруктурнаяЕдиница, СопСНТсФНО) Экспорт //Получение
	
	Фабрика = ФабрикаСопоставлениеСНТ_XML_API_ЭЦП_Версия1();
	ТипfnoMatching = Фабрика.Тип("v1.fnoMatching", "fnoMatchingV1");
	originalXML = СНТСервер.ПолучитьСвойство(fnoMatchingInfo, "originalXML", Неопределено);
	ТекстfnoMatching = originalXML;
	fnoMatching = СНТСервер.ОбъектXDTOИзСтрокиXML(ТекстfnoMatching, Фабрика, ТипfnoMatching);
	
	// Вкладка "Основное"
	СопСНТсФНО.РегистрационныйНомер = СНТСервер.ПолучитьСвойство(fnoMatchingInfo, "registrationNumber", "");
	СопСНТсФНО.ИдентификационныйНомер = СНТСервер.ПолучитьСвойство(fnoMatchingInfo, "creatorTin", "");
	СопСНТсФНО.Статус = СНТКлиентСервер.СтатусСопоставлениеСНТсФНО_ИБ(СНТСервер.ПолучитьСвойство(fnoMatchingInfo, "status", ""));
	СопСНТсФНО.Организация = СтруктурнаяЕдиница;
	СопСНТсФНО.Дата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(fnoMatchingInfo, "inputDate", "01.01.0001"));
		
	// Вкладка "Сведения по ЭЦП"
	СопСНТсФНО.Идентификатор = fnoMatchingInfo.Id;
	СопСНТсФНО.ЭЦП = fnoMatchingInfo.signature;
	
	// Список документов ФНО
	#Область СписокФНОТоварыФНО
	fnoList = СНТСервер.ПолучитьСвойство(fnoMatching, "fnoList", Неопределено);
	
	Если fnoList <> Неопределено Тогда
		
		СписокФНО = СНТСервер.ПолучитьСвойство(fnoList, "fno", Неопределено);
		
		Если СписокФНО <> Неопределено Тогда
			СписокФНО = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокФНО);
			Для Каждого ФНОXDTO Из СписокФНО Цикл
				#Область ТаблицаФНО // будет заполняться после реализации метода получения документа Сопоставление СНТ с ФНО с сервера. 
				ФНОСтрока = СопСНТсФНО.ФНО.Добавить();
				ФНОСтрока.Дата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(ФНОXDTO, "date", "01.01.0001"));
				ФНОСтрока.РегистрационныйНомер = СНТСервер.ПолучитьСвойство(ФНОXDTO, "registrationNumber", "");
				ФНОСтрока.Сумма = СНТСервер.ПолучитьСвойство(ФНОXDTO, "totalSum", 0);
				#КонецОбласти
				productList = СНТСервер.ПолучитьСвойство(ФНОXDTO, "productList", Неопределено);
				СписокТоварФНО = СНТСервер.ПолучитьСвойство(productList, "product", Неопределено);
				СписокТоварФНО = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоварФНО);
				Для каждого ТоварXDTO Из СписокТоварФНО Цикл
					ТоварФНОСтрока = СопСНТсФНО.ТоварыФНО.Добавить();
					ТоварФНОСтрока = ЗаполнитьСопСНТсФНО_ДобавитьБазовыеСведенияОТовареФНО(ТоварXDTO, ТоварФНОСтрока);
				КонецЦикла; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	// Список документов СНТ
	#Область СписокСНТТоварыСНТ
	sourceDocumentList = СНТСервер.ПолучитьСвойство(fnoMatching, "sourceDocumentList", Неопределено);
	
	Если sourceDocumentList <> Неопределено Тогда
		
		СписокСНТ = СНТСервер.ПолучитьСвойство(sourceDocumentList, "sourceDocument", Неопределено);
		
		Если СписокСНТ <> Неопределено Тогда
			СписокСНТ = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокСНТ);
			Для Каждого СНТXDTO Из СписокСНТ Цикл
				#Область ТаблицаСНТ // будет заполняться после реализации метода получения документа Сопоставление СНТ с ФНО с сервера.
				СНТСтрока = СопСНТсФНО.СНТ.Добавить();
				СНТСтрока.Дата = СНТСервер.ДатаИБ(СНТСервер.ПолучитьСвойство(СНТXDTO, "date", "01.01.0001"));
				СНТСтрока.РегистрационныйНомер = СНТСервер.ПолучитьСвойство(СНТXDTO, "registrationNumber", "");
				СНТСтрока.Сумма = СНТСервер.ПолучитьСвойство(СНТXDTO, "totalSum", 0);
				#КонецОбласти
				products = СНТСервер.ПолучитьСвойство(СНТXDTO, "products", Неопределено);
				СписокТоварыСНТ = СНТСервер.ПолучитьСвойство(products, "product", Неопределено);
				СписокТоварыСНТ = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоварыСНТ);
				Для каждого ТоварXDTO Из СписокТоварыСНТ Цикл
					ТоварСНТСтрока = СопСНТсФНО.ТоварыСНТ.Добавить();
					ТоварСНТСтрока = ЗаполнитьСопСНТсФНО_ДобавитьБазовыеСведенияОТовареСНТ(ТоварXDTO, ТоварСНТСтрока);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти

КонецПроцедуры

Функция ЗаполнитьСопСНТсФНО_ДобавитьБазовыеСведенияОТовареФНО(ТоварXDTO, ТоварФНОСтрока)
	
	//ТоварФНОСтрока. = СНТСервер.ПолучитьСвойство(ТоварXDTO, "fnoNumber", "");
	ТоварФНОСтрока.ЕдиницаИзмеренияКод = СНТСервер.ПолучитьСвойство(ТоварXDTO, "measureUnitCode", "");
	ТоварФНОСтрока.ТоварНаименование = СНТСервер.ПолучитьСвойство(ТоварXDTO, "name", "");
	ТоварФНОСтрока.Цена = СНТСервер.ПолучитьСвойство(ТоварXDTO, "price", 0);
	ТоварФНОСтрока.НомерПозицииВЗаявлении = Число(СНТСервер.ПолучитьСвойство(ТоварXDTO, "productNumber", ""));
	ТоварФНОСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
	ТоварФНОСтрока.КодТНВЭД = СНТСервер.ПолучитьСвойство(ТоварXDTO, "tnvedCode", "");
	
	Возврат ТоварФНОСтрока;
	
КонецФункции

Функция ЗаполнитьСопСНТсФНО_ДобавитьБазовыеСведенияОТовареСНТ(ТоварXDTO, ТоварСНТСтрока)
	
	ТоварСНТСтрока.НомерЗаявленияВРамкахТС = СНТСервер.ПолучитьСвойство(ТоварXDTO, "fnoNumber", "");
	ТоварСНТСтрока.НомерПозицииВЗаявлении = Число(СНТСервер.ПолучитьСвойство(ТоварXDTO, "fnoProductNumber", ""));
	ТоварСНТСтрока.НомерСтрокиВСНТ = СНТСервер.ПолучитьСвойство(ТоварXDTO, "idx", "");
	ТоварСНТСтрока.ЕдиницаИзмеренияКод = СНТСервер.ПолучитьСвойство(ТоварXDTO, "measureUnitCode", "");
	ТоварСНТСтрока.ТоварНаименование = СНТСервер.ПолучитьСвойство(ТоварXDTO, "name", "");
	ТоварСНТСтрока.Цена = СНТСервер.ПолучитьСвойство(ТоварXDTO, "price", 0);
	ТоварСНТСтрока.Количество = СНТСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
	ТоварСНТСтрока.КодТНВЭД = СНТСервер.ПолучитьСвойство(ТоварXDTO, "tnvedCode", "");
	
	Возврат ТоварСНТСтрока;
	
КонецФункции

Процедура ВосстановитьСсылочныеРеквизитыДокументовСопСНТсФНО(МассивСтарыхСопСНТСФНО)
	
	Для Каждого Структура Из МассивСтарыхСопСНТСФНО Цикл
		ВосстановитьСсылочныеРеквизитыОдногоСопСНТСФНО(Структура.ИсходныйОбъектСопСНТсФНО, Структура.ОбновленныйОбъектСопСНТсФНО);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоСопСНТСФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО)
	
	ВосстановитьРеквизитыТаблицыТоваровСопСНТсФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО, "ТоварыФНО", "Товар, ЕдиницаИзмерения, НомерРазделаФНО", "ТоварНаименование");
	ВосстановитьРеквизитыТаблицыТоваровСопСНТсФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО, "ТоварыСНТ", "Товар, ЕдиницаИзмерения, НомерРазделаСНТ, ИсточникПроисхождения, ИсточникПроисхожденияПолучатель, Склад, КоличествоОстатков, ТоварНаименованиеВРамкахТС", "ТоварНаименование");
	ВосстановитьРеквизитыТаблицыТоваровСопСНТсФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО, "ФНО", "ДокументЗаявлениеОВвозеТоваров", "РегистрационныйНомер");
	ВосстановитьРеквизитыТаблицыТоваровСопСНТсФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО, "СНТ", "ДокументСНТ", "РегистрационныйНомер");
	
КонецПроцедуры

// Процедура восстановления реквизитов в указанной табличной части при обновлении.
// Параметры:
//  ИсходныйОбъектСопСНТсФНО - Исходный документ Сопоставление СНТ с ФНО из которого будут взяты данные.
//  ОбновленныйОбъектСопСНТсФНО - Полученный документ Сопоставление СНТ с ФНО с сервера.
//  СохраняемыеПоля - Поля, которые будут взяты из исходного документа Сопоставление СНТ с ФНО. 
//
Процедура ВосстановитьРеквизитыТаблицыТоваровСопСНТсФНО(ИсходныйОбъектСопСНТсФНО, ОбновленныйОбъектСопСНТсФНО, ТабличнаяЧасть, СохраняемыеПоля, ИмяРеквизитаДляПроверки)
		
	//Получаем таблицы товаров
	ТаблицаТоварыИсходногоСопСНТсФНО = ИсходныйОбъектСопСНТсФНО[ТабличнаяЧасть].Выгрузить();
	
	ТаблицаТоваровОбновленногоСопСНТсФНО = ОбновленныйОбъектСопСНТсФНО[ТабличнаяЧасть];
		
	Если ТаблицаТоварыИсходногоСопСНТсФНО.Количество() = ОбновленныйОбъектСопСНТсФНО[ТабличнаяЧасть].Количество() Тогда
		
		ВГраницаОбновленного = ОбновленныйОбъектСопСНТсФНО[ТабличнаяЧасть].Количество() - 1;
		
		Для Индекс = 0 По ВГраницаОбновленного Цикл
			
			ИсходнаяСтрока = ТаблицаТоварыИсходногоСопСНТсФНО[Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектСопСНТсФНО[ТабличнаяЧасть][Индекс];
			
			Если ТипЗнч(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]) = Тип("Строка") Тогда
				ОбновленнаяРеквизитПроверки = СокрЛП(ОбновленнаяСтрока[ИмяРеквизитаДляПроверки]);
				ИсходнаяРеквизитПроверки    = СокрЛП(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]);
			Иначе
				ОбновленнаяРеквизитПроверки = ОбновленнаяСтрока[ИмяРеквизитаДляПроверки];
				ИсходнаяРеквизитПроверки    = ИсходнаяСтрока[ИмяРеквизитаДляПроверки];
			КонецЕсли;
			
			Если ОбновленнаяРеквизитПроверки <> ИсходнаяРеквизитПроверки Тогда
			
				//В случае отличия наименований товара между исходной и обновленной строкой, выводим сообщение о рекомендации проверить данную строку
				ТекстСообщения = НСтр("ru = 'В документе ""%1"", в таблице ""%2"", в строке %3, отличаются поля у исходного и полученного документа ""Сопоставление СНТ с ФНО"". Рекомендуется проверить правильность заполнения полей'");
				КраткоеПредставлениеСопСНТсФНО = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектСопСНТсФНО.Ссылка);
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеСопСНТсФНО,ТабличнаяЧасть, Формат(Индекс + 1, "ЧГ="));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбновленныйОбъектСопСНТсФНО.Ссылка);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ИсходнаяСтрока, ОбновленнаяСтрока,,СохраняемыеПоля);	
		КонецЦикла;
		
		ТаблицаТоварыИсходногоСопСНТсФНО.Сортировать("НомерСтроки Возр");
		ОбновленныйОбъектСопСНТсФНО[ТабличнаяЧасть].Загрузить(ТаблицаТоварыИсходногоСопСНТсФНО);
		
	Иначе	
		
		ТекстСообщения = НСтр("ru = 'В документе ""%1"", в таблице ""%2"" очищены и перезаполнены строки с товаров виртуального склада так как их количество в исходном и полученном документе ""Сопоставление СНТ с ФНО"" отличается. Рекомендуется перевыбрать документы в верхних табличных частях для перезполнения.'");
		КраткоеПредставлениеСопСНТсФНО = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектСопСНТсФНО.Ссылка);
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеСопСНТсФНО, ТабличнаяЧасть);
				
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбновленныйОбъектСопСНТсФНО.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОшибокСопоставлениеСНТсФНО
Процедура ПолучитьОшибкиСопоставлениеСНТсФНО(Знач МассивСопСНТсФНО, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	ИдентификаторСессии = ОткрытьСессию(ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
	
	НачатьТранзакцию();
	
	Попытка
		ПолучитьОшибкиСопоставлениеСНТсФНОПоИдентификаторам(МассивСопСНТсФНО, ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменСНТ.ОбновитьДокументыСопоставлениеСНТсФНОИзИСЭСФ'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ;//ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры
#КонецОбласти 

#Область ПерезаполнениеСНТ
// Перезаполнение СНТ по данным документа-основания

Функция НайтиАктуальныеОснованияПоСНТ(Знач МассивСНТ) Экспорт
	
	// Создать пустое соответствие актуальных оснований.
	АктуальныеОснования = Новый Соответствие;
	
	// Заполнить соответствие ссылками на основания.
	Для Каждого СНТ Из МассивСНТ Цикл
		АктуальныеОснования.Вставить(СНТ, СНТ.ДокументОснование);
	КонецЦикла;
	
	Возврат АктуальныеОснования;
	
КонецФункции

Процедура ЗаполнитьИсходящийСНТ(Знач ДокументОснованиеДляЗаполнения, ОбъектСНТ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
		И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;
	
	ВидДвижения = СНТКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения().Получить(ТипДокумента);
	Если ВидДвижения = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = СНТСервер.ПолучитьПараметрыЗаполненияСНТПоУмолчанию();
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"					, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"				, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"				, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"			, Новый Массив);
	
	Если ВидДвижения = "Приход" Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены", Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены", ВидДвижения <> "ЭСФ");
	КонецЕсли;
	
	ЭтоИсправленнаяСНТ = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ЭтоИсправленнаяСНТ") Тогда
			ЭтоИсправленнаяСНТ = ДополнительныеПараметры.ЭтоИсправленнаяСНТ;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ЭтоИсправленнаяСНТ", ЭтоИсправленнаяСНТ);

	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыЗаполнения);
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		СтруктураДокумента = МассивДанныхДляЗаполнения[0];
		
		//Заполняем шапку документа
		Если ПараметрыЗаполнения.ЭтоИсправленнаяСНТ Тогда
			ЗаполнитьЗначенияСвойств(ОбъектСНТ, СтруктураДокумента.Реквизиты[0],,"СвязанныйСНТ, РегистрационныйНомерСвязанногоСНТ");
		Иначе	
			ЗаполнитьЗначенияСвойств(ОбъектСНТ, СтруктураДокумента.Реквизиты[0]);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектСНТ.Грузополучатель) Тогда
			ОбъектСНТ.Грузополучатель = СтруктураДокумента.Реквизиты[0].Получатель;
			ОбъектСНТ.ГрузополучательНаименование = СтруктураДокумента.Реквизиты[0].ПолучательНаименование;
			ОбъектСНТ.ГрузополучательИдентификатор = СтруктураДокумента.Реквизиты[0].ПолучательИдентификатор;
			ОбъектСНТ.ГрузополучательНерезидент = СтруктураДокумента.Реквизиты[0].ПолучательНерезидент;
			ОбъектСНТ.ГрузополучательКодСтраныОтправки = СтруктураДокумента.Реквизиты[0].ПолучательКодСтраны;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектСНТ.Грузоотправитель) Тогда
			ОбъектСНТ.Грузоотправитель = СтруктураДокумента.Реквизиты[0].Поставщик;
			ОбъектСНТ.ГрузоотправительНаименование = СтруктураДокумента.Реквизиты[0].ПоставщикНаименование;
			ОбъектСНТ.ГрузоотправительИдентификатор = СтруктураДокумента.Реквизиты[0].ПоставщикИдентификатор;
			ОбъектСНТ.ГрузоотправительНерезидент = СтруктураДокумента.Реквизиты[0].ПоставщикНерезидент;
			ОбъектСНТ.ГрузоотправительКодСтраныОтправки = СтруктураДокумента.Реквизиты[0].ПоставщикКодСтраны;
		КонецЕсли;
		
		ОбъектСНТ.Направление = Перечисления.НаправленияСНТ.Исходящий; 
		ОбъектСНТ.Состояние = Перечисления.СостоянияСНТ.Сформирован; 
		
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
			
			НоваяСтрокаТЧ = ОбъектСНТ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
		КонецЦикла;
		
		//Заполняем табличную часть "ТоварыВС"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.ТоварыВС Цикл
			
			НоваяСтрокаТЧ = ОбъектСНТ.ТоварыВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			НоваяСтрокаТЧ.ДополнительныйИдентификатор = СтрокаТЧ.ИсточникПроисхождения.ДополнительныйИдентификатор;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаТЧ.НомерСтрокиСНТ) Тогда
				НоваяСтрокаТЧ.НомерСтрокиСНТ = НоваяСтрокаТЧ.НомерСтроки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СоответствиеТоваровИЕдиницИзмерений

Функция ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Знач МассивСНТ, Знач СоздатьНовыеПриОтсутствии) Экспорт
	
	КлючиАналитикиПоТоварам = Новый ТаблицаЗначений;
	//++ НЕ ЭСФ
	ЗапросТоваров = Новый Запрос;
	ЗапросТоваров.Текст = СНТСерверПереопределяемый.ТекстЗапросаСНТТоварыЕдиницыИзмерения();
		
	ЗапросТоваров.УстановитьПараметр("МассивСНТ", МассивСНТ);
	ЗапросТоваров.УстановитьПараметр("ПустаяСтрока", "");
	
	ДлинаТипЕдиницыИзмерения = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип.КвалификаторыСтроки.Длина;
	
	ТаблицаТоваров = ЗапросТоваров.Выполнить().Выгрузить();
	
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		Строка.ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Строка.ЕдиницаИзмеренияКод);
	КонецЦикла;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
	|ПОМЕСТИТЬ ВТТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(АналитикаУчетаСоответствий.КлючАналитики) КАК КлючАналитикиСоответствия,
	|	ВТТаблицаТовары.ТоварНаименование,
	|	ВТТаблицаТовары.ЕдиницаИзмеренияКод
	|ИЗ
	|	ВТТаблицаТовары КАК ВТТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаСоответствий КАК АналитикаУчетаСоответствий
	|		ПО ВТТаблицаТовары.ТоварНаименование = АналитикаУчетаСоответствий.ТоварНаименование
	|			И ВТТаблицаТовары.ЕдиницаИзмеренияКод = АналитикаУчетаСоответствий.ЕдиницаИзмеренияКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаТовары.ТоварНаименование,
	|	ВТТаблицаТовары.ЕдиницаИзмеренияКод";
	
	ЗапросАналитик.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	
	ТипТоварНаименование 	= Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ТоварНаименование.Тип;
	ТипЕдиницаИзмеренияКод 	= Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип;
	ТипКлючАналитики	    = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Ресурсы.КлючАналитики.Тип;
	
	КлючиАналитикиПоТоварам = Новый ТаблицаЗначений;
	КлючиАналитикиПоТоварам.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);
	КлючиАналитикиПоТоварам.Колонки.Добавить("ЕдиницаИзмеренияКод", ТипЕдиницаИзмеренияКод);
	КлючиАналитикиПоТоварам.Колонки.Добавить("КлючАналитикиСоответствия", ТипКлючАналитики);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = КлючиАналитикиПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.КлючАналитикиСоответствия) И СоздатьНовыеПриОтсутствии Тогда
			НоваяСтрока.КлючАналитикиСоответствия = РегистрыСведений.АналитикаУчетаСоответствий.СоздатьКлючАналитики(Выборка);
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ ЭСФ
	Возврат КлючиАналитикиПоТоварам;
		
КонецФункции

Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, НаправлениеСНТ, МассивСНТ) Экспорт
	
	ЗапросТоваров = Новый Запрос;
	ТекстЗапроса = СНТСерверПереопределяемый.ТекстЗапросаСНТТоварыЕдиницыИзмерения(Истина);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_СНТЕдиницыИзмерения.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	вт_СНТЕдиницыИзмерения.ТоварНаименование КАК ТоварНаименование,
	|	вт_СНТЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	вт_СНТЕдиницыИзмерения.Товар КАК Товар,
	|	СНТ.Контрагент
	|ИЗ
	|	вт_СНТЕдиницыИзмерения КАК вт_СНТЕдиницыИзмерения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СНТ КАК СНТ
	|		ПО вт_СНТЕдиницыИзмерения.Ссылка = СНТ.Ссылка";
	
	ЗапросТоваров.Текст = ТекстЗапроса;
	
	ЗапросТоваров.УстановитьПараметр("МассивСНТ", МассивСНТ);
	ЗапросТоваров.УстановитьПараметр("ПустаяСтрока", "");
	
	ДлинаТипЕдиницыИзмерения = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип.КвалификаторыСтроки.Длина;
	
	ТаблицаТоваровИЕдиницИзмерений = ЗапросТоваров.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТаблицаТоваровИЕдиницИзмерений Цикл
		Строка.ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Строка.ЕдиницаИзмеренияКод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиАналитики.ТоварНаименование КАК ТоварНаименование,
	|	КлючиАналитики.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	КлючиАналитики.КлючАналитикиСоответствия
	|ПОМЕСТИТЬ КлючиАналитики
	|ИЗ
	|	&КлючиАналитики КАК КлючиАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ТоварНаименование КАК ТоварНаименование,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Товар КАК Товар,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ТоварыПоКонтрагентам
	|ИЗ
	|	&ТоварыИЕдиницыИзмеренияПоКонтрагентам КАК ТоварыИЕдиницыИзмеренияПоКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмерения,
	|	ТоварыПоКонтрагентам.Товар,
	|	КлючиАналитики.КлючАналитикиСоответствия,
	|	МАКСИМУМ(ТоварыПоКонтрагентам.КоэффициентПересчета) КАК КоэффициентПересчета
	|ИЗ
	|	ТоварыПоКонтрагентам КАК ТоварыПоКонтрагентам
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиАналитики КАК КлючиАналитики
	|		ПО ТоварыПоКонтрагентам.ТоварНаименование = КлючиАналитики.ТоварНаименование
	|			И ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод = КлючиАналитики.ЕдиницаИзмеренияКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмерения,
	|	ТоварыПоКонтрагентам.Товар,
	|	КлючиАналитики.КлючАналитикиСоответствия";
	
	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("КлючиАналитики", КлючиАналитикиУчетаСоответствий);
	Запрос.УстановитьПараметр("ТоварыИЕдиницыИзмеренияПоКонтрагентам", ТаблицаТоваровИЕдиницИзмерений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.СоздатьЗаписьСоответствия(Выборка);		
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти


#Область ИмпортСНТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ ИМПРОТ СНТ

// Добавляет в таблицу ЗагружаемыеСНТ новые строки, содержащие данные загружаемых СНТ.
//
// Параметры:
//  МассивАдресовЗагружаемыхФайлов - Массив - Входящий параметр -
//   Массив XML файлов СНТ, на основе которых необходимо заполнить ЗагружаемыеСНТ.
//  СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций -
//   Входящий параметр - Структурная единица, для которой необхоимо заполнить ЗагружаемыеСНТ.
//  ЗагружаемыеСНТ - ТаблицаЗначений - Изменяемый параметр -
//   Таблица загружаемых СНТ, в которую будут добавлены новые строки, содержащие данные загружаемых СНТ.
//
// Возвращаемое значение:
//  См. входящий параметр ЗагружаемыеСНТ.
//
Процедура ЗаполнитьТаблицуЗагружаемыеСНТ(Знач МассивАдресовЗагружаемыхФайлов, Знач СтруктурнаяЕдиница, ЗагружаемыеСНТ) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить XDTO из каждого файла.
	// Если для какого-нибудь файла не удалось получить XDTO, то сообщить об этом.	
	
	ТабЗначXDTO = Новый ТаблицаЗначений;
	ТабЗначXDTO.Колонки.Добавить("ИмяФайла");
	ТабЗначXDTO.Колонки.Добавить("ОбъектXDTO");
	
	Для Каждого Файл Из МассивАдресовЗагружаемыхФайлов Цикл
		
		// Создать временный файл.
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Адрес);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		// Прочитать текст из временного файла.
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть(ИмяВременногоФайла, "UTF-8");
		СтрокаXML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// Удалить временный файл.
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
		
		Попытка
			
			// Возникнет ошибка, если СтрокаXML содержит не валидный XML.
			ОбъектXDTO = СНТСервер.ОбъектXDTOИзСтрокиXML(СтрокаXML, ФабрикаXDTO);
			
			СтрокаТабЗначXDTO = ТабЗначXDTO.Добавить();
			СтрокаТабЗначXDTO.ИмяФайла = Файл.Имя;
			СтрокаТабЗначXDTO.ОбъектXDTO = ОбъектXDTO;
			
		Исключение
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ из файла:
				|%1
				|так как данный файл не является валидным XML-файлом.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Файл.Имя); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////		
	// Получить коллекции строк SntInfo из каждого XML.
	// Если из какого-нибудь XML не удалось получить SntInfo, то сообщить об этом.
	
	ТабЗначSntInfo = Новый ТаблицаЗначений;
	ТабЗначSntInfo.Колонки.Добавить("ИмяФайла");
	ТабЗначSntInfo.Колонки.Добавить("SntInfo");
	
	Для Каждого СтрокаТабЗначXDTO Из ТабЗначXDTO Цикл
		
		ОбъектXDTO = СтрокаТабЗначXDTO.ОбъектXDTO;
		
		Попытка
			
			// Возникнет ошибка, если ОбъектXDTO не содержит узла SntInfo.
			SntInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.sntInfoSet.SntInfo);
			
		Исключение
			
			SntInfoList = Неопределено;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ из файла:
				|%1
				|так как данный XML-файл имеет некорректную структуру.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаТабЗначXDTO.ИмяФайла); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
		Если SntInfoList <> Неопределено Тогда 
			
			Для Каждого SntInfo Из SntInfoList Цикл
				
				СтрокаТабЗначSntInfo = ТабЗначSntInfo.Добавить();
				СтрокаТабЗначSntInfo.ИмяФайла = СтрокаТабЗначXDTO.ИмяФайла;
				СтрокаТабЗначSntInfo.SntInfo = SntInfo;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать SntInfo, если у SntInfo нет поля SntId,
	// или оно пустое, то удалить этот SntInfo и сообщить об этом.
	
	// Создать временную колонку для удаления SntInfo, у которых нет поля SntId, или оно пустое.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначSntInfo.Колонки.Добавить("ИдентификаторЗаполнен", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		
		SntInfo = СтрокаТабЗначSntInfo.SntInfo;
		SntId = СНТСервер.ПолучитьСвойство(SntInfo, "SntId", Неопределено);
		
		Если ТипЗнч(SntId) = Тип("Строка") И (НЕ ПустаяСтрока(SntId)) Тогда
			
			СтрокаТабЗначSntInfo.ИдентификаторЗаполнен = Истина;
			
		Иначе
			
			СтрокаТабЗначSntInfo.ИдентификаторЗаполнен = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как у данного документа не заполнено служебное поле <SntId>.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеSntInfo(SntInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначSntInfo.ИмяФайла);			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
					
	КонецЦикла;
	
	// Удалить SntInfo, у которых нет поля SntId, или оно пустое.
	Пока Истина Цикл
		
		СтрокаТабЗначSntInfo = ТабЗначSntInfo.Найти(Ложь, "ИдентификаторЗаполнен");
		
		Если СтрокаТабЗначSntInfo <> Неопределено Тогда
			ТабЗначSntInfo.Удалить(СтрокаТабЗначSntInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "ИдентификаторЗаполнен" больше не нужна, т.к. у всех оставшихся SntInfo заполнено поле SntId.
	ТабЗначSntInfo.Колонки.Удалить("ИдентификаторЗаполнен");
	
	//////////////////////////////////////////////////////////////////////////////	
	// Создать СНТ для каждого SntInfo, но не записывать созданные СНТ.	
	// Если для какого-нибудь SntInfo не удалось создать СНТ, то сообщить об этом.
	
	// Создать временную колонку для удаления SntInfo, для которых не удалось создать СНТ.
	// Создать колонку для определения СНТ котореы не принадлежат указанной структурной еденице в будущем
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначSntInfo.Колонки.Добавить("УдалосьСоздатьСНТ", ОписаниеТипаБулево);
	ТабЗначSntInfo.Колонки.Добавить("Направление");
	
	// Создать СНТ для каждого SntInfo, но не записывать созданные СНТ.
	// Если удалось создать СНТ, то записать в колонку УдалосьСоздатьСНТ значение Истина,
	// в противном случае записать в колонку Ложь и сообщить пользователю.
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		
		SntInfo = СтрокаТабЗначSntInfo.SntInfo;
		Направление = Перечисления.НаправленияСНТ.Входящий; // Для данной проверки направление не имеет значения.
		ОбъектСНТ = Документы.СНТ.СоздатьДокумент();
		
		Попытка
			
			ЗаполнитьСНТ(SntInfo, СтруктурнаяЕдиница, Направление, ОбъектСНТ);
			
			СтрокаТабЗначSntInfo.УдалосьСоздатьСНТ = Истина;
			СтрокаТабЗначSntInfo.Направление = ОбъектСНТ.Направление;
		Исключение
			
			СтрокаТабЗначSntInfo.УдалосьСоздатьСНТ = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как при загрузке возникла ошибка:
				|[ТекстОшибки]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеSntInfo(SntInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначSntInfo.ИмяФайла);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстОшибки]", ТекстОшибки);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
						
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалить SntInfo, для которых не удалось создать СНТ.
	Пока Истина Цикл
		
		СтрокаТабЗначSntInfo = ТабЗначSntInfo.Найти(Ложь, "УдалосьСоздатьСНТ");
		
		Если СтрокаТабЗначSntInfo <> Неопределено Тогда
			ТабЗначSntInfo.Удалить(СтрокаТабЗначSntInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьСНТ" больше не нужна, т.к. для всех оставшихся SntInfo удалось создать СНТ.
	ТабЗначSntInfo.Колонки.Удалить("УдалосьСоздатьСНТ");
			
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся SntInfo, если в таблице ЗагружаемыеСНТ
	// уже есть СНТ с таким идентификатором, то сообщить об этом.
	
	// Создать временную колонку для удаления SntInfo, 
	// идентификатор которых уже есть в таблице ЗагружаемыеСНТ.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначSntInfo.Колонки.Добавить("ИдентификаторЕстьВТаблицеЗагружаемыеСНТ", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		
		Идентификатор = СтрокаТабЗначSntInfo.SntInfo.SntId;	
		
		Если ЗагружаемыеСНТ.Найти(Идентификатор, "Идентификатор") = Неопределено Тогда
			
			СтрокаТабЗначSntInfo.ИдентификаторЕстьВТаблицеЗагружаемыеСНТ = Ложь;	
			
		Иначе
			
			СтрокаТабЗначSntInfo.ИдентификаторЕстьВТаблицеЗагружаемыеСНТ = Истина;
						
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как в таблице загружаемых документов СНТ уже присутствует.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеSntInfo(SntInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначSntInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалить SntInfo, идентификатор которых уже есть в таблице ЗагружаемыеСНТ.
	Пока Истина Цикл
		
		СтрокаТабЗначSntInfo = ТабЗначSntInfo.Найти(Истина, "ИдентификаторЕстьВТаблицеЗагружаемыеСНТ");
		
		Если СтрокаТабЗначSntInfo <> Неопределено Тогда
			ТабЗначSntInfo.Удалить(СтрокаТабЗначSntInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьСНТ" больше не нужна, т.к. для всех оставшихся SntInfo удалось создать СНТ.
	ТабЗначSntInfo.Колонки.Удалить("ИдентификаторЕстьВТаблицеЗагружаемыеСНТ");
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся SntInfo, если ИИН структурной единицы нет
	// в реквизитах получателя или отправителя, то сообщить об этом.
		
	ДанныеСтруктурнойЕдиницы = СНТСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		
		Если СтрокаТабЗначSntInfo.Направление = Перечисления.НаправленияСНТ.ПустаяСсылка() Или СтрокаТабЗначSntInfo.Направление = Неопределено Тогда
							
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить СНТ: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как документ не принадлежит структурной единице ""[СтруктурнаяЕдиница]"".'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеSntInfo(SntInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначSntInfo.ИмяФайла);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СтруктурнаяЕдиница]", СтруктурнаяЕдиница);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
				
	КонецЦикла;
		
	// Удалить SntInfo, которые не принадлежат текущей структурной единице.
	Пока Истина Цикл
		
		СтрокаТабЗначSntInfo = ТабЗначSntInfo.Найти(Неопределено, "Направление");
		
		Если СтрокаТабЗначSntInfo = Неопределено Тогда
			СтрокаТабЗначSntInfo = ТабЗначSntInfo.Найти(Перечисления.НаправленияСНТ.ПустаяСсылка(), "Направление");
		КонецЕсли;
		
		Если СтрокаТабЗначSntInfo <> Неопределено Тогда
			ТабЗначSntInfo.Удалить(СтрокаТабЗначSntInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	/////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся SntInfo, если есть несколько SntInfo с одинаковым id, 
	// то оставить один и сообщить об этом.
	
	// Добавить в ТабЗначSntInfo колонку Идентификатор.
	КвалификаторСтроки100 = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", КвалификаторСтроки100);
	ТабЗначSntInfo.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить колонку Идентификатор в ТабЗначSntInfo.
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		СтрокаТабЗначSntInfo.Идентификатор = СтрокаТабЗначSntInfo.SntInfo.SntId;
	КонецЦикла;
	
	// Создать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначУникальныеИдентификаторы.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить таблицу уникальных идентификаторов.
	Для Каждого СтрокаТабЗначSntInfo Из ТабЗначSntInfo Цикл
		СтрокаТабЗначУникальныеИдентификаторы = ТабЗначУникальныеИдентификаторы.Добавить();
		СтрокаТабЗначУникальныеИдентификаторы.Идентификатор = СтрокаТабЗначSntInfo.Идентификатор;
	КонецЦикла;
	
	// Сгруппировать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы.Свернуть("Идентификатор");
	
	// Создать таблицу значений, все строки из которой добавятся в таблицу ЗагружаемыеСНТ.
	ТабЗначДляЗаполнения = Новый ТаблицаЗначений;
	ТабЗначДляЗаполнения.Колонки.Добавить("ИмяФайла");
	ТабЗначДляЗаполнения.Колонки.Добавить("SntInfo");
	ТабЗначДляЗаполнения.Колонки.Добавить("Направление");
	ТабЗначДляЗаполнения.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	ОписаниеТиповСсылкаСНТ = Новый ОписаниеТипов("ДокументСсылка.СНТ");
	ТабЗначДляЗаполнения.Колонки.Добавить("СНТ", ОписаниеТиповСсылкаСНТ);
	                                                                  
	// Заполнить таблицу для заполнения на основе ТабЗначSntInfo,
	// если будут находится SntInfo с одинаковыми идентификаторами,
	// то будет браться первый и пользователю будет показываться сообщение.
	Для Каждого СтрокаТабЗначУникальныеИдентификаторы Из ТабЗначУникальныеИдентификаторы Цикл
		
		Идентификатор = СтрокаТабЗначУникальныеИдентификаторы.Идентификатор;	
		ПараметрыОтбора = Новый Структура("Идентификатор", Идентификатор);
		МассивНайденныхСтрок = ТабЗначSntInfo.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не удалось найти строки по идентификатору.'");
			
		ИначеЕсли МассивНайденныхСтрок.Количество() = 1 Тогда
			
			СтрокаТабЗначSntInfo = МассивНайденныхСтрок[0];
			
		Иначе // МассивНайденныхСтрок.Количество() > 1 Тогда
			
			СтрокаТабЗначSntInfo = МассивНайденныхСтрок[0];
			
			ТекстСообщения = НСтр(
				"ru = 'В загружаемых файлах обнаружено несколько СНТ с одинаковым значением служебного поля <SntId>.
				|Из обнаруженных СНТ будет загружен только один:
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеSntInfo(SntInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначSntInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);			
			
		КонецЕсли;
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Добавить();
		СтрокаТабЗначДляЗаполнения.ИмяФайла = СтрокаТабЗначSntInfo.ИмяФайла;
		СтрокаТабЗначДляЗаполнения.SntInfo = СтрокаТабЗначSntInfo.SntInfo;
		СтрокаТабЗначДляЗаполнения.Направление = СтрокаТабЗначSntInfo.Направление;
		СтрокаТабЗначДляЗаполнения.Идентификатор = СтрокаТабЗначSntInfo.Идентификатор;
		
	КонецЦикла;
			
	//////////////////////////////////////////////////////////////////////////////
	// Найти существующие СНТ по идентификаторам.	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		МассивИдентификаторов.Добавить(СтрокаТабЗначДляЗаполнения.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихСНТ = НайтиСуществующиеСНТПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихСНТ Из КоллекцияСуществующихСНТ Цикл
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Найти(ЭлементКоллекцииСуществующихСНТ.Ключ, "Идентификатор");
		СтрокаТабЗначДляЗаполнения.СНТ = ЭлементКоллекцииСуществующихСНТ.Значение;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Для СНТ, которые не удалось найти по идентификатору, найти по номеру и дате.
		
	// Создать пустую таблицу параметров поиска.
	ИменаРеквизитов = "ПометкаУдаления, Направление, Номер, Дата";

	ПараметрыПоискаДокументовСНТ = СНТСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.СНТ);
	
	// Заполнить таблицу параметров поиска.
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.СНТ) Тогда
			
			ПараметрыПоискаОдногоСНТ = ПараметрыПоискаДокументовСНТ.Добавить();
			
			ПараметрыПоискаОдногоСНТ.ПометкаУдаления = Ложь;
			ПараметрыПоискаОдногоСНТ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
			
			Snt = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo, "Snt", "");
			Если ПустаяСтрока(Snt) Тогда
				ТекстСчетаФактуры = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo.documentInfo, "SntBody", "");
				Snt = ?(ПустаяСтрока(ТекстСчетаФактуры), "", СНТСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
				Если ПустаяСтрока(snt) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыПоискаОдногоСНТ.Номер = СНТСервер.ПолучитьСвойство(Snt, "number", "");
			ПараметрыПоискаОдногоСНТ.Дата = СНТСервер.ДатаИБ(Snt.date);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если есть загружаемые СНТ, для которых не удалось найти существующие по идентификатору.
	Если ПараметрыПоискаДокументовСНТ.Количество() > 0 Тогда
		
		// Найти СНТ по номера и датам.
		ДанныеСтруктурнойЕдиницы = СНТСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
		ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
		ТаблицаНайденныхСНТ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовСНТ, Метаданные.Документы.СНТ, ИдентификационныйНомер);
		
		// Заполнить ссылки на СНТ, найденные по номерам и датам.
		Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.СНТ) Тогда
				
				ПараметрыОтбора = Новый Структура;
				
				Snt = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo, "Snt", "");
				Если ПустаяСтрока(Snt) Тогда
					ТекстСчетаФактуры = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo.documentInfo, "SntBody", "");
					Snt = ?(ПустаяСтрока(ТекстСчетаФактуры), "", СНТСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
					Если ПустаяСтрока(snt) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				ПараметрыОтбора.Вставить("Направление", СтрокаТабЗначДляЗаполнения.Направление);
				ПараметрыОтбора.Вставить("Номер", СНТСервер.ПолучитьСвойство(Snt, "number", ""));
				ПараметрыОтбора.Вставить("Дата", СНТСервер.ДатаИБ(Snt.date));
				
				МассивНайденныхСтрокТаблицаНайденныхСНТ = ТаблицаНайденныхСНТ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрокТаблицаНайденныхСНТ.Количество() = 1 Тогда
					
					НайденнаяСтрока = МассивНайденныхСтрокТаблицаНайденныхСНТ[0];
					СтрокаТабЗначДляЗаполнения.СНТ = НайденнаяСтрока.НайденнаяСсылка;
					
				ИначеЕсли МассивНайденныхСтрокТаблицаНайденныхСНТ.Количество() > 1 Тогда
					
					ТекстСообщения = НСтр(
					"ru = 'Для загружаемого СНТ №[Номер] от [Дата] в информационной базе найдено несколько СНТ:
					|[СписокСНТ]'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", ПараметрыОтбора.Номер);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", Формат(ПараметрыОтбора.Дата, "ДФ=dd.MM.yyyy"));
					
					СписокСНТ = "";
					Для Каждого НайденнаяСтрока Из МассивНайденныхСтрокТаблицаНайденныхСНТ Цикл
						СписокСНТ = СписокСНТ + НайденнаяСтрока.НайденнаяСсылка + Символы.ПС;	
					КонецЦикла;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СписокСНТ]", СокрЛП(СписокСНТ));
					
					Сообщить(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Добавить строки из ТабЗначДляЗаполнения в таблицу ЗагружаемыеСНТ.
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		СтрокаЗагружаемыеСНТ = ЗагружаемыеСНТ.Добавить();
		
		// Создать СНТ для вычисления поля Состояние.
		ОбъектСНТ = Документы.СНТ.СоздатьДокумент();
		ЗаполнитьСНТ(СтрокаТабЗначДляЗаполнения.SntInfo, СтруктурнаяЕдиница, Направление, ОбъектСНТ);
		
		//+
		Snt = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo, "Snt", "");
		Если ПустаяСтрока(Snt) Тогда
			ТекстСчетаФактуры = СНТСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.SntInfo.documentInfo, "SntBody", "");
			Snt = ?(ПустаяСтрока(ТекстСчетаФактуры), "", СНТСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
			Если ПустаяСтрока(snt) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//-

		СтрокаЗагружаемыеСНТ.Состояние = СНТСервер.СостояниеСНТ(ОбъектСНТ);
		СтрокаЗагружаемыеСНТ.XML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(СтрокаТабЗначДляЗаполнения.SntInfo, "SntInfo", ФабрикаXDTO);
		СтрокаЗагружаемыеСНТ.Тип = СНТКлиентСервер.ТипИБ(Snt.SntType);
		СтрокаЗагружаемыеСНТ.Дата = СНТСервер.ДатаИБ(Snt.date);
		СтрокаЗагружаемыеСНТ.Идентификатор = СтрокаТабЗначДляЗаполнения.Идентификатор;
		СтрокаЗагружаемыеСНТ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
		СтрокаЗагружаемыеСНТ.Номер = СНТСервер.ПолучитьСвойство(Snt, "number", "");
		СтрокаЗагружаемыеСНТ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
		СтрокаЗагружаемыеСНТ.Пометка = Ложь;
		СтрокаЗагружаемыеСНТ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
		СтрокаЗагружаемыеСНТ.СНТ = СтрокаТабЗначДляЗаполнения.СНТ;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////	
	// Сообщить, сколько всего СНТ загружено.
	ТекстСообщения = НСтр("ru = 'Количество загруженных СНТ: [Количество].'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Количество]", ТабЗначДляЗаполнения.Количество());
	Сообщить(ТекстСообщения);
	
КонецПроцедуры


Функция ПредставлениеSntInfo(SntInfo)
	
	СтроковоеПредставление = НСтр("ru = 'Номер: [Номер], Дата: [Дата], Рег. номер: [РегНомер]'");
	
	Snt = СНТСервер.ПолучитьСвойство(SntInfo, "Snt", Неопределено);
	
	ТекстНеУдалосьПолучить = НСтр("ru = '<Не удалось получить>'");
	
	Если Snt <> Неопределено Тогда
		
		Номер = СНТСервер.ПолучитьСвойство(Snt, "number", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", Номер); 
		
		Дата = СНТСервер.ПолучитьСвойство(Snt, "date", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", Дата);
		
	Иначе
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", ТекстНеУдалосьПолучить); 
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", ТекстНеУдалосьПолучить);
		
	КонецЕсли;
	
	РегНомер = СНТСервер.ПолучитьСвойство(SntInfo, "registrationNumber", ТекстНеУдалосьПолучить);
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[РегНомер]", РегНомер);
	
	Возврат СтроковоеПредставление;
	
КонецФункции

Процедура СоздатьОбновитьЗагружаемыеСНТ(Знач СтруктурнаяЕдиница, ЗагружаемыеСНТ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		// Если пользователь выгрузит СНТ и отправит СНТ через веб-приложение ИС СНТ,
		// а затем выгрузит этот СНТ из веб-приложения ИС СНТ, чтобы обновить СНТ в 1С,
		// то при загрузке этот СНТ найдется по номеру и дате, 
		// но при создании появится дублирующийся СНТ,
		// т.к. поиск существующих СНТ при создании выполняется по идентификатору.
		//
		// Чтобы устранить данную проблему, документу СНТ, найденному по номеру и дате,
		// присваивается идентификатор документа загружаемого СНТ.
		Для Каждого СтрокаЗагружаемыеСНТ Из ЗагружаемыеСНТ Цикл
			Если ЗначениеЗаполнено(СтрокаЗагружаемыеСНТ.СНТ) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗагружаемыеСНТ.СНТ.Идентификатор) Тогда
					ОбъектСНТ = СтрокаЗагружаемыеСНТ.СНТ.ПолучитьОбъект();
					ОбъектСНТ.Идентификатор = СтрокаЗагружаемыеСНТ.Идентификатор;
					ОбъектСНТ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СоздатьОбновитьЗагружаемыеСНТПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияСНТ.Входящий, ЗагружаемыеСНТ);
		СоздатьОбновитьЗагружаемыеСНТПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияСНТ.Исходящий, ЗагружаемыеСНТ);
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменСНТ.СоздатьОбновитьЗагружаемыеСНТ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ЗагружаемыеСНТ_ОбновитьКолонкуСНТ(СтруктурнаяЕдиница, ЗагружаемыеСНТ);
	
КонецПроцедуры

Процедура СоздатьОбновитьЗагружаемыеСНТПоНаправлению(Знач СтруктурнаяЕдиница, Знач НаправлениеСНТ, ЗагружаемыеСНТ)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Направление", НаправлениеСНТ);
	ПараметрыОтбора.Вставить("Пометка", Истина);
	
	МассивНайденныхСтрокЗагружаемыеСНТ = ЗагружаемыеСНТ.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрокЗагружаемыеСНТ.Количество() <> 0 Тогда
		
		SntInfoList = ЭСФСервер.ПустойСписокXDTO();	
		Для Каждого СтрокаЗагружаемыеСНТ Из МассивНайденныхСтрокЗагружаемыеСНТ Цикл
			SntInfoXDTO = СНТСервер.ОбъектXDTOИзСтрокиXML(СтрокаЗагружаемыеСНТ.XML, ФабрикаXDTO);
			ЭСФСервер.НовыйЭлементСпискаXDTO(SntInfoList, ФабрикаXDTO, SntInfoXDTO);
		КонецЦикла;
		
		СоздатьОбновитьПолучаемыеСНТ(SntInfoList, НаправлениеСНТ, СтруктурнаяЕдиница, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагружаемыеСНТ_ОбновитьКолонкуСНТ(Знач СтруктурнаяЕдиница, ЗагружаемыеСНТ)
	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаЗагружаемыеСНТ Из ЗагружаемыеСНТ Цикл
		МассивИдентификаторов.Добавить(СтрокаЗагружаемыеСНТ.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихСНТ = НайтиСуществующиеСНТПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихСНТ Из КоллекцияСуществующихСНТ Цикл
		СтрокаЗагружаемыеСНТ = ЗагружаемыеСНТ.Найти(ЭлементКоллекцииСуществующихСНТ.Ключ, "Идентификатор");
		СтрокаЗагружаемыеСНТ.СНТ = ЭлементКоллекцииСуществующихСНТ.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли