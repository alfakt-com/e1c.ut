Перем SessionId;


Перем НТТР_клиент;
Перем ИмяФайлаВходящее;
Перем ИмяФайлаИсходящее;
//Перем ИмяФайла;
//Перем ИмяПути;
Перем МаксКолНомеровЗаРаз Экспорт;
//Перем КоличествоСообщений;

#Если НЕ ВебКлиент Тогда
&НаКлиенте
Процедура Отправка_Команда(Команда)	
	ОтправкаСМСТест();	
КонецПроцедуры

&НаСервере
Процедура ОтправкаСМСТест()
	//ОбрОбъект = РеквизитФормыВЗначение("Объект");
    SMSID = Отправка(Объект.ОтложитьОтправкуТест);
КонецПРоцедуры	
	
&НаКлиенте
Процедура МассоваяОтправка_Команда(Команда)
	
	SMSID = МассоваяОтправка(Объект.ОтложитьОтправку);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОтправителейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыбФайл = Новый Файл(Объект.ИмяФайлаОтправителей);
	Если ВыбФайл.Существует() Тогда
		Диалог.ПолноеИмяФайла = ВыбФайл.Имя;
		Диалог.Каталог = ВыбФайл.Путь;
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.ПолноеИмяФайла= "СписокОтправителей.txt";
	КонецЕсли;
	
	Диалог.Заголовок = "Укажите файл со списком отправителей";
	Диалог.Фильтр = "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	Диалог.Расширение = "txt";
	Если Диалог.Выбрать() Тогда
		Объект.ИмяФайлаОтправителей = Диалог.ПолноеИмяФайла;
		ПрочитатьСписокОтправителей();
		Возврат;
	Иначе
		Сообщить("Файл не создан!");
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокОтправителей()
	ВыбФайл = Новый Файл(Объект.ИмяФайлаОтправителей);
	Если ВыбФайл.Существует() Тогда
		Док = Новый ТекстовыйДокумент;
		Док.Прочитать(Объект.ИмяФайлаОтправителей);
		КолСтрок =  Док.КоличествоСтрок();
		Для Ном = 1 По КолСтрок Цикл
			Строка = Объект.СписокОтправителей.Добавить();
			Строка.Наименование = Док.ПолучитьСтроку(Ном);
		КонецЦикла;
	Иначе
		//Создаем Файл 
		ИмяФайлаОтправителей= "СписокОтправителей.txt";
		ВыбФайл = Новый ТекстовыйДокумент;
		ВыбФайл.Записать(Объект.ИмяФайлаОтправителей);
		Строка = Объект.СписокОтправителей.Добавить();
		Строка.Наименование = Объект.SMSFrom;
		ЗаписатьСписокОтправителей();
	КонецЕсли;
	ОбновитьСписокВыбораОтправителя();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСписокОтправителей()
	ВыбФайл = Новый Файл(Объект.ИмяФайлаОтправителей);
	Если НЕ ВыбФайл.Существует() Тогда
		Если НЕ ВыбратьФайлОтправителей() ТОгда
			Сообщить("Список отправителей не записан!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	Док = Новый ТекстовыйДокумент;
	Для каждого Строка Из Объект.СписокОтправителей Цикл
		Док.ДобавитьСтроку(Строка.Наименование);
	КонецЦикла;
	Док.Записать(Объект.ИмяФайлаОтправителей); 
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораОтправителя();
	ЭтаФорма.Элементы.SMSFrom.СписокВыбора.ЗагрузитьЗначения(Объект.СписокОтправителей.Выгрузить().ВыгрузитьКолонку("Наименование"));
	ЭтаФорма.Элементы.SMSFrom.Заголовок = Объект.SMSFrom;
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайлОтправителей()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыбФайл = Новый Файл(Объект.ИмяФайлаОтправителей);
	Если ВыбФайл.Существует() Тогда
		Диалог.ПолноеИмяФайла = ВыбФайл.Имя;
		Диалог.Каталог = ВыбФайл.Путь;
	Иначе
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.ПолноеИмяФайла= "СписокОтправителей.txt";
	КонецЕсли;
	
	Диалог.Заголовок = "Укажите файл со списком отправителей";
	Диалог.Фильтр = "Текстовые файлы (*.txt)|*.txt|Все файлы (*.*)|*.*";
	Диалог.Расширение = "txt";
	Если Диалог.Выбрать() Тогда
		Объект.ИмяФайлаОтправителей = Диалог.ПолноеИмяФайла;
		ПрочитатьСписокОтправителей();
		Возврат Истина;
	Иначе
		Сообщить("Файл не создан!");
		Возврат Ложь;
	КонецЕсли;			
	
КонецФункции

&НаСервере
Процедура ФормаОбработатьТекстСМС()
	ДлинаСМССимв =0;
	КоличествоСообщений =0;
	//ОбрОбъект = РеквизитФормыВЗначение("Объект");
	//ОбрОбъект.ОбработатьТекстСМС(ДлинаСМССимв,КоличествоСообщений);
	ОбработатьТекстСМС(ДлинаСМССимв,КоличествоСообщений);
	ЭтаФорма.Элементы.НадписьОписаниеТекста.Заголовок =  "Длина сообщения: " + ДлинаСМССимв + " симв., кол-во. сообщений: " + КоличествоСообщений;
КонецПроцедуры

&НаКлиенте
Процедура SMSTextПриИзменении(Элемент)
	ФормаОбработатьТекстСМС();
КонецПроцедуры

&НаКлиенте
Процедура УточнитьСтатус(Команда)	
	Статус=SMS_Статус(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass,Объект.SMSID);
КонецПроцедуры

//*************************************************************************************************************************
/////*********************************** из модуля объекта ****************************************************************
//*************************************************************************************************************************

///////////////////////////////////////////////////////
//Процедуры  обмена данными по HTTP
///////////////////////////////////////////////////////
&НаСервере
Функция SMS_Отправка(SMS_Server,SMS_User,SMS_Pass,SMS_To,SMS_From,SMS_Flash,SMS_Text) Экспорт
	
	ТекстОтвет = "";
	Ответ = "";                         
	Вернуть = "-1"; // SMS_ID - не удалось получить
	Отказ = Ложь;	
	SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	Попытка
		HTTPСоединение = Новый HTTPСоединение(SMS_Server,,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		ПараметрыЗапроса="";
		ПараметрыЗапроса = ПараметрыЗапроса + "&Login=" 		+ SMS_User;
		ПараметрыЗапроса = ПараметрыЗапроса + "&Password=" 		+ SMS_Pass;
		ПараметрыЗапроса = ПараметрыЗапроса + "&SourceAddress=" + SMS_From;		
		ПараметрыЗапроса = ПараметрыЗапроса + "&DestinationAddress=" 	+ SMS_To;		
		ПараметрыЗапроса = ПараметрыЗапроса + "&Data=" + SMS_Text_ToGo;
		//ПараметрыЗапроса = ПараметрыЗапроса + "&Validity=" + 0;
		HTTPЗапрос = Новый HTTPЗапрос("/v2/Sms/Send?"+ПараметрыЗапроса); 
		HTTPЗапрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded");
		Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвет = Ответ.ПолучитьТелоКакСтроку("UTF-8");
	Исключение
		Сообщить("Неудачная попытка");
		Сообщить(ОписаниеОшибки());
		//ОтправитьВТелеграмм("При отправки СМС на номер "+SMS_To+" с текстом : 
		//					|"+SMS_Text+". 
		//					|Вышла ошибка отправки запроса к поставщику коммуникационных услуг: 
		//					|"+ОписаниеОшибки());
		Возврат Вернуть;		
	КонецПопытки;
	
	Если Найти(ТекстОтвет, "{""Code"":") Тогда
		//ОтправитьВТелеграмм("При отправки СМС на номер "+SMS_To+" с текстом : 
		//					|"+SMS_Text+". 
		//					|Введены не верные данные: 
		//					|"+ТекстОтвет);
		Возврат Вернуть;
	КонецЕсли;
	
	ТекстОтвет = СтрЗаменить(СтрЗаменить(ТекстОтвет, "[""",""),"""]","");
	Вернуть = ТекстОтвет; // Выделение SMS_ID
	Возврат Вернуть;	
	
	
	
	
	
	//
	//Ответ = "";                         
	//Вернуть = "-1"; // SMS_ID - не удалось получить
	//
	//Отказ = Ложь;
	//ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass, Отказ);
	//
	//Если Отказ Тогда
	//	Возврат Вернуть;
	//КонецЕсли;
	//
	//SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	//
	//Адрес = "https://"+ SMS_Server + "/Sms/Send?";
	//ТекстОтвет = "";

	//ПараметрыЗапроса = "";
	//ПараметрыЗапроса = ПараметрыЗапроса + "sessionId=" 		+ SessionId;
	//ПараметрыЗапроса = ПараметрыЗапроса + "&destinationAddress=" 	+ SMS_To;
	//ПараметрыЗапроса = ПараметрыЗапроса + "&sourceAddress=" + SMS_From;
	//ПараметрыЗапроса = ПараметрыЗапроса + "&data=" + SMS_Text_ToGo;

	//Попытка
	//    ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
	//    ХМЛХТТП.Open("POST", Адрес, Ложь);
	//Исключение
	//	Сообщить("Неудачная попытка интернет-соединения.");
	//	Сообщить(ОписаниеОшибки());
	//	
	//	Возврат Вернуть;
	//КонецПопытки;
	//
	//ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	//ХМЛХТТП.Send(ПараметрыЗапроса);
	//ТекстОтвет = ХМЛХТТП.ResponseText();
	//Если Найти(ТекстОтвет, "{""Code"":") Тогда
	//	Сообщить("Сообщение не удалось отправить! 
	//	|" + ТекстОтвет);
	//	Возврат Вернуть;
	//КонецЕсли;
	//
	////Если Не Найти(ТекстОтвет, "SAR") Тогда
	//ТекстОтвет = СтрЗаменить(СтрЗаменить(ТекстОтвет, "[""",""),"""]","");
	//// Выделить SMS_ID и вернуть
	//Вернуть = ТекстОтвет; // Выделение SMS_ID
	//Сообщить("Сообщение успешно отправлено! ID: " + Вернуть);
	//Возврат Вернуть;
	////КонецЕсли;
	//
	
КонецФункции
//*******************************************
&НаСервере
Функция SMS_Пакетная_Отправка(SMS_Server,SMS_User,SMS_Pass,SMS_List,Num_To,SMS_From,SMS_Text) Экспорт
	
	Ответ = "";                         
	Вернуть = "-1"; // SMS_ID - не удалось получить
	
	Отказ = Ложь;
	ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass, Отказ);
	
	Если Отказ Тогда
		Возврат Вернуть;
	КонецЕсли;
	
	SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	
	Адрес = "https://"+ SMS_Server + "/Sms/SendBulk?";
	ТекстОтвет = "";

	ПараметрыЗапроса = "";
	ПараметрыЗапроса = ПараметрыЗапроса + "sessionId=" 		+ SessionId;
	ПараметрыЗапроса = ПараметрыЗапроса + "&sourceAddress=" + SMS_From;
	ПараметрыЗапроса = ПараметрыЗапроса + SMS_List;
	ПараметрыЗапроса = ПараметрыЗапроса + "&data=" + SMS_Text_ToGo;
	
    Попытка
        ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
        ХМЛХТТП.Open("POST", Адрес, Ложь);
	Исключение
		Сообщить("Неудачная попытка интернет-соединения.");
		Сообщить(ОписаниеОшибки());
		
		Возврат Вернуть;
	КонецПопытки;
	
	ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	ХМЛХТТП.Send(ПараметрыЗапроса);
	ТекстОтвет = ХМЛХТТП.ResponseText();
	Если Найти(ТекстОтвет, "{""Code"":") Тогда
		Сообщить("Сообщение не удалось отправить! 
		|" + ТекстОтвет);
		Возврат Вернуть;
	КонецЕсли;
	
	//Если Не Найти(ТекстОтвет, "SAR") Тогда
	ТекстОтвет = СтрЗаменить(СтрЗаменить(ТекстОтвет, "[""",""),"""]","")+""",";
	ТекстОтвет = СтрЗаменить(ТекстОтвет, """","");
	Вернуть = "Ок";
	//пакеты
	Пока Найти(ТекстОтвет, ",") Цикл
		Индекс = Найти(ТекстОтвет, ",");
		SMS_ID = Сред(ТекстОтвет, 1, Индекс-1);
		Сообщить("Сообщение с ID=" + Строка(SMS_ID) + " отправлено.");
		ТекстОтвет = Сред(ТекстОтвет, Индекс + 1);
	КонецЦикла;
		
	Возврат Вернуть;	
	
КонецФункции
//*******************************************
&НаСервере
Функция SMS_Отправка_Отложенная(SMS_Server,SMS_User,SMS_Pass,SMS_To,SMS_From,SMS_Flash,SMS_Text,SMS_Time) Экспорт
	
	Ответ = "";                         
	Вернуть = "-1"; // SMS_ID - не удалось получить
	
	Отказ = Ложь;
	ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass, Отказ);
	
	Если Отказ Тогда
		Возврат Вернуть;
	КонецЕсли;
	
	SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	SMS_Time1 = ОбработатьВремяСМСПередОтправкой(SMS_Time);
	
	Адрес = "https://"+ SMS_Server + "/Sms/SendByTimeZone?";
	ТекстОтвет = "";

	ПараметрыЗапроса = "";
	ПараметрыЗапроса = ПараметрыЗапроса + "sessionId=" 		+ SessionId;
	ПараметрыЗапроса = ПараметрыЗапроса + SMS_To;
	ПараметрыЗапроса = ПараметрыЗапроса + "&sourceAddress=" + SMS_From;
	ПараметрыЗапроса = ПараметрыЗапроса + "&data=" + SMS_Text_ToGo;
	ПараметрыЗапроса = ПараметрыЗапроса + "&sendDate=" + SMS_Time1;

	Попытка
		ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
		ХМЛХТТП.Open("POST", Адрес, Ложь);
	Исключение
		Сообщить("Неудачная попытка интернет-соединения.");
		Сообщить(ОписаниеОшибки());

		Возврат Вернуть;
	КонецПопытки;
	
	ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	ХМЛХТТП.Send(ПараметрыЗапроса);
	ТекстОтвет = ХМЛХТТП.ResponseText();
	Если Найти(ТекстОтвет, "{""Code"":") Тогда
		Сообщить("Сообщение не удалось отправить! 
		|" + ТекстОтвет);
		Возврат Вернуть;
	КонецЕсли;
	
	//Если Не Найти(ТекстОтвет, "SAR") Тогда
	ТекстОтвет = СтрЗаменить(СтрЗаменить(ТекстОтвет, "[""",""),"""]","");
	// Выделить SMS_ID и вернуть
	Вернуть = ТекстОтвет; // Выделение SMS_ID
	Сообщить("Сообщение успешно отправлено! ID: " + Вернуть);
	Возврат Вернуть;
	//КонецЕсли;
	
КонецФункции    
//******************************************* 
// Функция SMS_УзнатьБаланс возвращает:
//  При успешном выполнении операции - число кредитов на отправку SMS
//  При ошибке запроса_числа_кредитов возвращается строка вида "Result: Error_...." с кодом ошибки
//  При ошибке функции возврат: "Error"
&НаСервере
Функция SMS_УзнатьБаланс(SMS_Server,SMS_User,SMS_Pass) Экспорт
	
	Вернуть="Error";

	Отказ = Ложь;
	ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass,Отказ);
	
	Если Отказ Тогда
		Возврат Вернуть;
	КонецЕсли;
	
	Адрес = "https://"+ SMS_Server + "/User/Balance?";//ВидСервераИзАПИКлюча(АПИКлюч) + ".api.mailchimp.com/1.3/?method=templateAdd";
	ПараметрыЗапроса = "sessionId=" + SessionId;

	Попытка
		ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
	    ХМЛХТТП.Open("POST", Адрес, Ложь);
	    ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	    ХМЛХТТП.Send(ПараметрыЗапроса);
	    ТекстОтвет = ХМЛХТТП.ResponseText();
		
		//проверка через преобразование (возврат ошибки ввиде HTML, или строка баланса)
		А = Число(ТекстОтвет);
		Возврат ТекстОтвет;
		
    Исключение
        Сообщить("Ошибка отправки:");
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
	
	Возврат Вернуть;	
	
	
	//SMS_bal    = "1c_b.php"; // скрипт получения балланса           
	////SMS_bal    = "1c_b_test.php"; // скрипт получения балланса           
	//
	//Вернуть="Error";
	//ЗаголовкиЗапроса = "SMS_User:"+ SMS_User + Символы.ВК + Символы.ПС + 
	//"SMS_Pass:"+ SMS_Pass;
	//
	//// Получение ответа от сервера
	//Попытка 
	//	НТТР_клиент.Получить(SMS_bal,ИмяФайлаВходящее,ЗаголовкиЗапроса);  
	//Исключение
	//	Сообщить("Неудачная попытка интернет-соединения."); 
	//	Сообщить(ОписаниеОшибки());
	//	Возврат Вернуть;
	//КонецПопытки;
	//
	//Ответ = Новый ТекстовыйДокумент;
	//Ответ.Прочитать(ИмяФайлаВходящее);
	//
	//// Обработка ответа от сервера
	//Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	//
	//
	//// Обработка ответа от сервера
	//Если ((Кол_воСтрокОтвета=0) или (Кол_воСтрокОтвета>2)) Тогда
	//	Сообщить("Ошибка! Ответ от сервера не распознан!");
	//Иначе
	//	Строка1_Result  = Ответ.ПолучитьСтроку(1); // Проверить наличие Result: OK_Operation_Completed
	//	Строка2_Balance = СокрЛП(Ответ.ПолучитьСтроку(2)); // Balance: 98765
	//	Если (СтрДлина(Строка1_Result)<10) Тогда 
	//		Возврат Вернуть;
	//	КонецЕсли;
	//	
	//	// Если операция выполнена
	//	Если Строка1_Result="Result: OK_Operation_Completed" Тогда
	//		Вернуть = Сред(Строка2_Balance,9,130); // Выделение Balance
	//	Иначе
	//		Сообщить(Строка1_Result); // Выдать сообщение об ошибке 
	//		Вернуть = Строка1_Result; // Вернуть описание ошибки
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Вернуть;
КонецФункции
//*******************************************
&НаСервере
Функция SMS_Статус(SMS_Server,SMS_User,SMS_Pass,SMS_ID)  Экспорт// Получить результат отправки СМС
	
	Ответ="";
	Вернуть="-1";
	
	Отказ = Ложь;
	ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass,Отказ);
	
	Если Отказ Тогда
		Возврат Вернуть;
	КонецЕсли;
	
	Адрес = "https://"+ SMS_Server + "/Sms/State?";//ВидСервераИзАПИКлюча(АПИКлюч) + ".api.mailchimp.com/1.3/?method=templateAdd";
	ПараметрыЗапроса = "";
	ПараметрыЗапроса = ПараметрыЗапроса + "sessionId=" + SessionId;
	ПараметрыЗапроса = ПараметрыЗапроса + "&messageId=" + SMS_ID;
	
	Попытка
		ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
	    ХМЛХТТП.Open("POST", Адрес, Ложь);
	    ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	    ХМЛХТТП.Send(ПараметрыЗапроса);
	    ТекстОтвет = ХМЛХТТП.ResponseText();
		
		ТекстСтатусаГрязный = Сред(ТекстОтвет, Найти(ТекстОтвет, "StateDescription")+19);
		ТекстОтвет = Сред(ТекстСтатусаГрязный, 1, Найти(ТекстСтатусаГрязный, """,""")-1);
		
		Сообщить("Статус: " + ТекстОтвет);
		
		Возврат ТекстОтвет;
		
    Исключение
        Сообщить("Ошибка отправки:");
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
	
	Возврат Вернуть;	
	
	//SMS_info   = "1c_i.php"; // скрипт получения информации о СМС
	//
	//Ответ="";
	//Вернуть="-1";
	//
	//ЗаголовкиЗапроса = Новый Соответствие();
	//ЗаголовкиЗапроса.Вставить("SMS_User", SMS_User);
	//ЗаголовкиЗапроса.Вставить("SMS_Pass", SMS_Pass);
	//ЗаголовкиЗапроса.Вставить("SMS_ID", SMS_ID);
	//
	//// Получение ответа от сервера
	//Попытка 
	//	НТТР_клиент.Получить(SMS_info,ИмяФайлаВходящее,ЗаголовкиЗапроса);  
	//Исключение
	//	Сообщить("Неудачная попытка интернет-соединения."); 
	//	Сообщить(ОписаниеОшибки());
	//	Возврат Вернуть;
	//КонецПопытки;
	//
	//Ответ = Новый ТекстовыйДокумент;
	//Ответ.Прочитать(ИмяФайлаВходящее);
	//
	//// Обработка ответа от сервера
	//Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	//
	//// Обработка ответа от сервера
	//Если ((Кол_воСтрокОтвета=0) или (Кол_воСтрокОтвета>3)) Тогда
	//	Сообщить("Ошибка! Ответ от сервера не распознан!");
	//Иначе
	//	Строка1_Result  = Ответ.ПолучитьСтроку(1); // Проверить наличие Result: OK_Operation_Completed
	//	Строка2_Time    = Ответ.ПолучитьСтроку(2); // SMS_Time: 2008-06-02 13:31:24
	//	Строка3_Status  = Ответ.ПолучитьСтроку(3); // SMS_Status: Delivered_To_Gateway
	//	
	//	Если Строка1_Result="Result: OK_Operation_Completed" Тогда
	//		Вернуть = Сред(Строка3_Status,12,130); // Выделение SMS_Status
	//		Предупреждение("Время сообщения: " + Строка2_Time + " статус: " + Строка3_Status); 
	//	Иначе
	//		Предупреждение("Не удалось получить статус. " + Строка1_Result); 
	//	КонецЕсли;
	//КонецЕсли;
	//Возврат Вернуть;
КонецФункции

&НаСервере
Процедура ПолучитьSessionId(SMS_Server,SMS_User,SMS_Pass, Отказ)
	
	//новый запрос
    Адрес = "https://"+ SMS_Server + "/User/SessionId?";
    ТекстОтвет = "";

    ПараметрыЗапроса = "";
	ПараметрыЗапроса = ПараметрыЗапроса + "login=" 		+ SMS_User;
    ПараметрыЗапроса = ПараметрыЗапроса + "&password=" 	+ SMS_Pass;

    Попытка
        ХМЛХТТП = ПолучитьCOMОбъект("", "MSXML2.XMLHTTP");
        ХМЛХТТП.Open("POST", Адрес, Ложь);
        ХМЛХТТП.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        ХМЛХТТП.Send(ПараметрыЗапроса);
        ТекстОтвет = ХМЛХТТП.ResponseText();
		
		Если СтрДлина(ТекстОтвет) = 38 Тогда
			SessionId = Сред(ТекстОтвет,2,36);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Исключение
		Отказ = Истина;
	КонецПопытки;	
	
КонецПроцедуры


///////////////////////////////////////////////////////
//Общие процедуры
///////////////////////////////////////////////////////

&НаСервере
Функция Отправка(Отложить) Экспорт
	Если НЕ ПроверитьНомерТелефона(Объект.SMSTo) Тогда Возврат ""; КонецЕсли;
	SMSFlash  	=  0;
	Если Отложить = 0 Тогда
		Объект.SMSID=SMS_Отправка(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass,Объект.SMSTo,Объект.SMSFrom,SMSFlash,Объект.SMSText);
	Иначе
		Объект.SMSID=SMS_Отправка_Отложенная(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass,"&destinationAddress="+Объект.SMSTo,Объект.SMSFrom,SMSFlash,Объект.SMSText,Объект.SMSTimeTest)
	КонецЕсли;
	Возврат Объект.SMSID;
КонецФункции
&НаСервере
Функция МассоваяОтправка(Отложить) Экспорт
//	Если НЕ ПроверитьВозможностьОтправки() Тогда Возврат ""; КонецЕсли;

	//Максимальное количество получателей в одном пакете массовой рассылки
	МаксКолНомеровЗаРаз = 200;
	SMSFlash  	=  0;
    SMSList="";	
	ВыбСтроки = Объект.ТаблицаКонтактов.НайтиСтроки(Новый Структура("Флаг",Истина)); 
	КолСтрок = ВыбСтроки.Количество();
    КолЦелыхПакетов = Цел(КолСтрок/МаксКолНомеровЗаРаз);
	КолПакетов =  ?(КолЦелыхПакетов<(КолСтрок/МаксКолНомеровЗаРаз),КолЦелыхПакетов+1,КолЦелыхПакетов);
    КолНомеровПоследнегоПакета = КолСтрок - (КолЦелыхПакетов*МаксКолНомеровЗаРаз);
	
	Для НомерПакета = 1 По КолПакетов Цикл
		Num_From = МаксКолНомеровЗаРаз*(НомерПакета-1)+1;
		Num_To   = ?(Num_From+МаксКолНомеровЗаРаз-1>КолСтрок,Num_From+КолНомеровПоследнегоПакета-1,Num_From+МаксКолНомеровЗаРаз-1);
		NumTo = Num_To-Num_From+1;
		СформироватьСписокНомеровПоМассиву(ВыбСтроки, Num_From, Num_To, SMSList);
		Сообщить("Начало отправки "+ НомерПакета + " пакета из " + КолПакетов);
		Если Отложить = 0 Тогда
			SMS_Пакетная_Отправка(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass,SMSList,NumTo,Объект.SMSFrom,Объект.SMSText);
		Иначе
			Объект.SMSID=SMS_Отправка_Отложенная(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass,SMSList,Объект.SMSFrom,SMSFlash,Объект.SMSText,Объект.SMSTime)
		КонецЕсли; 
		Сообщить("Завершена отправка "+ НомерПакета + " пакета!");
	КонецЦикла;
	
	Возврат Объект.SMSID;
КонецФункции
&НаСервере
Процедура ЗаполнитьИзРегистраКИ() Экспорт
	
	Попытка	
		Запрос=Новый Запрос;
		ДопСтрокаОтборов = "";
		
		Отбор = Объект.ПостроительОтбора.Отбор;
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			н = Отбор.Индекс(ЭлементОтбора)+1;
			СтрокаЗначения   = "Значение"   + Формат(н, "ЧГ=");
			СтрокаЗначенияС  = "ЗначениеС"  + Формат(н, "ЧГ=");
			СтрокаЗначенияПо = "ЗначениеПо" + Формат(н, "ЧГ=");
			
			ДопСтрокаОтборов = ДопСтрокаОтборов+ " И "  + ПолучитьСтрокуОтбора(ЭлементОтбора.ВидСравнения, "&"+СтрокаЗначения, ЭлементОтбора.ПутьКДанным, "&"+СтрокаЗначенияС, "&"+СтрокаЗначенияПо);
			
			Запрос.УстановитьПараметр(СтрокаЗначения,   ЭлементОтбора.Значение);
			Запрос.УстановитьПараметр(СтрокаЗначенияС,  ЭлементОтбора.ЗначениеС);
			Запрос.УстановитьПараметр(СтрокаЗначенияПо, ЭлементОтбора.ЗначениеПо);
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.Комментарий,
		|	ИСТИНА КАК Флаг
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)"+ДопСтрокаОтборов;	
		Результат = Запрос.Выполнить();
		ТЗ = Результат.Выгрузить();
		Если ТЗ.Количество() = 0 Тогда
			Сообщить("Не найдена контактная информация с данными настройками отбора!",СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		Объект.ТаблицаКонтактов.Загрузить(ТЗ);
	Исключение
		Сообщить("Не удалось прочитать данные из регистра 'Контактная информация'");
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзРегистраКИ_СКД() Экспорт
	
	Попытка
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Настройки = Объект.КомпоновщикНастроек.ПолучитьНастройки();
		
		//ПользовательскиеНастройки = Объект.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		ТекОбъект = РеквизитФормыВЗначение("Объект");
    	СКД = ТекОбъект.ПолучитьМакет("СКД");
		//Настройки1 = СКД.ВариантыНастроек.Основной.Настройки;
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки, ,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений") );
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , );
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ТЗ=ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		Объект.ТаблицаКонтактов.Загрузить(ТЗ);
	Исключение
		Сообщить("Не удалось прочитать данные из регистра 'Контактная информация'");
	КонецПопытки;
	
КонецПроцедуры




&НаСервере
// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВыбВидСравнения       - ВидСравнения
// ЗначениеОтбора        - Значение отбора запроса
// СтрокаАргументаОтбора - Строка, Аргумент запроса, т.е. то что должно быть написано до вида сревнения
// ЗначениеОтбораНач     - Произвольный, значение отбора для видов сравнения, у которых необходимо указывать два значения, начальное значение
// ЗначениеОтбораКон     - Произвольный, значение отбора для видов сравнения, у которых необходимо указывать два значения, конечное значение
// 
// Возвращаемое значение 
//  Строка для запроса
//
Функция ПолучитьСтрокуОтбора(ВыбВидСравнения, ЗначениеОтбора, СтрокаПоляОтбора, ЗначениеОтбораС = Неопределено, ЗначениеОтбораПо = Неопределено, СамоЗначение = Неопределено, СамоЗначениеС = Неопределено, СамоЗначениеПо = Неопределено) Экспорт

	СтрокаВозврата = "";
	Если ВыбВидСравнения = ВидСравнения.Равно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" = " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" <> " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ВСпискеПоИерархии ИЛИ ВыбВидСравнения = ВидСравнения.ВИерархии Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.НеВСпискеПоИерархии ИЛИ ВыбВидСравнения = ВидСравнения.НеВИерархии Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Больше Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Меньше Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбора);
		КонецЕсли; 
	ИначеЕсли ВыбВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбора);
		КонецЕсли; 
	ИначеЕсли ВыбВидСравнения = ВидСравнения.Интервал Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяНачало Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	ИначеЕсли ВыбВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		Если ТипЗнч(СамоЗначениеПо) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначениеПо) Тогда
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + ")";
		Иначе
			СтрокаВозврата = "(" + СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбораС) + " И " + СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбораПо) + ")";
		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаВозврата;
	
КонецФункции // ПолучитьСтрокуОтбора()

&НаСервере
Процедура СформироватьСписокНомеровПоМассиву(Строки,Num_From,Num_To,SMS_List) Экспорт
	Разделитель = "";
	SMS_List = "";
	Для НомерСтроки = Num_From ПО Num_To  Цикл
		SMS_List = SMS_List + Разделитель + "&destinationAddresses="+Строки[НомерСтроки-1].НомерАбонента;
		//Разделитель = ",";
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция	ПроверитьНомерТелефона(Строка)  Экспорт
	Результат = ПреобразоватьНомерТелефона(Строка);
	Если Результат = "" Тогда
		Сообщить("Недопустимый номер абонента!");
		Возврат Ложь;
	Иначе
		Строка = Результат;
		Возврат Истина;
	КонецЕсли;
КонецФункции	

&НаСервере
Функция ПреобразоватьНомерТелефона(Строка) Экспорт
	//Убираем все кроме цифр
	ДлинаСтроки = СтрДлина(Строка);
	НоваяСтрока ="";
	Для Ном=1 По ДлинаСтроки Цикл
		Код = КодСимвола(Строка,Ном); 
		Если (Код >= 48) И (Код <= 57) Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код); 
		КонецЕсли;  
	КонецЦикла;  
	
	//Проверяем длину
	
	Если СтрДлина(НоваяСтрока) = 10 И Лев(НоваяСтрока,1) = "9" Тогда
		НоваяСтрока = "7" + НоваяСтрока; 
	КонецЕсли;
	
	Если СтрДлина(НоваяСтрока) <> 11 Тогда
		Возврат "";
	КонецЕсли;
	
	//Проверяем 8
	Если КодСимвола(НоваяСтрока,1) = 56 Тогда
		НоваяСтрока = "7" + Прав(НоваяСтрока,10);
	КонецЕсли;
	
	//Проверяем 79
	Если Лев(НоваяСтрока,2) <> "77" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат  НоваяСтрока;
КонецФункции

&НаКлиенте
Процедура ПереходВЛичныйКабинет() Экспорт
	
	ЗапуститьПриложение("https://my.devinotele.com/Account/LogOn?login="+Объект.SMSUser+"&Password="+Объект.SMSPass+"&x=0&y=0");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВРегистрацию() Экспорт
	
	ЗапуститьПриложение("https://my.devinotele.com/Account/Register");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВЗабылиПароль() Экспорт
	
	ЗапуститьПриложение("https://my.devinotele.com/Account/RestorePassword");
	
КонецПроцедуры


&НаКлиенте
Функция ПроверитьНаименованиеОтправителя(Sender) Экспорт
		
	Длина = СтрДлина(Sender);

	Для Ном=1 По Длина Цикл
		Код = КодСимвола(Sender,Ном);
		Если ((Код >= 1040) И (Код <= 1071)) ИЛИ ((Код >= 1072) И (Код <= 1111)) ИЛИ ((Код >= 1028) И (Код <= 1131)) Тогда
			Предупреждение("Имя отправителя необходимо ввести латинскими символами!");
			Возврат Ложь;
		КонецЕсли;  
	КонецЦикла;  
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ОбработатьТекстСМС(ДлинаСМССимв,КоличествоСообщений) Экспорт
	Кирилица=Ложь;	
	ДлинаСМССимв = СтрДлина(Объект.SMSText);
	
	Для Ном=1 По ДлинаСМССимв Цикл
		Код = КодСимвола(Объект.SMSText,Ном);
		Если ((Код >= 1040) И (Код <= 1071)) ИЛИ ((Код >= 1072) И (Код <= 1111)) ИЛИ ((Код >= 1028) И (Код <= 1131)) Тогда
			Кирилица = Истина;
			Прервать;
		КонецЕсли;  
	КонецЦикла;  
	
	Если Кирилица Тогда  //Кирилица
		//ДлинаСМСБайт = ДлинаСМССимв*2;
		
		Если ДлинаСМССимв > 70 Тогда
			КоличествоСообщений = Цел((ДлинаСМССимв-1)/67)+1; 
		Иначе
			КоличествоСообщений = 1;
		КонецЕсли;
	Иначе               //Латиница
		//ДлинаСМСБайт = ДлинаСМССимв;
		
		Если ДлинаСМССимв > 160 Тогда
			КоличествоСообщений = Цел((ДлинаСМССимв-1)/153)+1; 
		Иначе
			КоличествоСообщений = 1;
		КонецЕсли;	 
	КонецЕсли;	
	
	Если ДлинаСМССимв = 0 Тогда  КоличествоСообщений = 0 КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьТекстСМСПередОтправкой(Text) Экспорт
	Text1 = Text;
	CrLf = Символ(13) + Символ(10);
	
	// Подготовка текста SMS к отправке - преобразование к HTML форме
	Text1=СтрЗаменить(Text1,"&"     ,"%26" ); // Обработка  &
	Text1=СтрЗаменить(Text1,"<"     ,"%3C"  ); // Обработка  <
	Text1=СтрЗаменить(Text1,">"     ,"%3E"  ); // Обработка  >
	Text1=СтрЗаменить(Text1,Символы.ПС    ,"%0A"  ); // Обработка символов переноса
	Возврат  Text1;            
КонецФункции	

&НаСервере
Функция ОбработатьВремяСМСПередОтправкой(Time) Экспорт
	Time1 = Формат(Time, "ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""");
	Возврат  Time1;
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьОтправки() Экспорт
	
	ВыбСтроки = Объект.ТаблицаКонтактов.НайтиСтроки(Новый Структура("Флаг",Истина)); 
	КолАбонентов = ВыбСтроки.Количество();
	Баланс = ПолучитьБаланс();
	
	Попытка
		БалансЧисло = Число(Баланс);
	Исключение
		Сообщить("Не удалось получить информацию о балансе. Отправка невозможна!");
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	КоличествоСообщений=0;
	ДлинаСМССимв=0;
	ОбработатьТекстСМС(ДлинаСМССимв,КоличествоСообщений); 
	КолСМС = КоличествоСообщений*КолАбонентов;
	
	Если КоличествоСообщений = 0 Тогда  //если нет текста
		Сообщить("Не введен текст сообщения! Отправка невозможна.");
		Возврат Ложь;
	КонецЕсли;	
	
	Если КолАбонентов = 0  Тогда  //если  нет абонентов
		Сообщить("Не введен список получателей! Отправка невозможна.");
		Возврат Ложь;
	КонецЕсли;
	
	Разность = БалансЧисло - КолСМС;
	Если Разность < 0 Тогда
		Сообщить("Требуется отправить " + КолСМС + " сообщений. Не хватает " + Разность + " кредитов. Отправка невозможна.");
		Возврат Ложь;
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Требуется отправить " + КолСМС + " сообщений. После отправки ваш остаток составит " + Разность + " кредитов." + Символы.ПС + "Начать отправку сообщений?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция ПолучитьБаланс() Экспорт
	Баланс = SMS_УзнатьБаланс(Объект.SMSServer,Объект.SMSUser,Объект.SMSPass);
	Возврат  Баланс;
КонецФункции

&НаКлиенте
Процедура СохранитьБазу() Экспорт
	
	// Сохранение списка телефонов в файл
	
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда  Объект.ИмяФайла = "" КонецЕсли;
	Если ПустаяСтрока(Объект.ИмяПути) Тогда  Объект.ИмяПути = "" КонецЕсли;
	
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = Объект.ИмяФайла;
	Диалог.Каталог = Объект.ИмяПути;
	Диалог.Заголовок = "Укажите файл для сохранения базы абонентов";
	Диалог.Фильтр = "Файлы Excel (*.xls)|*.xls|Все файлы (*.*)|*.*";
	Диалог.Расширение = "xls";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		ИмяПути = Диалог.Каталог;
		Попытка	
			Эксель =  Новый COMОбъект("Excel.Application"); 
		Исключение
			Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!"); 
			Возврат;
		КонецПопытки; 
		
		Книга = Эксель.WorkBooks.Add(); 
		Лист = Книга.WorkSheets(1); 
		Ном = 1;
		Для каждого Строка Из Объект.ТаблицаКонтактов Цикл
			Если Строка.Флаг = Истина Тогда
				Лист.Cells(Ном, 1).Value = Строка.НомерАбонента;
				Попытка
					Лист.Cells(Ном, 2).Value = Строка.Объект.Наименование;
				Исключение
					Попытка 
						Лист.Cells(Ном, 2).Value = Строка.Объект;
					Исключение
						Сообщить("Не удалось записать имя абонента в строке " + Строка.Индекс);
					КонецПопытки; 
				КонецПопытки; 
				Ном = Ном+1;
			КонецЕсли; 
		КонецЦикла;	
		
		Попытка
			Книга.SaveAs(ИмяФайла); 
		Исключение
			Сообщить(ОписаниеОшибки()+" Файл не сохранен!"); 
			Возврат;
		КонецПопытки; 
		Эксель.Quit();
	Иначе
		Сообщить("Файл не выбран! Сохранение не произведено.");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьБазу() Экспорт
	// Чтение списка телефонов из файла
	
	Если Объект.ТаблицаКонтактов.Количество()>0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос("Очистить таблицу контактов перед загрузкой?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.ТаблицаКонтактов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайла) Тогда  Объект.ИмяФайла = "" КонецЕсли;
	Если ПустаяСтрока(Объект.ИмяПути) Тогда  Объект.ИмяПути = "" КонецЕсли;
	
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = Объект.ИмяФайла;
	Диалог.Каталог = Объект.ИмяПути;
	Диалог.Заголовок = "Укажите файл базы абонентов";
	Диалог.Фильтр = "Файлы Excel (*.xls;*.xlsx)|*.xls;*.xlsx|Все файлы (*.*)|*.*";
	Диалог.Расширение = "xls";
	Если Диалог.Выбрать() Тогда
		Объект.ИмяФайла = Диалог.ПолноеИмяФайла;
		Объект.ИмяПути = Диалог.Каталог;
		Попытка	
			Эксель =  Новый COMОбъект("Excel.Application"); 
		Исключение
			Сообщить(ОписаниеОшибки() + " Программа Exсel не установлена на данном компьютере!"); 
			Возврат;
		КонецПопытки; 
		
		Попытка 
			Книга = Эксель.WorkBooks.Open(Объект.ИмяФайла); 
			Лист = Книга.WorkSheets(1); 
			КолСтрок = Лист.Cells(1,1).SpecialCells(11).Row;
			Для Ном=Объект.НомерПервойСтрокиАдресата По КолСтрок Цикл 
				Если НЕ (Лист.Cells(Ном, Объект.НомерКолонкиТелефона).Value = "") Тогда
					НоваяСтрока = Объект.ТаблицаКонтактов.Добавить();
					НоваяСтрока.Представление = СтрЗаменить(Лист.Cells(Ном, Объект.НомерКолонкиТелефона).Value,Символы.НПП,"");
					НоваяСтрока.Объект = Лист.Cells(Ном, Объект.НомерКолонкиИмениАдресата).Value;
					НоваяСтрока.Флаг = Истина;
				КонецЕсли; 
			КонецЦикла;
					
			Эксель.Quit();
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;	
	Иначе
		Сообщить("Файл не выбран! Чтение не произведено.");		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПараметрыЗагрузки()Экспорт
	//ФормаНастройки = ЭтотОбъект.ПолучитьФорму("ФормаНастройкаЗагрузки");
	//ФормаНастройки.ОткрытьМодально();
	Форма = ПолучитьФорму("ВнешняяОбработка.РассылкаСообщенийИнфосвязь.Форма.ФормаНастройкиУФ");
	Форма.ОткрытьМодально();
КонецПроцедуры	

&НаКлиенте
Процедура ЛичныйКабинетНажатие(Элемент)
	ПереходВЛичныйКабинет();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБаланс(Команда)
	Баланс = ПолучитьБаланс();
	Попытка
		ЭтаФорма.Элементы.Баланс.Заголовок = "Баланс: " + Число(Баланс);
	Исключение
		ЭтаФорма.Элементы.Баланс.Заголовок = "Баланс: " + Баланс;
	КонецПопытки	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияНажатие(Элемент)
	ПереходВРегистрацию();
КонецПроцедуры

&НаКлиенте
Процедура ЗабылиПарольНажатие(Элемент)
	ПереходВЗабылиПароль();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнфоОтправки()
	ВыбСтроки = Объект.ТаблицаКонтактов.НайтиСтроки(Новый Структура("Флаг",Истина)); 
	КолСтрок = ВыбСтроки.Количество();
	ЭтаФорма.Элементы.НадписьИнфоОтправка.Заголовок = "Всего к отправке: " + КолСтрок + " абонентов ";
	Если КолСтрок = 0  Тогда  //если  нет абонентов
		Текст = "Для осуществления массовой рассылки заполните список получателей на закладке 'База абонентов'";
	Иначе
		
		Текст = "Список получателей заполнен и содержит номеров: " + КолСтрок + ". Для осуществления массовой рассылки нажмите 'Отправить'";
	КонецЕсли;
	ЭтаФорма.Элементы.НадписьИнфоМассоваяРассылка.Заголовок = Текст;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьКомпоновщикОтбор();
	ОбновитьИнфоОтправки();
	Если  Объект.НомерКолонкиТелефона = 0 Тогда Объект.НомерКолонкиТелефона = 1 КонецЕсли;
	Если  Объект.НомерКолонкиИмениАдресата = 0 Тогда Объект.НомерКолонкиИмениАдресата = 2 КонецЕсли;
    Если  Объект.НомерПервойСтрокиАдресата = 0 Тогда Объект.НомерПервойСтрокиАдресата  = 1 КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомпоновщикОтбор()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
    СКД = ТекОбъект.ПолучитьМакет("СКД"); 
    
	//ТекстЗапроса = СформироватьТекстЗапроса();
    
	//НаборДанных = СКД.НаборыДанных.Найти("НаборДанных1");
	////НаборДанных.Запрос = ТекстЗапроса;
	//НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
    
	//Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));//в отладке доступные поля отбора есть, но при возвращение на клиент они отсутствуют
	
	URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	Объект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
	
	Объект.КомпоновщикНастроек.ЗагрузитьНастройки(СКД.ВариантыНастроек.Основной.Настройки);
		
КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаКонтактовОчистить(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Вы уверены, что хотите очистить таблицу контактов?", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаКонтактов.Очистить();
		ОбновитьИнфоОтправки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактовФлагПриИзменении(Элемент)
	ОбновитьИнфоОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьНомераТелефонов()
	
	Для Каждого Строка Из Объект.ТаблицаКонтактов Цикл   //Убираем из номера телефона лишние знаки
		Попытка
			Строка.НомерАбонента = ПреобразоватьНомерТелефона(Строка.Представление);
			Если Строка.НомерАбонента = "" Тогда Строка.Флаг = Ложь; КонецЕсли;
			ОбновитьИнфоОтправки()
		Исключение
			Сообщить("Не обработан номер " + Строка.Представление + " в строке " + Строка.Индекс);
			Сообщить(ОписаниеОшибки());	       
		КонецПопытки;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтактов_ОбработатьНомера(Команда)
	ПреобразоватьНомераТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтактов_ИзКИ(Команда)
	ЗаполнитьИзРегистраКИ_СКД();
	ПреобразоватьНомераТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	//ВвестиПараметрыЗагрузки();	
	ЗагрузитьБазу();	
	ПреобразоватьНомераТелефонов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомпоновкиОтборПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ф=1;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомпоновкиОтборПравоеЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	а=1;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомпоновкиОтборПравоеЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Партнеры") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ,Элемент);
	//ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.КонтактныеЛица.ФормаВыбора", ,Элемент);	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Контрагенты") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ,Элемент);	
	//ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ЛичныеКонтакты") Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ОткрытьФорму("Справочник.ЛичныеКонтакты.ФормаВыбора", ,Элемент);	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ,Элемент);	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ,Элемент);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомпоновкиОтборПравоеЗначениеПриИзменении(Элемент)
	ф=1;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомпоновкиОтборПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ф=1;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	СохранитьБазу();
КонецПроцедуры

&НаКлиенте
Процедура СписокОтправителейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСписокВыбораОтправителя();
КонецПроцедуры

&НаСервере
Процедура ТестНаСервере()
	Тел = "77759259468";
	Сообщение = "Тест";
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОтправитьСМССообщениеПоНомеру(Тел, Сообщение); 
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	ТестНаСервере();
КонецПроцедуры



Если  Объект.SMSServer = "" Тогда
	Объект.SMSServer		= "integrationapi.net/rest";
	//SMSServer		= "integration.api.sc/1c";
	//SMSFrom        = "StreamSMS"; // Адрес отправителя
КонецЕсли;
Попытка
	НТТР_клиент     = Новый HTTPСоединение(Объект.SMSServer,, Объект.SMSUser, Объект.SMSPass);
Исключение
	Сообщить("Соединение с текущими параметрами не установлено!");
	Сообщить(ОписаниеОшибки());
КонецПопытки;


ИмяФайлаВходящее = КаталогВременныхФайлов()+"SMSInput.txt";
ИмяФайлаИсходящее = КаталогВременныхФайлов()+"SMSOutput.txt";
#КонецЕсли

