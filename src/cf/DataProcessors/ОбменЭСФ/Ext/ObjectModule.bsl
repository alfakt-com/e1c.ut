// Текст модуля одинаковый в:
// - Обработка.ОбменЭСФ.МодульОбъекта,
// - Обработка.ОбменЭСФ.Форма.КлиентОбычная,
// - Обработка.ОбменЭСФ.Форма.КлиентУправляемая.
// При изменении в одном месте необходимо внести их в другие места.


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2;
Перем КэшированнаяФабрикаInvoiceInfo_Версия2;

Перем КэшированнаяФабрикаUFORM_XML_API_ЭЦП_Версия1;
Перем КэшированнаяФабрика_queryBalanceUpdates_V1;

Перем КэшированнаяФабрикаАВР_XML_API_ЭЦП_Версия2;
Перем КэшированнаяФабрикаAwpInfo_Версия1;

////////////////////////////////////////////////////////////////////////////////
// КРИПТОГРАФИЯ. НАЧАЛО.

// Текст криптографии одинаковый в:
// - Обработка.ОбменЭСФ.МодульОбъекта,
// - Обработка.ОбменЭСФ.Форма.КлиентОбычная,
// - Обработка.ОбменЭСФ.Форма.КлиентУправляемая.
// При изменении в одном месте необходимо внести их в другие места.

#Область Криптография

Перем ВерсияБЭСФ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

Функция УдалосьПодключитьКриптопровайдерНаСервере(Версия = "", РежимТишины = Ложь) Экспорт
	
	Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);
			       		
	Возврат Подключается;	
	
КонецФункции

Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	КонецЕсли;	
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);				
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента
Функция АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Константы.ЭСФВнешнийМодуль.Получить().Получить(), УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
КонецФункции

Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ОписаниеОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//  Ключ - Строка - Ключевой контейнер PKCS#12 в кодировке Base64.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера PKCS#12.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();		
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  Криптопровайдер - Криптопровайдер, по которому определяется строка подписи ЭЦП
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
Функция СоздатьЭЦПДляПакета(Криптопровайдер, Знач СтрокаДляПодписи) Экспорт
	
	Попытка
		
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает тип ключа (ГОСТ или RSA) файла PKCS#12.
//
// Параметры:
//  КлючBase64 - Строка - Ключевой контейнер в Base64, тип ключа которого необходимо определить.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера.
//
// Возвращаемое значение:
//  Строка - Тип ключа. См. КлючGOST(), КлючRSA().
//   Если не удалось определить тип ключа, то возвращается пустая строка.
//
Функция ТипКлюча(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт
	
	СвойстваСертификата = СвойстваСертификата(КлючBase64, ПарольОтКлюча);	
	ТипКлюча = СвойстваСертификата.ТипКлюча;	
	Возврат ТипКлюча;
	
КонецФункции

// Возвращает сертификат открытого ключа в виде строки Base64.
//
// Параметры:
//  КлючBase64 - Строка - Файл PKCS#12 содержащий сертификат открытого ключа, в кодировке P12.
//  Пароль - Строка - Пароль к файлу PKCS#12 содержащему сертификат открытого ключа.
//
// Возвращаемое значение:
//  Строка - Сертификат открытого ключа в формате Base64.
//
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач ПарольКлюча) Экспорт
		
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		Сертификат = Криптопровайдер.ПолучитьСертификат(ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64());
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось выполнить действие.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	СертификатBase64 = "";
	
	Для Счетчик = 1 По СтрЧислоСтрок(Сертификат) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(Сертификат, Счетчик);
		Если Найти(ТекущаяСтрока, " CERTIFICATE-----") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		СертификатBase64 = СертификатBase64 + СокрЛП(СтрПолучитьСтроку(Сертификат, Счетчик));
	КонецЦикла;
	
	СертификатBase64 = СокрЛП(СертификатBase64);
	
	Возврат СертификатBase64;
			
КонецФункции

// Возвращает свойства сертификата, извлеченные из файла *.p12.
// При выполнении происходит обращение к серверу.
//
// Параметры:
//  КлючBase64 - Строка - Файл P12 в кодировке Base64.
//  ПарольОтКлюча - Строка - Пароль от файла P12.
//
// Возвращаемое значение:
//  Структура - Свойства сертификата.
//   |- Ключ - Строка - Имя свойства сертификата.
//   |- Значение - Строка - Значение свойства сертификата.
//  Содержит все свойства из НоваяКоллекцияИдентификаторовСвойствСертификата().
//  Если какого-нибудь свойства не было в сертификате, то его значением будет пустая строка.
//
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

#Область ПримитивныеКонстанты

Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

Функция ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64() Экспорт
	Возврат 1;	
КонецФункции

Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

// не имеет директив
Функция ИмяКомпонентыКриптографии() Экспорт
	
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс") + ЭСФВызовСервераПовтИсп.ПолучитьЭСФВерсияВнешнегоМодуля();
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "CryptoAPI" + УникальныйНомерКомпоненты;
	
КонецФункции

// не имеет директив
Функция ИмяОбъектаКриптографии() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографии() + ".Crypto";	
КонецФункции

Функция ПолноеИмяФормыУстановкаКриптографии() Экспорт
	Возврат "Обработка.ОбменЭСФ.Форма.УстановкаКриптографии";	
КонецФункции

Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

#КонецОбласти

#Область Сертификат

Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

Функция НовыеСвойстваСертификата() 
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОшибкиКриптографии

Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОТОРЫЕ НУЖНО ВЫПОЛНЯТЬ ОБЯЗАТЕЛЬНО НА СЕРВЕРЕ

#Область СерверныеПроцедурыИФункции

Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

#КонецОбласти



#Область МодульОбновленияКриптографии

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОНЛАЙН-ОБНОВЛЕНИЯ МОДУЛЯ

// Процедуры c директивой //&НаКлиентеНаСервереБезКонтекста в модуле обычной формы
// объявляются БЕЗ ДИРЕКТИВ

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбновитьМодульКриптографии(ПараметрыАвторизации, ВыполняемоеОповещение = Неопределено, ТихийРежим = Ложь) Экспорт

	Состояние("Подождите, пожалуйста...", ,
		"Производится проверка наличия обновлений модуля криптографии...");
		
	ШапкаОшибки = НСтр("ru = 'Ошибка обновления модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ПараметрыСервераИнтернета = ПолучитьПараметрыИнтернета(ПараметрыАвторизации);
	
	Если ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) = Ложь Тогда 
		// обновление не требуется, завершаем процесс
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	Иначе
		
		// Добавим к параметрым версию модуля
		ПараметрыСервераИнтернета.ДополнительныеПараметры.Вставить("Версия", СвойстваМодуляДляТекущегоРелиза.Версия);
			
		Если НЕ ТихийРежим Тогда
			
			Состояние("Подождите, пожалуйста...", , "Обнаружена новая версия модуля", БиблиотекаКартинок.ДлительнаяОперация48);
			ДатаВыпускаМодуля = ЭСФКлиентСервер.ДатаПоСтроке(СвойстваМодуляДляТекущегоРелиза.Дата);
			// запрашиваем подтверждение на закачку нового модуля
			ТекстВопроса = "В Интернете доступно обновление библиотеки криптографии.
				|
				|Новый модуль: версия " + СвойстваМодуляДляТекущегоРелиза.Версия;
			Если ЗначениеЗаполнено(ДатаВыпускаМодуля) Тогда
				ТекстВопроса = ТекстВопроса + " от " + Формат(ДатаВыпускаМодуля, "ДЛФ=DD");
			Иначе
				ТекстВопроса = ТекстВопроса + ".";
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + "
				|
				|Обновить модуль сейчас (рекомендуется)?";
				
			
			// Выполним обработку
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьМодульКриптографииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза);
			
			ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ШапкаОшибки = ДополнительныеПараметры.ШапкаОшибки;
	ПараметрыСервераИнтернета = ДополнительныеПараметры.ПараметрыСервераИнтернета;
	
	//СвойстваМодуляДляТекущегоРелиза - Возвращаемое значение по результатам обновления
	СвойстваМодуляДляТекущегоРелиза = ДополнительныеПараметры.СвойстваМодуляДляТекущегоРелиза;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// закачиваем, кэшируем и включаем признак использования внешнего модуля		
		Состояние("Подождите, пожалуйста...", , "Производится получение новой версии модуля...", БиблиотекаКартинок.ДлительнаяОперация48);
		Результат = ЗакачатьИВключитьПризнакИспользования(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки);
		Если Результат Тогда			
			Оповестить("ОбновленМодульКриптографии");
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
	Иначе
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьПараметрыИнтернета(СтруктураДополнительныхПараметров) Экспорт
	
	ПараметрыСервераИнтернета = Новый Структура("URLСервера,Порт, КаталогФайловНаСервере, ИмяКлючевогоФайлаНаСервере, Логин, Пароль, Прокси, ДополнительныеПараметры");
	
	ПараметрыСервераИнтернета.URLСервера = АдресРесурсаИТС();	
	ПараметрыСервераИнтернета.Прокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
		
	// аутентификация пользователя	
	ПараметрыСервераИнтернета.ДополнительныеПараметры = СтруктураДополнительныхПараметров;
		
	Возврат ПараметрыСервераИнтернета;	
КонецФункции

#КонецОбласти

#Область СервисыИТС

// Выполняет метод веб-сервиса ИТС.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
//&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьМетодВебСервисаИТС(Знач ТекстМетода, Знач ИмяВебСервиса) Экспорт
		
	HTTPСоединение = Новый HTTPСоединение(
			АдресРесурсаИТС(), 
			, 
			, 
			, 
			ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ(), 
			,			
			);
		
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса	= ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
		
	ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ПолучитьСсылкуНаСкачиваниеБиблиотеки(ДанныеПрофиля, Идентификатор = "") Экспорт
	СсылкаНаСкачивание = "";
		
	ЗапросXML = ТекстЗапросаEsfLibRequest(ДанныеПрофиля);
	ОтветXML = ВыполнитьМетодВебСервисаИТС(ЗапросXML, ИмяСервисаВыдачиСсылкиПользователю());
		
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоОшибкаСервисаИТС(ОтветXML, ИнформацияОбОшибке) Тогда		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СсылкаНаСкачивание = ОтветXDTO.reference;	
		Идентификатор = ОтветXDTO.id;			
	Иначе
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ИнформацияОбОшибке.ПодробноеПредставление);
		ВызватьИсключение(НСТР("ru='Не удалось получить данные с сервера ИТС!'") + Символы.ПС + ИнформацияОбОшибке.КраткоеПредставление);
	КонецЕсли;
	
	Возврат СсылкаНаСкачивание;
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Процедура ОтправитьПодтверждениеОЗавершенииСкачивания(Идентификатор)
	СсылкаНаСкачивание = "";
		
	ЗапросXML = ТекстЗапросаEsfDnlAckRequest(Идентификатор);
	
	ОтветXML = ВыполнитьМетодВебСервисаИТС(ЗапросXML,  ИмяСервисаПодтвержденияЗагрузки());		
КонецПроцедуры

///////////////////////////////////////////////////////////
// Имена сервисов

//&НаКлиентеНаСервереБезКонтекста
Функция АдресРесурсаИТС()
	Возврат "its.1c.kz";
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ИмяСервисаВыдачиСсылкиПользователю()
	Возврат "/download/esf/request";
КонецФункции	

//&НаКлиентеНаСервереБезКонтекста
Функция ИмяСервисаПодтвержденияЗагрузки()
	Возврат "/download/esf/acknowledge";
КонецФункции	

// Тексты запросов
//&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаEsfLibRequest(ДанныеПрофиля) Экспорт	
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfLibRequest");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[IDConf]", ДанныеПрофиля.ИДКонфигурации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Version]", ДанныеПрофиля.Версия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Isbase]", ?(ДанныеПрофиля.ЭтоБазовая,1,0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[RegNumber]", ДанныеПрофиля.РегистрационныйНомер);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationBIN]", ДанныеПрофиля.ОрганизацияБИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationName]", ДанныеПрофиля.ОрганизацияНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationAddr]", ДанныеПрофиля.ОрганизацияАдрес);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationContacts]", ДанныеПрофиля.ОрганизацияТелефон);
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserIIN]", ДанныеПрофиля.ПользовательИИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserFisrtName]", ДанныеПрофиля.ПользовательИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserSecondName]", ДанныеПрофиля.ПользовательОтчество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserLastName]", ДанныеПрофиля.ПользовательФамилия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserPosition]", ДанныеПрофиля.ПользовательДолжность);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ExtraInfo]", ДанныеПрофиля.ДополнительныеСведения);
	
	Возврат ТекстЗапроса;
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаEsfDnlAckRequest(ИдентификаторСессии)Экспорт	
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfDnlAckRequest");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ID]", ИдентификаторСессии);
	         	
	Возврат ТекстЗапроса;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ОШИБОК

Функция ЭтоОшибкаСервисаИТС(Знач ОтветXML, ИнформацияОбОшибке = Неопределено, IDСессии = "") Экспорт
	
	ЭтоОшибка = Ложь;
	
	ИнформацияОбОшибке = Новый Структура("Код, КраткоеПредставление, ПодробноеПредставление", 0, "", "");
	// Нештатная ситуация, некорректный ответ	
	Если Найти(НРЕГ(ОтветXML), "esf_lib_response") = 0 Тогда
		
		ИнформацияОбОшибке.Код = 100;	
		ИнформацияОбОшибке.КраткоеПредставление = "Сервер ИТС недоступен или предоставил некорректный ответ.";
		
		ТекстОшибки = "Сообщите в службу поддержки нижеприведенную информацию. %ПС% Ответ сервиса: %1%";
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", СокрЛП(ОтветXML));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %ПС%", Символы.ПС);		
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
		
		Возврат Истина;
	КонецЕсли;	
	
	// Нештатная ситуация, корректный ответ	
	ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);	
	Попытка
		ИнформацияОбОшибке.Код = Число(СокрЛП(ОбъектXDTO.code));
		ИнформацияОбОшибке.КраткоеПредставление = СокрЛП(ОбъектXDTO.message);		
		IDСессии = СокрЛП(ОбъектXDTO.id);			
		
		ТекстОшибки = НСТР("ru = 'Код ошибки: %1%. IDСессии: %2%. Ошибка: %3%'");			
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", ИнформацияОбОшибке.Код);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %2%", IDСессии);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %3%", СокрЛП(ОбъектXDTO.message));
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
	Исключение
		ИнформацияОбОшибке.Код = "101";	
		ИнформацияОбОшибке.КраткоеПредставление = НСТР("ru='При обработке сведений сервиса ИТС возникла неустановленная ошибка.'");
		
		ТекстОшибки = НСТР("ru = 'Код ошибки: %1%. IDСессии: %2%. %ПС% Ответ сервиса: %3%'");			
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", ИнформацияОбОшибке.Код);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %2%", IDСессии);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %3%", СокрЛП(ОтветXML));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %ПС%", Символы.ПС);
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
		
		Возврат Истина;
	КонецПопытки;
		
	// штатная ситуация, в выдаче отказано
	Если ИнформацияОбОшибке.Код <> 0 Тогда
		// В случае верных данных сервис возвращает 0 код ошибки.
		// Код, отличный от 0 означает наличие ошибки в регистрационных данных пользователя.
		
		ЭтоОшибка = Истина;				
	КонецЕсли;
	
	Возврат ЭтоОшибка;	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции разбора XML

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьXMLВДеревоЗначений(ИмяФайлаXML = Неопределено, ТекстXML = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// считываем текст из файла
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайлаXML, , Истина);
		Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем дерево
	Возврат ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML, ОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с Интернет

//&НаКлиентеНаСервереБезКонтекста
Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
		
	НастройкиПрокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, 
					?(ЗначениеЗаполнено(ПараметрыСоединения.Порт), ПараметрыСоединения.Порт, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Логин), ПараметрыСоединения.Логин, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Пароль), ПараметрыСоединения.Пароль, Неопределено),
					НастройкиПрокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с файлами-обновления
//&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаКартыРелизов() Экспорт
	Возврат "/download/esf/releasemap?version=2.0";		
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
// Возвращает структуру: Версия, Имя, Дата См. структуру файла releasemap для текущего релиза конфигурации
Функция ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Для Каждого Стр1 Из ДеревоКартыРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Продолжить;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								
								Если ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурации И ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурацииБЭСФ Тогда
									Продолжить;
								КонецЕсли;
								
								Для Каждого Стр5 Из Стр4.Строки Цикл
									Если Стр5.Тип = "Э" И Стр5.Имя = "module" Тогда
										УзелВерсия = Стр5.Строки.Найти("version", "Имя");
										УзелИмя = Стр5.Строки.Найти("name", "Имя");
										УзелДата = Стр5.Строки.Найти("date", "Имя");
										Если УзелВерсия <> Неопределено И УзелИмя <> Неопределено Тогда
											Результат = Новый Структура("Версия, Имя", СокрЛП(УзелВерсия.Значение), СокрЛП(УзелИмя.Значение));
											Если ЗначениеЗаполнено(УзелДата) И ЗначениеЗаполнено(УзелДата.Значение) Тогда
												Результат.Вставить("Дата", УзелДата.Значение);
											КонецЕсли;
											Возврат Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

&НаКлиенте
// Возвращаемые значения:
// 		Ложь - обновление не требуется
// 		Истина - необходимо обновить внешний модуль
Функция ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) Экспорт
	
	// пытаемся установить соединение с сервером
	Соединение = УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат Ложь;
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете 	= СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	КонтейнерМетодов = ЭСФКлиентСервер.КонтейнерМетодов();	
	ВерсияМодуляВБазе = СтрЗаменить(КонтейнерМетодов.ВерсияВнешнегоМодуляКриптографии(), Символы.НПП, "");
	
	Если ВерсияМодуляВИнтернете = ВерсияМодуляВБазе Тогда
		// обновление не требуется
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ОпределитьПараметрыМодуляТекущегоРелиза(ФайлКартаРелизовАдрес, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Экспорт
	
	// распаковываем
	ФайлКартыРелизовАрхив = ПолучитьИмяВременногоФайла("zip");
	ФайлКартыРелизовДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлКартаРелизовАдрес);
	ФайлКартыРелизовДвоичныеДанные.Записать(ФайлКартыРелизовАрхив);
	
	ОписаниеОшибки = "";
	ФайлКартаРелизов = ЭСФСервер.РаспаковатьФайл(ФайлКартыРелизовАрхив, ОписаниеОшибки);

	УдалитьФайлы(ФайлКартыРелизовАрхив);
	
	Если НЕ ЗначениеЗаполнено(ФайлКартаРелизов) Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем справочник в дерево
	ТекстФайлаСправочника = "";
	ОписаниеОшибки = "";
	
	ДеревоКартыРелизов = ЗагрузитьXMLВДеревоЗначений(ФайлКартаРелизов, ТекстФайлаСправочника, ОписаниеОшибки);
	
	УдалитьФайлы(ФайлКартаРелизов);
	
	Если НЕ ЗначениеЗаполнено(ДеревоКартыРелизов) Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ДеревоКартыРелизов = Неопределено Тогда		
		Возврат Ложь;                           			
	КонецЕсли;
	
	// определяем последнюю доступную версию модуля документооборота для текущего релиза
	СвойстваМодуляДляТекущегоРелиза = ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов);
	Если НЕ ЗначениеЗаполнено(СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Возврат Истина;
	
КонецФункции //ОпределитьПараметрыМодуляТекущегоРелиза

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПрименитьСвойстваМодуляДокументооборота(ВнешнийМодульАдрес = Неопределено, СвойстваМодуля = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	ВнешнийМодуль = ПолучитьИзВременногоХранилища(ВнешнийМодульАдрес);
	
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	
	// подготавливаем двоичные данные внешнего модуля
	Если ВнешнийМодуль <> Неопределено И СвойстваМодуля <> Неопределено Тогда
		
		МодифицируемыеКонстанты.Добавить("ЭСФВерсияВнешнегоМодуля");
		МодифицируемыеКонстанты.Добавить("ЭСФВнешнийМодуль");
		
		ОбъектВнешнийМодуль = Новый ХранилищеЗначения(ВнешнийМодуль);
		ВерсияВнешнегоМодуля = СвойстваМодуля.Версия;					
	КонецЕсли;
		
	СтрМодифицируемыеКонстанты = "";
	Для Счетчик = 0 По МодифицируемыеКонстанты.Количество()-1 Цикл
		Если Счетчик > 0 Тогда
			СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + ", " ;
		КонецЕсли;		
		СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + МодифицируемыеКонстанты[Счетчик]; 
	КонецЦикла;
		
	// инициализируем значения констант
	Попытка
		КонстантыНабор = Константы.СоздатьНабор(СтрМодифицируемыеКонстанты);		
		Если ВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ЭСФВнешнийМодуль = ОбъектВнешнийМодуль;
			КонстантыНабор.ЭСФВерсияВнешнегоМодуля = ВерсияВнешнегоМодуля;
		КонецЕсли;
		КонстантыНабор.Записать();
		ЗаписьЖурналаРегистрации("Загрузка",,Метаданные.Константы.ЭСФВнешнийМодуль,ВерсияВнешнегоМодуля, "Загружен новый модуль криптографии"); 
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ЗакачатьИВключитьПризнакИспользования(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки)
	ИдентификаторСессии = "";
	СсылкаМодуль = ПолучитьСсылкуНаСкачиваниеБиблиотеки(ПараметрыСервераИнтернета.ДополнительныеПараметры, ИдентификаторСессии);
	// пытаемся установить соединение с сервером	
	Соединение = УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	АрхивМодуля = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(СсылкаМодуль, АрхивМодуля);
		УстановитьСоединение = Ложь;
	Исключение
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АрхивМодуля)); // переходим на сервер
	РезультатРегистрации = ПрименитьСвойстваМодуляДокументооборота(АдресВоВременномХранилище, СвойстваМодуляДляТекущегоРелиза, ОписаниеОшибки);	
	УдалитьФайлы(АрхивМодуля);
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда		
		ОтправитьПодтверждениеОЗавершенииСкачивания(ИдентификаторСессии);
	КонецЕсли;
	
	Если НЕ РезультатРегистрации Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;     	
	// сообщаем
	ТекстСообщения = НСтр("ru = 'Новая версия криптографической библиотеки зарегистрирована в информационной базе.'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	Возврат Истина;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Прочие функции

//&НаКлиентеНаСервереБезКонтекста
Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации)
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ID", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) 
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурацииБЭСФ, ИДКонфигурацииУзла) Тогда
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии)
	
	МассивЧастейШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ШаблонВерсии);
	МассивЧастейТекущейВерсии = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ВерсияТекущейПлатформы);
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИнформацияОПрограмме()
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ЭСФКлиентСервер.ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			ЭСФСерверПереопределяемый.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Результат.Вставить("ИДКонфигурацииБЭСФ",		"БиблиотекаЭлектронныхСчетовФактур");	
	Результат.Вставить("ВерсияКонфигурацииБЭСФ",	СокрЛП(ВерсияБЭСФ));
	
	Возврат Результат;	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ХешСообщения(Данные, ФункцияХеширования = Неопределено)
	
	Если ФункцияХеширования = Неопределено ТОгда
		ФункцияХеширования = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = новый ХешированиеДанных(ФункцияХеширования);	
	ХешированиеДанных.Добавить(Данные);                             	
	Результат = ХешированиеДанных.ХешСумма;
	
	Возврат Результат;	
КонецФункции


#КонецОбласти

#КонецОбласти

///////////////////////////////////////////////////////////
// Запросы
Функция ПолучитьТекстЗапроса(ИмяМакета) Экспорт
	Макет = ПолучитьМакет(ИмяМакета);	
	
	Возврат Макет.ПолучитьТекст();
КонецФункции	

// КРИПТОГРАФИЯ. КОНЕЦ.
////////////////////////////////////////////////////////////////////////////////

#КонецОбласти

#Область ЭСФ
	
////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ЭСФ

// См. ЭСФКлиент.ПроверитьИсходящиеЭСФ().
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Если ТипЗнч(МассивИсходящихЭСФ) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СсылкаЭСФ Из МассивИсходящихЭСФ Цикл
		РезультатПроверки = ПроверитьЭСФ(СсылкаЭСФ);
		ТекстСообщения = ТекстСообщенияПоРезультатуПроверкиЭСФ(СсылкаЭСФ, РезультатПроверки);
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаЭСФ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЭСФ(СсылкаЭСФ) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиЭСФ();
	
	// Объект ЭСФ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
	
	Попытка
		
		ПроверитьРазличныеДанныеЭСФ(ОбъектЭСФ, РезультатПроверки);
		ПроверитьДополнительныйЭСФ(ОбъектЭСФ, РезультатПроверки);
		ПроверитьЭСФПоТоварамИзПеречня(ОбъектЭСФ, РезультатПроверки);
		ЭСФСерверПереопределяемый.СверитьЧисловыеДанныеСФиЭСФ(ОбъектЭСФ, РезультатПроверки);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения ЭСФ возникла ошибка:
		|%1'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПустойРезультатПроверкиЭСФ() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки", Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура СообщитьОбнаруженыОшибки(Знач СсылкаЭСФ, Знач РезультатПроверки) Экспорт

	Если РезультатПроверки.УведомительныеОшибки.Количество() <> 0
		ИЛИ РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
		
		ТекстСообщения = НСтр(
		"ru = 'Обнаружены ошибки при проверке документа: ""%1"".
		|Для просмотра списка ошибок воспользуйтесь командой ""Проверка"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаЭСФ);
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаЭСФ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияПоРезультатуПроверкиЭСФ(Знач СсылкаЭСФ, Знач РезультатПроверки, Знач УведомительныеОшибки = Истина, Знач ЗапрещающиеОшибки = Истина) Экспорт
	
	ТекстСообщения = "";
	
	Если (НЕ УведомительныеОшибки) И (НЕ ЗапрещающиеОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗапрещающиеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.ЗапрещающиеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если УведомительныеОшибки Тогда
		Для Каждого Ошибка Из РезультатПроверки.УведомительныеОшибки Цикл
			ТекстСообщения = ТекстСообщения + СокрЛП(Ошибка) + Символы.ПС;
		КонецЦикла;		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщения) Тогда
		
		ТекстСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Ошибок не обнаружено при проверке документа ""%1"".'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаЭСФ);
		
	Иначе
		
		ЗаголовокСообщения = НСтр(
		"ru = '------------------------------------------------------------------------------------------------------
		|Обнаружены ошибки при проверке документа ""%1"":'");
		
		ЗаголовокСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокСообщения, СсылкаЭСФ);
		
		ТекстСообщения = ЗаголовокСообщения + Символы.ПС + ТекстСообщения;
		ТекстСообщения = СокрЛП(ТекстСообщения);		
		ТекстСообщения = ТекстСообщения + Символы.ПС;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить корректность заполнения реквизита Идентификатор.
	Если ЗначениеЗаполнено(ОбъектЭСФ.Идентификатор) Тогда
		
		СообщениеПроверкиИдентификатора = "";
		
		Если НЕ ЭСФКлиентСервер.ИдентификаторКорректен(ОбъектЭСФ.Идентификатор, СообщениеПроверкиИдентификатора) Тогда
			
			ТекстСообщения = НСтр("ru = 'Страница ""Прочие сведения"". Поле ""Идентификатор"" заполнено некорректно. Причина: %1'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, СообщениеПроверкиИдентификатора);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектЭСФ.ДатаВыпискиНаБумажномНосителе <> '00010101000000' И 
		Не ЗначениеЗаполнено(ОбъектЭСФ.ПричинаВыпискиНаБумажномНосителе) Тогда
		
		ТекстСообщения = НСтр("ru = 'A. Общий раздел. Не указана причина выписки на бумаге.'");		
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//+
	Если Не ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'A. Общий раздел. Не заполнено поле ""Дата оборота"".'"));
	КонецЕсли;
	//-
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить, чтобы были заполнены реквизиты госучреждения.
	ПолучательЯвляетсяГосучреждением = ОбъектЭСФ.Получатели.Найти(Истина, "ГосударственноеУчреждение") <> Неопределено;	
	Если ПолучательЯвляетсяГосучреждением
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК) 
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеИИК)
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеКодТоваров)
		ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеНазначениеПлатежа)Тогда
		
		// Проверка реквизитов госучреждения необходима, 
		// т.к. если они заполнены некорректно, 
		// то сервер ИС ЭСФ возвращает модульную ошибку.
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеИИК) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""ИИК"".'"));	
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""Назначение платежа"".'"));	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК)
			ИЛИ НЕ (ОбъектЭСФ.ГосучреждениеБИК = ГосучреждениеБИК()) Тогда
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'C1. Гос. учреждение. Не заполнено поле ""БИК"" или заполнено значением отличным от ""KKMFKZ2A""'"));	
		КонецЕсли;
		
	КонецЕсли;
	
	ВерсияЭСФ = ОбъектЭСФ.ВерсияБланкаЭСФ;
	
	Если ВерсияЭСФ = 2 Тогда
		ПроверитьТаблицуПолучатели(ОбъектЭСФ, РезультатПроверки);
		
		Если ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательИдентификатор)  
			ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательНаименование) ИЛИ ЗначениеЗаполнено(ОбъектЭСФ.АдресДоставки) Тогда
				
			Если Не ЗначениеЗаполнено(ОбъектЭСФ.ГрузополучательКодСтраны) Тогда
				РезультатПроверки.ЗапрещающиеОшибки.Добавить(НСтр("ru = 'D. Реквизиты грузополучателя. Не заполнено поле ""Код страны"".'"));
			ИначеЕсли ОбъектЭСФ.МестоРеализацииНеРК И ОбъектЭСФ.ГрузополучательКодСтраны = "KZ" Тогда //ЭСФКлиентСерверПереопределяемый.ПолучитьПредопределенноеЗначениеСтраны() Тогда
				РезультатПроверки.УведомительныеОшибки.Добавить(НСтр("ru = 'D. Реквизиты грузополучателя. Указан не допустимый код страны грузополучателя. ""KZ"".'"));	
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьТаблицуТовары(ОбъектЭСФ, РезультатПроверки);
		
	КонецЕсли;	
	
	//++ НЕ ЭСФ
	Если ТипЗнч(ОбъектЭСФ.СНТ) = ВССерверПереопределяемый.ТипДокументаСНТ() И ЗначениеЗаполнено(ОбъектЭСФ.СНТ) Тогда
		ВССерверПереопределяемый.СопоставитьДанныеЭСФИЗСНТ(ОбъектЭСФ.СНТ, ОбъектЭСФ, РезультатПроверки);
	КонецЕсли;
	//-- НЕ ЭСФ
	
КонецПроцедуры

Процедура ПроверитьДополнительныйЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Если ОбъектЭСФ.Вид <> Перечисления.ВидыЭСФ.Дополнительный Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектЭСФ.СвязанныйЭСФ.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Объект основной ЭСФ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектОсновнойЭСФ = ОбъектЭСФ.СвязанныйЭСФ.ПолучитьОбъект();
	
	СравнитьОсновнойИДополнительныйЭСФ(ОбъектОсновнойЭСФ, ОбъектЭСФ, РезультатПроверки);	
	
КонецПроцедуры

Процедура ПроверитьЭСФПоТоварамИзПеречня(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	// На данный момент при проверке товаров из перечня используются данные счета-фактуры.
	// В будущем проверка может быть изменена, чтобы использовались данные ЭСФ.
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСообщений = ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, ОбъектЭСФ.СчетФактура, Ложь);
	Для Каждого Сообщение Из МассивСообщений Цикл
		РезультатПроверки.УведомительныеОшибки.Добавить(Сообщение);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьТаблицуПолучатели(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭСФПолучатели.ПолучательИдентификатор,
	               |	ЭСФПолучатели.ПолучательНаименование,
	               |	ЭСФПолучатели.НомерСтроки,
	               |	ЭСФПолучатели.Лизингодатель,
	               |	ЭСФПолучатели.УчастникСовместнойДеятельности,
	               |	ЭСФПолучатели.ГосударственноеУчреждение,
	               |	ЭСФПолучатели.ДоляУчастия,
	               |	ЭСФПолучатели.КодСтраны КАК КодСтраны,
	               |	ЭСФПолучатели.УчастникСРП КАК УчастникСРП,
	               |	ЭСФПолучатели.Доверитель КАК Доверитель,
	               |	ЭСФПолучатели.РозничнаяРеализация КАК РозничнаяРеализация,
	               |	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица,
	               |	ЭСФПолучатели.НерезидентВерсия2 КАК НерезидентВерсия2,
	               |	ЭСФПолучатели.БИНФилиала КАК БИНФилиала,
	               |	ЭСФПолучатели.ФизическоеЛицо КАК ФизическоеЛицо
				   |ПОМЕСТИТЬ ВТ_ЭСФПолучатели
	               |ИЗ
	               |	&ТаблицаПолучатели КАК ЭСФПолучатели
				   |;
				   |///////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ЭСФПолучатели.ПолучательИдентификатор,
	               |	ЭСФПолучатели.ПолучательНаименование,
	               |	ЭСФПолучатели.НомерСтроки,
	               |	ЭСФПолучатели.Лизингодатель,
	               |	ЭСФПолучатели.УчастникСовместнойДеятельности,
	               |	ЭСФПолучатели.ГосударственноеУчреждение,
	               |	ЭСФПолучатели.ДоляУчастия,
	               |	ЭСФПолучатели.КодСтраны КАК КодСтраны,
	               |	ЭСФПолучатели.УчастникСРП КАК УчастникСРП,
	               |	ЭСФПолучатели.Доверитель КАК Доверитель,
	               |	ЭСФПолучатели.РозничнаяРеализация КАК РозничнаяРеализация,
	               |	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица,
	               |	ЭСФПолучатели.НерезидентВерсия2 КАК НерезидентВерсия2,
	               |	ЭСФПолучатели.БИНФилиала КАК БИНФилиала,
	               |	ЭСФПолучатели.ФизическоеЛицо КАК ФизическоеЛицо
				   |ИЗ
	               |	ВТ_ЭСФПолучатели КАК ЭСФПолучатели
				   |";	   
	
	Запрос.УстановитьПараметр("ТаблицаПолучатели", ОбъектЭСФ.Получатели.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.КодСтраны) Тогда
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Не заполнен ""Код страны"" получателя ""%1"".'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.ПолучательНаименование);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		ИначеЕсли ОбъектЭСФ.МестоРеализацииНеРК И Выборка.КодСтраны = "KZ" Тогда 
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Указан не допустимый код страны получателя ""%1"".'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.ПолучательНаименование);
				
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ПолучательНаименование) Тогда
			
			ТекстСообщения = НСтр("ru = 'C. Получатели. Не заполнено ""Наименование получателя"" в строке №%1'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;				
	
КонецПроцедуры

Процедура ПроверитьТаблицуТовары(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.СтавкаНДС
	|ПОМЕСТИТЬ ВТ_ЭСФтовары
	|ИЗ
	|	&ТаблицаТовары КАК ЭСФТовары
	|;
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.СтавкаНДС,
	|	ЕСТЬNULL(СтавкиНДС.МестоРеализацииНеРК, ЛОЖЬ) КАК МестоРеализацииНеРК
	|ИЗ
	|	ВТ_ЭСФтовары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ЭСФТовары.СтавкаНДС = СтавкиНДС.Ссылка
	|";	   
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ОбъектЭСФ.Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Проверка ТЧ по признаку "Место реализации не РК".
	БезНДСНеРК_ВШапке 	 =  ОбъектЭСФ.МестоРеализацииНеРК;
	ВсеСтроки_БезНДСНеРК = Истина;
	ВсеСтроки_НДС 		 = Истина;
	СтавкиРазные 		 = Ложь;
	ЭтоПерваяСтрока 	 = Истина;
		
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ИдентификаторТовара) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнен ""Идентификатор товара"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Выборка.ПризнакПроисхождения <> "6" И Не ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияКод) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнена ""Единица измерения код"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ПризнакПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'G. Товары. Не заполнен ""Признак происхождения"" в строке №%1.'"); 
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Выборка.НомерСтроки);
				
			РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
			
		КонецЕсли;

		Если ЭтоПерваяСтрока Тогда
			Если Выборка.МестоРеализацииНеРК Тогда
				ВсеСтроки_НДС = Ложь;
			Иначе
				ВсеСтроки_БезНДСНеРК = Ложь;
			КонецЕсли;
			ЭтоПерваяСтрока = Ложь;
		Иначе
			Если (Выборка.МестоРеализацииНеРК И Не ВсеСтроки_БезНДСНеРК) ИЛИ 
				(Не Выборка.МестоРеализацииНеРК И Не ВсеСтроки_НДС) Тогда
				СтавкиРазные = Истина;
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;	
	
	// Проверяем случаи заполнения ставок в ТЧ и признака в шапке.
	Если СтавкиРазные Тогда
		ТекстСообщения = НСтр("ru = 'G. Товары. В таблице указаны ставки НДС с разными признаками ""Местом реализации является не РК"".'") + Символы.ПС + НСтр("ru = 'Рекомендуется оформить товары разными документами.'"); 
		РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
	Иначе
		Если БезНДСНеРК_ВШапке И ВсеСтроки_НДС Тогда
			ТекстСообщения = НСтр("ru = 'G. Товары. Рекомендуется отключить признак ""Без НДС - Не РК"", иначе документ будет отправлен по ставке ""Без НДС - Не РК"".'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		ИначеЕсли Не БезНДСНеРК_ВШапке И ВсеСтроки_БезНДСНеРК Тогда
			ТекстСообщения = НСтр("ru = 'G. Товары. Рекомендуется включить признак ""Без НДС - Не РК"", иначе документ будет отправлен по ставке ""Без НДС"".'");
			РезультатПроверки.УведомительныеОшибки.Добавить(ТекстСообщения);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Описание типов проверок:
// - Реквизит - проверяется совпадение значений реквизитов.
// - ТабличнаяЧасть - проверяется совпадение количества строк.
// - РеквизитТабличнойЧасти - перебираются все строки табличной части и проверяется, что указанный реквизит совпадает. 
//   Выполняется только если количество строк в табличных частях совпадает.
//
Процедура СравнитьОсновнойИДополнительныйЭСФ(Знач ОбъектОсновнойЭСФ, Знач ОбъектДополнительныйЭСФ, РезультатПроверки) Экспорт
	
	ТаблицаРазличий = Новый ТаблицаЗначений;
	ТаблицаРазличий.Колонки.Добавить("Сообщение");
	
	// Получить объекты основного и дополнительного ЭСФ,
	// т.к. обращаться множество раз к реквизитам объекта,
	// может быть оптимальнее, чем к реквизитам ссылки.
	
	ТаблицаРеквизитовДляПроверки = РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ(ОбъектОсновнойЭСФ.ВерсияБланкаЭСФ);
	
	Если НЕ ЗначениеЗаполнено(ОбъектОсновнойЭСФ.СНТ) Тогда
		
		Для Каждого РеквизитДляПроверки Из ТаблицаРеквизитовДляПроверки Цикл
			
			ТипПроверки = РеквизитДляПроверки.ТипПроверки;		
			ИмяТабличнойЧасти = РеквизитДляПроверки.ИмяТабличнойЧасти;
			ИмяРеквизита = РеквизитДляПроверки.ИмяРеквизита;		
			СинонимТабличнойЧасти = РеквизитДляПроверки.СинонимТабличнойЧасти;
			СинонимРеквизита = РеквизитДляПроверки.СинонимРеквизита;
			СинонимРаздела = РеквизитДляПроверки.СинонимРаздела;
			
			Если ТипПроверки = ЭСФКлиентСервер.ТипПроверкиРеквизит() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяРеквизита] <> ОбъектДополнительныйЭСФ[ИмяРеквизита] Тогда
					Различие = ТаблицаРазличий.Добавить();
					Различие.Сообщение = НСтр("ru = '%1. Отличается значение реквизита ""%2"".'");
					Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Различие.Сообщение, СинонимРаздела, СинонимРеквизита);
				КонецЕсли;
				
			ИначеЕсли ТипПроверки = ЭСФКлиентСервер.ТипПроверкиТабличнаяЧасть() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() <> ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти].Количество() Тогда
					Различие = ТаблицаРазличий.Добавить();
					Различие.Сообщение = НСтр("ru = '%1. Отличается количество строк в табличной части ""%2"".'");
					Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Различие.Сообщение, СинонимРаздела, СинонимТабличнойЧасти);
				КонецЕсли;			
				
			ИначеЕсли ТипПроверки = ЭСФКлиентСервер.ТипПроверкиРеквизитТабличнойЧасти() Тогда
				
				Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() = ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти].Количество() Тогда
					
					МаксимальныйИндекс = ОбъектОсновнойЭСФ[ИмяТабличнойЧасти].Количество() - 1;
					
					Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
						
						Если ОбъектОсновнойЭСФ[ИмяТабличнойЧасти][ИндексСтроки][ИмяРеквизита] <> ОбъектДополнительныйЭСФ[ИмяТабличнойЧасти][ИндексСтроки][ИмяРеквизита] Тогда
							
							Различие = ТаблицаРазличий.Добавить();
							Различие.Сообщение = НСтр("ru = '%1. В табличной части ""%2"", в строке №%3, отличается значение реквизита ""%4"".'");
							Различие.Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Различие.Сообщение, СинонимРаздела, СинонимТабличнойЧасти, ИндексСтроки + 1, СинонимРеквизита);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;				
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неизвестный тип проверки:'") + " " + РеквизитДляПроверки.ТипПроверки;	
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

	ТаблицаРазличий.Сортировать("Сообщение");
		
	Если ТаблицаРазличий.Количество() <> 0 Тогда
		
		СтрокаВсеРазличия = "";
		Для Каждого СтрокаТаблицыРазличий Из ТаблицаРазличий Цикл
			СтрокаВсеРазличия = СтрокаВсеРазличия + "- " + СтрокаТаблицыРазличий.Сообщение + Символы.ПС;
		КонецЦикла;
		
		СтрокаВсеРазличия = НСтр("ru = 'Недопустимые различия между основным и дополнительным ЭСФ:'") + Символы.ПС + СтрокаВсеРазличия;
		
		РезультатПроверки.УведомительныеОшибки.Добавить(СтрокаВсеРазличия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ(ВерсияОсновногоЭСФ = 2)
	
	ТаблицаРеквизитовДляПроверки = Новый ТаблицаЗначений;	
	
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ТипПроверки");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ИмяРеквизита");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимТабличнойЧасти");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимРеквизита");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("СинонимРаздела");
	
	Макет = ПолучитьМакет("РеквизитыДляПроверкиОсновногоИДополнительногоЭСФ");
	
	ВерсияОсновногоЭСФ = ?(ВерсияОсновногоЭСФ = 0, 1, ВерсияОсновногоЭСФ); 
	ИмяОбластиПроверкиЭСФ = "ЭСФ_Версия" + ВерсияОсновногоЭСФ;
	
	ОбластьРеквизитовДляПроверки = Макет.ПолучитьОбласть(ИмяОбластиПроверкиЭСФ);
	
	Для НомерСтроки = 1 По ОбластьРеквизитовДляПроверки.ВысотаТаблицы Цикл
		РеквизитДляПроверки = ТаблицаРеквизитовДляПроверки.Добавить();
		РеквизитДляПроверки.ТипПроверки           = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		РеквизитДляПроверки.ИмяТабличнойЧасти     = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
		РеквизитДляПроверки.ИмяРеквизита          = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 3, НомерСтроки, 3).Текст);
		РеквизитДляПроверки.СинонимТабличнойЧасти = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
		РеквизитДляПроверки.СинонимРеквизита      = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 5, НомерСтроки, 5).Текст);
		РеквизитДляПроверки.СинонимРаздела        = СокрЛП(ОбластьРеквизитовДляПроверки.Область(НомерСтроки, 6, НомерСтроки, 6).Текст);
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовДляПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МОДУЛЯ ОБЪЕКТА ДОКУМЕНТА ЭСФ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий документа ЭСФ

Процедура ДокументЭСФ_ОбработкаЗаполнения(ОбъектЭСФ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		
		СтандартнаяОбработка = Ложь;
		ЭСФСервер.ЗаполнитьИсходящийЭСФ(ДанныеЗаполнения, ОбъектЭСФ);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ПросмотрЗагружаемогоЭСФ") Тогда
			
			Если ДанныеЗаполнения.ПросмотрЗагружаемогоЭСФ Тогда
				
				InvoiceInfo = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ДанныеЗаполнения.XML, ФабрикаXDTO);
				ЗаполнитьЭСФ(InvoiceInfo, ДанныеЗаполнения.СтруктурнаяЕдиница, ДанныеЗаполнения.Реквизиты.Направление, ОбъектЭСФ);
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, ДанныеЗаполнения.Реквизиты);
				
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			СтандартнаяОбработка = Ложь;
			ЭСФСервер.ЗаполнитьИсходящийЭСФ(ДанныеЗаполнения, ОбъектЭСФ);
			
		КонецЕсли;
		
	//++ НЕ ЭСФ
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = ВССерверПереопределяемый.ТипДокументаСНТ() Тогда
		
		СтандартнаяОбработка = Ложь;
		ЭСФСерверПереопределяемый.ЗаполнитьИсходящийЭСФИзСНТ(ДанныеЗаполнения, ОбъектЭСФ);
	//-- НЕ ЭСФ
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭСФ_ПередЗаписью(ОбъектЭСФ, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектЭСФ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ ЭСФ	
	Для Каждого СтрокаТовары из ОбъектЭСФ.Товары Цикл
		//Если Не ЗначениеЗаполнено(СтрокаТовары.ЕдиницаИзмеренияХраненияОстатков) Тогда
		//	СтрокаТовары.ЕдиницаИзмеренияХраненияОстатков = СтрокаТовары.ЕдиницаИзмерения;
		//КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.КоэффициентПересчета) Тогда
			СтрокаТовары.КоэффициентПересчета = 1;
		КонецЕсли;	
		
	КонецЦикла;
	//-- НЕ ЭСФ	
	
	УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ);
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
		ОбъектЭСФ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	ЕстьТоварыВССПустымиИдентификаторами = Ложь;
	//++ НЕ ЭСФ	
	Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий
		ИЛИ (ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий 
			И ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный)
		И (ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Доставленный
			ИЛИ ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Созданный
			ИЛИ ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный
			ИЛИ ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Импортированный) Тогда
		ЕстьТоварыВССПустымиИдентификаторами = ПроверитьЭСФНаНаличиеИдентификаторовТоваровВС(ОбъектЭСФ);
	КонецЕсли;
	//-- НЕ ЭСФ	
	
	ОбъектЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ, ЕстьТоварыВССПустымиИдентификаторами);
	
	//++ НЕ ЭСФ	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И
		ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий И 
		НЕ (ОбъектЭСФ.Состояние = Перечисления.СостоянияЭСФ.ПринятОтПоставщика ИЛИ ОбъектЭСФ.Состояние = Перечисления.СостоянияЭСФ.Аннулирован ИЛИ ОбъектЭСФ.Состояние = Перечисления.СостоянияЭСФ.Отозван ИЛИ ОбъектЭСФ.Состояние = Перечисления.СостоянияЭСФ.ОтклоненПолучателем)
		И ОбъектЭСФ.ОтражаетсяВВС И	ОбъектЭСФ.Дата >= ДатаНачалаУчетаПоИдентификаторам() Тогда
		
		Отказ = Истина;
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'ЭСФ, содержащий товары виртуального склада, возможно провести только в состояниях ""Получен от поставщика"", ""Аннулирован"", ""Отозван"", ""Отклонен получателем""'"));
		
		Возврат;
	КонецЕсли;
	//-- НЕ ЭСФ	
	
	ОбъектЭСФ.СуммаДокумента = ОбъектЭСФ.Товары.Итог("Сумма");
	
	Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		Если ОбъектЭСФ.Поставщики.Количество() > 0 Тогда
			ОбъектЭСФ.Контрагент = ОбъектЭСФ.Поставщики[0].Поставщик;
		КонецЕсли;
	Иначе
		Если ОбъектЭСФ.Получатели.Количество() > 0 Тогда
			ОбъектЭСФ.Контрагент = ОбъектЭСФ.Получатели[0].Получатель;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАктуальныеЭСФПередЗаписью(ОбъектЭСФ);
	ОбновитьИсториюЭСФПередЗаписью(ОбъектЭСФ);
	
	//++ НЕ ЭСФ
	//СозданиеИсточниковПроисхождения
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ОбъектЭСФ.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЭСФ.СНТ) И Не (СтрНайти(ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0) Тогда
		Если ОбъектЭСФ.ДатаОборота >= ДатаПереходаНаВС() Тогда
			Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				
				Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
					
					Если ОбъектЭСФ.Вид <> Перечисления.ВидыЭСФ.Дополнительный Тогда
						ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектЭСФ, Отказ, "Товары");
					КонецЕсли;	
					
				Иначе
					
					Если ОбъектЭСФ.ЭтоНовый() Тогда
						НовыйЭСФСсылка = Документы.ЭСФ.ПолучитьСсылку(Новый УникальныйИдентификатор);
						ОбъектЭСФ.УстановитьСсылкуНового(НовыйЭСФСсылка);
					КонецЕсли;	
					//необходимо будет создать/обновить источники
					СоздатьОбновитьИсточникиПроисхождения(ОбъектЭСФ, "Товары");
					
					//Проверить и в случае необходимости сообщить о необходимости создания/обновления ЭДВС на конвертацию ЕИ
					СообщитьОНеобходимостиСозданияОбновленияКонвертацииЕИ(ОбъектЭСФ)
					
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	//-- НЕ ЭСФ
КонецПроцедуры

Процедура ДокументЭСФ_ПриЗаписи(ОбъектЭСФ, Отказ) Экспорт
	
	Если ОбъектЭСФ.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивЭСФ = Новый Массив;
	МассивЭСФ.Добавить(ОбъектЭСФ.Ссылка);
	//ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров(ОбъектЭСФ.Направление, МассивЭСФ);
	//ЭСФСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(ОбъектЭСФ.Направление, МассивЭСФ);
	//++ НЕ ЭСФ
	КлючиАналитикиУчетаСоответствий = ЭСФСервер.ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивЭСФ, Истина);
	ЭСФСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, ОбъектЭСФ.Направление, МассивЭСФ);
	//-- НЕ ЭСФ
	
	ОбновитьАктуальныеЭСФПриЗаписи(ОбъектЭСФ);
	ОбновитьИсториюЭСФПриЗаписи(ОбъектЭСФ);

КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроведения(ОбъектЭСФ, Отказ, РежимПроведения) Экспорт
	
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ОбъектЭСФ.Дата) Тогда
		Возврат;
	КонецЕсли;
			
	//++ НЕ ЭСФ

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	ВСОбщегоНазначения.ПодготовитьНаборыЗаписейКПроведению(ОбъектЭСФ);
	
	Если ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный 
		ИЛИ ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Отклоненный  Тогда 
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектЭСФ.СНТ) И Не (СтрНайти(ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0) Тогда
		
		ПараметрыПроведения = ПодготовитьПараметрыПроведенияЭСФ(ОбъектЭСФ.Ссылка, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	
		Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий И ОбъектЭСФ.ДатаОборота >= ДатаПереходаНаВС() Тогда
			//выполнить контроль остатков по регистру "Товары на виртуальных складах"		
			ВССервер.ВыполнитьКонтрольТоварыОрганизацийНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, Отказ);		
			
			Для каждого Товар Из ПараметрыПроведения.ТаблицаТоварыНаВС Цикл		
				Если НЕ ЗначениеЗаполнено(Товар.ИсточникПроисхождения) Тогда 
					ТекстСообщения = НСтр("ru='G. Товары. Для товара ""%1"" (номер строки: %2) движения не сформированы. Не указан источник происхождения.'");
					ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Товар.Номенклатура, Товар.НомерСтроки);				
					Поле = "Товары" + "[" + Формат(Товар.НомерСтроки-1, "ЧН=0; ЧГ=") + "].НомерСтроки" ;
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбъектЭСФ,Поле);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// Выполнить движение товаров на ВС с учётом ДатыОборотаЭСФ и ДатойПризнакаВСТовара
		Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
			ВССервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектЭСФ.Движения, Отказ);
			
			Если ОбъектЭСФ.Товары.Количество() >= ПараметрыПроведения.ТаблицаТоварыНаВС.Количество() Тогда //И ПараметрыПроведения.ТаблицаТоварыНаВС.Количество() <> 0 Тогда
				ВыборкаТоваровБезДвиженийНаВС = ВыборкаТоваровБезДвиженийНаВС(ОбъектЭСФ.Товары, ПараметрыПроведения.ТаблицаТоварыНаВС);
				Если ПараметрыПроведения.ЭСФБезСНТ Тогда
					Для каждого ТовараЭСФБезДвиженийНаВС Из ВыборкаТоваровБезДвиженийНаВС Цикл		
						ТекстСообщения = НСтр("ru='G. Товары. Для товара ""%1"" (номер строки: %2) движения не сформированы.
						|Данный товар является товаром виртуального склада и у ЭСФ документ поставки указан ""NON SNT"". Движения по данному товару будут выполнены соответствующим документом СНТ.'");
						ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТовараЭСФБезДвиженийНаВС.Номенклатура, ТовараЭСФБезДвиженийНаВС.НомерСтроки);				
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
					КонецЦикла; 
				ИначеЕсли Не ПараметрыПроведения.ЭтоРозничнаяРеализацияВПределахДат Тогда
					Для каждого ТовараЭСФБезДвиженийНаВС Из ВыборкаТоваровБезДвиженийНаВС Цикл		
						ТекстСообщения = НСтр("ru='G. Товары. Для товара ""%1"" (номер строки: %2) движения не сформированы.
						|Рекомендуем ввести ЭДВС с типом ""Остатки"".'");
						ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТовараЭСФБезДвиженийНаВС.Номенклатура, ТовараЭСФБезДвиженийНаВС.НомерСтроки);				
						Поле = "Товары" + "[" + Формат(ТовараЭСФБезДвиженийНаВС.НомерСтроки-1, "ЧН=0; ЧГ=") + "].НомерСтроки" ;
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбъектЭСФ,Поле);	
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ОбъектЭСФ.ДатаОборота >= ДатаПереходаНаВС() Тогда
			ВССервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектЭСФ.Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ ЭСФ
	
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаУдаленияПроведения(ОбъектЭСФ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПередУдалением(ОбъектЭСФ, Отказ) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПриКопировании(ОбъектЭСФ, ОбъектКопирования) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ПриУстановкеНовогоНомера(ОбъектЭСФ, СтандартнаяОбработка, Префикс) Экспорт
	
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроверкиЗаполнения(ОбъектЭСФ, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ НЕ ЭСФ
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ЭСФСерверПереопределяемый.ДокументЭСФ_ОбработкаПроверкиЗаполнения(ОбъектЭСФ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ТоварНаименование");
	
	Если ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий И ВССервер.ИспользоватьСНТ() И СтрНайти(ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	ЭСФСерверПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- НЕ ЭСФ
КонецПроцедуры

///////////////////////////////////////////////////////-/////////////////////////
// Служебные процедуры и функции документа ЭСФ

//++ НЕ ЭСФ
Процедура СообщитьОНеобходимостиСозданияОбновленияКонвертацииЕИ(ОбъектЭСФ)
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Товар,
	|	ТаблицаТовары.Количество * ТаблицаТовары.КоэффициентПересчета КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмеренияХраненияОстатков КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ вт_ЭСФТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.КоэффициентПересчета <> 0
	|	И ТаблицаТовары.КоэффициентПересчета <> 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДВСТовары.Товар,
	|	ЭДВСТовары.Количество КАК Количество,
	|	ЭДВСТовары.ЕдиницаИзмерения,
	|	0 КАК КоличествоНовое,
	|	ЭДВСТовары.Ссылка
	|ПОМЕСТИТЬ вт_ЭДВСТовары
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.Товары КАК ЭДВСТовары
	|ГДЕ
	|	ЭДВСТовары.Ссылка.ДокументОснование = &СсылкаЭСФ
	|	И ЭДВСТовары.Ссылка.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Детализация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДВСТовары.Товар,
	|	ЭДВСТовары.Количество КАК Количество,
	|	ЭДВСТовары.ЕдиницаИзмерения,
	|	0 КАК КоличествоНовое
	|ПОМЕСТИТЬ вт_ДляГруппировки
	|ИЗ
	|	вт_ЭДВСТовары КАК ЭДВСТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вт_ЭСФТовары.Товар,
	|	0,
	|	вт_ЭСФТовары.ЕдиницаИзмерения,
	|	вт_ЭСФТовары.Количество
	|ИЗ
	|	вт_ЭСФТовары КАК вт_ЭСФТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДляГруппировки.Товар,
	|	вт_ДляГруппировки.ЕдиницаИзмерения,
	|	СУММА(вт_ДляГруппировки.Количество) КАК КоличествоЭДВС,
	|	СУММА(вт_ДляГруппировки.КоличествоНовое) КАК КоличествоЭСФ
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	вт_ДляГруппировки КАК вт_ДляГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДляГруппировки.Товар,
	|	вт_ДляГруппировки.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	вт_Товары.Товар
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|ГДЕ
	|	вт_Товары.КоличествоЭДВС - вт_Товары.КоличествоЭСФ <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	вт_ЭДВСТовары.Ссылка КАК ЭДВС
	|ИЗ
	|	вт_ЭДВСТовары КАК вт_ЭДВСТовары";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ОбъектЭСФ.Товары.Выгрузить());
	Запрос.УстановитьПараметр("СсылкаЭСФ"	 , ОбъектЭСФ.Ссылка);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[4].Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Для документа %1 требуется %2 ЭДВС с видом детализации ""Конвертация между разными единицами измерений""'");		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,ОбъектЭСФ.Ссылка, ?(РезультатЗапроса[5].Пустой(), "оформить","переоформить")); 
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ ЭСФ

Процедура ОбновитьИсториюЭСФПередЗаписью(ОбъектЭСФ)
	
	НомерЗаписи = Неопределено;
	
	Если ОбъектЭСФ.Ссылка.Пустая() Тогда	
		
		НомерЗаписи = 0;
		
	ИначеЕсли ОбъектЭСФ.Ссылка.Состояние <> ОбъектЭСФ.Состояние Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияЭСФ.НомерЗаписи КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ИсторияЭСФ КАК ИсторияЭСФ
		|ГДЕ
		|	ИсторияЭСФ.ЭСФ = &ЭСФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗаписи УБЫВ";

		Запрос.УстановитьПараметр("ЭСФ", ОбъектЭСФ.Ссылка);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				НомерЗаписи = Выборка.НомерЗаписи + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектЭСФ.ДополнительныеСвойства.Вставить("НомерЗаписи", НомерЗаписи);
	
КонецПроцедуры

Процедура ОбновитьИсториюЭСФПриЗаписи(ОбъектЭСФ)
	
	НомерЗаписи = ОбъектЭСФ.ДополнительныеСвойства.НомерЗаписи;
	
	Если НомерЗаписи <> Неопределено Тогда
		НаборЗаписей = РегистрыСведений.ИсторияЭСФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭСФ.Установить(ОбъектЭСФ.Ссылка);
		НаборЗаписей.Отбор.НомерЗаписи.Установить(НомерЗаписи);		
		Запись = НаборЗаписей.Добавить();
		Запись.ЭСФ = ОбъектЭСФ.Ссылка; 
		Запись.НомерЗаписи = НомерЗаписи;
		Запись.Дата = ТекущаяДата();
		Запись.Состояние = ОбъектЭСФ.Состояние;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАктуальныеЭСФПередЗаписью(ОбъектЭСФ)
	
	Если ОбъектЭСФ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаСчетФактура = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ОбъектЭСФ.Ссылка, "СчетФактура");
	
	Если НЕ ЗначениеЗаполнено(СсылкаСчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаСчетФактура = ОбъектЭСФ.СчетФактура Тогда
		Возврат
	КонецЕсли;
	
	// Данный ЭСФ указывал на Ссылка.СчетФактура, 
	// а теперь указывает на другой счет-фактуру, 
	// или не указывает ни на один счет-фактуру.
	
	ДанныеАктуальногоЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(СсылкаСчетФактура);
	
	Если ДанныеАктуальногоЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если данный ЭСФ был актуальным для Ссылка.СчетФактура.
	Если ДанныеАктуальногоЭСФ.ЭСФ = ОбъектЭСФ.Ссылка Тогда
		
		ТаблицаЭСФ = ЭСФСервер.НайтиДокументыЭСФДляЗаполненияАктуальныхЭСФ(СсылкаСчетФактура);
		
		ДанныеНовогоАктуальногоЭСФ = Неопределено;
		Для Каждого СтрокаТаблицы Из ТаблицаЭСФ Цикл
			Если СтрокаТаблицы.ЭСФ <> ОбъектЭСФ.Ссылка Тогда
				ДанныеНовогоАктуальногоЭСФ = СтрокаТаблицы;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеНовогоАктуальногоЭСФ = Неопределено Тогда
			
			// Удалить информацию о том, что данный ЭСФ является актуальным для Ссылка.СчетФактура.
			НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СчетФактура.Установить(СсылкаСчетФактура);
			НаборЗаписей.Записать();
			
		Иначе
			
			// Сделать актуальным другой ЭСФ, который указывает на Ссылка.СчетФактура.
			НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СчетФактура.Установить(СсылкаСчетФактура);
			Запись = НаборЗаписей.Добавить();
			Запись.СчетФактура = СсылкаСчетФактура;
			Запись.ЭСФ = ДанныеНовогоАктуальногоЭСФ.ЭСФ;
			Запись.Состояние = ДанныеНовогоАктуальногоЭСФ.Состояние;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАктуальныеЭСФПриЗаписи(ОбъектЭСФ)
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.СчетФактура) Тогда
		Возврат;
	КонецЕсли;
	
	СделатьАктуальным = Ложь;
	Если ОбъектЭСФ.ДополнительныеСвойства.Свойство(ЭСФКлиентСервер.СделатьАктуальным()) Тогда
		Если ОбъектЭСФ.ДополнительныеСвойства[ЭСФКлиентСервер.СделатьАктуальным()] Тогда
			СделатьАктуальным = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СоздатьОбновитьЗапись = Ложь;
	Если СделатьАктуальным Тогда
		СоздатьОбновитьЗапись = Истина;
	Иначе
		ДанныеАктуальногоЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(ОбъектЭСФ.СчетФактура);
		Если ДанныеАктуальногоЭСФ = Неопределено Тогда
			СоздатьОбновитьЗапись = Истина;
		ИначеЕсли ДанныеАктуальногоЭСФ.ЭСФ = ОбъектЭСФ.Ссылка Тогда
			Если ДанныеАктуальногоЭСФ.Состояние <> ОбъектЭСФ.Состояние Тогда
				СоздатьОбновитьЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьОбновитьЗапись Тогда
		НаборЗаписей = РегистрыСведений.АктуальныеЭСФ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СчетФактура.Установить(ОбъектЭСФ.СчетФактура);
		Запись = НаборЗаписей.Добавить();
		Запись.СчетФактура = ОбъектЭСФ.СчетФактура;
		Запись.ЭСФ = ОбъектЭСФ.Ссылка;
		Запись.Состояние = ОбъектЭСФ.Состояние;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ДОКУМЕНТА ЭСФ

Функция ПечатьЭСФ(МассивЭСФ, ОбъектыПечати = Неопределено) Экспорт
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка,
	|	ЭСФ.Номер,
	|	ЭСФ.Дата,
	|	ЭСФ.Идентификатор,
	|	ЭСФ.РегистрационныйНомер,
	|	ЭСФ.ДополнительныеСведения,
	|	ЭСФ.ДатаОборота,
	|	ЭСФ.СвязанныйЭСФ,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправленный,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФДата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйДата,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ЭСФ.СвязанныйЭСФРегистрационныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИсправленныйРегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительный,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФДата
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйДата,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФРегистрационныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйРегистрационныйНомер,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ЭСФ.СвязанныйЭСФНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительныйНомер,
	|	ЭСФ.ГрузоотправительИдентификатор,
	|	ЭСФ.ГрузоотправительНаименование,
	|	ЭСФ.АдресОтправки,
	|	ЭСФ.ГрузополучательИдентификатор,
	|	ЭСФ.ГрузополучательНаименование,
	|	ЭСФ.АдресДоставки,
	|	ЭСФ.ДоговорПоставкиНомер,
	|	ЭСФ.ДоговорПоставкиДата,
	|	ЭСФ.ДоговорПоставкиУсловияОплаты,
	|	ЭСФ.ДоговорПоставкиСпособОтправления,
	|	ЭСФ.ДоверенностьНаПоставкуНомер,
	|	ЭСФ.ДоверенностьНаПоставкуДата,
	|	ЭСФ.ПунктНазначения,
	|	ЭСФ.ГосучреждениеИИК,
	|	ЭСФ.ГосучреждениеКодТоваров,
	|	ЭСФ.ГосучреждениеНазначениеПлатежа,
	|	ЭСФ.ГосучреждениеБИК,
	|	ЭСФ.ВалютаКод,
	|	ВЫБОР
	|		КОГДА ЭСФ.ВалютаКод <> ""KZT""
	|			ТОГДА ЭСФ.КурсВалюты
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВалютаКурс,
	|	ВЫБОР
	|		КОГДА ЭСФ.ТипПодписи = ЗНАЧЕНИЕ(Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо)
	|			ТОГДА ЭСФ.ЭЦП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтпечатокЭЦПЮрЛица,
	|	ЭСФ.УполномоченныйСотрудник,
	|	ВЫБОР
	|		КОГДА ЭСФ.ТипПодписи <> ЗНАЧЕНИЕ(Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо)
	|			ТОГДА ЭСФ.ЭЦП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОтпечатокЭЦП,
	|	ЭСФ.ТипПодписи,
	|	ЭСФ.ВерсияБланкаЭСФ,
	|	ЭСФ.ПоверенныйПоставщикаБИН,
	|	ЭСФ.ПоверенныйПоставщикаНаименование,
	|	ЭСФ.ПоверенныйПоставщикаАдресМестонахождения,
	|	ЭСФ.ПоверенныйПокупателяБИН,
	|	ЭСФ.ПоверенныйПокупателяНаименование,
	|	ЭСФ.ПоверенныйПокупателяАдресМестонахождения,
	|	ЭСФ.ДоговорПорученияПоставщикаНомер,
	|	ЭСФ.ДоговорПорученияПоставщикаДата,
	|	ЭСФ.ДоговорПорученияПокупателяНомер,
	|	ЭСФ.ДоговорПорученияПокупателяДата,
	|	ЭСФ.ГрузополучательКодСтраны,
	|	ЭСФ.ДоговорПоставки,
	|	ЭСФ.ДоговорПоставкиУсловияПоставки,
	|	ЭСФ.ДатаВыпискиНаБумажномНосителе,
	|	ЭСФ.ДокументПодтверждающийПоставкуНомер,
	|	ЭСФ.ДокументПодтверждающийПоставкуДата,
	|	ЭСФ.СпособОтправленияПоКлассификатору
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПоставщики.Ссылка КАК Ссылка,
	|	ЭСФПоставщики.НомерСтроки КАК НомерСтроки,
	|	ЭСФПоставщики.ПоставщикИдентификатор,
	|	ЭСФПоставщики.ПоставщикНаименование,
	|	ЭСФПоставщики.Адрес КАК ПоставщикАдрес,
	|	ЭСФПоставщики.СерияСвидетельстваПоНДС,
	|	ЭСФПоставщики.НомерСвидетельстваПоНДС,
	|	ЭСФПоставщики.ДокументПодтверждающийПоставкуНомер,
	|	ЭСФПоставщики.ДокументПодтверждающийПоставкуДата,
	|	ЭСФПоставщики.Комитент,
	|	ЭСФПоставщики.Комиссионер,
	|	ЭСФПоставщики.Экспедитор,
	|	ЭСФПоставщики.Лизингодатель,
	|	ЭСФПоставщики.УчастникСовместнойДеятельности,
	|	ЭСФПоставщики.ЭкспортерИлиУчастникСРП,
	|	ЭСФПоставщики.КБе,
	|	ЭСФПоставщики.ИИК,
	|	ЭСФПоставщики.БИК,
	|	ЭСФПоставщики.НаименованиеБанка,
	|	ЭСФПоставщики.ДополнительныеСведения КАК ПоставщикДополнительныеСведения,
	|	ЭСФПоставщики.МеждународныйПеревозчик,
	|	ЭСФПоставщики.Экспортер,
	|	ЭСФПоставщики.Доверитель,
	|	ЭСФПоставщики.ДоляУчастия,
	|	ЭСФПоставщики.УчастникСРП,
	|	ЭСФПоставщики.БИНРеорганизованногоЛица,
	|	ЭСФПоставщики.БИНФилиала,
	|	ЭСФПоставщики.ЯвляетсяСтруктурнымПодразделениемНерезидента
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|ГДЕ
	|	ЭСФПоставщики.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПолучатели.Ссылка КАК Ссылка,
	|	ЭСФПолучатели.НомерСтроки КАК НомерСтроки,
	|	ЭСФПолучатели.ПолучательИдентификатор,
	|	ЭСФПолучатели.ПолучательНаименование,
	|	ЭСФПолучатели.Адрес КАК ПолучательАдрес,
	|	ЭСФПолучатели.Комитент,
	|	ЭСФПолучатели.Комиссионер,
	|	ЭСФПолучатели.Лизингодатель,
	|	ЭСФПолучатели.ГосударственноеУчреждение,
	|	ЭСФПолучатели.Нерезидент,
	|	ЭСФПолучатели.УчастникСовместнойДеятельности,
	|	ЭСФПолучатели.ДополнительныеСведения КАК ПолучательДополнительныеСведения,
	|	ЭСФПолучатели.КодСтраны,
	|	ЭСФПолучатели.НерезидентВерсия2,
	|	ЭСФПолучатели.Доверитель,
	|	ЭСФПолучатели.УчастникСРП,
	|	ЭСФПолучатели.ДоляУчастия,
	|	ЭСФПолучатели.РозничнаяРеализация,
	|	ЭСФПолучатели.БИНРеорганизованногоЛица,
	|	ЭСФПолучатели.БИНФилиала,
	|	ЭСФПолучатели.ФизическоеЛицо
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|ГДЕ
	|	ЭСФПолучатели.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК Ссылка,
	|	ЭСФТовары.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТовары.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТовары.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТовары.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТовары.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС КАК БезНДС,
	|	ЭСФТовары.СуммаНДС КАК СуммаНДС,
	|	ЭСФТовары.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ЭСФТовары.ДополнительныеДанные,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФ.МестоРеализацииНеРК
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
	|ГДЕ
	|	ЭСФТовары.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТоварыПоПоставщикам.Ссылка КАК Ссылка,
	|	ЭСФТоварыПоПоставщикам.Идентификатор КАК Идентификатор,
	|	ЭСФТоварыПоПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТоварыПоПоставщикам.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТоварыПоПоставщикам.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТоварыПоПоставщикам.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТоварыПоПоставщикам.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС,
	|	ЭСФТоварыПоПоставщикам.СуммаНДС КАК СуммаНДС,
	|	ЭСФТоварыПоПоставщикам.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ЭСФТоварыПоПоставщикам.ДополнительныеДанные = """"
	|			ТОГДА ЭСФТовары.ДополнительныеДанные
	|		ИНАЧЕ ЭСФТоварыПоПоставщикам.ДополнительныеДанные
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФПоставщики.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.ТоварыПоПоставщикам КАК ЭСФТоварыПоПоставщикам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|			ПО ЭСФТоварыПоПоставщикам.НомерТовара = ЭСФТовары.НомерСтроки
	|				И ЭСФТоварыПоПоставщикам.Ссылка = ЭСФТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|			ПО ЭСФТоварыПоПоставщикам.Ссылка = ЭСФ.Ссылка
	|		ПО (ЭСФТоварыПоПоставщикам.Ссылка = ЭСФПоставщики.Ссылка)
	|			И (ЭСФТоварыПоПоставщикам.Идентификатор = ЭСФПоставщики.ПоставщикИдентификатор)
	|ГДЕ
	|	ЭСФТоварыПоПоставщикам.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТоварыПоПолучателям.Ссылка КАК Ссылка,
	|	ЭСФТоварыПоПолучателям.Идентификатор КАК Идентификатор,
	|	ЭСФТоварыПоПолучателям.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТовара,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТоварыПоПолучателям.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТоварыПоПолучателям.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТоварыПоПолучателям.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТоварыПоПолучателям.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ВЫБОР
	|		КОГДА ЭСФ.МестоРеализацииНеРК
	|			ТОГДА &ТекстБезНДСНеРК
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭСФТовары.БезНДС
	|					ТОГДА &ТекстБезНДС
	|				ИНАЧЕ ЭСФТовары.СтавкаНДСЧисло
	|			КОНЕЦ
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.БезНДС
	|				ИЛИ ЭСФ.МестоРеализацииНеРК
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭСФТовары.БезНДС,
	|	ЭСФТоварыПоПолучателям.СуммаНДС КАК СуммаНДС,
	|	ЭСФТоварыПоПолучателям.Сумма КАК Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ЭСФТоварыПоПолучателям.ДополнительныеДанные = """"
	|			ТОГДА ЭСФТовары.ДополнительныеДанные
	|		ИНАЧЕ ЭСФТоварыПоПолучателям.ДополнительныеДанные
	|	КОНЕЦ КАК ДополнительныеДанные,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФПолучатели.БИНРеорганизованногоЛица КАК БИНРеорганизованногоЛица
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.ТоварыПоПолучателям КАК ЭСФТоварыПоПолучателям
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|			ПО ЭСФТоварыПоПолучателям.НомерТовара = ЭСФТовары.НомерСтроки
	|				И ЭСФТоварыПоПолучателям.Ссылка = ЭСФТовары.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|			ПО ЭСФТоварыПоПолучателям.Ссылка = ЭСФ.Ссылка
	|		ПО (ЭСФТоварыПоПолучателям.Ссылка = ЭСФПолучатели.Ссылка)
	|			И (ЭСФТоварыПоПолучателям.Идентификатор = ЭСФПолучатели.ПолучательИдентификатор)
	|ГДЕ
	|	ЭСФТоварыПоПолучателям.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНалогов),
	|	СУММА(СуммаАкциза),
	|	СУММА(ОборотПоРеализации),
	|	СУММА(СуммаНДС),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЭСФ);
	Запрос.УстановитьПараметр("ТекстБезНДС", НСтр("ru = 'Без НДС'"));
	Запрос.УстановитьПараметр("ТекстБезНДСНеРК", НСтр("ru = 'Без НДС - не РК'"));
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеШапкиПоДокументам = Результат[0].Выбрать();
	ДанныеПоставщикиПоДокументам = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПолучателиПоДокументам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПоДокументам = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПоставщиковПоДокументам = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПолучателейПоДокументам = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивВерсий = новый Массив;
	СтруктураОбластейВерсия1 = новый Структура;
	СтруктураОбластейВерсия2 = новый Структура;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ОбменЭСФ.ПФ_MXL_ЭСФ");		
	
	
	//Области Макет версии 1
	СтруктураОбластейВерсия1.Вставить("ОбластьШапкаСФ", Макет.ПолучитьОбласть("ШапкаСФ_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделBШапка", Макет.ПолучитьОбласть("РазделBШапка_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделB", Макет.ПолучитьОбласть("РазделB_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделCШапка", Макет.ПолучитьОбласть("РазделCШапка_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделC", Макет.ПолучитьОбласть("РазделC_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделD", Макет.ПолучитьОбласть("РазделD_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделE", Макет.ПолучитьОбласть("РазделE_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделF", Макет.ПолучитьОбласть("РазделF_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделG", Макет.ПолучитьОбласть("РазделG_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHШапкаТаблица", Макет.ПолучитьОбласть("РазделGHШапкаТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHСтрокаТаблица", Макет.ПолучитьОбласть("РазделGHСтрокаТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделGHПодвалТаблица", Макет.ПолучитьОбласть("РазделGHПодвалТаблица_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_Заголовок", Макет.ПолучитьОбласть("РазделH_Заголовок_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_ВидТаблиц", Макет.ПолучитьОбласть("РазделH_ВидТаблиц_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделI", Макет.ПолучитьОбласть("РазделI_Версия1"));
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделJ", Макет.ПолучитьОбласть("РазделJ_Версия1"));	
	СтруктураОбластейВерсия1.Вставить("ОбластьРазделH_ЗаголовокТаблицы", Макет.ПолучитьОбласть("РазделH_ЗаголовокТаблицы_Версия1"));
	
	//Области Макет версии 2
	СтруктураОбластейВерсия2.Вставить("ОбластьШапкаСФ", Макет.ПолучитьОбласть("ШапкаСФ_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделBШапка", Макет.ПолучитьОбласть("РазделBШапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB", Макет.ПолучитьОбласть("РазделB_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB1Шапка", Макет.ПолучитьОбласть("РазделB1Шапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделB1", Макет.ПолучитьОбласть("РазделB1_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделCШапка", Макет.ПолучитьОбласть("РазделCШапка_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделC", Макет.ПолучитьОбласть("РазделC_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделC1", Макет.ПолучитьОбласть("РазделC1_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделD", Макет.ПолучитьОбласть("РазделD_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделE", Макет.ПолучитьОбласть("РазделE_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделF", Макет.ПолучитьОбласть("РазделF_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделG", Макет.ПолучитьОбласть("РазделG_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHШапкаТаблица", Макет.ПолучитьОбласть("РазделGHШапкаТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHСтрокаТаблица", Макет.ПолучитьОбласть("РазделGHСтрокаТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделGHПодвалТаблица", Макет.ПолучитьОбласть("РазделGHПодвалТаблица_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделH_Заголовок", Макет.ПолучитьОбласть("РазделH_Заголовок_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделH_ЗаголовокТаблицы", Макет.ПолучитьОбласть("РазделH_ЗаголовокТаблицы_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделI", Макет.ПолучитьОбласть("РазделI_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделJ", Макет.ПолучитьОбласть("РазделJ_Версия2"));	
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделK", Макет.ПолучитьОбласть("РазделK_Версия2"));
	СтруктураОбластейВерсия2.Вставить("ОбластьРазделL", Макет.ПолучитьОбласть("РазделL_Версия2"));

	МассивВерсий.Добавить(СтруктураОбластейВерсия1);
	МассивВерсий.Добавить(СтруктураОбластейВерсия2);

	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура_ЭСФ";
	
	Пока ДанныеШапкиПоДокументам.Следующий() Цикл
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ) Тогда
			ВерсияБланкаЭСФ = ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ;
		Иначе
			ВерсияБланкаЭСФ = 1;
		КонецЕсли;
		Если МассивВерсий.Количество() >= ВерсияБланкаЭСФ Тогда
			ОбластиМакета = МассивВерсий[ВерсияБланкаЭСФ-1];
		Иначе
			ОбластиМакета = МассивВерсий[МассивВерсий.Количество()-1];
		КонецЕсли;
		
		ПрефиксОбластейМакета = "_Версия" + Строка(ВерсияБланкаЭСФ);
		
		
		ДанныеПоставщикиПоДокументам.Сбросить();
		ДанныеПолучателиПоДокументам.Сбросить();
		ДанныеТоварыПоДокументам.Сбросить(); 	
		ДанныеТоварыПоставщиковПоДокументам.Сбросить();
		ДанныеТоварыПолучателейПоДокументам.Сбросить();
		
		ТабДокумент.Вывести(ОбластиМакета.ОбластьШапкаСФ);
		//Раздел А	
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделA.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделA);
			
			// Данные поставщиков по документу.	
		//Раздел В и В1
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделBШапка);
			ЭтоПервыйПоставщик = Истина;
			Если ДанныеПоставщикиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПоставщикиПоДокументу = ДанныеПоставщикиПоДокументам.Выбрать();
				ПоставщикКоличествоСД = ДанныеПоставщикиПоДокументу.Количество();
				Пока ДанныеПоставщикиПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB.Параметры, ДанныеПоставщикиПоДокументу);
					
					Если ВерсияБланкаЭСФ = 2 Тогда
						Если ДанныеПоставщикиПоДокументу.ЯвляетсяСтруктурнымПодразделениемНерезидента Тогда	
							ОбластиМакета.ОбластьРазделB.Параметры.ЯвляетсяСтруктурнымПодразделениемНерезидента = "v";
						Иначе
						    ОбластиМакета.ОбластьРазделB.Параметры.ЯвляетсяСтруктурнымПодразделениемНерезидента = "";
						КонецЕсли;
					КонецЕсли;
					
					Если ЭтоПервыйПоставщик Тогда
						Если ДанныеПоставщикиПоДокументу.УчастникСовместнойДеятельности 
							ИЛИ ДанныеПоставщикиПоДокументу.УчастникСРП Тогда
							ОбластиМакета.ОбластьРазделB.Параметры.ПоставщикКоличествоСД = ПоставщикКоличествоСД;
							Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ) И ДанныеШапкиПоДокументам.ВерсияБланкаЭСФ > 1 Тогда
								ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB1.Параметры, ДанныеПоставщикиПоДокументу);
							КонецЕсли;
						КонецЕсли;
						ЭтоПервыйПоставщик = Ложь;
					Иначе
						ОбластиМакета.ОбластьРазделB.УдалитьОбласть(ОбластиМакета.ОбластьРазделB.Область("ПоставщикиКоличествоСД" + ПрефиксОбластейМакета)); 
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB);
					Если ВерсияБланкаЭСФ = 2 Тогда
						ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделB1.Параметры, ДанныеПоставщикиПоДокументу);
						ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB1Шапка);
						ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделB1);
					КонецЕсли;
					
					
				КонецЦикла;
			КонецЕсли;
			
			// Данные покупателей по документу.
		//Раздел С
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделCШапка);
			ЭтоПервыйПолучатель = Истина;
			Пока ДанныеПолучателиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
				ДанныеПолучателиПоДокументу = ДанныеПолучателиПоДокументам.Выбрать();
				ПолучательКоличествоСД = ДанныеПолучателиПоДокументу.Количество();
				Пока ДанныеПолучателиПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделC.Параметры, ДанныеПолучателиПоДокументу);
					Если ЭтоПервыйПолучатель Тогда
						Если ДанныеПолучателиПоДокументу.УчастникСовместнойДеятельности 
							ИЛИ ДанныеПолучателиПоДокументу.УчастникСРП Тогда
							ОбластиМакета.ОбластьРазделC.Параметры.ПолучательКоличествоСД = ПолучательКоличествоСД;	
						КонецЕсли;
						ЭтоПервыйПолучатель = Ложь;
					Иначе
						ОбластиМакета.ОбластьРазделC.УдалитьОбласть(ОбластиМакета.ОбластьРазделC.Область("ПолучателиКоличествоСД" + ПрефиксОбластейМакета)); 
					КонецЕсли;
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделC);
				КонецЦикла;
			КонецЦикла;
			
			//Раздел С1
			Если ВерсияБланкаЭСФ = 2 Тогда
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГосучреждениеИИК)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГосучреждениеБИК) Тогда
					
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделC1.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделC1);
				КонецЕсли;
			КонецЕсли;


			
		//Раздел D
			
			Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузополучательИдентификатор)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузоотправительИдентификатор)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузополучательНаименование)
				ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ГрузоотправительНаименование)Тогда
				
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделD.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделD);
				
			КонецЕсли;
		//Раздел E	
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделE.Параметры, ДанныеШапкиПоДокументам);
			Если ВерсияБланкаЭСФ = 2 Тогда
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПоставкиДата) Тогда	
					ОбластиМакета.ОбластьРазделE.Параметры.НаличиеДоговораПоставки = "v";
					ОбластиМакета.ОбластьРазделE.Параметры.ОтсутствиеДоговораПоставки = "";
				Иначе
					ОбластиМакета.ОбластьРазделE.Параметры.ОтсутствиеДоговораПоставки = "v";
					ОбластиМакета.ОбластьРазделE.Параметры.НаличиеДоговораПоставки = "";
				КонецЕсли;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделE);
			//КонецЕсли;
			
		//Раздел F
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделF.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделF);	
			
		//Раздел G
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG);
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHШапкаТаблица.Параметры, ДанныеШапкиПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHШапкаТаблица);
			
			// Данные товаров по документу.
			Пока ДанныеТоварыПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
				ДанныеТоварыПоДокументу = ДанныеТоварыПоДокументам.Выбрать();
				Пока ДанныеТоварыПоДокументу.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры, ДанныеТоварыПоДокументу);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHСтрокаТаблица);
				КонецЦикла;
				
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHПодвалТаблица.Параметры, ДанныеТоварыПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHПодвалТаблица);
				
			КонецЦикла;
			
		//Раздел H
			/////////////////////////////////////////////////////////////////////////////
			// Участники СД.
			
			// Если поставщик или получатель участники СД, то вывести шапку раздела H.
			
			ПоставщикиУчастникиСД = Ложь;
			ПоставщикиУчастникиСРП = Ложь;
			ДанныеПоставщикиПоДокументам.Сбросить();
			Если ДанныеПоставщикиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПоставщикиПоДокументу = ДанныеПоставщикиПоДокументам.Выбрать();
				Если ДанныеПоставщикиПоДокументу.Следующий() Тогда
					Если ДанныеПоставщикиПоДокументу.УчастникСовместнойДеятельности Тогда
						ПоставщикиУчастникиСД = Истина;	
					КонецЕсли;
					Если ДанныеПоставщикиПоДокументу.УчастникСРП Тогда
						ПоставщикиУчастникиСРП = Истина;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолучателиУчастникиСД = Ложь;
			ПолучателиУчастникиСРП = Ложь;
			ДанныеПолучателиПоДокументам.Сбросить();
			Если ДанныеПолучателиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
				ДанныеПолучателиПоДокументу = ДанныеПолучателиПоДокументам.Выбрать();
				Если ДанныеПолучателиПоДокументу.Следующий() Тогда
					Если ДанныеПолучателиПоДокументу.УчастникСовместнойДеятельности Тогда
						ПолучателиУчастникиСД = Истина;	
					КонецЕсли;
					Если ДанныеПолучателиПоДокументу.УчастникСРП Тогда
						ПоставщикиУчастникиСРП = Истина;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПоставщикиУчастникиСД ИЛИ ПолучателиУчастникиСД 
				ИЛИ ПоставщикиУчастникиСРП ИЛИ ПоставщикиУчастникиСРП Тогда
				
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_Заголовок);			
				НомерТаблицыУчастникиСД = 1;
				
				Структура = Новый Структура;
				Структура.Вставить("ТоварыПоПоставщикам", ДанныеТоварыПоставщиковПоДокументам);
				Структура.Вставить("ТоварыПоПолучателям", ДанныеТоварыПолучателейПоДокументам);
				
				Для Каждого Элемент Из Структура Цикл
					
					ДанныеТоварыСДПоДокументам = Элемент.Значение;
					
					Если ДанныеТоварыСДПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
						
						Если ВерсияБланкаЭСФ = 1 Тогда
							
							ПоставщикиПолучатели = ?(Элемент.Ключ = "ТоварыПоПоставщикам", НСтр("ru = 'Поставщики'"), НСтр("ru = 'Получатели'"));
							
							ОбластиМакета.ОбластьРазделH_ВидТаблиц.Параметры.ПоставщикиПолучатели = ПоставщикиПолучатели;
							
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_ВидТаблиц);
							
						КонецЕсли;
						
						ДанныеТоварыСДПоСД = ДанныеТоварыСДПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ДанныеТоварыСДПоСД.Следующий() Цикл
							
							ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.Номер = НомерТаблицыУчастникиСД;
							ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.Идентификатор = ДанныеТоварыСДПоСД.Идентификатор;
														           																					
							ДанныеТоварыСД = ДанныеТоварыСДПоСД.Выбрать();
							НомерСтрокиСД = 1;
							
							Пока ДанныеТоварыСД.Следующий() Цикл
								Если ДанныеТоварыСД.Идентификатор = ДанныеТоварыСДПоСД.Идентификатор Тогда
									ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы.Параметры.БИНРеорганизованногоЛица = ДанныеТоварыСД.БИНРеорганизованногоЛица;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							ДанныеТоварыСД.Сбросить();
							
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH_ЗаголовокТаблицы);
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHШапкаТаблица);

							Пока ДанныеТоварыСД.Следующий() Цикл
								
								ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры, ДанныеТоварыСД);
								ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры.НомерСтроки = НомерСтрокиСД;
																
								ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHСтрокаТаблица);
								
								НомерСтрокиСД = НомерСтрокиСД + 1;
								
							КонецЦикла;
							
							ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHПодвалТаблица.Параметры, ДанныеТоварыСДПоСД);
							ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHПодвалТаблица);
							
							НомерТаблицыУчастникиСД = НомерТаблицыУчастникиСД + 1;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВерсияБланкаЭСФ = 1 Тогда
		//Раздел I версия 1
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДополнительныеСведения) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделI.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделI);
				КонецЕсли;
		//Раздел J версия 1			
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделJ.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделJ);
				
			ИначеЕсли ВерсияБланкаЭСФ = 2 Тогда 
				
		//Раздел I	
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаБИН)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаНаименование)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПоставщикаАдресМестонахождения)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПоставщикаНомер)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПоставщикаДата) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделI.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделI);
				КонецЕсли;
		//Раздел J	
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяБИН)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяНаименование)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ПоверенныйПокупателяАдресМестонахождения)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПокупателяНомер)
					ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДоговорПорученияПокупателяДата) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделJ.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделJ);
				КонецЕсли;
					
		//Раздел K				
				Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДополнительныеСведения) Тогда
					ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделK.Параметры, ДанныеШапкиПоДокументам);
					ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK);
				КонецЕсли;
				
		//Раздел L	
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделL.Параметры, ДанныеШапкиПоДокументам);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделL);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеШапкиПоДокументам.Ссылка);
						
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЕРСИЯ ОБРАБОТКИ

Функция ВерсияОбработки() Экспорт
	
	Возврат "v4.0.0 r2";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТКРЫТИЕ И ЗАКРЫТИЕ СЕССИИ

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF");
	Если ЗначениеЗаполнено(IDСессии) И СессияАктивна(IDСессии,ПрофильИСЭСФ, ВерсияИСЭСФ) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросCreateSession_Версия1");
	Иначе
		Макет = ПолучитьМакет("ЗапросCreateSession_Версия2");
	КонецЕсли;		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		Если ИнформацияОбОшибке.faultcode = "ns1:SecurityError" Тогда
						
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка. Некорректный пароль или логин.");
			
			ТекстСообщения = НСтр("ru = 'При открытии сессии произошла ошибка. Некорректный пароль или логин.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			ПризнакАвтоСинхронизации = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ИспользоватьДляРегламентногоЗадания;
			Если ПризнакАвтоСинхронизации Тогда
				
				ТекстСообщения = НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка. Некорректный пароль или логин.
				|У профиля %ПрофильИСЭСФ% снят признак ""Использовать для автоматической синхронизации с ИС ЭСФ"".'");
			
				ПрофильИСЭСФДляИзменения = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка.ПолучитьОбъект();
				ПрофильИСЭСФДляИзменения.ИспользоватьДляРегламентногоЗадания = Ложь;
				Попытка
					ПрофильИСЭСФДляИзменения.Записать();
				Исключение
				КонецПопытки;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПрофильИСЭСФ%", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ);

			КонецЕсли;	
				
			ВызватьИсключение ТекстСообщения;
			  
		Иначе		
			// прочие неклассифицированные ошибки
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При открытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При входе в ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'ОбменЭСФ.ОткрытьСессию'"), 
	УровеньЖурналаРегистрации.Информация,,,
	"Идентификатор сессии: " + ИдентификаторСессии);
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
КонецФункции

// См. ЭСФСервер.ЗакрытьСессию()
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияИСЭСФ = Неопределено, ЭтоРучноеЗакрытие = Ложь, ПарольАутентификации = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросCloseSession_Версия1");		
	Иначе
		Макет = ПолучитьМакет("ЗапросCloseSession_Версия2");		
	КонецЕсли;	
	
	Пароль = ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, ПарольАутентификации); 
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        Пароль);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			"При закрытии сессии произошла ошибка." + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'Сессия успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессию'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия: " + ИдентификаторСессии);

			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Если ЭтоРучноеЗакрытие Тогда
				
				Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
					ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
				КонецЕсли;
				
				Текст = НСтр("ru = 'Сессия по профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		Иначе
			
			Если ЭтоРучноеЗакрытие Тогда
				Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
				Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
			 	СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьСессиюПоДаннымПрофиля(Профиль, Пароль) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;

	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Профиль);
	
	Макет = ПолучитьМакет("ЗапросCloseSessionByCredentialsRequest");		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ?(ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации), ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации, Пароль)) ;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , ВерсияИСЭСФ);
	ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
	
	ИнформацияОбОшибке = Неопределено;
	
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиля'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение НСтр("ru = 'При закрытии сессии с ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	Иначе
		
		РезультатЗакрытия = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.closeSessionResponse, "status", Неопределено);
		
		СообщениеПользователя = Новый СообщениеПользователю;
		
		Если РезультатЗакрытия = "CLOSED" Тогда
						
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% успешно закрыта. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюПоДаннымПрофиля'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия по профилю: " + ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);

			ЭСФСервер.СохранитьИдентификаторСессии(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, "ESF", Неопределено);// очистка ID сессии
			
		ИначеЕсли РезультатЗакрытия = "NOT_FOUND" Тогда
			
			Текст = НСтр("ru = 'Сессия по организации %СтруктурнаяЕдиница% и профилю %ПрофильИСЭСФ% не активна, невозможно закрыть.'");
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		Иначе
			
			Текст = НСтр("ru = 'При закрытии сессии по профилю %ПрофильИСЭСФ% произошла ошибка.'");
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%",   ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//	currentSessionStatusResponse type currentSessionStatusResponse
// 	status type sessionStatus - type string with restriction - enum { 'OK', 'CLOSED', 'NOT_FOUND' }
Функция ПолучитьСтатусСессии(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СтатусСессии = Неопределено;	
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ЗапросCurrentSessionStatus");			
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервиса(ТекстЗапроса, ИмяСервисаSessionService(), , );
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессии'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Проверка статуса сессии: " + ИдентификаторСессии);
			
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СтатусСессии = ОтветXDTO.Body.currentSessionStatusResponse.status;	
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессииВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При проверке статуса сессии ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;    	              	

	Возврат СтатусСессии;

КонецФункции

Функция СессияАктивна(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияИСЭСФ = Неопределено) Экспорт
	
	СессияАктивна = Ложь;
	Если ВРЕГ(ПолучитьСтатусСессии(ИдентификаторСессии, ПрофильИСЭСФ, ВерсияИСЭСФ)) = "OK" Тогда
		СессияАктивна = Истина;
	КонецЕсли;	
	
	Возврат СессияАктивна;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ЭСФ

// Возвращает XML строку, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо поместить в XML строку для импорта в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  Строка - Строка, которую можно записать в файл, затем импортировать в ИС ЭСФ.
//  Если МассивЭСФ пустой или если есть ЭСФ, которые заполнены некорректно, то возвращается пустая строка.
//
Функция СоздатьXMLДляИмпортаВИСЭСФ(Знач МассивЭСФ) Экспорт
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВсеДокументыЗаполненыКорректно = Истина;
	
	// проверим, что возвращает процедура ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()
	// тк данные об уполномоченном лице заполняются в XML файле
	Если НЕ ЗначениеЗаполнено(ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Обнаружены ошибки при проверке. Не удалось автоматически заполнить поле ""Уполномоченный сотрудник""'"));
		ВсеДокументыЗаполненыКорректно = Ложь;
	КонецЕсли;
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл
		
		РезультатПроверки = ПроверитьЭСФ(СсылкаЭСФ);		
		СообщитьОбнаруженыОшибки(СсылкаЭСФ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			ВсеДокументыЗаполненыКорректно = Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	//ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	//ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	//ХМЛ будем выгружать всегда по актуальной версии ИС ЭСФ
	ВерсияИСЭСФ = АктуальнаяВерсияИСЭСФ();
	
	
	// При выгрузке тип подписи принудительно устанавливается в значение "УполномоченноеЛицо",
	// т.к. при загрузке в ИС ЭСФ узел signatureType должен обязательно присутствовать и быть заполненным.
	// При отправке ЭСФ средствами ИС ЭСФ устанавливается корректное значение.
	ТипПодписиЭСФ = Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо;
	
	КоллекцияInvoiceXML = Неопределено;
	СоздатьИсходящиеInvoice(МассивЭСФ, Ложь, ТипПодписиЭСФ, КоллекцияInvoiceXML, Неопределено, ,ВерсияИСЭСФ);
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		XML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><esf:invoiceContainer xmlns:a=""namespace.abstractInvoice"" xmlns:esf=""namespace.esf"" xmlns:v1=""namespace.v1""><invoiceSet>[invoiceSet]</invoiceSet></esf:invoiceContainer>";	
	Иначе
		XML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><esf:invoiceContainer xmlns:a=""abstractInvoice.esf"" xmlns:esf=""esf"" xmlns:v1=""v1.esf"" xmlns:v2=""v2.esf""><invoiceSet>[invoiceSet]</invoiceSet></esf:invoiceContainer>";		
	КонецЕсли;	
	
	invoiceSetXML = "";
	Для Каждого ЭлементКоллекции Из КоллекцияInvoiceXML Цикл
		InvoiceXML = ЭлементКоллекции.Значение;			
		invoiceSetXML = invoiceSetXML + InvoiceXML; 		
	КонецЦикла;	
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		// Добавить префикс к имени узлов invoice, т.к. это необходимо для импорта в ИС ЭСФ.
		invoiceSetXML = СтрЗаменить(invoiceSetXML, "<invoice>", "<v1:invoice>");
		invoiceSetXML = СтрЗаменить(invoiceSetXML, "</invoice>", "</v1:invoice>");	
	КонецЕсли;
		
	XML = СтрЗаменить(XML, "[invoiceSet]", invoiceSetXML);
	
	Возврат XML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ЭСФ

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ,
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		СоздатьИсходящиеInvoice_ВерсияАПИ1(МассивЭСФ, 
				УстанавливатьПодпись, 
				ТипПодписиЭСФ, 
				КоллекцияInvoiceXML, 
				КоллекцияSignedContentXML,
				УполномоченныйСотрудник,
				ВерсияИСЭСФ);
				
	Иначе
		СоздатьИсходящиеInvoice_ВерсияАПИ2(МассивЭСФ, 
				УстанавливатьПодпись, 
				ТипПодписиЭСФ, 
				КоллекцияInvoiceXML, 
				КоллекцияSignedContentXML,
				УполномоченныйСотрудник,
				ВерсияИСЭСФ);
	КонецЕсли;			
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice_ВерсияАПИ1(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаЭСФ_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл		
		
		// Чтобы при отправке ЭСФ не выполнять запись дважды:
		// При создании ЭСФ заполняются некоторые реквизиты ЭСФ, но ЭСФ не записывается.
		// При отправке ЭСФ данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись ЭСФ в методе ОтправитьИсходящиеInvoice().
		ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ОбъектЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ОбъектЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ОбъектЭСФ.ТипПодписи = ТипПодписиЭСФ;
		
		InvoiceXDTO = НовыйInvoice(ОбъектЭСФ, Фабрика, "InvoiceV1", ВерсияИСЭСФ);
		
		Если УстанавливатьПодпись Тогда
			InvoiceXDTO.signature = "[%ЭЦП%]";
		Иначе
			InvoiceXDTO.signature = ""; // ЭСФ без узла signature не импортируется в ИС ЭСФ. 
		КонецЕсли;
		
		InvoiceXML = ЭСФСервер.КаноническаяСтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "Invoice", Фабрика);
		
		// Доработать канонический XML.
		// платформа 8.3.9.1818 в клиент-сервере не удаляет теги xmlns, в файловой базе теги удаляются
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, " =""""", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "xmlns", "");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<Invoice =""namespace.v1"">", "<invoice>");	
		InvoiceXML = СтрЗаменить(InvoiceXML, "</Invoice>", "</invoice>");
		InvoiceXML = СтрЗаменить(InvoiceXML, "<default:", "<");
		InvoiceXML = СтрЗаменить(InvoiceXML, "</default:", "</");
		InvoiceXML = СтрЗаменить(InvoiceXML, " :default=""namespace.abstractInvoice"">", ">");
		
		КоллекцияInvoiceXML.Вставить(СсылкаЭСФ, InvoiceXML);
		
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			InvoiceHashXML = СтрЗаменить(InvoiceHashXML, "<signature>[%ЭЦП%]</signature>", ""); 
			КоллекцияSignedContentXML.Вставить(СсылкаЭСФ, InvoiceHashXML);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice_ВерсияАПИ2(
	Знач МассивЭСФ, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ, 
	КоллекцияInvoiceXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаЭСФ_XML_API_ЭЦП_Версия2();
	
	Для Каждого СсылкаЭСФ Из МассивЭСФ Цикл		
		
		// Чтобы при отправке ЭСФ не выполнять запись дважды:
		// При создании ЭСФ заполняются некоторые реквизиты ЭСФ, но ЭСФ не записывается.
		// При отправке ЭСФ данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись ЭСФ в методе ОтправитьИсходящиеInvoice().
		ОбъектЭСФ = СсылкаЭСФ.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ОбъектЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ОбъектЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ОбъектЭСФ.ТипПодписи = ТипПодписиЭСФ;
		
		InvoiceXDTO = НовыйInvoice(ОбъектЭСФ, Фабрика, "InvoiceV2", ВерсияИСЭСФ);
				
		InvoiceXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "invoice", Фабрика);
		
		//=========
		InvoiceXML = СтрЗаменить(InvoiceXML, "<invoice xmlns=""v2.esf"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<invoice>");
		InvoiceXML = СтрЗаменить(InvoiceXML, " xmlns=""abstractInvoice.esf""", "");		
		
		// Префикс версии		
		InvoiceXML = СтрЗаменить(InvoiceXML, "<invoice>", "<v2:invoice xmlns:a=""abstractInvoice.esf"" xmlns:v2=""v2.esf"">	");		
		InvoiceXML = СтрЗаменить(InvoiceXML, "</invoice>", "</v2:invoice>");		
		
		//Для отправки через API структура обернута в <invoiceBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			InvoiceHashXML = InvoiceXML;
			КоллекцияSignedContentXML.Вставить(СсылкаЭСФ, InvoiceHashXML);
			
			//Для отправки через API добавляем обертку <invoiceBody>
			InvoiceXML = "<invoiceBody><![CDATA[" + InvoiceXML + "]]></invoiceBody>";
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭСФ);
			InvoiceXML = "<invoiceUploadInfo>" + InvoiceXML + "<version>InvoiceV2</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType></invoiceUploadInfo>";
			
		КонецЕсли;

		КоллекцияInvoiceXML.Вставить(СсылкаЭСФ, InvoiceXML);
		
		
	КонецЦикла;
	
КонецПроцедуры

// Запись изменений в реквизитах ЭСФ после их отправки на сервер
Процедура ЗаписатьИзмененияЭСФПослеОтправкиПакета(РезультатОтправки, КоллекцияПодписей, УполномоченныйСотрудник)
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл		
		ЭСФ = ЭлементРезультата.Ключ.ПолучитьОбъект();
		
		ЭСФ.Идентификатор = ЭлементРезультата.Значение.Идентификатор;
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ЭСФ.ЭЦП = КоллекцияПодписей[ЭлементРезультата.Ключ];
		ЭСФ.ТипПодписи = ЭлементРезультата.Значение.ТипПодписи;
		
		Если ЭлементРезультата.Значение.Ошибки = Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементРезультата.Значение.Идентификатор) Тогда
				ЭСФ.Ошибки.Очистить();
			КонецЕсли;
		Иначе
			ЭСФ.Ошибки.Очистить();
			Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
				ОшибкиСтрока = ЭСФ.Ошибки.Добавить();
				ОшибкиСтрока.Текст = Ошибка.Текст;
				ОшибкиСтрока.Поле = Ошибка.Поле;
			КонецЦикла;
		КонецЕсли;
		
		// Очистить поля ЭСФ, которые будут заполнены после успешного приема в ИС ЭСФ.
		ЭСФ.РегистрационныйНомер = "";
		ЭСФ.Статус = Перечисления.СтатусыЭСФ.ПустаяСсылка();
		ЭСФ.ПользовательскийСтатус = Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка();
		
		ЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		ЭСФ.Записать();
		
		ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(ЭСФ.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьПакетИсходящихInvoice(ВерсияИСЭСФ, Знач КоллекцияInvoiceXMLПакета, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
		
	Если ИдентификаторСессии = Неопределено Тогда
		ТекстОшибки = "";
		
		Попытка
			ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		Исключение
			Если НЕ НеПерезаполнятьОчередьОтправки Тогда
				ЭСФСервер.ОчиститьОчередьОтправкиЭСФ(КоллекцияInvoiceXMLПакета)		
			КонецЕсли;
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗакрытьСессию = Истина;		
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	invoiceSet = "";
	Для Каждого ЭлементКоллекции Из КоллекцияInvoiceXMLПакета Цикл
		InvoiceXML = ЭлементКоллекции.Значение;
		ЭЦП = КоллекцияПодписей[ЭлементКоллекции.Ключ];
		InvoiceXML = СтрЗаменить(InvoiceXML, "[%ЭЦП%]", ЭЦП);		
		invoiceSet = invoiceSet + InvoiceXML + Символы.ПС; 		
	КонецЦикла;
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		// При отправке через API узлы <invoice> должны иметь префиксы nam1.
		invoiceSet = СтрЗаменить(invoiceSet, "<invoice>", "<nam1:invoice>");
		invoiceSet = СтрЗаменить(invoiceSet, "</invoice>", "</nam1:invoice>");	
	КонецЕсли;	
	
	ОтветXML = ВыполнитьSyncInvoiceRequest(invoiceSet, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОтправитьИсходящиеInvoice'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Отправлен пакет ЭСФ");
			
		РезультатОтправкиПакета = Новый Соответствие;                        		
		Для Каждого ЭлементКоллекции Из КоллекцияInvoiceXMLПакета Цикл
			InvoiceXML = ЭлементКоллекции.Значение;
			
			РезультатСтруктура = Новый Структура;
			
			Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
				InvoiceXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceXML, ФабрикаXDTO);
				//РезультатСтруктура = Новый Структура;
				РезультатСтруктура.Вставить("Номер", InvoiceXDTO.num);
				РезультатСтруктура.Вставить("Дата", InvoiceXDTO.date);
			Иначе	
				// Удалим Секцию CDATA для разбора XML
				InvoiceXMLБезCDATA = СтрЗаменить(InvoiceXML, "<![CDATA[", "");
				InvoiceXMLБезCDATA = СтрЗаменить(InvoiceXMLБезCDATA, "]]>", "");			
				InvoiceXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceXMLБезCDATA, ФабрикаXDTO);
				
				РезультатСтруктура.Вставить("Номер", InvoiceXDTO.invoiceBody.invoice.num);
				РезультатСтруктура.Вставить("Дата", InvoiceXDTO.invoiceBody.invoice.date);
			КонецЕсли;	
			
			
			РезультатСтруктура.Вставить("ТипПодписи", ЭСФКлиентСервер.ТипПодписиИБ(InvoiceXDTO.signatureType));
			РезультатСтруктура.Вставить("ПринятИСЭСФ", Ложь);
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатОтправкиПакета.Вставить(ЭлементКоллекции.Ключ, РезультатСтруктура);
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ЗаполнитьРезультатОтправкиИсходящихInvoice(ОтветXDTO, "declinedSet", РезультатОтправкиПакета);
		ЗаполнитьРезультатОтправкиИсходящихInvoice(ОтветXDTO, "acceptedSet", РезультатОтправкиПакета);
		
		ЗаписатьИзмененияЭСФПослеОтправкиПакета(РезультатОтправкиПакета, КоллекцияПодписей, УполномоченныйСотрудник);
		
		// Закомментированно в связи с изменения СДК АПИ ВС от 07.10.2019 года.
		
		//Если ЗакрытьСессию Тогда
		//	ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
		//	ИдентификаторСессии = Неопределено;
		//КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
		
		// очередь ЭСФ не очищаем, тк могут возникнуть проблемы с очередью при открытии
		// ошибки отправки обрабатываем через форм очереди повторной отправкой
		Если НЕ НеПерезаполнятьОчередьОтправки Тогда
			ЭСФСервер.ОчиститьОчередьОтправкиЭСФ(КоллекцияInvoiceXMLПакета)		
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОтправитьИсходящиеInvoice'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ВызватьИсключение НСтр("ru = 'При отправке исходящих ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции


// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, Знач КоллекцияInvoiceXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	ПредельныйРазмерПакетаИсходящихInvoice = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияInvoiceXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящихInvoice;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));

	РезультатОтправки = Новый Соответствие;
	// Сформируем пакеты на отправку с учетом предельного размера пакета
	СчетчикПакета = 0;
	НомерПакета = 0;
	КоллекцияInvoiceXMLПакета = новый Соответствие;
	Для Каждого ЭлементКоллекции Из КоллекцияInvoiceXML Цикл		
		СчетчикПакета = СчетчикПакета + 1;
		КоллекцияInvoiceXMLПакета.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		// Если это предельный размер пакета, то отправляем его и формируем новый
		Если (СчетчикПакета = ПредельныйРазмерПакетаИсходящихInvoice) ИЛИ (СчетчикПакета = ОбщийРазмерКолекцииНаОтправку) Тогда
			НомерПакета = НомерПакета + 1;
			
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Происходит отправка пакета электронных счетов-фактур %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);	
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			РезультатОтправкиПакета = ОтправитьПакетИсходящихInvoice(ВерсияИСЭСФ, КоллекцияInvoiceXMLПакета, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
			КоллекцияInvoiceXMLПакета.Очистить();
			ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета);
					
			// уменьшим количество оставшихся документов
			ОбщийРазмерКолекцииНаОтправку = ОбщийРазмерКолекцииНаОтправку - СчетчикПакета;
			СчетчикПакета = 0;
		КонецЕсли;		
		
	КонецЦикла;
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "Отправка завершена");
	
	СообщениеПользователя = Новый СообщениеПользователю;

	СообщениеПользователя.Текст = НСтр("ru = 'Отправка электронных счетов-фактур завершена.'");;
	СообщениеПользователя.Сообщить();

	// Обновим статусы отправленных ЭСФ, после завершения отправки всех пакетов
	ОбновитьДокументыЭСФПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияИСЭСФ);
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеInvoice", "Информация", , , "Обновлены статусы отправленных документов");
	
	//++ НЕ ЭСФ
	Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
		МассивЭСФДляПолученияИдентификаторов = Новый Массив;
		Для Каждого Элемент Из РезультатОтправки Цикл
			МассивЭСФДляПолученияИдентификаторов.Добавить(Элемент.Ключ);	
		КонецЦикла;
		ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭСФДляПолученияИдентификаторов, ПрофильИСЭСФ , ,Истина );	
	КонецЕсли;
	//-- НЕ ЭСФ
			
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета)
	Для Каждого ЭлементКоллекции Из РезультатОтправкиПакета Цикл
		РезультатОтправки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;		
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияИСЭСФ)
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных ЭСФ. 
	МассивИдентификаторовЭСФ = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При отправке исправленных ЭСФ, исправляемые ЭСФ, а также их дополнительные ЭСФ, 
	// автоматически становятся аннулированными в ИС ЭСФ.
	//
	// Для того, чтобы информация об аннулировании отобразилась в 1С, 
	// необходимо обновить статусы исправляемых ЭСФ и их дополнительных ЭСФ.
	Если ТипЗнч(ПрофильИСЭСФ.СтруктурнаяЕдиница) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	Иначе
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница;	
	КонецЕсли;
	ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(СтруктурнаяЕдиница, МассивИдентификаторовЭСФ);
	
	ПредельныйРазмерПакетаЭСФ = 1000;
	КоличествоЭСФ = МассивИдентификаторовЭСФ.Количество();
	СчетчикЭСФ = 0;
	МассивИдентификаторовЭСФДляОтправки = Новый Массив;
	
	Если КоличествоЭСФ > ПредельныйРазмерПакетаЭСФ Тогда
		
		Для Каждого СтрокаМассива Из МассивИдентификаторовЭСФ Цикл
			
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			МассивИдентификаторовЭСФДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных ЭСФ.
			ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовЭСФДляОтправки, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовЭСФДляОтправки.Очистить();
			
		КонецЦикла;
		
	Иначе

		// Выполнить обновление статусов отправленных ЭСФ.
		ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовЭСФ, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьInvoice(Знач ЭСФ, Знач Фабрика, Invoice, ВерсияЭСФ)
	
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ЗаполнитьInvoice_Версия1(ЭСФ, Фабрика, Invoice);
	Иначе
		ЗаполнитьInvoice_Версия2(ЭСФ, Фабрика, Invoice);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьInvoice_Версия1(Знач ЭСФ, Знач Фабрика, Invoice)
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	Если НЕ ПустаяСтрока(ЭСФ.ДополнительныеСведения) Тогда
		invoice.addInf = ЭСФ.ДополнительныеСведения;
	КонецЕсли;
	
	invoice.date = Формат(ЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	invoice.num = ЭСФ.Номер;
	invoice.invoiceType = ЭСФКлиентСервер.ВидИСЭСФ(ЭСФ.Вид);
 	invoice.operatorFullname = СокрЛП(ЭСФ.УполномоченныйСотрудник);
	//Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
	invoice.signatureType = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ЭСФ.ТипПодписи);
	//КонецЕсли;	
 	invoice.turnoverDate = Формат(ЭСФ.ДатаОборота, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	
	// Заполнить реквизиты связанного ЭСФ.
	Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) 
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер)
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФРегистрационныйНомер) Тогда
		
		relatedInvoice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "relatedInvoice", Фабрика);
		relatedInvoice.date = Формат(ЭСФ.СвязанныйЭСФДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		relatedInvoice.num = ЭСФ.СвязанныйЭСФНомер;
		relatedInvoice.registrationNumber = СокрЛП(ЭСФ.СвязанныйЭСФРегистрационныйНомер);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел B. Реквизиты поставщика.
	
	sellers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
	Для Каждого ПоставщикиСтрока Из ЭСФ.Поставщики Цикл
		
		seller = ЭСФСервер.НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комитент,                       "COMMITTENT",                 seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комиссионер,                    "BROKER",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспедитор,                     "FORWARDER",                  seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Лизингодатель,                  "LESSOR",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.ЭкспортерИлиУчастникСРП,        "EXPORTER",                   seller);
		
		seller.address = СокрЛП(ПоставщикиСтрока.Адрес);
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НаименованиеБанка) Тогда
			seller.bank = СокрЛП(ПоставщикиСтрока.НаименованиеБанка);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИК) Тогда
			seller.bik = ПоставщикиСтрока.БИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПоставщикиСтрока.СерияСвидетельстваПоНДС) Тогда
			seller.certificateNum = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			seller.certificateSeries = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ИИК) Тогда
			seller.iik = ПоставщикиСтрока.ИИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.КБе) Тогда
			seller.kbe = ПоставщикиСтрока.КБе;	
		КонецЕсли;
		
		// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
		// поэтому дополнительный может быть не принят в ИС ЭСФ.
		// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
		// в значение, которое установлено в основном.
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер) Тогда
			seller.deliveryDocNum = ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер;	
		КонецЕсли;
		
		// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
		// поэтому дополнительный может быть не принят в ИС ЭСФ.
		// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
		// в значение, которое установлено в основном.		
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата) Тогда
			seller.deliveryDocDate = Формат(ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		seller.name = СокрЛП(ПоставщикиСтрока.ПоставщикНаименование);
		seller.tin 	= ПоставщикиСтрока.ПоставщикИдентификатор;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДополнительныеСведения) Тогда
			seller.trailer = ПоставщикиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел C. Реквизиты получателя.
	
	customers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customers", Фабрика);
	Для Каждого ПолучателиСтрока Из ЭСФ.Получатели Цикл
		
		customer = ЭСФСервер.НовыйЭлементСпискаXDTO(customers.customer, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комитент,                       "COMMITTENT",                 customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комиссионер,                    "BROKER",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Лизингодатель,                  "LESSEE",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ГосударственноеУчреждение,      "PUBLIC_OFFICE",              customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Нерезидент,                     "NONRESIDENT",                customer);
		
		customer.address = ПолучателиСтрока.Адрес;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПолучателиСтрока.СерияСвидетельстваПоНДС) Тогда
			customer.certificateNum = ПолучателиСтрока.НомерСвидетельстваПоНДС;
			customer.certificateSeries = ПолучателиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		customer.name = СокрЛП(ПолучателиСтрока.ПолучательНаименование);
		customer.tin = ПолучателиСтрока.ПолучательИдентификатор;
		
		// Нерезидент может не иметь атрибута tin, во всех остальных случаях атрибут должен быть.
		Если ПустаяСтрока(ПолучателиСтрока.ПолучательИдентификатор) И ПолучателиСтрока.Нерезидент Тогда
			customer.Сбросить("tin");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.ДополнительныеСведения) Тогда
			customer.trailer = ПолучателиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	// Если все поля грузоотправителя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
	 
		consignor = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignor", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки) Тогда
			consignor.address = СокрЛП(ЭСФ.АдресОтправки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование) Тогда
			consignor.name = СокрЛП(ЭСФ.ГрузоотправительНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
			consignor.tin = СокрЛП(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если все поля грузополучателя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
	
		consignee = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignee", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки) Тогда
			consignee.address = СокрЛП(ЭСФ.АдресДоставки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование) Тогда
			consignee.name = СокрЛП(ЭСФ.ГрузополучательНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
			consignee.tin = СокрЛП(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел E. Условия поставки
	                                       
	deliveryTerm = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "deliveryTerm", Фабрика);
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиДата) И ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиНомер) Тогда
		deliveryTerm.contractDate = Формат(ЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		deliveryTerm.contractNum  = ЭСФ.ДоговорПоставкиНомер;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ПунктНазначения) Тогда
		deliveryTerm.destination = ЭСФ.ПунктНазначения;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиСпособОтправления) Тогда
		deliveryTerm.exerciseWay = ЭСФ.ДоговорПоставкиСпособОтправления;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияОплаты) Тогда
		deliveryTerm.term = ЭСФ.ДоговорПоставкиУсловияОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуНомер) И ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуДата) Тогда
		deliveryTerm.warrant = ЭСФ.ДоверенностьНаПоставкуНомер;
		deliveryTerm.warrantDate = Формат(ЭСФ.ДоверенностьНаПоставкуДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если НЕ ЭСФСервер.ЕстьУстановленныеСвойства(deliveryTerm) Тогда
		invoice.Сбросить("deliveryTerm");	
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты государственного учреждения.
	
	publicOffice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "publicOffice", Фабрика);
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеБИК) Тогда
		publicOffice.bik = ЭСФ.ГосучреждениеБИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеИИК) Тогда
		publicOffice.iik = ЭСФ.ГосучреждениеИИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
		publicOffice.payPurpose = ЭСФ.ГосучреждениеНазначениеПлатежа;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеКодТоваров) Тогда
		publicOffice.productCode = ЭСФ.ГосучреждениеКодТоваров;	
	КонецЕсли;
	
	// Узел <bik> не учитывается, т.к. он всегда заполнен значением "KKMFKZ2A",
	// также узел <bik> невозможно установить в значение Неопределено.
	Если НЕ ЗначениеЗаполнено(publicOffice.iik) 
		И НЕ ЗначениеЗаполнено(publicOffice.payPurpose)
		И НЕ ЗначениеЗаполнено(publicOffice.productCode) Тогда
		
		invoice.Сбросить("publicOffice");
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел G. Данные по товарам (работам, услугам).
	
	productSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "productSet", Фабрика);
	
	//Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
	//	products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(productSet, "products", Фабрика);
	//Иначе
	//	products = Неопределено;
	//КонецЕсли;
	
	Для Каждого ТоварыСтрока Из ЭСФ.Товары Цикл
		
		//Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		//	product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
		//Иначе
		product = ЭСФСервер.НовыйЭлементСпискаXDTO(productSet.product, Фабрика);
		//КонецЕсли;
		
		product.description = СокрЛП(ТоварыСтрока.ТоварНаименование);
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
			product.unitCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ТоварыСтрока.ЕдиницаИзмеренияНаименование) Тогда
			product.unitNomenclature = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияНаименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.Количество) Тогда
			product.quantity = ТоварыСтрока.Количество;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.Цена) Тогда
			product.unitPrice = ТоварыСтрока.Цена;
		КонецЕсли;
		
		product.priceWithoutTax  = ТоварыСтрока.СуммаБезНалогов;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseRate = ТоварыСтрока.СтавкаАкцизаЧисло;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СуммаАкциза) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseAmount = ТоварыСтрока.СуммаАкциза;
		КонецЕсли;
		
		product.turnoverSize = ТоварыСтрока.ОборотПоРеализации;
		
		Если ЭСФ.Поставщики.Количество() <> 0
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].НомерСвидетельстваПоНДС)
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].СерияСвидетельстваПоНДС)
		И НЕ ТоварыСтрока.БезНДС Тогда
		
			product.ndsRate = ТоварыСтрока.СтавкаНДСЧисло;			
			
		КонецЕсли;
		
		product.ndsAmount = ТоварыСтрока.СуммаНДС;
		
		product.priceWithTax = ТоварыСтрока.Сумма;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
			product.applicationNumberInCustomsUnion = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ДополнительныеДанные) Тогда
			product.additional = ТоварыСтрока.ДополнительныеДанные;
		КонецЕсли;
		
	КонецЦикла;
	
	productSet.currencyCode = ЭСФ.ВалютаКод;
	
	Если ЭСФ.ВалютаКод <> "KZT" Тогда
		productSet.currencyRate = ЭСФ.КурсВалюты;
	КонецЕсли;
	
	productSet.totalPriceWithoutTax = ЭСФ.Товары.Итог("СуммаБезНалогов");
	productSet.totalExciseAmount    = ЭСФ.Товары.Итог("СуммаАкциза");
	productSet.totalTurnoverSize    = ЭСФ.Товары.Итог("ОборотПоРеализации");
	productSet.totalNdsAmount       = ЭСФ.Товары.Итог("СуммаНДС");
	productSet.totalPriceWithTax    = ЭСФ.Товары.Итог("Сумма");
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел H. Сведения по участникам договора о совместной деятельности.
	
	Если ЭСФ.ТоварыПоПолучателям.Количество() <> 0 Тогда
		
		customerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПолучателям = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПолучателям);
		
		Для Каждого СтрокаТоварыПоПолучателю Из СгруппированныеТоварыПоПолучателям.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(customerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПолучателю.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПолучателю.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
								
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьInvoice_Версия2(Знач ЭСФ, Знач Фабрика, Invoice) // Отправка
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	#Область ОбщийРаздел
	Если НЕ ПустаяСтрока(ЭСФ.ДополнительныеСведения) Тогда
		invoice.addInf = ЭСФ.ДополнительныеСведения;
	КонецЕсли;
	
	invoice.date = Формат(ЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	invoice.num = ЭСФ.Номер;
	invoice.invoiceType = ЭСФКлиентСервер.ВидИСЭСФ(ЭСФ.Вид);
	invoice.operatorFullname = СокрЛП(ЭСФ.УполномоченныйСотрудник);
	invoice.turnoverDate = Формат(ЭСФ.ДатаОборота, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	Если ЗначениеЗаполнено(ЭСФ.ДатаВыпискиНаБумажномНосителе) Тогда
		invoice.datePaper = Формат(ЭСФ.ДатаВыпискиНаБумажномНосителе, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПричинаВыпискиНаБумажномНосителе) Тогда
		ТипСвойствоPaperReason = invoice.Тип().Свойства.Получить("reasonPaper").Тип;
		
		Если ЭСФ.ПричинаВыпискиНаБумажномНосителе = Перечисления.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа Тогда
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "UNLAWFUL_REMOVAL_REGISTRATION")
		ИначеЕсли ЭСФ.ПричинаВыпискиНаБумажномНосителе = Перечисления.ПричиныВыпискиСФНаБумаге.ПростойСистемы Тогда
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "DOWN_TIME")
		Иначе
			invoice.reasonPaper = Фабрика.Создать(ТипСвойствоPaperReason, "MISSING_REQUIREMENT")
		КонецЕсли;	
	КонецЕсли;	
	
	// Заполнить реквизиты связанного ЭСФ.
	Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) 
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер)
		ИЛИ ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФРегистрационныйНомер) Тогда
		
		relatedInvoice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "relatedInvoice", Фабрика);
		relatedInvoice.date = Формат(ЭСФ.СвязанныйЭСФДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		relatedInvoice.num = ЭСФ.СвязанныйЭСФНомер;
		relatedInvoice.registrationNumber = СокрЛП(ЭСФ.СвязанныйЭСФРегистрационныйНомер);
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел B. Реквизиты поставщика.
	
	#Область РеквизитыПоставщика
	sellers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
	Для Каждого ПоставщикиСтрока Из ЭСФ.Поставщики Цикл
		
		seller = ЭСФСервер.НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комитент,                       "COMMITTENT",                 seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Комиссионер,                    "BROKER",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспедитор,                     "FORWARDER",                  seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Лизингодатель,                  "LESSOR",                     seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Экспортер,        			  "EXPORTER",                   seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.УчастникСРП,        			  "SHARING_AGREEMENT_PARTICIPANT", seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.МеждународныйПеревозчик,        "TRANSPORTER", 				seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Доверитель,        			  "PRINCIPAL", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Адвокат,						  "LAWYER", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.СудебныйИсполнитель,			  "BAILIFF", 					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Медиатор,						  "MEDIATOR",					seller);
		УстановитьСтатусКонтрагента(Фабрика, ПоставщикиСтрока.Нотариус,					      "NOTARY",						seller);
		
		seller.address = СокрЛП(ПоставщикиСтрока.Адрес);
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НаименованиеБанка) Тогда
			seller.bank = СокрЛП(ПоставщикиСтрока.НаименованиеБанка);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИК) Тогда
			seller.bik = ПоставщикиСтрока.БИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПоставщикиСтрока.СерияСвидетельстваПоНДС) Тогда
			seller.certificateNum = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			seller.certificateSeries = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		seller.isBranchNonResident = ПоставщикиСтрока.ЯвляетсяСтруктурнымПодразделениемНерезидента;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ИИК) Тогда
			seller.iik = ПоставщикиСтрока.ИИК;	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.КБе) Тогда
			seller.kbe = ПоставщикиСтрока.КБе;	
		КонецЕсли;
		
		seller.name = СокрЛП(ПоставщикиСтрока.ПоставщикНаименование);
		seller.tin 	= ПоставщикиСтрока.ПоставщикИдентификатор;
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИНРеорганизованногоЛица) Тогда 
			seller.reorganizedTin = ПоставщикиСтрока.БИНРеорганизованногоЛица; 
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДополнительныеСведения) Тогда
			seller.trailer = ПоставщикиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если ПоставщикиСтрока.УчастникСовместнойДеятельности ИЛИ ПоставщикиСтрока.УчастникСРП Тогда
			seller.shareParticipation = ПоставщикиСтрока.ДоляУчастия;
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.БИНФилиала) Тогда
			seller.branchTin = ПоставщикиСтрока.БИНФилиала;
		КонецЕсли;	
			
	КонецЦикла;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел C. Реквизиты получателя.
	
	#Область РеквизитыПолучателя
	customers = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customers", Фабрика);
	Для Каждого ПолучателиСтрока Из ЭСФ.Получатели Цикл
		
		customer = ЭСФСервер.НовыйЭлементСпискаXDTO(customers.customer, Фабрика);
		
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комитент,                       "COMMITTENT",                 customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Комиссионер,                    "BROKER",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Лизингодатель,                  "LESSEE",                     customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСовместнойДеятельности, "JOINT_ACTIVITY_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ГосударственноеУчреждение,      "PUBLIC_OFFICE",              customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.НерезидентВерсия2,              "NONRESIDENT",                customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Доверитель, 					  "PRINCIPAL", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.УчастникСРП, 					  "SHARING_AGREEMENT_PARTICIPANT", customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.РозничнаяРеализация, 			  "RETAIL", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.ФизическоеЛицо, 			  	  "INDIVIDUAL", 				customer);
        УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Адвокат,						  "LAWYER", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.СудебныйИсполнитель,			  "BAILIFF", 					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Медиатор,						  "MEDIATOR",					customer);
		УстановитьСтатусКонтрагента(Фабрика, ПолучателиСтрока.Нотариус,					      "NOTARY",						customer);
        
		customer.address = ПолучателиСтрока.Адрес;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПолучателиСтрока.СерияСвидетельстваПоНДС) Тогда
			customer.certificateNum = ПолучателиСтрока.НомерСвидетельстваПоНДС;
			customer.certificateSeries = ПолучателиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;
		
		customer.name = СокрЛП(ПолучателиСтрока.ПолучательНаименование);
		customer.tin = ПолучателиСтрока.ПолучательИдентификатор;
		
		// Нерезидент может не иметь атрибута tin, во всех остальных случаях атрибут должен быть.
		Если ПустаяСтрока(ПолучателиСтрока.ПолучательИдентификатор) И (ПолучателиСтрока.НерезидентВерсия2 ИЛИ ПолучателиСтрока.РозничнаяРеализация ИЛИ ПолучателиСтрока.ФизическоеЛицо) Тогда
			customer.Сбросить("tin");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.ДополнительныеСведения) Тогда
			customer.trailer = ПолучателиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.БИНФилиала) Тогда
			customer.branchTin = ПолучателиСтрока.БИНФилиала;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолучателиСтрока.БИНРеорганизованногоЛица) Тогда
			customer.reorganizedTin = ПолучателиСтрока.БИНРеорганизованногоЛица;
		КонецЕсли;
		
		customer.countryCode = ?(НЕ ПустаяСтрока(ПолучателиСтрока.КодСтраны), СокрЛП(ПолучателиСтрока.КодСтраны), "KZ");
		
		Если ПолучателиСтрока.УчастникСовместнойДеятельности ИЛИ ПолучателиСтрока.УчастникСРП Тогда	
			customer.shareParticipation = ПолучателиСтрока.ДоляУчастия;
		КонецЕсли;	
		
	КонецЦикла;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	#Область РеквизитыГрузополучателяГрузоотправителя
	// Если все поля грузоотправителя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
	 
		consignor = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignor", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресОтправки) Тогда
			consignor.address = СокрЛП(ЭСФ.АдресОтправки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительНаименование) Тогда
			consignor.name = СокрЛП(ЭСФ.ГрузоотправительНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда
			consignor.tin = СокрЛП(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если все поля грузополучателя пустые, то не нужно добавлять элемент consignor.
	Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование)
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) 
	 ИЛИ НЕ ПустаяСтрока(ЭСФ.ГрузополучательКодСтраны) Тогда
	
		consignee = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "consignee", Фабрика);
		
		// Узлы address, name, tin, добавляются, только если они заполнены.
		
		Если НЕ ПустаяСтрока(ЭСФ.АдресДоставки) Тогда
			consignee.address = СокрЛП(ЭСФ.АдресДоставки);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательНаименование) Тогда
			consignee.name = СокрЛП(ЭСФ.ГрузополучательНаименование);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда
			consignee.tin = СокрЛП(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
		consignee.countryCode = ?(НЕ ПустаяСтрока(ЭСФ.ГрузополучательКодСтраны), СокрЛП(ЭСФ.ГрузополучательКодСтраны), "KZ");
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел E. Условия поставки
	#Область УсловияПоставки                                       
	deliveryTerm = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "deliveryTerm", Фабрика);
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиДата) И ЗначениеЗаполнено(ЭСФ.ДоговорПоставкиНомер) Тогда
		deliveryTerm.contractDate = Формат(ЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
		deliveryTerm.contractNum  = ЭСФ.ДоговорПоставкиНомер;
		deliveryTerm.hasContract = Истина;
	Иначе
		deliveryTerm.hasContract = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ПунктНазначения) Тогда
		deliveryTerm.destination = ЭСФ.ПунктНазначения;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияПоставки) Тогда
		deliveryTerm.deliveryConditionCode = СокрЛП(ЭСФ.ДоговорПоставкиУсловияПоставки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЭСФ.СпособОтправленияПоКлассификатору) Тогда
		deliveryTerm.transportTypeCode = ЭСФ.СпособОтправленияПоКлассификатору;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ЭСФ.ДоговорПоставкиУсловияОплаты) Тогда
		deliveryTerm.term = ЭСФ.ДоговорПоставкиУсловияОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуНомер) И ЗначениеЗаполнено(ЭСФ.ДоверенностьНаПоставкуДата) Тогда
		deliveryTerm.warrant = ЭСФ.ДоверенностьНаПоставкуНомер;
		deliveryTerm.warrantDate = Формат(ЭСФ.ДоверенностьНаПоставкуДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если НЕ ЭСФСервер.ЕстьУстановленныеСвойства(deliveryTerm) Тогда
		invoice.Сбросить("deliveryTerm");	
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты документов, подтверждающих поставку товаров, работ, услуг.

	#Область ДокументыПоставки
	// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
	// поэтому дополнительный может быть не принят в ИС ЭСФ.
	// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
	// в значение, которое установлено в основном.
	Если НЕ ПустаяСтрока(ЭСФ.ДокументПодтверждающийПоставкуНомер) Тогда
		invoice.deliveryDocNum = ЭСФ.ДокументПодтверждающийПоставкуНомер;
	КонецЕсли;
	
	// В дополнительном и основном ЭСФ могут различаться значения данного реквизита,
	// поэтому дополнительный может быть не принят в ИС ЭСФ.
	// Сейчас пользователю потребуется вручную установить данный реквизит в дополнительном,
	// в значение, которое установлено в основном.		
	Если ЗначениеЗаполнено(ЭСФ.ДокументПодтверждающийПоставкуДата) Тогда
		invoice.deliveryDocDate = Формат(ЭСФ.ДокументПодтверждающийПоставкуДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел F. Реквизиты государственного учреждения.
	
	#Область РеквизитыГУ
	publicOffice = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "publicOffice", Фабрика);
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеБИК) Тогда
		publicOffice.bik = ЭСФ.ГосучреждениеБИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеИИК) Тогда
		publicOffice.iik = ЭСФ.ГосучреждениеИИК;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеНазначениеПлатежа) Тогда
		publicOffice.payPurpose = ЭСФ.ГосучреждениеНазначениеПлатежа;	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭСФ.ГосучреждениеКодТоваров) Тогда
		publicOffice.productCode = ЭСФ.ГосучреждениеКодТоваров;	
	КонецЕсли;
	
	// Узел <bik> не учитывается, т.к. он всегда заполнен значением "KKMFKZ2A",
	// также узел <bik> невозможно установить в значение Неопределено.
	Если НЕ ЗначениеЗаполнено(publicOffice.iik) 
		И НЕ ЗначениеЗаполнено(publicOffice.payPurpose)
		И НЕ ЗначениеЗаполнено(publicOffice.productCode) Тогда
		
		invoice.Сбросить("publicOffice");
		
	КонецЕсли;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел G. Данные по товарам (работам, услугам).
	
	#Область ДанныеПоТоварам
	productSet = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "productSet", Фабрика);
	products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(productSet, "products", Фабрика);
	
	Для Каждого ТоварыСтрока Из ЭСФ.Товары Цикл
		
		product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
		//++ НЕ ЭСФ
		Если ВССервер.ИспользоватьСНТ() Тогда
			Если ЗначениеЗаполнено(ЭСФ.СНТ) ИЛИ СтрНайти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0 Тогда
				Если ЗначениеЗаполнено(ТоварыСтрока.НомерИзСНТ) Тогда
					product.productNumberInSnt = СокрЛП(ТоварыСтрока.НомерИзСНТ); // Номер продукта (товара, услуги) из СНТ (G 1)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//-- НЕ ЭСФ
		product.description = СокрЛП(ТоварыСтрока.ТоварНаименование);
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
			product.unitCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТоварыСтрока.ЕдиницаИзмеренияКод) Тогда
			product.unitNomenclature = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияКод);
		КонецЕсли;

		Если СокрЛП(ТоварыСтрока.ПризнакПроисхождения)<>"6" или ЗначениеЗаполнено(ТоварыСтрока.Количество) ТОгда
			product.quantity = ТоварыСтрока.Количество;
		КонецЕсли;

		product.unitPrice = ТоварыСтрока.Цена;
		
		product.priceWithoutTax  = ТоварыСтрока.СуммаБезНалогов;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseRate = ТоварыСтрока.СтавкаАкцизаЧисло;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТоварыСтрока.СуммаАкциза) ИЛИ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			product.exciseAmount = ТоварыСтрока.СуммаАкциза;
		КонецЕсли;
		
		product.turnoverSize = ТоварыСтрока.ОборотПоРеализации;
		
		Если ЭСФ.Поставщики.Количество() <> 0
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].НомерСвидетельстваПоНДС)
		И НЕ ПустаяСтрока(ЭСФ.Поставщики[0].СерияСвидетельстваПоНДС)
		И НЕ ТоварыСтрока.БезНДС Тогда
		
			product.ndsRate = ТоварыСтрока.СтавкаНДСЧисло;
			
		КонецЕсли;
		
		product.ndsAmount = ТоварыСтрока.СуммаНДС;
		
		product.priceWithTax = ТоварыСтрока.Сумма;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
			product.productDeclaration = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименованиеВРамкахТС) Тогда
			product.tnvedName = ТоварыСтрока.ТоварНаименованиеВРамкахТС;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) Тогда
			product.productNumberInDeclaration = ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ПризнакПроисхождения) Тогда
			product.truOriginCode = СокрЛП(ТоварыСтрока.ПризнакПроисхождения);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ТоварыСтрока.ДополнительныеДанные) Тогда
			product.additional = ТоварыСтрока.ДополнительныеДанные;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТоварыСтрока.ИдентификаторТовара) Тогда
			product.catalogTruId = ТоварыСтрока.ИдентификаторТовара;
		КонецЕсли;			
					
	КонецЦикла;
	
	productSet.currencyCode = ЭСФ.ВалютаКод;
	
	Если ЭСФ.ВалютаКод <> "KZT" Тогда
		productSet.currencyRate = ЭСФ.КурсВалюты;
	КонецЕсли;
	
	Если ЭСФ.МестоРеализацииНеРК Тогда
		productSet.ndsRateType = ЭСФКлиентСервер.МестоРеализацииНеРКИСЭСФ(ЭСФ.МестоРеализацииНеРК);
	КонецЕсли;
	
	productSet.totalPriceWithoutTax = ЭСФ.Товары.Итог("СуммаБезНалогов");
	productSet.totalExciseAmount    = ЭСФ.Товары.Итог("СуммаАкциза");
	productSet.totalTurnoverSize    = ЭСФ.Товары.Итог("ОборотПоРеализации");
	productSet.totalNdsAmount       = ЭСФ.Товары.Итог("СуммаНДС");
	productSet.totalPriceWithTax    = ЭСФ.Товары.Итог("Сумма");
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел H. Сведения по участникам договора о совместной деятельности.
	#Область УчастникиСД
	Если ЭСФ.ТоварыПоПоставщикам.Количество() <> 0 Тогда
		
		sellerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "sellerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПоставщикам = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПоставщикам);
		
		Для Каждого СтрокаТоварыПоПоставщику Из СгруппированныеТоварыПоПоставщикам.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(sellerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПоставщику.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПоставщику.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
				
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
				Если ВССервер.ИспользоватьСНТ() Тогда
					Если ЗначениеЗаполнено(ЭСФ.СНТ) ИЛИ СтрНайти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0 Тогда
						Если ЗначениеЗаполнено(СтрокаТовары.НомерИзСНТ) Тогда
							share.productNumberInSnt = СокрЛП(СтрокаТовары.НомерИзСНТ); // Номер продукта (товара, услуги) из СНТ (H 1)
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Если ЭСФ.ТоварыПоПолучателям.Количество() <> 0 Тогда
		
		customerParticipants = ЭСФСервер.НовоеСвойствоОбъектаXDTO(invoice, "customerParticipants", Фабрика);
		
		СгруппированныеТоварыПоПолучателям = СгруппированнаяТаблицаТоваровПоУчастникамСД(ЭСФ.ТоварыПоПолучателям);
		
		Для Каждого СтрокаТоварыПоПолучателю Из СгруппированныеТоварыПоПолучателям.Строки Цикл
			
			participant = ЭСФСервер.НовыйЭлементСпискаXDTO(customerParticipants.participant, Фабрика);
			participant.tin = СтрокаТоварыПоПолучателю.Идентификатор;
			
			productShares = ЭСФСервер.НовоеСвойствоОбъектаXDTO(participant, "productShares", Фабрика);
			
			Для Каждого СтрокаТовары Из СтрокаТоварыПоПолучателю.Строки Цикл
				
				share = ЭСФСервер.НовыйЭлементСпискаXDTO(productShares.share, Фабрика);
				
				share.productNumber = СтрокаТовары.НомерТовара;
				share.quantity = СтрокаТовары.Количество;
				share.priceWithoutTax = СтрокаТовары.СуммаБезНалогов;
				share.exciseAmount = СтрокаТовары.СуммаАкциза;
				share.turnoverSize = СтрокаТовары.ОборотПоРеализации;
				share.ndsAmount = СтрокаТовары.СуммаНДС;
				share.priceWithTax = СтрокаТовары.Сумма;
								
				Если ЗначениеЗаполнено(СтрокаТовары.ДополнительныеДанные) Тогда
					share.additional = СтрокаТовары.ДополнительныеДанные;
				КонецЕсли;
				Если ВССервер.ИспользоватьСНТ() Тогда
					Если ЗначениеЗаполнено(ЭСФ.СНТ) ИЛИ СтрНайти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0 Тогда
						Если ЗначениеЗаполнено(СтрокаТовары.НомерИзСНТ) Тогда
							share.productNumberInSnt = СокрЛП(СтрокаТовары.НомерИзСНТ); // Номер продукта (товара, услуги) из СНТ (H 1)
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел I. Поверенный поставщика
	#Область ПоверенныйПоставщика
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаБИН) Тогда
		invoice.sellerAgentTin = ЭСФ.ПоверенныйПоставщикаБИН; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаНаименование) Тогда
		invoice.sellerAgentName = ЭСФ.ПоверенныйПоставщикаНаименование; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПоставщикаАдресМестонахождения) Тогда
		invoice.sellerAgentAddress = ЭСФ.ПоверенныйПоставщикаАдресМестонахождения; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПоставщикаНомер) Тогда
		invoice.sellerAgentDocNum = ЭСФ.ДоговорПорученияПоставщикаНомер; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПоставщикаДата) Тогда
		invoice.sellerAgentDocDate = Формат(ЭСФ.ДоговорПорученияПоставщикаДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); 	
	КонецЕсли;
	#КонецОбласти
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел  J. Поверенный поставщика
	#Область ПоверенныйПокупателя
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяБИН) Тогда
		invoice.customerAgentTin = ЭСФ.ПоверенныйПокупателяБИН; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяНаименование) Тогда
		invoice.customerAgentName = ЭСФ.ПоверенныйПокупателяНаименование; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ПоверенныйПокупателяАдресМестонахождения) Тогда
		invoice.customerAgentAddress = ЭСФ.ПоверенныйПокупателяАдресМестонахождения; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПокупателяНомер) Тогда
		invoice.customerAgentDocNum = ЭСФ.ДоговорПорученияПокупателяНомер; 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭСФ.ДоговорПорученияПокупателяДата) Тогда
		invoice.customerAgentDocDate = Формат(ЭСФ.ДоговорПорученияПокупателяДата, "ДФ=dd.MM.yyyy; ДП=01.01.0001"); 	
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Возвращает таблицу ТоварыПоПоставщикам, ТоварыПоПолучателям 
// сгруппированную по полю Идентификатор 
// и упорядоченную по полям Идентификатор и НомерТовара.
//
// Параметры:
//  ТаблицаТоваровПоУчастникамСД - Табличная часть - Табличная часть:
//   ТоварыПоПоставщикам или ТоварыПоПолучателям.
//
// Возвращаемое значение:
//  ДеревоЗначений - Сгруппированная таблица.
//
Функция СгруппированнаяТаблицаТоваровПоУчастникамСД(Знач ТаблицаТоваровПоУчастникамСД)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровПоУчастникамСД.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваровПоУчастникамСД.НомерТовара КАК НомерТовара,
	|	ТаблицаТоваровПоУчастникамСД.Количество КАК Количество,
	|	ТаблицаТоваровПоУчастникамСД.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ТаблицаТоваровПоУчастникамСД.СуммаАкциза КАК СуммаАкциза,
	|	ТаблицаТоваровПоУчастникамСД.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаТоваровПоУчастникамСД.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваровПоУчастникамСД.Сумма КАК Сумма,
	|	ТаблицаТоваровПоУчастникамСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ТаблицаТоваровПоУчастникамСД.НомерИзСНТ КАК НомерИзСНТ
	|ПОМЕСТИТЬ ТаблицаТоваровПоУчастникамСД
	|ИЗ
	|	&ТаблицаТоваровПоУчастникамСД КАК ТаблицаТоваровПоУчастникамСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваровПоУчастникамСД.Идентификатор КАК Идентификатор,
	|	ТаблицаТоваровПоУчастникамСД.НомерТовара КАК НомерТовара,
	|	ТаблицаТоваровПоУчастникамСД.Количество КАК Количество,
	|	ТаблицаТоваровПоУчастникамСД.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ТаблицаТоваровПоУчастникамСД.СуммаАкциза КАК СуммаАкциза,
	|	ТаблицаТоваровПоУчастникамСД.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ТаблицаТоваровПоУчастникамСД.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваровПоУчастникамСД.Сумма КАК Сумма,
	|	ТаблицаТоваровПоУчастникамСД.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ТаблицаТоваровПоУчастникамСД.НомерИзСНТ КАК НомерИзСНТ
	|ИЗ
	|	ТаблицаТоваровПоУчастникамСД КАК ТаблицаТоваровПоУчастникамСД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	НомерТовара
	|ИТОГИ ПО
	|	Идентификатор";	
	Запрос.УстановитьПараметр("ТаблицаТоваровПоУчастникамСД", ТаблицаТоваровПоУчастникамСД);	
	
	СгруппированнаяТаблицаТоваровПоУчастникамСД = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Возврат СгруппированнаяТаблицаТоваровПоУчастникамСД;
	
КонецФункции

// Устанавливает статус для customer или seller, например, "NONRESIDENT".
//
// Параметры:
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания списка statuses, если его нет.
//  СтатусИБ - Булево - Если Истина, то СтатусИСЭСФ будет добавлен в КонтрагентXDTO, иначе нет.
//  СтатусИСЭСФ - Строка - Статус, который будет добавлен в КонтрагентXDTO, если СтатусИБ будет Истина.
//  КонтрагентXDTO - ОбъектXDTO - Объект customer или seller, в который будет добавлен СтатусИСЭСФ, если СтатусИБ будет Истина.
//
Процедура УстановитьСтатусКонтрагента(Знач Фабрика, Знач СтатусИБ, Знач СтатусИСЭСФ, КонтрагентXDTO)
	
	Если СтатусИБ = Истина Тогда
		
		statuses = ЭСФСервер.ПолучитьСвойство(КонтрагентXDTO, "statuses", Неопределено);
		
		Если statuses = Неопределено Тогда
			statuses = ЭСФСервер.НовоеСвойствоОбъектаXDTO(КонтрагентXDTO, "statuses", Фабрика);			
		КонецЕсли;
		
		status = ЭСФСервер.НовыйЭлементСпискаXDTO(statuses.status, Фабрика, СтатусИСЭСФ);
		status = СтатусИСЭСФ;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйInvoice(Знач ЭСФ, Знач Фабрика, Знач ВерсияЭСФ = "InvoiceV2", ВерсияИСЭСФ)
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ПространствоИмен = "namespace.v1"
	Иначе
		ПространствоИмен = "v2.esf"
	КонецЕсли;	
		
	ТипInvoice = Фабрика.Тип(ПространствоИмен, ВерсияЭСФ);
	invoice = Фабрика.Создать(ТипInvoice);
	
	Заполнитьinvoice(ЭСФ, Фабрика, invoice, ВерсияЭСФ);
	
	Возврат invoice;
	
КонецФункции

Функция ВыполнитьSyncInvoiceRequest(Знач invoiceSetXML, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияИСЭСФ)
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		ШаблонЗапроса = ПолучитьМакет("ЗапросSyncInvoice_Версия1").ПолучитьТекст();	
	Иначе
		ШаблонЗапроса = ПолучитьМакет("ЗапросSyncInvoice_Версия2").ПолучитьТекст();
	КонецЕсли;
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[invoiceSet]", invoiceSetXML);
	
	ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаUploadInvoiceService(),,ВерсияИСЭСФ); 	
	
	Если ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда		
		ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаUploadInvoiceService(),,ВерсияИСЭСФ); 
	КонецЕсли;
	
	Возврат ОтветXML;
	
КонецФункции

Процедура ЗаполнитьРезультатОтправкиИсходящихInvoice(Знач ОтветXDTO, Знач ИмяЭлемента, Результат)
	
	resultSet = ОтветXDTO.Body.syncInvoiceResponse[ИмяЭлемента];
	standardResponseList = ЭСФСервер.ПолучитьСвойство(resultSet, "standardResponse", Неопределено);	
	
	Если standardResponseList = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	standardResponseList = ЭСФСервер.СписокXDTOИзОбъектXDTO(standardResponseList);
	
	Для Индекс = 0 По standardResponseList.Количество() - 1 Цикл
		
		standardResponse = standardResponseList.Получить(Индекс);
		
		Для Каждого ЭлементРезультата Из Результат Цикл
			
			Если ЭлементРезультата.Значение.Номер = standardResponse.num 
			   И ЭлементРезультата.Значение.Дата = standardResponse.date Тогда
				
				ЭлементРезультата.Значение.ПринятИСЭСФ = ?(ИмяЭлемента = "acceptedSet", Истина, Ложь);
				ЭлементРезультата.Значение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "id", "");
				
				errors = ЭСФСервер.ПолучитьСвойство(standardResponse, "errors", Неопределено);
				Если errors <> Неопределено Тогда
					errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
					ЭлементРезультата.Значение.Ошибки = Новый Массив;
					Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
						error = errorsList.Получить(ИндексОшибки);
						ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
						// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
						// с сервера на клиент приводи к ошибке мутабельного значения.
						Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
							ОшибкаПоле = "";
						КонецЕсли;
						ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
						Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
						ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ЭСФ, которые необходимо аннулировать для выписки исправленных ЭСФ.
//
// Параметры:
//  МассивИсправленныхЭСФ - Массив - Массив исправленных ЭСФ, для которых необходимо найти ЭСФ, 
//   которые необходимо аннулировать перед выпиской исправленных.
//
// Возвращаемое значение:
//  Соответствие - ЭСФ, которые необходимо аннулировать.
//   |- Ключ - ДокументСсылка.ЭСФ - Исправленный ЭСФ.
//   |- Значение - Массив - Массив ЭСФ, которые необходимо аннулировать, перед выпиской исправленного ЭСФ.
//       Каждый элемент массива имеет тип ДокументСсылка.ЭСФ.
//
Функция АннулируемыеЭСФ(Знач МассивИсправленныхЭСФ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ИсправленныйЭСФ,
	|	ЭСФ.СвязанныйЭСФ КАК АннулируемыйЭСФ,
	|	ЭСФ.СвязанныйЭСФ.Статус КАК СтатусАннулируемогоЭСФ
	|ПОМЕСТИТЬ АннулируемыеОбычныеЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивИсправленныхЭСФ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АннулируемыйЭСФ,
	|	СтатусАннулируемогоЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АннулируемыеОбычныеЭСФ.ИсправленныйЭСФ КАК ИсправленныйЭСФ,
	|	АннулируемыеОбычныеЭСФ.АннулируемыйЭСФ КАК АннулируемыйЭСФ,
	|	АннулируемыеОбычныеЭСФ.СтатусАннулируемогоЭСФ
	|ПОМЕСТИТЬ АннулируемыеОбычныеИДополнительныеЭСФ
	|ИЗ
	|	АннулируемыеОбычныеЭСФ КАК АннулируемыеОбычныеЭСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АннулируемыеОбычныеЭСФ.ИсправленныйЭСФ,
	|	ЭСФ.Ссылка,
	|	ЭСФ.Статус
	|ИЗ
	|	АннулируемыеОбычныеЭСФ КАК АннулируемыеОбычныеЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО АннулируемыеОбычныеЭСФ.АннулируемыйЭСФ = ЭСФ.СвязанныйЭСФ
	|			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АннулируемыйЭСФ,
	|	СтатусАннулируемогоЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АннулируемыеЭСФ.ИсправленныйЭСФ КАК ИсправленныйЭСФ,
	|	АннулируемыеЭСФ.АннулируемыйЭСФ
	|ИЗ
	|	АннулируемыеОбычныеИДополнительныеЭСФ КАК АннулируемыеЭСФ
	|ГДЕ
	|	АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Отозванный)
	|	И АннулируемыеЭСФ.СтатусАннулируемогоЭСФ <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Аннулированный)
	|ИТОГИ ПО
	|	ИсправленныйЭСФ";
	
	Запрос.УстановитьПараметр("МассивИсправленныхЭСФ", МассивИсправленныхЭСФ);
	Результат = Запрос.Выполнить();
	
	// Заполнить результат пустыми значениями.
	АннулируемыеЭСФ = Новый Соответствие;
	Для Каждого ИсправленныйЭСФ Из МассивИсправленныхЭСФ Цикл
		АннулируемыеЭСФ.Вставить(ИсправленныйЭСФ, Новый Массив);
	КонецЦикла;
	
	// Заполнить результат аннулируемыми ЭСФ.
	ВыборкаИсправленныйЭСФ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИсправленныйЭСФ.Следующий() Цикл
		МассивАнулируемыхЭСФ = АннулируемыеЭСФ[ВыборкаИсправленныйЭСФ.ИсправленныйЭСФ];
		ВыборкаДетальныеЗаписи = ВыборкаИсправленныйЭСФ.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивАнулируемыхЭСФ.Добавить(ВыборкаДетальныеЗаписи.АннулируемыйЭСФ);	
		КонецЦикла;
	КонецЦикла;
	
	Возврат АннулируемыеЭСФ;
	
КонецФункции

Процедура ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(Знач СтруктурнаяЕдиница, МассивИдентификаторовЭСФ)
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать пустые параметры поиска исправленных ЭСФ.	
		
	ИменаРеквизитов = "ПометкаУдаления, Идентификатор, Направление, Вид";
	ПараметрыПоискаЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить параметры поиска исправленных ЭСФ.
	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		
		СтрокаПараметрыПоискаЭСФ = ПараметрыПоискаЭСФ.Добавить();
		СтрокаПараметрыПоискаЭСФ.ПометкаУдаления = Ложь;
		СтрокаПараметрыПоискаЭСФ.Идентификатор = Идентификатор;
		СтрокаПараметрыПоискаЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий;
		СтрокаПараметрыПоискаЭСФ.Вид = Перечисления.ВидыЭСФ.Исправленный;
		
	КонецЦикла;	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Найти исправленные документы ЭСФ.
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	ТаблицаИсправленныхДокументовЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////		
	// Создать массив исправленных ЭСФ.	
	
	МассивИсправленныхЭСФ = Новый Массив;	
	Для Каждого СтрокаТаблицы Из ТаблицаИсправленныхДокументовЭСФ Цикл		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НайденнаяСсылка) Тогда
			МассивИсправленныхЭСФ.Добавить(СтрокаТаблицы.НайденнаяСсылка);	
		КонецЕсли;		
	КонецЦикла;
		
	МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Дополнить массив идентификаторов, идентификаторами исправляемых ЭСФ,
	// а также идентификаторами дополнительных ЭСФ, для исправляемых ЭСФ.
	
	Для Каждого Идентификатор Из МассивИдентификаторовАннулируемыхЭСФ Цикл
		МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив идентификаторов на исправляемые ЭСФ,
// а также их дополнительные ЭСФ.
//
// Параметры:
//  МассивИсправленныхЭСФ - Массив - Массив ссылок на исправленные ЭСФ,
//   для которых необходимо найти ЭСФ, которые они будут аннулировать.
//
Функция МассивИдентификаторовАннулируемыхЭСФ(Знач МассивИсправленныхЭСФ)
	
	МассивИдентификаторовАннулируемыхЭСФ = Новый Массив;
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать массив ссылок на исправляемые ЭСФ и их дополнительные ЭСФ.
	
	МассивДляПолученияИдентификаторов = Новый Массив;	
	СоответствиеАннулируемыеЭСФ = АннулируемыеЭСФ(МассивИсправленныхЭСФ); 	
	
	Для Каждого ЭлементАннулируемыеЭСФ Из СоответствиеАннулируемыеЭСФ Цикл
		
		МассивАннулируемыхЭСФ = ЭлементАннулируемыеЭСФ.Значение;
		
		Для Каждого АннулируемыйЭСФ Из МассивАннулируемыхЭСФ Цикл
			МассивДляПолученияИдентификаторов.Добавить(АннулируемыйЭСФ);	
		КонецЦикла;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить идентификаторы исправляемых ЭСФ и их дополнительных ЭСФ.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивДляПолученияИдентификаторов);
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		МассивИдентификаторовАннулируемыхЭСФ.Добавить(Выборка.Идентификатор);	
	КонецЦикла;
	
	Возврат МассивИдентификаторовАннулируемыхЭСФ;
	
КонецФункции

// Формирует наименование товара для заполнения исходящего ЭСФ.
//
// Параметры:
//  Параметры - Любая именованная коллекция - Содержащая строковые элементы:
//  - НомерГТДНаименованиеТовара - Наименование товара, указанное в элементе справочника НомераГТД.
//  - СодержаниеУслуги - Содержание услуги, указанное в документе СчетФактураВыданный.
//  - ТоварНаименование - Наименование или ПолноеНаименование Номенклатуры, ОС, НМА.
//  - ХарактеристикаНоменклатурыНаименование - Наименование характеристики. 
//  - СерияНоменклатурыНаименование - Наименование серии. 
//
// Возвращаемое значение:
//  Строка - Наименование товара для исходящего ЭСФ.
//
Функция НаименованиеТовара(Параметры) Экспорт
		
	НаименованиеТовара = "";
	
	Если НЕ ПустаяСтрока(Параметры.ТоварНаименование) Тогда
		
		НаименованиеТовара = СокрЛП(Параметры.ТоварНаименование);
		
	КонецЕсли;

	Возврат НаименованиеТовара;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ЭСФ

Процедура ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихЭСФ, ПараметрыМетодаИсходящихЭСФ,знач ДанныеПрофиля, знач СоответствиеПараметровСинхронизации)
	
	Если СоответствиеПараметровСинхронизации <> Неопределено Тогда
		Параметр = СоответствиеПараметровСинхронизации.Получить(ДанныеПрофиля.Ссылка);
		Если Параметр <> Неопределено Тогда
			Если ПараметрыМетодаВходящихЭСФ <> Неопределено Тогда
				ПараметрыМетодаВходящихЭСФ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииВходящихЭСФ);	
			КонецЕсли;
			
			Если ПараметрыМетодаИсходящихЭСФ <> Неопределено Тогда
				ПараметрыМетодаИсходящихЭСФ.Вставить("ДатаНачалаСинхронизации", Параметр.ДатаНачалаСинхронизацииИсходящихЭСФ);
			КонецЕсли
		КонецЕсли;			
	КонецЕсли;	        	
КонецПроцедуры	

Функция СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации) Экспорт 
	СоответствиеПараметровСинхронизации = Новый Соответствие;
	Для Каждого Элемент Из МассивПрофилейИСЭСФСДатойСинхронизации Цикл
		СоответствиеПараметровСинхронизации.Вставить(Элемент.ПрофильИСЭСФ, Новый Структура("ДатаНачалаСинхронизацииВходящихЭСФ, ДатаНачалаСинхронизацииИсходящихЭСФ",Элемент.ДатаНачалаСинхронизацииВходящихЭСФ, Элемент.ДатаНачалаСинхронизацииИсходящихЭСФ ));		
	КонецЦикла;	
	Возврат СоответствиеПараметровСинхронизации;
КонецФункции

//Заплоняет регистр сведений ПараметрыМетодовИСЭСФ при обновлении ИБ
//
Процедура ЗаполнитьДатыНачалаСинхронизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ,
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации <> """"";
	
	ВыборкаПрофилиИСЭСФ = Запрос.Выполнить().Выбрать();
	
	МассивДанныхПрофилейИСЭСФ = Новый Массив;
	МассивСЕ = Новый Массив;
	Пока ВыборкаПрофилиИСЭСФ.Следующий() Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ВыборкаПрофилиИСЭСФ.ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
		МассивСЕ.Добавить(ВыборкаПрофилиИСЭСФ.СтруктурнаяЕдиница);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСЭСФ.ИмяПараметра,
	|	ПараметрыМетодовИСЭСФ.ЗначениеПараметра,
	|	ПараметрыМетодовИСЭСФ.НаправлениеЭСФ,
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТ_Параметры
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФ
	|ГДЕ
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница В (&СтруктурнаяЕдиница)
	|	И ПараметрыМетодовИСЭСФ.ИмяМетода = &ИмяМетода
	|	И ПараметрыМетодовИСЭСФ.ИмяПараметра = &ИмяПараметра
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Параметры.ЗначениеПараметра,
	|	ВТ_Параметры.СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_Параметры КАК ВТ_Параметры
	|ГДЕ
	|	ВТ_Параметры.НаправлениеЭСФ = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Параметры.ЗначениеПараметра,
	|	ВТ_Параметры.СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_Параметры КАК ВТ_Параметры
	|ГДЕ
	|	ВТ_Параметры.НаправлениеЭСФ = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|";
	
	Запрос.УстановитьПараметр("ИмяМетода", ВРег("queryUpdates"));
	Запрос.УстановитьПараметр("ИмяПараметра",  ВРег("lastEventDate"));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", МассивСЕ);

	Результат = Запрос.ВыполнитьПакет();
	
	РезультатВходящие = Результат[1];
	РезультатИсходящие = Результат[2]; 	
	
	МассивИсключенийВходящие = Новый Массив;
	ВыборкаПараметрыВходящие = РезультатВходящие.Выбрать();
	Пока ВыборкаПараметрыВходящие.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПараметрыВходящие.ЗначениеПараметра) Тогда
			МассивИсключенийВходящие.Добавить(ВыборкаПараметрыВходящие.СтруктурнаяЕдиница);
		КонецЕсли;		
	КонецЦикла;
	
	МассивИсключенийИсходщие = Новый Массив;
	ВыборкаПараметрыИсходщие = РезультатИсходящие.Выбрать();
	Пока ВыборкаПараметрыИсходщие.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПараметрыИсходщие.ЗначениеПараметра) Тогда
			МассивИсключенийИсходщие.Добавить(ВыборкаПараметрыИсходщие.СтруктурнаяЕдиница);
		КонецЕсли;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Ссылка.Дата КАК Дата,
	|	ЭСФ.Направление КАК Направление,
	|	ЭСФПоставщики.Поставщик КАК Поставщик,
	|	ЭСФПолучатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|			И (ЭСФПолучатели.НомерСтроки = 1)
	|ГДЕ
	|	ЭСФ.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.Сформирован)
	|	И ЭСФ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭСФ.Черновик)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭСФ.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|   МАКСИМУМ(ВТ_ЭСФ.Дата)КАК Дата
	|ПОМЕСТИТЬ ВТ_ДатыЭСФ
	|ИЗ
	|	ВТ_ЭСФ КАК ВТ_ЭСФ
	|СГРУППИРОВАТЬ ПО
	|	Направление,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ДатыЭСФ.Направление КАК Направление,
	|   ВТ_ДатыЭСФ.Дата КАК Дата
	|
	|ИЗ
	|	ВТ_ДатыЭСФ КАК ВТ_ДатыЭСФ
	|ГДЕ
	|	ВТ_ДатыЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|	И ВТ_ДатыЭСФ.СтруктурнаяЕдиница НЕ В (&СтруктурнаяЕдиницаВходящие)
	|;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ВТ_ДатыЭСФ.Направление КАК Направление,
	|   ВТ_ДатыЭСФ.Дата КАК Дата
	|
	|ИЗ
	|	ВТ_ДатыЭСФ КАК ВТ_ДатыЭСФ
	|ГДЕ
	|	ВТ_ДатыЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|	И ВТ_ДатыЭСФ.СтруктурнаяЕдиница НЕ В (&СтруктурнаяЕдиницаИсходящие)
	|	
	|";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаВходящие", МассивИсключенийВходящие);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаИсходящие", МассивИсключенийИсходщие);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатВходящие = Результат[2];
	РезультатИсходящие = Результат[3];
	
	ВыборкаВходящие = РезультатВходящие.Выбрать();
	ВыборкаИсходящие = РезультатИсходящие.Выбрать();
	
	Пока ВыборкаВходящие.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаВходящие.СтруктурнаяЕдиница)
			И (ТипЗнч(ВыборкаВходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Или ТипЗнч(ВыборкаВходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций"))  Тогда
			Попытка
				ЭСФСервер.СохранитьПараметрыМетода(
									ВыборкаВходящие.СтруктурнаяЕдиница, 
									ВРег("queryUpdates"), 
									ВыборкаВходящие.Направление, 
									ВРег("lastEventDate"), 
									НачалоДня(ВыборкаВходящие.Дата));
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ЗаполнитьДатыНачалаСинхронизации'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
		КонецЕсли;					
							
	КонецЦикла;						
	
	Пока ВыборкаИсходящие.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаИсходящие.СтруктурнаяЕдиница) 
			И (ТипЗнч(ВыборкаИсходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Или ТипЗнч(ВыборкаИсходящие.СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций"))  Тогда
			Попытка
				ЭСФСервер.СохранитьПараметрыМетода(
									ВыборкаИсходящие.СтруктурнаяЕдиница, 
									ВРег("queryUpdates"), 
									ВыборкаИсходящие.Направление, 
									ВРег("lastEventDate"), 
									НачалоДня(ВыборкаИсходящие.Дата));
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ЗаполнитьДатыНачалаСинхронизации'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));												
			КонецПопытки;						
		КонецЕсли;					
							
	КонецЦикла;								
	
КонецПроцедуры 

// См. ЭСФСервер.ПолучитьНовыеЭСФ()
Функция ПолучитьНовыеЭСФ(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;	                                      	
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
	ТолькоСоздатьОбновитьФайлы = ?(ПараметрыВыгрузки.Свойство("ТолькоСоздатьОбновитьФайлы"), ПараметрыВыгрузки.ТолькоСоздатьОбновитьФайлы, Ложь);
	                                      	
	СообщениеПользователя = Новый СообщениеПользователю;

	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начата синхронизация с ИС ЭСФ.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Входящий = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
	Исходящий = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");	
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;		
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка); 				
		
		ПараметрыМетодаВходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Входящий);	
		ПараметрыМетодаИсходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Исходящий);	
	
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаВходящихЭСФ, ПараметрыМетодаИсходящихЭСФ, ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ЭСФВызовСервера.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияИСЭСФ);
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		МассивЭСФДляПолученияИдентификаторовТоваров = Новый Массив(); // накапливаем ссылки ЭСФ, чтобы отправить завтрос на получение идентификаторов товаров
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение новых и измененных входящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Входящий, СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаВходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема, МассивЭСФДляПолученияИдентификаторовТоваров);					
		КонецЦикла;
		
		ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовДляОбновленияСтатусаПриема, СтруктураПрофиляСинхронизации, ИдентификаторСессии); // Отправка уведомления о приеме
		
		// Обновление исходящих ЭСФ
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		Пока НЕ ЭтоПоследняяПорция Цикл		 	
		 	Текст = НСтр("ru = '%ТекущаяДата% Обновление состояния исходящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
		 	СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Исходящий, СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаИсходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема);
	 	КонецЦикла;
	 
		// Создать и обновить присоединенные XML файлы исходящих ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;				
		Пока НЕ ЭтоПоследняяПорция Цикл
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Исходящий, СтруктураПрофиляСинхронизации, Ложь, Истина, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаВходящихЭСФ);
			
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Обновление существующих исходящих электронных счетов-фактур. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЦикла;
		
		ЭСФВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСЭСФ);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
		
		//++ НЕ ЭСФ
		Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
			ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭСФДляПолученияИдентификаторовТоваров, СтруктураПрофиляСинхронизации, , Истина);
		КонецЕсли;	
		//-- НЕ ЭСФ
		
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Синхронизация с ИС ЭСФ успешно завершена.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеНовыхЭСФ(Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема = Неопределено, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "50"); 
	lastEventId = ?(ПараметрыМетода.Свойство(ВРег("lastEventId")), ПараметрыМетода.lastEventId, "0"); // для 4.0
	lastInvoiceId = ?(ПараметрыМетода.Свойство(ВРег("lastInvoiceId")), ПараметрыМетода.lastInvoiceId, "0"); // для 5.0
	lastEventDate = Дата(2010,01,01); // Используется только в 5.0. Пустую дату передавать нельзя, поэтому 0001 год не используется. Ставим 2010 (время до ЭСФ) так же как в форме синхронизации
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)				
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) и ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;		
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;			
	
	Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
		ШаблонЗапроса = ПолучитьМакет("ЗапросQueryUpdates_Версия1").ПолучитьТекст();			
	Иначе		
		ШаблонЗапроса = ПолучитьМакет("ЗапросQueryUpdates_Версия2").ПолучитьТекст();				
	КонецЕсли;
		
	ПредыдущийLastEventId = Неопределено;
	ПредыдущийLastEventDate = Неопределено;
	ПредыдущийlastInvoiceId = Неопределено;
	ПоследнийБлок = Ложь; // в 5.0 ориентируемся на этот маркер запроса, так как сервер возвращает дату с милисекундами, а Платформа округляет дату до секунд	
	Пока НЕ ПоследнийБлок И (lastEventId <> ПредыдущийLastEventId ИЛИ LastEventDate<>ПредыдущийLastEventDate ИЛИ lastInvoiceId<>ПредыдущийlastInvoiceId) Цикл
		
		ПредыдущийLastEventId = lastEventId;
		ПредыдущийLastEventDate = LastEventDate;
		ПредыдущийlastInvoiceId = lastInvoiceId;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[clientId]", ЭСФСервер.ИдентификаторКлиентаИСЭСФ());
		ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", ЭСФКлиентСервер.НаправлениеИСЭСФ(НаправлениеЭСФ));
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventId]", lastEventId); // 4.0
				
		// в версии 5.0	 идентификаци по двум параметрам
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastInvoiceId]", lastInvoiceId); // 5.0
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
				
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService(),,ВерсияИСЭСФ);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			
			invoiceInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse.invoiceInfoList, "invoiceInfo", Неопределено);				
			
			Если ТолькоСоздатьОбновитьФайлы Тогда
				СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ(invoiceInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Иначе
				МассивИсключаемыхИД = Новый Массив;
				СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, НаправлениеЭСФ, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, Ложь, МассивИсключаемыхИД, Истина, МассивЭСФДляПолученияИдентификаторовТоваров, ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Пользователь); 
				СформироватьМассивIDДляПодтвержденияПолучениеВходящихЭСФ(InvoiceInfoList, МассивИдентификаторовДляОбновленияСтатусаПриема);
				Для Каждого ИД Из МассивИсключаемыхИД Цикл
					ИндексЭлемента = МассивИдентификаторовДляОбновленияСтатусаПриема.Найти(ИД);
					Если ИндексЭлемента <> Неопределено Тогда
						МассивИдентификаторовДляОбновленияСтатусаПриема.Удалить(ИндексЭлемента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Сохранение  параметров
			lastEventId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastEventId", 0);
			ПоследнийБлок = XMLЗначение(Тип("Булево"),ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse,"lastBlock", Истина));			
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastEventDate",0); 
			lastInvoiceId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastInvoiceId",0); 
			
			ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastEventId"), 
						Формат(lastEventId, "ЧН=0; ЧГ="));						
					
			Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
				
				ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
				Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
					//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекундов, возвращаемых сервером
					ПараметрДата = ПараметрДата - 1;
				КонецЕсли;
				
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastEventDate"), 
						ПараметрДата);
						
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUpdates"), 
						НаправлениеЭСФ, 
						ВРег("lastInvoiceId"), 
						lastInvoiceId);
			КонецЕсли;
			    				
			Если ПолучитьОднуПорцию Тогда
				//чтобы не возникало зацикливания
				ПоследнийБлок = Истина;
				Прервать;
			КонецЕсли;
				  
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
				
			ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			ПредыдущийLastEventId = Неопределено;
			ПредыдущийLastEventDate = Неопределено;			
			ПредыдущийlastInvoiceId = Неопределено;			
		Иначе
			
			ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменЭСФ.ПолучитьНовыеЭСФ'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение НСтр("ru = 'При получении новых ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?(ПоследнийБлок ИЛИ (lastEventId = ПредыдущийLastEventId И LastEventDate = ПредыдущийLastEventDate И lastInvoiceId = ПредыдущийlastInvoiceId), Истина, Ложь);
			
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

// См. ЭСФСервер.СоздатьОбновитьПолучаемыеЭСФ()
Процедура СоздатьОбновитьПолучаемыеЭСФ(Знач InvoiceInfoList, Знач НаправлениеЭСФ, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыЭСФ, МассивИсключаемыхИД = Неопределено, Знач Провести = Ложь, МассивЭСФДляПолученияИдентификаторовТоваров = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если InvoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивЭСФ = НовыйМассивЗагружаемыхЭСФ(InvoiceInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыЭСФ, Пользователь);
		
		// Создать массив новых ЭСФ (которых еще нет в ИБ)
		// для заполнения ссылочных полей по текстовым и числовым представлениям.
		МассивНовыхЭСФ = Новый Массив;
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если ОбъектЭСФ.Ссылка.Пустая() Тогда
				МассивНовыхЭСФ.Добавить(ОбъектЭСФ);
			КонецЕсли;
		КонецЦикла;
		
		// Создать коллекцию старых ЭСФ (которые уже были в ИБ)
		// содержащую объекты ЭСФ до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхЭСФ = Новый Массив;
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если НЕ ОбъектЭСФ.Ссылка.Пустая() Тогда
				КопияОбъектаЭСФ = ОбъектЭСФ.Скопировать();
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектЭСФ", КопияОбъектаЭСФ);
				Структура.Вставить("ОбновленныйОбъектЭСФ", ОбъектЭСФ);
				МассивСтарыхЭСФ.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если НЕ ОбъектЭСФ.Ссылка.Пустая() Тогда
				ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ, "Идентификатор, СтруктурноеПодразделение, Склад, СчетФактура, ФайлЭСФ, Автор, Комментарий, СНТ, ОтражаетсяВВС");
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		МассивПропускаемыхЭСФ = Новый Массив;
		
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			InvoiceInfo = НайтиInvoiceInfoПоId(InvoiceInfoList, ОбъектЭСФ.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");
				ЗаполнитьЭСФ(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ОбъектЭСФ);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщ = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия ЭСФ формату.'");
				ТекстСообщ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщ, ОбъектЭСФ.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщ;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭСФ.Добавить(ОбъектЭСФ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭСФ.Идентификатор);
				КонецЕсли;	
			КонецПопытки;	
		КонецЦикла;
		
		Для Каждого ОбъектЭСФ Из МассивПропускаемыхЭСФ Цикл
			ИндексЭлемента = МассивЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			Если ЗначениеЗаполнено(ОбъектЭСФ.Дата) И ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
				ОбъектЭСФ.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
							|%2,
							|%3'");
				Причина1 = "";
				Причина2 = "";
				Если Не ЗначениеЗаполнено(ОбъектЭСФ.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ОбъектЭСФ.ДатаОборота) Тогда
					Причина2 = НСтр("ru = '- не удалось определить дату оборота'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектЭСФ.РегистрационныйНомер, Причина1, Причина2);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭСФ.Добавить(ОбъектЭСФ);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭСФ.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ОбъектЭСФ Из МассивПропускаемыхЭСФ Цикл
			ИндексЭлемента = МассивЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭСФ.Найти(ОбъектЭСФ);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭСФ.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;	
			
		СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(МассивЭСФ, InvoiceInfoList);
		
		ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(Неопределено, Неопределено, Неопределено, НаправлениеЭСФ, МассивНовыхЭСФ);
		ВосстановитьСсылочныеРеквизитыДокументовЭСФ(МассивСтарыхЭСФ);
		
		//++ НЕ ЭСФ
		//Пытаемся получить ИД товара из поля ИдентификаторТовара
		Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Исходящий Тогда
			ПолучитьДополнительныйИдентификаторИзИдентификатораТовара(МассивНовыхЭСФ);
		КонецЕсли;
		//-- НЕ ЭСФ

		// Повторно записать старые и новые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			
			ОбъектЭСФ.Записать();

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		//++ НЕ ЭСФ
		Если Провести Тогда
			ПровестиВходящиеЭСФ(МассивЭСФ);
		КонецЕсли;
		//-- НЕ ЭСФ


		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(МассивЭСФДляПолученияИдентификаторовТоваров) = Тип("Массив") Тогда
			Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
				МассивЭСФДляПолученияИдентификаторовТоваров.Добавить(ОбъектЭСФ.Ссылка);
			КонецЦикла
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПолучаемыеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры
                                       
Процедура СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ(Знач InvoiceInfoList, Знач СтруктурнаяЕдиница)
	
	Если InvoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Найти старые документы ЭСФ.
		МассивЭСФ = НовыйМассивЗагружаемыхЭСФ(InvoiceInfoList, СтруктурнаяЕдиница, Истина, Ложь);
		
		СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(МассивЭСФ, InvoiceInfoList);
		
		// Если файла не было, то в ЭСФ заполняется реквизит ФайлЭСФ.
		// Поэтому необходимо повторно записать старые документы ЭСФ.
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл						
			ОбъектЭСФ.Записать();			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПрисоединенныеФайлыСуществующихЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Функция ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивИдентификаторовЭСФ, Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
			idList = idList + "<id>" + ИдентификаторЭСФ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceSummaryById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
			Результат.Вставить(ИдентификаторЭСФ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		invoiceSummaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryInvoiceSummaryByIdResponse.invoiceSummaryList, "invoiceSummary", Неопределено);
		                                               
		Если invoiceSummaryList <> Неопределено Тогда
			
			invoiceSummaryList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceSummaryList);
			
			МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По invoiceSummaryList.Количество() - 1 Цикл
				invoiceSummary = invoiceSummaryList.Получить(Индекс);
				ДанныеСтатуса = ДанныеСтатусаInvoice(invoiceSummary);
				Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
				Если ДанныеСтатуса.Статус = Перечисления.СтатусыЭСФ.Ошибочный Тогда
					МассивИдентификаторовОшибочныхЭСФ.Добавить(ДанныеСтатуса.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			//Получим ошибки ошибочных ЭСФ
			Если МассивИдентификаторовОшибочныхЭСФ.Количество() > 0 Тогда
				РезультатОшибочныхЭСФ = ПолучитьОшибкиЭСФПоИдентификаторам(МассивИдентификаторовОшибочныхЭСФ, Неопределено, ПрофильИСЭСФ, ИдентификаторСессии);
				Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхЭСФ);	
			КонецЕсли;

			// Обновить документы ЭСФ.
			ОтразитьИзмененияСтатусовЭСФ(Результат, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОшибкиЭСФПоИдентификаторам(Знач МассивИдентификаторовЭСФ, Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
			idList = idList + "<id>" + ИдентификаторЭСФ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросInvoiceErrorById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовЭСФ Цикл
			Результат.Вставить(ИдентификаторЭСФ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		invoiceErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryInvoiceErrorByIdResponse.invoiceErrorList, "invoiceError", Неопределено);
                                               
		Если invoiceErrorList <> Неопределено Тогда
			
			invoiceErrorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceErrorList);
			
			МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По invoiceErrorList.Количество() - 1 Цикл
				invoiceError = invoiceErrorList.Получить(Индекс);
				ДанныеОшибки = ДанныеОшибкиЭСФ(invoiceError);
				Результат.Вставить(ДанныеОшибки.Идентификатор, ДанныеОшибки);
			КонецЦикла;
			
			//ЗаполнитьРезультатПолученияОшибокUForm(uFormErrorInfoList, ИмяЭлемента, Результат);

			
			// Обновить документы ЭСФ.
			Если ОбновитьОшибкиВДокументах Тогда
				ОтразитьИзмененияОшибокЭСФ(Результат, СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиЭСФ(Знач invoiceErrorListXDTO, ТаблицаЛокализацииОшибок = Неопределено)
	                 
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле",  Метаданные.Документы.ЭСФ.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	ДанныеОшибки.Вставить("Идентификатор", Формат(invoiceErrorListXDTO.invoiceId, "ЧГ="));
	
	
	errors = ЭСФСервер.ПолучитьСвойство(invoiceErrorListXDTO.errors, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
				ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
				Если ПустаяСтрока(ОшибкаТекст) Тогда
					Если ТаблицаЛокализацииОшибок = Неопределено Тогда
						ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
					КонецЕсли;
					ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
					ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
					ОшибкаТекст = ОшибкаТекст.ТекстИБ;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаОшибок.Добавить();
				СтрокаТаблицы.Поле = ОшибкаПоле;
				СтрокаТаблицы.Текст = ОшибкаТекст;
			
			КонецЦикла;
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);

	КонецЕсли;
					
	Возврат ДанныеОшибки;
	
 КонецФункции

Процедура ЗаполнитьЭСФ(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	ВерсияЭСФ = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "version", "");
	Если ПустаяСтрока(ВерсияЭСФ) Тогда
		ВерсияЭСФ = "InvoiceV1";
	КонецЕсли;	
	
	Если ВерсияЭСФ = "InvoiceV1" Тогда
		ЗаполнитьЭСФ_Версия1(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	Иначе
		ЗаполнитьЭСФ_Версия2(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьЭСФ_Версия1(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", "");
	Если ПустаяСтрока(Invoice) Тогда
		ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", "");
		Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
	КонецЕсли;	
	
	Если ПустаяСтрока(Invoice) Тогда
		Возврат;
	КонецЕсли;	
	
	// Раздел А. Общий раздел.
	ЭСФ.ВерсияБланкаЭСФ = 1;
	ЭСФ.Дата = ЭСФСервер.ДатаИБ(Invoice.date);
	ЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
    ЭСФ.РегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");	
	ЭСФ.ДатаОборота = ЭСФСервер.ДатаИБ(Invoice.turnoverDate);
	ЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(Invoice.invoiceType);
	ЭСФ.Причина = ПричинаИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "cancelReason", ""));	
	
	
	relatedInvoice = ЭСФСервер.ПолучитьСвойство(Invoice, "relatedInvoice", Неопределено);
	Если relatedInvoice <> Неопределено Тогда
		ЭСФ.СвязанныйЭСФДата = ЭСФСервер.ДатаИБ(relatedInvoice.date);
		ЭСФ.СвязанныйЭСФНомер = relatedInvoice.num;
		ЭСФ.СвязанныйЭСФРегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(relatedInvoice, "registrationNumber", "");
	КонецЕсли;
	
	// Раздел B. Реквизиты поставщика.
	
	sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.sellers.seller);
	Для Каждого seller Из sellerList Цикл	
		
		Поставщик = ЭСФ.Поставщики.Добавить();
		
		Поставщик.ПоставщикИдентификатор = ЭСФСервер.ПолучитьСвойство(seller, "tin", "");
		Поставщик.ПоставщикНаименование  = ЭСФСервер.ПолучитьСвойство(seller, "name", "");
		Поставщик.Адрес = ЭСФСервер.ПолучитьСвойство(seller, "address", "");
		Поставщик.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateSeries", "");
		Поставщик.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateNum", "");				
		
		statuses = ЭСФСервер.ПолучитьСвойство(seller, "statuses", Неопределено);
		Если statuses <> Неопределено Тогда	
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПоставщика = Новый Соответствие;
				СоответствиеСтатусовПоставщика.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПоставщика.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПоставщика.Вставить("FORWARDER", "Экспедитор");
				СоответствиеСтатусовПоставщика.Вставить("LESSOR", "Лизингодатель");
				СоответствиеСтатусовПоставщика.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПоставщика.Вставить("EXPORTER", "ЭкспортерИлиУчастникСРП");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПоставщика[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Поставщик[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Поставщик.ДокументПодтверждающийПоставкуНомер = ЭСФСервер.ПолучитьСвойство(seller, "deliveryDocNum", "");
		Поставщик.ДокументПодтверждающийПоставкуДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(seller, "deliveryDocDate", "01.01.0001"));
		Поставщик.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(seller, "trailer", "");
		Поставщик.КБе = ЭСФСервер.ПолучитьСвойство(seller, "kbe", "");
		Поставщик.ИИК = ЭСФСервер.ПолучитьСвойство(seller, "iik", "");
		Поставщик.БИК = ЭСФСервер.ПолучитьСвойство(seller, "bik", "");
		Поставщик.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(seller, "bank", "");
		
	КонецЦикла;
	
	// Раздел C. Реквизиты получателя.
	
	customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.customers.customer);
	Для Каждого customer Из customerList Цикл
		
		Получатель = ЭСФ.Получатели.Добавить();
		
		Получатель.ПолучательИдентификатор = ЭСФСервер.ПолучитьСвойство(customer, "tin", "");
		Получатель.ПолучательНаименование = ЭСФСервер.ПолучитьСвойство(customer, "name", "");
		Получатель.Адрес = ЭСФСервер.ПолучитьСвойство(customer, "address", "");
		Получатель.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateSeries", "");
		Получатель.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateNum", "");				
		Получатель.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(customer, "trailer", "");
		
		statuses = ЭСФСервер.ПолучитьСвойство(customer, "statuses", Неопределено);		
		Если statuses <> Неопределено Тогда
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПолучателя = Новый Соответствие;
				СоответствиеСтатусовПолучателя.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПолучателя.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПолучателя.Вставить("LESSEE", "Лизингодатель");
				СоответствиеСтатусовПолучателя.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПолучателя.Вставить("PUBLIC_OFFICE", "ГосударственноеУчреждение");
				СоответствиеСтатусовПолучателя.Вставить("NONRESIDENT", "Нерезидент");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПолучателя[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Получатель[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	
	consignor = ЭСФСервер.ПолучитьСвойство(Invoice, "consignor", Неопределено);
	Если consignor <> Неопределено Тогда
		ЭСФ.ГрузоотправительИдентификатор = ЭСФСервер.ПолучитьСвойство(consignor, "tin", "");
		ЭСФ.ГрузоотправительНаименование = ЭСФСервер.ПолучитьСвойство(consignor, "name", ""); 
		ЭСФ.АдресОтправки = ЭСФСервер.ПолучитьСвойство(consignor, "address", ""); 
	КонецЕсли;
	
	consignee = ЭСФСервер.ПолучитьСвойство(Invoice, "consignee", Неопределено);
	Если consignee <> Неопределено Тогда
		ЭСФ.ГрузополучательИдентификатор = ЭСФСервер.ПолучитьСвойство(consignee, "tin", "");
		ЭСФ.ГрузополучательНаименование = ЭСФСервер.ПолучитьСвойство(consignee, "name", ""); 
		ЭСФ.АдресДоставки = ЭСФСервер.ПолучитьСвойство(consignee, "address", ""); 		
	КонецЕсли;
	
	// Раздел E. Условия поставки.
	
	deliveryTerm = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryTerm", Неопределено);	
	Если deliveryTerm <> Неопределено Тогда
		ЭСФ.ДоговорПоставкиНомер             = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractNum", "");
		ЭСФ.ДоговорПоставкиДата              = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractDate", "01.01.0001"));
	  	ЭСФ.ДоговорПоставкиУсловияОплаты     = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "term", "");
	  	ЭСФ.ДоговорПоставкиСпособОтправления = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "exerciseWay", "");
		ЭСФ.ДоверенностьНаПоставкуНомер      = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrant", "");
		ЭСФ.ДоверенностьНаПоставкуДата       = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrantDate", "01.01.0001"));
		ЭСФ.ПунктНазначения                  = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "destination", "");
	КонецЕсли;
	
	// Раздел F. Реквизиты государственного учреждения.
	
	publicOffice = ЭСФСервер.ПолучитьСвойство(Invoice, "publicOffice", Неопределено);	
	Если publicOffice <> Неопределено Тогда
		ЭСФ.ГосучреждениеИИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "iik", "");
		ЭСФ.ГосучреждениеКодТоваров        = ЭСФСервер.ПолучитьСвойство(publicOffice, "productCode", "");
		ЭСФ.ГосучреждениеНазначениеПлатежа = ЭСФСервер.ПолучитьСвойство(publicOffice, "payPurpose", "");
		ЭСФ.ГосучреждениеБИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "bik", "");
	КонецЕсли;

	// Раздел G. Данные по товарам (работам, услугам).
	
	ЭСФ.ВалютаКод = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyCode", "KZT");
	ЭСФ.КурсВалюты = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyRate", 1);
	
	
	СписокТоваров = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "product", Неопределено);
	Если СписокТоваров = Неопределено Тогда
		//СписокТоваров = Invoice.productSet.product;
		СписокТоваров = Invoice.productSet.products.product
	КонецЕсли;	
	СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
	
	Для Каждого ТоварXDTO Из СписокТоваров Цикл
		ТоварСтрока = ЭСФ.Товары.Добавить();
		ТоварСтрока.ТоварНаименование            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "description", "");
		ТоварСтрока.КодТНВЭД                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitCode", "");
		ТоварСтрока.ЕдиницаИзмеренияНаименование = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitNomenclature", "");
		ТоварСтрока.Количество                   = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
		ТоварСтрока.Цена                         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitPrice", 0);
		ТоварСтрока.СуммаБезНалогов              = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithoutTax", 0);
		ТоварСтрока.СтавкаАкцизаЧисло            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseRate", 0);
		ТоварСтрока.СуммаАкциза                  = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseAmount", 0);
		ТоварСтрока.ОборотПоРеализации           = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "turnoverSize", 0);
		ТоварСтрока.СтавкаНДСЧисло               = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", 0);
		ТоварСтрока.БезНДС                       = ?(ЭСФСервер.ЕстьСвойство(ТоварXDTO, "ndsRate"), Ложь, Истина);
		ТоварСтрока.СуммаНДС                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsAmount", 0);
		ТоварСтрока.Сумма                        = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithTax", 0);
		ТоварСтрока.НомерЗаявленияВРамкахТС      = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "applicationNumberInCustomsUnion", "");
		ТоварСтрока.ДополнительныеДанные         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "additional", "");
	КонецЦикла;
	
	// Раздел H. Сведения по участникам СД.
	
	sellerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerParticipants", Неопределено);	
    ЗаполнитьТаблицуТоваровПоУчастникамСД(sellerParticipants, ЭСФ.ТоварыПоПоставщикам);
	
	customerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "customerParticipants", Неопределено);	
    ЗаполнитьТаблицуТоваровПоУчастникамСД(customerParticipants, ЭСФ.ТоварыПоПолучателям);
	
	// Заполнить колонку ДоляУчастия в таблице Поставщики.
	Если ЭСФ.Поставщики.Количество() <> 0 Тогда 
		
		Если ЭСФ.Поставщики[0].УчастникСовместнойДеятельности Тогда
			
			УдалосьЗаполнитьДолиПоставщиков = ЗаполнитьДолиУчастияПоставщиков(ЭСФ);
			
			Если НЕ УдалосьЗаполнитьДолиПоставщиков Тогда
				СтрокаОшибки = ЭСФ.Ошибки.Добавить();
				СтрокаОшибки.Текст = ТекстНеУдалосьЗаполнитьДолиУчастниковСД();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел I. Дополнительные сведения.
	
	ЭСФ.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(Invoice, "addInf", "");
	
	// Прочие сведения.
	
	ЭСФ.Статус = ЭСФКлиентСервер.СтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceStatus", ""));
	ЭСФ.ПользовательскийСтатус = ЭСФКлиентСервер.ПользовательскийСтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "state", ""));
	ЭСФ.Направление = НаправлениеЭСФ;
	ЭСФ.Идентификатор = InvoiceInfo.invoiceId;
	ЭСФ.УполномоченныйСотрудник = ЭСФСервер.ПолучитьСвойство(Invoice, "operatorFullname", "");
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
    ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
	КонецЕсли;
	
	ЭСФ.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "signatureType", ""));
	ЭСФ.ЭЦП = ЭСФСервер.ПолучитьСвойство(Invoice, "signature", "");
	
КонецПроцедуры

Процедура ЗаполнитьЭСФ_Версия2(Знач InvoiceInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	
	ТекстСчетаФактуры = InvoiceInfo.invoiceBody;
	Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO);
	//Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, КэшированнаяФабрикаInvoiceInfo_Версия2);
	
	// Раздел А. Общий раздел.
	#Область ОбщийРаздел
	ЭСФ.ВерсияБланкаЭСФ = 2;
	
	Если ЭСФ.Дата = Дата(1,1,1) ИЛИ НаправлениеЭСФ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") ИЛИ НаправлениеЭСФ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка") ТОГДА
		ЭСФ.Дата = ЭСФСервер.ДатаИБ(Invoice.date);	
	КонецЕсли;
	
	ЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
	ЭСФ.РегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", "");	
	ЭСФ.ДатаОборота = ЭСФСервер.ДатаИБ(Invoice.turnoverDate);
	ЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(Invoice.invoiceType);
	ЭСФ.Причина = ПричинаИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "cancelReason", ""));	
	ЭСФ.ДатаВыпискиНаБумажномНосителе =  ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "datePaper", "01.01.0001"));
	ЭСФ.ПричинаВыпискиНаБумажномНосителе = ЭСФКлиентСервер.ПричинаВыпискиНаБумагеИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "reasonPaper", ""));
	
	relatedInvoice = ЭСФСервер.ПолучитьСвойство(Invoice, "relatedInvoice", Неопределено);
	Если relatedInvoice <> Неопределено Тогда
		ЭСФ.СвязанныйЭСФДата = ЭСФСервер.ДатаИБ(relatedInvoice.date);
		ЭСФ.СвязанныйЭСФНомер = relatedInvoice.num;
		ЭСФ.СвязанныйЭСФРегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(relatedInvoice, "registrationNumber", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел B. Реквизиты поставщика.
	#Область РеквизитыПоставщика
	sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.sellers.seller);
	Для Каждого seller Из sellerList Цикл	
		
		Поставщик = ЭСФ.Поставщики.Добавить();
		
		Поставщик.ПоставщикИдентификатор = ЭСФСервер.ПолучитьСвойство(seller, "tin", "");
		Поставщик.ПоставщикНаименование  = ЭСФСервер.ПолучитьСвойство(seller, "name", "");
		Поставщик.Адрес = ЭСФСервер.ПолучитьСвойство(seller, "address", "");
		Поставщик.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateSeries", "");
		Поставщик.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(seller, "certificateNum", "");
		Поставщик.БИНРеорганизованногоЛица = ЭСФСервер.ПолучитьСвойство(seller, "reorganizedTin", "");
		Поставщик.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСервер.ПолучитьСвойство(seller, "isBranchNonResident", Ложь);
		
		statuses = ЭСФСервер.ПолучитьСвойство(seller, "statuses", Неопределено);
		Если statuses <> Неопределено Тогда	
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПоставщика = Новый Соответствие;
				СоответствиеСтатусовПоставщика.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПоставщика.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПоставщика.Вставить("FORWARDER", "Экспедитор");
				СоответствиеСтатусовПоставщика.Вставить("LESSOR", "Лизингодатель");
				СоответствиеСтатусовПоставщика.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПоставщика.Вставить("EXPORTER", "Экспортер");
				СоответствиеСтатусовПоставщика.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
				СоответствиеСтатусовПоставщика.Вставить("TRANSPORTER", "МеждународныйПеревозчик");
				СоответствиеСтатусовПоставщика.Вставить("PRINCIPAL", "Доверитель");
				СоответствиеСтатусовПоставщика.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПоставщика.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПоставщика.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПоставщика.Вставить("NOTARY", "Нотариус");
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПоставщика[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Поставщик[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Поставщик.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(seller, "trailer", "");
		Поставщик.КБе = ЭСФСервер.ПолучитьСвойство(seller, "kbe", "");
		Поставщик.ИИК = ЭСФСервер.ПолучитьСвойство(seller, "iik", "");
		Поставщик.БИК = ЭСФСервер.ПолучитьСвойство(seller, "bik", "");
		Поставщик.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(seller, "bank", "");
		
		Поставщик.ДоляУчастия = ЭСФСервер.ПолучитьСвойство(seller, "shareParticipation", 0);
		Поставщик.БИНФилиала = ЭСФСервер.ПолучитьСвойство(seller, "branchTin", "");
		
	КонецЦикла;
	#КонецОбласти
	
	// Раздел C. Реквизиты получателя.
	#Область РеквизитыПолучателя
	customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Invoice.customers.customer);
	Для Каждого customer Из customerList Цикл
		
		Получатель = ЭСФ.Получатели.Добавить();
		
		Получатель.ПолучательИдентификатор = ЭСФСервер.ПолучитьСвойство(customer, "tin", "");
		Получатель.ПолучательНаименование = ЭСФСервер.ПолучитьСвойство(customer, "name", "");
		Получатель.Адрес = ЭСФСервер.ПолучитьСвойство(customer, "address", "");
		Получатель.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateSeries", "");
		Получатель.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(customer, "certificateNum", "");
		Получатель.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(customer, "trailer", "");
		Получатель.БИНФилиала = ЭСФСервер.ПолучитьСвойство(customer, "branchTin", "");
		Получатель.БИНРеорганизованногоЛица = ЭСФСервер.ПолучитьСвойство(customer, "reorganizedTin", "");
		Получатель.КодСтраны = ЭСФСервер.ПолучитьСвойство(customer, "countryCode", "");
		Получатель.ДоляУчастия = ЭСФСервер.ПолучитьСвойство(customer, "shareParticipation", 0);
		
		statuses = ЭСФСервер.ПолучитьСвойство(customer, "statuses", Неопределено);		
		Если statuses <> Неопределено Тогда
			
			statusList = ЭСФСервер.ПолучитьСвойство(statuses, "status", Неопределено);
			
			Если statusList <> Неопределено Тогда	
				
				statusList = ЭСФСервер.СписокXDTOИзОбъектXDTO(statusList);
				
				СоответствиеСтатусовПолучателя = Новый Соответствие;
				СоответствиеСтатусовПолучателя.Вставить("COMMITTENT", "Комитент");
				СоответствиеСтатусовПолучателя.Вставить("BROKER", "Комиссионер");
				СоответствиеСтатусовПолучателя.Вставить("LESSEE", "Лизингодатель");
				СоответствиеСтатусовПолучателя.Вставить("JOINT_ACTIVITY_PARTICIPANT", "УчастникСовместнойДеятельности");
				СоответствиеСтатусовПолучателя.Вставить("PUBLIC_OFFICE", "ГосударственноеУчреждение");
				СоответствиеСтатусовПолучателя.Вставить("NONRESIDENT", "НерезидентВерсия2");
				СоответствиеСтатусовПолучателя.Вставить("PRINCIPAL", "Доверитель");
				СоответствиеСтатусовПолучателя.Вставить("SHARING_AGREEMENT_PARTICIPANT", "УчастникСРП");
				СоответствиеСтатусовПолучателя.Вставить("RETAIL", "РозничнаяРеализация");
				СоответствиеСтатусовПолучателя.Вставить("INDIVIDUAL", "ФизическоеЛицо");
				СоответствиеСтатусовПолучателя.Вставить("LAWYER", "Адвокат");
				СоответствиеСтатусовПолучателя.Вставить("BAILIFF", "СудебныйИсполнитель");
				СоответствиеСтатусовПолучателя.Вставить("MEDIATOR", "Медиатор");
				СоответствиеСтатусовПолучателя.Вставить("NOTARY", "Нотариус");
				
				
				Для Каждого status Из statusList Цикл
					ИмяРеквизита = СоответствиеСтатусовПолучателя[status];
					Если ИмяРеквизита <> Неопределено Тогда
						Получатель[ИмяРеквизита] = Истина;	
					Иначе
						ЗаписьЖурналаРегистрации("ЭСФ. Неизвестный статус контрагента", УровеньЖурналаРегистрации.Ошибка, , , status);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	#КонецОбласти
	
	// Раздел D. Реквизиты грузоотправителя и грузополучателя.
	#Область РеквизитыГрузоотправителяГрузополучателя
	consignor = ЭСФСервер.ПолучитьСвойство(Invoice, "consignor", Неопределено);
	Если consignor <> Неопределено Тогда
		ЭСФ.ГрузоотправительИдентификатор = ЭСФСервер.ПолучитьСвойство(consignor, "tin", "");
		ЭСФ.ГрузоотправительНаименование = ЭСФСервер.ПолучитьСвойство(consignor, "name", ""); 
		ЭСФ.АдресОтправки = ЭСФСервер.ПолучитьСвойство(consignor, "address", ""); 
	КонецЕсли;
	
	consignee = ЭСФСервер.ПолучитьСвойство(Invoice, "consignee", Неопределено);
	Если consignee <> Неопределено Тогда
		ЭСФ.ГрузополучательИдентификатор = ЭСФСервер.ПолучитьСвойство(consignee, "tin", "");
		ЭСФ.ГрузополучательНаименование = ЭСФСервер.ПолучитьСвойство(consignee, "name", ""); 
		ЭСФ.АдресДоставки = ЭСФСервер.ПолучитьСвойство(consignee, "address", ""); 		
		ЭСФ.ГрузополучательКодСтраны = ЭСФСервер.ПолучитьСвойство(consignee, "countryCode", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел E. Условия поставки.
	#Область УсловияПоставки
	deliveryTerm = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryTerm", Неопределено);	
	Если deliveryTerm <> Неопределено Тогда
		ЭСФ.ДоговорПоставкиНомер             = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractNum", "");
		ЭСФ.ДоговорПоставкиДата              = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "contractDate", "01.01.0001"));
		ЭСФ.ДоговорПоставкиУсловияОплаты     = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "term", "");
		ЭСФ.ДоговорПоставкиСпособОтправления = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "exerciseWay", "");
		ЭСФ.ДоверенностьНаПоставкуНомер      = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrant", "");
		ЭСФ.ДоверенностьНаПоставкуДата       = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(deliveryTerm, "warrantDate", "01.01.0001"));
		ЭСФ.ПунктНазначения                  = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "destination", "");
		ЭСФ.ДоговорПоставкиУсловияПоставки   = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "deliveryConditionCode", "");
		ЭСФ.СпособОтправленияПоКлассификатору = ЭСФСервер.ПолучитьСвойство(deliveryTerm, "transportTypeCode", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел F. Реквизиты документов, подтверждающих поставку товаров, работ, услуг.
	#Область РеквизитыДокументовПодтверждающихПоставкуТоваровРаботУслуг
	ЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocNum", "");
	ЭСФ.ДокументПодтверждающийПоставкуДата  = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "deliveryDocDate", "01.01.0001"));
	#КонецОбласти
	
	// Раздел F. Реквизиты государственного учреждения.
	#Область РеквизитыГосударственногоУчреждения
	publicOffice = ЭСФСервер.ПолучитьСвойство(Invoice, "publicOffice", Неопределено);	
	Если publicOffice <> Неопределено Тогда
		ЭСФ.ГосучреждениеИИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "iik", "");
		ЭСФ.ГосучреждениеКодТоваров        = ЭСФСервер.ПолучитьСвойство(publicOffice, "productCode", "");
		ЭСФ.ГосучреждениеНазначениеПлатежа = ЭСФСервер.ПолучитьСвойство(publicOffice, "payPurpose", "");
		ЭСФ.ГосучреждениеБИК               = ЭСФСервер.ПолучитьСвойство(publicOffice, "bik", "");
	КонецЕсли;
	#КонецОбласти
	
	// Раздел G. Данные по товарам (работам, услугам).
	#Область ДанныеПоТоварам
	ЭСФ.ВалютаКод = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyCode", "KZT");
	ЭСФ.КурсВалюты = ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "currencyRate", 1);
	ЭСФ.МестоРеализацииНеРК = ЭСФКлиентСервер.МестоРеализацииНеРКИБ(ЭСФСервер.ПолучитьСвойство(Invoice.productSet, "ndsRateType", ""));
	
	СписокТоваров = Invoice.productSet.products.product;
	СписокТоваров = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокТоваров);
	Для Каждого ТоварXDTO Из СписокТоваров Цикл
		ТоварСтрока = ЭСФ.Товары.Добавить();
		//++ НЕ ЭСФ
		Если ЗначениеЗаполнено(ЭСФ.СНТ) ИЛИ СтрНайти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT-") > 0 Тогда
			ТоварСтрока.НомерИзСНТ = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "productNumberInSnt", ""); // Номер продукта (товара, услуги) из СНТ (G 1)
		КонецЕсли;
		//-- НЕ ЭСФ
		ТоварСтрока.ТоварНаименование            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "description", "");
		ТоварСтрока.КодТНВЭД                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitCode", "");
		
		ЕдиницаИзмерения = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitNomenclature", "");
		
		Если ЭСФКлиентСерверПереопределяемый.ТолькоЦифрыВСтроке(ЕдиницаИзмерения) Тогда
			ТоварСтрока.ЕдиницаИзмеренияКод = ЕдиницаИзмерения;
		Иначе
			ТоварСтрока.ЕдиницаИзмеренияНаименование = ЕдиницаИзмерения;
		КонецЕсли;
		
		ТоварСтрока.Количество                   = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "quantity", 0);
		ТоварСтрока.Цена                         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "unitPrice", 0);
		ТоварСтрока.СуммаБезНалогов              = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithoutTax", 0);
		ТоварСтрока.СтавкаАкцизаЧисло            = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseRate", 0);
		ТоварСтрока.СуммаАкциза                  = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "exciseAmount", 0);
		ТоварСтрока.ОборотПоРеализации           = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "turnoverSize", 0);
		ТоварСтрока.СтавкаНДСЧисло               = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsRate", 0);
		ТоварСтрока.БезНДС                       = ?(ЭСФСервер.ЕстьСвойство(ТоварXDTO, "ndsRate"), Ложь, Истина);
		ТоварСтрока.СуммаНДС                     = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "ndsAmount", 0);
		ТоварСтрока.Сумма                        = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "priceWithTax", 0);
		ТоварСтрока.НомерЗаявленияВРамкахТС      = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "productDeclaration", "");
		ТоварСтрока.ДополнительныеДанные         = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "additional", "");
		
		ТоварСтрока.ПризнакПроисхождения 		 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "truOriginCode", "");
		ТоварСтрока.ТоварНаименованиеВРамкахТС 	 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "tnvedName", "");
		ТоварСтрока.НомерПозицииВДекларацииИлиЗаявлении = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "productNumberInDeclaration", "");
		ТоварСтрока.ИдентификаторТовара 		 = ЭСФСервер.ПолучитьСвойство(ТоварXDTO, "catalogTruId", "");
		
	КонецЦикла;
	
	//++ НЕ ЭСФ
	
	//Заполним признак учета на вируальном складе
	Если ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ЭСФ.Дата) Тогда
		ЗаполнитьПризнакУчетаНаВиртуальномСкладе(ЭСФ.ДатаОборота, ЭСФ.Товары)
	КонецЕсли;	
	
	//-- НЕ ЭСФ

	#КонецОбласти
	
	// Раздел H. Сведения по участникам СД.
	#Область СведенияПоУчастникамСД
	sellerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerParticipants", Неопределено);	
	ЗаполнитьТаблицуТоваровПоУчастникамСД(sellerParticipants, ЭСФ.ТоварыПоПоставщикам);
	
	customerParticipants = ЭСФСервер.ПолучитьСвойство(Invoice, "customerParticipants", Неопределено);	
	ЗаполнитьТаблицуТоваровПоУчастникамСД(customerParticipants, ЭСФ.ТоварыПоПолучателям);
	
	// Заполнить колонку ДоляУчастия в таблице Поставщики.
	//Если ЭСФ.Поставщики.Количество() <> 0 Тогда 
	//	
	//	Если ЭСФ.Поставщики[0].УчастникСовместнойДеятельности Тогда
	//		
	//		УдалосьЗаполнитьДолиПоставщиков = ЗаполнитьДолиУчастияПоставщиков(ЭСФ);
	//		
	//		Если НЕ УдалосьЗаполнитьДолиПоставщиков Тогда
	//			СтрокаОшибки = ЭСФ.Ошибки.Добавить();
	//			СтрокаОшибки.Текст = ТекстНеУдалосьЗаполнитьДолиУчастниковСД();
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	#КонецОбласти
	
	// Раздел I. Дополнительные сведения.
	#Область ДополнительныеСведения
	ЭСФ.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(Invoice, "addInf", "");
	#КонецОбласти 
	
	// Раздел I. Поверенный поставщика
	#Область ПоверенныйПоставщика
	ЭСФ.ПоверенныйПоставщикаБИН = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentTin", "");
	ЭСФ.ПоверенныйПоставщикаНаименование = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentName", "");
	ЭСФ.ПоверенныйПоставщикаАдресМестонахождения = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentAddress", "");
	ЭСФ.ДоговорПорученияПоставщикаНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentDocNum", "");
	ЭСФ.ДоговорПорученияПоставщикаДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "sellerAgentDocDate", "01.01.0001"));
	#КонецОбласти
	
	// Раздел J. Поверенный поставщика
	#Область ПоверенныйПокупателя	
	ЭСФ.ПоверенныйПокупателяБИН = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentTin", "");
	ЭСФ.ПоверенныйПокупателяНаименование = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentName", "");
	ЭСФ.ПоверенныйПокупателяАдресМестонахождения = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentAddress", "");
	ЭСФ.ДоговорПорученияПокупателяНомер = ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentDocNum", "");
	ЭСФ.ДоговорПорученияПокупателяДата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "customerAgentDocDate", "01.01.0001"));
	#КонецОбласти
	
	// Прочие сведения.
	#Область ПрочиеСведения
	ЭСФ.Статус = ЭСФКлиентСервер.СтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceStatus", ""));
	ЭСФ.ПользовательскийСтатус = ЭСФКлиентСервер.ПользовательскийСтатусИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "state", ""));
	ЭСФ.Направление = НаправлениеЭСФ;
	ЭСФ.Идентификатор = InvoiceInfo.invoiceId;
	ЭСФ.УполномоченныйСотрудник = ЭСФСервер.ПолучитьСвойство(Invoice, "operatorFullname", "");
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Входящий Тогда
		БИНФилиала = ЭСФ.Получатели[0].БИНФилиала;
	Иначе
		БИНФилиала = ЭСФ.Поставщики[0].БИНФилиала;
	КонецЕсли;	
	СП = Справочники.Организации.ПустаяСсылка();
	
	ИмяРеквизитаБИН = "%СтруктурнаяЕдиницаИдентификационныйНомер";
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить(ИмяРеквизитаБИН, "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ИмяРеквизитаБИН, СоответствиеИменРеквизитов);
	
	Если ЗначениеЗаполнено(БИНФилиала) Тогда
		СП = Справочники.Организации.НайтиПоРеквизиту(ИмяРеквизитаБИН, БИНФилиала);
	КонецЕсли;
	
	Если СП.ГоловнаяОрганизация = ОрганизацияИСтруктурноеПодразделение.Организация И СП.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
		ЭСФ.Организация = СП;
	Иначе
		ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	КонецЕсли;
	//ЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
	КонецЕсли;
	
	ЭСФ.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "signatureType", ""));
	ЭСФ.ЭЦП = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "signature", "");	
	
	//++ НЕ ЭСФ
	
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Входящий Тогда
		Если ЗначениеЗаполнено(ЭСФ.Организация) И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ЭСФ.Дата) И Не ЗначениеЗаполнено(ЭСФ.Склад) Тогда
			
			СкладНераспределенныхТоваров = ВССервер.ПолучитьСкладНераспределенныхТоваровОрганизации(ЭСФ.Организация);
			ЭСФ.Склад = СкладНераспределенныхТоваров;
			
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ ЭСФ
	#КонецОбласти
	
КонецПроцедуры

// Возвращает массив объектов ЭСФ, которые необходимо обработать при синхронизации с ИС ЭСФ.
// Объекты ЭСФ находятся по идентификатору из InvoiceInfoList и структурной единице.
// Поиск выполняется среди входящих и исходящих ЭСФ.
//
// Параметры:
//  InvoiceInfoList - СписокXDTO - Список invoice, для которых необходимо найти документы ЭСФ.
//   Если в InvoiceInfoList есть Черновик, Импортированный, Ошибочный, то для них не находятся и не создаются объекты ЭСФ.
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все invoice из InvoiceInfoList.
//  ТолькоСуществующиеЭСФ - Булево - Если Истина, то вернет только те ЭСФ, которые уже есть в ИБ.
//   Если Ложь, то верент ЭСФ которые есть в ИБ, а для тех, которых нет в ИБ создаст новые объекты ЭСФ, но не будет записывать их.
//  УчитыватьВсеСтатусыЭСФ - Булево - Если Истина, то массив будет включать все ЭСФ: 
//   Черновики, Импортированные, Ошибочные, Доставленные, Отправленные и т.д.
//   Если Ложь, то массив будет включать все ЭСФ, кроме Черновик, Ошибочный, Импортированный.
//
// Возвращаемое значение:
//  Массив - Массив найденных объектов ЭСФ. Каждый элемент массива имеет тип ДокументОбъект.ЭСФ.
//
Функция НовыйМассивЗагружаемыхЭСФ(Знач InvoiceInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеЭСФ, Знач УчитыватьВсеСтатусыЭСФ, Пользователь = Неопределено)
	
	МассивЭСФ = Новый Массив;
	
	// Создать массив идентификаторов Invoice.
	МассивИдентификаторов = Новый Массив;
	Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
		
		Если УчитыватьВсеСтатусыЭСФ Тогда
			
			МассивИдентификаторов.Добавить(InvoiceInfo.invoiceId);
			
		Иначе
			
			СтатусInvoice = ЭСФКлиентСервер.СтатусИБ(InvoiceInfo.invoiceStatus);
			
			Если СтатусInvoice <> Перечисления.СтатусыЭСФ.Черновик 
				И СтатусInvoice <> Перечисления.СтатусыЭСФ.Ошибочный
				И СтатусInvoice <> Перечисления.СтатусыЭСФ.Импортированный Тогда
				
				МассивИдентификаторов.Добавить(InvoiceInfo.invoiceId);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов ЭСФ.
	// Если ТолькоСуществующиеЭСФ, то только старых объектов ЭСФ.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихЭСФ Цикл
		
		ИдентификаторЭСФ = ЭлементКоллекции.Ключ;
		СсылкаЭСФ = ЭлементКоллекции.Значение;
		
		Если СсылкаЭСФ.Пустая() Тогда
			Если НЕ ТолькоСуществующиеЭСФ Тогда
				ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
				ОбъектЭСФ.Идентификатор = ИдентификаторЭСФ;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ТекущийПользовательНеУказан = ЭСФСерверПереопределяемый.ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь);
				Если ТекущийПользовательНеУказан Тогда  
					ОбъектЭСФ.Автор = Пользователь;
				Иначе
					ОбъектЭСФ.Автор = ТекущийПользователь;
				КонецЕсли;

				МассивЭСФ.Добавить(ОбъектЭСФ);
			КонецЕсли;
		Иначе
			МассивЭСФ.Добавить(СсылкаЭСФ.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключить проверку даты запрета изменения при записи ЭСФ.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
	КонецЦикла;
	
	Возврат МассивЭСФ;
	
КонецФункции

Функция НайтиInvoiceInfoПоId(Знач InvoiceInfoList, Знач id)
	
	НайденныйInvoiceInfo = Неопределено;
	
	Для Каждого ТекущийInvoiceInfo Из InvoiceInfoList Цикл
		Если ТекущийInvoiceInfo.invoiceId = id Тогда
			НайденныйInvoiceInfo = ТекущийInvoiceInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйInvoiceInfo;
	
КонецФункции

//++ НЕ ЭСФ

Процедура ЗаполнитьПризнакУчетаНаВиртуальномСкладе(ДатаОборота, ЭСФТовары)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары" , ЭСФТовары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОборота", ДатаОборота);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.ТоварНаименование,
	|	ЭСФТовары.КодТНВЭД КАК КодТНВЭД,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.Количество,
	|	ЭСФТовары.Цена,
	|	ЭСФТовары.СуммаБезНалогов,
	|	ЭСФТовары.СтавкаАкцизаЧисло,
	|	ЭСФТовары.СтавкаАкциза,
	|	ЭСФТовары.СуммаАкциза,
	|	ЭСФТовары.ОборотПоРеализации,
	|	ЭСФТовары.СтавкаНДСЧисло,
	|	ЭСФТовары.БезНДС,
	|	ЭСФТовары.СтавкаНДС,
	|	ЭСФТовары.СуммаНДС,
	|	ЭСФТовары.Сумма,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС,
	|	ЭСФТовары.ДополнительныеДанные,
	|	ЭСФТовары.ПризнакПроисхождения,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ИдентификаторТовара,
	|	ЭСФТовары.НомерИзСНТ
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК ЭСФТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодТНВЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Товары.НомерСтроки КАК НомерСтроки,
	|	вт_Товары.ТоварНаименование,
	|	вт_Товары.КодТНВЭД,
	|	вт_Товары.ЕдиницаИзмеренияНаименование,
	|	вт_Товары.ЕдиницаИзмеренияКод,
	|	вт_Товары.Количество,
	|	вт_Товары.Цена,
	|	вт_Товары.СуммаБезНалогов,
	|	вт_Товары.СтавкаАкцизаЧисло,
	|	вт_Товары.СтавкаАкциза,
	|	вт_Товары.СуммаАкциза,
	|	вт_Товары.ОборотПоРеализации,
	|	вт_Товары.СтавкаНДСЧисло,
	|	вт_Товары.БезНДС,
	|	вт_Товары.СтавкаНДС,
	|	вт_Товары.СуммаНДС,
	|	вт_Товары.Сумма,
	|	вт_Товары.НомерЗаявленияВРамкахТС,
	|	вт_Товары.ДополнительныеДанные,
	|	вт_Товары.ПризнакПроисхождения,
	|	вт_Товары.ТоварНаименованиеВРамкахТС,
	|	вт_Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_Товары.ИдентификаторТовара,
	|	вт_Товары.НомерИзСНТ,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладе
	|ИЗ
	|	вт_Товары КАК вт_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
	|					&ДатаОборота,
	|					НоменклатураГСВС.КодГСВС В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт_Товары.КодТНВЭД
	|						ИЗ
	|							вт_Товары КАК вт_Товары)) КАК СведенияОНоменклатуреГСВС
	|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС.Ссылка
	|				И (СведенияОНоменклатуреГСВС.ПризнакАктивности)
	|		ПО вт_Товары.КодТНВЭД = ГСВС.КодГСВС
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ЭСФТовары.Загрузить(Запрос.Выполнить().Выгрузить())
КонецПроцедуры

Процедура ЗаполнитьПризнакУчетаНаВиртуальномСкладеЗаПериод(Параметры) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//////////////////////////////////////////////////////////////////////////////
	// Определить дату начала и дату конца выполнения обработки.
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаНачала") Тогда
			ПараметрДатаНачала = НачалоДня(Параметры.ДатаНачала);	
		Иначе
			ПараметрДатаНачала = Дата(0001, 01, 01);	
		КонецЕсли;
	Иначе
		ПараметрДатаНачала = Дата(0001, 01, 01);	
	КонецЕсли;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("ДатаКонца") Тогда
			Если Параметры.ДатаКонца = Дата(0001, 01, 01) Тогда
				ПараметрДатаКонца = Дата(3999, 12, 31);
			Иначе
				ПараметрДатаКонца = КонецДня(Параметры.ДатаКонца);
			КонецЕсли;
		Иначе
			ПараметрДатаКонца = Дата(3999, 12, 31);	
		КонецЕсли;
	Иначе
		ПараметрДатаКонца = Дата(3999, 12, 31);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала" 	 , ПараметрДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрДатаКонца);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭСФТовары.Ссылка КАК Ссылка,
	|	ЭСФТовары.Ссылка.Дата КАК Дата,
	|	ГСВС.Ссылка КАК ГСВС,
	|	ЭСФТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ вт_ЭСФТовары
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|		ПО ЭСФТовары.КодТНВЭД = ГСВС.КодГСВС
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|ГДЕ
	|	ЭСФТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ГСВС.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОНоменклатуреГСВС.Период, ДЕНЬ) КАК Период,
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС КАК НоменклатураГСВС
	|ПОМЕСТИТЬ вт_Периоды
	|ИЗ
	|	РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|ГДЕ
	|	СведенияОНоменклатуреГСВС.НоменклатураГСВС В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				вт_ЭСФТовары.ГСВС
	|			ИЗ
	|				вт_ЭСФТовары КАК вт_ЭСФТовары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ЭСФТовары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(вт_Периоды.Период) КАК Период,
	|	вт_ЭСФТовары.ГСВС КАК ГСВС
	|ПОМЕСТИТЬ вт_ЭСФДатаСреза
	|ИЗ
	|	вт_ЭСФТовары КАК вт_ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Периоды КАК вт_Периоды
	|		ПО (НАЧАЛОПЕРИОДА(вт_ЭСФТовары.Дата, ДЕНЬ) >= вт_Периоды.Период)
	|			И вт_ЭСФТовары.ГСВС = вт_Периоды.НоменклатураГСВС
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ЭСФТовары.Ссылка,
	|	вт_ЭСФТовары.ГСВС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ЭСФДатаСреза.Период КАК Период,
	|	вт_ЭСФТовары.ГСВС КАК ГСВС,
	|	вт_ЭСФТовары.НомерСтроки КАК НомерСтроки,
	|	вт_ЭСФТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	вт_ЭСФТовары КАК вт_ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЭСФДатаСреза КАК вт_ЭСФДатаСреза
	|		ПО вт_ЭСФТовары.Ссылка = вт_ЭСФДатаСреза.Ссылка
	|			И вт_ЭСФТовары.ГСВС = вт_ЭСФДатаСреза.ГСВС
	|ГДЕ
	|	вт_ЭСФТовары.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				вт_ЭСФТовары.Ссылка
	|			ИЗ
	|				вт_ЭСФТовары КАК вт_ЭСФТовары)
	|	И НЕ вт_ЭСФДатаСреза.Период ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ЭСФТовары.Ссылка КАК ЭСФ,
	|	ЭСФТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	вт_Товары КАК ЭСФТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВС
	|		ПО ЭСФТовары.Период = СведенияОНоменклатуреГСВС.Период
	|			И ЭСФТовары.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|ГДЕ
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ)
	|ИТОГИ ПО
	|	ЭСФ";
	
	ВыборкаЗапросаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗапросаПоДокументам.Следующий() Цикл
		
		ЭСФ 			= ВыборкаЗапросаПоДокументам.ЭСФ.ПолучитьОбъект();
		ВыборкаЗапроса 	= ВыборкаЗапросаПоДокументам.Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			СтрокаЭСФ = ЭСФ.Товары[ВыборкаЗапроса.НомерСтроки - 1];
			СтрокаЭСФ.ПризнакУчетаНаВиртуальномСкладе = ВыборкаЗапроса.ПризнакУчетаНаВиртуальномСкладе;
		КонецЦикла;	
		
		Попытка
			ЭСФ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru='При записи документа %1 произошла ошибка: %2'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭСФ, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЦикла;	
	
	ТекстСообщения = НСтр("ru='Обработка завершена'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//-- НЕ ЭСФ

///////////////////////////////////////////////////////////////////////////////
// Заполнение данных участников СД

// Заполняет таблицу ТоварыПоПоставщикам или ТоварыПоПолучателям докумнета ЭСФ.
//
// Параметры:
//  participants - ОбъектXDTO, Неопределено - Значение узлов:
//   Invoice.customerParticipants или Invoice.sellerParticipants,
//   на основании которых будет заполнена таблица: 
//   ТоварыПоПолучателям или ТоварыПоПоставщикам, соответственно.
//  ТоварыПоУчастникамСД - Табличная часть - Табличная часть документа ЭСФ,
//   которая будет заполнена данными participants, может быть:
//   ТоварыПоПоставщикам или ТоварыПоПолучателям.
//
Процедура ЗаполнитьТаблицуТоваровПоУчастникамСД(Знач participants, ТоварыПоУчастникамСД)
	
	ТоварыПоУчастникамСД.Очистить();
	
	Если participants <> Неопределено Тогда
		
		participantList = ЭСФСервер.ПолучитьСвойство(participants, "participant", Неопределено);	
		
		Если participantList <> Неопределено Тогда
			
			participantList = ЭСФСервер.СписокXDTOИзОбъектXDTO(participantList);
			
			Для Каждого participant Из participantList Цикл
				
				productShares = ЭСФСервер.ПолучитьСвойство(participant, "productShares", Неопределено);	
				
				Если productShares <> Неопределено Тогда
					
					shareList = ЭСФСервер.ПолучитьСвойство(productShares, "share", Неопределено);	
					
					Если shareList <> Неопределено Тогда
						
						shareList = ЭСФСервер.СписокXDTOИзОбъектXDTO(shareList);
						
						Для Каждого share Из shareList Цикл
							
							СтрокаТоварыПоПолучателям = ТоварыПоУчастникамСД.Добавить();
							
							СтрокаТоварыПоПолучателям.Идентификатор = ЭСФСервер.ПолучитьСвойство(participant, "tin", "");
							СтрокаТоварыПоПолучателям.НомерТовара = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "productNumber", "0"));
							СтрокаТоварыПоПолучателям.Количество = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "quantity", "0"));
							СтрокаТоварыПоПолучателям.СуммаБезНалогов = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "priceWithoutTax", "0"));
							СтрокаТоварыПоПолучателям.СуммаАкциза = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "exciseAmount", "0"));
							СтрокаТоварыПоПолучателям.ОборотПоРеализации = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "turnoverSize", "0"));
							СтрокаТоварыПоПолучателям.СуммаНДС = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "ndsAmount", "0"));
							СтрокаТоварыПоПолучателям.Сумма = ЧислоИзСтроки(ЭСФСервер.ПолучитьСвойство(share, "priceWithTax", "0"));
							СтрокаТоварыПоПолучателям.ДополнительныеДанные = ЭСФСервер.ПолучитьСвойство(share, "additional", "");
							СтрокаТоварыПоПолучателям.НомерИзСНТ = ЭСФСервер.ПолучитьСвойство(share, "productNumberInSnt", ""); // Номер продукта (товара, услуги) из СНТ (G 1)
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТоварыПоУчастникамСД.Сортировать("НомерТовара Возр, Идентификатор Возр");
	
КонецПроцедуры

// Заполняет колонку ДоляУчастия табличной части Поставщики.
// Для заполнения колонки используются данны таблицы ТоварыПоПоставщикам.
//
// Параметры:
//  ЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - 
//   Документ ЭСФ, в табличной части которого необходимо 
//   заполнить колонку ДоляУчастия в таблице Поставщики.
//
Функция ЗаполнитьДолиУчастияПоставщиков(ЭСФ) Экспорт 
	
	УдалосьЗаполнить = Истина;
	
	// Очистить колонку ДоляУчастия в таблице Поставщики.
	Для Каждого СтрокаПоставщики Из ЭСФ.Поставщики Цикл
		СтрокаПоставщики.ДоляУчастия = 0;	
	КонецЦикла;
	
	ДолиПоПоставщикамИТоварам = НоваяТаблицаДолиПоПоставщикамИТоварам(ЭСФ);
    ИтоговыеДолиПоПоставщикам = НоваяТаблицаИтоговыеДолиПоПоставщикам(ЭСФ);	
	
	Если ВсеТоварыРаспределеныПоДолямОдинаково(ДолиПоПоставщикамИТоварам, ИтоговыеДолиПоПоставщикам) Тогда
		ЗаполнитьРеквизитДоляУчастияТабличнойЧастиПоставщики(ИтоговыеДолиПоПоставщикам, ЭСФ.Поставщики);
		УдалосьЗаполнить = Истина;
	Иначе
		УдалосьЗаполнить = Ложь;
	КонецЕсли;
	
	Возврат УдалосьЗаполнить;
	
КонецФункции

// Возвращает итоговые доли всех поставщиков из ЭСФ.
// Сумма всех итоговых долей равняется единице.
// Итоговые доли находятся следующим образом:
// 1. Вычисляется сумма с учетом налогов для всех товаров из ЭСФ.
// 2. Определяется на какую сумму с учетом налогов продал конкретный поставщик.
// 3. Итоговая доля поставщика = (2) / (1).
//
// Параметры:
//  См. ЗаполнитьДолиУчастияПоставщиков().
//
// Возвращаемое значение:
//  ТаблицаЗначений - Всегда содержит всех поставщиков из таблицы Поставщики.
//   |- ИдентификаторПоставщика - Строка - БИН/ИИН поставщика.
//   |- ИтогоДоляПоставщика - Число - Итоговая доля участия по данному поставщику.
//       Если в разделе H нет данных по поставщику, то содержит цифру ноль.
//
Функция НоваяТаблицаИтоговыеДолиПоПоставщикам(ЭСФ)
	
	// Создать таблицу ДолиПоПоставщикам. 
	ДолиПоПоставщикам = Новый ТаблицаЗначений;
	ДолиПоПоставщикам.Колонки.Добавить("ИдентификаторПоставщика");
	ДолиПоПоставщикам.Колонки.Добавить("ИтогоСуммаПоПоставщику");
	
	// Добавить в таблицу ДолиПоПоставщикам всех поставщиков. 
	Для Каждого СтрокаПоставщики Из ЭСФ.Поставщики Цикл
		СтрокаДолиПоПоставщикам = ДолиПоПоставщикам.Добавить();
		СтрокаДолиПоПоставщикам.ИдентификаторПоставщика = СтрокаПоставщики.ПоставщикИдентификатор;
		СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику = 0;
	КонецЦикла;
	
	// Изменить нулевые суммы в таблице ДолиПоПоставщикам 
	// на итоговые суммы по каждому поставщику из таблицы ТоварыПоПоставщикам.	
	Для Каждого СтрокаДолиПоПоставщикам Из ДолиПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор", СтрокаДолиПоПоставщикам.ИдентификаторПоставщика);
		
		МассивСтрокТоварыПоПоставщикам = ЭСФ.ТоварыПоПоставщикам.НайтиСтроки(ПараметрыОтбора);
		
		ИтогоСуммаПоПоставщику = 0;
		Для Каждого СтрокаТоварыПоПоставщикам Из МассивСтрокТоварыПоПоставщикам Цикл
			ИтогоСуммаПоПоставщику = ИтогоСуммаПоПоставщику + СтрокаТоварыПоПоставщикам.Сумма;	
		КонецЦикла;
		СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику = ИтогоСуммаПоПоставщику;
		
	КонецЦикла;
	
	ИтогоСуммаПоЭСФ = ЭСФ.ТоварыПоПоставщикам.Итог("Сумма");
	ДолиПоПоставщикам.Колонки.Добавить("ИтогоДоляПоставщика");
	
	// Заполнить долю каждого поставщика.
	Для Каждого СтрокаДолиПоПоставщикам Из ДолиПоПоставщикам Цикл
		
		СтрокаДолиПоПоставщикам.ИтогоДоляПоставщика = СтрокаДолиПоПоставщикам.ИтогоСуммаПоПоставщику 
			/ ?(ИтогоСуммаПоЭСФ <> 0, ИтогоСуммаПоЭСФ, 1);
			
	КонецЦикла;
	
	ДолиПоПоставщикам.Колонки.Удалить("ИтогоСуммаПоПоставщику");
	
	Возврат ДолиПоПоставщикам;
	
КонецФункции

// Возвращает доли в разрезе поставщиков и товаров.
// Сумма долей всех поставщиков по конкретному товару всегда равняется единице.
// Семма долей одного поставщика по всем товарам может быть любой.
// Доли в разрезе поставщиков и товаров находятся следующим образом:
// Сумма с учетом налогов, на которую поступил товар от данного поставщика 
// делится на общую сумму с учетом налогов по данному товару.
//
// Параметры:
//  См. ЗаполнитьДолиУчастияПоставщиков().
//
// Возвращаемое значение:
//  ТаблицаЗначений - Всегда содержит всех поставщиков и все товары.
//   |- ИдентификаторПоставщика - Строка - БИН/ИИН поставщика.
//   |- НомерТовара - Число - Номер строки в таблице Товары.
//   |- ДоляПоставщика - Число - Доля поставщика по данному товару.
//       Если в разделе H нет данных о продажи данного товара, 
//       данным поставщиком, то содержит цифру ноль.
//
Функция НоваяТаблицаДолиПоПоставщикамИТоварам(ЭСФ)
	
	ДолиПоПоставщикамИТоварам = Новый ТаблицаЗначений;
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("ИдентификаторПоставщика");
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("НомерТовара");
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("СуммаПоставщика");	
	
	// Заполнить таблицу всеми поставщиками и всеми товарами, а также нулевыми суммами.
	Для Каждого СтрокаПоставщик Из ЭСФ.Поставщики Цикл
		
		Для НомерТовара = 1 По ЭСФ.Товары.Количество() Цикл
			
			СтрокаДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.Добавить();
			СтрокаДолиПоПоставщикамИТоварам.ИдентификаторПоставщика = СтрокаПоставщик.ПоставщикИдентификатор;
			СтрокаДолиПоПоставщикамИТоварам.НомерТовара = НомерТовара;
			СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Изменить нулевые суммы в таблице ДолиПоПоставщикамИТоварам 
	// на суммы из таблицы ТоварыПоПоставщикам.	
	Для Каждого СтрокаТоварыПоПоставщикам Из ЭСФ.ТоварыПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторПоставщика", СтрокаТоварыПоПоставщикам.Идентификатор);
		ПараметрыОтбора.Вставить("НомерТовара", СтрокаТоварыПоПоставщикам.НомерТовара);	
		
		МассивСтрокДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.НайтиСтроки(ПараметрыОтбора);
		СтрокаДолиПоПоставщикамИТоварам = МассивСтрокДолиПоПоставщикамИТоварам[0];
		СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика = СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика + СтрокаТоварыПоПоставщикам.Сумма;
		
	КонецЦикла;	
	
	// Создать соответствие НомерТовара - СуммаТовараУчитываяВсеНалоги.
	ИтогоСуммыТоваров = Новый Соответствие;
	Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
		НомерТовара = СтрокаТовары.НомерСтроки; 
		ИтогоСуммаПоТовару = СтрокаТовары.Сумма;
		ИтогоСуммыТоваров.Вставить(НомерТовара, ИтогоСуммаПоТовару);	
	КонецЦикла;
	
	// Заполнить в таблице долю поставщика по каждому товару.
	ДолиПоПоставщикамИТоварам.Колонки.Добавить("ДоляПоставщика");	
	Для Каждого СтрокаДолиПоПоставщикамИТоварам Из ДолиПоПоставщикамИТоварам Цикл
		
		СуммаПоставщика = СтрокаДолиПоПоставщикамИТоварам.СуммаПоставщика;
		ИтогоСуммаПоТовару = ИтогоСуммыТоваров[СтрокаДолиПоПоставщикамИТоварам.НомерТовара];
		
		СтрокаДолиПоПоставщикамИТоварам.ДоляПоставщика = СуммаПоставщика 
			/ ?(ИтогоСуммаПоТовару = 0, 1, ИтогоСуммаПоТовару);
			
	КонецЦикла;
	
	ДолиПоПоставщикамИТоварам.Колонки.Удалить("СуммаПоставщика");
	
	Возврат ДолиПоПоставщикамИТоварам;
	
КонецФункции

// Проверяет, что все товары распределены по долям.
//
// Например, была 1 линейка и 2 ручки. 
//
// Если в одном ЭСФ Иванов продал 1 линейку и 1 ручку,
// а Петров продал 1 ручку, то данный метод вернет Ложь.
//
// Если в одном ЭСФ Иванов продал 0,(3) линейки и 0,(6) ручку,
// а Петров продал 0,(6) линейки и 1,(3) ручки, то данный метод вернет Истина.
//
// Параметры:
//  ДолиПоПоставщикамИТоварам - См. НоваяТаблицаИтоговыеДолиПоПоставщикам().
//  ИтоговыеДолиПоПоставщикам - См. НоваяТаблицаДолиПоПоставщикамИТоварам().
//
// Возвращаемое значение:
//  Булево - Истина, если все товары распределены с использованием долей.
//   Ложь, если раздел H составлен без учета долей.
//
Функция ВсеТоварыРаспределеныПоДолямОдинаково(Знач ДолиПоПоставщикамИТоварам, Знач ИтоговыеДолиПоПоставщикам)
	
	ВсеТоварыРаспределеныПоДолямОдинаково = Истина;
	
	Для Каждого СтркоаИтоговыеДолиПоПоставщикам Из ИтоговыеДолиПоПоставщикам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторПоставщика", СтркоаИтоговыеДолиПоПоставщикам.ИдентификаторПоставщика);
		
		МассивСтрокДолиПоПоставщикамИТоварам = ДолиПоПоставщикамИТоварам.НайтиСтроки(ПараметрыОтбора);
		
		ОкругленнаяИтоговаяДоляПоставщика = ОкруглитьДолюУчастникаСД(СтркоаИтоговыеДолиПоПоставщикам.ИтогоДоляПоставщика);
		
		Для Каждого СтрокаДолиПоПоставщикамИТоварам Из МассивСтрокДолиПоПоставщикамИТоварам Цикл
			
			ОкругленнаяДоляПоставщикаПоТовару = ОкруглитьДолюУчастникаСД(СтрокаДолиПоПоставщикамИТоварам.ДоляПоставщика);
			
			Если ОкругленнаяДоляПоставщикаПоТовару >= ОкругленнаяИтоговаяДоляПоставщика - 0.01
				И ОкругленнаяДоляПоставщикаПоТовару <= ОкругленнаяИтоговаяДоляПоставщика + 0.01 Тогда
				
				// Продолжаем проверку.
				
			Иначе
				
				ВсеТоварыРаспределеныПоДолямОдинаково = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ВсеТоварыРаспределеныПоДолямОдинаково Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеТоварыРаспределеныПоДолямОдинаково;
	
КонецФункции

Процедура ЗаполнитьРеквизитДоляУчастияТабличнойЧастиПоставщики(ИтоговыеДолиПоПоставщикам, Поставщики)
	
	Для Каждого СтрокаИтоговыеДолиПоПоставщикам Из ИтоговыеДолиПоПоставщикам Цикл
		
		ДоляУчастия = СтрокаИтоговыеДолиПоПоставщикам.ИтогоДоляПоставщика;
		ДоляУчастия = ДоляУчастия * 1000000000000;
		ДоляУчастия = ОкруглитьДолюУчастникаСД(ДоляУчастия);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПоставщикИдентификатор", СтрокаИтоговыеДолиПоПоставщикам.ИдентификаторПоставщика);
		МассивСтрокПоставщики = Поставщики.НайтиСтроки(ПараметрыОтбора);
		СтрокаПоставщики = МассивСтрокПоставщики[0];
		СтрокаПоставщики.ДоляУчастия = ДоляУчастия;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОкруглитьДолюУчастникаСД(Знач ДолюУчастникаСД)
	
	Возврат Окр(ДолюУчастникаСД, 2, РежимОкругления.Окр15как20);
	
КонецФункции

Функция ТекстНеУдалосьЗаполнитьДолиУчастниковСД() Экспорт
	
	Текст = НСтр(
	"ru = 'Не удалось автоматически заполнить поле ""Коэффициент доли участия"" в разделе ""B. Поставщики"",
	|так как из данных раздела ""H. Участники СД"" не удалось вычислить доли участия каждого поставщика.
	|При отражении данного ЭСФ рекомендуется ввести отдельные документы ""Счет-фактура (полученный)""
	|для каждого участника совместной деятельности или вручную заполнить поле ""Коэффициент доли участия"" 
	|в разделе ""B. Поставщики"", после чего ввести один документ ""Счет-фактура (полученный)"".'");
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБНОВИТЬ ЭСФ ИЗ ИС ЭСФ

Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач МассивЭСФ, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбновитьДокументыЭСФПоИдентификатору(МассивЭСФ, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
		
		// Обновим состояние у ЭСФ со статусом НеПолучениОтветОтСервера
		МассивБезОтветаОтСервера = Новый Массив;
		
		// выберем документы с пустым идентификатором, которых нет в очереди отправки, попробуем обновить их с помощью номера и даты документа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыЭСФ.Ссылка
			|ИЗ
			|	Документ.ЭСФ КАК ДокументыЭСФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьОтправкиЭСФ
			|		ПО (ОчередьОтправкиЭСФ.ЭСФ = ДокументыЭСФ.Ссылка)
			|ГДЕ
			|	ДокументыЭСФ.Идентификатор = """"
			|	И ДокументыЭСФ.Ссылка В(&МассивЭСФ)
			|	И ОчередьОтправкиЭСФ.ЭСФ ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			// сообщение пользователю об ЭСФ в очереди отправки
			|ВЫБРАТЬ
			|	ДокументыЭСФ.Ссылка
			|ИЗ
			|	Документ.ЭСФ КАК ДокументыЭСФ
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьОтправкиЭСФ
			|		ПО (ОчередьОтправкиЭСФ.ЭСФ = ДокументыЭСФ.Ссылка)
			|ГДЕ
			|	ДокументыЭСФ.Идентификатор = """"
			|	И ДокументыЭСФ.Ссылка В(&МассивЭСФ)
			|	И НЕ ОчередьОтправкиЭСФ.ЭСФ ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
		
		ПакетЗапросов = Запрос.ВыполнитьПакет();
		
		МассивБезОтветаОтСервера = ПакетЗапросов[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если МассивБезОтветаОтСервера.Количество() > 0 Тогда
			
			ОбновитьДокументыЭСФПоНомеруИДате(МассивБезОтветаОтСервера, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
			
		КонецЕсли;
		
		МассивОчередиОтправки = ПакетЗапросов[1].Выгрузить().ВыгрузитьКолонку("Ссылка");

		Для Каждого СтрокаМассиваОчереди Из МассивОчередиОтправки Цикл
			
			ТекстСообщения = НСтр("ru = '%1 находится в очереди отправки, обновление данных возможно после завершения процесса отправки'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаМассиваОчереди);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		//++ НЕ ЭСФ	
		Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
			ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭСФ, ДанныеПрофиляИСЭСФ, ,Ложь );
		КонецЕсли;	
		
		//-- НЕ ЭСФ
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФИзИСЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПоИдентификатору(Знач МассивЭСФ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакетаЭСФ = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЭСФ.Ссылка,
	|	ДокументыЭСФ.Идентификатор,
	|	ДокументыЭСФ.Направление КАК Направление,
	|	ДокументыЭСФ.Вид
	|ИЗ
	|	Документ.ЭСФ КАК ДокументыЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьЭСФ
	|		ПО ОчередьЭСФ.ЭСФ = ДокументыЭСФ.Ссылка
	|ГДЕ
	|	ДокументыЭСФ.Ссылка В(&МассивЭСФ)
	|	И НЕ ДокументыЭСФ.Идентификатор = """"
	|	И ОчередьЭСФ.ЭСФ ЕСТЬ NULL 
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		СписокИдентификаторов = "";
		
		КоличествоЭСФ = Выборка.Количество();
		
		СчетчикЭСФ = 0;
		
		МассивИдентификаторовНайденныхЭСФ = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			// считаем общее количество ЭСФ
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				
				СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в документе не заполнен реквизит ""Идентификатор"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;				
			
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				
				/////////////////////////////////////////////////////////////////////////////
				// Создать и выполнить запрос к API ИС ЭСФ.
				
				ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceById").ПолучитьТекст();
				ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
				ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
				ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService(), , ВерсияИСЭСФ); 
				
				
				
				
				/////////////////////////////////////////////////////////////////////////////
				// Обработать результат запроса к API ИС ЭСФ.
				
				ИнформацияОбОшибке = Неопределено;
				Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
					
					Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
					Иначе
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаInvoiceInfo_Версия2); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
					КонецЕсли;
										
					InvoiceInfoList = ОтветXDTO.Body.queryInvoiceByIdResponse.invoiceInfoList;
					InvoiceInfoList = ЭСФСервер.ПолучитьСвойство(InvoiceInfoList, "invoiceInfo", Неопределено); 
					
					Если InvoiceInfoList <> Неопределено Тогда					
						
						InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
						СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
						                                      				
						
						//////////////////////////////////////////////////////////////////////////
						// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
						
						// Создать и заполнить массив идентификаторов ЭСФ, которые удалось найти в ИС ЭСФ.
						Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
							ИдентификаторЭСФ = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", "");
							Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
								МассивИдентификаторовНайденныхЭСФ.Добавить(ИдентификаторЭСФ);
							КонецЕсли;
						КонецЦикла;
												
					КонецЕсли;
									
				Иначе
					
					ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоИдентификатору'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					
				КонецЕсли;
				
				ВыполнялосьОбращениеКСерверу = Истина;	
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			СписокИдентификаторов = "";
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		Если ВыполнялосьОбращениеКСерверу Тогда
			
			// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
					Если МассивИдентификаторовНайденныхЭСФ.Найти(Выборка.Идентификатор) = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден ЭСФ с идентификатором: ""[Идентификатор]"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Идентификатор]", Выборка.Идентификатор);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			МассивИсправленныхЭСФ = Новый Массив;
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
					МассивИсправленныхЭСФ.Добавить(Выборка.Ссылка);	
				КонецЕсли;
			КонецЦикла;
			
			Если МассивИсправленныхЭСФ.Количество() <> 0 Тогда
				МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
				ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

// Получает номера и даты из МассивЭСФ,
// находит в ИС ЭСФ, ЭСФ с такими номерами и датами,
// обновляет в ИБ ЭСФ, по данным ИС ЭСФ.
//
// Если не удается найти в ИС ЭСФ документы с такими номерами и датами, 
// то показывается сообщение пользователю. 
//
// Параметры:
//  МассивЭСФ - Массив - Может содержать входящие и исходящие ЭСФ,
//   все ЭСФ в МассивЭСФ принадлежат только одной организации.
//
Функция ОбновитьДокументыЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	

	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
	ПредельныйРазмерПакетаЭСФ = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЭСФ.Направление КАК Направление,
	|	ДокументыЭСФ.Ссылка,
	|	ДокументыЭСФ.Номер,
	|	ДокументыЭСФ.Дата,
	|	ДокументыЭСФ.Вид,
	|	ДокументыЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ДокументыЭСФ
	|ГДЕ
	|	ДокументыЭСФ.Ссылка В(&МассивЭСФ)
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл

		МассивИсправленныхЭСФ = Новый Массив;
		
		
		
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить массив ключей ЭСФ.
		
		// Ключ ЭСФ = Номер ЭСФ + Дата ЭСФ.
		МассивКлючейЭСФ = Новый Массив;		
		
		// Создать массив отсутствующих ЭСФ, который в начале содержит все ЭСФ из МассивКлючейЭСФ.
		// При обработке результата из МассивОтсутствующихЭСФ исключаются ЭСФ, которые есть в ИС ЭСФ.
		МассивОтсутствующихЭСФ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаНаправление.Выбрать();
		
		КоличествоЭСФ = ВыборкаДетальныеЗаписи.Количество();
		СчетчикЭСФ 	  = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			КлючЭСФ = Новый Структура;
			КлючЭСФ.Вставить("Номер", ВыборкаДетальныеЗаписи.Номер);
			КлючЭСФ.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
			КлючЭСФ.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			КлючЭСФ.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
						
			МассивКлючейЭСФ.Добавить(КлючЭСФ);
			
			Если ВыборкаДетальныеЗаписи.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
				МассивИсправленныхЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;				
			
			InvoiceKeyList = СтрокаInvoiceKeyList(МассивКлючейЭСФ);
			
			
			
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и выполнить запрос к API ИС ЭСФ.
			
			ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceByKey").ПолучитьТекст();
			ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[invoiceKeyList]", InvoiceKeyList);
			НаправлениеИСЭСФ = ЭСФКлиентСервер.НаправлениеИСЭСФ(ВыборкаНаправление.Направление);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", НаправлениеИСЭСФ);
			
			ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
			
			
			
			
			/////////////////////////////////////////////////////////////////////////////
			// Обработать результат запроса к API ИС ЭСФ.
			
			ИнформацияОбОшибке = Неопределено;
			Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
				
				Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
					СтруктураОтсутствующийЭСФ = Новый Структура;
					СтруктураОтсутствующийЭСФ.Вставить("Номер", КлючЭСФ.Номер);
					СтруктураОтсутствующийЭСФ.Вставить("Дата", КлючЭСФ.Дата);
					СтруктураОтсутствующийЭСФ.Вставить("Ссылка", КлючЭСФ.Ссылка);
					СтруктураОтсутствующийЭСФ.Вставить("Идентификатор", КлючЭСФ.Идентификатор);
					МассивОтсутствующихЭСФ.Добавить(СтруктураОтсутствующийЭСФ);
				КонецЦикла;
				
				Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
				Иначе
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаInvoiceInfo_Версия2); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
				КонецЕсли;
				
				InvoiceInfoList = ОтветXDTO.Body.queryInvoiceByKeyResponse.invoiceInfoList;
				InvoiceInfoList = ЭСФСервер.ПолучитьСвойство(InvoiceInfoList, "invoiceInfo", Неопределено); 
				
				Если InvoiceInfoList <> Неопределено Тогда
					
					InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
					
					// Поиск существующих ЭСФ при создании и обновлении выполняется по идентификатору ЭСФ.
					// При выполнении данной команды документы ЭСФ были найдены в ИС ЭСФ по номеру и дате.
					// Поэтому установим документам ЭСФ идентификаторы.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда 
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							Идентификатор = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", "");
							
							Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
								
								Если КлючЭСФ.Номер = Номер И КлючЭСФ.Дата = Дата Тогда
									
									Если КлючЭСФ.Идентификатор <> Идентификатор Тогда
										
										ОбъектЭСФ = КлючЭСФ.Ссылка.ПолучитьОбъект();
										ОбъектЭСФ.Идентификатор = Идентификатор;
										
										ОбъектЭСФ.Записать();
										
										ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(КлючЭСФ.Ссылка);
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
					
					// Удалить из массива отсутствующих ЭСФ, ЭСФ которые найдены в ИС ЭСФ по номеру и дате.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда 
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							
							Для Индекс = 0 По МассивОтсутствующихЭСФ.ВГраница() Цикл
								
								СтруктураОтсутствующийЭСФ = МассивОтсутствующихЭСФ[Индекс]; 
								
								Если СтруктураОтсутствующийЭСФ.Номер = Номер
									И СтруктураОтсутствующийЭСФ.Дата = Дата Тогда
									
									// ЭСФ найден по номеру и дате в ИС ЭСФ, поэтому удалим этот ЭСФ из МассивОтсутствующихЭСФ.
									МассивОтсутствующихЭСФ.Удалить(Индекс);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
								
						КонецЕсли;
											
					КонецЦикла;
					
				КонецЕсли;
						
			Иначе
				
				ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоНомеруИДате'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
				ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			МассивКлючейЭСФ.Очистить();

		КонецЦикла;
		
		Для Каждого СтрокаОтсутсвующийЭСФ Из МассивОтсутствующихЭСФ Цикл
			
			ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден ЭСФ с номером: ""[Номер]"" и датой ""[Дата]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СтрокаОтсутсвующийЭСФ.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", СтрокаОтсутсвующийЭСФ.Дата);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", СтрокаОтсутсвующийЭСФ.Номер);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
		ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
	//++ НЕ ЭСФ
	Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
		ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭСФ, ПрофильИСЭСФ, , Ложь );
	КонецЕсли;	
	//-- НЕ ЭСФ
	
КонецФункции

Функция СтрокаInvoiceKeyList(Знач МассивКлючейЭСФ)
	
	InvoiceKeyList = "";
	
	Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
		
		InvoiceKey = "<invoiceKey><date>[Дата]</date><num>[Номер]</num></invoiceKey>";
		InvoiceKey = СтрЗаменить(InvoiceKey, "[Дата]", Формат(КлючЭСФ.Дата, "ДФ=dd.MM.yyyy"));
		InvoiceKey = СтрЗаменить(InvoiceKey, "[Номер]", КлючЭСФ.Номер);
		
		InvoiceKeyList = InvoiceKeyList + InvoiceKey;
		
	КонецЦикла;
	
	InvoiceKeyList = "<invoiceKeyList>" + InvoiceKeyList + "</invoiceKeyList>";
	
	Возврат InvoiceKeyList;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДТВЕРЖДЕНИЕ О ПОЛУЧЕНИИ ЭСФ
Процедура СформироватьМассивIDДляПодтвержденияПолучениеВходящихЭСФ(Знач invoiceInfoList, МассивИдентификаторовЭСФ)
	
	Если invoiceInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	invoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(invoiceInfoList);
	
	// Создать и заполнить массив идентификаторов ЭСФ.	
	
	Для Каждого invoiceInfo Из invoiceInfoList Цикл
		
		Если ЭСФСервер.ЕстьСвойство(invoiceInfo, "invoiceId") Тогда
			Идентификатор = Формат(invoiceInfo.invoiceId,"ЧГ=");
			МассивИдентификаторовЭСФ.Добавить(Идентификатор);	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
		
	// Уведомить ИС ЭСФ о том, что отправленные ЭСФ были приняты (доставлены).
	ПредельныйРазмерПакетаИдентификаторов = 250; // ограничение ИС ЭСФ		
	ОбщийРазмерКолекции = МассивИдентификаторовЭСФ.Количество();
	КоличествоПакетов = ОбщийРазмерКолекции/ПредельныйРазмерПакетаИдентификаторов;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	НомерПакета = 1;
	СчетчикПакета = 0;
	ПакетДляОтправки = Новый Массив;	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		СчетчикПакета = СчетчикПакета + 1;
		ПакетДляОтправки.Добавить(Идентификатор);
		
		Если (СчетчикПакета = ПредельныйРазмерПакетаИдентификаторов) ИЛИ (СчетчикПакета = ОбщийРазмерКолекции) Тогда
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Отправляется подтверждение о приеме электронных счетов-фактур: %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(Текст);
			
			ТекстЗапроса = СоздатьЗапросНаПодтверждениеПолученияВходящихЭСФ(ПакетДляОтправки);	
			ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);	
			
			СчетчикПакета = 0;
			ПакетДляОтправки = Новый Массив;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Функция СоздатьЗапросНаПодтверждениеПолученияВходящихЭСФ(Знач МассивИдентификаторовЭСФ)
	
	ТекстЗапроса = ПолучитьМакет("ЗапросConfirmInvoiceById").ПолучитьТекст();	
	
	СтрокаСписокИдентификаторов = "";
	ШаблонИдентификатора = "<id>[Идентификатор]</id>";
	
	Для Каждого Идентификатор Из МассивИдентификаторовЭСФ Цикл
		
		ИдентификаторПоШаблону = ШаблонИдентификатора;
		ИдентификаторПоШаблону = СтрЗаменить(ИдентификаторПоШаблону, "[Идентификатор]", Формат(Идентификатор, "ЧГ="));
		СтрокаСписокИдентификаторов = СтрокаСписокИдентификаторов + ИдентификаторПоШаблону;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[idList]", СтрокаСписокИдентификаторов);	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии)
	
	ЗапросXMLСИдентификаторомСессии = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);

	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXMLСИдентификаторомСессии, ИмяСервисаInvoiceService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		// Результат выполнения метода не обрабатывается.
		
	ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
		
		ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ);
		ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ(ЗапросXML, ПрофильИСЭСФ, ИдентификаторСессии);
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаПодтверждениеПолученияВходящихЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отправке подтверждения о доставке ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИЗМЕНЕНИЕ СТАТУСА ЭСФ (ОТЗЫВ, ОТКЛОНЕНИЕ И Т.Д.)

// См. ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов()          
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	// Сформировать текст запроса.
	ТекстЗапроса = ПолучитьМакет("ЗапросНаИзменениеСтатусовЭСФ").ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);
	
	// Заполнить параметр [Действие].
	Если Действие = ЭСФКлиентСервер.ДействиеОтзыв() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "revoke");
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "unrevoke");
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "decline");
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
	КонецЕсли;
	
	ВсеInvoiceIdWithReason = "";
	ШаблонInvoiceIdWithReason = "<invoiceIdWithReason><id>[id]</id><reason>[reason]</reason></invoiceIdWithReason>";	
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл
		id = ЭлементКоллеции.Ключ;
		reason = ЭлементКоллеции.Значение;
		invoiceIdWithReason = ШаблонInvoiceIdWithReason;
		invoiceIdWithReason = СтрЗаменить(invoiceIdWithReason, "[id]", id);
		invoiceIdWithReason = СтрЗаменить(invoiceIdWithReason, "[reason]", СокрЛП(reason));
		ВсеInvoiceIdWithReason = ВсеInvoiceIdWithReason + invoiceIdWithReason;		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[invoiceIdWithReason]", ВсеInvoiceIdWithReason);
	
	// Сформировать строку для создания ЭЦП.
	ВсеIdsWithReasons = "";
	ШаблонIdsWithReasons = "<idWithReason><id>[id]</id><reason>[reason]</reason></idWithReason>";		
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл	
		id = ЭлементКоллеции.Ключ;
		reason = ЭлементКоллеции.Значение;		
		idsWithReasons = ШаблонIdsWithReasons;
		idsWithReasons = СтрЗаменить(idsWithReasons, "[id]", id);
		idsWithReasons = СтрЗаменить(idsWithReasons, "[reason]", СокрЛП(reason));		
		ВсеIdsWithReasons = ВсеIdsWithReasons + idsWithReasons;
	КонецЦикла;	
	СтрокаДляПодписи = СтрЗаменить("<signedContent><idsWithReasons>[idsWithReasons]</idsWithReasons></signedContent>", "[idsWithReasons]", ВсеIdsWithReasons);
	
	Результат = Новый Структура("ТекстЗапроса, СтрокаДляПодписи", ТекстЗапроса, СтрокаДляПодписи);
	
	Возврат Результат;
	
КонецФункции

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов() 
Функция ВыполнитьЗапросНаИзменениеСтатусов(Знач Действие, Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ИменаЭлементовРезультата = "ТекущийСтатус, СтатусИзменился, Ошибка";
		ИменаЭлементовОшибки = "Есть, Код, Представление, Расшифровка";
		
		// Выполнить начальное заполнение результата по ЗапросXML.
		КоллекцияРезультатов = Новый Соответствие;
		ЗапросXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ЗапросXML, ФабрикаXDTO);
		ИмяУзла = ЗапросXDTO.Body.Свойства()[0].Имя;
		invoiceIdWithReasonList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ЗапросXDTO.Body[ИмяУзла].idWithReasonList.invoiceIdWithReason);
		Для Индекс = 0 По invoiceIdWithReasonList.Количество() - 1 Цикл
			invoiceIdWithReason = invoiceIdWithReasonList.Получить(Индекс);	
			Идентификатор = invoiceIdWithReason.id;
			Результат = Новый Структура(ИменаЭлементовРезультата);
			Результат.СтатусИзменился = Ложь;
			
			Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
			Результат.Ошибка.Есть = Ложь;
			Результат.Ошибка.Код = "";
			Результат.Ошибка.Представление = "";
			Результат.Ошибка.Расшифровка = "";
			
			КоллекцияРезультатов.Вставить(Идентификатор, Результат);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИмяУзла = ОтветXDTO.Body.Свойства()[0].Имя;
		changeStatusResultList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body[ИмяУзла].resultList, "changeStatusResult", Неопределено);
		
		// Заполнить КоллекцияРезультатов, обновить документы ЭСФ.
		Если changeStatusResultList <> Неопределено Тогда
			
			changeStatusResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(changeStatusResultList);
			
			// Заполнить КоллекцияРезультатов.
			Для ИндексChangeStatusResultList = 0 По changeStatusResultList.Количество() - 1 Цикл
				
				Результат = Новый Структура(ИменаЭлементовРезультата);
				Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
				
				changeStatusResult = changeStatusResultList.Получить(ИндексChangeStatusResultList);	
				Результат.ТекущийСтатус = ДанныеСтатусаInvoice(changeStatusResult.invoiceSummary);				
				Результат.СтатусИзменился = ?(ВРег(changeStatusResult.isChanged) = "TRUE", Истина, Ложь);
				
				// Заполнить сведения об ошибке, если она произошла при изменении статуса.
				КодОшибки = ЭСФСервер.ПолучитьСвойство(changeStatusResult, "error", "");				
				Если КодОшибки <> "" Тогда	
					Результат.Ошибка.Есть = Истина;
					Результат.Ошибка.Код = КодОшибки;
					ДанныеОшибки = ДанныеОшибкиИзмененияСтатусаЭСФ(КодОшибки, Действие);
					Результат.Ошибка.Представление = ДанныеОшибки.Представление;
					Результат.Ошибка.Расшифровка = ДанныеОшибки.Расшифровка;
				Иначе
					Результат.Ошибка.Есть = Ложь;
				КонецЕсли;
								
				КоллекцияРезультатов.Вставить(Результат.ТекущийСтатус.Идентификатор, Результат);
				
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			КоллекцияСтатусовЭСФ = Новый Соответствие;
			Для Каждого ЭлементКоллекции ИЗ КоллекцияРезультатов Цикл
				КоллекцияСтатусовЭСФ.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ТекущийСтатус); 
			КонецЦикла;
			ОтразитьИзмененияСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отзыве ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

Функция ДанныеОшибкиИзмененияСтатусаЭСФ(Знач КодОшибки, Знач Действие)
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Код", КодОшибки);
	ДанныеОшибки.Вставить("Представление", "");
	ДанныеОшибки.Вставить("Расшифровка", "");
		
	// Заполнить представление ошибки.
	Если КодОшибки = "WRONG_STATUS" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный статус ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_TYPE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный тип ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_DATE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Истек срок возможности отклонения ЭСФ'");	
		
	Иначе
		
		ДанныеОшибки.Представление = КодОшибки;	
		
	КонецЕсли;
	
	// Заполнить расшифровку ошибки.
	Если КодОшибки = "WRONG_DATE" Тогда
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Истек срок возможности отклонения ЭСФ.'");	
		
	ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтзыв() Тогда
		
		ДанныеОшибки.Расшифровка = НСтр(
			"ru = 'Допускается отзывать только обычные ЭСФ, которые находятся в статусах ""Создан"" или ""Доставлен"".
			|Дополнительные ЭСФ и исправленные ЭСФ отзывать не допускается.'");
		
	 ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного()
		 ИЛИ Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
		
		 ДанныеОшибки.Расшифровка = НСтр(
			 "ru = 'Допускается отклонять отозванные ЭСФ, а также дополнительные и исправленные ЭСФ.
			 |Отклоняемый ЭСФ должен иметь статус ""Доставленный"" или ""Отозванный"".'");
					
	Иначе	
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'ЭСФ имеет статус, который не позволяет выполнить выбранное действие.'");
		
	КонецЕсли;

		
	Возврат ДанныеОшибки;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. ЭСФСервер.ПроверитьДоступИВерсиюНаСервере()
Функция ПроверитьДоступИВерсиюНаСервере() Экспорт
		
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОшибкаСоединения");
	СтруктураПараметров.Вставить("ОшибкаВерсии");
	СтруктураПараметров.Вставить("ВерсияИСЭСФ");
	СтруктураПараметров.Вставить("ВерсияИСЭСФПоддерживается");
	СтруктураПараметров.Вставить("ТекстВерсияОшибка");
	СтруктураПараметров.Вставить("ТекстВерсияПоддерживает");
	СтруктураПараметров.Вставить("СерверИСЭСФДоступен");
		
	ТекстОшибки = "";	
	СтруктураПараметров.ВерсияИСЭСФ = ВерсияИСЭСФ(ТекстОшибки);
	
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда // Не удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверИСЭСФДоступен = Ложь;
		
		СтруктураПараметров.ВерсияИСЭСФПоддерживается = Ложь;
				
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|%ОшибкаИнтернета%
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ТекстОшибки);	 
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы()); 
		Если ИнформационнаяБазаФайловая Тогда
			ОшибкаИнтернета = НСтр("ru = '- На Вашем компьютере, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
		Иначе
			ОшибкаИнтернета = НСтр("ru = '- На сервере %ИмяСервера%, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
			ИмяСервера = СтрЗаменить(СтрокаСоединения, "srvr=""", "");
			ИмяСервера = Лев(ИмяСервера, Найти(ИмяСервера, """") - 1);
			ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ИмяСервера%", ИмяСервера);
		КонецЕсли;
		ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтруктураПараметров.ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ОшибкаИнтернета%", ОшибкаИнтернета);
		
	Иначе // Удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверИСЭСФДоступен = Истина;
		
		// Заполнить номер текущей версии ИС ЭСФ в успешно.
		СтруктураПараметров.ТекстВерсияПоддерживает = НСтр("ru = 'Программа поддерживает текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).'");
		СтруктураПараметров.ТекстВерсияПоддерживает = СтрЗаменить(СтруктураПараметров.ТекстВерсияПоддерживает, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);
				
		// Заполнить номер текущей версии ИС ЭСФ в ошибке.
		СтруктураПараметров.ТекстВерсияОшибка = НСтр("ru = 'Программа не поддерживает текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).'");
		СтруктураПараметров.ТекстВерсияОшибка = СтрЗаменить(СтруктураПараметров.ТекстВерсияОшибка, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);		
			
		Если ПоддерживаемыеВерсииИСЭСФ().Найти(СтруктураПараметров.ВерсияИСЭСФ) = Неопределено Тогда
			
			СтруктураПараметров.ВерсияИСЭСФПоддерживается = Ложь;
			
			// Показать ошибку версии ИС ЭСФ. 
			ОшибкаВерсии = НСтр(
			"ru = 'Текущая версия программы ""%НаименованиеКонфигурации%"" (%ВерсияКонфигурации%) может не поддерживать текущую версию ИС ЭСФ (%ВерсияИСЭСФ%).
			|Пожалуйста, обновите программу ""%НаименованиеКонфигурации%"".'");
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%НаименованиеКонфигурации%", Метаданные.Синоним);
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияКонфигурации%", Метаданные.Версия);
			СтруктураПараметров.ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияИСЭСФ%", СтруктураПараметров.ВерсияИСЭСФ);
			
		Иначе
			
			СтруктураПараметров.ВерсияИСЭСФПоддерживается = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервиса(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ИмяВебСервиса <> "VersionService" И ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	
		
	// используемая версия API - v1, за исключением методов VersionService, которые не версионируются
	ВерсияВебСервиса = "";
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 И ИмяВебСервиса <> "VersionService" Тогда
		ВерсияВебСервиса = "/api1";
		
		ТекстМетода = СтрЗаменить(ТекстМетода, "namespace.esf", "esf");
		ТекстМетода = СтрЗаменить(ТекстМетода, "xmlns:nam=", "xmlns:esf=");
		ТекстМетода = СтрЗаменить(ТекстМетода, "nam:", "esf:");
	КонецЕсли;	
	
	// подключение к серверу
	ПараметрыПодключения = ЭСФСерверПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если ПараметрыПодключения.СерверИСЭСФ_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверИСЭСФ_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаПолучитьВерсию(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ИспользоватьНовыйАдрес = Ложь) Экспорт
	
	ВерсияВебСервиса = "";
	Если ИспользоватьНовыйАдрес Тогда
		ВерсияВебСервиса = "/api1";
	КонецЕсли;	
	
	// подключение к серверу
	ПараметрыПодключения = ЭСФСерверПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если ПараметрыПодключения.СерверИСЭСФ_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверИСЭСФ_Адрес, 
			ПараметрыПодключения.СерверИСЭСФ_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверИСЭСФ_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ИС ЭСФ недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

// Заполняет поля Приемник, которые в начале имени содержат Префикс, значениями из Источник.
//
// Например, если в Приемник есть поле "Наименование", 
// а в Источник есть поля "Получатель_Наименование" и "Поставщик_Наименование", Префикс равен "Получатель_", 
// то в Приемник будет скопировано значение "Получатель_Наименование" из Источник. 
//
// Параметры:
//  Приемник - Любая именованная коллекция - Значение, чьи свойства будут заполнены значениями соответствующих свойств.
//  Источник - ВыборкаИзРезультатаЗапроса - Значения свойств данного объекта будут установлены в соответствующие свойства.
//  Префикс - Строка - Префикс в источнике, по которому будут отобраны значения для заполнения приемника.
//  СписокСвойств - См. метод глобального контекста ЗаполнитьЗначенияСвойств().
//  ИсключаяСвойства - См. метод глобального контекста ЗаполнитьЗначенияСвойств().
//
Процедура ЗаполнитьЗначенияСвойствПоПрефиксу(Приемник, Знач Источник, Знач Префикс, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		РезультатЗапроса = Источник.Владелец();
		
		СтруктураИсточник = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Если Найти(Колонка.Имя, Префикс) = 1 Тогда
				ИмяПоля = СтрЗаменить(Колонка.Имя, Префикс, "");
				СтруктураИсточник.Вставить(ИмяПоля, Источник[Колонка.Имя]);	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Приемник, СтруктураИсточник, СписокСвойств, ИсключаяСвойства); 
	
КонецПроцедуры

// Возвращает данные статуса ЭСФ: Статус, Идентификатор, ДатаВыписки и т.д.
//
// Параметры:
//  InvoiceSummaryXDTO - ОбъектXDTO - Объект, из которого будут извлечены данные статуса.
//
// Возвращаемое значение:
//  Структура - Содержащая данные статуса ЭСФ.
//   |- Идентификатор - Строка - Идентификатор ЭСФ.
//   |- Причина - Строка - Причина по которой ИС ЭСФ отклонила ЭСФ или причина отзыва/аннулирования ЭСФ.
//   |- ДатаВыписки - Дата - Дата выписки ЭСФ.
//   |- РегистрационныйНомер - Строка - Регистрационный номер ЭСФ.
//   |- ДатаПоследнегоОбновления - Дата - Дата последнего обновления ЭСФ.
//   |- Номер - Строка - Номер ЭСФ.
//   |- ПользовательскийСтатус - ПеречислениеСсылка.ПользовательскиеСтатусыЭСФ - Пользовательский статус ЭСФ.
//   |- Статус - ПеречислениеСсылка.СтатусыЭСФ - Статус ЭСФ.
//
// Примечание:
//  Структура всегда содержит все вышеописанные элементы. Некоторые элементы могут быть пустыми.
//  Пустые элементы всегда имеют значение по умолчанию, для того типа, каким они являются, 
//  например, пустой РегистрационныйНомер будет иметь значение "".
//
Функция ДанныеСтатусаInvoice(Знач InvoiceSummaryXDTO)
	                 
	ДанныеСтатуса = Новый Структура;
	
	ДанныеСтатуса.Вставить("Идентификатор", Формат(InvoiceSummaryXDTO.invoiceId, "ЧГ="));
	
	cancelReason = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "cancelReason", "");
	ДанныеСтатуса.Вставить("Причина", cancelReason);
	
	date = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "date", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаВыписки", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомер", registrationNumber);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	num = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "num", "");				
	ДанныеСтатуса.Вставить("Номер", num);
	
	invoiceStatus = ЭСФСервер.ПолучитьСвойство(InvoiceSummaryXDTO, "invoiceStatus", "");
	ДанныеСтатуса.Вставить("Статус", ЭСФКлиентСервер.СтатусИБ(invoiceStatus));
	
	// На данный момент из ИС ЭСФ удален пользовательский статус (state).
	// Пользовательский статус не удален из конфигурации, т.к. есть вероятность, что его вернут в ИС ЭСФ. 
	ДанныеСтатуса.Вставить("ПользовательскийСтатус", Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка());
	
	Возврат ДанныеСтатуса;
	
КонецФункции

// Обновляет документы ЭСФ, на основании новых данных статусов.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струткруа - См. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияСтатусовЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭСФ = НоваяВыборкаДанныеСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовЭСФ.Следующий() Цикл
		
		НовыеДанныеСтатусовЭСФ = КоллекцияСтатусовЭСФ.Получить(СтарыеДанныеСтатусовЭСФ.Идентификатор);  
		
		Если НовыеДанныеСтатусовЭСФ <> Неопределено Тогда
			
			ОбновитьЭСФ = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовЭСФ.Свойство("Ошибки") И НовыеДанныеСтатусовЭСФ.Ошибки.Количество() > 0;
			
			Если ЕстьОшибки Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;

			Если СтарыеДанныеСтатусовЭСФ.РегистрационныйНомер <> НовыеДанныеСтатусовЭСФ.РегистрационныйНомер Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовЭСФ.ПользовательскийСтатус <> НовыеДанныеСтатусовЭСФ.ПользовательскийСтатус Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовЭСФ.Статус <> НовыеДанныеСтатусовЭСФ.Статус Тогда
				ОбновитьЭСФ = Истина;
			КонецЕсли;
			
			Если ОбновитьЭСФ Тогда
				
				ОбъектЭСФ = СтарыеДанныеСтатусовЭСФ.ЭСФ.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовЭСФ.ДатаВыписки <> Дата(1, 1, 1)) И НовыеДанныеСтатусовЭСФ.ДатаВыписки <> НачалоДня(ОбъектЭСФ.Дата) Тогда
					ОбъектЭСФ.Дата = НовыеДанныеСтатусовЭСФ.ДатаВыписки;
					ОбъектЭСФ.УстановитьВремя();
				КонецЕсли;
				
				
				ОбъектЭСФ.Номер	= НовыеДанныеСтатусовЭСФ.Номер; 
				ОбъектЭСФ.РегистрационныйНомер = НовыеДанныеСтатусовЭСФ.РегистрационныйНомер;
				ОбъектЭСФ.ПользовательскийСтатус = НовыеДанныеСтатусовЭСФ.ПользовательскийСтатус;
				ОбъектЭСФ.Статус = НовыеДанныеСтатусовЭСФ.Статус;
				
				// Отразить содержимое узла cancelReason.
				Если ЕстьОшибки Тогда
					ОбъектЭСФ.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовЭСФ.Ошибки Цикл
						ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
					
					// Отразить содержимое узла cancelReason.
				ИначеЕсли НЕ ПустаяСтрока(НовыеДанныеСтатусовЭСФ.Причина) Тогда
					
					Если ПустаяСтрока(НовыеДанныеСтатусовЭСФ.РегистрационныйНомер) Тогда
						
						ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();
						ОшибкиСтрока.Текст = НовыеДанныеСтатусовЭСФ.Причина;
						ОшибкиСтрока.Поле = "";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НовыеДанныеСтатусовЭСФ.Причина) Тогда
					
					Если НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный
						ИЛИ НовыеДанныеСтатусовЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный Тогда
						
						ОбъектЭСФ.Причина = ПричинаИБ(НовыеДанныеСтатусовЭСФ.Причина);
						
					КонецЕсли;

				КонецЕсли;
				
				ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектЭСФ.Записать();
				
				//++ НЕ ЭСФ
				Если ОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный Тогда
					ОбъектЭСФ.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				//-- НЕ ЭСФ
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет документы ЭСФ, на основании полученных ошибок.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струтктура - См. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияОшибокЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭСФ = НоваяВыборкаДанныеСтатусовЭСФ(КоллекцияСтатусовЭСФ, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовЭСФ.Следующий() Цикл
		
		НовыеДанныеОшибокЭСФ = КоллекцияСтатусовЭСФ.Получить(СтарыеДанныеСтатусовЭСФ.Идентификатор);  
		
		Если НовыеДанныеОшибокЭСФ <> Неопределено И НовыеДанныеОшибокЭСФ.Ошибки <> Неопределено Тогда
			
			ОбъектЭСФ = СтарыеДанныеСтатусовЭСФ.ЭСФ.ПолучитьОбъект();
			ОбъектЭСФ.Ошибки.Очистить();
			Ошибки = НовыеДанныеОшибокЭСФ.Ошибки;
			Для Каждого Строка из Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = ОбъектЭСФ.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
				
			КонецЦикла;
			
			
			
			
			ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
			ОбъектЭСФ.Записать();
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Возвращает выборку, содержащую данные статусов существующих ЭСФ.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Статусы, для которых необходимо получить статусы документов ЭСФ. 
//   |- Ключ - Строка - Идентификатор ЭСФ.
//   |- Значение - Струткруа - Данные статуса, см. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов. 
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка, содержащая все идентификаторы  
//   из КоллекцияСтатусовЭСФ и данные статусов существующих ЭСФ.
//
Функция НоваяВыборкаДанныеСтатусовЭСФ(Знач КоллекцияСтатусовЭСФ, Знач СтруктурнаяЕдиница)
		
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.ЭСФ.Реквизиты.Идентификатор.Тип);	
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовЭСФ Цикл
		СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
		СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Идентификатор КАК Идентификатор,
	|	ЭСФ.Ссылка,
	|	ЭСФ.РегистрационныйНомер,
	|	ЭСФ.Статус,
	|	ЭСФ.ПользовательскийСтатус,
	|	ЭСФ.СтруктурноеПодразделение,
	|	ЭСФ.Организация
	|ПОМЕСТИТЬ ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ЭСФ.Статус КАК Статус,
	|	ЭСФ.ПользовательскийСтатус КАК ПользовательскийСтатус,
	|	ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ЭСФ.Организация КАК Организация
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭСФ КАК ЭСФ
	|		ПО Идентификаторы.Идентификатор = ЭСФ.Идентификатор";
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭСФ.СтруктурноеПодразделение = &СтруктурноеПодразделение", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Процедура ОбработатьРезультатыИзмененияСтатусов(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокЭСФ.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'ЭСФ не найден в ИС ЭСФ.'");
				
				ТекстРасшифровки = НСтр("ru = 'Электронный счет-фактура, с идентификатором ""%Идентификатор%"", не найден в ИС ЭСФ.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГосучреждениеБИК() Экспорт
	
	Возврат "KKMFKZ2A";
	
КонецФункции

Функция ЧислоИзСтроки(Знач Строка)
	
	ДопустимаяСтрока = Формат(Строка, "ЧРД=.; ЧГ=");
	ДопустимаяСтрока = СтрЗаменить(ДопустимаяСтрока, " ", "");
	ДопустимаяСтрока = СтрЗаменить(ДопустимаяСтрока, ",", ".");
	
	Число = Число(ДопустимаяСтрока);
	
	Возврат Число;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИМЕНА ВЕБ-СЕРВИСОВ И АДРЕСА ИС ЭСФ

Функция ИмяСервисаInvoiceService() Экспорт
	Возврат "InvoiceService";	
КонецФункции

Функция ИмяСервисаSessionService() Экспорт
	Возврат "SessionService";                                        	
КонецФункции

Функция ИмяСервисаUploadInvoiceService() Экспорт
	Возврат "UploadInvoiceService";	
КонецФункции

Функция ИмяСервисаVersionService() Экспорт
	Возврат "VersionService";	
КонецФункции

Функция АдресВебПриложенияИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/";
КонецФункции

Функция АдресСервераAPIИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/ws/";	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЕРСИИ ИС ЭСФ

// См. ЭСФСервер.ВерсияИСЭСФ()
Функция ВерсияИСЭСФ(ТекстОшибки) Экспорт
	
	Версия = Неопределено;
	
	ТекстЗапроса = ПолучитьМакет("ЗапросGetVersion").ПолучитьТекст();
	
	Попытка
		
		ОтветXML = ВыполнитьМетодВебСервисаПолучитьВерсию(ТекстЗапроса, ИмяСервисаVersionService(),, Истина);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда	
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			Версия = ОтветXDTO.Body.versionResponse.version;
						
		Иначе
			ТекстОшибки = ИнформацияОбОшибке.ПодробноеПредставление;
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Продолжать = Ложь;
		
	КонецПопытки;
	
	ТекстОшибки = СокрЛП(ТекстОшибки);
	
	Возврат Версия;
	
КонецФункции

// См. ЭСФСервер.ПоддерживаемыеВерсииИСЭСФ()
Функция ПоддерживаемыеВерсииИСЭСФ() Экспорт
	
	МассивВерсий = Новый Массив;
	// Прежнее API - не поддерживаем пока
	МассивВерсий.Добавить("4.0.0");
	МассивВерсий.Добавить("4.0.0-TEST");
	// Новое API
	МассивВерсий.Добавить("5.0.0");
	МассивВерсий.Добавить("5.0.0-TEST");
	МассивВерсий.Добавить("5.0.0-PROD");
	
	Возврат МассивВерсий;
	
КонецФункции

Процедура ОбновитьВерсиюИСЭСФ() Экспорт
	
	Попытка
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		
		//заполним актуальный номер версии ИС ЭСФ
		ПараметрыЭСФ.ВерсияИСЭСФ = "5.0.0";
		
		ЗаписьЖурналаРегистрации("Обновлена версия ИС ЭСФ в параметрах подключения к ИС ЭСФ.", УровеньЖурналаРегистрации.Информация);
		ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);		
		
	Исключение
		ЗаписьЖурналаРегистрации("При попытке обновления версии ИС ЭСФ возникла ошибка:", УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
	КонецПопытки;	
	
КонецПроцедуры

Функция АктуальнаяВерсияИСЭСФ() Экспорт
	
	Возврат "5.0.0";
	
КонецФункции	
	
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ОШИБОК ИС ЭСФ

Функция ЭтоМодульнаяОшибка(Знач ОтветXML, ИнформацияОбОшибке = Неопределено) Экспорт
	
	ЭтоОшибка = Ложь;
	
	ИнформацияОбОшибке = Новый Структура(
		"faultcode, faultstring, type, description, ЛокализованноеПредставление, ПодробноеПредставление", 
		"", "", "", "", "", "");
		
	Если ОтветXML = "<html><body>No service was found.</body></html>" Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "<html><body>No service was found.</body></html>";
		ЭтоОшибка = Истина;
		
	// при сбоях сервера ИС ЭСФ ответ может быть пустым, или содержать информацию о недоступности страницы	
	ИначеЕсли ОтветXML = ""
		ИЛИ НЕ Найти(ОтветXML, "An error occurred.") = 0 Тогда
		
		ИнформацияОбОшибке.faultcode = "";	
		ИнформацияОбОшибке.faultstring = "Сервер ИС ЭСФ не отвечает на запрос";
		ЭтоОшибка = Истина;
		
	Иначе		
		
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		Попытка
 			ИнформацияОбОшибке.faultcode = СокрЛП(ОбъектXDTO.Body.Fault.faultcode);
			ИнформацияОбОшибке.faultstring = СокрЛП(ОбъектXDTO.Body.Fault.faultstring);
			ЭтоОшибка = Истина;
		Исключение
			ЭтоОшибка = Ложь;
		КонецПопытки;
		
		Если ЭтоОшибка Тогда
							
				Попытка
					КоллекцияДеталейОшибки = ОбъектXDTO.Body.Fault.detail.Свойства(); 
					ИнформацияОбОшибке.type = СокрЛП(КоллекцияДеталейОшибки[0].Имя);
					ИнформацияОбОшибке.description = СокрЛП(ОбъектXDTO.Body.Fault.detail[ИнформацияОбОшибке.type].description);
				Исключение
					// Ничего не делать.	
				КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОбОшибке.ЛокализованноеПредставление = ЛокализованноеПредставлениеМодульнойОшибки(
		ИнформацияОбОшибке.faultcode, 
		ИнформацияОбОшибке.faultstring, 
		ИнформацияОбОшибке.type, 
		ИнформацияОбОшибке.description);                                       
		
	ПодробноеПредставление = "";
		
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.ЛокализованноеПредставление) Тогда	
		ПодробноеПредставление = ПодробноеПредставление + ИнформацияОбОшибке.ЛокализованноеПредставление + Символы.ПС;                                       
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) 
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring)
		ИЛИ	ЗначениеЗаполнено(ИнформацияОбОшибке.type)
		ИЛИ ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + Символы.ПС + "Техническая информация: " + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultcode) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultcode: " + ИнформацияОбОшибке.faultcode + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.faultstring) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "faultstring: " + ИнформацияОбОшибке.faultstring + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.type) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "type: " + ИнформацияОбОшибке.type + Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОбОшибке.description) Тогда
		ПодробноеПредставление = ПодробноеПредставление + "description: " + ИнформацияОбОшибке.description + Символы.ПС;	
	КонецЕсли;
	
	ПодробноеПредставление = ?(ПустаяСтрока(ИнформацияОбОшибке.ЛокализованноеПредставление), Символы.ПС, "") + СокрЛП(ПодробноеПредставление);
	
	ИнформацияОбОшибке.ПодробноеПредставление = ПодробноеПредставление;
	
	Возврат ЭтоОшибка;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаСессияЗакрыта(Знач ОтветXML) Экспорт
	
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветXML);	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Попытка
		SessionClosedException = ОбъектXDTO.Body.Fault.detail.SessionClosedException;
		ЭтоОшибкаСессияЗакрыта = Истина;
	Исключение
		ЭтоОшибкаСессияЗакрыта = Ложь;
	КонецПопытки; 
	
	Возврат ЭтоОшибкаСессияЗакрыта;
	
КонецФункции

Функция ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(Знач ОтветXML) Экспорт
	// в случае сборя сервера ОтветXML = "" передаем управление дальше, чтобы обработать ошибку в процедуре ЭтоМодульнаяОшибка 
	Если НЕ ЗначениеЗаполнено(ОтветXML) Тогда
		Возврат Ложь;	
	КонецЕсли;
	ЭтоОшибкаЕстьАктивнаяСессиия = Ложь;
	Если Найти(ОтветXML, "User already has opened session")>0 Тогда
		ЭтоОшибкаЕстьАктивнаяСессиия = Истина;
	КонецЕсли;	
		
	Возврат ЭтоОшибкаЕстьАктивнаяСессиия;
КонецФункции	

Функция ЛокализованноеПредставлениеМодульнойОшибки(faultcode, faultstring, type, detail)
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", faultstring);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда		
		ЛокализованноеПредставление = МассивНайденныхСтрок[0].ТекстИБ;		
	Иначе
		ЛокализованноеПредставление = "";	
	КонецЕсли;
	
	Возврат ЛокализованноеПредставление;
	
КонецФункции

Функция ПричинаИБ(Знач ПричинаИСЭСФ)
	
	ПричинаИБ = ПричинаИСЭСФ;
	
	ТабЗначОшибки = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", ПричинаИСЭСФ);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда		
		ПричинаИБ = МассивНайденныхСтрок[0].ТекстИБ;		
	КонецЕсли;
	
	Возврат ПричинаИБ;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПОИСК ЭСФ

// См. ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам()
Функция НайтиАктуальныеЭСФПоСчетамФактурам(Знач МассивСчетовФактур, Знач ИменаРеквизитов = Неопределено) Экспорт
	
	// Создать массив имен реквизитов ЭСФ.
	Если ИменаРеквизитов <> Неопределено Тогда
		МассивИменРеквизитов = ЭСФКлиентСервер.МассивИмен(ИменаРеквизитов);
	Иначе
		МассивИменРеквизитов = Новый Массив;	
	КонецЕсли;
	
	// Сформировать строку запроса для получения реквизитов ЭСФ.
	РеквизитыЭСФ = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Если ИмяРеквизита = "Состояние" Тогда
			РеквизитыЭСФ = РеквизитыЭСФ + "АктуальныеЭСФ." + ИмяРеквизита + ", ";
		Иначе
			РеквизитыЭСФ = РеквизитыЭСФ + "АктуальныеЭСФ.ЭСФ." + ИмяРеквизита + ", ";
		КонецЕсли;
	КонецЦикла;
	
	// Найти актуальные ЭСФ для счетов-фактур.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.СчетФактура,
	|   %РеквизитыЭСФ%
	|	АктуальныеЭСФ.ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура В(&МассивСчетовФактур)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РеквизитыЭСФ%", РеквизитыЭСФ);
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);
	Результат = Запрос.Выполнить();
	
	// Создать пустое соответствие актуальных ЭСФ.
	АктуальныеЭСФ = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками на ЭСФ.
	Для Каждого СчетФактура Из МассивСчетовФактур Цикл
		АктуальныеЭСФ.Вставить(СчетФактура, Неопределено);
	КонецЦикла;
	
	// Заполнить данные актуальных ЭСФ.	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеЭСФ = Новый Структура;
			Для Каждого Колонка Из Результат.Колонки Цикл
				Если Колонка.Имя <> "СчетФактура" Тогда
					ДанныеЭСФ.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			АктуальныеЭСФ.Вставить(Выборка.СчетФактура, ДанныеЭСФ); 	
		КонецЦикла;
	КонецЕсли;
	
	Возврат АктуальныеЭСФ;
	
КонецФункции

// См. ЭСФСервер.НайтиСуществующиеЭСФПоИдентификаторам()
Функция НайтиСуществующиеЭСФПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
		
	// Создать пустую таблицу параметров поиска ЭСФ.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
		ОписаниеЭСФ.Идентификатор = Идентификатор;
		ОписаниеЭСФ.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);
	
	СуществующиеЭСФ = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.ЭСФ.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеЭСФ.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы ЭСФ, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыЭСФ Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеЭСФ.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеЭСФ.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеЭСФ;
	
КонецФункции

// Находит ссылки на документы, справочники и т.д. по переданным значениям реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - ТаблицаЗначений - Параметры поиска ссылок.
//   Колонки - Имена реквизитов. 
//   Строки - Значения реквизитов.    
//   Для формирования параметра можно использовать: ЭСФСервер.НовыеПараметрыПоискаСсылок().
//  ОбъектМетаданных - ОбъектМетаданных - Объект, ссылки на элементы которого необходимо найти. 
//   Например, Метаданные.Документы.ЭСФ, если необходимо найти ссылки на документы ЭСФ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные ссылки.
//   Содержит все колонки и строки из таблицы ЗначенияРеквизитов,
//    а также колонку "НайденнаяСсылка", в которой находятся найденные ссылки.
//   Если объекта, удовлетворяющих условиям поиска не найдено, 
//    то в колонке ""НайденнаяСсылка"" содержится пустая ссылка на ОбъектМетаданных.
//   Если найдено несколько объектов, удовлетворяющих условиям поиска,
//    то в таблице будет несколько строк, с одинаковыми значениями реквизитов, но разными ссылками.
//
// Пример:
//  // Найти документы ЭСФ, которые имеют комбинацю номера и даты: 
//  // ("0001" и '2014-01-01') или ("0002" и '2014-02-02').
//  ПараметрыПоиска = ЭСФСервер.НовыеПараметрыПоискаСсылок("Номер, Дата", Метаданные.Документы.ЭСФ);
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0001";
//  СтрокаПараметровПоиска.Дата = '2014-01-01';
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0002";
//  СтрокаПараметровПоиска.Дата = '2014-02-02';
//  НайденныеСсылки = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоиска, Метаданные.Документы.ЭСФ);
//
Функция НайтиСсылкиПоЗначениямРеквизитов(Знач ЗначенияРеквизитов, Знач ОбъектМетаданных, Знач ИдентификационныйНомер = Неопределено) Экспорт
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	ИмяВидаОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1); // "Документ", "Справочник" и т.д.
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	// Сформировать массив имен реквизитов.
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Колонка Из ЗначенияРеквизитов.Колонки Цикл
		МассивИменРеквизитов.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	// Подготовить строку запроса %ИменаРеквизитов%.
	ИменаРеквизитов = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		ИменаРеквизитов = ИменаРеквизитов + "ЗначенияРеквизитов." + ИмяРеквизита + ", ";	
	КонецЦикла;
	Если Прав(ИменаРеквизитов, 2) = ", " Тогда
		ИменаРеквизитов = Сред(ИменаРеквизитов, 1, СтрДлина(ИменаРеквизитов) - 2);	
	КонецЕсли;
	
	// Подготовить строку запроса %УсловияСоединения%.
	УсловияСоединения = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		
		Если ИмяРеквизита = "Дата" Тогда
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = НАЧАЛОПЕРИОДА(%ИмяОбъекта%.%ИмяРеквизита%, День))";
		Иначе
			Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		КонецЕсли;	
		
		Условие = СтрЗаменить(Условие, "%ИмяОбъекта%", ИмяОбъекта);
		Условие = СтрЗаменить(Условие, "%ИмяРеквизита%", ИмяРеквизита);
		УсловияСоединения = УсловияСоединения + Условие + " И ";	
	КонецЦикла;	
	Если Прав(УсловияСоединения, 3) = " И " Тогда
		УсловияСоединения = Сред(УсловияСоединения, 1, СтрДлина(УсловияСоединения) - 3);	
	КонецЕсли;
	
	// Сформировать текст запроса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%
	|ПОМЕСТИТЬ ЗначенияРеквизитов
	|ИЗ
	|	&ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%,
	|	ЕСТЬNULL(%ИмяОбъекта%.Ссылка, ЗНАЧЕНИЕ(%ИмяВидаОбъекта%.%ИмяОбъекта%.ПустаяСсылка)) КАК НайденнаяСсылка
	|ИЗ
	|	ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВидаОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|		ПО (%УсловияСоединения%)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИменаРеквизитов%",   ИменаРеквизитов);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияСоединения%", УсловияСоединения);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%",        ИмяОбъекта);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВидаОбъекта%",    ИмяВидаОбъекта);	
	Запрос.УстановитьПараметр("ЗначенияРеквизитов", ЗначенияРеквизитов);
	
	РезультатПоиска = Запрос.Выполнить().Выгрузить();
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.
	// Работает только для документов ЭСФ, для остальных объектов переменная ОтборПоСтруктурнойЕдинице должна быть Неопределено.
	
	Если ИдентификационныйНомер <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭСФ.Поставщики КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭСФ.Ссылка
		|			ИЗ
		|				Документ.ЭСФ КАК ЭСФ
		|			ГДЕ
		|				ЭСФ.Ссылка В (&МассивЭСФ)
		|				И ЭСФ.Направление = &Исходящий)
		|	И (ТабличнаяЧасть.ПоставщикИдентификатор = &ИдентификационныйНомер
		|	ИЛИ ТабличнаяЧасть.БИНФилиала = &ИдентификационныйНомер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Ссылка
		|ИЗ
		|	Документ.ЭСФ.Получатели КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭСФ.Ссылка
		|			ИЗ
		|				Документ.ЭСФ КАК ЭСФ
		|			ГДЕ
		|				ЭСФ.Ссылка В (&МассивЭСФ)
		|				И ЭСФ.Направление = &Входящий)
		|	И (ТабличнаяЧасть.ПолучательИдентификатор = &ИдентификационныйНомер
		|	ИЛИ ТабличнаяЧасть.БИНФилиала = &ИдентификационныйНомер)";
		
		Запрос.УстановитьПараметр("МассивЭСФ", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		Запрос.УстановитьПараметр("Исходящий", Перечисления.НаправленияЭСФ.Исходящий);
		Запрос.УстановитьПараметр("Входящий", Перечисления.НаправленияЭСФ.Входящий);
		Запрос.УстановитьПараметр("ИдентификационныйНомер", ИдентификационныйНомер);
		
		ТаблицаЭСФПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
		МассивЭСФПринадлежащихСтруктурнойЕдинице = ТаблицаЭСФПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
		
		// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.			
		Для Каждого СтрокаРезультата Из РезультатПоиска Цикл				
			Если МассивЭСФПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда						
				
				// Если Истина, значит ЭСФ не принадлежит указанной структурной единице,
				// поэтому ссылку на данный ЭСФ нужно очистить.
				СтрокаРезультата.НайденнаяСсылка = Документы.ЭСФ.ПустаяСсылка();
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат РезультатПоиска;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ССЫЛОЧНЫХ РЕКВИЗИТОВ ЭСФ

// Заполняет ссылочные реквизиты объектов ЭСФ по их текстовым или числовым представлениям.
// Например, заполняет ссылку на товар, ссылку на ставку НДС, ссылку на поставщика и т.д.
//
// Параметры:
//  СоответствиеВалюты - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеВалюты().
//  СоответствиеАкцизы - Соответствие - См. ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы().
//  ТаблицаНДС - ТаблицаЗначений - См. ЭСФСерверПовтИсп.НоваяТаблицаНДС(). 
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, у которых необходимо заполнить ссылочные реквизиты.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(
	Знач СоответствиеВалюты = Неопределено, 
	Знач СоответствиеАкцизы = Неопределено, 
	Знач ТаблицаНДС = Неопределено, 
	Знач НаправлениеЭСФ, 
	МассивЭСФ) Экспорт
	
	СоответствиеВалюты = ?(СоответствиеВалюты = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеВалюты(), СоответствиеВалюты);
	СоответствиеАкцизы = ?(СоответствиеАкцизы = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы(), СоответствиеАкцизы);
	ТаблицаНДС = ?(ТаблицаНДС = Неопределено, ЭСФСерверПовтИсп.НоваяТаблицаНДС(), ТаблицаНДС);
	
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(НаправлениеЭСФ, МассивЭСФ);
	ЗаполнитьСсылкиНаВалюты(СоответствиеВалюты, МассивЭСФ);
	ЗаполнитьСсылкиНаАкцизы(СоответствиеАкцизы, МассивЭСФ);
	ЗаполнитьСсылкиНаНДС(ТаблицаНДС, МассивЭСФ);
	//ЗаполнитьСсылкиНаТовары(НаправлениеЭСФ, МассивЭСФ);	
	//ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ);
	//++ НЕ ЭСФ	
	ЗаполнитьСсылкиНаЕдиницыИзмеренияИТовары(НаправлениеЭСФ, МассивЭСФ);		
	ЭСФСерверПереопределяемый.ЗаполнитьЕдиницыИзмеренияХраненияОстатков(МассивЭСФ);
	//-- НЕ ЭСФ	
	ЗаполнитьСсылкиНаСвязанныеЭСФ(МассивЭСФ);
	ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ);
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументовЭСФ(МассивСтарыхЭСФ)
	
	Для Каждого Структура Из МассивСтарыхЭСФ Цикл
		ВосстановитьСсылочныеРеквизитыОдногоЭСФ(Структура.ИсходныйОбъектЭСФ, Структура.ОбновленныйОбъектЭСФ);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоЭСФ(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ)
	
	Если ОбновленныйОбъектЭСФ.Статус = Перечисления.СтатусыЭСФ.Ошибочный И ИсходныйОбъектЭСФ.Статус = ОбновленныйОбъектЭСФ.Статус Тогда
		Для Каждого Ошибка Из ИсходныйОбъектЭСФ.Ошибки Цикл
			СтрокаОбновленныйОбъектЭСФ = ОбновленныйОбъектЭСФ.Ошибки.Добавить();
			СтрокаОбновленныйОбъектЭСФ.Поле = Ошибка.Поле;
			СтрокаОбновленныйОбъектЭСФ.Текст = Ошибка.Текст;
		КонецЦикла;
	КонецЕсли;
	
	ОбновленныйОбъектЭСФ.СвязанныйЭСФ 	 = ИсходныйОбъектЭСФ.СвязанныйЭСФ;	
	ОбновленныйОбъектЭСФ.ДоговорПоставки = ИсходныйОбъектЭСФ.ДоговорПоставки;
	ОбновленныйОбъектЭСФ.Валюта 		 = ИсходныйОбъектЭСФ.Валюта;
	
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Поставщики", "Поставщик", "ПоставщикИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Получатели", "Получатель", "ПолучательИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "Товар", "ТоварНаименование");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ЕдиницаИзмерения", "ЕдиницаИзмеренияКод");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ЕдиницаИзмерения", "ЕдиницаИзмеренияНаименование");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "СтавкаАкциза", "СуммаАкциза");
	//++ НЕ ЭСФ
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "КоэффициентПересчета", "НомерСтроки");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ЕдиницаИзмеренияХраненияОстатков", "НомерСтроки");
	//-- НЕ ЭСФ
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "СтавкаНДС", "СтавкаНДСЧисло");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "НомерГТД", "НомерСтроки"); //Восстановливать ИсточникПроисхождения по ключевым полям не получиться, т.к. многие ключевые поля не обязательно будут заполнены в ЭСФ 
	                                                                                                                          // + Признак происхождения может быть переопределен в ЭСФ. Поэтому восстанавливаем просто по номеру позиции, т.е. "как бы" всегда и безусловно
																															  
	//++ НЕ ЭСФ																														  
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ИсточникПроисхождения", "НомерСтроки");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ПризнакУчетаНаВиртуальномСкладе", "НомерСтроки");
	ВосстановитьСсылкиВРеквизитеТабличнойЧасти(ИсходныйОбъектЭСФ, ОбновленныйОбъектЭСФ, "Товары", "ДополнительныйИдентификатор", "НомерСтроки");
	//-- НЕ ЭСФ
																															  
КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧасти(
	ИсходныйОбъектЭСФ,
	ОбновленныйОбъектЭСФ,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки)
	
	Если ОбновленныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъектЭСФ[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектЭСФ[ИмяТабличнойЧасти][Индекс];
			
			//Эксклюзив для единиц измерений
			Если ИмяРеквизитаДляВосстановления = "ЕдиницаИзмерения" Тогда
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИмяРеквизитаДляПроверки]) Тогда
					ИмяРеквизитаДляПроверки = "ЕдиницаИзмеренияНаименование";
				КонецЕсли;
			КонецЕсли;
			
			Если ОбновленнаяСтрока[ИмяРеквизитаДляПроверки] = ИсходнаяСтрока[ИмяРеквизитаДляПроверки] Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				
				//Эксклюзив для единиц измерений. Наим. ЕИ на основании ЭСФ из ИС ЭСФ заполняетя только в тех документах, в которых ранее на сервер было отправлено наим.ЕИ
				//С момента реализации отправки кодов ЕИ, наим.ЕИ нужно заполнять "искусственно". 
				Если ИмяРеквизитаДляВосстановления = "ЕдиницаИзмерения" И Не ЗначениеЗаполнено(ОбновленнаяСтрока["ЕдиницаИзмеренияНаименование"]) Тогда
					ОбновленнаяСтрока["ЕдиницаИзмеренияНаименование"] = ИсходнаяСтрока["ЕдиницаИзмеренияНаименование"];
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном ЭСФ.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭСФ.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(ОбновленныйОбъектЭСФ.Ссылка);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном ЭСФ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭСФ.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъектЭСФ.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, в которых необходимо заполнить ссылки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницы(Знач НаправлениеЭСФ, МассивЭСФ)
	
	// Очистить ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого Получатель Из ЭСФ.Получатели Цикл
			Получатель.Получатель = Неопределено;
		КонецЦикла;
		
		Для Каждого Поставщик Из ЭСФ.Поставщики Цикл
			Поставщик.Поставщик = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	ИмяТаблицыСтруктурныхЕдиниц = ЭСФВызовСервераПовтИсп.ИмяТаблицыСтруктурныхЕдиниц(НаправлениеЭСФ);
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяРеквизитаСтруктурнойЕдиницы = ЭСФВызовСервераПовтИсп.ИмяРеквизитаСтруктурнойЕдиницы(НаправлениеЭСФ);
	
	// Заполнить массивы идентификациооных номеров контрагентов и организаций для поиска ссылок.
	ИдентификационныеНомераКонтрагентов = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		// Добавить в массивы идентификаторы (БИН, ИИН) грузоотправителей и грузополучателей.
		Если НЕ ПустаяСтрока(ЭСФ.ГрузоотправительИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(ЭСФ.ГрузоотправительИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭСФ.ГрузоотправительИдентификатор);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЭСФ.ГрузополучательИдентификатор) Тогда 
			ИдентификационныеНомераКонтрагентов.Добавить(ЭСФ.ГрузополучательИдентификатор);
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭСФ.ГрузополучательИдентификатор);
		КонецЕсли;
		
		// Добавить в массивы идентификаторы (БИН, ИИН) поставщиков и получателей.	
		Для Каждого СтрокаТаблицы Из ЭСФ[ИмяТаблицыКонтрагентов] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]) Тогда
				ИдентификационныеНомераКонтрагентов.Добавить(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ЭСФ[ИмяТаблицыСтруктурныхЕдиниц] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]) Тогда
				ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Найти ссылки на контрагентов и структурные единицы по идентификаторам (БИН, ИИН).
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
		ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			// Заполнить ссылки на контрагентов в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаКонтрагента + "Идентификатор", Идентификатор);
			МассивНайденныхСтрок = ЭСФ[ИмяТаблицыКонтрагентов].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаКонтрагента] = Контрагент;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			СтруктурнаяЕдиница = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			// Заполнить ссылки на организации в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор", Идентификатор);
			МассивНайденныхСтрок = ЭСФ[ИмяТаблицыСтруктурныхЕдиниц].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаСтруктурнойЕдиницы] = СтруктурнаяЕдиница;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаВалюты(Знач СоответствиеВалюты, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		ЭСФ.Валюта = СоответствиеВалюты[ЭСФ.ВалютаКод];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаАкцизы(Знач СоответствиеАкцизы, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
			СтрокаТовары.СтавкаАкциза = СоответствиеАкцизы[СтрокаТовары.СтавкаАкцизаЧисло];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаНДС(Знач ТаблицаНДС, МассивЭСФ)
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Для Каждого СтрокаТовары Из ЭСФ.Товары Цикл
			ПараметрыОтбора = Новый Структура("СтавкаНДСЧисло, БезНДС", СтрокаТовары.СтавкаНДСЧисло, СтрокаТовары.БезНДС);
			МассивНайденныхСтрок = ТаблицаНДС.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() <> 0 Тогда
				СтрокаТовары.СтавкаНДС = МассивНайденныхСтрок[0].СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ссылки на связанные ЭСФ по номеру и дате связанного ЭСФ,
// а также по организации и подразделению, т.к. у связанных ЭСФ
// должны быть одинаковые организация и подразделение.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ в которых необходимо заполнить ссылку на связанный ЭСФ.
//   Каждый элемент массива должен иметь тип "ДокументОбъект.ЭСФ".
//
Процедура ЗаполнитьСсылкиНаСвязанныеЭСФ(МассивЭСФ)
		
	// Создать пустую таблицу параметров поиска ЭСФ.
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Номер, Дата, Направление, ПометкаУдаления, Организация, СтруктурноеПодразделение";
	Иначе
		ИменаРеквизитов = "Номер, Дата, Направление, ПометкаУдаления, Организация";
	КонецЕсли;
	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер) И ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) Тогда
			ОписаниеЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
			ОписаниеЭСФ.Номер = ЭСФ.СвязанныйЭСФНомер;
			ОписаниеЭСФ.Дата = НачалоДня(ЭСФ.СвязанныйЭСФДата);
			ОписаниеЭСФ.Направление = ЭСФ.Направление;

			ОписаниеЭСФ.ПометкаУдаления = Ложь;
			
			ОписаниеЭСФ.Организация = ЭСФ.Организация;
			Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
				ОписаниеЭСФ.СтруктурноеПодразделение = ЭСФ.СтруктурноеПодразделение;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ПараметрыПоискаДокументовЭСФ.Количество() <> 0 Тогда
		
		// Параметр ИдентификационныйНомер не заполняется, т.к. поиск выполняется 
		// по совпадению значений реквизитов Организация и СтруктурноеПодразделение.		
		НайденныеДокументыЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ);
		
		// Заполнить ссылки на связанные ЭСФ.
		Для Каждого ЭСФ Из МассивЭСФ Цикл
			
			Если ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФНомер) И ЗначениеЗаполнено(ЭСФ.СвязанныйЭСФДата) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номер", ЭСФ.СвязанныйЭСФНомер);
				ПараметрыОтбора.Вставить("Дата", НачалоДня(ЭСФ.СвязанныйЭСФДата));
				ПараметрыОтбора.Вставить("Направление", ЭСФ.Направление);				

				ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
				
				МассивНайденныхСтрок = НайденныеДокументыЭСФ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
						Если ЗначениеЗаполнено(НайденнаяСтрока.НайденнаяСсылка) Тогда
							ЭСФ.СвязанныйЭСФ = НайденнаяСтрока.НайденнаяСсылка;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Комментарий = НСтр(
						"ru = 'Номер ЭСФ: %Номер%
               			|Дата ЭСФ: %Дата%'");
					Комментарий = СтрЗаменить(Комментарий, "%Номер%", ЭСФ.СвязанныйЭСФНомер);
					Комментарий = СтрЗаменить(Комментарий, "%Дата%", ЭСФ.СвязанныйЭСФДата);
					ЗаписьЖурналаРегистрации("ЭСФ. Не найден ЭСФ", УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
				КонецЕсли;
				
			КонецЕсли;	

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылки на контрагентов и организации для указанных идентификационных номеров.
//
// Параметры:
//  ИдентификационныеНомераКонтрагентов - Массив - Идентификационные номера (БИН, ИИН) контрагентов, 
//   по которым необходимо найти ссылки на контрагентов.
//  ИдентификационныеНомераСтруктурныхЕдиниц - Массив - Идентификационные номера (БИН, ИИН) организаций, 
//   по которым необходимо найти ссылки на организации.
//
// Возвращаемое значение:
//  Структура - Найденные соответствия идентификационных номеров и ссылок.
//   |- СоответствияКонтрагентов - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//   |- СоответствияСтруктурныхЕдиниц - Соответствие - Соответствие идентификаторов и ссылок контрагентов.
//
Функция НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
	Знач ИдентификационныеНомераКонтрагентов, Знач ИдентификационныеНомераСтруктурныхЕдиниц) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.%КонтрагентИНН КАК Идентификатор,
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.%КонтрагентИНН В(&ИдентификационныеНомераКонтрагентов)
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.%ОрганизацияИНН КАК Идентификатор,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.%ОрганизацияИНН В(&ИдентификационныеНомераСтруктурныхЕдиниц)
	|	И НЕ Организации.ПометкаУдаления";
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер,
		|	ПодразделенияОрганизаций.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ИдентификационныйНомер В(&ИдентификационныеНомераСтруктурныхЕдиниц)
		|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением
		|	И НЕ ПодразделенияОрганизаций.УказыватьРеквизитыГоловнойОрганизации";
		
	КонецЕсли;
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	СоответсвиеИменРеквизитов.Вставить("%ОрганизацияИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ИдентификационныеНомераКонтрагентов", ИдентификационныеНомераКонтрагентов);	
	Запрос.УстановитьПараметр("ИдентификационныеНомераСтруктурныхЕдиниц", ИдентификационныеНомераСтруктурныхЕдиниц);	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	Результат = Новый Структура;
	Результат.Вставить("СоответствияКонтрагентов", Новый Соответствие);
	Результат.Вставить("СоответствияСтруктурныхЕдиниц", Новый Соответствие);
	
	ВыборкаКонтрагенты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаКонтрагенты.Следующий() Цикл
		Результат.СоответствияКонтрагентов.Вставить(ВыборкаКонтрагенты.Идентификатор, ВыборкаКонтрагенты.Ссылка);
	КонецЦикла;
	
	ВыборкаОрганизации = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Результат.СоответствияСтруктурныхЕдиниц.Вставить(ВыборкаОрганизации.Идентификатор, ВыборкаОрганизации.Ссылка);	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиБанкПоБИК(БИК)
	
	СсылкаБанк = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.БИК = &БИК
	|	И Банки.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаБанк = Выборка.Ссылка;	
	Иначе
		СсылкаБанк = Неопределено;	
	КонецЕсли;
	
	Возврат СсылкаБанк;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С XML И XDTO

Функция НоваяФабрикаXDTOИзXSD(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	НоваяФабрикаXDTO = СоздатьФабрикуXDTO(ИмяВременногоФайла);
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция НоваяФабрикаXDTOИзWSDL(Знач ИмяМакета) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("wsdl");
	ЭтотОбъект.ПолучитьМакет(ИмяМакета).Записать(ИмяВременногоФайла, "UTF-8");
	WSОпределения = Новый WSОпределения(ИмяВременногоФайла);
	НоваяФабрикаXDTO = WSОпределения.ФабрикаXDTO;
	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	
	Возврат НоваяФабрикаXDTO;
	
КонецФункции

Функция ФабрикаЭСФ_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаЭСФ_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия1;
	
КонецФункции

Функция ФабрикаЭСФ_XML_API_ЭЦП_Версия2()
	
	Если КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаЭСФ_XML_API_ЭЦП_Версия2");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаЭСФ_XML_API_ЭЦП_Версия2;
	
КонецФункции


Функция ФабрикаInvoiceInfo_Версия2()
	
	Если КэшированнаяФабрикаInvoiceInfo_Версия2 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаInvoiceInfo_Версия2");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryInvoiceXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаInvoiceInfo_Версия2 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаInvoiceInfo_Версия2;
	
КонецФункции

Функция ФабрикаXDTOИзСпискаXSD(СписокXSD)
	
	МассивИменXSDФайлов = Новый Массив;
	
	Для Каждого ТекстXSD Из СписокXSD Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
		МассивИменXSDФайлов.Добавить(ИмяВременногоФайла);
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
		ЗаписьТекста.Записать(ТекстXSD);
		ЗаписьТекста.Закрыть();
		
	КонецЦикла;
	
	Фабрика = СоздатьФабрикуXDTO(МассивИменXSDФайлов); 		
	
	Для Каждого ИмяВременногоФайла Из МассивИменXSDФайлов Цикл
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
	КонецЦикла;
	
	Возврат Фабрика;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРИСОЕДИНЕННЫМИ ФАЙЛАМИ

Процедура СоздатьОбновитьПрисоединенныеXMLФайлыЭСФ(Знач МассивЭСФ, Знач InvoiceInfoList)
	
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		InvoiceInfoXDTO = НайтиInvoiceInfoПоId(InvoiceInfoList, ОбъектЭСФ.Идентификатор);
		
		ДвоичныеДанныеФайлаInvoiceXML = НовыеДвоичныеДанныеФайлаInvoiceInfoXML(InvoiceInfoXDTO);
		АдресФайлаInvoiceXML = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаInvoiceXML);
		
		Если ОбъектЭСФ.ФайлЭСФ.Пустая() Тогда
			
			// Создать новый присоединенный XML файл ЭСФ.
			НаименованиеДокумента = НСтр("ru = 'Электронный счет-фактура №%Номер% от %Дата%'");
			НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, "%Номер%", ОбъектЭСФ.Номер);
			НаименованиеДокумента = СтрЗаменить(НаименованиеДокумента, "%Дата%", Формат(ОбъектЭСФ.Дата, "ДФ=dd.MM.yyyy; ДП="));
			ИмяБезРасширения = НаименованиеДокумента;
			
			ОбъектЭСФ.ФайлЭСФ = ЭСФСерверПереопределяемый.ДобавитьФайл(
				ОбъектЭСФ.Ссылка, ИмяБезРасширения, "xml", , , АдресФайлаInvoiceXML);
				
		Иначе
			
			// Обновить существующий присоединенный XML файл ЭСФ.
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаInvoiceXML);
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			ЭСФСерверПереопределяемый.ОбновитьПрисоединенныйФайл(ОбъектЭСФ.ФайлЭСФ, ИнформацияОФайле);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеДвоичныеДанныеФайлаInvoiceInfoXML(InvoiceInfoXDTO)
	
	InvoiceInfoXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(InvoiceInfoXDTO, "invoiceInfo", ФабрикаXDTO);
	
	// Доработать InvoiceInfoXML, чтобы он соответствовал <invoiceInfo> из ответа API ИС ЭСФ.
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", ">");
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns="""" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">", ">");
	InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, " xmlns="""">", ">");
	
	Если Найти(InvoiceInfoXML, "<invoice xmlns=""namespace.v1"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">") <> 0 Тогда
		InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, "<invoice xmlns=""namespace.v1"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">", "<v1:invoice>");
		InvoiceInfoXML = СтрЗаменить(InvoiceInfoXML, "</invoice>", "</v1:invoice>");
	КонецЕсли;
	
	// Сформировать двоичные данные для доработанного InvoiceInfoXML.
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "UTF-8");
	ЗаписьТекста.Записать(InvoiceInfoXML); 
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанныеФайлаInvoiceInfoXML = Новый ДвоичныеДанные(ИмяФайла);	
	ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайлаInvoiceInfoXML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМЫ ИМПРОТ ЭСФ

// Добавляет в таблицу ЗагружаемыеЭСФ новые строки, содержащие данные загружаемых ЭСФ.
//
// Параметры:
//  МассивАдресовЗагружаемыхФайлов - Массив - Входящий параметр -
//   Массив XML файлов ЭСФ, на основе которых необходимо заполнить ЗагружаемыеЭСФ.
//  СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций -
//   Входящий параметр - Структурная единица, для которой необхоимо заполнить ЗагружаемыеЭСФ.
//  ЗагружаемыеЭСФ - ТаблицаЗначений - Изменяемый параметр -
//   Таблица загружаемых ЭСФ, в которую будут добавлены новые строки, содержащие данные загружаемых ЭСФ.
//
// Возвращаемое значение:
//  См. входящий параметр ЗагружаемыеЭСФ.
//
Процедура ЗаполнитьТаблицуЗагружаемыеЭСФ(Знач МассивАдресовЗагружаемыхФайлов, Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ) Экспорт
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить XDTO из каждого файла.
	// Если для какого-нибудь файла не удалось получить XDTO, то сообщить об этом.	
	
	ТабЗначXDTO = Новый ТаблицаЗначений;
	ТабЗначXDTO.Колонки.Добавить("ИмяФайла");
	ТабЗначXDTO.Колонки.Добавить("ОбъектXDTO");
	
	Для Каждого Файл Из МассивАдресовЗагружаемыхФайлов Цикл
		
		// Создать временный файл.
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Файл.Адрес);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("tmp");
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		// Прочитать текст из временного файла.
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть(ИмяВременногоФайла, "UTF-8");
		СтрокаXML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// Удалить временный файл.
		ЭСФКлиентСервер.УдалитьВременныеФайлы(ИмяВременногоФайла);
		
		Попытка
			
			// Возникнет ошибка, если СтрокаXML содержит не валидный XML.
			ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СтрокаXML, ФабрикаXDTO);
			
			СтрокаТабЗначXDTO = ТабЗначXDTO.Добавить();
			СтрокаТабЗначXDTO.ИмяФайла = Файл.Имя;
			СтрокаТабЗначXDTO.ОбъектXDTO = ОбъектXDTO;
			
		Исключение
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронные счета-фактуры из файла:
				|%1
				|так как данный файл не является валидным XML-файлом.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Файл.Имя); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////		
	// Получить коллекции строк InvoiceInfo из каждого XML.
	// Если из какого-нибудь XML не удалось получить InvoiceInfo, то сообщить об этом.
	
	ТабЗначInvoiceInfo = Новый ТаблицаЗначений;
	ТабЗначInvoiceInfo.Колонки.Добавить("ИмяФайла");
	ТабЗначInvoiceInfo.Колонки.Добавить("InvoiceInfo");
	
	Для Каждого СтрокаТабЗначXDTO Из ТабЗначXDTO Цикл
		
		ОбъектXDTO = СтрокаТабЗначXDTO.ОбъектXDTO;
		
		Попытка
			
			// Возникнет ошибка, если ОбъектXDTO не содержит узла invoiceInfo.
			InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.invoiceSet.invoiceInfo);
			
		Исключение
			
			InvoiceInfoList = Неопределено;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронные счета-фактуры из файла:
				|%1
				|так как данный XML-файл имеет некорректную структуру.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаТабЗначXDTO.ИмяФайла); 
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецПопытки;
		
		Если InvoiceInfoList <> Неопределено Тогда 
			
			Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
				
				СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Добавить();
				СтрокаТабЗначInvoiceInfo.ИмяФайла = СтрокаТабЗначXDTO.ИмяФайла;
				СтрокаТабЗначInvoiceInfo.InvoiceInfo = InvoiceInfo;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать InvoiceInfo, если у InvoiceInfo нет поля invoiceId,
	// или оно пустое, то удалить этот InvoiceInfo и сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, у которых нет поля invoiceId, или оно пустое.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("ИдентификаторЗаполнен", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		InvoiceId = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", Неопределено);
		
		Если ТипЗнч(InvoiceId) = Тип("Строка") И (НЕ ПустаяСтрока(InvoiceId)) Тогда
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЗаполнен = Истина;
			
		Иначе
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЗаполнен = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как у данного документа не заполнено служебное поле <invoiceId>.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
					
	КонецЦикла;
	
	// Удалить InvoiceInfo, у которых нет поля invoiceId, или оно пустое.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Ложь, "ИдентификаторЗаполнен");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "ИдентификаторЗаполнен" больше не нужна, т.к. у всех оставшихся InvoiceInfo заполнено поле invoiceId.
	ТабЗначInvoiceInfo.Колонки.Удалить("ИдентификаторЗаполнен");
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Создать ЭСФ для каждого InvoiceInfo, но не записывать созданные ЭСФ.	
	// Если для какого-нибудь InvoiceInfo не удалось создать ЭСФ, то сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, для которых не удалось создать ЭСФ.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("УдалосьСоздатьЭСФ", ОписаниеТипаБулево);
		
	// Создать ЭСФ для каждого InvoiceInfo, но не записывать созданные ЭСФ.
	// Если удалось создать ЭСФ, то записать в колонку УдалосьСоздатьЭСФ значение Истина,
	// в противном случае записать в колонку Ложь и сообщить пользователю.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		Направление = Перечисления.НаправленияЭСФ.Входящий; // Для данной проверки направление не имеет значения.
		ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
		
		Попытка
			
			ЗаполнитьЭСФ(InvoiceInfo, СтруктурнаяЕдиница, Направление, ОбъектЭСФ);
			
			СтрокаТабЗначInvoiceInfo.УдалосьСоздатьЭСФ = Истина;
			
		Исключение
			
			СтрокаТабЗначInvoiceInfo.УдалосьСоздатьЭСФ = Ложь;
			
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как при загрузке возникла ошибка:
				|[ТекстОшибки]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ТекстОшибки]", ТекстОшибки);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
						
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалить InvoiceInfo, для которых не удалось создать ЭСФ.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Ложь, "УдалосьСоздатьЭСФ");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьЭСФ" больше не нужна, т.к. для всех оставшихся InvoiceInfo удалось создать ЭСФ.
	ТабЗначInvoiceInfo.Колонки.Удалить("УдалосьСоздатьЭСФ");
	
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если в таблице ЗагружаемыеЭСФ
	// уже есть ЭСФ с таким идентификатором, то сообщить об этом.
	
	// Создать временную колонку для удаления InvoiceInfo, 
	// идентификатор которых уже есть в таблице ЗагружаемыеЭСФ.
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ТабЗначInvoiceInfo.Колонки.Добавить("ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ", ОписаниеТипаБулево);
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		Идентификатор = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoiceId;	
		
		Если ЗагружаемыеЭСФ.Найти(Идентификатор, "Идентификатор") = Неопределено Тогда
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ = Ложь;	
			
		Иначе
			
			СтрокаТабЗначInvoiceInfo.ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ = Истина;
						
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как в таблице загружаемых документов уже есть такой электронный счет-фактура.'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалить InvoiceInfo, идентификатор которых уже есть в таблице ЗагружаемыеЭСФ.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Истина, "ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Колонка "УдалосьСоздатьЭСФ" больше не нужна, т.к. для всех оставшихся InvoiceInfo удалось создать ЭСФ.
	ТабЗначInvoiceInfo.Колонки.Удалить("ИдентификаторЕстьВТаблицеЗагружаемыеЭСФ");
	
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если ИИН структурной единицы нет
	// в реквизитах получателя или отправителя, то сообщить об этом.
	ТабЗначInvoiceInfo.Колонки.Добавить("Направление");
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		
		Направление = Неопределено;
		
		//+
		Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначInvoiceInfo.InvoiceInfo, "invoice", "");
		Если ПустаяСтрока(Invoice) Тогда
			ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначInvoiceInfo.InvoiceInfo, "invoiceBody", "");
			Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
		КонецЕсли;
		//-
		
		// Поиск направления по идентификаторам покупателей.
		//customerList = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoice.customers.customer;
		customerList = invoice.customers.customer;
		customerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(customerList);
		Для Каждого customer Из customerList Цикл
			
			Если ЗначениеЗаполнено(Направление) Тогда
				Прервать;
			КонецЕсли;
			
			tin = ЭСФСервер.ПолучитьСвойство(customer, "tin", Неопределено);
			
			Если ТипЗнч(tin) = Тип("Строка") И (НЕ ПустаяСтрока(tin)) Тогда
				
				Если tin = ИдентификационныйНомер Тогда
					Направление = Перечисления.НаправленияЭСФ.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Поиск направления по идентификаторам продавцов.
		//sellerList = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoice.sellers.seller;
		sellerList = invoice.sellers.seller;
		sellerList = ЭСФСервер.СписокXDTOИзОбъектXDTO(sellerList);
		Для Каждого seller Из sellerList Цикл
			
			Если ЗначениеЗаполнено(Направление) Тогда
				Прервать;
			КонецЕсли;
			
			tin = ЭСФСервер.ПолучитьСвойство(seller, "tin", Неопределено);
			
			Если ТипЗнч(tin) = Тип("Строка") И (НЕ ПустаяСтрока(tin)) Тогда
				
				Если tin = ИдентификационныйНомер Тогда
					Направление = Перечисления.НаправленияЭСФ.Исходящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТабЗначInvoiceInfo.Направление = Направление;
		
		Если Направление = Неопределено Тогда
							
			ТекстСообщения = НСтр(
				"ru = 'Не удалось загрузить электронный счет-фактуру: 
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]
				|так как документ не принадлежит структурной единице ""[СтруктурнаяЕдиница]"".'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СтруктурнаяЕдиница]", СтруктурнаяЕдиница);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			
		КонецЕсли;
				
	КонецЦикла;
		
	// Удалить InvoiceInfo, которые не принадлежат текущей структурной единице.
	Пока Истина Цикл
		
		СтрокаТабЗначInvoiceInfo = ТабЗначInvoiceInfo.Найти(Неопределено, "Направление");
		
		Если СтрокаТабЗначInvoiceInfo <> Неопределено Тогда
			ТабЗначInvoiceInfo.Удалить(СтрокаТабЗначInvoiceInfo);
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Перебрать оставшиеся InvoiceInfo, если есть несколько InvoiceInfo с одинаковым id, 
	// то оставить один и сообщить об этом.
	
	// Добавить в ТабЗначInvoiceInfo колонку Идентификатор.
	КвалификаторСтроки100 = Новый КвалификаторыСтроки(100);
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", КвалификаторСтроки100);
	ТабЗначInvoiceInfo.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить колонку Идентификатор в ТабЗначInvoiceInfo.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		СтрокаТабЗначInvoiceInfo.Идентификатор = СтрокаТабЗначInvoiceInfo.InvoiceInfo.invoiceId;
	КонецЦикла;
	
	// Создать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначУникальныеИдентификаторы.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	
	// Заполнить таблицу уникальных идентификаторов.
	Для Каждого СтрокаТабЗначInvoiceInfo Из ТабЗначInvoiceInfo Цикл
		СтрокаТабЗначУникальныеИдентификаторы = ТабЗначУникальныеИдентификаторы.Добавить();
		СтрокаТабЗначУникальныеИдентификаторы.Идентификатор = СтрокаТабЗначInvoiceInfo.Идентификатор;
	КонецЦикла;
	
	// Сгруппировать таблицу уникальных идентификаторов.
	ТабЗначУникальныеИдентификаторы.Свернуть("Идентификатор");
	
	// Создать таблицу значений, все строки из которой добавятся в таблицу ЗагружаемыеЭСФ.
	ТабЗначДляЗаполнения = Новый ТаблицаЗначений;
	ТабЗначДляЗаполнения.Колонки.Добавить("ИмяФайла");
	ТабЗначДляЗаполнения.Колонки.Добавить("InvoiceInfo");
	ТабЗначДляЗаполнения.Колонки.Добавить("Направление");
	ТабЗначДляЗаполнения.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока100);
	ОписаниеТиповСсылкаЭСФ = Новый ОписаниеТипов("ДокументСсылка.ЭСФ");
	ТабЗначДляЗаполнения.Колонки.Добавить("ЭСФ", ОписаниеТиповСсылкаЭСФ);
	                                                                  
	// Заполнить таблицу для заполнения на основе ТабЗначInvoiceInfo,
	// если будут находится InvoiceInfo с одинаковыми идентификаторами,
	// то будет браться первый и пользователю будет показываться сообщение.
	Для Каждого СтрокаТабЗначУникальныеИдентификаторы Из ТабЗначУникальныеИдентификаторы Цикл
		
		Идентификатор = СтрокаТабЗначУникальныеИдентификаторы.Идентификатор;	
		ПараметрыОтбора = Новый Структура("Идентификатор", Идентификатор);
		МассивНайденныхСтрок = ТабЗначInvoiceInfo.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Не удалось найти строки по идентификатору.'");
			
		ИначеЕсли МассивНайденныхСтрок.Количество() = 1 Тогда
			
			СтрокаТабЗначInvoiceInfo = МассивНайденныхСтрок[0];
			
		Иначе // МассивНайденныхСтрок.Количество() > 1 Тогда
			
			СтрокаТабЗначInvoiceInfo = МассивНайденныхСтрок[0];
			
			ТекстСообщения = НСтр(
				"ru = 'В загружаемых файлах обнаружено несколько электронных счетов-фактур с одинаковым значением служебного поля <invoiceId>.
				|Из обнаруженных электронных счетов-фактур будет загружен только один:
				|[НомерДатаРегНомер],
				|Из файла: [ИмяФайла]'");
				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерДатаРегНомер]", ПредставлениеInvoiceInfo(InvoiceInfo));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяФайла]", СтрокаТабЗначInvoiceInfo.ИмяФайла);
			
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);			
			
		КонецЕсли;
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Добавить();
		СтрокаТабЗначДляЗаполнения.ИмяФайла = СтрокаТабЗначInvoiceInfo.ИмяФайла;
		СтрокаТабЗначДляЗаполнения.InvoiceInfo = СтрокаТабЗначInvoiceInfo.InvoiceInfo;
		СтрокаТабЗначДляЗаполнения.Направление = СтрокаТабЗначInvoiceInfo.Направление;
		СтрокаТабЗначДляЗаполнения.Идентификатор = СтрокаТабЗначInvoiceInfo.Идентификатор;
		
	КонецЦикла;
	
	
	
		
	//////////////////////////////////////////////////////////////////////////////
	// Найти существующие ЭСФ по идентификаторам.	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		МассивИдентификаторов.Добавить(СтрокаТабЗначДляЗаполнения.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихЭСФ Из КоллекцияСуществующихЭСФ Цикл
		
		СтрокаТабЗначДляЗаполнения = ТабЗначДляЗаполнения.Найти(ЭлементКоллекцииСуществующихЭСФ.Ключ, "Идентификатор");
		СтрокаТабЗначДляЗаполнения.ЭСФ = ЭлементКоллекцииСуществующихЭСФ.Значение;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Для ЭСФ, которые не удалось найти по идентификатору, найти по номеру и дате.
		
	// Создать пустую таблицу параметров поиска.
	ИменаРеквизитов = "ПометкаУдаления, Направление, Номер, Дата";



	ПараметрыПоискаДокументовЭСФ = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭСФ);
	
	// Заполнить таблицу параметров поиска.
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.ЭСФ) Тогда
			
			ПараметрыПоискаОдногоЭСФ = ПараметрыПоискаДокументовЭСФ.Добавить();
			
			ПараметрыПоискаОдногоЭСФ.ПометкаУдаления = Ложь;
			ПараметрыПоискаОдногоЭСФ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
			
			Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
			Если ПустаяСтрока(Invoice) Тогда
				ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
				Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
			КонецЕсли;
			
			//ПараметрыПоискаОдногоЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice, "num", "");
			ПараметрыПоискаОдногоЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", "");
			//ПараметрыПоискаОдногоЭСФ.Дата = ЭСФСервер.ДатаИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.date);
			ПараметрыПоискаОдногоЭСФ.Дата = ЭСФСервер.ДатаИБ(invoice.date);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если есть загружаемые ЭСФ, для которых не удалось найти существующие по идентификатору.
	Если ПараметрыПоискаДокументовЭСФ.Количество() > 0 Тогда
		
		// Найти ЭСФ по номера и датам.
		ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
		ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
		ТаблицаНайденныхЭСФ = НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДокументовЭСФ, Метаданные.Документы.ЭСФ, ИдентификационныйНомер);
		
		// Заполнить ссылки на ЭСФ, найденные по номерам и датам.
		Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабЗначДляЗаполнения.ЭСФ) Тогда
				
				ПараметрыОтбора = Новый Структура;
				
				Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
				Если ПустаяСтрока(Invoice) Тогда
					ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
					Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
				КонецЕсли;

				ПараметрыОтбора.Вставить("Направление", СтрокаТабЗначДляЗаполнения.Направление);
				ПараметрыОтбора.Вставить("Номер", ЭСФСервер.ПолучитьСвойство(invoice, "num", ""));
				ПараметрыОтбора.Вставить("Дата", ЭСФСервер.ДатаИБ(invoice.date));
				
				МассивНайденныхСтрокТаблицаНайденныхЭСФ = ТаблицаНайденныхЭСФ.НайтиСтроки(ПараметрыОтбора);
				
				Если МассивНайденныхСтрокТаблицаНайденныхЭСФ.Количество() = 1 Тогда
					
					НайденнаяСтрока = МассивНайденныхСтрокТаблицаНайденныхЭСФ[0];
					СтрокаТабЗначДляЗаполнения.ЭСФ = НайденнаяСтрока.НайденнаяСсылка;
					
				ИначеЕсли МассивНайденныхСтрокТаблицаНайденныхЭСФ.Количество() > 1 Тогда
					
					ТекстСообщения = НСтр(
					"ru = 'Для загружаемого ЭСФ №[Номер] от [Дата] в информационной базе найдено несколько ЭСФ:
					|[СписокЭСФ]'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", ПараметрыОтбора.Номер);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", Формат(ПараметрыОтбора.Дата, "ДФ=dd.MM.yyyy"));
					
					СписокЭСФ = "";
					Для Каждого НайденнаяСтрока Из МассивНайденныхСтрокТаблицаНайденныхЭСФ Цикл
						СписокЭСФ = СписокЭСФ + НайденнаяСтрока.НайденнаяСсылка + Символы.ПС;	
					КонецЦикла;
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СписокЭСФ]", СокрЛП(СписокЭСФ));
					
					Сообщить(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Добавить строки из ТабЗначДляЗаполнения в таблицу ЗагружаемыеЭСФ.
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);
	
	Для Каждого СтрокаТабЗначДляЗаполнения Из ТабЗначДляЗаполнения Цикл
		
		СтрокаЗагружаемыеЭСФ = ЗагружаемыеЭСФ.Добавить();
		
		// Создать ЭСФ для вычисления поля Состояние.
		ОбъектЭСФ = Документы.ЭСФ.СоздатьДокумент();
		ЗаполнитьЭСФ(СтрокаТабЗначДляЗаполнения.InvoiceInfo, СтруктурнаяЕдиница, Направление, ОбъектЭСФ);
		
		//+
		Invoice = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoice", "");
		Если ПустаяСтрока(Invoice) Тогда
			ТекстСчетаФактуры = ЭСФСервер.ПолучитьСвойство(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceBody", "");
			Invoice = ?(ПустаяСтрока(ТекстСчетаФактуры), "", ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстСчетаФактуры, ФабрикаXDTO));
		КонецЕсли;
		//-

		СтрокаЗагружаемыеЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ);
		СтрокаЗагружаемыеЭСФ.XML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(СтрокаТабЗначДляЗаполнения.InvoiceInfo, "invoiceInfo", ФабрикаXDTO);
		//СтрокаЗагружаемыеЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.invoiceType);
		//СтрокаЗагружаемыеЭСФ.Дата = ЭСФСервер.ДатаИБ(СтрокаТабЗначДляЗаполнения.InvoiceInfo.invoice.date);
		СтрокаЗагружаемыеЭСФ.Вид = ЭСФКлиентСервер.ВидИБ(invoice.invoiceType);
		СтрокаЗагружаемыеЭСФ.Дата = ЭСФСервер.ДатаИБ(invoice.date);
		СтрокаЗагружаемыеЭСФ.Идентификатор = СтрокаТабЗначДляЗаполнения.Идентификатор;
		СтрокаЗагружаемыеЭСФ.Направление = СтрокаТабЗначДляЗаполнения.Направление;
		СтрокаЗагружаемыеЭСФ.Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", "");
		СтрокаЗагружаемыеЭСФ.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
		СтрокаЗагружаемыеЭСФ.Пометка = Ложь;
		СтрокаЗагружаемыеЭСФ.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
		СтрокаЗагружаемыеЭСФ.ЭСФ = СтрокаТабЗначДляЗаполнения.ЭСФ;
		
	КонецЦикла;
	
	
	
	
	//////////////////////////////////////////////////////////////////////////////	
	// Сообщить, сколько всего ЭСФ загружено.
	ТекстСообщения = НСтр("ru = 'Загружено электронных счетов-фактур: [Количество].'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Количество]", ТабЗначДляЗаполнения.Количество());
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

Функция ПредставлениеInvoiceInfo(InvoiceInfo)
	
	СтроковоеПредставление = НСтр("ru = 'Номер: [Номер], Дата: [Дата], Рег. номер: [РегНомер]'");
	
	invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
	
	ТекстНеУдалосьПолучить = НСтр("ru = '<Не удалось получить>'");
	
	Если invoice <> Неопределено Тогда
		
		Номер = ЭСФСервер.ПолучитьСвойство(invoice, "num", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", Номер); 
		
		Дата = ЭСФСервер.ПолучитьСвойство(invoice, "date", ТекстНеУдалосьПолучить);
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", Дата);
		
	Иначе
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Номер]", ТекстНеУдалосьПолучить); 
		СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[Дата]", ТекстНеУдалосьПолучить);
		
	КонецЕсли;
	
	РегНомер = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "registrationNumber", ТекстНеУдалосьПолучить);
	СтроковоеПредставление = СтрЗаменить(СтроковоеПредставление, "[РегНомер]", РегНомер);
	
	Возврат СтроковоеПредставление;
	
КонецФункции

Процедура СоздатьОбновитьЗагружаемыеЭСФ(Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		// Если пользователь выгрузит ЭСФ и отправит ЭСФ через веб-приложение ИС ЭСФ,
		// а затем выгрузит этот ЭСФ из веб-приложения ИС ЭСФ, чтобы обновить ЭСФ в 1С,
		// то при загрузке этот ЭСФ найдется по номеру и дате, 
		// но при создании появится дублирующийся ЭСФ,
		// т.к. поиск существующих ЭСФ при создании выполняется по идентификатору.
		//
		// Чтобы устранить данную проблему, документу ЭСФ, найденному по номеру и дате,
		// присваивается идентификатор документа загружаемого ЭСФ.
		Для Каждого СтрокаЗагружаемыеЭСФ Из ЗагружаемыеЭСФ Цикл
			Если ЗначениеЗаполнено(СтрокаЗагружаемыеЭСФ.ЭСФ) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаЗагружаемыеЭСФ.ЭСФ.Идентификатор) Тогда
					ОбъектЭСФ = СтрокаЗагружаемыеЭСФ.ЭСФ.ПолучитьОбъект();
					ОбъектЭСФ.Идентификатор = СтрокаЗагружаемыеЭСФ.Идентификатор;
					ОбъектЭСФ.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияЭСФ.Входящий, ЗагружаемыеЭСФ);
		СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(СтруктурнаяЕдиница, Перечисления.НаправленияЭСФ.Исходящий, ЗагружаемыеЭСФ);
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьЗагружаемыеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
	ЗагружаемыеЭСФ_ОбновитьКолонкуЭСФ(СтруктурнаяЕдиница, ЗагружаемыеЭСФ);
	
КонецПроцедуры

Процедура СоздатьОбновитьЗагружаемыеЭСФПоНаправлению(Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЗагружаемыеЭСФ)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Направление", НаправлениеЭСФ);
	ПараметрыОтбора.Вставить("Пометка", Истина);
	
	МассивНайденныхСтрокЗагружаемыеЭСФ = ЗагружаемыеЭСФ.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивНайденныхСтрокЗагружаемыеЭСФ.Количество() <> 0 Тогда
		
		InvoiceInfoList = ЭСФСервер.ПустойСписокXDTO();	
		Для Каждого СтрокаЗагружаемыеЭСФ Из МассивНайденныхСтрокЗагружаемыеЭСФ Цикл
			InvoiceInfoXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СтрокаЗагружаемыеЭСФ.XML, ФабрикаXDTO);
			ЭСФСервер.НовыйЭлементСпискаXDTO(InvoiceInfoList, ФабрикаXDTO, InvoiceInfoXDTO);
		КонецЦикла;
		
		СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, НаправлениеЭСФ, СтруктурнаяЕдиница, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагружаемыеЭСФ_ОбновитьКолонкуЭСФ(Знач СтруктурнаяЕдиница, ЗагружаемыеЭСФ)
	
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого СтрокаЗагружаемыеЭСФ Из ЗагружаемыеЭСФ Цикл
		МассивИдентификаторов.Добавить(СтрокаЗагружаемыеЭСФ.Идентификатор);
	КонецЦикла;
	
	КоллекцияСуществующихЭСФ = НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	Для Каждого ЭлементКоллекцииСуществующихЭСФ Из КоллекцияСуществующихЭСФ Цикл
		СтрокаЗагружаемыеЭСФ = ЗагружаемыеЭСФ.Найти(ЭлементКоллекцииСуществующихЭСФ.Ключ, "Идентификатор");
		СтрокаЗагружаемыеЭСФ.ЭСФ = ЭлементКоллекцииСуществующихЭСФ.Значение;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕОПРЕДЕЛЯЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьЭСФПоСтруктурнымЕдиницам(Знач МассивЭСФ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Направление КАК Направление,
	|	ЭСФПоставщики.Поставщик КАК Поставщик,
	|	ЭСФПолучатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|			И (ЭСФПолучатели.НомерСтроки = 1)
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивЭСФ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭСФ.ЭСФ,
	|	ВЫБОР
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_ЭСФ.Получатель
	|		КОГДА ВТ_ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_ЭСФ.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_ЭСФ КАК ВТ_ЭСФ
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхЭСФ = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивЭСФ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивЭСФ.Добавить(ВыборкаДетальныеЗаписи.ЭСФ);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхЭСФ.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивЭСФ);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указан поставщик или получатель в разделе ""B. Поставщики"" или ""C. Получатели"":
			|%1'");
			
			СтрокаСписокЭСФ = "";
			Для Каждого СсылкаЭСФ Из СгруппированныйМассивЭСФ Цикл
				СтрокаСписокЭСФ = СтрокаСписокЭСФ + "- " + СсылкаЭСФ + Символы.ПС;
			КонецЦикла;
			СтрокаСписокЭСФ = СокрЛП(СтрокаСписокЭСФ);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокЭСФ);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхЭСФ;
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуЭСФ() Экспорт
	
	// в зависимости от возможностей конфигурациии переопределяем значение
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание документов "ЭСФ" на основе документов "СчетФактураВыданный"

// См. ЭСФСервер.ЗаполнитьИсходящийЭСФ()
Процедура ЗаполнитьИсходящийЭСФ(Знач СсылкаСчетФактура, ОбъектЭСФ) Экспорт
	
	ЭСФСерверПереопределяемый.ЗаполнитьИсходящийЭСФ(СсылкаСчетФактура, ОбъектЭСФ);
			
КонецПроцедуры

//Процедура корректировки ошибок округления при возврате товаров
Процедура СкорректироватьСуммыТоваровПриВозврате(ОбъектЭСФ)
	
	Если ОбъектЭСФ.СвязанныйЭСФ.Пустая() Тогда
		Возврат;
	КонецЕсли;

	
	ЭтоВозврат = Ложь;
	//Проверка на тип документа (так как явного признака нет, проверяем по отрицательному количеству)
	Для каждого Строка из ОбъектЭСФ.Товары цикл
		Если Строка.Количество < 0 Тогда
			ЭтоВозврат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоВозврат Тогда	
		
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		ПорогОкругленияСумм = ПараметрыЭСФ.ПорогОкругленияСумм;
		
		Если ПорогОкругленияСумм = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		//Заполним список товаров, по которым будем получать данные
		МассивТоваров = Новый СписокЗначений;
		Для каждого Строка из ОбъектЭСФ.Товары цикл
			Если НЕ ЭСФСерверПереопределяемый.ЭтоУслуга(Строка.Товар) И МассивТоваров.НайтиПоЗначению(Строка.Товар) = Неопределено Тогда
				МассивТоваров.Добавить(Строка.Товар);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации КАК БалансОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество КАК БалансКоличество,
		               |	ЭСФТовары.СуммаБезНалогов КАК БалансСуммаБезНалогов,
		               |	ЭСФТовары.Сумма КАК БалансСуммаСНалогами,
		               |	ЭСФТовары.СуммаАкциза КАК БалансСуммаАкциза
		               |ПОМЕСТИТЬ ВТ_ОсновнойИДополнительные
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |			И (ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ПринятСервером)
		               |				ИЛИ ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ДоставленПолучателю))
		               |ГДЕ
		               |	ЭСФТовары.Ссылка = &Ссылка
		               |	И ЭСФ.Ссылка = &Ссылка
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               |	И ЭСФТовары.Товар В(&МассивТоваров)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС,
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество,
		               |	ЭСФТовары.СуммаБезНалогов,
		               |	ЭСФТовары.Сумма,
		               |	ЭСФТовары.СуммаАкциза
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |ГДЕ
		               |	ЭСФТовары.Товар В(&МассивТоваров)
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               |	И ЭСФ.СвязанныйЭСФ = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СУММА(ЭСФТовары.БалансОборотПоРеализации) КАК БалансОборотПоРеализации,
		               |	СУММА(ЭСФТовары.БалансСуммаНДС) КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	СУММА(ЭСФТовары.БалансКоличество) КАК БалансКоличество,
		               |	СУММА(ЭСФТовары.БалансСуммаБезНалогов) КАК БалансСуммаБезНалогов,
		               |	СУММА(ЭСФТовары.БалансСуммаСНалогами) КАК БалансСуммаСНалогами,
		               |	СУММА(ЭСФТовары.БалансСуммаАкциза) КАК БалансСуммаАкциза
		               |ИЗ
		               |	ВТ_ОсновнойИДополнительные КАК ЭСФТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки";
					   
					   
		Запрос.УстановитьПараметр("Ссылка",	ОбъектЭСФ.СвязанныйЭСФ);	 //Электронный счет-фактура
		Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
		Запрос.УстановитьПараметр("СсылкаТекущегоЭСФ", ОбъектЭСФ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() цикл
			//Возьмем из текущего ЭСФ строку с товаром. Так как порядок должен быть таким же - просто берем по индексу.
			Если РезультатЗапроса.НомерСтроки <= ОбъектЭСФ.Товары.Количество() Тогда
				СтрокаТовара = ОбъектЭСФ.Товары[РезультатЗапроса.НомерСтроки-1];
			Иначе
				СтрокаТовара = Неопределено;
			КонецЕсли;
			Если СтрокаТовара <> Неопределено Тогда
				
				Если НЕ СтрокаТовара.Количество = 0 И ((РезультатЗапроса.БалансКоличество + СтрокаТовара.Количество) = 0) Тогда
					
					//Сумма НДС
					
					БалансСуммыНДС = РезультатЗапроса.БалансСуммаНДС + СтрокаТовара.СуммаНДС;
					
					Если НЕ БалансСуммыНДС = 0 И БалансСуммыНДС <= ПорогОкругленияСумм И БалансСуммыНДС >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаНДС = СтрокаТовара.СуммаНДС - БалансСуммыНДС;
					КонецЕсли;	
					
					//Сумма оборота
					
					БалансСуммыОборота = РезультатЗапроса.БалансОборотПоРеализации + СтрокаТовара.ОборотПоРеализации;
					Если НЕ БалансСуммыОборота = 0 И БалансСуммыОборота <= ПорогОкругленияСумм И БалансСуммыОборота >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.ОборотПоРеализации = СтрокаТовара.ОборотПоРеализации - БалансСуммыОборота;
					КонецЕсли;	
					
					//Сумма без налогов
					
					БалансСуммыБезНалогов = РезультатЗапроса.БалансСуммаБезНалогов + СтрокаТовара.СуммаБезНалогов;
					Если НЕ БалансСуммыБезНалогов = 0 И БалансСуммыБезНалогов <= ПорогОкругленияСумм И БалансСуммыБезНалогов >= -ПорогОкругленияСумм  Тогда 
						СтрокаТовара.СуммаБезНалогов = СтрокаТовара.СуммаБезНалогов - БалансСуммыБезНалогов;
					КонецЕсли;
					
					//Сумма с налогами
					
					БалансСуммыСНалогами = РезультатЗапроса.БалансСуммаСНалогами + СтрокаТовара.Сумма;
					Если НЕ БалансСуммыСНалогами = 0 И БалансСуммыСНалогами <= ПорогОкругленияСумм И БалансСуммыСНалогами >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.Сумма = СтрокаТовара.Сумма - БалансСуммыСНалогами;	
					КонецЕсли;
					
					//Сумма акциза
					
					БалансСуммыАкциза = РезультатЗапроса.БалансСуммаАкциза + СтрокаТовара.СуммаАкциза;
					Если НЕ БалансСуммыАкциза = 0 И БалансСуммыАкциза <= ПорогОкругленияСумм И БалансСуммыАкциза >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаАкциза = СтрокаТовара.СуммаАкциза - БалансСуммыАкциза;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Функция создает несколько ЭСФ на основании нескольких счетов-фактур.
//
Функция СоздатьСписокИсходящихЭСФ(МассивСчетовФактур) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.СоздатьСписокИсходящихЭСФ(МассивСчетовФактур)

КонецФункции

//++ НЕ ЭСФ
Функция ЗаполнитьТоварыДаннымиИПОсновногоЭСФ(Параметры, ОсновнойЭСФ)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнойЭСФ", ОсновнойЭСФ);
	Запрос.УстановитьПараметр("СчетФактураОснование", Параметры.Регистратор);
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&СчетФактураОснование КАК Ссылка,
	               |	ЭСФТоварыОсновной.НомерСтроки,
	               |	ЭСФТоварыОсновной.ТоварНаименование,
	               |	ЭСФТоварыОсновной.Товар КАК Товар,
	               |	ЭСФТоварыОсновной.КодТНВЭД,
	               |	ЭСФТоварыОсновной.ЕдиницаИзмеренияНаименование,
	               |	ЭСФТоварыОсновной.ЕдиницаИзмерения,
	               |	ЭСФТоварыОсновной.Количество КАК Количество,
	               |	ЭСФТоварыОсновной.Цена,
	               |	ЭСФТоварыОсновной.СуммаБезНалогов,
	               |	ЭСФТоварыОсновной.СтавкаАкцизаЧисло,
	               |	ЭСФТоварыОсновной.СтавкаАкциза,
	               |	ЭСФТоварыОсновной.СуммаАкциза,
	               |	ЭСФТоварыОсновной.ОборотПоРеализации,
	               |	ЭСФТоварыОсновной.СтавкаНДСЧисло,
	               |	ЭСФТоварыОсновной.БезНДС,
	               |	ЭСФТоварыОсновной.СтавкаНДС,
	               |	ЭСФТоварыОсновной.СуммаНДС,
	               |	ЭСФТоварыОсновной.Сумма,
	               |	ЭСФТоварыОсновной.НомерЗаявленияВРамкахТС,
	               |	ЭСФТоварыОсновной.ДополнительныеДанные,
	               |	ЭСФТоварыОсновной.ПризнакПроисхождения,
	               |	ЭСФТоварыОсновной.ТоварНаименованиеВРамкахТС,
	               |	ЭСФТоварыОсновной.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ЭСФТоварыОсновной.ИдентификаторТовара,
	               |	ЭСФТоварыОсновной.ЕдиницаИзмеренияКод,
	               |	ЭСФТоварыОсновной.ИсточникПроисхождения,
	               |	ИсточникиПроисхождения.ТипПроисхождения,
	               |	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ГСВСВходитВПеречень,
	               |	ИсточникиПроисхождения.ГСВС,
	               |	ИсточникиПроисхождения.МеткаТовара КАК ФизическаяМетка,
	               |	ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	               |	ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе
	               |ИЗ
	               |	Документ.ЭСФ.Товары КАК ЭСФТоварыОсновной
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	               |		ПО ЭСФТоварыОсновной.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
	               |		ПО (ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС)
	               |			И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
	               |ГДЕ
	               |	ЭСФТоварыОсновной.Ссылка = &ОсновнойЭСФ";			   
				   
	ТаблицаИПОсновогоЭСФ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровПоИП = ТаблицаТовары.Скопировать();
	ТаблицаТоваровПоИП.Очистить();
	
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл 
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Товар", СтрокаТовары.Товар);
		Если ТипЗнч(СтрокаТовары.Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовары.ЕдиницаИзмерения);
		КонецЕсли;

		МассивСтрокПоИП = ТаблицаИПОсновогоЭСФ.НайтиСтроки(ПараметрыОтбора);
		
		КоличествоОсталосьПогасить = СтрокаТовары.Количество;
		
		ОбщаяСуммаРаспределенных				= 0;
		ОбщаяСуммаАкцизаРаспределенных			= 0;
		ОбщаяСуммаНДСРаспределенных				= 0;
		ОбщийОборотПоРеализацииРаспределенных	= 0;
		
		ПерваяСтрокаЗаполнена = Ложь;
		Для Каждого СтрокаИП Из МассивСтрокПоИП Цикл
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				Продолжить;
			КонецЕсли;
				
				Если СтрокаИП.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
					
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				
				ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(НоваяСтрока.Товар);
				НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
				
				Если ТипЗнч(НоваяСтрока.Товар) = Тип("СправочникСсылка.Номенклатура") И ЭтоУслуга Тогда
				//Если ТипЗнч(НоваяСтрока.Товар) = Тип("СправочникСсылка.Номенклатура") И ЭСФСерверПереопределяемый.ЭтоУслуга(НоваяСтрока.Товар) Тогда
					НоваяСтрока.ПризнакПроисхождения ="6";
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаИП.ТипПроисхождения) ИЛИ НЕ ЗначениеЗаполнено(СтрокаИП.ГСВСВходитВПеречень) Тогда
					
					НоваяСтрока.ПризнакПроисхождения = "5";
					
					ТекстОшибки = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не указан Тип происхождения или отсутствуют данные по ГСВС в источнике происхождения.
					|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению. 
					|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
					
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
																							ТекстОшибки,
																							НоваяСтрока.Товар,
																							НоваяСтрока.НомерСтроки);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ПризнакПроисхождения, "Объект");	

				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "1";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "2";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "3";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "4";
				Иначе
					НоваяСтрока.ПризнакПроисхождения = "5";
				КонецЕсли;
				
				//Заполнение полей из ИП
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП);
				КодГСВС = "";
				ФизическаяМетка = "";
				ИдентификаторСклада = "";
				КлючевыеПоляЗаполнены = Истина;
				СписокНезаполненныхПолей = "";
				ДополнительныйИдентификатор = "";
				
				Если ЗначениеЗаполнено(СтрокаИП.ГСВС) Тогда
					КодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаИП.ГСВС, "Наименование");
				КонецЕсли;
								
				Если ЗначениеЗаполнено(СтрокаИП.ФизическаяМетка) Тогда
					ФизическаяМетка = "[" + СтрокаИП.ФизическаяМетка + "]";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИП.ДополнительныйИдентификатор) Тогда
					ДополнительныйИдентификатор = "<" + Формат(СтрокаИП.ДополнительныйИдентификатор,"ЧГ=") + ">";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Параметры.Склад) Тогда
					ИдентификаторСклада = Формат(ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "ИдентификаторСклада"), "ЧГ=");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КодГСВС) Тогда
					КлючевыеПоляЗаполнены = Ложь;
					СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Код ГСВС, ";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ИдентификаторСклада) Тогда
					КлючевыеПоляЗаполнены = Ложь;
					СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Идентификатор склада";
				КонецЕсли;
							
				Если КлючевыеПоляЗаполнены Тогда
					ИдентификаторТовара = "%1%2%3(%4)";
					ИдентификаторТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИдентификаторТовара, КодГСВС, ФизическаяМетка, ДополнительныйИдентификатор, ИдентификаторСклада); 
					НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
				Иначе
					НоваяСтрока.ИдентификаторТовара = "1";
				КонецЕсли;
				
				//заполнение числовых значений
				КоличествоСтроки = -Мин(СтрокаИП.Количество, -КоличествоОсталосьПогасить);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить + КоличествоСтроки*-1;	
				
				НоваяСтрока.Количество  		= КоличествоСтроки;
				
				//Пересчет суммовых значений  
				ДоляКоличестваНовойСтроки 				= КоличествоСтроки / ?(СтрокаТовары.Количество = 0, 1, СтрокаТовары.Количество);
							
				НоваяСтрока.Сумма 						= СтрокаТовары.Сумма * ДоляКоличестваНовойСтроки;
				
				НоваяСтрока.СуммаАкциза 				= СтрокаТовары.СуммаАкциза * ДоляКоличестваНовойСтроки;
				НоваяСтрока.СуммаНДС					= СтрокаТовары.СуммаНДС * ДоляКоличестваНовойСтроки;
				НоваяСтрока.ОборотПоРеализации 			= СтрокаТовары.ОборотПоРеализации * ДоляКоличестваНовойСтроки;
				
				ОбщаяСуммаРаспределенных				= ОбщаяСуммаРаспределенных + НоваяСтрока.Сумма;
				
				ОбщаяСуммаАкцизаРаспределенных			= ОбщаяСуммаАкцизаРаспределенных + НоваяСтрока.СуммаАкциза;
				ОбщаяСуммаНДСРаспределенных				= ОбщаяСуммаНДСРаспределенных + НоваяСтрока.СуммаНДС;
				ОбщийОборотПоРеализацииРаспределенных	= ОбщийОборотПоРеализацииРаспределенных + НоваяСтрока.ОборотПоРеализации;
		КонецЦикла;
		
		//Суммовые значения последней строки для корректировки ошибок округления
		Если НоваяСтрока <> Неопределено Тогда
			Если СтрокаТовары.Сумма <> ОбщаяСуммаРаспределенных Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + (СтрокаТовары.Сумма - ОбщаяСуммаРаспределенных);
			КонецЕсли;
			Если СтрокаТовары.СуммаАкциза <> ОбщаяСуммаАкцизаРаспределенных Тогда
				НоваяСтрока.СуммаАкциза = НоваяСтрока.СуммаАкциза + (СтрокаТовары.СуммаАкциза - ОбщаяСуммаАкцизаРаспределенных);
			КонецЕсли;
			Если СтрокаТовары.СуммаНДС <> ОбщаяСуммаНДСРаспределенных Тогда
				НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + (СтрокаТовары.СуммаНДС - ОбщаяСуммаНДСРаспределенных);
			КонецЕсли;
			Если СтрокаТовары.ОборотПоРеализации <> ОбщийОборотПоРеализацииРаспределенных Тогда
				НоваяСтрока.ОборотПоРеализации = НоваяСтрока.ОборотПоРеализации + (СтрокаТовары.ОборотПоРеализации - ОбщийОборотПоРеализацииРаспределенных);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТаблицаТоваровДополнительный = ТаблицаТовары.Скопировать();
	ТаблицаТоваровДополнительный.Очистить();
	
	ДанныеЗаполнены = ЛОЖЬ;
	Для Каждого СтрокаТоварыОсн Из ТаблицаИПОсновогоЭСФ Цикл 
		
		СтрокаТоваровДоп = ТаблицаТоваровДополнительный.Добавить();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Товар", 								СтрокаТоварыОсн.Товар);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", 					СтрокаТоварыОсн.ЕдиницаИзмерения);
		ПараметрыОтбора.Вставить("НомерЗаявленияВРамкахТС", 			СтрокаТоварыОсн.НомерЗаявленияВРамкахТС);
		ПараметрыОтбора.Вставить("ТоварНаименованиеВРамкахТС",          СтрокаТоварыОсн.ТоварНаименованиеВРамкахТС);
	    ПараметрыОтбора.Вставить("НомерПозицииВДекларацииИлиЗаявлении", СтрокаТоварыОсн.НомерПозицииВДекларацииИлиЗаявлении);
	    ПараметрыОтбора.Вставить("ИсточникПроисхождения",               СтрокаТоварыОсн.ИсточникПроисхождения);

		МассивСтрокПоИП = ТаблицаТоваровПоИП.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрокПоИП.Количество() <> 0 Тогда
			СтрокаДляЗаполнения = МассивСтрокПоИП[0];
			ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаДляЗаполнения);
		Иначе
			
			ПараметрыОтбора = Новый Структура;
    		ПараметрыОтбора.Вставить("Товар", СтрокаТоварыОсн.Товар);
    		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", СтрокаТоварыОсн.ЕдиницаИзмерения);
 
    		МассивСтрокТоваров = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
    		Если МассивСтрокТоваров.Количество() <> 0 Тогда
    			СтрокаДляЗаполнения = МассивСтрокТоваров[0];
				
				Если СтрокаДляЗаполнения.Количество > 0 Тогда
    				ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаДляЗаполнения);
    				ДанныеЗаполнены = Истина;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаТоварыОсн,, "Цена, СуммаБезНалогов, СуммаАкциза, ОборотПоРеализации, СуммаНДС, Сумма");
					
					//Установить номер строки из основной СФ
					СтрокаТоваровДоп.НомерСтроки = СтрокаТоварыОсн.НомерСтроки;
					
					//принудительно запишем 0, иначе значение будет Неопределено и в дальнейшем в алгоритмах это может приводить к исключительным ситуациям
					СтрокаТоваровДоп.Количество = 0;
					СтрокаТоваровДоп.Цена = 0;
					СтрокаТоваровДоп.СуммаБезНалогов = 0;
					СтрокаТоваровДоп.СуммаАкциза = 0;
					СтрокаТоваровДоп.ОборотПоРеализации = 0;
					СтрокаТоваровДоп.СуммаНДС = 0;
					СтрокаТоваровДоп.Сумма = 0;

				КонецЕсли;	
    		Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаТоварыОсн,, "Цена, СуммаБезНалогов, СуммаАкциза, ОборотПоРеализации, СуммаНДС, Сумма");
				
				//Установить номер строки из основной СФ
				СтрокаТоваровДоп.НомерСтроки = СтрокаТоварыОсн.НомерСтроки;
				
				СтрокаТоваровДоп.ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(СтрокаТоварыОсн.Товар);
				
				//принудительно запишем 0, иначе значение будет Неопределено и в дальнейшем в алгоритмах это может приводить к исключительным ситуациям
				СтрокаТоваровДоп.Количество = 0;
				СтрокаТоваровДоп.Цена = 0;
				СтрокаТоваровДоп.СуммаБезНалогов = 0;
				СтрокаТоваровДоп.СуммаАкциза = 0;
				СтрокаТоваровДоп.ОборотПоРеализации = 0;
				СтрокаТоваровДоп.СуммаНДС = 0;
				СтрокаТоваровДоп.Сумма = 0;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат  ПоместитьВоВременноеХранилище(ТаблицаТоваровДополнительный); 
	
КонецФункции
//-- НЕ ЭСФ

Функция НоваяВыборкаУчастникиСовместнойДеятельности(Знач МассивСчетовФактурСовместнойДеятельности)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчастникиСД.Ссылка КАК СчетФактура,
	|	УчастникиСД.Ссылка.Грузополучатель КАК Грузополучатель,
	|	УчастникиСД.НомерСтроки КАК НомерСтроки,
	|	УчастникиСД.УчастникСовместнойДеятельности.ИдентификационныйКодЛичности КАК Получатель_ПолучательИдентификатор,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(УчастникиСД.УчастникСовместнойДеятельности.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(УчастникиСД.УчастникСовместнойДеятельности.НаименованиеПолное КАК СТРОКА(400))
	|		ИНАЧЕ УчастникиСД.УчастникСовместнойДеятельности.Наименование
	|	КОНЕЦ КАК Получатель_ПолучательНаименование,
	|	УчастникиСД.УчастникСовместнойДеятельности КАК Получатель_Получатель,
	|	УчастникиСД.УчастникСовместнойДеятельности.СерияСвидетельстваПоНДС КАК Получатель_СерияСвидетельстваПоНДС,
	|	УчастникиСД.УчастникСовместнойДеятельности.НомерСвидетельстваПоНДС КАК Получатель_НомерСвидетельстваПоНДС,
	|	УчастникиСД.УчастникСовместнойДеятельности.КБЕ КАК Получатель_КБе,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорСовместнойДеятельности, ЛОЖЬ) КАК Получатель_УчастникСовместнойДеятельности,
	|	%Получатель_УчастникСРП КАК Получатель_УчастникСРП,
	|	УчастникиСД.ДоляУчастия КАК Получатель_ДоляУчастия
	|ПОМЕСТИТЬ ДанныеУчастниковСД
	|ИЗ
	|	Документ.СчетФактураВыданный.УчастникиСовместнойДеятельности КАК УчастникиСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО УчастникиСД.Ссылка.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	УчастникиСД.Ссылка В(&МассивСчетовФактурСовместнойДеятельности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Получатель_Получатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеУчастниковСД.СчетФактура КАК СчетФактура,
	|	ДанныеУчастниковСД.Грузополучатель КАК Грузополучатель,
	|	ДанныеУчастниковСД.Получатель_ПолучательИдентификатор,
	|	ДанныеУчастниковСД.Получатель_ПолучательНаименование,
	|	ДанныеУчастниковСД.Получатель_Получатель,
	|	ДанныеУчастниковСД.Получатель_СерияСвидетельстваПоНДС,
	|	ДанныеУчастниковСД.Получатель_НомерСвидетельстваПоНДС,
	|	ДанныеУчастниковСД.Получатель_КБе,
	|	ДанныеУчастниковСД.Получатель_УчастникСовместнойДеятельности,
	|	ДанныеУчастниковСД.Получатель_УчастникСРП,
	|	ДанныеУчастниковСД.Получатель_ДоляУчастия КАК Получатель_ДоляУчастия,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)), """") КАК Получатель_Адрес,
	//новые реквизиты ЭСФ версии №2
	|	""KZ"" КАК Получатель_КодСтраны
	|ИЗ
	|	ДанныеУчастниковСД КАК ДанныеУчастниковСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО ДанныеУчастниковСД.Получатель_Получатель = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеУчастниковСД.НомерСтроки
	|ИТОГИ
	|	СУММА(Получатель_ДоляУчастия)
	|ПО
	|	СчетФактура";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%Получатель_УчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	
	Запрос.УстановитьПараметр("МассивСчетовФактурСовместнойДеятельности", МассивСчетовФактурСовместнойДеятельности);	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
	
КонецФункции

Функция МассивЗначенийИзРезультатаЗапроса(Знач РезультатЗапроса, Знач ИмяПоля)
	
	Выборка = РезультатЗапроса.Выбрать();
	МассивЗначений = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЗначений.Добавить(Выборка[ИмяПоля]);	
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

//Если версия ЭСФ = 1 Тогда 
//Заполняет, в строке ПоставщикиСтрока, табличной части Поставщики, значения реквизитов:
//ДокументПодтверждающийПоставкуНомер и ДокументПодтверждающийПоставкуДата.
//Если версия ЭСФ = 2 Тогда
//Заполняет ДокументПодтверждающийПоставкуНомер и ДокументПодтверждающийПоставкуДата
//в зависимости от наличия и заполненности полей НомерДокументаГЗ и ДатаДокументаГЗ в документе-основании счета фактуры
//
Процедура ЗаполнитьРеквизитыДокументаПодтверждающегоПоставку(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ПоставщикиСтрока, ВерсияЭСФ = 1, ОбъектЭСФ = Неопределено, Знач ЕстьТоварыВСНеСНТ = Ложь)
	
	Если ВерсияЭСФ = 1 Тогда
		// Установить пустые значения реквизитов, в качестве значений по умолчанию.
		ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер = "";
		ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата = '0001-01-01';
		
		// Заполнить реквизиты документа подтверждающего поставку по данным счета-фактуры, на основании которого создается ЭСФ.
		Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			
			Если ЗначениеЗаполнено(ВыборкаРеквизиты.ОсновнойСчетФактура) Тогда
				
				// Номер и дата документа подтверждающего поставку в дополнительном ЭСФ
				// заполняются также как в основном ЭСФ, так как:
				// - Если номер и дата документа подтверждающего поставку будут отличаться,
				//   то дополнительный ЭСФ не будет принят ИС ЭСФ.
				// - Название реквизитов "Номер и дата документа подтверждающего поставку"
				//   может предполагать, что в дополнительном ЭСФ указывается номер и дата основного.
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЭСФПоставщики.ДокументПодтверждающийПоставкуНомер,
				|	ЭСФПоставщики.ДокументПодтверждающийПоставкуДата
				|ИЗ
				|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
				|		ПО ЭСФПоставщики.Ссылка = АктуальныеЭСФ.ЭСФ
				|			И (ЭСФПоставщики.НомерСтроки = 1)
				|ГДЕ
				|	АктуальныеЭСФ.СчетФактура = &ОсновнойСчетФактура";
				
				Запрос.УстановитьПараметр("ОсновнойСчетФактура", ВыборкаРеквизиты.ОсновнойСчетФактура);
				ВыборкаОсновнойСчетФактура = Запрос.Выполнить().Выбрать();
				
				Если ВыборкаОсновнойСчетФактура.Следующий() Тогда
					
					ЗаполнитьЗначенияСвойств(ПоставщикиСтрока, ВыборкаОсновнойСчетФактура);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			
			Если ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку)
				И ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата) Тогда
				
				ПоставщикиСтрока.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
				ПоставщикиСтрока.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВерсияЭСФ = 2 Тогда
		
		Если ЗначениеЗаполнено(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку) Тогда
			Если ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("НомерДокументаГЗ", ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку.Метаданные()) 
				И ЭСФСерверПереопределяемый.ЕстьРеквизитДокумента("ДатаДокументаГЗ", ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку.Метаданные()) Тогда
				
				
				НомерДокументаГЗ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку, "НомерДокументаГЗ");
				ДатаДокументаГЗ  = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку, "ДатаДокументаГЗ");
				Если ЗначениеЗаполнено(НомерДокументаГЗ) И ЗначениеЗаполнено(ДатаДокументаГЗ) Тогда
					ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер	= НомерДокументаГЗ;
					ОбъектЭСФ.ДокументПодтверждающийПоставкуДата    = ДатаДокументаГЗ;
				Иначе
					ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
					ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;	
				КонецЕсли;
			Иначе
				ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставку);
				ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;		
			КонецЕсли;
		Иначе
			ОбъектЭСФ.ДокументПодтверждающийПоставкуДата = ВыборкаРеквизиты.Поставщик_ДокументПодтверждающийПоставкуДата;	
		КонецЕсли;
		
		Если ЕстьТоварыВСНеСНТ Тогда
			ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = "NON SNT";
		КонецЕсли;

	КонецЕсли;	
		
КонецПроцедуры

// Очищает раздел H в документе ЭСФ, если получатель не является госучреждением.
//
// Параметры:
//  ВыборкаРеквизиты - ВыборкаИзРезультатаЗапроса - Смотрите НовыеРезультатыЗапросовПоРеквизитам().
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, заполняемый на основании выборки.
//
Процедура ОчиститьРеквизитыГосучреждения(Знач ВыборкаРеквизиты, ОбъектЭСФ)
	
	Если НЕ ВыборкаРеквизиты.Получатель_ГосударственноеУчреждение Тогда
		ОбъектЭСФ.ГосучреждениеИИК = "";
		ОбъектЭСФ.ГосучреждениеКодТоваров = "";
		ОбъектЭСФ.ГосучреждениеНазначениеПлатежа = "";
		ОбъектЭСФ.ГосучреждениеБИК = "";
	КонецЕсли;
	
КонецПроцедуры

// Удаляет символы пробел в начале текста, табуляция, двоеточие, перевод строки.
// Показывает сообщение пользователю, если удалены какие-нибудь символы.
//
// Параметры:
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, в котором может быть изменен реквизит ГосучреждениеНазначениеПлатежа.
//
Процедура УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ) Экспорт
	      
	КорректноеНазначениеПлатежа = ОбъектЭСФ.ГосучреждениеНазначениеПлатежа;
	
	КорректноеНазначениеПлатежа = СокрЛП(КорректноеНазначениеПлатежа);		
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.Таб, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.ПС, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, Символы.НПП, " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, "¶", " ");
	КорректноеНазначениеПлатежа = СтрЗаменить(КорректноеНазначениеПлатежа, ":", " ");
	
	Если КорректноеНазначениеПлатежа <> ОбъектЭСФ.ГосучреждениеНазначениеПлатежа Тогда
		Сообщить(НСтр("ru = 'Из реквизита госучреждения ""Назначение платежа"" удалены запрещенные символы, к которым относятся: двоеточие, табуляция, перевод строки, пробелы в начале и в конце текста.'"));
	КонецЕсли;
	
	ОбъектЭСФ.ГосучреждениеНазначениеПлатежа = КорректноеНазначениеПлатежа;
	
КонецПроцедуры

// Заполняет, в документе ЭСФ, реквизиты СвязанныйЭСФНомер и СвязанныйЭСФДата, СвязанныйЭСФРегистрационныйНомер.
//
Процедура ЗаполнитьДанныеСвязанногоЭСФ(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ЭСФ, ЕстьТоварыВСНеСНТ = Ложь)
	
 	// Установить пустые значения реквизитов, в качестве значений по умолчанию.	
	ЭСФ.СвязанныйЭСФДата = '0001-01-01';
	ЭСФ.СвязанныйЭСФНомер = "";
	ЭСФ.СвязанныйЭСФРегистрационныйНомер = "";
	
	Если ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Дополнительный 
	 ИЛИ ВыборкаРеквизиты.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
		
		// Получить данные основного счета-фактуры и связанного с ним документа ЭСФ.
		ПараметрыОтбора = Новый Структура("ОсновнойСчетФактура", ВыборкаРеквизиты.ОсновнойСчетФактура);
		МассивНайденныхСтрок = ТаблицаДанныхОсновныхСчетовФактур.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			
			ДанныеОсновного = МассивНайденныхСтрок[0];
			
			Если ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФДата) 
			   И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФНомер)
			   И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФРегистрационныйНомер) Тогда
			   
				// Дата и номер ЭСФ, связанного с основным счетом-фактурой, 
				// могут отличаться от от даты и номера связанного счета-фактуры,
				// поэтому заполнить дату и номер связанного ЭСФ по данным ЭСФ.
				ЭСФ.СвязанныйЭСФДата = ДанныеОсновного.ОсновнойЭСФДата;
				ЭСФ.СвязанныйЭСФНомер = ДанныеОсновного.ОсновнойЭСФНомер;
				ЭСФ.СвязанныйЭСФРегистрационныйНомер = ДанныеОсновного.ОсновнойЭСФРегистрационныйНомер;
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеОсновного.ОсновнойСчетФактура) 
			        И ЗначениеЗаполнено(ДанныеОсновного.ОсновнойСчетФактураДата) Тогда
					
				// Если ЭСФ, связанного с основным счетом-фактурой - нет,
				// то заполнить номер и дату связанного ЭСФ на основании счета-фактуры.
				ЭСФ.СвязанныйЭСФДата = ДанныеОсновного.ОсновнойСчетФактураДата;
				ЭСФ.СвязанныйЭСФНомер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ДанныеОсновного.ОсновнойСчетФактура);					
				ЭСФ.СвязанныйЭСФРегистрационныйНомер = "";					
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеОсновного.ОсновнойЭСФДокументПодтверждающийПоставкуНомер) И ДанныеОсновного.ОсновнойЭСФДокументПодтверждающийПоставкуНомер = "NON SNT" ТОгда
				ЕстьТоварыВСНеСНТ = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуОборотаЭСФ(Знач ВыборкаРеквизиты, Знач ТаблицаДанныхОсновныхСчетовФактур, ЭСФ)
	
	ЭСФ.ДатаОборота = ВыборкаРеквизиты.ДатаОборота;
	
КонецПроцедуры

// Добавляет и заполняет нового получателя или изменяет существующего в табличной части "Получатели", документа "ЭСФ".
//
// Параметры:
//  ВыборкаРеквизитыПолучателя - ВыборкаИзРезультатаЗапроса - Выборка, по которой будет заполняться получатель.
//  ЭСФ - ДокументОбъект.ЭСФ - Документ ЭСФ, в табличную часть "Получатели" которого будет добавлен новый получатель.
//  ПолучателиСтрока - существующая строка таб. части "Получатели" документа ЭСФ.
//
// Возвращаемое значение:
//  ДокументТабличнаяЧастьСтрока.ЭСФ.Получатели - Добавленная (измененная) строка.
//
Функция НоваяСтрокаТабличнойЧастиПолучатели(Знач ВыборкаРеквизитыПолучателя, ЭСФ, ПолучателиСтрока = Неопределено, ВерсияЭСФ = 1)
	
	Если ПолучателиСтрока = Неопределено Тогда
		ПолучателиСтрока = ЭСФ.Получатели.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствПоПрефиксу(ПолучателиСтрока, ВыборкаРеквизитыПолучателя, "Получатель_");
	
	// Флаг Нерезидент устанавливается в методе: ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня().
		
	// Поля получателя СерияНДС и НомерНДС удалены из веб-приложения ИС ЭСФ, но остались в API ИС ЭСФ.
	// Поэтому, они не заполняются при создании ЭСФ и скрыты по умолчанию из формы.
	// Пользователь может сделать эти поля видимыми и заполнить их вручную, после чего они отправятся в ИС ЭСФ.
	ПолучателиСтрока.СерияСвидетельстваПоНДС = "";
	ПолучателиСтрока.НомерСвидетельстваПоНДС = "";
	
	//Заполним БИН структурной единицы покупателя
	ЭСФСерверПереопределяемый.ЗаполнитьБИНФилиалаПокупателя(ПолучателиСтрока, ВыборкаРеквизитыПолучателя);
	
	// Если у получателя установлен признак РозничныйПокупатель
	ЭСФСерверПереопределяемый.ПолучательРозничныйПокупатель(ПолучателиСтрока, ВерсияЭСФ);
	
КонецФункции

// Заполняет в объекте ЭСФ таблицу ТоварыПоПолучателям. 
//
// Параметры:
//  ВыборкаУчастникиСД - ВыборкаИзРезультатаЗапроса - Данные участников СД,
//   см. функцию НоваяВыборкаУчастникиСовместнойДеятельности().
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, в котором необходимо заполнить таблицу ТоварыПоПолучателям.
//   В объекте ЭСФ должна быть заполнена таблица Товары.
//   В объекте ЭСФ должен быть заполнен реквизит СчетФактура.
//
Процедура ЗаполнитьТаблицуТоварыПоПолучателям(ВыборкаУчастникиСД, ОбъектЭСФ)
	
	ТаблицаУчастниковСД = ТаблицаУчастниковСД(ВыборкаУчастникиСД, ОбъектЭСФ);	
	
	Если ТаблицаУчастниковСД <> Неопределено Тогда
		ЗаполнитьТаблицуТоварыПоПолучателямПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ);
	Иначе
		ОбъектЭСФ.ТоварыПоПолучателям.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаУчастниковСД(ВыборкаУчастникиСД, ОбъектЭСФ)
	
	ТаблицаУчастниковСД = Неопределено;
	
	ПоказатьОшибку = Ложь;
	ВыборкаУчастникиСД.Сбросить();
	Если ВыборкаУчастникиСД.НайтиСледующий(ОбъектЭСФ.СчетФактура, "СчетФактура") Тогда
		
		ВыборкаУчастникиСДДетальныеЗаписи = ВыборкаУчастникиСД.Выбрать();
		
		Если ВыборкаУчастникиСДДетальныеЗаписи.Количество() = 0 Тогда
			ПоказатьОшибку = Истина;
		КонецЕсли;
		
	Иначе
		
		ПоказатьОшибку = Истина;
		
	КонецЕсли;
	
	Если ПоказатьОшибку Тогда
		
		ТекстИсключения = НСтр("ru = 'Невозможно создать электронный счет-фактуру для ""[СчетФактура]"", так как в счете-фактуре не заполнена таблица ""Участники совместной деятельности"".'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[СчетФактура]", ОбъектЭСФ.СчетФактура);
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ТаблицаУчастниковСД = Новый ТаблицаЗначений;
	ТаблицаУчастниковСД.Колонки.Добавить("ПолучательИдентификатор");
	ТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастия");
	
	Пока ВыборкаУчастникиСДДетальныеЗаписи.Следующий() Цикл
		СтрокаТаблицаУчастниковСД = ТаблицаУчастниковСД.Добавить();
		СтрокаТаблицаУчастниковСД.ПолучательИдентификатор = ВыборкаУчастникиСДДетальныеЗаписи.Получатель_ПолучательИдентификатор;
		СтрокаТаблицаУчастниковСД.ДоляУчастия = ВыборкаУчастникиСДДетальныеЗаписи.Получатель_ДоляУчастия;
	КонецЦикла;
	
	Возврат ТаблицаУчастниковСД;	
	
КонецФункции

// Заполняет в объекте ЭСФ таблицу ТоварыПоПолучателям.
//
// Параметры:
//  ТаблицаУчастниковСД - ТаблицаЗначений, ДанныеФормыКоллекция -
//   Даныне по получателям ЭСФ, которые являются участниками СД. Должна содержать:
//    ПолучательИдентификатор - Строка - БИН/ИИН получателя участника СД.
//    ДоляУчастия - Число - Доля участия получателя, участника СД. 
//  ОбъектЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - Документ ЭСФ. 
//
Процедура ЗаполнитьТаблицуТоварыПоПолучателямПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ) Экспорт
	
	ОбъектЭСФ.ТоварыПоПолучателям.Очистить();
	СуммаДолейУчастия = ТаблицаУчастниковСД.Итог("ДоляУчастия");
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить таблицу "ТоварыПоПолучателям".
	Для Каждого СтрокаТовары Из ОбъектЭСФ.Товары Цикл
		
		Итого = Новый Структура;
		Итого.Вставить("Количество", 0);
		Итого.Вставить("СуммаБезНалогов", 0);
		Итого.Вставить("СуммаАкциза", 0);
		Итого.Вставить("ОборотПоРеализации", 0);
		Итого.Вставить("СуммаНДС", 0);
		Итого.Вставить("Сумма", 0);
		
		//////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить строки в таблице ТоварыПоПолучателям
		// по всем участникам СД для текущей строки товаров.
		Для Каждого СтрокаТаблицаУчастниковСД Из ТаблицаУчастниковСД Цикл
			
			КоэффициентУчастникаСД = СтрокаТаблицаУчастниковСД.ДоляУчастия / ?(СуммаДолейУчастия = 0, 1, СуммаДолейУчастия);
			
			СтрокаТоварыПоПолучателям = ОбъектЭСФ.ТоварыПоПолучателям.Добавить();
			
			СтрокаТоварыПоПолучателям.Идентификатор = СтрокаТаблицаУчастниковСД.ПолучательИдентификатор;
			
			СтрокаТоварыПоПолучателям.НомерТовара = СтрокаТовары.НомерСтроки;
			
			СтрокаТоварыПоПолучателям.Количество = СтрокаТовары.Количество * КоэффициентУчастникаСД;
			Итого.Количество = Итого.Количество + СтрокаТоварыПоПолучателям.Количество;
			
			СтрокаТоварыПоПолучателям.СуммаБезНалогов = СтрокаТовары.СуммаБезНалогов * КоэффициентУчастникаСД;
			Итого.СуммаБезНалогов = Итого.СуммаБезНалогов + СтрокаТоварыПоПолучателям.СуммаБезНалогов;
			
			СтрокаТоварыПоПолучателям.СуммаАкциза = СтрокаТовары.СуммаАкциза * КоэффициентУчастникаСД;
			Итого.СуммаАкциза = Итого.СуммаАкциза + СтрокаТоварыПоПолучателям.СуммаАкциза;
			
			СтрокаТоварыПоПолучателям.ОборотПоРеализации = СтрокаТовары.ОборотПоРеализации * КоэффициентУчастникаСД;
			Итого.ОборотПоРеализации = Итого.ОборотПоРеализации + СтрокаТоварыПоПолучателям.ОборотПоРеализации;
			
			СтрокаТоварыПоПолучателям.СуммаНДС = СтрокаТовары.СуммаНДС * КоэффициентУчастникаСД;
			Итого.СуммаНДС = Итого.СуммаНДС + СтрокаТоварыПоПолучателям.СуммаНДС;
			
			СтрокаТоварыПоПолучателям.Сумма = СтрокаТовары.Сумма * КоэффициентУчастникаСД;	
			Итого.Сумма = Итого.Сумма + СтрокаТоварыПоПолучателям.Сумма;
			
			СтрокаТоварыПоПолучателям.ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
			
		КонецЦикла;
		
		ПоследняяСтрокаТоварыПоПолучателям = СтрокаТоварыПоПолучателям;
		
		//////////////////////////////////////////////////////////////////////////////	
		// Устранить погрешности округления, распределив их на последнего участника СД.
		Для Каждого ЭлементИтого Из Итого Цикл
			ИмяКолонки = ЭлементИтого.Ключ;
			Разница = СтрокаТовары[ИмяКолонки] - ЭлементИтого.Значение;
			ПоследняяСтрокаТоварыПоПолучателям[ИмяКолонки] = ПоследняяСтрокаТоварыПоПолучателям[ИмяКолонки] + Разница;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в объекте ЭСФ таблицу ТоварыПоПоставщикам.
//
// Параметры:
//  ТаблицаУчастниковСД - ТаблицаЗначений, ДанныеФормыКоллекция -
//   Данные по поставщикам ЭСФ, которые являются участниками СД. Должна содержать:
//    ПоставщикИдентификатор - Строка - БИН/ИИН поставщика участника СД.
//    ДоляУчастия - Число - Доля участия поставщика, участника СД. 
//  ОбъектЭСФ - ДокументОбъект.ЭСФ, ДанныеФормыСтруктура - Документ ЭСФ. 
//
Процедура ЗаполнитьТаблицуТоварыПоПоставщикамПоТаблицеУчастниковСД(ТаблицаУчастниковСД, ОбъектЭСФ) Экспорт
	
	ОбъектЭСФ.ТоварыПоПоставщикам.Очистить();
	СуммаДолейУчастия = ТаблицаУчастниковСД.Итог("ДоляУчастия");
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить таблицу "ТоварыПоПолучателям".
	Для Каждого СтрокаТовары Из ОбъектЭСФ.Товары Цикл
		
		Итого = Новый Структура;
		Итого.Вставить("Количество", 0);
		Итого.Вставить("СуммаБезНалогов", 0);
		Итого.Вставить("СуммаАкциза", 0);
		Итого.Вставить("ОборотПоРеализации", 0);
		Итого.Вставить("СуммаНДС", 0);
		Итого.Вставить("Сумма", 0);
		
		//////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить строки в таблице ТоварыПоПолучателям
		// по всем участникам СД для текущей строки товаров.
		Для Каждого СтрокаТаблицаУчастниковСД Из ТаблицаУчастниковСД Цикл
			
			КоэффициентУчастникаСД = СтрокаТаблицаУчастниковСД.ДоляУчастия / ?(СуммаДолейУчастия = 0, 1, СуммаДолейУчастия);
			
			СтрокаТоварыПоПоставщикам = ОбъектЭСФ.ТоварыПоПоставщикам.Добавить();
			
			СтрокаТоварыПоПоставщикам.Идентификатор = СтрокаТаблицаУчастниковСД.ПоставщикИдентификатор;
			
			СтрокаТоварыПоПоставщикам.НомерТовара = СтрокаТовары.НомерСтроки;
			
			СтрокаТоварыПоПоставщикам.Количество = СтрокаТовары.Количество * КоэффициентУчастникаСД;
			Итого.Количество = Итого.Количество + СтрокаТоварыПоПоставщикам.Количество;
			
			СтрокаТоварыПоПоставщикам.СуммаБезНалогов = СтрокаТовары.СуммаБезНалогов * КоэффициентУчастникаСД;
			Итого.СуммаБезНалогов = Итого.СуммаБезНалогов + СтрокаТоварыПоПоставщикам.СуммаБезНалогов;
			
			СтрокаТоварыПоПоставщикам.СуммаАкциза = СтрокаТовары.СуммаАкциза * КоэффициентУчастникаСД;
			Итого.СуммаАкциза = Итого.СуммаАкциза + СтрокаТоварыПоПоставщикам.СуммаАкциза;
			
			СтрокаТоварыПоПоставщикам.ОборотПоРеализации = СтрокаТовары.ОборотПоРеализации * КоэффициентУчастникаСД;
			Итого.ОборотПоРеализации = Итого.ОборотПоРеализации + СтрокаТоварыПоПоставщикам.ОборотПоРеализации;
			
			СтрокаТоварыПоПоставщикам.СуммаНДС = СтрокаТовары.СуммаНДС * КоэффициентУчастникаСД;
			Итого.СуммаНДС = Итого.СуммаНДС + СтрокаТоварыПоПоставщикам.СуммаНДС;
			
			СтрокаТоварыПоПоставщикам.Сумма = СтрокаТовары.Сумма * КоэффициентУчастникаСД;	
			Итого.Сумма = Итого.Сумма + СтрокаТоварыПоПоставщикам.Сумма;
			
			СтрокаТоварыПоПоставщикам.ДополнительныеДанные = СтрокаТовары.ДополнительныеДанные;
			
		КонецЦикла;
		
		ПоследняяСтрокаТоварыПоПоставщикам = СтрокаТоварыПоПоставщикам;
		
		//////////////////////////////////////////////////////////////////////////////	
		// Устранить погрешности округления, распределив их на последнего участника СД.
		Для Каждого ЭлементИтого Из Итого Цикл
			ИмяКолонки = ЭлементИтого.Ключ;
			Разница = СтрокаТовары[ИмяКолонки] - ЭлементИтого.Значение;
			ПоследняяСтрокаТоварыПоПоставщикам[ИмяКолонки] = ПоследняяСтрокаТоварыПоПоставщикам[ИмяКолонки] + Разница;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание счетов-фактур

// См. ЭСФСервер.ЗаполнитьСчетФактуруПолученный()
Процедура ЗаполнитьСчетФактуруПолученный(Знач СсылкаЭСФ, ОбъектСчетФактура) Экспорт
	
	ЭСФСерверПереопределяемый.ЗаполнитьСчетФактуруПолученный(СсылкаЭСФ, ОбъектСчетФактура);
	
КонецПроцедуры

Функция ТаблицыПоУчастникамСД(ДоговорКонтрагента, ЭСФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПоставщики.Поставщик КАК УчастникСД,
	|	ЭСФПоставщики.ДоляУчастия КАК ДоляУчастия
	|ИЗ
	|	Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|ГДЕ
	|	ЭСФПоставщики.Ссылка = &ЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности КАК УчастникСД,
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.ДоляУчастия КАК ДоляУчастия
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.УчастникиСовместнойДеятельности КАК ДоговорыКонтрагентовУчастникиСовместнойДеятельности
	|ГДЕ
	|	ДоговорыКонтрагентовУчастникиСовместнойДеятельности.Ссылка = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ЭСФ", ЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицыПоУчастникамСД = Новый Структура;
	ТаблицыПоУчастникамСД.Вставить("УчастникиЭСФ", МассивРезультатов[0].Выгрузить());
	ТаблицыПоУчастникамСД.Вставить("УчастникиДоговора", МассивРезультатов[1].Выгрузить());
	
	Возврат ТаблицыПоУчастникамСД;
	
КонецФункции

Функция СовпадаетСоставУчастниковСД(Знач УчастникиСД_УчастникиДоговора, Знач УчастникиСД_УчастникиЭСФ, ОбъединеннаяТаблицаУчастниковСД)
	
	СовпадаетСоставУчастниковСД = Истина;
	
	ОбъединеннаяТаблицаУчастниковСД = Новый ТаблицаЗначений;	
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("УчастникСД");
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастияДоговор");
	ОбъединеннаяТаблицаУчастниковСД.Колонки.Добавить("ДоляУчастияЭСФ");
	
	Для Каждого СтрокаУчастникЭСФ Из УчастникиСД_УчастникиЭСФ Цикл
		
		СтрокаУчастникДоговора = УчастникиСД_УчастникиДоговора.Найти(СтрокаУчастникЭСФ.УчастникСД, "УчастникСД");
		
		Если СтрокаУчастникДоговора <> Неопределено Тогда
			
			СтрокаОбъединеннаяТаблицаУчастниковСД = ОбъединеннаяТаблицаУчастниковСД.Добавить();
			СтрокаОбъединеннаяТаблицаУчастниковСД.УчастникСД = СтрокаУчастникЭСФ.УчастникСД;
			СтрокаОбъединеннаяТаблицаУчастниковСД.ДоляУчастияДоговор = СтрокаУчастникДоговора.ДоляУчастия;
            СтрокаОбъединеннаяТаблицаУчастниковСД.ДоляУчастияЭСФ = СтрокаУчастникЭСФ.ДоляУчастия;
			
		Иначе
			
			СовпадаетСоставУчастниковСД = Ложь;
			ОбъединеннаяТаблицаУчастниковСД = Неопределено;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СовпадаетСоставУчастниковСД;
	
КонецФункции

Функция СовпадаютДолиУчастниковСД(Знач ОбъединеннаяТаблицаУчастниковСД)
	
	СовпадаютДолиУчастниковСД = Истина;
	
	ИтогДолиУчастияЭСФ = ОбъединеннаяТаблицаУчастниковСД.Итог("ДоляУчастияЭСФ");
	ИтогДолиУчастияДоговора = ОбъединеннаяТаблицаУчастниковСД.Итог("ДоляУчастияДоговор");
	
	Для Каждого СтрокаТаблицы Из ОбъединеннаяТаблицаУчастниковСД Цикл
		
		// Привести доли в текущей строке к единому процентному измерению для сравнения.
		ПроцентыСтрокиЭСФ = СтрокаТаблицы.ДоляУчастияЭСФ / ?(ИтогДолиУчастияЭСФ = 0, 1, ИтогДолиУчастияЭСФ);
		ПроцентыСтрокиДоговора = СтрокаТаблицы.ДоляУчастияДоговор / ?(ИтогДолиУчастияДоговора = 0, 1, ИтогДолиУчастияДоговора);
		
		// Допускается расхождение долей в договоре и ЭСФ на один процент, чтобы устранить проблемы округления.
		Если ПроцентыСтрокиЭСФ <= ПроцентыСтрокиДоговора + 0.01
			И ПроцентыСтрокиЭСФ >= ПроцентыСтрокиДоговора - 0.01 Тогда
			
			// Доли участия совпадают, продолжаем проверку.
			
		Иначе
			
			СовпадаютДолиУчастниковСД = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СовпадаютДолиУчастниковСД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных реквизитов ЭСФ

//++ НЕ ЭСФ

Процедура ЗаполнитьСсылкиНаЕдиницыИзмеренияИТовары(НаправлениеЭСФ, МассивЭСФ)
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	
	ТаблицаТоваровИЕдиницИзмерений = Новый ТаблицаЗначений;                             
	ТипКонтрагент =  Метаданные.РегистрыСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Измерения.Контрагент.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("Контрагент", ТипКонтрагент);
	ТипЕдиницаИзмеренияКод = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("ЕдиницаИзмеренияКод", ТипЕдиницаИзмеренияКод);
	ТипТоварНаименование = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ТоварНаименование.Тип;
	ТаблицаТоваровИЕдиницИзмерений.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);

	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
		   
		   Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
			    СтрокаТаблицыТоваровИЕдиницИзмерений = ТаблицаТоваровИЕдиницИзмерений.Добавить();
				СтрокаТаблицыТоваровИЕдиницИзмерений.Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
				ЕдиницаИзмеренияКодИлиНаименование							= ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод), СтрокаТаблицыТовары.ЕдиницаИзмеренияКод, СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование);
				СтрокаТаблицыТоваровИЕдиницИзмерений.ЕдиницаИзмеренияКод 	= ЭСФКлиентСервер.ПреобразованноеНаименование(ЕдиницаИзмеренияКодИлиНаименование);
				СтрокаТаблицыТоваровИЕдиницИзмерений.ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ТоварНаименование КАК ТоварНаименование
	|ПОМЕСТИТЬ ТоварыПоКонтрагентам
	|ИЗ
	|	&ТоварыИЕдиницыИзмеренияПоКонтрагентам КАК ТоварыИЕдиницыИзмеренияПоКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмеренияКод,
	|	ТоварНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаСоответствий.КлючАналитики КАК КлючАналитики,
	|	ТоварыПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод,
	|	ТоварыПоКонтрагентам.ТоварНаименование
	|ПОМЕСТИТЬ КлючиАналитикиПоТоварам
	|ИЗ
	|	ТоварыПоКонтрагентам КАК ТоварыПоКонтрагентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаСоответствий КАК АналитикаУчетаСоответствий
	|		ПО ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод = АналитикаУчетаСоответствий.ЕдиницаИзмеренияКод
	|			И ТоварыПоКонтрагентам.ТоварНаименование = АналитикаУчетаСоответствий.ТоварНаименование
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитикаУчетаСоответствий.КлючАналитики,
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод,
	|	ТоварыПоКонтрагентам.ТоварНаименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПоКонтрагентам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Контрагент,
	|	КлючиАналитикиПоТоварам.ЕдиницаИзмеренияКод,
	|	КлючиАналитикиПоТоварам.ТоварНаименование,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Товар,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.ЕдиницаИзмерения,
	|	СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.КоэффициентПересчета
	|ИЗ
	|	КлючиАналитикиПоТоварам КАК КлючиАналитикиПоТоварам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров КАК СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров
	|		ПО КлючиАналитикиПоТоварам.КлючАналитики = СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.КлючАналитикиСоответствия
	|			И КлючиАналитикиПоТоварам.Контрагент = СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.Контрагент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ТоварыИЕдиницыИзмеренияПоКонтрагентам", ТаблицаТоваровИЕдиницИзмерений);
	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	
	//Получить наименования единиц измерений
	ЭСФСерверПереопределяемый.ЗаполнитьНаименованияЕдиницИзмерений(ТаблицаСоответствий);
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Контрагент", ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]);
				ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
				ПараметрыОтбора.Вставить("ТоварНаименование", ТоварНаименование);
				ПараметрыОтбора.Вставить("ЕдиницаИзмеренияКод", СтрокаТаблицыТовары.ЕдиницаИзмеренияКод);
				
				МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					НайденнаяСтрока = МассивНайденныхСтрок[0]; 
					СтрокаТаблицыТовары.Товар = НайденнаяСтрока.Товар;
					СтрокаТаблицыТовары.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмерения;
					СтрокаТаблицыТовары.КоэффициентПересчета = НайденнаяСтрока.КоэффициентПересчета;
					СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование = НайденнаяСтрока.ЕдиницаИзмеренияНаименование;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

//-- НЕ ЭСФ

Процедура ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ)
	
	ЭСФСерверПереопределяемый.ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаТовары(Знач НаправлениеЭСФ, МассивЭСФ)
	
	ЭСФСерверПереопределяемый.ЗаполнитьСсылкиНаТовары(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// Заполняет реквизит ДоговорПоставки в документах ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, в которых необходимо заполнить реквизит ДоговорПоставки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
// 
Процедура ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ)
	
	ЭСФСерверПереопределяемый.ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Соответствия наименований и ссылок товаров и единиц измерения

// Сохраняет соответствия "Единица измерения наименование - Единица измерения ссылка".
// Соответствия сохраняются в разрезе контрагентов.
// Если ЭСФ содержит несколько контрагентов, то соответствия сохраняются для каждого из них.  
// Для сохранения соответствия ссылка на контрагента должна быть заполнена, иначе оно не сохранится.
// Соответствие сохраняется только если заполнена ссылка на единицу измерения.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив объектов ДокументСсылка.ЭСФ,    
//   для которых необходимо сохранить соответствия "Единица измерения наименование - Единица измерения ссылка".
//
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверПереопределяемый.СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// Возвращает сохраненные соответствия "Единица измерения наименование - Единица измерения ссылка".
//
// Параметры:
//  ТаблицаНаименованийЕдиницИзмерения - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единиц измерений, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Единица измерения наименование - Единица измерения ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единицы измерения, как в параметре ТаблицаНаименованийЕдиницИзмерения.
//   |- ЕдиницаИзмерения - См. РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения - Ссылка на единицу измерения.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокЕдиницИзмерения(ТаблицаНаименованийЕдиницИзмерения)
	
	// Добавить и заполнить колонку "ЕдиницаИзмеренияНаименованиеПреобразованное".
	ТипЕдиницаИзмеренияНаименование = ТаблицаНаименованийЕдиницИзмерения.Колонки.ЕдиницаИзмеренияНаименование.ТипЗначения;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПреобразованное", ТипЕдиницаИзмеренияНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийЕдиницИзмерения Цикл
		СтрокаТаблицы.ЕдиницаИзмеренияНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ЕдиницаИзмеренияНаименование);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийЕдиницИзмерения.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименованиеИсходное,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименованиеПреобразованное КАК ЕдиницаИзмеренияНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийЕдиницИзмерения КАК ТаблицаНаименованийЕдиницИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ЕдиницаИзмеренияНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.ЕдиницаИзмеренияНаименованиеИсходное КАК ЕдиницаИзмеренияНаименование,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименованиеИзСправочника
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокЕдиницИзмерения КАК СоответствияНаименованийИСсылокЕдиницИзмерения
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокЕдиницИзмерения.Контрагент
	|			И ВременнаяТаблица.ЕдиницаИзмеренияНаименование = СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмеренияНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийЕдиницИзмерения", ТаблицаНаименованийЕдиницИзмерения);	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("Контрагент, ЕдиницаИзмеренияНаименование");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// См. ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров()
Процедура СохранитьСоответствияНаименованийИСсылокТоваров(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверПереопределяемый.СохранитьСоответствияНаименованийИСсылокТоваров(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// Возвращает сохраненные соответствия "Товар наименование - Товар ссылка".
//
// Параметры:
//  ТаблицаНаименованийТоваров - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ТоварНаименование - Строка - Наименования товаров, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Товар наименование - Товар ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ТоварНаименование - Строка - Наименования товара, как в параметре ТаблицаНаименованийТоваров.
//   |- Товар - См. РегистрыСведений.СоответствияНаименованийИСсылокТоваров.Товар - Ссылка на товар.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокТоваров(ТаблицаНаименованийТоваров)
	
	// Добавить и заполнить колонку "ТоварНаименованиеПреобразованное".
	ТипТоварНаименование = ТаблицаНаименованийТоваров.Колонки.ТоварНаименование.ТипЗначения;
	ТаблицаНаименованийТоваров.Колонки.Добавить("ТоварНаименованиеПреобразованное", ТипТоварНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийТоваров Цикл
		СтрокаТаблицы.ТоварНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ТоварНаименование);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийТоваров.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийТоваров.ТоварНаименование КАК ТоварНаименованиеИсходное,
	|	ТаблицаНаименованийТоваров.ТоварНаименованиеПреобразованное КАК ТоварНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийТоваров КАК ТаблицаНаименованийТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ТоварНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.ТоварНаименованиеИсходное КАК ТоварНаименование,
	|	СоответствияНаименованийИСсылокТоваров.Товар КАК Товар
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокТоваров КАК СоответствияНаименованийИСсылокТоваров
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокТоваров.Контрагент
	|			И ВременнаяТаблица.ТоварНаименование = СоответствияНаименованийИСсылокТоваров.ТоварНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийТоваров", ТаблицаНаименованийТоваров);	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("Контрагент, ТоварНаименование");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции


// Поиск и создание ключей аналитики по наименованиям товаров и кодам единиц измерения
//
// Параметры:
//  МассивЭСФ					 - 	 Массив ЭСФ по которым следует найти ключи аналитики и создать при их отсутствии 
//  СоздатьНовыеПриОтсутствии	 - 	 Параметр указывающий создавать или нет новые ключи аналитики при их отсутствии 
// 
// Возвращаемое значение:
//   ТаблицаЗначений с полями ТоварНаименование, ЕдиницаИзмеренияКод, КлючАналитики
//
Функция ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Знач МассивЭСФ, Знач СоздатьНовыеПриОтсутствии) Экспорт
	
	КлючиАналитикиПоТоварам = Новый ТаблицаЗначений;
	//++ НЕ ЭСФ
	ЗапросТоваров = Новый Запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ЕдиницаИзмеренияКод <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ЕдиницаИзмеренияКод
	|		ИНАЧЕ ЭСФТовары.ЕдиницаИзмеренияНаименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ КАК ТоварНаименование
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|ГДЕ
	|	(ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ИЛИ ЭСФТовары.ТоварНаименованиеВРамкахТС <> &ПустаяСтрока)
	|	И ЭСФТовары.Ссылка В(&МассивЭСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ЕдиницаИзмеренияКод <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ЕдиницаИзмеренияКод
	|		ИНАЧЕ ЭСФТовары.ЕдиницаИзмеренияНаименование
	|	КОНЕЦ" ;
	
	ЗапросТоваров.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ЗапросТоваров.УстановитьПараметр("ПустаяСтрока", "");
	
	ДлинаТипЕдиницыИзмерения = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип.КвалификаторыСтроки.Длина;
	
	ТаблицаТоваров = ЗапросТоваров.Выполнить().Выгрузить();
	
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		Строка.ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Строка.ЕдиницаИзмеренияКод);
	КонецЦикла;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод
	|ПОМЕСТИТЬ ВТТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(АналитикаУчетаСоответствий.КлючАналитики) КАК КлючАналитикиСоответствия,
	|	ВТТаблицаТовары.ТоварНаименование,
	|	ВТТаблицаТовары.ЕдиницаИзмеренияКод
	|ИЗ
	|	ВТТаблицаТовары КАК ВТТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаСоответствий КАК АналитикаУчетаСоответствий
	|		ПО ВТТаблицаТовары.ТоварНаименование = АналитикаУчетаСоответствий.ТоварНаименование
	|			И ВТТаблицаТовары.ЕдиницаИзмеренияКод = АналитикаУчетаСоответствий.ЕдиницаИзмеренияКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаТовары.ТоварНаименование,
	|	ВТТаблицаТовары.ЕдиницаИзмеренияКод";
	
	ЗапросАналитик.УстановитьПараметр("ТаблицаТовары", ТаблицаТоваров);
	
	ТипТоварНаименование 	= Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ТоварНаименование.Тип;
	ТипЕдиницаИзмеренияКод 	= Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип;
	ТипКлючАналитики	    = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Ресурсы.КлючАналитики.Тип;
	
	КлючиАналитикиПоТоварам = Новый ТаблицаЗначений;
	КлючиАналитикиПоТоварам.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);
	КлючиАналитикиПоТоварам.Колонки.Добавить("ЕдиницаИзмеренияКод", ТипЕдиницаИзмеренияКод);
	КлючиАналитикиПоТоварам.Колонки.Добавить("КлючАналитикиСоответствия", ТипКлючАналитики);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = КлючиАналитикиПоТоварам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.КлючАналитикиСоответствия) И СоздатьНовыеПриОтсутствии Тогда
			НоваяСтрока.КлючАналитикиСоответствия = РегистрыСведений.АналитикаУчетаСоответствий.СоздатьКлючАналитики(Выборка);
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ ЭСФ
	Возврат КлючиАналитикиПоТоварам;
		
КонецФункции

Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);	
	
	ЗапросТоваров = Новый Запрос;
	ЗапросТоваров.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ЕдиницаИзмеренияКод <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ЕдиницаИзмеренияКод
	|		ИНАЧЕ ЭСФТовары.ЕдиницаИзмеренияНаименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияКод,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ КАК ТоварНаименование,
	|	ЭСФТовары.ЕдиницаИзмерения,
	|	ЭСФТовары.Товар,
	|	ЭСФТовары.КоэффициентПересчета,
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента] КАК Контрагент
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.[ИмяТаблицыКонтрагентов] КАК ЭСФКонтрагенты
	|		ПО ЭСФТовары.Ссылка = ЭСФКонтрагенты.Ссылка
	|ГДЕ
	|	(ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ИЛИ ЭСФТовары.ТоварНаименованиеВРамкахТС <> &ПустаяСтрока)
	|	И ЭСФКонтрагенты.Ссылка В(&МассивЭСФ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.ЕдиницаИзмеренияКод <> &ПустаяСтрока
	|			ТОГДА ЭСФТовары.ЕдиницаИзмеренияКод
	|		ИНАЧЕ ЭСФТовары.ЕдиницаИзмеренияНаименование
	|	КОНЕЦ,
	|	ЭСФТовары.ЕдиницаИзмерения,
	|	ЭСФТовары.Товар,
	|	ЭСФТовары.КоэффициентПересчета,
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента]" ;
	
	ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	ЗапросТоваров.Текст = СтрЗаменить(ЗапросТоваров.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	
	ЗапросТоваров.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ЗапросТоваров.УстановитьПараметр("ПустаяСтрока", "");
	
	ДлинаТипЕдиницыИзмерения = Метаданные.РегистрыСведений.АналитикаУчетаСоответствий.Измерения.ЕдиницаИзмеренияКод.Тип.КвалификаторыСтроки.Длина;
	
	ТаблицаТоваровИЕдиницИзмерений = ЗапросТоваров.Выполнить().Выгрузить();
	
		
	Для Каждого Строка Из ТаблицаТоваровИЕдиницИзмерений Цикл
		Строка.ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Строка.ЕдиницаИзмеренияКод);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючиАналитики.ТоварНаименование КАК ТоварНаименование,
	|	КлючиАналитики.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	КлючиАналитики.КлючАналитикиСоответствия
	|ПОМЕСТИТЬ КлючиАналитики
	|ИЗ
	|	&КлючиАналитики КАК КлючиАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Контрагент КАК Контрагент,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ТоварНаименование КАК ТоварНаименование,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.Товар КАК Товар,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыИЕдиницыИзмеренияПоКонтрагентам.КоэффициентПересчета КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ТоварыПоКонтрагентам
	|ИЗ
	|	&ТоварыИЕдиницыИзмеренияПоКонтрагентам КАК ТоварыИЕдиницыИзмеренияПоКонтрагентам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварНаименование,
	|	ЕдиницаИзмеренияКод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмерения,
	|	ТоварыПоКонтрагентам.Товар,
	|	КлючиАналитики.КлючАналитикиСоответствия,
	|	МАКСИМУМ(ТоварыПоКонтрагентам.КоэффициентПересчета) КАК КоэффициентПересчета
	|ИЗ
	|	ТоварыПоКонтрагентам КАК ТоварыПоКонтрагентам
	|		ЛЕВОЕ СОЕДИНЕНИЕ КлючиАналитики КАК КлючиАналитики
	|		ПО ТоварыПоКонтрагентам.ТоварНаименование = КлючиАналитики.ТоварНаименование
	|			И ТоварыПоКонтрагентам.ЕдиницаИзмеренияКод = КлючиАналитики.ЕдиницаИзмеренияКод
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоКонтрагентам.Контрагент,
	|	ТоварыПоКонтрагентам.ЕдиницаИзмерения,
	|	ТоварыПоКонтрагентам.Товар,
	|	КлючиАналитики.КлючАналитикиСоответствия";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("КлючиАналитики", КлючиАналитикиУчетаСоответствий);
	Запрос.УстановитьПараметр("ТоварыИЕдиницыИзмеренияПоКонтрагентам", ТаблицаТоваровИЕдиницИзмерений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.СоответствиеНаименованийИСсылокЕдиницИзмеренийИТоваров.СоздатьЗаписьСоответствия(Выборка);		
		
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Процедура ЗаполнитьРеквизитыКонтрагента(Знач ОбъектЭСФ, Знач ПоставщикиСтрока) Экспорт
		
	ЭСФСерверПереопределяемый.ЗаполнитьРеквизитыКонтрагента(ОбъектЭСФ, ПоставщикиСтрока);
		
КонецПроцедуры

Функция НайтиДоговорыПоставкиПоДаннымЭСФ(Знач ОбъектЭСФ, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.НайтиДоговорыПоставкиПоДаннымЭСФ(ОбъектЭСФ, СтрокаКонтрагент, ИмяТаблицыКонтрагента);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЭСФ ПО ТОВАРАМ ИЗ ПЕРЕЧНЯ

Функция ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, Знач СсылкаСчетФактура, Знач Заполнить)
	
	Возврат ЭСФСерверПереопределяемый.ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, СсылкаСчетФактура, Заполнить);
	
КонецФункции

Процедура ПоказатьСообщения(Знач МассивСообщений, Знач СсылкаСчетФактура)
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговоеСообщение = НСтр("ru = 'Заполнение электронного счета-фактуры по документу ""%1"":
                              |
                              |%2'");
							 
	ВсеСообщения = "";
	Для Каждого Сообщение Из МассивСообщений Цикл
		ВсеСообщения = ВсеСообщения + СокрЛП(Сообщение) + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ИтоговоеСообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИтоговоеСообщение, СсылкаСчетФактура, ВсеСообщения);	
	ИтоговоеСообщение = СокрЛП(ИтоговоеСообщение) + Символы.ПС;
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ИтоговоеСообщение, СсылкаСчетФактура);
	
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьКодТНВЭД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)
	
	// Заполнить КодТНВЭД.
	Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) Тогда
		КодТНВЭД = ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД;	
	ИначеЕсли НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда
		КодТНВЭД = ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД;
	Иначе
		КодТНВЭД = "";	
	КонецЕсли;
	
	// Показать сообщение, что код ТН ВЭД не заполнен.
	Если ВерсияЭСФ = 1 Тогда
		
		Если Заполнить Тогда
			СтрокаТовары.КодТНВЭД = КодТНВЭД;
		КонецЕсли;
		
		Если ПустаяСтрока(КодТНВЭД) Тогда
		
			Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
			 ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ВТО
			 ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС Тогда				 
			 
				Сообщение = НСтр(
				"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
				|Код ТН ВЭД необходимо обязательно указывать если товар был импортирован и/или входит в Перечень товаров с пониженной ставкой пошлин.'");
				
				Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень Тогда
					Причина = НСтр("ru = 'входит в перечень товаров с пониженной ставкой пошлин'");
				Иначе
					Причина = НСтр("ru = 'был импортирован на территорию РК'");
				КонецЕсли;
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки,
					Причина);
					
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если Заполнить Тогда
			//В версии ЭСФ - 2 код ТНВЭД заполняется только в тех случаях, когда он д.б. обязательно заполнен
			//поэтому если в предыдущих процедурах данный код заполнился, то здесь сначала очистим его.
			//Очистка вынесена в данную процедуру преднамеренно, т.е. если учет оп ГТД не ведется, то КОД заполняется всегда из спр. Номерклатура, без каких-либо условий
			СтрокаТовары.КодТНВЭД = "";
		КонецЕсли;
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;

		Если ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" 
			Или ПризнакПроисхождения = "3" Или (ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС) ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
			
			Если Заполнить Тогда
				СтрокаТовары.КодТНВЭД = КодТНВЭД;
			КонецЕсли;
						
			Если ПустаяСтрока(КодТНВЭД) И (ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" 
			Или ПризнакПроисхождения = "3" Или (ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС)) Тогда
				
				Сообщение = НСтр(
				"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
				|Код ТН ВЭД необходимо обязательно указывать если товар отностися к Признаку ""1"", ""2"", ""3"" а так же ""4"" при экспорте товаров в государства-члены ЕАЭС.'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
			
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНомерГТД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, СтранаНазначенияЕАЭС, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)

	Если ВерсияЭСФ = 1 Тогда
		Если Заполнить Тогда
			СтрокаТовары.НомерЗаявленияВРамкахТС = СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата);
		КонецЕсли;
		
		// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
		Если ПустаяСтрока(СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата)) Тогда
			
			Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ТС
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ВТО
				ИЛИ ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС Тогда				 
				
				Сообщение = НСтр(
				"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить колонку №14 в таблице ""Товары"".
				|Колонка №14 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
				|Колонку №14 в таблице ""Товары"" необходимо заполнять если товар входит в перечень или был ввезен из других стран.'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
				
				МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
		Если ПризнакПроисхождения = "1" Или (ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС) ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда 
			
			Если Заполнить Тогда
				СтрокаТовары.НомерЗаявленияВРамкахТС = СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата);
			КонецЕсли;

			// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
			Если ПустаяСтрока(СокрЛП(ВыборкаПоТоварамИзПеречня.НомерГТДНомерЗаявленияНомерСертификата)) И (ПризнакПроисхождения = "1" Или (ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС)) Тогда
				
				Сообщение = НСтр(
				"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить колонку №15 в таблице ""Товары"".
				|Колонка №15 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
				|Колонку №15 в таблице ""Товары"" необходимо обязательно заполнять, если товар отностися к Признаку ""1"", а так же ""3"" при экспорте товаров в государства-члены ЕАЭС.'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки);
				
				МассивСообщений.Добавить(Сообщение);
					
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
				
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНомерСтрокиГТД(ВыборкаПоТоварамИзПеречня, СтрокаТовары, ВерсияЭСФ, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)
	
	Если ВерсияЭСФ = 1 Тогда
		
		Если ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень
				 И (ВыборкаПоТоварамИзПеречня.СпособПроисхожденияТовара <> Перечисления.СпособыПроисхожденияТоваров.ТС) Тогда
					
			Если Заполнить Тогда
				СтрокаТовары.ДополнительныеДанные = ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД;
			КонецЕсли;
			
			// Показать сообщение, что НомерСтрокиГТД не заполнен.
			Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД) Тогда				 
					
					Сообщение = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД в таблице ""Товары"".
					|Номер строки ГТД необходимо заполнять, так как данный товар входит в перечень товаров с пониженной ставкой пошлин и был импортирован на территорию РК.'");
				
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
					МассивСообщений.Добавить(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
		
		Если ПризнакПроисхождения = "1" ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно)  Тогда
			Если Заполнить Тогда
				СтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД;
			КонецЕсли;
			
			// Показать сообщение, что НомерСтрокиГТД не заполнен.
			Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.НомерСтрокиГТД) И ПризнакПроисхождения = "1" Тогда
				
					Сообщение = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД или Заявления о ввозе товаров в таблице ""Товары"".
					|Номер строки необходимо заполнять, так как данный товар относится к Признаку ""1"".'");
				
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						ВыборкаПоТоварамИзПеречня.Товар,
						ВыборкаПоТоварамИзПеречня.НомерСтроки);
					
					МассивСообщений.Добавить(Сообщение);
			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;			
			
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьПризнакПроисхождения(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, ПараметрыЭСФ, МассивСообщений)
	
	Если ПараметрыЭСФ.Свойство("ПерезаполнитьПризнакПроисхождения") Тогда
		ПерезаполнитьПризнакПроисхождения = ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения;
	Иначе
		ПерезаполнитьПризнакПроисхождения = Ложь;
	КонецЕсли;
	
	Если ПараметрыЭСФ.Свойство("СпособОпределенияВхожденияВПеречень") Тогда
		СпособОпределенияВхожденияВПеречень = ПараметрыЭСФ.СпособОпределенияВхожденияВПеречень;
	Иначе
		СпособОпределенияВхожденияВПеречень = Неопределено;
	КонецЕсли;
	
	ПризнакПроисхождения = "";
	
	Если Заполнить Тогда
		
		ПризнакПроисхождения = ВыборкаПоТоварамИзПеречня.ПризнакПроисхождения;
				
		Если ПустаяСтрока(ПризнакПроисхождения) Тогда
			
			Если ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) <> Тип("СправочникСсылка.Номенклатура") Тогда
				ПризнакПроисхождения = "5";	
			Иначе
				Если ВыборкаПоТоварамИзПеречня.Услуга Тогда
					ПризнакПроисхождения = "6";
				Иначе
					ПризнакПроисхождения = "5";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;  		
		
		СтрокаТовары.ПризнакПроисхождения = ПризнакПроисхождения;
		
		Если ПерезаполнитьПризнакПроисхождения Тогда
			//Перезаполним Признаки происхождения в соответствии с вхождением в актуальный перечень
			
			Если СпособОпределенияВхожденияВПеречень = Неопределено ИЛИ СпособОпределенияВхожденияВПеречень = 0 ТОгда
				НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень);
			Иначе
				Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) Тогда
					НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ВыборкаПоТоварамИзПеречня.ОсновнойКодВходитВПеречень);
				ИначеЕсли НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда
					НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ВыборкаПоТоварамИзПеречня.ЗапаснойКодВходитВПеречень);
				Иначе
					НовыйПризнакПроисхождения = ПризнакПроисхождения;
				КонецЕсли;
			КонецЕсли;	
				
			Если ПризнакПроисхождения <> НовыйПризнакПроисхождения Тогда
				
				Сообщение = НСтр("ru = 'Для товара ""%1"" (номер строки: %2) был переопределен Признак происхождения с ""%3"" (указан в источнике происх.) на ""%4"" (определен по тек. вхождению в товара в Перечень).'");
				
				Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
					Сообщение,
					ВыборкаПоТоварамИзПеречня.Товар,
					ВыборкаПоТоварамИзПеречня.НомерСтроки,
					ПризнакПроисхождения,
					НовыйПризнакПроисхождения);
				
				МассивСообщений.Добавить(Сообщение);
			КонецЕсли;
			
			СтрокаТовары.ПризнакПроисхождения = НовыйПризнакПроисхождения;	
		КонецЕсли;
		
	КонецЕсли;
	
	//Если НЕ Заполнить Тогда
	//	
	//	Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) ИЛИ НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда 
	//		
	//		ВходитВПереченьПоМакету = Ложь;
	//		Если НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ОсновнойКодТНВЭД) Тогда
	//			ВходитВПереченьПоМакету = ВыборкаПоТоварамИзПеречня.ОсновнойКодВходитВПеречень;	
	//		ИначеЕсли НЕ ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ЗапаснойКодТНВЭД) Тогда
	//			ВходитВПереченьПоМакету = ВыборкаПоТоварамИзПеречня.ЗапаснойКодВходитВПеречень;	
	//		КонецЕсли;
	//		
	//		ЕстьРасхождения = (ВходитВПереченьПоМакету <> ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень);
	//		
	//		Если ЕстьРасхождения Тогда
	//			Сообщение = НСтр(
	//			"ru = 'Для товара ""%1"" (номер строки: %2) выявлено расхождение - по данным регистра ""Товары с пониженной ставкой"" данный товар %3 в Перечень, но Код ТНВЭД %4 в Перечень.'");
	//			
	//			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			Сообщение,
	//			ВыборкаПоТоварамИзПеречня.Товар,
	//			ВыборкаПоТоварамИзПеречня.НомерСтроки,
	//			?(ВыборкаПоТоварамИзПеречня.ТоварВходитВПеречень, "входит", "не входит"),
	//			?(ВходитВПереченьПоМакету, "входит", "не входит"));
	//			
	//			МассивСообщений.Добавить(Сообщение);
	//		КонецЕсли;	
	//		
	//	КонецЕсли;	
	//	
	//КонецЕсли;

	// Показать сообщение, что ПризнакПроисхождения не заполнен.
	Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ПризнакПроисхождения) 
		И ((ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) = Тип("СправочникСсылка.Номенклатура")
		И Не ВыборкаПоТоварамИзПеречня.Услуга) ИЛИ ТипЗнч(ВыборкаПоТоварамИзПеречня.Товар) <> Тип("СправочникСсылка.Номенклатура"))  Тогда
		
		Сообщение = НСтр(
		"ru = 'Для товара ""%1"" (номер строки: %2) не указан Признак в источнике происхождения либо источник происхождения не определен.
		|По умолчанию графа ""Признак происхождения"" заполнен значением ""5"", так как данная графа обязательна к заполнению. 
		|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
	
		Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
			Сообщение,
			ВыборкаПоТоварамИзПеречня.Товар,
			ВыборкаПоТоварамИзПеречня.НомерСтроки);
		
		МассивСообщений.Добавить(Сообщение);
					
	КонецЕсли;
				
КонецПроцедуры

Процедура ТоварыИзПеречня_ЗаполнитьНаименованиеТовараВРамкахТС(ВыборкаПоТоварамИзПеречня, СтрокаТовары, Заполнить, МассивСообщений, ПараметрыЭСФ = Неопределено)
	
	ПризнакПроисхождения = СтрокаТовары.ПризнакПроисхождения;
	
	Если ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2" ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
		
		Если Заполнить Тогда
			СтрокаТовары.ТоварНаименованиеВРамкахТС = ВыборкаПоТоварамИзПеречня.ТоварНаименованиеВРамкахТС;
		КонецЕсли;			
				
		// Показать сообщение, что Наименование товара в рамках ТС не заполнено.
		Если ПустаяСтрока(ВыборкаПоТоварамИзПеречня.ТоварНаименованиеВРамкахТС) И (ПризнакПроисхождения = "1" Или ПризнакПроисхождения = "2") Тогда
			
			Сообщение = НСтр(
			"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить Наименование в соответствии с Декларацией на товары или Заявлением о ввозе товаров.
			|Данная графа подлежит обязательному заполнению по товарам, относящимся к Признакам ""1"", ""2"".'");
		
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				Сообщение,
				ВыборкаПоТоварамИзПеречня.Товар,
				ВыборкаПоТоварамИзПеречня.НомерСтроки);
			
			МассивСообщений.Добавить(Сообщение);
						
		КонецЕсли;
	Иначе
		Если Заполнить Тогда
			СтрокаТовары.ТоварНаименованиеВРамкахТС = "";
		КонецЕсли;	
	КонецЕсли;	
	            				
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с источниками происхождения

//Процедура заполняет пустые признаки происхождения по умолчанию в документах
//
// Параметры:
//  ДокументОбъект - ДокументОбъект документ для заполнения признаков происхождения.
//  ИмяТЧ - Строка - Имя Табличной части для заполнения признаков происхождения.
//  ЗаполнятьВсе - Булево - Флаг заполнения признака происхождения во всех строка табличной части,
//    если значение "Истина" - признак будет заполнен во всех строках табличной части,
//    если "Ложь" только в тех строках где признак не указан.
//
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ДокументОбъект, ИмяТЧ, ЗаполнятьВсе) Экспорт
	
	ЭСФСерверПереопределяемый.ЗаполнитьПустыеПризнакиПроисхождения(ДокументОбъект, ИмяТЧ, ЗаполнятьВсе);
	
КонецПроцедуры

//Функция возвращает вспомогательную таблицу для дальнейшего заполнения признака происхождения
//
// Параметры:
//  МассивСтрокТоваров - массив строк табличной части Товары документа ЭСФ.
//
Функция ПолучитьТаблицуТоваровСПониженнойСтавкой(МассивСтрокТоваров, Дата) Экспорт
	
	ТаблицаТоваровСПониженнойСтавкой = Новый ТаблицаЗначений;
	
	ТаблицаТоваровСПониженнойСтавкой.Колонки.Добавить("ПониженнаяСтавка", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваровСПониженнойСтавкой.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6)));
	
	СписокТоваров = Новый Массив;
	Для каждого Элемент Из МассивСтрокТоваров Цикл
		СписокТоваров.Добавить(Элемент.Товар);
	КонецЦикла;
	
	Если СписокТоваров.Количество() = 0 Тогда
		Возврат ТаблицаТоваровСПониженнойСтавкой;
	КонецЕсли;
	
	ПереченьИзъятий = ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий();
		
	Для каждого Элемент Из МассивСтрокТоваров Цикл
		Если ПереченьИзъятий.Найти(Элемент.Товар,"Товар") <> Неопределено Тогда
			НоваяСтрока = ТаблицаТоваровСПониженнойСтавкой.Добавить();
			НоваяСтрока.НомерСтроки = Элемент.НомерСтроки;
			НоваяСтрока.ПониженнаяСтавка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаТоваровСПониженнойСтавкой;
	
КонецФункции

//Функция возвращает признак происхождения по умолчанию
//
// Параметры:
//  ПониженнаяСтавка - Булево.
//  СпособПроисхождения - Перечисление.СпособыПроисхожденияТоваров.
//
Функция ПолучитьПризнакПроисхождения(ПониженнаяСтавка,СпособПроисхождения) Экспорт
	
	Если Не ЗначениеЗаполнено(СпособПроисхождения) Тогда
		Возврат "5";
	ИначеЕсли СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.СТ1 Тогда
		Если ПониженнаяСтавка Тогда
			Возврат "3";
		Иначе
			Возврат "4";
		КонецЕсли;
	ИначеЕсли СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС
				ИЛИ СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ВТО
				ИЛИ СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ТС Тогда
		Возврат "1";
	Иначе
		Возврат "5";
	КонецЕсли; 
	
КонецФункции

Функция ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ТоварВходитВПеречень) Экспорт
	
	НовыйПризнакПроисхождения = ПризнакПроисхождения;
	
	Если ТоварВходитВПеречень Тогда
		Если ПризнакПроисхождения = "2" Тогда
			НовыйПризнакПроисхождения = "1";			
		ИначеЕсли ПризнакПроисхождения = "4" Тогда
			НовыйПризнакПроисхождения = "3";
		КонецЕсли;
	Иначе
		Если ПризнакПроисхождения = "1" Тогда
			НовыйПризнакПроисхождения = "2";
		ИначеЕсли ПризнакПроисхождения = "3" Тогда
			НовыйПризнакПроисхождения = "4";
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат НовыйПризнакПроисхождения;		
	
КонецФункции	

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЭСФ_ВС

Функция ОбъединитьРезультатыПолученияСтатусовИОшибок(Соответствие1, Соответствие2)
		
	Для Каждого Элемент из Соответствие2 Цикл
		ЭлементСоответствие1 = Соответствие1.Получить(Элемент.Ключ);
		Если ЭлементСоответствие1 <> Неопределено 
			И ТипЗнч(Элемент.Значение) = Тип("Структура") 
			И Элемент.Значение.Свойство("Ошибки")
			И Элемент.Значение.Ошибки.Количество() > 0 Тогда
			ЭлементСоответствие1.Вставить("Ошибки", Элемент.Значение.Ошибки);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие1;	
КонецФункции

#КонецОбласти 

//++ НЕ ЭСФ

#Область ВС

#Область ИменаВебСервисов

Функция ИмяСервисаVersionServiceVS() Экспорт
	Возврат "VstoreVersionService";	
КонецФункции

Функция ИмяСервисаSessionServiceVS() Экспорт
	Возврат "VstoreSessionService";                                        	
КонецФункции

Функция ИмяСервисаUFormWebService() Экспорт
	Возврат "UFormWebService";	
КонецФункции

Функция ИмяСервисаTaxPayerStoreService() Экспорт
	Возврат "TaxpayerStoreWebService";                                        	
КонецФункции

Функция АдресСервераAPIВС() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/vstore-ws/api1";	
КонецФункции

Функция ИмяСервисаDictWebServiceSoapBinding() Экспорт
	Возврат "DictWebService";                                        	
КонецФункции

Функция ИмяСервисаVstoreBalanceWebService() Экспорт
	Возврат "VstoreBalanceWebService";	
КонецФункции

#КонецОбласти 

#Область РаботаСXMLиXDTO

Функция ФабрикаUFORM_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаUFORM_XML_API_ЭЦП_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаUFORM_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryUFormXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаUFORM_XML_API_ЭЦП_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаUFORM_XML_API_ЭЦП_Версия1;
	
КонецФункции

Функция Фабрика_BalanceUpdates_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрика_queryBalanceUpdates_V1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаqueryBalanceUpdates_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryBalanceUpdatesXsdResponse.xsdList.xsd);
		КэшированнаяФабрика_queryBalanceUpdates_V1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрика_queryBalanceUpdates_V1;
	
КонецФункции

#КонецОбласти 

#Область ОткрытиеЗакрытиеСессии
         
// См. ВССервер.ОткрытьСессию()
Функция ОткрытьСессиюВС(Знач ПрофильИСЭСФ, ВерсияВС = Неопределено) Экспорт
	
	Если ВерсияВС = Неопределено Тогда
		ВерсияВС = "5.0.0";
	КонецЕсли;	
	
	// Проверим существует ли активная сессия у пользователя
	IDСессии = ЭСФСервер.ПолучитьСохраненныйИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "VS");
	Если ЗначениеЗаполнено(IDСессии) И СессияВСАктивна(IDСессии,ПрофильИСЭСФ, ВерсияВС) Тогда
		Возврат IDСессии;
	КонецЕсли;	
	
	// Если нет, откроем новую
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросВСCreateSession_Версия1");
	Иначе
		Макет = ПолучитьМакет("ЗапросВСCreateSession_Версия1");
	КонецЕсли;	
		
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	
	Если ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[businessProfileType]",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "<businessProfileType>[businessProfileType]</businessProfileType>",   ЭСФКлиентСервер.ТипПрофиляИСЭСФ(ДанныеПрофиляИСЭСФ.ТипПрофиляИСЭСФ));
	КонецЕсли; 
	
	ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапроса, ИмяСервисаSessionServiceVS(), , ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ИдентификаторСессии = ОтветXDTO.Body.createSessionResponse.sessionId;	
		
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в модуль Виртуального склада ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
		//ОшибкаОткрытияСессии = СтрЗаменить(ОшибкаОткрытияСессии, "%ТекстОшибки%", ИнформацияОбОшибке.ПодробноеПредставление);	 
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При входе в ВС ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОткрытьСессиюВС'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Идентификатор сессии: " + ИдентификаторСессии);
			
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "VS", ИдентификаторСессии);
	
	Возврат ИдентификаторСессии;
	
КонецФункции

// См. ВССервер.ЗакрытьСессию()
Процедура ЗакрытьСессиюВС(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияВС = Неопределено) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияВС = Неопределено Тогда
		ВерсияВС = "5.0.0";
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросВСCloseSession_Версия1");		
	Иначе
		Макет = ПолучитьМакет("ЗапросВСCloseSession_Версия1");		
	КонецЕсли;	
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.СертификатАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[tin]",             ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапроса, ИмяСервисаSessionServiceVS(), , );
	
	ЭСФСервер.СохранитьИдентификаторСессии(ПрофильИСЭСФ.ПрофильИСЭСФ.Ссылка, "VS", Неопределено);// очистка ID сессии
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюВС'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Закрыта сессия: " + ИдентификаторСессии);
			
	ИнформацияОбОшибке = Неопределено;
	Если ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗакрытьСессиюВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При закрытии сессии модуля ВС ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецПроцедуры

//	currentSessionStatusResponse type currentSessionStatusResponse
// 	status type sessionStatus - type string with restriction - enum { 'OK', 'CLOSED', 'NOT_FOUND' }
Функция ПолучитьСтатусСессииВС(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияВС = Неопределено) Экспорт
	СтатусСессии = Неопределено;	
	
	Если ПустаяСтрока(ИдентификаторСессии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("ЗапросВСCurrentSessionStatus");			
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Username]",        ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.ИмяАутентификации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Password]",        ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации);	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",       ИдентификаторСессии);
	
	ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапроса, ИмяСервисаSessionServiceVS(), , );
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессииВС'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Проверка статуса сессии: " + ИдентификаторСессии);
			
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СтатусСессии = ОтветXDTO.Body.currentSessionStatusResponse.status;	
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПроверитьСтатусСессииВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При проверке статуса сессии ВС ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;    	              	

	Возврат СтатусСессии;

КонецФункции

Функция СессияВСАктивна(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияВС = Неопределено) Экспорт
	СессияАктивна = Ложь;
	Если ВРЕГ(ПолучитьСтатусСессииВС(ИдентификаторСессии, ПрофильИСЭСФ, ВерсияВС)) = "OK" Тогда
		СессияАктивна = Истина;
	КонецЕсли;	
	
	Возврат СессияАктивна;
КонецФункции

#КонецОбласти

#Область ВыгрузкаХМЛ
	
// Возвращает XML строку, которую можно записать в файл, затем импортировать в ИС ВС.
//
// Параметры:
//  МассивЭДВС - Массив - Массив документов ВС, которые необходимо поместить в XML строку для импорта в ИС ВС.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйДокументВС.
//
// Возвращаемое значение:
//  Строка - Строка, которую можно записать в файл, затем импортировать в ИС ВС.
//  Если МассивЭДВС пустой или если есть документы, которые заполнены некорректно, то возвращается пустая строка.
//
Функция СоздатьXMLДляИмпортаВВС(Знач МассивЭДВС) Экспорт
	
	Если МассивЭДВС.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВсеДокументыЗаполненыКорректно = Истина;
	
	// проверим, что возвращает процедура ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()
	// тк данные об уполномоченном лице заполняются в XML файле
	Если НЕ ЗначениеЗаполнено(ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник()) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Обнаружены ошибки при проверке. Не удалось автоматически заполнить поле ""Уполномоченный сотрудник""'"));
		ВсеДокументыЗаполненыКорректно = Ложь;
	КонецЕсли;
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	//Для Каждого СсылкаЭДВС Из МассивЭДВС Цикл      //КС включить проверку докумета когда будет сделана для ВС
	//	
	//	РезультатПроверки = ПроверитьЭСФ(СсылкаЭДВС);		
	//	СообщитьОбнаруженыОшибки(СсылкаЭДВС, РезультатПроверки);
	//	
	//	Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
	//		ВсеДокументыЗаполненыКорректно = Ложь;	
	//	КонецЕсли;
	//	
	//КонецЦикла;	
	
	Если НЕ ВсеДокументыЗаполненыКорректно Тогда
		Возврат "";	
	КонецЕсли;
	
	//ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	//ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	//ХМЛ будем выгружать всегда по актуальной версии ИС ЭСФ
	ВерсияИСВС = АктуальнаяВерсияВС();
	
	
	// При выгрузке тип подписи принудительно устанавливается в значение "УполномоченноеЛицо",
	// т.к. при загрузке в ИС ЭСФ узел signatureType должен обязательно присутствовать и быть заполненным.
	// При отправке ЭСФ средствами ИС ЭСФ устанавливается корректное значение.
	ТипПодписиЭСФ = Перечисления.ТипыПодписиЭСФ.УполномоченноеЛицо;
	
	КоллекцияuFormXML = Неопределено;
	СоздатьИсходящиеUForm(МассивЭДВС, Ложь, ТипПодписиЭСФ, КоллекцияuFormXML, Неопределено, ВерсияИСВС);
	
	Если Найти(ВерсияИСВС, "5.0.0") <> 0 Тогда
		XML = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?><v:uFormContainer xmlns:v=""namespace.vstore"" xmlns:af=""namespace.abstractUForm"" xmlns:v1=""namespace.v1""><uFormSet>[uFormSet]</uFormSet></v:uFormContainer>";		


	КонецЕсли;	
	
	uFormSetXML = "";
	Для Каждого ЭлементКоллекции Из КоллекцияuFormXML Цикл
		uFormXML = ЭлементКоллекции.Значение;			
		uFormSetXML = uFormSetXML + uFormXML; 		
	КонецЦикла;	
	
	//Если Найти(ВерсияИСЭВС, "4.0.0") <> 0 Тогда
	//	// Добавить префикс к имени узлов invoice, т.к. это необходимо для импорта в ИС ЭСФ.
	//	invoiceSetXML = СтрЗаменить(invoiceSetXML, "<invoice>", "<v1:invoice>");
	//	invoiceSetXML = СтрЗаменить(invoiceSetXML, "</invoice>", "</v1:invoice>");	
	//КонецЕсли;
		
	XML = СтрЗаменить(XML, "[uFormSet]", uFormSetXML);
	
	Возврат XML;
	
КонецФункции

#КонецОбласти 

#Область ВерсииВС

////////////////////////////////////////////////////////////////////////////////
// ВЕРСИИ ИС ЭСФ

// См. ВССервер.ВерсияВС()
Функция ВерсияВС(ТекстОшибки) Экспорт
	
	Версия = Неопределено;
	
	ТекстЗапроса = ПолучитьМакет("ЗапросGetVersion").ПолучитьТекст();
	
	Попытка
		
		ОтветXML = ВыполнитьМетодВебСервисаПолучитьВерсиюВС(ТекстЗапроса, ИмяСервисаVersionServiceVS());
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда	
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			Версия = ОтветXDTO.Body.versionResponse.version;
			
			Если Найти(Версия, АктуальнаяВерсияВС()) = 0 Тогда
				ОтветXML = ВыполнитьМетодВебСервисаПолучитьВерсию(ТекстЗапроса, ИмяСервисаVersionService(),,Истина);
		 		ИнформацияОбОшибке = Неопределено;
				
				Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда	
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
					Версия = ОтветXDTO.Body.versionResponse.version;
				Иначе
					ТекстОшибки = ИнформацияОбОшибке.ПодробноеПредставление;
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			ТекстОшибки = ИнформацияОбОшибке.ПодробноеПредставление;
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Продолжать = Ложь;
		
	КонецПопытки;
	
	ТекстОшибки = СокрЛП(ТекстОшибки);
	
	Возврат Версия;
	
КонецФункции

// См. ВССервер.ПоддерживаемыеВерсииВС()
Функция ПоддерживаемыеВерсииВС() Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("5.0.0");
	МассивВерсий.Добавить("5.0.0-PILOT-VS");
	МассивВерсий.Добавить("5.0.0-PROD");
		
	Возврат МассивВерсий;
	
КонецФункции

Процедура ОбновитьВерсиюВС() Экспорт
	
	//Попытка
	//	ПараметрыВС = ВССервер.ПолучитьПараметрыЭСФ();
	//	
	//	//заполним актуальный номер версии ИС ЭСФ
	//	ПараметрыЭСФ.ВерсияИСЭСФ = "5.0.0";
	//	
	//	ЗаписьЖурналаРегистрации("Обновлена версия ИС ЭСФ в параметрах подключения к ИС ЭСФ.", УровеньЖурналаРегистрации.Информация);
	//	ЭСФСервер.СохранитьПараметрыЭСФ(ПараметрыЭСФ);		
	//	
	//Исключение
	//	ЗаписьЖурналаРегистрации("При попытке обновления версии ИС ЭСФ возникла ошибка:", УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
	//КонецПопытки;	
	
КонецПроцедуры

Функция АктуальнаяВерсияВС() Экспорт
	
	Возврат "5.0.0";
	
КонецФункции	

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаПолучитьВерсиюВС(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина) Экспорт
	
	ВерсияВебСервиса = "";
	
	// подключение к серверу
	ПараметрыПодключения = ВССервер.ПолучитьПараметрыПодключенияКСерверуВС();

	Если ПараметрыПодключения.СерверВС_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверВС_Адрес, 
			ПараметрыПодключения.СерверВС_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверВС_Адрес, 
			ПараметрыПодключения.СерверВС_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверВС_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ВС
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ВС возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ВС недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

#КонецОбласти 

#Область ОтправкаФормВС

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьЭДВСПоСтруктурнымЕдиницам(Знач МассивЭД, ОткрыватьСессиюФилиаломПолучателем = Ложь) Экспорт
		
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами) И &ОткрыватьСессиюФилиаломПолучателем
	               |			ТОГДА ВЫБОР КОГДА ЭлектронныйДокументВС.СтруктурноеПодразделениеПолучатель = &ПустоеПодразделение
				   |						ТОГДА ЭлектронныйДокументВС.ОрганизацияПолучатель
				   |						ИНАЧЕ ЭлектронныйДокументВС.СтруктурноеПодразделениеПолучатель КОНЕЦ
	               |		ИНАЧЕ ВЫБОР КОГДА ЭлектронныйДокументВС.СтруктурноеПодразделение = &ПустоеПодразделение
				   |						ТОГДА ЭлектронныйДокументВС.Организация
				   |						ИНАЧЕ ЭлектронныйДокументВС.СтруктурноеПодразделение КОНЕЦ
	               |		КОНЕЦ КАК СтруктурнаяЕдиница,
	               |	ЭлектронныйДокументВС.Ссылка КАК ЭД
	               |ИЗ
	               |	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	               |ГДЕ
	               |	ЭлектронныйДокументВС.Ссылка В(&МассивЭД)
	               |ИТОГИ ПО
	               |	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ОткрыватьСессиюФилиаломПолучателем", ОткрыватьСессиюФилиаломПолучателем);
	Запрос.УстановитьПараметр("ПустоеПодразделение", 				ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхЭД = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивЭД = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивЭД.Добавить(ВыборкаДетальныеЗаписи.ЭД);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхЭД.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивЭД);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указана организация:
			|%1'");
			
			СтрокаСписокЭД = "";
			Для Каждого СсылкаЭД Из СгруппированныйМассивЭД Цикл
				СтрокаСписокЭД = СтрокаСписокЭД + "- " + СсылкаЭД + Символы.ПС;
			КонецЦикла;
			СтрокаСписокЭД = СокрЛП(СтрокаСписокЭД);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокЭД);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхЭД;
	
КонецФункции

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеUForm(
	Знач МассивЭД, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписи,
	КоллекцияUFormXML, 
	КоллекцияSignedContentXML,
	ВерсияВС
	) Экспорт
	
	СоздатьИсходящиеUForm_ВерсияАПИ1(МассивЭД, 
			УстанавливатьПодпись, 
			ТипПодписи, 
			КоллекцияUFormXML, 
			КоллекцияSignedContentXML,
			ВерсияВС
			);
			
КонецПроцедуры

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеUForm_ВерсияАПИ1(
	Знач МассивЭД, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭДВС, 
	КоллекцияUFormXML, 
	КоллекцияSignedContentXML,
	ВерсияВС) Экспорт
	
	КоллекцияUFormXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаUForm_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаЭД Из МассивЭД Цикл		
		
		// Чтобы при отправке ЭСФ не выполнять запись дважды:
		// При создании ЭСФ заполняются некоторые реквизиты ЭСФ, но ЭСФ не записывается.
		// При отправке ЭСФ данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись ЭСФ в методе ОтправитьИсходящиеInvoice().
		ОбъектЭД = СсылкаЭД.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		ОбъектЭД.ТипПодписи = ТипПодписиЭДВС;
		
		UFormXDTO = НовыйUForm(ОбъектЭД, Фабрика, "UFormV1", ВерсияВС);
				
		UFormXML = ЭСФСервер.СтрокаXMLИзОбъектаXDTO(UFormXDTO, "UForm", Фабрика);
		
		//=========
		UFormXML = СтрЗаменить(UFormXML, "<UForm xmlns=""namespace.v1"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">", "<v1:uForm xmlns:a=""namespace.abstractUForm"" xmlns:v1=""namespace.v1"">");
		
		// Префикс версии		
		UFormXML = СтрЗаменить(UFormXML, "</UForm>", "</v1:uForm>");		
		
		//временно - разобраться
		UFormXML = СтрЗаменить(UFormXML, "xsi:type=""xs:string""", "");		
		UFormXML = СтрЗаменить(UFormXML, "xmlns:d2p1=""namespace.v1""", "");		
		UFormXML = СтрЗаменить(UFormXML, "xmlns:d2p1=""namespace.abstractUForm""", "");
		UFormXML = СтрЗаменить(UFormXML, " xmlns="""" ", "");		
		UFormXML = СтрЗаменить(UFormXML, "xmlns=""namespace.abstractUForm""", "");
		
		//Для отправки через API структура обернута в <uttnBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			
			UFormHashXML = UFormXML;
			КоллекцияSignedContentXML.Вставить(СсылкаЭД, UFormHashXML);
			
			//Для отправки через API добавляем обертку <uttnBody>
			UFormXML = "<uFormBody><![CDATA[" + UFormXML + "]]></uFormBody>";
						
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭДВС);
			UFormXML = "<uFormInfo>" + UFormXML + "<version>UFormV1</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType></uFormInfo>";
			
		КонецЕсли;
		                                                    		
		КоллекцияUFormXML.Вставить(СсылкаЭД, UFormXML);
	КонецЦикла;
	
КонецПроцедуры

// Запись изменений в реквизитах ЭСФ после их отправки на сервер
Процедура ЗаписатьИзмененияЭДПослеОтправкиПакета(РезультатОтправки, КоллекцияПодписей)
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл		
		ЭД = ЭлементРезультата.Ключ.ПолучитьОбъект();
		
		ЭД.Идентификатор = ЭлементРезультата.Значение.Идентификатор;
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		//Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
		//	ЭСФ.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		//Иначе
		//	ЭСФ.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		//КонецЕсли;
		ЭД.ЭЦП = КоллекцияПодписей[ЭлементРезультата.Ключ];
		ЭД.ТипПодписи = ЭлементРезультата.Значение.ТипПодписи;
		
		Если ЭлементРезультата.Значение.Ошибки = Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементРезультата.Значение.Идентификатор) Тогда
				ЭД.Ошибки.Очистить();
			КонецЕсли;
		Иначе
			ЭД.Ошибки.Очистить();
			Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
				ОшибкиСтрока = ЭД.Ошибки.Добавить();
				ОшибкиСтрока.Текст = Ошибка.Текст;
				ОшибкиСтрока.Поле = Ошибка.Поле;
			КонецЦикла;
		КонецЕсли;
		
		// Очистить поля ЭД, которые будут заполнены после успешного приема в ИС ЭСФ.
		//ЭД.РегистрационныйНомер = "";
		//ЭД.Статус = Перечисления.СтатусыЭСФ.ПустаяСсылка();
		//ЭД.ПользовательскийСтатус = Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка();
		
		ЭД.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		ЭД.Записать();
		
		//ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(ЭСФ.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьПакетИсходящихUttn(ВерсияВС, Знач КоллекцияUttnXMLПакета, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
		
	Если ИдентификаторСессии = Неопределено Тогда
		ТекстОшибки = "";
		
		Попытка
			ИдентификаторСессии = ВССервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗакрытьСессию = Истина;		
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	uFormSet = "";
	Для Каждого ЭлементКоллекции Из КоллекцияUttnXMLПакета Цикл
		uFormXML = ЭлементКоллекции.Значение;
		ЭЦП = КоллекцияПодписей[ЭлементКоллекции.Ключ];
		uFormXML = СтрЗаменить(uFormXML, "[%ЭЦП%]", ЭЦП);		
		uFormSet = uFormSet + uFormXML + Символы.ПС; 		
	КонецЦикла;
	
	ОтветXML = ВыполнитьuploadUFormRequest(uFormSet, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.ОтправитьИсходящиеuForm'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Отправлен пакет документов для ВС (uForm)");
			
		РезультатОтправкиПакета = Новый Соответствие;                        		
		Для Каждого ЭлементКоллекции Из КоллекцияUttnXMLПакета Цикл
			uFormXML = ЭлементКоллекции.Значение;
			
			РезультатСтруктура = Новый Структура;
			
			// Удалим Секцию CDATA для разбора XML
			uFormXMLБезCDATA = СтрЗаменить(uFormXML, "<uFormBody><![CDATA[", "<uFormBody>");
			uFormXMLБезCDATA = СтрЗаменить(uFormXMLБезCDATA, "]]></uFormBody>", "</uFormBody>");	
			
			uFormXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(uFormXMLБезCDATA, ФабрикаXDTO);
			
			РезультатСтруктура.Вставить("Номер", uFormXDTO.uFormBody.uForm.number);
			РезультатСтруктура.Вставить("Дата", uFormXDTO.uFormBody.uForm.date);
			
			РезультатСтруктура.Вставить("ТипПодписи", ЭСФКлиентСервер.ТипПодписиИБ(uFormXDTO.signatureType));
			РезультатСтруктура.Вставить("ПринятаФорма", Ложь);
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатОтправкиПакета.Вставить(ЭлементКоллекции.Ключ, РезультатСтруктура);
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ЗаполнитьРезультатОтправкиИсходящихUForm(ОтветXDTO, "declinedList", РезультатОтправкиПакета);
		ЗаполнитьРезультатОтправкиИсходящихUForm(ОтветXDTO, "acceptedList", РезультатОтправкиПакета);
		
		ЗаписатьИзмененияЭДПослеОтправкиПакета(РезультатОтправкиПакета, КоллекцияПодписей);
				
		Если ЗакрытьСессию Тогда
			ВССервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОтправитьИсходящиеInvoice'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ВызватьИсключение НСтр("ru = 'При отправке исходящих ЭДВС возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьUTTN(ВерсияВС, Знач КоллекцияДанныеКоллекцииUttnXML, Знач КоллекцияПодписейЭДВС, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого СгруппированнаяUttnXML Из КоллекцияДанныеКоллекцииUttnXML Цикл
		
		СтруктурнаяЕдиница = СгруппированнаяUttnXML.Ключ;
		ДанныеКоллекцииUttnXML = СгруппированнаяUttnXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииUttnXML) = Тип("Соответствие") Тогда
			КоллекцияUttnXML = ДанныеКоллекцииUttnXML;
		Иначе
			КоллекцияUttnXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииUttnXML);
		КонецЕсли;
		
		ДанныеСтруктурнойЕдиницы 	= ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		ОткрытыйКлючЭЦП 			= ДанныеСтруктурнойЕдиницы.ОткрытыйСертификатBase64;
		КоллекцияПодписей 			= КоллекцияПодписейЭДВС.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		Результат = ОтправитьИсходящиеUTTN(ВерсияВС, КоллекцияUttnXML, КоллекцияПодписей, ДанныеПрофиляИСЭСФ, ОткрытыйКлючЭЦП);

	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьИсходящиеUTTN(ВерсияВС, Знач КоллекцияUttnXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено) Экспорт
	
	ПредельныйРазмерПакетаИсходящих = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияUttnXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящих;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеUTTN", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));

	РезультатОтправки = Новый Соответствие;
	// Сформируем пакеты на отправку с учетом предельного размера пакета
	СчетчикПакета = 0;
	НомерПакета = 0;
	КоллекцияUttnXMLПакета = новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из КоллекцияUttnXML Цикл		
		СчетчикПакета = СчетчикПакета + 1;
		КоллекцияUttnXMLПакета.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		// Если это предельный размер пакета, то отправляем его и формируем новый
		Если (СчетчикПакета = ПредельныйРазмерПакетаИсходящих) ИЛИ (СчетчикПакета = ОбщийРазмерКолекцииНаОтправку) Тогда
			НомерПакета = НомерПакета + 1;
			
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Происходит отправка пакета электронных документов виртуального склада %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);	
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			РезультатОтправкиПакета = ОтправитьПакетИсходящихUttn(ВерсияВС, КоллекцияUttnXMLПакета, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии);
			КоллекцияUttnXMLПакета.Очистить();
			ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета);
					
			// уменьшим количество оставшихся документов
			ОбщийРазмерКолекцииНаОтправку = ОбщийРазмерКолекцииНаОтправку - СчетчикПакета;
			СчетчикПакета = 0;
		КонецЕсли;		
		
	КонецЦикла;
	
	МассивПринятых = Новый Массив;
	МассивОшибочных = Новый Массив;
	//небльшая информация об отправке
	Если РезультатОтправки.Количество() > 1 Тогда
		Для Каждого СтрокаРезультата Из РезультатОтправки Цикл
			Если СтрокаРезультата.Значение.ПринятаФорма Тогда
				МассивПринятых.Добавить(СтрокаРезультата.Ключ);
			Иначе
				МассивОшибочных.Добавить(СтрокаРезультата.Ключ);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	ТекстСообщения =  НСтр("ru = 'Отправка электронных документов виртуального склада завершена'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеUTTN", "Информация", , , ТекстСообщения);
	
	КоличествоПринятых = МассивПринятых.Количество();
	Если КоличествоПринятых > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Принято %1 ЭДВС из %2'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоПринятых, КоллекцияUttnXML.Количество());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеUTTN", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
	КоличествоОшибочных = МассивОшибочных.Количество();
	Если КоличествоОшибочных > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Отклонено %1 ЭДВС из %2'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КоличествоОшибочных, КоллекцияUttnXML.Количество());
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеUTTN", "Информация", , , ТекстСообщения);	
	КонецЕсли;
	
	// Обновим статусы отправленных ЭСФ, после завершения отправки всех пакетов
	ОбновитьДокументыЭДПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияВС);
	
	Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
		
		//Заполним массив ЭДВС и отправим запрос на получение идентификаторов товаров
		МассивЭДВСДляПолученияИдентификаторов = Новый Массив;
		Для Каждого Элемент Из РезультатОтправки Цикл
			МассивЭДВСДляПолученияИдентификаторов.Добавить(Элемент.Ключ);	
		КонецЦикла;
		
		ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭДВСДляПолученияИдентификаторов, ПрофильИСЭСФ, , Истина);
		
	КонецЕсли;	
	
	Возврат РезультатОтправки;
	
КонецФункции

Функция ВыполнитьuploadUFormRequest(Знач UttnSetXML, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияВС)
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросВСuploadUFormRequest_Версия1").ПолучитьТекст();	
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[uFormSet]", UttnSetXML);
	
	ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService(),,ВерсияВС); 	
	
	Если ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда		
		ИдентификаторСессии = ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияВС);
		ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);
		ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService(),,ВерсияВС); 
	КонецЕсли;
	
	Возврат ОтветXML;
	
КонецФункции

Процедура ОбновитьДокументыЭДПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияВС)
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ВССервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных ЭСФ. 
	МассивИдентификаторов = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторов.Добавить(Идентификатор);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При отправке исправленных ЭСФ, исправляемые ЭСФ, а также их дополнительные ЭСФ, 
	// автоматически становятся аннулированными в ИС ЭСФ.
	//
	// Для того, чтобы информация об аннулировании отобразилась в 1С, 
	// необходимо обновить статусы исправляемых ЭСФ и их дополнительных ЭСФ.
	
	//Назым - вернуться
	//Если ТипЗнч(ПрофильИСЭСФ.СтруктурнаяЕдиница) = Тип("ФиксированнаяСтруктура") Тогда
	//	СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	//Иначе
	//	СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница;	
	//КонецЕсли;
	//ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(СтруктурнаяЕдиница, МассивИдентификаторовЭСФ);
	
	ПредельныйРазмерПакета = 1000;
	КоличествоЭД = МассивИдентификаторов.Количество();
	СчетчикЭД = 0;
	МассивИдентификаторовДляОтправки = Новый Массив;
	
	Если КоличествоЭД > ПредельныйРазмерПакета Тогда
		
		Для Каждого СтрокаМассива Из МассивИдентификаторов Цикл
			
			СчетчикЭД = СчетчикЭД + 1;
			
			МассивИдентификаторовДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭД%ПредельныйРазмерПакета = 0 ИЛИ СчетчикЭД = КоличествоЭД) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных ЭСФ.
			ОбновитьСтатусыЭДВСПоИдентификаторам(МассивИдентификаторовДляОтправки,ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовДляОтправки.Очистить();
			
		КонецЦикла;
		
	Иначе

		// Выполнить обновление статусов отправленных ЭСФ.
		ОбновитьСтатусыЭДВСПоИдентификаторам(МассивИдентификаторов, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьUForm(Знач ЭД, Знач Фабрика, UForm, ВерсияУТТН)
	
	ЗаполнитьUForm_Версия1(ЭД, Фабрика, UForm);
	
КонецПроцедуры

Процедура ЗаполнитьUForm_Версия1(Знач ЭД, Знач Фабрика, UForm)
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	#Область РазделА_Общий
	UForm.date = Формат(ЭД.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	
	Если ЗначениеЗаполнено(ЭД.ПрефиксВидаДокумента) И ЗначениеЗаполнено(ЭД.НомерУчетногоДокумента) И ЗначениеЗаполнено(ЭД.НомерПакета) Тогда
		НомерДокумента =  ЭД.ПрефиксВидаДокумента + "_" + ЭД.НомерУчетногоДокумента + "_" + ЭД.НомерПакета;
	ИначеЕсли ЗначениеЗаполнено(ЭД.НомерУчетногоДокумента) Тогда
		НомерДокумента = Эд.НомерУчетногоДокумента;
		Если ЗначениеЗаполнено(ЭД.НомерПакета) Тогда
			НомерДокумента = НомерДокумента + "_" + ЭД.НомерПакета;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭД.ПрефиксВидаДокумента) Тогда
			НомерДокумента = ЭД.ПрефиксВидадокумента + "_" + НомерДокумента;
		КонецЕсли;
	Иначе
		НомерДокумента = ЭД.Номер;
	КонецЕсли;
	UForm.number = НомерДокумента;
	
	UForm.type = ВСКлиентСервер.ВидФормы_ИСЭСФ(ЭД.ТипФормы);
	
	Если ЭД.ТипФормы = Перечисления.ТипыФормВС.Списание ИЛИ ЭД.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Тогда
		UForm.writeOffReason = ВСКлиентСервер.ПричинаСписания_ИСЭСФ(ЭД.ПричинаСписания);
	КонецЕсли;
	Если ЭД.ТипФормы = Перечисления.ТипыФормВС.Детализация Тогда
		UForm.detailingType = ВСКлиентСервер.ТипДетализации_ИСЭСФ(ЭД.ВидДетализации);
	КонецЕсли;
	#КонецОбласти 
	
	#Область РазделВ_РеквизитыОтправителя
	sender = ЭСФСервер.НовоеСвойствоОбъектаXDTO(UForm, "sender", Фабрика);
	Если НЕ ПустаяСтрока(ЭД.ОтправительАдрес) Тогда
		sender.address = СокрЛП(ЭД.ОтправительАдрес);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.ОтправительНаименование) Тогда
		sender.name = СокрЛП(ЭД.ОтправительНаименование);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.ОтправительИдентификатор) Тогда
		sender.tin = СокрЛП(ЭД.ОтправительИдентификатор);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.СкладОтправительИдентификатор) Тогда
		sender.storeId = Строка(Формат(ЭД.СкладОтправительИдентификатор, "ЧН=0; ЧГ="))
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.СкладОтправительНаименование) Тогда
		sender.storeName = СокрЛП(ЭД.СкладОтправительНаименование);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.НомерДоговораСРПОтправитель) Тогда
		sender.agentDocNum = СокрЛП(ЭД.НомерДоговораСРПОтправитель);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.ДатаДоговораСРПОтправитель) Тогда
		sender.agentDocDate = СокрЛП(ЭД.ДатаДоговораСРПОтправитель);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область РазделС_РеквизитыПолучателя
	Если ЭД.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение 
		Или ЭД.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары 
		Или ЭД.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами
		Или ЭД.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта
		Тогда
		
		Если НЕ ПустаяСтрока(ЭД.ПолучательАдрес)
			ИЛИ НЕ ПустаяСтрока(ЭД.ПолучательНаименование)
			ИЛИ НЕ ПустаяСтрока(ЭД.ПолучательИдентификатор)
			ИЛИ ЗначениеЗаполнено(ЭД.СкладПолучательИдентификатор) 
			ИЛИ НЕ ПустаяСтрока(ЭД.СкладПолучательНаименование) Тогда

			recipient = ЭСФСервер.НовоеСвойствоОбъектаXDTO(UForm, "recipient", Фабрика);
			Если НЕ ПустаяСтрока(ЭД.ПолучательАдрес) Тогда
				recipient.address = СокрЛП(ЭД.ПолучательАдрес);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ЭД.ПолучательНаименование) Тогда
				recipient.name = СокрЛП(ЭД.ПолучательНаименование);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ЭД.ПолучательИдентификатор) Тогда
				recipient.tin = СокрЛП(ЭД.ПолучательИдентификатор);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ЭД.СкладПолучательИдентификатор) Тогда
				recipient.storeId = Строка(Формат(ЭД.СкладПолучательИдентификатор, "ЧН=0; ЧГ="));
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ЭД.СкладПолучательНаименование) Тогда
				recipient.storeName = СокрЛП(ЭД.СкладПолучательНаименование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Временное решение для физ. метки пока нет ответа от разработчиков
	Если ЭД.ТипФормы = Перечисления.ТипыФормВС.ФизическаяМетка Тогда
		recipient = ЭСФСервер.НовоеСвойствоОбъектаXDTO(UForm, "recipient", Фабрика);
		Если НЕ ПустаяСтрока(ЭД.ОтправительАдрес) Тогда
			recipient.address = СокрЛП(ЭД.ОтправительАдрес);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ЭД.ОтправительНаименование) Тогда
			recipient.name = СокрЛП(ЭД.ОтправительНаименование);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ЭД.ОтправительИдентификатор) Тогда
			recipient.tin = СокрЛП(ЭД.ОтправительИдентификатор);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ЭД.СкладОтправительИдентификатор) Тогда
			recipient.storeId = Строка(Формат(ЭД.СкладОтправительИдентификатор, "ЧН=0; ЧГ="));
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ЭД.СкладОтправительНаименование) Тогда
			recipient.storeName = СокрЛП(ЭД.СкладОтправительНаименование);
		КонецЕсли;
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(ЭД.НомерДоговораСРППолучатель) Тогда
		sender.agentDocNum = СокрЛП(ЭД.НомерДоговораСРППолучатель);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЭД.ДатаДоговораСРППолучатель) Тогда
		sender.agentDocDate = СокрЛП(ЭД.ДатаДоговораСРППолучатель);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область РазделЕ_Товары
	products = ЭСФСервер.НовоеСвойствоОбъектаXDTO(UForm, "products", Фабрика);
	
	СоответствиеРеквизитов = СоответствиеРеквизитовТоваровТипуФорм();
	
	ОбщаяСуммаТоваров = 0;
	Для Каждого ТоварыСтрока Из ЭД.ТоварыВС Цикл
		
			product = ЭСФСервер.НовыйЭлементСпискаXDTO(products.product, Фабрика);
			
			Если РеквизитТовараСоответствуетТипуФормы("canExport", UForm.type, СоответствиеРеквизитов) Тогда
				product.canExport = ТоварыСтрока.ВозможенЭкспорт;
			КонецЕсли;	
			
			Если РеквизитТовараСоответствуетТипуФормы("dutyTypeCode", UForm.type, СоответствиеРеквизитов) 
			 	И ЗначениеЗаполнено(ТоварыСтрока.ТипПошлины) Тогда
				product.dutyTypeCode = ВСКлиентСервер.ТпПошлины_ИСЭСФ(ТоварыСтрока.ТипПошлины); 
			КонецЕсли;

			Если РеквизитТовараСоответствуетТипуФормы("manufactureOrImportCountry", UForm.type, СоответствиеРеквизитов) Тогда 
				
				Если ЗначениеЗаполнено(ТоварыСтрока.СтранаПроисхожденияТовараКод) Тогда
					product.manufactureOrImportCountry = СокрЛП(ТоварыСтрока.СтранаПроисхожденияТовараКод);
				Иначе
					product.manufactureOrImportCountry = "00";
				КонецЕсли;
			КонецЕсли;

			Если РеквизитТовараСоответствуетТипуФормы("manufactureOrImportDocNumber", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
				product.manufactureOrImportDocNumber = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("name", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименование) Тогда
				product.name = ТоварыСтрока.ТоварНаименование;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("originCertificateDate", UForm.type, СоответствиеРеквизитов) 
				И ЗначениеЗаполнено(ТоварыСтрока.ДатаСертификатаПроисхождения) Тогда
				product.originCertificateDate = Формат(ТоварыСтрока.ДатаСертификатаПроисхождения, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("originCode", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.ПризнакПроисхождения) Тогда
				product.originCode = СокрЛП(ТоварыСтрока.ПризнакПроисхождения);
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("physicalLabel", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.ФизическаяМетка) Тогда
				product.physicalLabel = СокрЛП(ТоварыСтрока.ФизическаяМетка);
			КонецЕсли;
			
			Если ЭД.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта Тогда
				
				Если ЭД.ИсходныеТоварыВС.Количество() > 0 Тогда
					ДополнительныйИдентификатор = ЭД.ИсходныеТоварыВС[0].ДополнительныйИдентификатор;
					
					Если ЗначениеЗаполнено(ДополнительныйИдентификатор) Тогда
						product.productId = СокрЛП(Формат(ДополнительныйИдентификатор,"ЧН=0; ЧГ="));
					КонецЕсли;
				КонецЕсли;	
				
			ИначеЕсли РеквизитТовараСоответствуетТипуФормы("productId", UForm.type, СоответствиеРеквизитов)
					И ЗначениеЗаполнено(ТоварыСтрока.ДополнительныйИдентификатор) Тогда
				product.productId = СокрЛП(Формат(ТоварыСтрока.ДополнительныйИдентификатор,"ЧН=0; ЧГ="));
				
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("productNameInImportDoc", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименованиеВРамкахТС) Тогда
				product.productNameInImportDoc = ТоварыСтрока.ТоварНаименованиеВРамкахТС;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("productNumberInImportDoc", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) Тогда
				
				Если ТипЗнч(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) = Тип("Число") Тогда
					product.productNumberInImportDoc = Формат(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=");	
				Иначе
					product.productNumberInImportDoc = СтрЗаменить(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении, Символы.НПП, "");
				КонецЕсли;
				
			КонецЕсли; 		
			
			Если РеквизитТовараСоответствуетТипуФормы("tnvedCode", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
				product.tnvedCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("gsvsCode", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.СоставнойКодГСВС) Тогда
				product.gsvsCode = ТоварыСтрока.СоставнойКодГСВС;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("measureUnitCode", UForm.type, СоответствиеРеквизитов) 
				И НЕ ПустаяСтрока(ТоварыСтрока.ЕдиницаИзмеренияКод) Тогда
				product.measureUnitCode = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияКод);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТоварыСтрока.Количество) Тогда
				product.quantity = ТоварыСтрока.Количество;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("Price", UForm.type, СоответствиеРеквизитов) 
				И (ЗначениеЗаполнено(ТоварыСтрока.Цена) ИЛИ ТоварыСтрока.Цена = 0) Тогда
				product.Price = ТоварыСтрока.Цена;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("sum", UForm.type, СоответствиеРеквизитов) Тогда 
				product.sum  = ТоварыСтрока.Сумма;
			КонецЕсли;
			
			Если РеквизитТовараСоответствуетТипуФормы("markingCode", UForm.type, СоответствиеРеквизитов) 
				И ЗначениеЗаполнено(ТоварыСтрока.GTIN) Тогда
				product.markingCode  = ТоварыСтрока.GTIN;
			КонецЕсли;
			
			ОбщаяСуммаТоваров = ОбщаяСуммаТоваров + ТоварыСтрока.Сумма;
			Если ВССервер.ИспользоватьСНТ() Тогда
				Если РеквизитТовараСоответствуетТипуФормы("pinCode", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ПинКод) Тогда 
					product.pinCode  = ТоварыСтрока.ПинКод;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("spiritPercent", UForm.type, СоответствиеРеквизитов) 
					И ЗначениеЗаполнено(ТоварыСтрока.Крепость) Тогда 
					product.spiritPercent  = ТоварыСтрока.Крепость;
				КонецЕсли;
			КонецЕсли; 	
			
	КонецЦикла;	
	
	UForm.totalSum = ОбщаяСуммаТоваров;
	#КонецОбласти
	
	#Область РазделЕ_ИсходныеТовары
	Если ЭД.ТипФормы = Перечисления.ТипыФормВС.Детализация Тогда
		sourceProducts = ЭСФСервер.НовоеСвойствоОбъектаXDTO(UForm, "sourceProducts", Фабрика);
		ОбщаяСуммаИсходныхТоваров = 0;
		
		Для Каждого ТоварыСтрока Из ЭД.ИсходныеТоварыВС Цикл
			
			//Если ТоварыСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
				sourceProduct = ЭСФСервер.НовыйЭлементСпискаXDTO(sourceProducts.sourceProduct, Фабрика);
							
				Если РеквизитТовараСоответствуетТипуФормы("canExport", UForm.type, СоответствиеРеквизитов) Тогда
					sourceProduct.canExport = ТоварыСтрока.ВозможенЭкспорт;
				КонецЕсли;	
				
				Если РеквизитТовараСоответствуетТипуФормы("dutyTypeCode", UForm.type, СоответствиеРеквизитов) 
				 	И ЗначениеЗаполнено(ТоварыСтрока.ТипПошлины) Тогда
					sourceProduct.dutyTypeCode = ВСКлиентСервер.ТпПошлины_ИСЭСФ(ТоварыСтрока.ТипПошлины); 
				КонецЕсли;

				Если РеквизитТовараСоответствуетТипуФормы("manufactureOrImportCountry", UForm.type, СоответствиеРеквизитов) Тогда 
					
					Если ЗначениеЗаполнено(ТоварыСтрока.СтранаПроисхожденияТовараКод) Тогда
						sourceProduct.manufactureOrImportCountry = СокрЛП(ТоварыСтрока.СтранаПроисхожденияТовараКод);
					Иначе
						sourceProduct.manufactureOrImportCountry = "00";
					КонецЕсли;
				КонецЕсли;

				Если РеквизитТовараСоответствуетТипуФормы("manufactureOrImportDocNumber", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.НомерЗаявленияВРамкахТС) Тогда
					sourceProduct.manufactureOrImportDocNumber = СокрЛП(ТоварыСтрока.НомерЗаявленияВРамкахТС);
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("name", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименование) Тогда
					sourceProduct.name = ТоварыСтрока.ТоварНаименование;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("originCertificateDate", UForm.type, СоответствиеРеквизитов) 
					И ЗначениеЗаполнено(ТоварыСтрока.ДатаСертификатаПроисхождения) Тогда
					sourceProduct.originCertificateDate = Формат(ТоварыСтрока.ДатаСертификатаПроисхождения, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("originCode", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ПризнакПроисхождения) Тогда
					sourceProduct.originCode = СокрЛП(ТоварыСтрока.ПризнакПроисхождения);
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("physicalLabel", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ФизическаяМетка) Тогда
					sourceProduct.physicalLabel = СокрЛП(ТоварыСтрока.ФизическаяМетка);
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("productId", UForm.type, СоответствиеРеквизитов) 
					И ЗначениеЗаполнено(ТоварыСтрока.ДополнительныйИдентификатор) Тогда
					sourceProduct.productId = СокрЛП(Формат(ТоварыСтрока.ДополнительныйИдентификатор, "ЧН=0; ЧГ="));
					
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("productNameInImportDoc", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ТоварНаименованиеВРамкахТС) Тогда
					sourceProduct.productNameInImportDoc = ТоварыСтрока.ТоварНаименованиеВРамкахТС;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("productNumberInImportDoc", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении) Тогда
					sourceProduct.productNumberInImportDoc = ТоварыСтрока.НомерПозицииВДекларацииИлиЗаявлении;
				КонецЕсли; 		
				
				Если РеквизитТовараСоответствуетТипуФормы("tnvedCode", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.КодТНВЭД) Тогда
					sourceProduct.tnvedCode = СокрЛП(ТоварыСтрока.КодТНВЭД);
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("gsvsCode", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.СоставнойКодГСВС) Тогда
					sourceProduct.gsvsCode = ТоварыСтрока.СоставнойКодГСВС;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("measureUnitCode", UForm.type, СоответствиеРеквизитов) 
					И НЕ ПустаяСтрока(ТоварыСтрока.ЕдиницаИзмеренияКод) Тогда
					sourceProduct.measureUnitCode = СокрЛП(ТоварыСтрока.ЕдиницаИзмеренияКод);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТоварыСтрока.Количество) Тогда
					sourceProduct.quantity = ТоварыСтрока.Количество;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("Price", UForm.type, СоответствиеРеквизитов) 
					И ЗначениеЗаполнено(ТоварыСтрока.Цена) Тогда
					sourceProduct.Price = ТоварыСтрока.Цена;
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("sum", UForm.type, СоответствиеРеквизитов) Тогда 
					sourceProduct.sum  = ТоварыСтрока.Сумма;		
				КонецЕсли;
				
				Если РеквизитТовараСоответствуетТипуФормы("markingCode", UForm.type, СоответствиеРеквизитов) 
					И ЗначениеЗаполнено(ТоварыСтрока.GTIN) Тогда
					sourceProduct.markingCode  = ТоварыСтрока.GTIN;
				КонецЕсли;

				
			//КонецЕсли;	

			ОбщаяСуммаИсходныхТоваров = ОбщаяСуммаИсходныхТоваров + ТоварыСтрока.Сумма;

		КонецЦикла;	
		
		UForm.sourceTotalSum = ОбщаяСуммаИсходныхТоваров;
	КонецЕсли;	
	#КонецОбласти    
	
	Если (ЭД.ТипФормы = Перечисления.ТипыФормВС.Списание ИЛИ ЭД.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС)
		И ЗначениеЗаполнено(ЭД.Комментарий) Тогда
		UForm.comment = ЭД.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйUForm(Знач ЭД, Знач Фабрика, Знач ВерсияУТТН = "UFormV1", ВерсияВС)
	Если ВерсияУТТН = "UFormV1" Тогда
		ПространствоИмен = "namespace.v1";
	Иначе
		ПространствоИмен = "namespace.v2"
	КонецЕсли;	
		
	ТипUForm = Фабрика.Тип(ПространствоИмен, ВерсияУТТН);
	UForm = Фабрика.Создать(ТипUForm);
	
	ЗаполнитьUForm(ЭД, Фабрика, UForm, ВерсияУТТН);
	
	Возврат UForm;
	
КонецФункции

Процедура ЗаполнитьРезультатОтправкиИсходящихUForm(Знач ОтветXDTO, Знач ИмяЭлемента, Результат)
	
	resultSet = ОтветXDTO.Body.uploadUFormResponse[ИмяЭлемента];
	//standardResponseList = ЭСФСервер.ПолучитьСвойство(resultSet, "standardResponse", Неопределено);	
	
	//Если ИмяЭлемента = "declinedList" Тогда
	//	uploadUttnResult = ЭСФСервер.ПолучитьСвойство(resultSet, "uploadUttnResult", Неопределено);	
	//Иначе	
		uploadUttnResult = ЭСФСервер.ПолучитьСвойство(resultSet, "uploadUFormResult", Неопределено);	
	//КонецЕсли;	
	
	Если uploadUttnResult = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	uploadUttnResult = ЭСФСервер.СписокXDTOИзОбъектXDTO(uploadUttnResult);
	
	Для Индекс = 0 По uploadUttnResult.Количество() - 1 Цикл
		
		standardResponse = uploadUttnResult.Получить(Индекс);
		
		Для Каждого ЭлементРезультата Из Результат Цикл
			
			Если ЭлементРезультата.Значение.Номер = standardResponse.number 
			   И ЭлементРезультата.Значение.Дата = standardResponse.date Тогда
				
				ЭлементРезультата.Значение.ПринятаФорма = ?(ИмяЭлемента = "acceptedSet", Истина, Ложь);
				ЭлементРезультата.Значение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "id", "");
				
				errors = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorList", Неопределено);
				Если errors <> Неопределено Тогда
					errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
					ЭлементРезультата.Значение.Ошибки = Новый Массив;
					Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
						error = errorsList.Получить(ИндексОшибки);
						ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
						// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
						// с сервера на клиент приводи к ошибке мутабельного значения.
						Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
							ОшибкаПоле = "";
						КонецЕсли;
						ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
						Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
						ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция ПолучитьМассивЭДВСПоИмпорту(Знач МассивЭД) Экспорт
		
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭДВС.Ссылка КАК ЭД,
				   |	ЭДВСТоварыВС.НомерЗаявленияВРамкахТС КАк РегНомер
	               |ИЗ
	               |	Документ.ЭлектронныйДокументВС КАК ЭДВС
				   |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭДВСТоварыВС
				   |		ПО ЭДВС.Ссылка = ЭДВСТоварыВС.Ссылка
				   |			И (ЭДВСТоварыВС.НомерСтроки = 1)
				   |	
				   |ГДЕ 
				   |	ЭДВС.Ссылка В (&МассивЭД)
				   |	И ЭДВС.ТипФормы = &ТипФормыИмпорт 
				   |	И ЭДВС.Дата >= &ДатаПереходаНаРежимИдентификации
				   |";
				   
	ДатаНачалаУчетаПоИД = НачалоДня(ДатаНачалаУчетаПоИдентификаторам());
	Запрос.УстановитьПараметр("ДатаПереходаНаРежимИдентификации", ДатаНачалаУчетаПоИД);
	Запрос.УстановитьПараметр("ТипФормыИмпорт", Перечисления.ТипыФормВС.ДекларацияНаТовары);
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		//"вычленим" Дату импортного документа из регистрационного номера
		ДатаДокументаПоИмпорту = ВСКлиентСервер.ПолучитьДатуИзРегНомера(Выборка.РегНомер);
		
		Если ДатаДокументаПоИмпорту >= ДатаНачалаУчетаПоИД Тогда
			МассивДокументов.Добавить(Выборка.ЭД);
		КонецЕсли;		
		
	КонецЦикла; 
				   
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти 

#Область ПолучениеФормВС

// См. ЭСФСервер.ПолучитьНовыеЭСФ()
Функция ПолучитьНовыеУТТН(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;	                                      	
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
	ТолькоСоздатьОбновитьФайлы = ?(ПараметрыВыгрузки.Свойство("ТолькоСоздатьОбновитьФайлы"), ПараметрыВыгрузки.ТолькоСоздатьОбновитьФайлы, Ложь);
	                                      	
	СообщениеПользователя = Новый СообщениеПользователю;

	ПараметрыЭСФ = ВССерверПовтИсп.ПолучитьПараметрыЭДВС();
	ВерсияИСВС = Неопределено;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начата синхронизация с ВС.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	НаправлениеПустаяСсылка = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка");
	//Исходящий = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");	
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;		
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка); 				
		
		ПараметрыМетодаЭДВС = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUFormUpdates"), НаправлениеПустаяСсылка);	
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаЭДВС, , ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ВСВызовСервера.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияИСВС);
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивЭДВСДляПолученияИдентификаторовТоваров = Новый Массив(); // накапливаем массив ссылок ЭДВС для последующего получения идентификаторов товаров
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение новых и измененных документов ВС. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхУТТН(СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСВС, ПараметрыМетодаЭДВС, МассивЭДВСДляПолученияИдентификаторовТоваров);					
		КонецЦикла;
		
		Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
			ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭДВСДляПолученияИдентификаторовТоваров, СтруктураПрофиляСинхронизации, ИдентификаторСессии, Истина);
		КонецЕсли;	
				
		ВСВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСВС);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
		
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Синхронизация с ИС ЭСФ успешно завершена.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеНовыхУТТН(Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияЭДВС, ПараметрыМетода, МассивЭДВСДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
   	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "50"); 
	lastUFormId = ?(ПараметрыМетода.Свойство(ВРег("lastUFormId")), ПараметрыМетода.lastUFormId, "0"); // для 5.0
	lastEventDate = Дата(2010,01,01); // Используется только в 5.0. Пустую дату передавать нельзя, поэтому 0001 год не используется. Ставим 2010 (время до ЭСФ) так же как в форме синхронизации
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)				
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) и ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;		
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;			
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросВСQueryUpdates_Версия1").ПолучитьТекст();				
		
	ПредыдущийLastEventDate = Неопределено;
	ПредыдущийlastUFormId = Неопределено;
	ПоследнийБлок = Ложь; // в 5.0 ориентируемся на этот маркер запроса, так как сервер возвращает дату с милисекундами, а Платформа округляет дату до секунд	
	Пока НЕ ПоследнийБлок И (LastEventDate<>ПредыдущийLastEventDate ИЛИ lastUFormId<>ПредыдущийlastUFormId) Цикл  //lastEventId <> ПредыдущийLastEventId ИЛИ 
		
		ПредыдущийLastEventDate = LastEventDate;
		ПредыдущийlastUFormId = lastUFormId;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
						
		// в версии 5.0	 идентификаци по двум параметрам
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastUFormId]", lastUFormId); // 5.0
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
				
		ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService(),,ВерсияЭДВС);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
 			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			
  			uFormInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.uFormQueryUpdatesResponse.uFormInfoList, "uFormInfo", Неопределено);				
			Если ТолькоСоздатьОбновитьФайлы Тогда
				СоздатьОбновитьПрисоединенныеФайлыСуществующихУТТН(uFormInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Иначе
				МассивИсключаемыхИД = Новый Массив;
				СоздатьОбновитьПолучаемыеЭДВС(uFormInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, Ложь, МассивИсключаемыхИД, МассивЭДВСДляПолученияИдентификаторовТоваров); 
			КонецЕсли;
			
			// Сохранение  параметров
			ПоследнийБлок = XMLЗначение(Тип("Булево"),ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.uFormQueryUpdatesResponse,"lastBlock", Истина));			
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.uFormQueryUpdatesResponse, "lastEventDate",0); 
			lastUFormId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.uFormQueryUpdatesResponse, "lastUFormId",0); 
			
					
			Если Найти(ВерсияЭДВС, "5") <> 0 Тогда
				
				ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
				Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
					//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекунд, возвращаемых сервером
					ПараметрДата = ПараметрДата - 1;
				КонецЕсли;
				
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUFormUpdates"), 
						, 
						ВРег("lastEventDate"), 
						ПараметрДата);
						
				ЭСФСервер.СохранитьПараметрыМетода(
						ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
						ВРег("queryUFormUpdates"), 
						, 
						ВРег("lastUFormId"), 
						lastUFormId);
			КонецЕсли;
			    				
			Если ПолучитьОднуПорцию Тогда
				//чтобы не возникало зацикливания
				ПоследнийБлок = Истина;
				Прервать;
			КонецЕсли;
				  
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
				
			ИдентификаторСессии = ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияЭДВС);                                                  
			ПредыдущийLastEventId = Неопределено;
			ПредыдущийLastEventDate = Неопределено;			
			ПредыдущийlastUFormId = Неопределено;			
		Иначе
			
			ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияЭДВС);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменЭСФ.ПолучитьНовыеЭСФ'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение НСтр("ru = 'При получении новых ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?(ПоследнийБлок ИЛИ (LastEventDate = ПредыдущийLastEventDate И lastUFormId = ПредыдущийlastUFormId), Истина, Ложь); //lastEventId = ПредыдущийLastEventId И 
			
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

// См. ЭСФСервер.СоздатьОбновитьПолучаемыеЭДВС()
Процедура СоздатьОбновитьПолучаемыеЭДВС(Знач uFormInfoList, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыЭДВС, МассивИсключаемыхИД = Неопределено, МассивЭДВСДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Если uFormInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	uFormInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(uFormInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивЭДВС = НовыйМассивЗагружаемыхЭДВС(uFormInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыЭДВС);
		
		// Создать массив новых ЭДВС (которых еще нет в ИБ)
		// для заполнения ссылочных полей по текстовым и числовым представлениям.
		МассивНовыхЭДВС = Новый Массив;
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			Если ОбъектЭДВС.Ссылка.Пустая() Тогда
				МассивНовыхЭДВС.Добавить(ОбъектЭДВС);
			КонецЕсли;
		КонецЦикла;
		
		// Создать коллекцию старых ЭДВС (которые уже были в ИБ)
		// содержащую объекты ЭДВС до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхЭДВС = Новый Массив;
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			Если НЕ ОбъектЭДВС.Ссылка.Пустая() Тогда
				КопияОбъектаЭДВС = ОбъектЭДВС.Скопировать();
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектЭДВС", КопияОбъектаЭДВС);
				Структура.Вставить("ОбновленныйОбъектЭДВС", ОбъектЭДВС);
				МассивСтарыхЭДВС.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы ЭДВС.
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			Если НЕ ОбъектЭДВС.Ссылка.Пустая() Тогда
				Если ОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта Тогда
					ЭСФСервер.ОчиститьОбъект(ОбъектЭДВС, "Идентификатор, ДокументОснование, КорректируемыйДокументЭДВС, ПрефиксВидаДокумента, НомерУчетногоДокумента, НомерПакета, Автор, Комментарий", "Товары, ИсходныеТовары, ИсходныеТоварыВС");
				Иначе	
					ЭСФСервер.ОчиститьОбъект(ОбъектЭДВС, "Идентификатор, ДокументОснование, КорректируемыйДокументЭДВС, ПрефиксВидаДокумента, НомерУчетногоДокумента, НомерПакета, Автор, Комментарий", "Товары, ИсходныеТовары");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭДВС.
		МассивПропускаемыхЭДВС = Новый Массив;
		
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			uFormInfo = НайтиuFormInfoПоId(uFormInfoList, ОбъектЭДВС.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(uFormInfo, "registrationNumber", "");
				ЗаполнитьЭД(uFormInfo, СтруктурнаяЕдиница, ОбъектЭДВС);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщения = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия ЭСФ формату.'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектЭДВС.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщения;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭДВС.Добавить(ОбъектЭДВС);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭДВС.Идентификатор);
				КонецЕсли;	
			КонецПопытки;	
		КонецЦикла;
		
		Для Каждого ОбъекЭДВС Из МассивПропускаемыхЭДВС Цикл
			ИндексЭлемента = МассивЭДВС.Найти(ОбъектЭДВС);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭДВС.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭДВС.Найти(ОбъектЭДВС);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭДВС.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭДВС
 		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			Если ЗначениеЗаполнено(ОбъектЭДВС.Дата) Тогда
				ОбъектЭДВС.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
							|%2,
							|%3'");
				Причина1 = "";
				Причина2 = "";
				Если Не ЗначениеЗаполнено(ОбъектЭДВС.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектЭДВС.РегистрационныйНомер, Причина1, Причина2);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхЭДВС.Добавить(ОбъектЭДВС);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектЭДВС.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ОбъектЭДВС Из МассивПропускаемыхЭДВС Цикл
			ИндексЭлемента = МассивЭДВС.Найти(ОбъектЭДВС);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивЭДВС.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхЭДВС.Найти(ОбъектЭДВС);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхЭДВС.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;	
			
		//СоздатьОбновитьПрисоединенныеXMLФайлыУТТН(МассивУТТН, uFormInfoList);
		
		ЗаполнитьСсылочныеРеквизитыДокументовЭДВС(МассивЭДВС);
		ВосстановитьСсылочныеРеквизитыДокументовЭДВС(МассивСтарыхЭДВС);
		
		// Повторно записать старые и новые документы ЭСФ.
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
			ОбъектЭДВС.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(МассивЭДВСДляПолученияИдентификаторовТоваров) = Тип("Массив") Тогда
			Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
				МассивЭДВСДляПолученияИдентификаторовТоваров.Добавить(ОбъектЭДВС.Ссылка);
			КонецЦикла
		КонецЕсли;	
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПолучаемыеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьОбновитьПрисоединенныеФайлыСуществующихУТТН(Знач uFormInfoList, Знач СтруктурнаяЕдиница)
	
	Если uFormInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(uFormInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Найти старые документы ЭСФ.
		МассивЭДВС = НовыйМассивЗагружаемыхЭДВС(uFormInfoList, СтруктурнаяЕдиница, Истина, Ложь);
		
		//СоздатьОбновитьПрисоединенныеXMLФайлыЭДВС(МассивЭДВС, uFormInfoList);
		
		// Если файла не было, то в ЭСФ заполняется реквизит ФайлЭСФ.
		// Поэтому необходимо повторно записать старые документы ЭСФ.
		Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл						
			ОбъектЭДВС.Записать();			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПрисоединенныеФайлыСуществующихУТТН'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры
// См. ВССервер.ПолучитьОшибкиЭДВСПоИдентификаторам()
Функция ПолучитьОшибкиЭДВСПоИдентификаторам(Знач МассивИдентификаторовЭДВС, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭДВС Из МассивИдентификаторовЭДВС Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭДВС) Тогда
			idList = idList + "<id>" + ИдентификаторЭДВС + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросВСuFormErrorByIdRequest").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭДВС Из МассивИдентификаторовЭДВС Цикл
			Результат.Вставить(ИдентификаторЭДВС, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		uFormErrorInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.uFormErrorByIdResponse.uFormErrorInfoList, "uFormError", Неопределено);
		                                               
		Если uFormErrorInfoList <> Неопределено Тогда
			
			uFormErrorInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(uFormErrorInfoList);
			
			// Заполнить Результат.
			Для Индекс = 0 По uFormErrorInfoList.Количество() - 1 Цикл
				uFormError = uFormErrorInfoList.Получить(Индекс);
				ДанныеОшибки = ДанныеОшибкиuForm(uFormError);
				Результат.Вставить(ДанныеОшибки.Идентификатор, ДанныеОшибки);
			КонецЦикла;
			
			//ЗаполнитьРезультатПолученияОшибокUForm(uFormErrorInfoList, ИмяЭлемента, Результат);

			
			// Обновить документы ЭСФ.
			Если ОбновитьОшибкиВДокументах Тогда
				ОтразитьИзмененияОшибокЭДВС(Результат, СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Функция ОбновитьСтатусыЭДВСПоИдентификаторам(Знач МассивИдентификаторовЭДВС, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭДВС Из МассивИдентификаторовЭДВС Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭДВС) Тогда
			idList = idList + "<id>" + ИдентификаторЭДВС + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросВСqueryUFormStatusByIdRequest").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторЭДВС Из МассивИдентификаторовЭДВС Цикл
			Результат.Вставить(ИдентификаторЭДВС, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		uFormSummaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUFormStatusByIdResponse.uFormSummaryList, "uFormSummary", Неопределено);
		                                               
		Если uFormSummaryList <> Неопределено Тогда
			
			uFormSummaryList = ЭСФСервер.СписокXDTOИзОбъектXDTO(uFormSummaryList);
			
			МассивИдентификаторовОшибочныхФорм = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По uFormSummaryList.Количество() - 1 Цикл
				uFormSummary = uFormSummaryList.Получить(Индекс);
				ДанныеСтатуса = ДанныеСтатусаuForm(uFormSummary);
				Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
				Если ДанныеСтатуса.Статус = Перечисления.СтатусыУТТН.Ошибочный Тогда
					МассивИдентификаторовОшибочныхФорм.Добавить(ДанныеСтатуса.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			//Получим ошибки ошибочных форм
			Если МассивИдентификаторовОшибочныхФорм.Количество() > 0 Тогда
				РезультатОшибочныхФорм = ПолучитьОшибкиЭДВСПоИдентификаторам(МассивИдентификаторовОшибочныхФорм, ПрофильИСЭСФ, ИдентификаторСессии);
				Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхФорм);	
			КонецЕсли;
			// Обновить документы ВС.
			ОтразитьИзмененияСтатусовЭДВС(Результат, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;                                       
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЭД(Знач uFormInfo, Знач СтруктурнаяЕдиница, ЭДВС) Экспорт
	
	ВерсияЭДВС = ЭСФСервер.ПолучитьСвойство(uFormInfo, "version", "");
	Если ПустаяСтрока(ВерсияЭДВС) Тогда
		ВерсияЭДВС = "UFormV1";
	КонецЕсли;	
	
	Если ВерсияЭДВС = "UFormV1" Тогда
		ЗаполнитьЭД_Версия1(uFormInfo, СтруктурнаяЕдиница, ЭДВС);
	//Иначе
	//	ЗаполнитьЭСФ_Версия2(InvoiceInfo, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьЭД_Версия1(Знач uFormInfo, Знач СтруктурнаяЕдиница, ЭДВС) Экспорт
	ТекстФормы = uFormInfo.uFormBody;
	uForm = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстФормы, ФабрикаXDTO);
		
	#Область РазделА_Общий
	ЭДВС.ВерсияУТТН 			= 1;
	ЭДВС.Дата 					= ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(uFormInfo, "inputDate", ""));	
	ЭДВС.ДатаИсходногоДокумента = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(uForm, "date", ""));
	ЭДВС.РегистрационныйНомер 	= ЭСФСервер.ПолучитьСвойство(uFormInfo, "registrationNumber", "");	
	ЭДВС.ТипФормы				= ВСКлиентСервер.ВидФормы_ИБ(ЭСФСервер.ПолучитьСвойство(uForm, "type", ""));
	ЭДВС.ПричинаСписания		= ВСКлиентСервер.ПричинаСписания_ИБ(ЭСФСервер.ПолучитьСвойство(uForm, "writeOffReason", ""));
	ЭДВС.ВидДетализации			= ВСКлиентСервер.ТипДетализации_ИБ(ЭСФСервер.ПолучитьСвойство(uForm, "detailingType", ""));
    Номер 						= ЭСФСервер.ПолучитьСвойство(uForm, "number", "");
	
	ЧислоВхождений = СтрЧислоВхождений(Номер, "_");
	Если ЧислоВхождений = 2 Тогда
		ПозицияПервогоПробела 		= Найти(Номер, "_");
		НомерУчетногоДокумента		= Прав(Номер, СтрДлина(Номер) - ПозицияПервогоПробела);
		ПозицияВторогоПробела 		= Найти(НомерУчетногоДокумента, "_");
		
		ПрефиксДокумента			= Лев(Номер, ПозицияПервогоПробела-1);
		НомерПакета					= Прав(Номер, СтрДлина(НомерУчетногоДокумента) - ПозицияВторогоПробела);
		НомерУчетногоДокумента		= Лев(НомерУчетногоДокумента, ПозицияВторогоПробела-1);
		
		ЭДВС.ПрефиксВидаДокумента 	= ПрефиксДокумента;
		ЭДВС.НомерУчетногоДокумента = НомерУчетногоДокумента; 
		ЭДВС.НомерПакета 		    = НомерПакета;		
	Иначе
		ЭДВС.НомерУчетногоДокумента = Номер;
		//ЭДВС.НомерПакета			= ВССервер.ПолучитьНомерПакетаФорматированный(1);
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область РазделB_РеквизитыОтправителя
	Поставщик = ЭСФСервер.ПолучитьСвойство(uForm, "sender", Неопределено);
	Если Поставщик <> неопределено тогда
		Поставщик = ЭСФСервер.СписокXDTOИзОбъектXDTO(Поставщик);
		Для Каждого Элемент Из Поставщик Цикл
			//Реквизиты отправителя
			ЭДВС.ОтправительИдентификатор 		= ЭСФСервер.ПолучитьСвойство(Элемент, "tin", "");
			ЭДВС.ОтправительАдрес				= ЭСФСервер.ПолучитьСвойство(Элемент, "address", "");
			ЭДВС.ОтправительНаименование		= ЭСФСервер.ПолучитьСвойство(Элемент, "name", "");
			//Склад отправителя
			ЭДВС.СкладОтправительИдентификатор 	= ЭСФСервер.ПолучитьСвойство(Элемент, "storeId",  0);
			ЭДВС.СкладОтправительНаименование	= ЭСФСервер.ПолучитьСвойство(Элемент, "storeName",  "");
			ЭДВС.НомерДоговораСРПОтправитель	= ЭСФСервер.ПолучитьСвойство(Элемент, "agentDocNum",  "");
			ЭДВС.ДатаДоговораСРПОтправитель	= ЭСФСервер.ПолучитьСвойство(Элемент, "agentDocDate",  "");
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	#Область РазделC_РеквизитыПолучателя
	Получатель = ЭСФСервер.ПолучитьСвойство(uForm, "recipient", Неопределено);
	Если Получатель <> неопределено тогда
		Получатель = ЭСФСервер.СписокXDTOИзОбъектXDTO(Получатель);
		Для Каждого Элемент Из Получатель Цикл
			//Реквизиты отправителя
			ЭДВС.ПолучательИдентификатор 		= ЭСФСервер.ПолучитьСвойство(Элемент, "tin", "");
			ЭДВС.ПолучательАдрес				= ЭСФСервер.ПолучитьСвойство(Элемент, "address", "");
			ЭДВС.ПолучательНаименование			= ЭСФСервер.ПолучитьСвойство(Элемент, "name", "");
			//Склад отправителя
			ЭДВС.СкладПолучательИдентификатор 	= ЭСФСервер.ПолучитьСвойство(Элемент, "storeId",  0);
			ЭДВС.СкладПолучательНаименование	= ЭСФСервер.ПолучитьСвойство(Элемент, "storeName",  "");
			ЭДВС.НомерДоговораСРППолучатель	= ЭСФСервер.ПолучитьСвойство(Элемент, "agentDocNum",  "");
			ЭДВС.ДатаДоговораСРППолучатель	= ЭСФСервер.ПолучитьСвойство(Элемент, "agentDocDate",  "");
		КонецЦикла;
	КонецЕсли;

	#КонецОбласти
	
	#Область РазделD_РеквизитыГрузоотправителяИГрузополучателя    
	
//Пока ушло в Разделы С и В, так как получатель и поставщик возвращается в составном виде
	
	//	УТТН.СкладОтправительИдентификатор 	= ЭСФСервер.ПолучитьСвойство(uForm, senderStoreId;
	//	УТТН.СкладПолучательИдентификатор	= uForm.recipientStoreId;
	#КонецОбласти
	
	#Область РазделE0_ИсходныеТовары
	
	sourceProducts = ЭСФСервер.ПолучитьСвойство(uForm, "sourceProducts", Неопределено);
	Если sourceProducts <> Неопределено Тогда
		sourceProducts = ЭСФСервер.ПолучитьСвойство(sourceProducts, "sourceProduct", Неопределено);
		sourceProducts = ЭСФСервер.СписокXDTOИзОбъектXDTO(sourceProducts);
		Для Каждого Product из sourceProducts Цикл
			СтрокаИсходногоТовара = ЭДВС.ИсходныеТоварыВС.Добавить();
			
			СтрокаИсходногоТовара.ВозможенЭкспорт						= ЭСФСервер.ПолучитьСвойство(Product,"canExport", "");
			СтрокаИсходногоТовара.ТипПошлины         		   			= ВСКлиентСервер.ТпПошлины_ИБ(ЭСФСервер.ПолучитьСвойство(Product,"dutyTypeCode", ""));
			СтрокаИсходногоТовара.НомерЗаявленияВРамкахТС        		= ЭСФСервер.ПолучитьСвойство(Product,"manufactureOrImportDocNumber", "");
			СтрокаИсходногоТовара.ДатаСертификатаПроисхождения   		= ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Product,"originCertificateDate", ""));
			СтрокаИсходногоТовара.ПризнакПроисхождения           		= ЭСФСервер.ПолучитьСвойство(Product,"originCode", "");
			СтрокаИсходногоТовара.ФизическаяМетка                		= ЭСФСервер.ПолучитьСвойство(Product,"physicalLabel", "");
			СтрокаИсходногоТовара.ТоварНаименованиеВРамкахТС 			= ЭСФСервер.ПолучитьСвойство(Product,"productNameInImportDoc","");
			СтрокаИсходногоТовара.НомерПозицииВДекларацииИлиЗаявлении	= ЭСФСервер.ПолучитьСвойство(Product,"productNumberInImportDoc", "");
			СтрокаИсходногоТовара.КодТНВЭД 								= ЭСФСервер.ПолучитьСвойство(Product,"tnvedCode","");
			СтрокаИсходногоТовара.СоставнойКодГСВС	 					= ЭСФСервер.ПолучитьСвойство(Product,"gsvsCode", "");
			СтрокаИсходногоТовара.ЕдиницаИзмеренияКод 					= ЭСФСервер.ПолучитьСвойство(Product,"measureUnitCode","");
			СтрокаИсходногоТовара.СтранаПроисхожденияТовараКод  		= ЭСФСервер.ПолучитьСвойство(Product,"manufactureOrImportCountry", "");
			СтрокаИсходногоТовара.Цена 									= ЭСФСервер.ПолучитьСвойство(Product,"price", 0);
			СтрокаИсходногоТовара.Количество 							= ЭСФСервер.ПолучитьСвойство(Product,"quantity",0);
			СтрокаИсходногоТовара.Сумма 								= ЭСФСервер.ПолучитьСвойство(Product,"sum",0);
			СтрокаИсходногоТовара.ТоварНаименование 					= ЭСФСервер.ПолучитьСвойство(Product,"name","");
			СтрокаИсходногоТовара.ДополнительныйИдентификатор			= ЭСФСервер.ПолучитьСвойство(Product,"productId","");
			СтрокаИсходногоТовара.Крепость 								= ЭСФСервер.ПолучитьСвойство(Product,"spiritPercent",0);
			СтрокаИсходногоТовара.ПинКод 								= ЭСФСервер.ПолучитьСвойство(Product,"pinCode","");
			СтрокаИсходногоТовара.GTIN 									= ЭСФСервер.ПолучитьСвойство(Product,"markingCode","");
		КонецЦикла
	КонецЕсли;
	#КонецОбласти
	
	#Область РазделE_Товары
		Products = ЭСФСервер.ПолучитьСвойство(uForm, "products", Неопределено);
	Если Products <> Неопределено Тогда
		Products = ЭСФСервер.ПолучитьСвойство(Products, "product", Неопределено);
		Products = ЭСФСервер.СписокXDTOИзОбъектXDTO(Products);
		Для Каждого Product из Products Цикл
			СтрокаТовара = ЭДВС.ТоварыВС.Добавить();
			
			СтрокаТовара.ВозможенЭкспорт						= ЭСФСервер.ПолучитьСвойство(Product,"canExport", "");
			СтрокаТовара.ТипПошлины         		   			= ВСКлиентСервер.ТпПошлины_ИБ(ЭСФСервер.ПолучитьСвойство(Product,"dutyTypeCode", ""));
			СтрокаТовара.НомерЗаявленияВРамкахТС        		= ЭСФСервер.ПолучитьСвойство(Product,"manufactureOrImportDocNumber", "");
			СтрокаТовара.ДатаСертификатаПроисхождения   		= ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Product,"originCertificateDate", ""));
			СтрокаТовара.ПризнакПроисхождения           		= ЭСФСервер.ПолучитьСвойство(Product,"originCode", "");
			СтрокаТовара.ФизическаяМетка                		= ЭСФСервер.ПолучитьСвойство(Product,"physicalLabel", "");
			СтрокаТовара.ТоварНаименованиеВРамкахТС 			= ЭСФСервер.ПолучитьСвойство(Product,"productNameInImportDoc","");
			СтрокаТовара.НомерПозицииВДекларацииИлиЗаявлении	= ЭСФСервер.ПолучитьСвойство(Product,"productNumberInImportDoc", "");
			СтрокаТовара.КодТНВЭД 								= ЭСФСервер.ПолучитьСвойство(Product,"tnvedCode","");
			СтрокаТовара.СоставнойКодГСВС	 					= ЭСФСервер.ПолучитьСвойство(Product,"gsvsCode", "");
			СтрокаТовара.ЕдиницаИзмеренияКод 					= ЭСФСервер.ПолучитьСвойство(Product,"measureUnitCode","");
			СтрокаТовара.СтранаПроисхожденияТовараКод			= ЭСФСервер.ПолучитьСвойство(Product,"manufactureOrImportCountry", "");
			СтрокаТовара.Цена 									= ЭСФСервер.ПолучитьСвойство(Product,"price", 0);
			СтрокаТовара.Количество 							= ЭСФСервер.ПолучитьСвойство(Product,"quantity",0);
			СтрокаТовара.Сумма 									= ЭСФСервер.ПолучитьСвойство(Product,"sum",0);
			СтрокаТовара.ТоварНаименование 						= ЭСФСервер.ПолучитьСвойство(Product,"name","");
			СтрокаТовара.ДополнительныйИдентификатор			= ЭСФСервер.ПолучитьСвойство(Product,"productId","");
			СтрокаТовара.Крепость 								= ЭСФСервер.ПолучитьСвойство(Product,"spiritPercent",0);
			СтрокаТовара.ПинКод 								= ЭСФСервер.ПолучитьСвойство(Product,"pinCode","");
			СтрокаТовара.GTIN 									= ЭСФСервер.ПолучитьСвойство(Product,"markingCode","");
		КонецЦикла
	КонецЕсли;

	#КонецОбласти

	#Область Раздел_ПрочиеСведения
		ЭДВС.ВерсияУТТН		= Прав(ЭСФСервер.ПолучитьСвойство(uFormInfo, "version", ""),1);
		ЭДВС.Идентификатор	= ЭСФСервер.ПолучитьСвойство(uFormInfo, "uFormId", "");
		ЭДВС.Статус 		= ВСКлиентСервер.СтатусИБ(ЭСФСервер.ПолучитьСвойство(uFormInfo, "status", ""));
	#КонецОбласти

	#Область РазделJ_СведенияПоЭЦП
		ЭДВС.ЭЦП 		= ЭСФСервер.ПолучитьСвойство(uFormInfo,"signature", "");
		ЭДВС.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(uFormInfo, "signatureType", "")); 
	#КонецОбласти
	
	#Область Комментарий
	ЭДВС.Комментарий = ЭСФСервер.ПолучитьСвойство(uFormInfo, "comment", ЭДВС.Комментарий);
	#КонецОбласти

	
КонецПроцедуры

// Заполняет ссылочные реквизиты объектов ЭДВС по их текстовым или числовым представлениям.
// Например, заполняет ссылку на ГСВС, единицу измерения и т.д.
//
// Параметры:
//  МассивЭДВС - Массив - Массив ЭДВС, у которых необходимо заполнить ссылочные реквизиты.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭлектронныйДокументВС.
//
Процедура ЗаполнитьСсылочныеРеквизитыДокументовЭДВС(МассивЭДВС) Экспорт
	
	ЗаполнитьТипПроисхожденияЭДВС(МассивЭДВС);
	ЗаполнитьСсылкиНаГСВС(МассивЭДВС);
	ВССерверПереопределяемый.ЗаполнитьСсылкиЕдиницИзмеренияЭДВС(МассивЭДВС);
	ВССерверПереопределяемый.ЗаполнитьСсылкиСтранПроисхожденияЭДВС(МассивЭДВС);
	ЗаполнитьСсылкиВиртуальныхСкладов(МассивЭДВС);	
	ЗаполнитьСсылкиНаСтруктурныеЕдиницыЭДВС(МассивЭДВС);
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументовЭДВС(МассивСтарыхЭДВС)
	
	Для Каждого Структура Из МассивСтарыхЭДВС Цикл
		ВосстановитьСсылочныеРеквизитыОдногоЭДВС(Структура.ИсходныйОбъектЭДВС, Структура.ОбновленныйОбъектЭДВС);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС)
	
	Если (ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары ИЛИ ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами)
		И ОбновленныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
		
		ОбновленныйОбъектЭДВС.ТипФормы = ИсходныйОбъектЭДВС.ТипФормы;
	КонецЕсли;
	
	Если ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС И ОбновленныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.Списание Тогда
		ОбновленныйОбъектЭДВС.ТипФормы = ИсходныйОбъектЭДВС.ТипФормы;
	КонецЕсли;
	
	Если ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС И ОбновленныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.Остатки Тогда
		ОбновленныйОбъектЭДВС.ТипФормы = ИсходныйОбъектЭДВС.ТипФормы;
	КонецЕсли;
	
	Если ОбновленныйОбъектЭДВС.ТипФормы <> Перечисления.ТипыФормВС.Списание Тогда	
		//ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "Товары", "НомерСтроки, ИсточникПроисхождения, Товар, ДополнительныйИдентификатор");
		ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "ТоварыВС", "НомерСтроки, ИсточникПроисхождения, СтранаПроисхожденияТовара, Товар, ДополнительныйИдентификатор, ИсточникПроисхожденияПолучатель, ДополнительныйИдентификаторПолучатель");
	Иначе	
		//для формы с типом Списание информация об ИД уже "сидит" в ХМЛ-схеме
		//соответственно, не нужно восстанавливать ИД товара из ссылки. Т.к. данное поле возьмется из схемы.
		ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "ТоварыВС", "НомерСтроки, ИсточникПроисхождения, Товар");
	КонецЕсли;
	
	Если ОбновленныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.Детализация Тогда
		ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "ИсходныеТоварыВС", "НомерСтроки, ИсточникПроисхождения, Товар");
	КонецЕсли;
	
	Если ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары Тогда
		ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "ТоварыВС", "СтранаПроисхожденияТовара, СтранаПроисхожденияТовараКод, ТипПошлины, ТипПроисхождения, ТоварНаименованиеВРамкахТС");
	КонецЕсли;
	
	Если ИсходныйОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Тогда
		ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, "ТоварыВС", "ТипПошлины, ТипПроисхождения");
	КонецЕсли;
	
КонецПроцедуры

// Процедура восстановления реквизитов в указанной табличной части при обновлении.
// В частности используется для табличных частей Товары и Исходные товары, 
// для других процедура работать не будет из-за ориентирования на поля вышеуказанных табличных частей
//
// Параметры:
//  ИсходныйОбъектЭДВС		 - 	 Исходный ЭДВС из которого будут взяты данные 
//  ОбновленныйОбъектЭДВС	 - 	 Полученный ЭДВС с сервера 
//  СохраняемыеПоля			 - 	 Поля, которые будут взяты из исходного ЭДВС 
//
Процедура ВосстановитьРеквизитыТаблицыТоваровЭДВС(ИсходныйОбъектЭДВС, ОбновленныйОбъектЭДВС, ТабличнаяЧасть, СохраняемыеПоля)
	
	//ТоварыИсходногоЭДВС = ПолучитьТоварыСПризнакомУчетаВС(ИсходныйОбъектЭДВС, ТабличнаяЧасть);
	
	//Получаем таблицы товаров (как все целиком в одной таблице, так и по отдельности по признаку учета ВС)
	ТаблицаТоварыИсходногоЭДВС 	= ИсходныйОбъектЭДВС[ТабличнаяЧасть].Выгрузить();
	//ТаблицаТоварыСПризнакомВС 	= ТоварыИсходногоЭДВС.ТаблицаТоварыСПризнакомВС;
	//ТаблицаТоварыБезПризнакаВС 	= ТоварыИсходногоЭДВС.ТаблицаТоварыБезПризнакаВС;
	
	ТаблицаТоваровОбновленногоЭДВС = ОбновленныйОбъектЭДВС[ТабличнаяЧасть];
		
	Если ТаблицаТоварыИсходногоЭДВС.Количество() = ОбновленныйОбъектЭДВС[ТабличнаяЧасть].Количество() Тогда
		
		ВГраницаОбновленного = ОбновленныйОбъектЭДВС[ТабличнаяЧасть].Количество() - 1;
		
		Для Индекс = 0 По ВГраницаОбновленного Цикл
			
			ИсходнаяСтрока = ТаблицаТоварыИсходногоЭДВС[Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектЭДВС[ТабличнаяЧасть][Индекс];
			
			Если ОбновленнаяСтрока.ТоварНаименование <> ИсходнаяСтрока.ТоварНаименование Тогда
			
				//В случае отличия наименований товара между исходной и обновленной строкой, выводим сообщение о рекомендации проверить данную строку
				ТекстСообщения = НСтр("ru = 'В документе ""%1"", в таблице ""%2"", в строке %3, отличаются поля у исходного и полученного ЭДВС. Рекомендуется проверить правильность заполнения полей'");
				КраткоеПредставлениеЭДВС = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭДВС.Ссылка);
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеЭДВС,ТабличнаяЧасть, Формат(Индекс + 1, "ЧГ="));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбновленныйОбъектЭДВС.Ссылка);
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ИсходнаяСтрока, ОбновленнаяСтрока,,СохраняемыеПоля);	
		КонецЦикла;
		
		ТаблицаТоварыИсходногоЭДВС.Сортировать("НомерСтроки Возр");
		ОбновленныйОбъектЭДВС[ТабличнаяЧасть].Загрузить(ТаблицаТоварыИсходногоЭДВС);
		
	Иначе	
		
		//Для Каждого Товар Из ТаблицаТоварыБезПризнакаВС Цикл
		//	НоваяСтрока = ОбновленныйОбъектЭДВС[ТабличнаяЧасть].Добавить();
		//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Товар,,"НомерСтроки");
		//КонецЦикла;
		
		ТекстСообщения = НСтр("ru = 'В документе ""%1"", в таблице ""%2"" очищены и перезаполнены строки с товаров виртуального склада так как их количество в исходном и полученном ЭДВС отличается'");
		КраткоеПредставлениеЭДВС = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектЭДВС.Ссылка);
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, КраткоеПредставлениеЭДВС, ТабличнаяЧасть);
				
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбновленныйОбъектЭДВС.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТоварыСПризнакомУчетаВС(ЭДВС, ТабличнаяЧасть)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВСТовары.НомерСтроки КАК НомерСтроки,
	|	ЭлектронныйДокументВСТовары.ТоварНаименование,
	|	ЭлектронныйДокументВСТовары.Товар,
	|	ЭлектронныйДокументВСТовары.СоставнойКодГСВС,
	|	ЭлектронныйДокументВСТовары.ФизическаяМетка,
	|	ЭлектронныйДокументВСТовары.КодТНВЭД,
	|	ЭлектронныйДокументВСТовары.ЕдиницаИзмерения,
	|	ЭлектронныйДокументВСТовары.Количество,
	|	ЭлектронныйДокументВСТовары.Цена,
	|	ЭлектронныйДокументВСТовары.ВозможенЭкспорт,
	|	ЭлектронныйДокументВСТовары.ТипПошлины,
	|	ЭлектронныйДокументВСТовары.СтранаПроисхожденияТовараКод,
	|	ЭлектронныйДокументВСТовары.НомерЗаявленияВРамкахТС,
	|	ЭлектронныйДокументВСТовары.ДатаСертификатаПроисхождения,
	|	ЭлектронныйДокументВСТовары.ПризнакПроисхождения,
	|	ЭлектронныйДокументВСТовары.ТоварНаименованиеВРамкахТС,
	|	ЭлектронныйДокументВСТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭлектронныйДокументВСТовары.ЕдиницаИзмеренияКод,
	|	ЭлектронныйДокументВСТовары.Сумма,
	|	ЭлектронныйДокументВСТовары.ГСВС,
	//|	ЭлектронныйДокументВСТовары.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ЭлектронныйДокументВСТовары.ИсточникПроисхождения,
	|	ЭлектронныйДокументВСТовары.ТипПроисхождения,
	|	ЭлектронныйДокументВСТовары.СтранаПроисхожденияТовара,
	|	ЭлектронныйДокументВСТовары.ДополнительныйИдентификатор,
	|	ЭлектронныйДокументВСТовары.ИсточникПроисхожденияПолучатель,
	|	ЭлектронныйДокументВСТовары.ДополнительныйИдентификаторПолучатель
	|ПОМЕСТИТЬ ТоварыЭДВС
	|ИЗ
	|	&ЭДВС КАК ЭлектронныйДокументВСТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЭДВС.НомерСтроки КАК НомерСтроки,
	|	ТоварыЭДВС.ТоварНаименование,
	|	ТоварыЭДВС.Товар,
	|	ТоварыЭДВС.СоставнойКодГСВС,
	|	ТоварыЭДВС.ФизическаяМетка,
	|	ТоварыЭДВС.КодТНВЭД,
	|	ТоварыЭДВС.ЕдиницаИзмерения,
	|	ТоварыЭДВС.Количество,
	|	ТоварыЭДВС.Цена,
	|	ТоварыЭДВС.ВозможенЭкспорт,
	|	ТоварыЭДВС.ТипПошлины,
	|	ТоварыЭДВС.СтранаПроисхожденияТовараКод,
	|	ТоварыЭДВС.НомерЗаявленияВРамкахТС,
	|	ТоварыЭДВС.ДатаСертификатаПроисхождения,
	|	ТоварыЭДВС.ПризнакПроисхождения,
	|	ТоварыЭДВС.ТоварНаименованиеВРамкахТС,
	|	ТоварыЭДВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТоварыЭДВС.ЕдиницаИзмеренияКод,
	|	ТоварыЭДВС.Сумма,
	|	ТоварыЭДВС.ГСВС,
	//|	ТоварыЭДВС.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ТоварыЭДВС.ИсточникПроисхождения,
	|	ТоварыЭДВС.ТипПроисхождения,
	|	ТоварыЭДВС.СтранаПроисхожденияТовара,
	|	ТоварыЭДВС.ДополнительныйИдентификатор,
	|	ТоварыЭДВС.ИсточникПроисхожденияПолучатель,
	|	ТоварыЭДВС.ДополнительныйИдентификаторПолучатель
	|ИЗ
	|	ТоварыЭДВС КАК ТоварыЭДВС
	|
	|УПОРЯДОЧИТЬ ПО
	//|	ПризнакУчетаНаВиртуальномСкладе УБЫВ,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ЭДВС", ЭДВС[ТабличнаяЧасть]);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	
	//Скопируем товары с признаком ВС из ТаблицаТовары
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПризнакУчетаНаВиртуальномСкладе", Истина);
	НайденныеСтрокиСПризнакомВС = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	ТаблицаТоварыСПризнакомВС = ТаблицаТовары.Скопировать(НайденныеСтрокиСПризнакомВС);
	
	//Скопируем товары без признака ВС из ТаблицаТовары	
	ПараметрыОтбора.Вставить("ПризнакУчетаНаВиртуальномСкладе", Ложь);
	НайденныеСтрокиБезПризнакаВС = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	ТаблицаТоварыБезПризнакаВС = ТаблицаТовары.Скопировать(НайденныеСтрокиБезПризнакаВС);
	
	РезультатПолученияТоваров = Новый Структура;
	
	РезультатПолученияТоваров.Вставить("ТаблицаТовары", ТаблицаТовары);
	РезультатПолученияТоваров.Вставить("ТаблицаТоварыСПризнакомВС", ТаблицаТоварыСПризнакомВС);
	РезультатПолученияТоваров.Вставить("ТаблицаТоварыБезПризнакаВС", ТаблицаТоварыБезПризнакаВС);
	
	Возврат РезультатПолученияТоваров;
	
КонецФункции

// Возвращает массив объектов ЭСФ, которые необходимо обработать при синхронизации с ИС ЭСФ.
// Объекты ЭСФ находятся по идентификатору из InvoiceInfoList и структурной единице.
// Поиск выполняется среди входящих и исходящих ЭСФ.
//
// Параметры:
//  InvoiceInfoList - СписокXDTO - Список invoice, для которых необходимо найти документы ЭСФ.
//   Если в InvoiceInfoList есть Черновик, Импортированный, Ошибочный, то для них не находятся и не создаются объекты ЭСФ.
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все invoice из InvoiceInfoList.
//  ТолькоСуществующиеЭСФ - Булево - Если Истина, то вернет только те ЭСФ, которые уже есть в ИБ.
//   Если Ложь, то верент ЭСФ которые есть в ИБ, а для тех, которых нет в ИБ создаст новые объекты ЭСФ, но не будет записывать их.
//  УчитыватьВсеСтатусыЭСФ - Булево - Если Истина, то массив будет включать все ЭСФ: 
//   Черновики, Импортированные, Ошибочные, Доставленные, Отправленные и т.д.
//   Если Ложь, то массив будет включать все ЭСФ, кроме Черновик, Ошибочный, Импортированный.
//
// Возвращаемое значение:
//  Массив - Массив найденных объектов ЭСФ. Каждый элемент массива имеет тип ДокументОбъект.ЭСФ.
//
Функция НовыйМассивЗагружаемыхЭДВС(Знач uFormInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеУТТН, Знач УчитыватьВсеСтатусыЭДВС)
	
	МассивЭДВС = Новый Массив;
	
	// Создать массив идентификаторов Invoice.
	МассивИдентификаторов = Новый Массив;
	Для Каждого uFormInfo Из uFormInfoList Цикл
		
		Если УчитыватьВсеСтатусыЭДВС Тогда
			
			МассивИдентификаторов.Добавить(uFormInfo.uFormId);
			
		Иначе
			
			Статус = ВСКлиентСервер.СтатусИБ(uFormInfo.Status);
						
			ТекстФормы = uFormInfo.uFormBody;
			uForm = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ТекстФормы, ФабрикаXDTO);
			Отправитель = ЭСФСервер.ПолучитьСвойство(uForm, "sender", Неопределено);
			Получатель =  ЭСФСервер.ПолучитьСвойство(uForm, "recipient", Неопределено);
			ТипФормы = ЭСФСервер.ПолучитьСвойство(uForm, "type", "");

			Если Отправитель <> Неопределено И Получатель <> Неопределено Тогда
				
				ОтправительБИН = ЭСФСервер.ПолучитьСвойство(Отправитель, "tin", "");
				ПолучательБИН = ЭСФСервер.ПолучитьСвойство(Получатель, "tin", "");
				
				Если ЗначениеЗаполнено(ОтправительБИН) И ЗначениеЗаполнено(ПолучательБИН) И ОтправительБИН <> ПолучательБИН Тогда
					ОтправительПолучательОтличаются = Истина;
				Иначе
					ОтправительПолучательОтличаются = Ложь;
				КонецЕсли;	
			Иначе
				ОтправительПолучательОтличаются = Ложь;
			КонецЕсли;
			
			Если Статус <> Перечисления.СтатусыУТТН.Черновик 
				И Статус <> Перечисления.СтатусыУТТН.Ошибочный
				//так же не будем получать формы с типом операции Реорганизация.
				//Не получаем формы где получатель и отправитель отличаются кроме формы Внутреннее перемещение
				И ТипФормы <> "REORGANIZATION" 
				И (НЕ ОтправительПолучательОтличаются ИЛИ (ОтправительПолучательОтличаются И ТипФормы = "MOVEMENT")) Тогда
								
				МассивИдентификаторов.Добавить(uFormInfo.uFormId);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихЭДВС = НайтиСуществующиеУТТНПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов ЭСФ.
	// Если ТолькоСуществующиеЭСФ, то только старых объектов ЭСФ.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихЭДВС Цикл                       		
		ИдентификаторЭДВС = ЭлементКоллекции.Ключ;
		СсылкаЭДВС = ЭлементКоллекции.Значение;
		
		Если СсылкаЭДВС.Пустая() Тогда
			Если НЕ ТолькоСуществующиеУТТН Тогда
				ОбъектЭДВС = Документы.ЭлектронныйДокументВС.СоздатьДокумент();
				ОбъектЭДВС.Идентификатор = ИдентификаторЭДВС;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ОбъектЭДВС.Автор = ТекущийПользователь;
				
				МассивЭДВС.Добавить(ОбъектЭДВС);
			КонецЕсли;
		Иначе
			МассивЭДВС.Добавить(СсылкаЭДВС.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	// Отключить проверку даты запрета изменения при записи ЭСФ.
	// Отключить очистку некоторых полей при обновлении (в момент копирования документа)
	Для Каждого ОбъектЭДВС Из МассивЭДВС Цикл
		ОбъектЭДВС.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
		ОбъектЭДВС.ДополнительныеСвойства.Вставить("ОбновлениеЭДВС", Истина);
	КонецЦикла;
	
	Возврат МассивЭДВС;
	
КонецФункции

Функция НайтиuFormInfoПоId(Знач uFormInfoList, Знач id)
	
	НайденныйuttnInfo = Неопределено;
	
	Для Каждого ТекущийuFormInfo Из uFormInfoList Цикл
		Если ТекущийuFormInfo.uFormId = id Тогда
			НайденныйuFormInfo = ТекущийuFormInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйuFormInfo;
	
КонецФункции

Функция ДанныеСтатусаuForm(Знач uFormSummaryXDTO)
	                 
	ДанныеСтатуса = Новый Структура;
	
	ДанныеСтатуса.Вставить("Идентификатор", Формат(uFormSummaryXDTO.uFormId, "ЧГ="));
	
	cancelReason = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "cancelReason", "");
	ДанныеСтатуса.Вставить("Причина", cancelReason);
	
	date = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "date", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаВыписки", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомер", registrationNumber);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	number = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "number", "");				
	ДанныеСтатуса.Вставить("Номер", number);
	
	status = ЭСФСервер.ПолучитьСвойство(uFormSummaryXDTO, "status", "");
	ДанныеСтатуса.Вставить("Статус", ВСКлиентСервер.СтатусИБ(status));
	
	// На данный момент из ИС ЭСФ удален пользовательский статус (state).
	// Пользовательский статус не удален из конфигурации, т.к. есть вероятность, что его вернут в ИС ЭСФ. 
	//ДанныеСтатуса.Вставить("ПользовательскийСтатус", Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка());
	
	Возврат ДанныеСтатуса;
	
КонецФункции

Функция ДанныеОшибкиuForm(Знач uFormErrorInfoListXDTO, ТаблицаЛокализацииОшибок = Неопределено)
	                 
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.ЭлектронныйДокументВС.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле",  Метаданные.Документы.ЭлектронныйДокументВС.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	ДанныеОшибки.Вставить("Идентификатор", Формат(uFormErrorInfoListXDTO.uFormId, "ЧГ="));
	
	
	errors = ЭСФСервер.ПолучитьСвойство(uFormErrorInfoListXDTO.errors, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
				ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
				Если ПустаяСтрока(ОшибкаТекст) Тогда
					Если ТаблицаЛокализацииОшибок = Неопределено Тогда
						ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
					КонецЕсли;
					ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
					ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
					ОшибкаТекст = ОшибкаТекст.ТекстИБ;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаОшибок.Добавить();
				СтрокаТаблицы.Поле = ОшибкаПоле;
				СтрокаТаблицы.Текст = ОшибкаТекст;
			
			КонецЦикла;
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);

	КонецЕсли;
				
	Возврат ДанныеОшибки;
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеФормВС

Процедура ОбновитьДокументыУТТНИзВС(Знач МассивУТТН, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыВС = ВССерверПовтИсп.ПолучитьПараметрыЭДВС();
	ВерсияИСВС = Неопределено; //ПараметрыЭСФ.ВерсияИСЭСФ;
	
		
	НачатьТранзакцию();
	
	Попытка
		МассивЭДВСДляПолученияИдентификаторов = Новый Массив;
 		ОбновитьДокументыВСПоИдентификатору(МассивУТТН, ДанныеПрофиляИСЭСФ, ВерсияИСВС, МассивЭДВСДляПолученияИдентификаторов);
		
		// Обновим состояние у ЭСФ со статусом НеПолучениОтветОтСервера
		МассивБезОтветаОтСервера = Новый Массив;
		
		ЗафиксироватьТранзакцию();
		
		Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() Тогда
			ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(МассивЭДВСДляПолученияИдентификаторов, ДанныеПрофиляИСЭСФ);
		КонецЕсли;	
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыУТТНИзВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыВСПоИдентификатору(Знач МассивЭДВС, Знач ПрофильИСЭСФ, ВерсияВС, МассивЭДВСДляПолученияИдентификаторов = Неопределено) Экспорт
	
	ИдентификаторСессии = ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияВС);
			
	Если МассивЭДВС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакетаЭДВС = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВС.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВС.Идентификатор КАК Идентификатор,
	|	ЭлектронныйДокументВС.ТипФормы КАК ТипФормы,
	|	ЭлектронныйДокументВС.Статус
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)
	|	И НЕ ЭлектронныйДокументВС.Идентификатор = """"
	|ИТОГИ ПО
	|	ТипФормы";
	
	Запрос.УстановитьПараметр("МассивЭДВС", МассивЭДВС);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		СписокИдентификаторов = "";
		
		КоличествоЭДВС = Выборка.Количество();
		
		СчетчикЭДВС = 0;
		
		МассивИдентификаторовНайденныхЭДВС = Новый Массив;
		
 		Пока Выборка.Следующий() Цикл
			
			// считаем общее количество ЭСФ
			СчетчикЭДВС = СчетчикЭДВС + 1;
			
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				
				СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""[ВС]"" не удалось обновить из Виртуального Склада, так как в документе не заполнен реквизит ""Идентификатор"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ВС]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭДВС%ПредельныйРазмерПакетаЭДВС = 0 ИЛИ СчетчикЭДВС = КоличествоЭДВС) Тогда
				Продолжить;
			КонецЕсли;				
			
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				
				/////////////////////////////////////////////////////////////////////////////
				// Создать и выполнить запрос к API ИС ЭСФ.
				
				ЗапросXML = ПолучитьМакет("ЗапросВСqueryUFormById").ПолучитьТекст();
				ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
 				ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
				ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService(), , ВерсияВС); 
				
				
				
				
				/////////////////////////////////////////////////////////////////////////////
				// Обработать результат запроса к API ИС ЭСФ.
				
				ИнформацияОбОшибке = Неопределено;
				Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
					
					Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
					Иначе
						ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
					КонецЕсли;
										
					uFormInfoList = ОтветXDTO.Body.queryUFormByIdResponse.uFormInfoList;
					uFormInfoList = ЭСФСервер.ПолучитьСвойство(uFormInfoList, "uFormInfo", Неопределено); 
					
					Если uFormInfoList <> Неопределено Тогда					
						
						uFormInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(uFormInfoList);
						СоздатьОбновитьПолучаемыеЭДВС(uFormInfoList, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина,, МассивЭДВСДляПолученияИдентификаторов);
						                                      				
						
						//////////////////////////////////////////////////////////////////////////
						// Сообщить пользователю, если не удалось найти ЭСФ по идентификатору.
						
						// Создать и заполнить массив идентификаторов ЭСФ, которые удалось найти в ИС ЭСФ.
						Для Каждого uFormInfo Из uFormInfoList Цикл
							ИдентификаторЭДВС = ЭСФСервер.ПолучитьСвойство(uFormInfo, "UFormId", "");
							Если ЗначениеЗаполнено(ИдентификаторЭДВС) Тогда
								МассивИдентификаторовНайденныхЭДВС.Добавить(ИдентификаторЭДВС);
							КонецЕсли;
						КонецЦикла;
												
					КонецЕсли;
									
				Иначе
					
					ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоИдентификатору'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					
				КонецЕсли;
				
				ВыполнялосьОбращениеКСерверу = Истина;	
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			СписокИдентификаторов = "";
			
		КонецЦикла;
				
	КонецЦикла;
	
	ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	
КонецПроцедуры

#КонецОбласти 

#Область ОтменаФормВС

// См. ВССервер.СоздатьЗапросНаИзменениеСтатусов()          
Функция СоздатьЗапросНаИзменениеСтатусовВС(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	// Сформировать текст запроса.
	ТекстЗапроса = ПолучитьМакет("ЗапросНаИзменениеСтатусовЭДВС").ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);
	
	// Заполнить параметр [Действие].
	Если Действие = ВСКлиентСервер.ДействиеОтмена() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Действие]", "cancel");




	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.СоздатьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
	КонецЕсли;
	
	ВсеUFormIdWithReason = "";
	ШаблонUFormIdWithReason = "<uFormIdWithReason><id>[id]</id><reason>[reason]</reason></uFormIdWithReason>";	
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл
		id 						= ЭлементКоллеции.Ключ;
		reason 					= ЭлементКоллеции.Значение;
		UFormIdWithReason 		= ШаблонUFormIdWithReason;
		UFormIdWithReason 		= СтрЗаменить(UFormIdWithReason, "[id]", id);
		UFormIdWithReason 		= СтрЗаменить(UFormIdWithReason, "[reason]", СокрЛП(reason));
		ВсеUFormIdWithReason 	= ВсеUFormIdWithReason + UFormIdWithReason;		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[uFormIdWithReason]", ВсеUFormIdWithReason);
	
	// Сформировать строку для создания ЭЦП.
	ВсеIdsWithReasons = "";
	ШаблонIdsWithReasons = "<idWithReason><id>[id]</id><reason>[reason]</reason></idWithReason>";		
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл	
		id 						= ЭлементКоллеции.Ключ;
		reason 					= ЭлементКоллеции.Значение;		
		idsWithReasons 			= ШаблонIdsWithReasons;
		idsWithReasons 			= СтрЗаменить(idsWithReasons, "[id]", id);
		idsWithReasons 			= СтрЗаменить(idsWithReasons, "[reason]", СокрЛП(reason));		
		ВсеIdsWithReasons 		= ВсеIdsWithReasons + idsWithReasons;
	КонецЦикла;	
	СтрокаДляПодписи = СтрЗаменить("<signedContent xmlns:vstore=""namespace.vstore""><idsWithReasons>[idsWithReasons]</idsWithReasons></signedContent>", "[idsWithReasons]", ВсеIdsWithReasons);
	
	Результат = Новый Структура("ТекстЗапроса, СтрокаДляПодписи", ТекстЗапроса, СтрокаДляПодписи);
	
	Возврат Результат;
	
КонецФункции

// См. ВССервер.ВыполнитьЗапросНаИзменениеСтатусовВС() 
Функция ВыполнитьЗапросНаИзменениеСтатусовВС(Знач Действие, Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ВССервер.ОткрытьСессию(ПрофильИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаUFormWebService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ИменаЭлементовРезультата = "ТекущийСтатус, СтатусИзменился, Ошибка";
		ИменаЭлементовОшибки = "Есть, Код, Представление, Расшифровка";
		
		// Выполнить начальное заполнение результата по ЗапросXML.
		КоллекцияРезультатов = Новый Соответствие;
		ЗапросXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ЗапросXML, ФабрикаXDTO);
		ИмяУзла = ЗапросXDTO.Body.Свойства()[0].Имя;
		uFormIdWithReasonList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ЗапросXDTO.Body[ИмяУзла].idWithReasonList.uFormIdWithReason);
		Для Индекс = 0 По uFormIdWithReasonList.Количество() - 1 Цикл
			uFormIdWithReason 	= uFormIdWithReasonList.Получить(Индекс);	
			Идентификатор 		= uFormIdWithReason.id;
			Результат = Новый Структура(ИменаЭлементовРезультата);
			Результат.СтатусИзменился = Ложь;
			
			Результат.Ошибка 				= Новый Структура(ИменаЭлементовОшибки);
			Результат.Ошибка.Есть 			= Ложь;
			Результат.Ошибка.Код 			= "";
			Результат.Ошибка.Представление 	= "";
			Результат.Ошибка.Расшифровка 	= "";
			
			КоллекцияРезультатов.Вставить(Идентификатор, Результат);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИмяУзла = ОтветXDTO.Body.Свойства()[0].Имя;
		changeStatusResultList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body[ИмяУзла].resultList, "changeStatusResult", Неопределено);
		
		// Заполнить КоллекцияРезультатов, обновить документы ЭСФ.
		Если changeStatusResultList <> Неопределено Тогда
			
			changeStatusResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(changeStatusResultList);
			
			// Заполнить КоллекцияРезультатов.
			Для ИндексChangeStatusResultList = 0 По changeStatusResultList.Количество() - 1 Цикл
				
				Результат = Новый Структура(ИменаЭлементовРезультата);
				Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
				
				changeStatusResult = changeStatusResultList.Получить(ИндексChangeStatusResultList);	
				Результат.ТекущийСтатус = ДанныеСтатусаuForm(changeStatusResult.uFormSummary);				
				Результат.СтатусИзменился = ?(ВРег(changeStatusResult.isChanged) = "TRUE", Истина, Ложь);
				
				// Заполнить сведения об ошибке, если она произошла при изменении статуса.
 				КодОшибки = ЭСФСервер.ПолучитьСвойство(changeStatusResult, "errorCode", "");				
				Если КодОшибки <> "" Тогда	
					Результат.Ошибка.Есть 			= Истина;
					Результат.Ошибка.Код 			= КодОшибки;
					ДанныеОшибки 					= ДанныеОшибкиИзмененияСтатусаЭДВС(КодОшибки, Действие);
					Результат.Ошибка.Представление 	= ДанныеОшибки.Представление;
					Результат.Ошибка.Расшифровка 	= ДанныеОшибки.Расшифровка;
				Иначе
					Результат.Ошибка.Есть = Ложь;
				КонецЕсли;
								
				КоллекцияРезультатов.Вставить(Результат.ТекущийСтатус.Идентификатор, Результат);
				
			КонецЦикла;
			
			// Обновить документы ВС.
			КоллекцияСтатусовЭДВС = Новый Соответствие;
			Для Каждого ЭлементКоллекции ИЗ КоллекцияРезультатов Цикл
				КоллекцияСтатусовЭДВС.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ТекущийСтатус); 
			КонецЦикла;
			ОтразитьИзмененияСтатусовЭДВС(КоллекцияСтатусовЭДВС, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
		Если ЗакрытьСессию Тогда
			ВССервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.ВыполнитьЗапросНаИзменениеСтатусовВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отмене документа ВС возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

Функция ДанныеОшибкиИзмененияСтатусаЭДВС(Знач КодОшибки, Знач Действие)
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Код", КодОшибки);
	ДанныеОшибки.Вставить("Представление", "");
	ДанныеОшибки.Вставить("Расшифровка", "");
		
	// Заполнить представление ошибки.
	Если КодОшибки = "WRONG_STATUS" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный статус документа ВС'");	
		
	ИначеЕсли КодОшибки = "WRONG_TYPE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный тип документа ВС'");	
		
	ИначеЕсли КодОшибки = "WRONG_DATE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Истек срок возможности отмены документа ВС'");	
		
	Иначе
		
		ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
		ИнформацияОбОшибке = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, КодОшибки);
		ДанныеОшибки.Представление = ИнформацияОбОшибке.ТекстИБ;	
		
	КонецЕсли;
	
	// Заполнить расшифровку ошибки.
	Если КодОшибки = "WRONG_DATE" Тогда
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Истек срок возможности отмены документа ВС.'");	
		
	//ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтзыв() Тогда
	//	
	//ДанныеОшибки.Расшифровка = НСтр(
	//		"ru = 'Допускается отзывать только обычные ЭСФ, которые находятся в статусах ""Создан"" или ""Доставлен"".
	//		|Дополнительные ЭСФ и исправленные ЭСФ отзывать не допускается.'");
	//	
	// ИначеЕсли Действие = ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного()
	//	 ИЛИ Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
	//	
	//	 ДанныеОшибки.Расшифровка = НСтр(
	//		 "ru = 'Допускается отклонять отозванные ЭСФ, а также дополнительные и исправленные ЭСФ.
	//		 |Отклоняемый ЭСФ должен иметь статус ""Доставленный"" или ""Отозванный"".'");
					
	Иначе	
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Документ ВС имеет статус, который не позволяет выполнить выбранное действие.'");
		
	КонецЕсли;

		
	Возврат ДанныеОшибки;
		
КонецФункции

// Обновляет документы ВС, на основании новых данных ошибок формы.
//
// Параметры:
//  КоллекцияСтатусовЭДВС - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор формы ВС.
//   Значение - Струткруа - См. в описании функции ДанныеОшибкиuForm().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияОшибокЭДВС(Знач КоллекцияСтатусовЭДВС, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭДВС = НоваяВыборкаДанныеСтатусовЭДВС(КоллекцияСтатусовЭДВС, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовЭДВС.Следующий() Цикл
		
		НовыеДанныеОшибокЭДВС = КоллекцияСтатусовЭДВС.Получить(СтарыеДанныеСтатусовЭДВС.Идентификатор);  
		
		Если НовыеДанныеОшибокЭДВС <> Неопределено И НовыеДанныеОшибокЭДВС.Ошибки <> Неопределено Тогда
			
			ОбъектЭДВС = СтарыеДанныеСтатусовЭДВС.ЭДВС.ПолучитьОбъект();
			ОбъектЭДВС.Ошибки.Очистить();
			Ошибки = НовыеДанныеОшибокЭДВС.Ошибки;
			Для Каждого Строка из Ошибки Цикл
				ОшибкаПоле = Строка.Поле;
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = Строка.Текст;
				ОшибкиСтрока = ОбъектЭДВС.Ошибки.Добавить();
				ОшибкиСтрока.Поле = ОшибкаПоле;
				ОшибкиСтрока.Текст = ОшибкаТекст;
				
			КонецЦикла;
			
			
			
			
			ОбъектЭДВС.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
			ОбъектЭДВС.Записать();
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет документы ВС, на основании новых данных статусов.
//
// Параметры:
//  КоллекцияСтатусовЭДВС - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струткруа - См. в описании функции ДанныеСтатусаuForm().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияСтатусовЭДВС(Знач КоллекцияСтатусовЭДВС, Знач СтруктурнаяЕдиница)
	
	СтарыеДанныеСтатусовЭДВС = НоваяВыборкаДанныеСтатусовЭДВС(КоллекцияСтатусовЭДВС, СтруктурнаяЕдиница);		
	
	КоличествоОбновленных = 0;
	
	Пока СтарыеДанныеСтатусовЭДВС.Следующий() Цикл
		
		НовыеДанныеСтатусовЭДВС = КоллекцияСтатусовЭДВС.Получить(СтарыеДанныеСтатусовЭДВС.Идентификатор);  
		
		Если НовыеДанныеСтатусовЭДВС <> Неопределено Тогда
			
			ОбновитьЭДВС = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовЭДВС.Свойство("Ошибки") И НовыеДанныеСтатусовЭДВС.Ошибки.Количество() > 0;
			Если СтарыеДанныеСтатусовЭДВС.РегистрационныйНомер <> НовыеДанныеСтатусовЭДВС.РегистрационныйНомер Тогда
				ОбновитьЭДВС = Истина;
			КонецЕсли;
			
			Если  ЕстьОшибки Тогда
				ОбновитьЭДВС = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовЭДВС.Статус <> НовыеДанныеСтатусовЭДВС.Статус Тогда
				ОбновитьЭДВС = Истина;
			КонецЕсли;
			
			Если ОбновитьЭДВС Тогда
				КоличествоОбновленных = КоличествоОбновленных + 1;
				
				ОбъектЭДВС = СтарыеДанныеСтатусовЭДВС.ЭДВС.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовЭДВС.ДатаВыписки <> Дата(1, 1, 1)) И НовыеДанныеСтатусовЭДВС.ДатаВыписки <> НачалоДня(ОбъектЭДВС.Дата) Тогда
					ОбъектЭДВС.Дата = НовыеДанныеСтатусовЭДВС.ДатаВыписки;
					ОбъектЭДВС.УстановитьВремя();
				КонецЕсли;
										
				ОбъектЭДВС.РегистрационныйНомер = ?(ПустаяСтрока(НовыеДанныеСтатусовЭДВС.РегистрационныйНомер), ОбъектЭДВС.РегистрационныйНомер, НовыеДанныеСтатусовЭДВС.РегистрационныйНомер);
				ОбъектЭДВС.Статус 				= ?(НовыеДанныеСтатусовЭДВС.Статус = Перечисления.СтатусыУТТН.ПустаяСсылка(), ОбъектЭДВС.Статус, НовыеДанныеСтатусовЭДВС.Статус);
				
				Если ЕстьОшибки Тогда
					ОбъектЭДВС.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовЭДВС.Ошибки Цикл
						ОшибкиСтрока = ОбъектЭДВС.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
					
				// Отразить содержимое узла cancelReason.
				ИначеЕсли НЕ ПустаяСтрока(НовыеДанныеСтатусовЭДВС.Причина) Тогда
					
					Если ПустаяСтрока(НовыеДанныеСтатусовЭДВС.РегистрационныйНомер) Тогда
						
						ОшибкиСтрока = ОбъектЭДВС.Ошибки.Добавить();
						ОшибкиСтрока.Текст = НовыеДанныеСтатусовЭДВС.Причина;
						ОшибкиСтрока.Поле = "";
					КонецЕсли;
				КонецЕсли;
	
				Если НЕ ПустаяСтрока(НовыеДанныеСтатусовЭДВС.Причина) Тогда
		
					Если НовыеДанныеСтатусовЭДВС.Статус = Перечисления.СтатусыУТТН.Отмененный Тогда             
						
						ОбъектЭДВС.Причина = ПричинаИБ(НовыеДанныеСтатусовЭДВС.Причина);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбъектЭДВС.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектЭДВС.Записать();
				
				Если ОбъектЭДВС.Статус = Перечисления.СтатусыУТТН.Отмененный Тогда
					ОбъектЭДВС.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОбновленных > 0 Тогда
		ТекстСообщения =  НСтр("ru = 'Обновлены статусы отправленных документов.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтразитьИзмененияСтатусовЭДВС", "Информация", , , ТекстСообщения);
	Иначе	
		ТекстСообщения =  НСтр("ru = 'Статусы документов ЭДВС не изменены.'");
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтразитьИзмененияСтатусовЭДВС", "Информация", , , ТекстСообщения);
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает выборку, содержащую данные статусов существующих документов ВС.
//
// Параметры:
//  КоллекцияСтатусовЭДВС - Соответствие - Статусы, для которых необходимо получить статусы документов ВС. 
//   |- Ключ - Строка - Идентификатор ЭДВС.
//   |- Значение - Структура - Данные статуса, см. в описании функции ДанныеСтатусаuForm().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов. 
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка, содержащая все идентификаторы  
//   из КоллекцияСтатусовЭДВС и данные статусов существующих ЭДВС.
//
Функция НоваяВыборкаДанныеСтатусовЭДВС(Знач КоллекцияСтатусовЭДВС, Знач СтруктурнаяЕдиница)
		
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.ЭлектронныйДокументВС.Реквизиты.Идентификатор.Тип);	
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовЭДВС Цикл
		СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
		СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВС.Идентификатор КАК Идентификатор,
	|	ЭлектронныйДокументВС.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВС.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ЭлектронныйДокументВС.Статус КАК Статус,
	|	ЭлектронныйДокументВС.Организация КАК Организация
	|ПОМЕСТИТЬ ЭДВС
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	ЭДВС.Ссылка КАК ЭДВС,
	|	ЭДВС.РегистрационныйНомер,
	|	ЭДВС.Статус,
	|	ЭДВС.Организация
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭДВС КАК ЭДВС
	|		ПО Идентификаторы.Идентификатор = ЭДВС.Идентификатор";
	
	//Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение,", "");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЭСФ.СтруктурноеПодразделение = &СтруктурноеПодразделение", "");
	//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭСФ.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти 

#Область ПоискЭДВС

// См. ЭСФСервер.НайтиСуществующиеЭСФПоИдентификаторам()
Функция НайтиСуществующиеУТТНПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
		
	// Создать пустую таблицу параметров поиска ЭСФ.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовУТТН = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭлектронныйДокументВС);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеУТТН = ПараметрыПоискаДокументовУТТН.Добавить();
		ОписаниеУТТН.Идентификатор = Идентификатор;
		ОписаниеУТТН.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыУТТН = НайтиСсылкиЭДВСПоЗначениямРеквизитов(ПараметрыПоискаДокументовУТТН, Метаданные.Документы.ЭлектронныйДокументВС, ИдентификационныйНомер);
	
	СуществующиеУТТН = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.ЭлектронныйДокументВС.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеУТТН.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы ЭСФ, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыУТТН Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиЭДВСПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиЭДВСПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеУТТН.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеУТТН.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеУТТН;
	
КонецФункции

// Находит ссылки на документы, справочники и т.д. по переданным значениям реквизитов.
//
// Параметры:
//  ЗначенияРеквизитов - ТаблицаЗначений - Параметры поиска ссылок.
//   Колонки - Имена реквизитов. 
//   Строки - Значения реквизитов.    
//   Для формирования параметра можно использовать: ЭСФСервер.НовыеПараметрыПоискаСсылок().
//  ОбъектМетаданных - ОбъектМетаданных - Объект, ссылки на элементы которого необходимо найти. 
//   Например, Метаданные.Документы.ЭСФ, если необходимо найти ссылки на документы ЭСФ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные ссылки.
//   Содержит все колонки и строки из таблицы ЗначенияРеквизитов,
//    а также колонку "НайденнаяСсылка", в которой находятся найденные ссылки.
//   Если объекта, удовлетворяющих условиям поиска не найдено, 
//    то в колонке ""НайденнаяСсылка"" содержится пустая ссылка на ОбъектМетаданных.
//   Если найдено несколько объектов, удовлетворяющих условиям поиска,
//    то в таблице будет несколько строк, с одинаковыми значениями реквизитов, но разными ссылками.
//
// Пример:
//  // Найти документы ЭСФ, которые имеют комбинацю номера и даты: 
//  // ("0001" и '2014-01-01') или ("0002" и '2014-02-02').
//  ПараметрыПоиска = ЭСФСервер.НовыеПараметрыПоискаСсылок("Номер, Дата", Метаданные.Документы.ЭСФ);
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0001";
//  СтрокаПараметровПоиска.Дата = '2014-01-01';
//  СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
//  СтрокаПараметровПоиска.Номер = "0002";
//  СтрокаПараметровПоиска.Дата = '2014-02-02';
//  НайденныеСсылки = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСсылкиЭДВСПоЗначениямРеквизитов(ПараметрыПоиска, Метаданные.Документы.ЭСФ);
//
Функция НайтиСсылкиЭДВСПоЗначениямРеквизитов(Знач ЗначенияРеквизитов, Знач ОбъектМетаданных, Знач ИдентификационныйНомер = Неопределено) Экспорт
	
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	ИмяВидаОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1); // "Документ", "Справочник" и т.д.
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	// Сформировать массив имен реквизитов.
	МассивИменРеквизитов = Новый Массив;
	Для Каждого Колонка Из ЗначенияРеквизитов.Колонки Цикл
		МассивИменРеквизитов.Добавить(Колонка.Имя);	
	КонецЦикла;
	
	// Подготовить строку запроса %ИменаРеквизитов%.
	ИменаРеквизитов = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		ИменаРеквизитов = ИменаРеквизитов + "ЗначенияРеквизитов." + ИмяРеквизита + ", ";	
	КонецЦикла;
	Если Прав(ИменаРеквизитов, 2) = ", " Тогда
		ИменаРеквизитов = Сред(ИменаРеквизитов, 1, СтрДлина(ИменаРеквизитов) - 2);	
	КонецЕсли;
	
	// Подготовить строку запроса %УсловияСоединения%.
	УсловияСоединения = "";
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
		Условие = СтрЗаменить(Условие, "%ИмяОбъекта%", ИмяОбъекта);
		Условие = СтрЗаменить(Условие, "%ИмяРеквизита%", ИмяРеквизита);
		УсловияСоединения = УсловияСоединения + Условие + " И ";	
	КонецЦикла;	
	Если Прав(УсловияСоединения, 3) = " И " Тогда
		УсловияСоединения = Сред(УсловияСоединения, 1, СтрДлина(УсловияСоединения) - 3);	
	КонецЕсли;
	
	// Сформировать текст запроса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%
	|ПОМЕСТИТЬ ЗначенияРеквизитов
	|ИЗ
	|	&ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	%ИменаРеквизитов%,
	|	ЕСТЬNULL(%ИмяОбъекта%.Ссылка, ЗНАЧЕНИЕ(%ИмяВидаОбъекта%.%ИмяОбъекта%.ПустаяСсылка)) КАК НайденнаяСсылка
	|ИЗ
	|	ЗначенияРеквизитов КАК ЗначенияРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВидаОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
	|		ПО (%УсловияСоединения%)";	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИменаРеквизитов%",   ИменаРеквизитов);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияСоединения%", УсловияСоединения);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%",        ИмяОбъекта);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВидаОбъекта%",    ИмяВидаОбъекта);	
	Запрос.УстановитьПараметр("ЗначенияРеквизитов", ЗначенияРеквизитов);
	
	РезультатПоиска = Запрос.Выполнить().Выгрузить();
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.
	// Работает только для документов ЭСФ, для остальных объектов переменная ОтборПоСтруктурнойЕдинице должна быть Неопределено.
	
	Если ИдентификационныйНомер <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронныйДокументВС.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|ГДЕ
		|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)";
		//|	И ЭлектронныйДокументВС.ПоставщикИдентификатор = &ИдентификационныйНомер" ;

		
		Запрос.УстановитьПараметр("МассивЭДВС", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		
		ТаблицаЭСФПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
		МассивЭСФПринадлежащихСтруктурнойЕдинице = ТаблицаЭСФПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
		
		// Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.			
		Для Каждого СтрокаРезультата Из РезультатПоиска Цикл				
			Если МассивЭСФПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда						
				
				// Если Истина, значит ЭСФ не принадлежит указанной структурной единице,
				// поэтому ссылку на данный ЭСФ нужно очистить.
				СтрокаРезультата.НайденнаяСсылка = Документы.ЭлектронныйДокументВС.ПустаяСсылка();;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат РезультатПоиска;
	
КонецФункции

#КонецОбласти 

#Область ПолучениеСозданиеСкладовВС

Функция ПолучитьСклады(ПрофильИСЭСФ, ВерсияВС = Неопределено) Экспорт
	
	ИдентификаторСессии = ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияВС);
	
	Если ВерсияВС = Неопределено Тогда
		ПараметрыЭСФ = ВСВызовСервераПовтИсп.ПолучитьПараметрыВС();
		ВерсияВС = ПараметрыЭСФ.ВерсияВС;
	КонецЕсли;	
		
	Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
		Макет = ПолучитьМакет("ЗапросВСtaxpayerStoreListRequest_Версия1");
	Иначе
		Макет = ПолучитьМакет("ЗапросВСtaxpayerStoreListRequest_Версия1");
	КонецЕсли;		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",        ИдентификаторСессии);
		
	ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапроса, ИмяСервисаTaxPayerStoreService(), , ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
				
		ОтветXDTO = НайтиНужныйУровень("taxpayerStore",ОтветXDTO);	
		ОтветXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОтветXDTO);
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПолучитьСклады'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении виртуальных складов из ИС ЭСФ произошла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПолучитьСклады'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Идентификатор сессии: " + ИдентификаторСессии);
			
	ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	
	Возврат ОтветXDTO;
	
КонецФункции

// Возвращает коллекцию ЭСФ, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Коллекция ЭСФ, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьВСПоСтруктурнымЕдиницам(Знач МассивВС, ОткрыватьСессиюФилиаломПолучателем = Ложь) Экспорт
	
	КоллекцияСгруппированныхВС = Новый Соответствие;
	
	Если ТипЗнч(МассивВС) = Тип("СправочникСсылка.ВиртуальныеСклады") Тогда
		
	Если МассивВС.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВиртуальныхСкладов.Активен") 
		ИЛИ МассивВС.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВиртуальныхСкладов.Неактивен") Тогда
		НовыйМассивВС = Новый Массив;
		НовыйМассивВС.Добавить(МассивВС);
		КоллекцияСгруппированныхВС.Вставить(МассивВС.Организация, НовыйМассивВС);
	Конецесли;
	//Возврат КоллекцияСгруппированныхВС;
	
	ИначеЕсли ТипЗнч(МассивВС) = Тип("Массив") Тогда
	
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВиртуальныеСклады.Организация КАК СтруктурнаяЕдиница,
	               |	ВиртуальныеСклады.Ссылка КАК ВиртуальныйСклад
	               |ИЗ
	               |	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
	               |ГДЕ
	               |	ВиртуальныеСклады.Ссылка В(&МассивВиртуальныхСкладов)
				   |ИТОГИ ПО
	               |	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивВиртуальныхСкладов", МассивВС);
	Запрос.УстановитьПараметр("ОткрыватьСессиюФилиаломПолучателем", ОткрыватьСессиюФилиаломПолучателем);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//КоллекцияСгруппированныхВиртуальныхСкладов = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивВиртуальныхСкладов = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивВиртуальныхСкладов.Добавить(ВыборкаДетальныеЗаписи.ВиртуальныйСклад);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхВС.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивВиртуальныхСкладов);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В элементах справочника не указана организация:
			|%1'");
			
			СтрокаСписокВС = "";
			Для Каждого СсылкаВС Из СгруппированныйМассивВиртуальныхСкладов Цикл
				СтрокаСписокВС = СтрокаСписокВС + "- " + СсылкаВС + Символы.ПС;
			КонецЦикла;
			СтрокаСписокВС = СокрЛП(СтрокаСписокВС);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокВС);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	КонецЕсли;
	
	Возврат КоллекцияСгруппированныхВС;

КонецФункции

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Функция ОбновитьСтатусВСПоИдентификатору(Знач ИдентификаторСтатус, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	storeId = "";
	actionType = "";	
	Если ЗначениеЗаполнено(ИдентификаторСтатус.Идентификатор) Тогда
		storeId = Формат(ИдентификаторСтатус.Идентификатор, "ЧГ=");
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИдентификаторСтатус.Статус) Тогда
		Если  ИдентификаторСтатус.Статус = Перечисления.СтатусыВиртуальныхСкладов.Активен Тогда
			actionType = "DEACTIVATE";
		ИначеЕсли ИдентификаторСтатус.Статус = Перечисления.СтатусыВиртуальныхСкладов.Неактивен Тогда
			actionType = "ACTIVATE";
		КонецЕсли;
		
	КонецЕсли;	
	
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросВСquerytaxpayerStoreChangeStatusRequest").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[storeId]", storeId);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[actionType]", actionType);
	
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаTaxPayerStoreService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		summaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.taxpayerStoreChangeStatusResponse, "summaryList", Неопределено);
		
		Если summaryList <> Неопределено Тогда
			
			ErrorList = ЭСФСервер.ПолучитьСвойство(summaryList, "ErrorList", Неопределено);
			
			Если ErrorList <> Неопределено Тогда
				
				ErrorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ErrorList);
				
				МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
				// Заполнить Результат.
				Для Индекс = 0 По ErrorList.Количество() - 1 Цикл
					Error = ErrorList.Получить(Индекс);
					ОшибкаError = ЭСФСервер.ПолучитьСвойство(error, "error", Неопределено);
					ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
					ОшибкаКод = ЭСФСервер.ПолучитьСвойство(ОшибкаError, "errorCode", "");
					ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
					ОшибкаТекст = ОшибкаТекст.ТекстИБ;
					ТекстСообщения =  ОшибкаТекст;
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОбновитьСтатусВСПоИдентификатору", "Информация", , , ТекстСообщения);
					
				КонецЦикла;
				
			Иначе
				ДанныеСтатуса = ДанныеСтатусаStore(summaryList);
				Если ДанныеСтатуса.СтатусИзменен Тогда
					ОтразитьИзмененияСтатусаВС(ДанныеСтатуса, ИдентификаторСтатус.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусВСПоИдентификатору'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При изменении статуса виртуального склада возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;                                       
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеСтатусаStore(Знач summaryList)
	                 
	ДанныеСтатуса = Новый Структура;
		
	ДанныеСтатуса.Вставить("Идентификатор", Число(summaryList.id));
	
	isStatusChanged = Булево(ЭСФСервер.ПолучитьСвойство(summaryList, "isStatusChanged", ""));
	ДанныеСтатуса.Вставить("СтатусИзменен", isStatusChanged);
		
	status = ЭСФСервер.ПолучитьСвойство(summaryList, "status", "");
	ДанныеСтатуса.Вставить("Статус", ВСКлиентСервер.СтатусСклада_ИБ(status));
		
	Возврат ДанныеСтатуса;
	
КонецФункции

Процедура ОтразитьИзмененияСтатусаВС(Знач ДанныеСтатуса, Ссылка)

	ВиртуальныйСклад = Ссылка.ПолучитьОбъект();
	ВиртуальныйСклад.Статус = ДанныеСтатуса.Статус;
	
	Попытка
		ВиртуальныйСклад.Записать();
		ТекстСообщения =  НСтр("ru = 'Обновлен статус виртуального склада.'");
	Исключение	
		ТекстСообщения =  НСтр("ru = 'Не удалось обновить статус виртуального склада.'");
	КонецПопытки;	
	
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтразитьИзмененияСтатусаВС", "Информация", , , ТекстСообщения);
	
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеСкладов

// Возвращает коллекцию Складов, сгруппированных по структурным единицам.
// Для группировки используются значение организация//
// Параметры:
//  МассивСкладов - Массив - Массив виртуальных складов, которые необходимо сгруппировать по структурным единицам.
//
// Возвращаемое значение:
//  Соответствие - Коллекция виртуальных складов, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив ЭСФ, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьСкладыПоСтруктурнымЕдиницам(Знач МассивСкладов) Экспорт
		
	Запрос = Новый Запрос;
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВиртуальныеСклады.Ссылка КАК Склад,
	               |	ВиртуальныеСклады.Организация КАК Организация
	               |ИЗ
	               |	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
	               |ГДЕ
	               |	ВиртуальныеСклады.Ссылка В(&МассивСкладов)
	               |	И ВиртуальныеСклады.ЭтоГруппа = Ложь
	               |ИТОГИ ПО
	               |	Организация";
	
	Запрос.УстановитьПараметр("МассивСкладов", МассивСкладов);
	
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхСкладов = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивСкладов = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивСкладов.Добавить(ВыборкаДетальныеЗаписи.Склад);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.Организация) Тогда
			
			КоллекцияСгруппированныхСкладов.Вставить(ВыборкаСтруктурнаяЕдиница.Организация, СгруппированныйМассивСкладов);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В складах не указана организация:
			|%1'");
			
			СтрокаСписокСклад = "";
			Для Каждого СсылкаСклад Из СгруппированныйМассивСкладов Цикл
				СтрокаСписокЭД = СтрокаСписокЭД + "- " + СсылкаСклад + Символы.ПС;
			КонецЦикла;
			СтрокаСписокСклад = СокрЛП(СтрокаСписокЭД);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокСклад);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхСкладов;
	
КонецФункции

Процедура ОбновитьСкладыИзВС(Знач МассивСкладов, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыВС = ВССерверПовтИсп.ПолучитьПараметрыЭДВС();
	ВерсияИСВС = Неопределено; 	
	
	НачатьТранзакцию();
	
	Попытка
		
		СкладыXDTO = ПолучитьСклады(ДанныеПрофиляИСЭСФ, ВерсияИСВС);
		
		//Создадим и заполним соответствие для дальнейшего поиска нужных
		СоотвествиеПолученныхСкладов = Новый соответствие;
		Для Каждого СкладXDTO Из СкладыXDTO Цикл
			Если СкладXDTO <> Неопределено И СкладXDTO.Свойства().Получить("id") <> Неопределено Тогда
				СоотвествиеПолученныхСкладов.Вставить(Число(СкладXDTO.id), СкладXDTO);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Склад Из МассивСкладов Цикл
			ПолученныйСклад = СоотвествиеПолученныхСкладов[Склад.ИдентификаторСклада];
			Если ПолученныйСклад = Неопределено Тогда
			
				Если Склад.Статус <> Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС Тогда
					ОбъектСклад = Склад.ПолучитьОбъект();
					ОбъектСклад.Статус = Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС;
					ОбъектСклад.Записать();
										
					ТекстСообщения =  НСтр("ru = 'Склад %Склад% не найден на сервере. Статус склада установлен на ""%СинонимНеСозданНаВС%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", СокрЛП(ОбъектСклад.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СинонимНеСозданНаВС%", Строка(Перечисления.СтатусыВиртуальныхСкладов.НеСозданВС));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли
				
			Иначе
				ЕстьИзменения = Ложь;
				ОбновленныеПоля = Новый Массив;
				
				ОбъектСклад = Склад.ПолучитьОбъект();
				
				Если НЕ ОбъектСклад.Наименование = ПолученныйСклад.storeName Тогда
					ОбъектСклад.Наименование = ПолученныйСклад.storeName;	
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Наименование");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.ПризнакОприходования = Булево(ПолученныйСклад.isPostingGoods) Тогда
					ОбъектСклад.ПризнакОприходования = Булево(ПолученныйСклад.isPostingGoods);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Признак оприходования");
				КонецЕсли;
				
				//Если НЕ ОбъектСклад.ПризнакПубличногоСклада = Булево(ПолученныйСклад.isPublicStore) Тогда
				//	ОбъектСклад.ПризнакПубличногоСклада = Булево(ПолученныйСклад.isPublicStore);
				//	ЕстьИзменения = Истина;
				//	ОбновленныеПоля.Добавить("Признак публичного склада");
				//КонецЕсли;
				
				Если НЕ ОбъектСклад.ПереработкаДавальческогоСырья = Булево(ПолученныйСклад.isRawMaterials) Тогда
					ОбъектСклад.ПереработкаДавальческогоСырья = Булево(ПолученныйСклад.isRawMaterials);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Переработка давальческого сырья");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.СкладУСД = Булево(ПолученныйСклад.isJointStore) Тогда
					ОбъектСклад.СкладУСД = Булево(ПолученныйСклад.isJointStore);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Склад УСД");
				КонецЕсли;
				
				address = ЭСФСервер.ПолучитьСвойство(ПолученныйСклад, "address", "");			
				Если ЗначениеЗаполнено(address) И НЕ ОбъектСклад.Адрес = ПолученныйСклад.address Тогда
					ОбъектСклад.Адрес = ПолученныйСклад.address;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Адрес");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.СкладРеорганизуемогоЛица = Булево(ПолученныйСклад.isInherited) Тогда
					ОбъектСклад.СкладРеорганизуемогоЛица = Булево(ПолученныйСклад.isInherited);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Склад реорганизуемого лица");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.СкладДляЛизинга = Булево(ПолученныйСклад.isCooperativeStore) Тогда
					ОбъектСклад.СкладДляЛизинга = Булево(ПолученныйСклад.isCooperativeStore);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Склад для лизинга");
				КонецЕсли;

				lesseeTin  = ЭСФСервер.ПолучитьСвойство(ПолученныйСклад, "lesseeTin", "");			
				Если ЗначениеЗаполнено(lesseeTin) И НЕ ОбъектСклад.БИНЛизингополучателя = ПолученныйСклад.lesseeTin  Тогда
					ОбъектСклад.БИНЛизингополучателя = ПолученныйСклад.lesseeTin ;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("БИН/ИИН лизингополучателя");
				КонецЕсли;
				
				lesseeContractNumber = ЭСФСервер.ПолучитьСвойство(ПолученныйСклад, "lesseeContractNumber", "");			
				Если ЗначениеЗаполнено(lesseeContractNumber) И НЕ ОбъектСклад.НомерДоговораЛизингополучателя = ПолученныйСклад.lesseeContractNumber Тогда
					ОбъектСклад.НомерДоговораЛизингополучателя = ПолученныйСклад.lesseeContractNumber;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Номер договора лизингополучателя");
				КонецЕсли;
				
				ДатаДоговораЛизингополучателя = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(ПолученныйСклад, "lesseeContractDate", "01.01.0001"));
				Если ЗначениеЗаполнено(ДатаДоговораЛизингополучателя) И ОбъектСклад.ДатаДоговораЛизингополучателя <> ДатаДоговораЛизингополучателя  Тогда
					ОбъектСклад.ДатаДоговораЛизингополучателя = ДатаДоговораЛизингополучателя;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Дата договора лизингополучателя");
				КонецЕсли;
						
				ТипСкладаВС = ВСКлиентСервер.ТипСклада_ИБ(ПолученныйСклад.storeTypeCode);
				Если НЕ ОбъектСклад.ТипСклада = ТипСкладаВС Тогда
					ОбъектСклад.ТипСклада = ТипСкладаВС;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Тип склада");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.ЯвляетсяСкладомПоУмолчанию = Булево(ПолученныйСклад.isDefault) Тогда
					ОбъектСклад.ЯвляетсяСкладомПоУмолчанию = Булево(ПолученныйСклад.isDefault);
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Является складом по умолчанию");
				КонецЕсли;
				
				Если НЕ ОбъектСклад.ИИНОтветственногоЛица = ПолученныйСклад.responsiblePersonIin Тогда
					ОбъектСклад.ИИНОтветственногоЛица = ПолученныйСклад.responsiblePersonIin;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("ИИН ответственного лица");
				КонецЕсли;
				
				СтатусВС = ВСКлиентСервер.СтатусСклада_ИБ(ПолученныйСклад.status);
				Если НЕ ОбъектСклад.Статус = СтатусВС Тогда
					ОбъектСклад.Статус = СтатусВС;
					ЕстьИзменения = Истина;
					ОбновленныеПоля.Добавить("Статус");
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектСклад.Записать();	
					
					ТекстСообщения =  НСтр("ru = 'У склада %Склад% обновлены поля: %ОбновленныеПоля%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", СокрЛП(ОбъектСклад.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбновленныеПоля%", СтрСоединить(ОбновленныеПоля, ", "));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения =  НСтр("ru = 'Успешно получена информация по складу %Склад%, данные в ИБ соостветствуют ИС ЭСФ.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", СокрЛП(ОбъектСклад.Ссылка));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОбновитьСкладыИзВС'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеНоменклатурыГСВС
// Запрос к серверу ВС
// ПараметрыМетода = Новый Структура("НачальнаяПозиция,КонечнаяПозиция,РазмерПорции", 0,0,1000); 
Функция ПолучитьДанныеСправочникаГСВС(ИдентификаторСессии, ПараметрыМетода, ВерсияВС = Неопределено) Экспорт
	Макет = ПолучитьМакет("ЗапросВСGsvsUpdatesRequest");
	
	Если ВерсияВС = Неопределено Тогда		
		ВерсияВС = "5.0.0";
	КонецЕсли;		
	
	ТекстЗапроса = Макет.ПолучитьТекст();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[sessionId]",     ИдентификаторСессии);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[lastChangeId]",  ПараметрыМетода.НачальнаяПозиция);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[blockSize]",     ПараметрыМетода.РазмерПорции);
		
	ОтветXML = ВыполнитьМетодВебСервисаВС(ТекстЗапроса, ИмяСервисаDictWebServiceSoapBinding(), , ВерсияВС);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
				
		//ОтветXDTO = НайтиНужныйУровень("gsvsUpdatesResponse",ОтветXDTO);	
		//
		//ОтветXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(ОтветXDTO);
	ИначеЕсли ЭтоМодульнаяОшибкаЕстьАктивнаяСессиия(ОтветXML) Тогда
		ОшибкаОткрытияСессии = НСтр(
		"ru = 'При входе в модуль Виртуального склада ИС ЭСФ возникла ошибка: для пользователя уже есть активная сессия, открытие новой сессии невозможно.
		|
		|Возможные причины:
		|- С вашим ключом аутентификации в настоящее время в системе ИС ЭСФ уже работает другой пользователь.
		|Чтобы избежать проблемы, используйте личный ключ аутентификации и не передавайте его третьим лицам.		
		|
		|- Вы уже инициировали какое-то длительное действие в системе ИС ЭСФ и оно еще не завершено.
		|Дождитесь завершения ранее начатого процесса, чтобы открыть новую сессию.
		|
		|- Вы инициировали подключение к ИС ЭСФ ранее, но по каким-то причинам (например, в результате технических проблем)
		|сессия не была закрыта автоматически после завершения действия пользователя в ИС ЭСФ.		
		|Попробуйте повторить действие позднее. Неактивные сессии закрываются системой автоматически в течение 5 минут.'");
		
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение ОшибкаОткрытияСессии;
		
	Иначе
		// прочие неклассифицированные ошибки
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При входе в ВС ИС ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменВС.ОткрытьСессию'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Идентификатор сессии: " + ИдентификаторСессии);

	Возврат ОтветXDTO;
	
КонецФункции

Функция НоваяТаблицаДанныхГСВС() Экспорт
	// типы
	КвалификаторСтроки25 = Новый КвалификаторыСтроки(25);
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", КвалификаторСтроки25);
	
	КвалификаторСтроки250 = Новый КвалификаторыСтроки(250);
	ОписаниеТиповСтрока250 = Новый ОписаниеТипов("Строка", КвалификаторСтроки250);
	
	КвалификаторСтроки1000 = Новый КвалификаторыСтроки(1000);
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", КвалификаторСтроки1000);
	
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", КвалификаторДаты);
		
	ТаблицаДанных = Новый ТаблицаЗначений();
	// Колонки должы быть типизированы для использования таблицы в запросе
	
	ТаблицаДанных.Колонки.Добавить("Идентификатор", ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("Событие", ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаДанных.Колонки.Добавить("ИдентификаторСобытия",Новый ОписаниеТипов("Число")); // для доп. сортировки в пределах одной даты 
	ТаблицаДанных.Колонки.Добавить("КодГСВС",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ПолныйКодГСВС",ОписаниеТиповСтрока25);
	//ТаблицаДанных.Колонки.Добавить("ТипЭлемента",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ТипКодаГСВС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКодовГСВС"));
	ТаблицаДанных.Колонки.Добавить("Комментарий",ОписаниеТиповСтрока1000);					
	ТаблицаДанных.Колонки.Добавить("Наименование",ОписаниеТиповСтрока250);		
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеRu",ОписаниеТиповСтрока1000);		
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеKz",ОписаниеТиповСтрока1000);
	ТаблицаДанных.Колонки.Добавить("ПолноеНаименованиеEn",ОписаниеТиповСтрока1000);
	ТаблицаДанных.Колонки.Добавить("ДействиеЗаписиНачальнаяДата", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("ДействиеЗаписиКонечнаяДата", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("НомерВерсии",ОписаниеТиповСтрока25);
	ТаблицаДанных.Колонки.Добавить("ДатаИзменения", ОписаниеТиповДата);
	ТаблицаДанных.Колонки.Добавить("ИдентификаторРодителя",ОписаниеТиповСтрока25);			
	ТаблицаДанных.Колонки.Добавить("ПризнакВозможностиВыбора", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУдаленияЗаписи", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакТовараДвойногоНазначения",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУникальногоТовара",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУчетаНаВиртуальномСкладе",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакПеречняИзьятий",Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПризнакУслуги",Новый ОписаниеТипов("Булево"));
	
	Возврат	ТаблицаДанных;
КонецФункции

Функция ИнициализироватьПараметрыЗагрузкиСправочникаГСВС(Знач Дозагрузка = Истина)	
	// Важно  - параметры методов синхронизации ГСВС устанавливаюся без данных Структурной единицы, так как распространяются на ИБ в целом.
	// У ГСВС теперь два варианта загрузки: с нуля и загрузка с учетом последнего получения.
	Если Дозагрузка Тогда
		ПараметрыМетодаСинхронизации = ЭСФСервер.ПолучитьПараметрыМетода(Неопределено, ВРег("gsvsUpdates"), Неопределено);	
	КонецЕсли;
	ПараметрыМетодаСинхронизации = ЭСФСервер.ПолучитьПараметрыМетода(Неопределено, ВРег("gsvsUpdates"), Неопределено);	
	НачальнаяПозиция 	= 0;// Значения по умолчанию
	РазмерПорции 		= "1000"; // Значения по умолчанию
	НачальнаяДата 		= Дата(1,1,1,0,0,0); // Значение по умолчанию;
	Если Дозагрузка 
		И ПараметрыМетодаСинхронизации.Свойство(ВРег("maxChangeId")) 
		И ЗначениеЗаполнено(ПараметрыМетодаСинхронизации.maxChangeId) Тогда
		
		НачальнаяПозиция = ПараметрыМетодаСинхронизации.maxChangeId;
		
	КонецЕсли;
	
	Если Дозагрузка 
		И ПараметрыМетодаСинхронизации.Свойство(ВРег("lastUpdateDate")) 
		И ЗначениеЗаполнено(ПараметрыМетодаСинхронизации.lastUpdateDate)
		И ТипЗнч(ПараметрыМетодаСинхронизации.lastUpdateDate) = Тип("Дата") Тогда
		
		НачальнаяДата = ПараметрыМетодаСинхронизации.lastUpdateDate;
		
	КонецЕсли;
	
	// Если дозагрузка и установлен в параметрах. Иначе - значение по умолчанию.
	Если Дозагрузка
		И ПараметрыМетодаСинхронизации.Свойство(ВРег("blockSize")) 
		И ЗначениеЗаполнено(ПараметрыМетодаСинхронизации.blockSize) Тогда
		
		Если ТипЗнч(ПараметрыМетодаСинхронизации.blockSize) = Тип("Число") Тогда
			РазмерПорции = Формат(ПараметрыМетодаСинхронизации.blockSize, "ЧРГ=' '"); // к строке с изместным разделителем
			РазмерПорции = СтрЗаменить(РазмерПорции, " ", "");				
		Иначе
			РазмерПорции = ПараметрыМетодаСинхронизации.blockSize;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачальнаяПозиция,РазмерПорции,НачальнаяДата", НачальнаяПозиция, РазмерПорции, НачальнаяДата);

КонецФункции

Процедура СохранитьПараметрыЗагрузкиСправочникаГСВС(ПараметрыМетода)
	Попытка
		// Параметр записывается с незаполненными сведениями по структурной единице					
		ЭСФСервер.СохранитьПараметрыМетода(Неопределено, ВРег("gsvsUpdates"), Неопределено, 
		ВРег("maxChangeId"), ПараметрыМетода.НачальнаяПозиция);				
		
		// Параметр записывается с незаполненными сведениями по структурной единице					
		ЭСФСервер.СохранитьПараметрыМетода(Неопределено, ВРег("gsvsUpdates"), Неопределено, 
		ВРег("lastUpdateDate"), ПараметрыМетода.НачальнаяДата);												
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменЭСФ.ЗагрузитьСправочникГСВС'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
	КонецПопытки;
КонецПроцедуры

// См. ВССервер.ЗагрузитьСправочникГСВС()
// Получение пакетов с порциями данных справочника ГСВС и обработка пакетов
Функция ЗагрузитьСправочникГСВС(ДополнительныеПараметры) Экспорт
	Результат = Ложь;
	
	Если НЕ ДополнительныеПараметры.Свойство("ПараметрыПрофиляИСЭСФ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПрофиляИСЭСФ = ДополнительныеПараметры.ПараметрыПрофиляИСЭСФ;
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПараметрыПрофиляИСЭСФ.ПрофильИСЭСФ);	
	Если ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = "" Тогда // Из профиля
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации =  ПараметрыПрофиляИСЭСФ.ПарольИСЭСФ;  // Текущий
	КонецЕсли;
	
	ТаблицаОтложенныхЗаписей = НоваяТаблицаДанныхГСВС();
	
	Дозагрузка = Истина;
	Если ДополнительныеПараметры.Свойство("Дозагрузка") Тогда
		Дозагрузка = ДополнительныеПараметры.Дозагрузка;
	КонецЕсли;
	
	ПараметрыМетода = ИнициализироватьПараметрыЗагрузкиСправочникаГСВС(Дозагрузка);	
		
	ИдентификаторСессии = ВССервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
	КонечнаяПозиция = 0;
	ЭтоПоследняяПорция = Ложь;
	НомерПакета = 0;
	Пока НЕ ЭтоПоследняяПорция Цикл		
		Если НЕ ВССервер.СессияВСАктивна(ИдентификаторСессии, ДанныеПрофиляИСЭСФ) Тогда
			ИдентификаторСессии = ВССервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
		КонецЕсли;	
		НомерПакета = НомерПакета + 1;
		
		ЭтоПоследняяПорция = ЗагрузитьПорциюСправочникаГСВС(ИдентификаторСессии,ПараметрыМетода, ТаблицаОтложенныхЗаписей, НомерПакета); // при полной загрузке справочника начальная позиция равна 0				
		
		ТекстСообщения = НСтр("ru = 'С сервера Виртуального склада загружен пакет [НомерПакета] данных ГСВС.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерПакета]", Строка(НомерПакета));
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
				
		СохранитьПараметрыЗагрузкиСправочникаГСВС(ПараметрыМетода);		
	КонецЦикла;	
	
	ВССервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);					
	
	ТекстКомментария = НСтр("ru = 'Успешно загружено пакетов: [НомерПакета]. Идентификатор последнего полученного элемента: [Идентификатор]'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[НомерПакета]", Строка(НомерПакета));
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[Идентификатор]", Строка(ПараметрыМетода.НачальнаяПозиция));
		
	ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ЗагрузитьСправочникГСВС'"), 
			УровеньЖурналаРегистрации.Информация,Метаданные.Справочники.НоменклатураГСВС,,
			ТекстКомментария);
				
	Результат = Истина;
	
	ТекстСообщения = НСтр("ru = 'Загрузка данных ГСВС завершена успешно.'");			
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	ВССервер.АктуализироватьПризнакСодержанияДополнительногоУровня();
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьПорциюСправочникаГСВС(знач ИдентификаторСессии, ПараметрыМетода, ТаблицаДанных, НомерПакета = 1)
	ЭтоПоследняяПорция = Истина;
	
	Пакет = ВССервер.ПолучитьДанныеСправочникаГСВС(ИдентификаторСессии, ПараметрыМетода); 
	Если Пакет <> Неопределено Тогда
		ДанныеПакета = ЭСФСервер.ПолучитьСвойство(Пакет.body, "gsvsUpdatesResponse", Неопределено); 
		
		Если ДанныеПакета <> Неопределено Тогда
			maxChangeId = ЭСФСервер.ПолучитьСвойство(ДанныеПакета, "maxChangeId", ""); 				
			Если ЗначениеЗаполнено(maxChangeId) Тогда
				Если maxChangeId<>ПараметрыМетода.НачальнаяПозиция Тогда
					ЭтоПоследняяПорция = Ложь;
				КонецЕсли;	
				
				ПараметрыМетода.НачальнаяПозиция = 	maxChangeId;
			КонецЕсли;                                                          
			МаксимальнаяДатаИзмененийВПакете = Неопределено;
			
			СписокИзменений = ЭСФСервер.ПолучитьСвойство(ДанныеПакета.gsvsUpdateList, "gsvsUpdatesResult", Неопределено);									
			ЗаписатьИзмененияГСВС(СписокИзменений, ТаблицаДанных, МаксимальнаяДатаИзмененийВПакете);					
			
			Если МаксимальнаяДатаИзмененийВПакете <> Неопределено Тогда
				// Пост в журнале регистрации
				ТекстКомментария = НСтр("ru = 'Получен пакет №: [НомерПакета]. Идентификатор элемента: [Идентификатор]. Дата изменений: [МаксимальнаяДатаИзмененийВПакете]'");
				ТекстКомментария = СтрЗаменить(ТекстКомментария, "[НомерПакета]", Строка(НомерПакета));
				ТекстКомментария = СтрЗаменить(ТекстКомментария, "[Идентификатор]", Строка(ПараметрыМетода.НачальнаяПозиция));
				ТекстКомментария = СтрЗаменить(ТекстКомментария, "[МаксимальнаяДатаИзмененийВПакете]", Строка(МаксимальнаяДатаИзмененийВПакете));

				ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменЭСФ.ЗагрузитьСправочникГСВС'"), 
										УровеньЖурналаРегистрации.Информация,,,
										ТекстКомментария);
										
				Если МаксимальнаяДатаИзмененийВПакете>ПараметрыМетода.НачальнаяДата Тогда
					ПараметрыМетода.НачальнаяДата =  МаксимальнаяДатаИзмененийВПакете;
				КонецЕсли;	
			КонецЕсли;	
			
			
		КонецЕсли;	
	Иначе		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ОбменЭСФ.ЗагрузитьСправочникГСВС'"), 
										УровеньЖурналаРегистрации.Ошибка,,,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
										
		ТекстСообщения = НСтр("ru = 'При получении обновления справочника ГСВС возникла ошибка.'")+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;


	Возврат ЭтоПоследняяПорция;
КонецФункции

Процедура ЗаписатьСведенияОНоменклатуреГСВС(ДатаСобытия, НоменклатураГСВС, ВыборкаДанныхГСВС, АктивностьЗаписи = Истина)
	Набор = РегистрыСведений.СведенияОНоменклатуреГСВС.СоздатьНаборЗаписей();
	Набор.Отбор.НоменклатураГСВС.Установить(НоменклатураГСВС);				
	Набор.Отбор.Период.Установить(ДатаСобытия);
	
	Набор.Прочитать(); 
	// модифицируем существующую, так как для одного периода могут иметь место два события - прекращение действия исходной записи и ввод в действие следующей (может отсутствовать).
	// последние из них - считаем финальным состоянием записи для периода
	Если Набор.Количество() = 0 Тогда
		Запись = Набор.Добавить();
	Иначе
		Запись = Набор[0];								
	КонецЕсли;					
				
	ЗаполнитьЗначенияСвойств(Запись,ВыборкаДанныхГСВС);
	Запись.НоменклатураГСВС = НоменклатураГСВС;
	Запись.Период = ДатаСобытия;	
	Запись.ПризнакАктивности = АктивностьЗаписи;	
	Набор.Записать();			
КонецПроцедуры

Процедура ЗаписатьИзмененияГСВС(знач gsvsUpdateList, ТаблицаОтложенныхЗаписей, МаксимальнаяДатаИзмененийВПакете)
	Если gsvsUpdateList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//расчитываем макс. дату для сохранения в параметрах даты актуализации ГСВС
	Если НЕ ЗначениеЗаполнено(МаксимальнаядатаИзмененийВПакете) Тогда
		МаксимальнаяДатаИзмененийВПакете = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	ТаблицаДанных = НоваяТаблицаДанныхГСВС();	// сначала загрузим данные в таблицу, чтобы запросом получать существующие документы и их родителей		
	СписокИзменений = ЭСФСервер.СписокXDTOИзОбъектXDTO(gsvsUpdateList);
	Для Каждого ИзмененныйЭлемент Из СписокИзменений Цикл
			Идентификатор = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "fixedId", Неопределено);
			Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
				Продолжить;
			КонецЕсли;	
			СтрокаДанных = ТаблицаДанных.Добавить();			
			СтрокаДанных.Событие = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "operation", Неопределено);
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "changeDate", Неопределено);
			СтрокаДанных.ИдентификаторСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент, "changeId", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДатаСобытия = XMLЗначение(Тип("Дата"), ДатаСобытия);
				Если МаксимальнаяДатаИзмененийВПакете < СтрокаДанных.ДатаСобытия Тогда
					МаксимальнаяДатаИзмененийВПакете = СтрокаДанных.ДатаСобытия;
				КонецЕсли;				
			КонецЕсли;
			
			СтрокаДанных.Идентификатор = Идентификатор;
			СтрокаДанных.ИдентификаторРодителя = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "fixedParentId", Неопределено);
			СтрокаДанных.КодГСВС = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "code", "");
			СтрокаДанных.Комментарий = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "description", "");
			
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "startDate", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДействиеЗаписиНачальнаяДата = XMLЗначение(Тип("Дата"), ДатаСобытия);
			КонецЕсли;
			
			ДатаСобытия = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "endDate", Неопределено);
			Если ДатаСобытия <> Неопределено Тогда
				СтрокаДанных.ДействиеЗаписиКонечнаяДата = XMLЗначение(Тип("Дата"), ДатаСобытия);
			КонецЕсли;			
			
			СтрокаДанных.ПолныйКодГСВС = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "gsvsCode", ""); // сейчас запрос не возвращает это значение, хоть оно и предусмотрено схемой.
			
			ТипЭлемента = ВРЕГ(ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "gsvsTypeCode", ""));
			
			Если ТипЭлемента =  "KPVED" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.КПВЭД;
			ИначеЕсли ТипЭлемента =  "TNVED" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.ТНВЭД;
			ИначеЕсли ТипЭлемента =  "GTIN" Тогда
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.GTIN;	
			Иначе
				СтрокаДанных.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.Иное;
			КонецЕсли;			
				
			СтрокаДанных.НомерВерсии = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "id", "");
			СтрокаДанных.ПризнакВозможностиВыбора = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isCanSelect", false);
			СтрокаДанных.ПризнакУдаленияЗаписи = XMLЗначение(ТИп("Булево"),ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isDeleted", false));
			СтрокаДанных.ПризнакТовараДвойногоНазначения = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isTwofoldPurpose", false);
			СтрокаДанных.ПризнакУникальногоТовара = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isUnique", false);       			
			СтрокаДанных.ПризнакУчетаНаВиртуальномСкладе = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isUseInVstore", false);
			СтрокаДанных.ПризнакПеречняИзьятий = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "isWithdrawal", false);
			СтрокаДанных.ПолноеНаименованиеEn = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameEn ", "");
			СтрокаДанных.ПолноеНаименованиеKz = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameKz", "");
			СтрокаДанных.ПолноеНаименованиеRu = ЭСФСервер.ПолучитьСвойство(ИзмененныйЭлемент.gsvs, "nameRu", "");
			СтрокаДанных.Наименование = СтрокаДанных.ПолноеНаименованиеRu;
	
		КонецЦикла;
		
		// Для записи нужно проверить наличие существующих ссылок и существующих родителей
		ДанныеПоГСВС = ПолучитьРезультатЗапросаПоГСВС(ТаблицаДанных);
		ВыборкаДанныхГСВС = ДанныеПоГСВС.Выбрать();
		 	
		МассивОтложенныхЗаписей = Новый Массив();
		ПредыдущийИдентификатор = "";
		ПредыдущийКодГСВС = "";
		ПредыдущееНаименованиеГСВС = "";
		
		ТекущаяСсылка = Неопределено;
		
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();	
		СоответствиеИДиСсылокГСВС = Новый Соответствие;
		ЭтоНовый = Ложь;
        // первый этап для записи детальных элементов, второй - для установки родителей
		Пока ВыборкаДанныхГСВС.Следующий() Цикл	
			Если ВыборкаДанныхГСВС.Идентификатор = "0" Тогда
				Продолжить; // Это служебный элемент ROOT, пропускаем его
			КонецЕсли;	
			Если ПредыдущийИдентификатор<>ВыборкаДанныхГСВС.Идентификатор
				ИЛИ ПредыдущийКодГСВС<>ВыборкаДанныхГСВС.КодГСВС
				ИЛИ ПредыдущееНаименованиеГСВС<>ВыборкаДанныхГСВС.ПолноеНаименованиеRu Тогда
				//В случае отсутствия ссылки сморим не было ли созданных элементов в этом пакете с таким же ИД
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.Ссылка) Тогда
					СсылкаНаСуществующуюЗапись = ВыборкаДанныхГСВС.Ссылка;
				Иначе
					СсылкаНаСуществующуюЗапись = СоответствиеИДиСсылокГСВС[ВыборкаДанныхГСВС.Идентификатор];
				КонецЕсли;

				
				//Создаем или модифицируем запись
				Если ЗначениеЗаполнено(СсылкаНаСуществующуюЗапись) Тогда
					ОбъектГСВС = СсылкаНаСуществующуюЗапись.ПолучитьОбъект();
				Иначе
					ОбъектГСВС = Справочники.НоменклатураГСВС.СоздатьЭлемент();
					ЭтоНовый = Истина;
				КонецЕсли;
				
				Если ВыборкаДанныхГСВС.ТипКодаГСВС = Перечисления.ТипыКодовГСВС.GTIN Тогда
					КодРодителяПервогоУровня = "";
					КодРодителяВторогоУровня = "";
					Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка) Тогда
						КодРодителяПервогоУровня = ВыборкаДанныхГСВС.РодительСсылка.Родитель.КодГСВС;
						КодРодителяВторогоУровня = ВыборкаДанныхГСВС.РодительКодГСВС;
					КонецЕсли;
					Если НЕ ПустаяСтрока(КодРодителяПервогоУровня) И НЕ ПустаяСтрока(КодРодителяВторогоУровня) Тогда
						ПолныйКодГСВС = КодРодителяПервогоУровня + "-" + КодРодителяВторогоУровня + "/" + ВыборкаДанныхГСВС.КодГСВС;
					Иначе
						ПолныйКодГСВС = ВыборкаДанныхГСВС.ПолныйКодГСВС;	
					КонецЕсли;
				Иначе
					ПолныйКодГСВС = ВыборкаДанныхГСВС.ПолныйКодГСВС;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбъектГСВС, ВыборкаДанныхГСВС);
				ОбъектГСВС.Наименование = ПолныйКодГСВС;
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ИдентификаторРодителя) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда 
					Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка)Тогда
						// в базе еще не создан родительский элемент, не сможем создать подчиненный
						СтрокаДанных = ТаблицаОтложенныхЗаписей.Добавить();			
						ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаДанныхГСВС);
						МассивОтложенныхЗаписей.Добавить(ВыборкаДанныхГСВС.Идентификатор);				
					Иначе
						ОбъектГСВС.Родитель = ВыборкаДанныхГСВС.РодительСсылка;						
					КонецЕсли;			
				КонецЕсли;			
				ОбъектГСВС.Записать();
				ТекущаяСсылка = ОбъектГСВС.Ссылка;
				
				//Если элемент новый тогда запишем его ссылку
				Если ЭтоНовый Тогда
					СоответствиеИДиСсылокГСВС.Вставить(ВыборкаДанныхГСВС.Идентификатор, ТекущаяСсылка);
					ЭтоНовый = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// Записываем версию изменений
			Если ЗначениеЗаполнено(ТекущаяСсылка) Тогда
				Набор = РегистрыСведений.СведенияОНоменклатуреГСВС.СоздатьНаборЗаписей();
				Набор.Отбор.НоменклатураГСВС.Установить(ТекущаяСсылка);				
				Если ВРЕГ(ВыборкаДанныхГСВС.Событие) = "DELETE" Тогда
					// нужно снять признак актуальности у записи с даты события Delete
					ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДатаСобытия, ТекущаяСсылка, ВыборкаДанныхГСВС, Ложь)					
				Иначе // Это события ADD или Update
					АктивностьЗаписи = ?(ВыборкаДанныхГСВС.ПризнакУдаленияЗаписи, Ложь, Истина);					
					
					ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДействиеЗаписиНачальнаяДата, ТекущаяСсылка, ВыборкаДанныхГСВС, АктивностьЗаписи);
					
					// Для события ADD или Update может быть задана дата окончания активности и отсутствовать замещающая запись.
					// в этом случае с даты окончания снимем признак активности
					Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ДействиеЗаписиКонечнаяДата) Тогда
						ЗаписатьСведенияОНоменклатуреГСВС(ВыборкаДанныхГСВС.ДействиеЗаписиКонечнаяДата, ТекущаяСсылка, ВыборкаДанныхГСВС, Ложь);
					КонецЕсли;   					
				КонецЕсли;	    				
			КонецЕсли;
			
			ПредыдущийИдентификатор = ВыборкаДанныхГСВС.Идентификатор;
			ПредыдущийКодГСВС = ВыборкаДанныхГСВС.КодГСВС;
			ПредыдущееНаименованиеГСВС = ВыборкаДанныхГСВС.ПолноеНаименованиеRu;
		КонецЦикла;   		
		ЗафиксироватьТранзакцию();
		
		// второй этап - модифицируем данные о родителе
		Если ТаблицаОтложенныхЗаписей.Количество()>0 Тогда
			
			ЕстьЗаписиБезНайденногоРодителя = Ложь;
			ДанныеПоГСВС = ПолучитьРезультатЗапросаПоГСВС(ТаблицаОтложенныхЗаписей);		
			ВыборкаДанныхГСВС = ДанныеПоГСВС.Выбрать();
			НачатьТранзакцию();
			Пока ВыборкаДанныхГСВС.Следующий() Цикл
				//Создаем или модифицируем запись
				Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.Ссылка) Тогда
					Продолжить;
					// сообщить об ошибке				
				КонецЕсли;			
				Если НЕ ЗначениеЗаполнено(ВыборкаДанныхГСВС.РодительСсылка) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда
					// сообщить об ошибке
					Если НЕ ЕстьЗаписиБезНайденногоРодителя Тогда
					ЕстьЗаписиБезНайденногоРодителя = Истина;
					КонецЕсли;

					
					Продолжить;
										
				КонецЕсли;	
				Если ЗначениеЗаполнено(ВыборкаДанныхГСВС.ИдентификаторРодителя) И ВыборкаДанныхГСВС.ИдентификаторРодителя<> "0" Тогда 
					ОбъектГСВС = ВыборкаДанныхГСВС.Ссылка.ПолучитьОбъект();
					ОбъектГСВС.Родитель = ВыборкаДанныхГСВС.РодительСсылка;				
					ОбъектГСВС.Наименование = ПолныйКодГСВС;
					ОбъектГСВС.Записать();
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			Если ЕстьЗаписиБезНайденногоРодителя Тогда
				ТекстСообщения = НСТР("ru = 'Для некоторых записей не установлены ссылки на родительские элементы. Рекомендуется произвести первичную загрузка справочника ГСВС.'");
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;			
КонецПроцедуры

Функция ПолучитьРезультатЗапросаПоГСВС(ТаблицаДанных)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВТ_ТаблицаДанныхГСВС.Идентификатор КАК Идентификатор,
	                      |	ВТ_ТаблицаДанныхГСВС.Событие КАК Событие,
	                      |	ВТ_ТаблицаДанныхГСВС.ДатаСобытия КАК ДатаСобытия,
						  |	ВТ_ТаблицаДанныхГСВС.ИдентификаторСобытия КАК ИдентификаторСобытия,						  
	                      |	ВТ_ТаблицаДанныхГСВС.ИдентификаторРодителя КАК ИдентификаторРодителя,
	                      |	ВТ_ТаблицаДанныхГСВС.КодГСВС КАК КодГСВС,
	                      |	ВТ_ТаблицаДанныхГСВС.ТипКодаГСВС,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеRu,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеKz,
	                      |	ВТ_ТаблицаДанныхГСВС.ПолноеНаименованиеEn,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакВозможностиВыбора,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУдаленияЗаписи,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакТовараДвойногоНазначения,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУникальногоТовара,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУчетаНаВиртуальномСкладе,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакПеречняИзьятий,
	                      |	ВТ_ТаблицаДанныхГСВС.ПризнакУслуги,
	                      |	ВТ_ТаблицаДанныхГСВС.ДействиеЗаписиНачальнаяДата,
	                      |	ВТ_ТаблицаДанныхГСВС.ДействиеЗаписиКонечнаяДата,
	                      |	ВТ_ТаблицаДанныхГСВС.Наименование
	                      |ПОМЕСТИТЬ ВТ_ТаблицаДанныхГСВС
	                      |ИЗ
	                      |	&ТаблицаДанныхГСВС КАК ВТ_ТаблицаДанныхГСВС
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Идентификатор
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	МАКСИМУМ(НоменклатураГСВС.Ссылка) КАК Ссылка,
	                      |	НоменклатураГСВС.КодГСВС КАК КодГСВС,
	                      |	МАКСИМУМ(НоменклатураГСВС.Идентификатор) КАК Идентификатор
	                      |ПОМЕСТИТЬ ВТ_НоменклатураГСВСКоды
	                      |ИЗ
	                      |	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
	                      |ГДЕ
	                      |	НЕ НоменклатураГСВС.ПометкаУдаления
	                      |	И НоменклатураГСВС.КодГСВС В
	                      |			(ВЫБРАТЬ
	                      |				ВТ_ТаблицаДанныхГСВС.КодГСВС
	                      |			ИЗ
	                      |				ВТ_ТаблицаДанныхГСВС)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	НоменклатураГСВС.КодГСВС
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КодГСВС
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураГСВСПоИдентификатору.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураГСВСПоКоду.Ссылка, НЕОПРЕДЕЛЕНО) ИНАЧЕ НоменклатураГСВСПоИдентификатору.Ссылка
	                      |	КОНЕЦ КАК Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураРодителяГСВСПоИдентификатору.Ссылка ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.Ссылка, НЕОПРЕДЕЛЕНО) ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.Ссылка
	                      |	КОНЕЦ КАК РодительСсылка,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураРодителяГСВСПоИдентификатору.КодГСВС ЕСТЬ NULL 
	                      |			ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.КодГСВС, """") ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.КодГСВС
	                      |	КОНЕЦ КАК РодительКодГСВС,
	                      |	ТаблицаДанныхГСВС.Идентификатор,
	                      |	ТаблицаДанныхГСВС.Событие,
	                      |	ТаблицаДанныхГСВС.ДатаСобытия,
						  |	ТаблицаДанныхГСВС.ИдентификаторСобытия,
	                      |	ТаблицаДанныхГСВС.ИдентификаторРодителя,
	                      |	ТаблицаДанныхГСВС.КодГСВС,
	                      |	ТаблицаДанныхГСВС.ТипКодаГСВС,
	                      |	ТаблицаДанныхГСВС.Наименование,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеRu,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеKz,
	                      |	ТаблицаДанныхГСВС.ПолноеНаименованиеEn,
	                      |	ТаблицаДанныхГСВС.ПризнакВозможностиВыбора,
	                      |	ТаблицаДанныхГСВС.ПризнакУдаленияЗаписи,
	                      |	ТаблицаДанныхГСВС.ПризнакТовараДвойногоНазначения,
	                      |	ТаблицаДанныхГСВС.ПризнакУникальногоТовара,
	                      |	ТаблицаДанныхГСВС.ПризнакУчетаНаВиртуальномСкладе,
	                      |	ТаблицаДанныхГСВС.ПризнакПеречняИзьятий,
	                      |	ТаблицаДанныхГСВС.ПризнакУслуги,
	                      |	ТаблицаДанныхГСВС.ДействиеЗаписиНачальнаяДата,
	                      |	ТаблицаДанныхГСВС.ДействиеЗаписиКонечнаяДата,
	                      |	ВЫБОР
	                      |		КОГДА НоменклатураГСВСПоИдентификатору.ПометкаУдаления ЕСТЬ NULL 
	                      |			ТОГДА ЛОЖЬ Иначе НоменклатураГСВСПоИдентификатору.ПометкаУдаления
	                      |	КОНЕЦ КАК ПометкаУдаления,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ТаблицаДанныхГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)
	                      |			ТОГДА ТаблицаДанныхГСВС.КодГСВС
	                      |		ИНАЧЕ ВЫБОР
	                      |				КОГДА ВТ_ТаблицаДанныхГСВСРодителя.КодГСВС ЕСТЬ NULL 
	                      |					ТОГДА ВЫБОР
	                      |							КОГДА НоменклатураРодителяГСВСПоИдентификатору.КодГСВС ЕСТЬ NULL 
	                      |								ТОГДА ЕСТЬNULL(НоменклатураРодителяГСВСПоКоду.КодГСВС, """") ИНАЧЕ НоменклатураРодителяГСВСПоИдентификатору.КодГСВС
	                      |						КОНЕЦ
	                      |				ИНАЧЕ ВТ_ТаблицаДанныхГСВСРодителя.КодГСВС
	                      |			КОНЕЦ + ""-"" + ТаблицаДанныхГСВС.КодГСВС
	                      |	КОНЕЦ КАК ПолныйКодГСВС
	                      |ИЗ
	                      |	ВТ_ТаблицаДанныхГСВС КАК ТаблицаДанныхГСВС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураГСВСПоИдентификатору
	                      |		ПО ТаблицаДанныхГСВС.Идентификатор = НоменклатураГСВСПоИдентификатору.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСКоды КАК НоменклатураГСВСПоКоду
	                      |		ПО ТаблицаДанныхГСВС.КодГСВС = НоменклатураГСВСПоКоду.КодГСВС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаДанныхГСВС КАК ВТ_ТаблицаДанныхГСВСРодителя
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = ВТ_ТаблицаДанныхГСВСРодителя.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураРодителяГСВСПоИдентификатору
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = НоменклатураРодителяГСВСПоИдентификатору.Идентификатор
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураГСВСКоды КАК НоменклатураРодителяГСВСПоКоду
	                      |		ПО ТаблицаДанныхГСВС.ИдентификаторРодителя = НоменклатураРодителяГСВСПоКоду.КодГСВС
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаДанныхГСВС.ИдентификаторРодителя,
	                      |	ТаблицаДанныхГСВС.Идентификатор,
	                      |	ТаблицаДанныхГСВС.ДатаСобытия,
						  |	ТаблицаДанныхГСВС.ИдентификаторСобытия");
	Запрос.УстановитьПараметр("ТаблицаДанныхГСВС",ТаблицаДанных); 
	Результат = Запрос.Выполнить();
	
	Возврат  Результат;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыиФункцииВС

// Выполняет метод веб-сервиса ИС ЭСФ.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
Функция ВыполнитьМетодВебСервисаВС(Знач ТекстМетода, Знач ИмяВебСервиса, Знач ИспользуетТаймаут = Истина, ВерсияВС = Неопределено) Экспорт
	
	Если ИмяВебСервиса <> "VstoreVersionService" И ВерсияВС = Неопределено Тогда
		ВерсияВС = "5.0.0.";
	КонецЕсли;	
		
	// используемая версия API - v1, за исключением методов VersionService, которые не версионируются
	ВерсияВебСервиса = "";
	
	// подключение к серверу
	ПараметрыПодключения = ВССервер.ПолучитьПараметрыПодключенияКСерверуВС();
	
	Если ПараметрыПодключения.СерверВС_HTTPS Тогда 
			
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверВС_Адрес, 
			ПараметрыПодключения.СерверВС_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(), 
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0),
			Новый ЗащищенноеСоединениеOpenSSL(,));
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(
			ПараметрыПодключения.СерверВС_Адрес, 
			ПараметрыПодключения.СерверВС_Порт, 
			, 
			, 
			ЭСФСерверПовтИсп.НовыйПроксиСерверИСЭСФ(),
			?(ИспользуетТаймаут, ЭСФВызовСервераПовтИсп.ПолучитьТаймаутПодключенияИСЭСФ(), 0));
			
	КонецЕсли;
		
   	HTTPЗапрос = Новый HTTPЗапрос();
	
	ПрефиксРесурса = ПараметрыПодключения.СерверВС_Ресурс;
	ПрефиксРесурса = ?(Лев(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 2), ПрефиксРесурса);
	ПрефиксРесурса = ?(Прав(ПрефиксРесурса, 1) = "/", Сред(ПрефиксРесурса, 1, СтрДлина(ПрефиксРесурса) - 1), ПрефиксРесурса);	
	HTTPЗапрос.АдресРесурса	= "/" + ПрефиксРесурса + ВерсияВебСервиса +"/" + ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	Заголовки.Вставить("SOAPAction", """""");
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	Попытка
		
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());	
		
	Исключение
		
		Если HTTPОтвет = Неопределено Тогда
			ОписаниеОшибкиHTTP = НСтр("ru = 'Превышен таймаут ожидания ответа от сервера'");
		Иначе
			ОписаниеОшибкиHTTP = ОписаниеОшибки();
		КонецЕсли;
		
		// Обработка ошибки доступности сервера ИС ЭСФ
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с модулем виртуального склада ИС ЭСФ возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ВС недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ОписаниеОшибкиHTTP);	 
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОшибкаСоединения);
		
		ТекстОтвета = "";
		
	КонецПопытки;
	
	Возврат ТекстОтвета;
	
КонецФункции

//Создает соответствие реквизитов и типов форм, для которых эти поля не должны использоваться
//В соответствии: имя - название поля, значение - список типов форм разделенные знаком | , для которых данное поле не должно использоваться
Функция СоответствиеРеквизитовТоваровТипуФорм() Экспорт
	
	СоответствиеРеквизитов = Новый Соответствие;
		
	СоответствиеРеквизитов.Вставить("canExport", "MANUFACTURE|WRITE_OFF|MOVEMENT|PHYSICAL_LABEL|IMPORT_DETAILING");
	СоответствиеРеквизитов.Вставить("dutyTypeCode", "WRITE_OFF|MANUFACTURE|MOVEMENT");
	СоответствиеРеквизитов.Вставить("manufactureOrImportCountry", "WRITE_OFF|MANUFACTURE|MOVEMENT|IMPORT_DETAILING");
	СоответствиеРеквизитов.Вставить("name");
	СоответствиеРеквизитов.Вставить("originCertificateDate", "MOVEMENT");
	СоответствиеРеквизитов.Вставить("originCode", "WRITE_OFF|MOVEMENT");
	СоответствиеРеквизитов.Вставить("physicalLabel");  
	СоответствиеРеквизитов.Вставить("productId", "BALANCE|BALANCE_CORRECTION"); 
	СоответствиеРеквизитов.Вставить("productNameInImportDoc", "MANUFACTURE|MOVEMENT");
	СоответствиеРеквизитов.Вставить("productNumberInImportDoc", "MANUFACTURE");
	СоответствиеРеквизитов.Вставить("tnvedCode");
	СоответствиеРеквизитов.Вставить("gsvsCode");
	СоответствиеРеквизитов.Вставить("measureUnitCode");
	СоответствиеРеквизитов.Вставить("quantity");
	СоответствиеРеквизитов.Вставить("Price");
	СоответствиеРеквизитов.Вставить("sum");
	СоответствиеРеквизитов.Вставить("pinCode");
	СоответствиеРеквизитов.Вставить("spiritPercent");
	СоответствиеРеквизитов.Вставить("markingCode");
	
	Для каждого Элемент Из СоответствиеРеквизитов Цикл
		Если Элемент.Значение <> неопределено Тогда		
			СоответствиеРеквизитов[Элемент.Ключ] = СтрРазделить(Элемент.Значение, "|", Ложь);			
		КонецЕсли; 	
	КонецЦикла;   
	
	Возврат СоответствиеРеквизитов;

КонецФункции

// Функция проверки соответствия реквизита к типу формы.
// При проверке, проверяется наличие типа формы в списке исключаемых типов форм полученных из соответствия
//
// Параметры:
//  ИмяПоля					 Название поля 						  -  Строка
//  ТипФормыИСЭСФ			 Тип формы     						  -  Строка 
//  СоответствиеРеквизитов	 Соответствие реквизитов и типов форм -  Соответствие 
// 
// Возвращаемое значение:
//  СоответствуетТипуформы - Булево 
//
Функция РеквизитТовараСоответствуетТипуФормы(ИмяПоля, ТипФормыИСЭСФ, СоответствиеРеквизитов)
	
	ИсключаемыеТипыФорм = СоответствиеРеквизитов.Получить(ИмяПоля);
	
	СоответствуетТипуформы = Истина;
	
	Если ИсключаемыеТипыФорм <> Неопределено Тогда
		Если ИсключаемыеТипыФорм.Найти(ТипФормыИСЭСФ) <> Неопределено Тогда
			СоответствуетТипуформы = Ложь;
		КонецЕсли;
	КонецЕсли;	
		
	Возврат СоответствуетТипуформы;
	
КонецФункции	

//Функция поиска ОбъектXDTO или СписокXDTO в ОбъектXDTO
Функция НайтиНужныйУровень(ИскомыйУровень = "", Объект)  
	Для каждого элемент из Объект.Свойства() цикл
		Если элемент.Имя = ИскомыйУровень Тогда
			Возврат Вычислить("Объект."+элемент.Имя);	
		Иначе
			Уровень = Вычислить("Объект."+элемент.Имя);
			Если ТипЗнч(Уровень) = Тип("СписокXDTO") Тогда
				Для каждого ЭлементСписка из Уровень цикл
					УровеньЭлементаСписка = НайтиНужныйУровень(ИскомыйУровень, ЭлементСписка);
					Если УровеньЭлементаСписка <> Неопределено Тогда
						Возврат УровеньЭлементаСписка;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(Уровень) = Тип("ОбъектXDTO") Тогда
				НайденныйУровень = НайтиНужныйУровень(ИскомыйУровень, Уровень);
				Если НайденныйУровень <> Неопределено Тогда
					Возврат НайденныйУровень;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
КонецФункции

Процедура ОбработатьРезультатыИзмененияСтатусовЭДВС(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокЭД.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'Документ ВС не найден в ИС ВС.'");
				
				ТекстРасшифровки = НСтр("ru = 'Электронный документ ВС, с идентификатором ""%Идентификатор%"", не найден в ИС ВС.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ВССервер.ПроверитьДоступИВерсиюНаСервере()
Функция ПроверитьДоступИВерсиюВСНаСервере() Экспорт
		
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОшибкаСоединения");
	СтруктураПараметров.Вставить("ОшибкаВерсии");
	СтруктураПараметров.Вставить("ВерсияВС");
	СтруктураПараметров.Вставить("ВерсияВСПоддерживается");
	СтруктураПараметров.Вставить("ТекстВерсияОшибка");
	СтруктураПараметров.Вставить("ТекстВерсияПоддерживает");
	СтруктураПараметров.Вставить("СерверВСДоступен");
		
	ТекстОшибки = "";	
	СтруктураПараметров.ВерсияВС = ВерсияВС(ТекстОшибки);
	
	Если СтруктураПараметров.ВерсияВС = Неопределено Тогда // Не удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверВСДоступен = Ложь;
		
		СтруктураПараметров.ВерсияВСПоддерживается = Ложь;
				
		ОшибкаСоединения = НСтр(
		"ru = 'При установке соединения с ВС возникла ошибка:
		|%ТекстОшибки%
		|Возможные причины:
		|- Сервер ВС недоступен (Проверьте работу: https://esf.gov.kz:8443/esf-web/).
		|%ОшибкаИнтернета%
		|- Настройки безопасности Вашей сети требуют работы через прокси-сервер (Задайте настройки прокси-сервера, кнопка ""Настроить прокси"").'");
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ТекстОшибки%", ТекстОшибки);	 
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтрокаСоединения = НРег(СтрокаСоединенияИнформационнойБазы()); 
		Если ИнформационнаяБазаФайловая Тогда
			ОшибкаИнтернета = НСтр("ru = '- На Вашем компьютере, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
		Иначе
			ОшибкаИнтернета = НСтр("ru = '- На сервере %ИмяСервера%, для 1С:Предприятие (%ВерсияПлатформы%), нет доступа в Интернет (Обратитесь к системному администратору).'");
			ИмяСервера = СтрЗаменить(СтрокаСоединения, "srvr=""", "");
			ИмяСервера = Лев(ИмяСервера, Найти(ИмяСервера, """") - 1);
			ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ИмяСервера%", ИмяСервера);
		КонецЕсли;
		ОшибкаИнтернета = СтрЗаменить(ОшибкаИнтернета, "%ВерсияПлатформы%", СистемнаяИнформация.ВерсияПриложения);
		СтруктураПараметров.ОшибкаСоединения = СтрЗаменить(ОшибкаСоединения, "%ОшибкаИнтернета%", ОшибкаИнтернета);
		
	Иначе // Удалось подключиться к ИС ЭСФ.
		
		СтруктураПараметров.СерверВСДоступен = Истина;
		
		// Заполнить номер текущей версии ИС ЭСФ в успешно.
		СтруктураПараметров.ТекстВерсияПоддерживает = НСтр("ru = 'Программа поддерживает текущую версию ВС (%ВерсияВС%).'");
		СтруктураПараметров.ТекстВерсияПоддерживает = СтрЗаменить(СтруктураПараметров.ТекстВерсияПоддерживает, "%ВерсияВС%", СтруктураПараметров.ВерсияВС);
				
		// Заполнить номер текущей версии ИС ЭСФ в ошибке.
		СтруктураПараметров.ТекстВерсияОшибка = НСтр("ru = 'Программа не поддерживает текущую версию ИС ЭСФ (%ВерсияВС%).'");
		СтруктураПараметров.ТекстВерсияОшибка = СтрЗаменить(СтруктураПараметров.ТекстВерсияОшибка, "%ВерсияВС%", СтруктураПараметров.ВерсияВС);
			
		Если ПоддерживаемыеВерсииВС().Найти(СтруктураПараметров.ВерсияВС) = Неопределено Тогда
			
			СтруктураПараметров.ВерсияВСПоддерживается = Ложь;
			
			// Показать ошибку версии ИС ЭСФ. 
			ОшибкаВерсии = НСтр(
			"ru = 'Текущая версия программы ""%НаименованиеКонфигурации%"" (%ВерсияКонфигурации%) может не поддерживать текущую версию ВС (%ВерсияВС%).
			|Пожалуйста, обновите программу ""%НаименованиеКонфигурации%"".'");
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%НаименованиеКонфигурации%", Метаданные.Синоним);
			ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияКонфигурации%", Метаданные.Версия);
			СтруктураПараметров.ОшибкаВерсии = СтрЗаменить(ОшибкаВерсии, "%ВерсияВС%", СтруктураПараметров.ВерсияВС);
			
		Иначе
			
			СтруктураПараметров.ВерсияВСПоддерживается = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции
//Процедура проведения входящих документов ЭСФ при обновлении и получении
Процедура ПровестиВходящиеЭСФ(МассивЭСФ,Знач НаправлениеЭСФ = Неопределено)
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;

	
	Если НаправлениеЭСФ = Неопределено Тогда
		НаправлениеЭСФ = МассивЭСФ[0].Направление;
	КонецЕсли;
	
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Входящий Тогда
		Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
			//В случае если массив содержит ссылки а не объекты
			Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументСсылка.ЭСФ") Тогда
				ОбъектЭСФ = ОбъектЭСФ.ПолучитьОбъект();
			КонецЕсли;
			
			КлючевыеПоляЗаполнены = ОбъектЭСФ.ПроверитьЗаполнение();
			
			Если КлючевыеПоляЗаполнены Тогда
				
				НачатьТранзакцию();
				
				Попытка
					ОбъектЭСФ.Записать(РежимЗаписиДокумента.Проведение);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
				КонецПопытки;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Не проведен документ с регистрационным номером %1 по причине не заполненных полей'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектЭСФ.РегистрационныйНомер);
				
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,ОбъектЭСФ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ЗапрещеноПроводитьЭДВС(ОбъектЭДВС) Экспорт 
	
	Возврат Ложь;
	
	Состояние       = ОбъектЭДВС.Состояние;
	ТипФормы		= ОбъектЭДВС.ТипФормы;
	ВидДетализации	= ОбъектЭДВС.ВидДетализации;
		
	Если Состояние = Перечисления.СостоянияЭДВС.ОбработанНаСервере
		ИЛИ Состояние = Перечисления.СостоянияЭДВС.НеПодлежитОтправке Тогда
		Возврат Ложь;
	ИначеЕсли ТипФормы = Перечисления.ТипыФормВС.Остатки 
		ИЛИ ТипФормы = Перечисления.ТипыФормВС.Производство 
		ИЛИ ТипФормы = Перечисления.ТипыФормВС.Детализация 
		И (ВидДетализации = Перечисления.ВидДетализации.Комплектация
			ИЛИ ВидДетализации = Перечисления.ВидДетализации.Разукомплектация
			ИЛИ ВидДетализации = Перечисления.ВидДетализации.РедактированиеДанных) Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьЭСФНаНаличиеИдентификаторовТоваровВС(ОбъектЭСФ)
	
	ЕстьПустыеДополнительныеИдентификаторыТоваров = Ложь;
	
	//Если ОбъектЭСФ.Дата >= ДатаНачалаУчетаПоИдентификаторам() Тогда
	
	ДатаНачалаУчетаПоИдентификаторам = ДатаНачалаУчетаПоИдентификаторам();
	
	Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() И
		(ЗначениеЗаполнено(ДатаНачалаУчетаПоИдентификаторам) И ОбъектЭСФ.Дата >= ДатаНачалаУчетаПоИдентификаторам
		И ОбъектЭСФ.ДатаОборота >= ДатаПереходаНаВС())Тогда
		
		Для Каждого Товар Из ОбъектЭСФ.Товары Цикл
			Если Товар.ПризнакУчетаНаВиртуальномСкладе Тогда
				ОбъектЭСФ.ОтражаетсяВВС = Истина;
				Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификатор) 
					И ((ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий И Товар.Количество > 0) 
						ИЛИ (ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий 
							И ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный И Товар.Количество < 0)) Тогда
					ЕстьПустыеДополнительныеИдентификаторыТоваров = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбъектЭСФ.ОтражаетсяВВС И ЕстьПустыеДополнительныеИдентификаторыТоваров;
	
КонецФункции

Функция ПроверитьЭДВСНаНаличиеИдентификаторовТоваровВС(ОбъектЭДВС) Экспорт
	
	ЕстьПустыеИдентификаторыТоваров = Ложь;
	ЕстьПустыеИдентификаторыИсходныхТоваров = Ложь;
	
	ДатаНачалаУчетаПоИдентификаторам = ДатаНачалаУчетаПоИдентификаторам();
	Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() И
		(ЗначениеЗаполнено(ДатаНачалаУчетаПоИдентификаторам) И ОбъектЭДВС.Дата >= ДатаНачалаУчетаПоИдентификаторам)Тогда
		
		СписокТиповПриходныхЭДВС = Новый Массив;
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.Остатки);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.КорректировкаОстатков);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.Производство);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.Детализация);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.ДекларацияНаТовары);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.ДетализацияИмпорта);
		СписокТиповПриходныхЭДВС.Добавить(Перечисления.ТипыФормВС.ВводОстатковНаВС);
		
		СписокВидовДетализацииЭДВС = Новый Массив;
		СписокВидовДетализацииЭДВС.Добавить(Перечисления.ВидДетализации.Комплектация);
		СписокВидовДетализацииЭДВС.Добавить(Перечисления.ВидДетализации.Разукомплектация);
		//+ 19.06.2019
		СписокВидовДетализацииЭДВС.Добавить(Перечисления.ВидДетализации.РедактированиеДанных);
		//+ 09.11.2020
		СписокВидовДетализацииЭДВС.Добавить(Перечисления.ВидДетализации.КонвертацияМеждуЕИ);
		
		СписокВидовДетализацииЭДВС_Переход = Новый Массив;
		СписокВидовДетализацииЭДВС_Переход.Добавить(Перечисления.ВидДетализации.РедактированиеДанных);
		СписокВидовДетализацииЭДВС_Переход.Добавить(Перечисления.ВидДетализации.Пересортица);
		
		Если СписокТиповПриходныхЭДВС.Найти(ОбъектЭДВС.ТипФормы) <> Неопределено Тогда
			
			Если ОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.Детализация 
				И СписокВидовДетализацииЭДВС.Найти(ОбъектЭДВС.ВидДетализации) = Неопределено Тогда
				
				Если СписокВидовДетализацииЭДВС_Переход.Найти(ОбъектЭДВС.ВидДетализации) <> Неопределено Тогда
					//дополнительно проверим исходные товары. 
					// если в исходных товарах ИД пустое - то оно заполнится в момент отправки по правилам
					// присвоения ИД при первом движении товара
					Для Каждого Товар Из ОбъектЭДВС.ИсходныеТоварыВС Цикл
						Если Не ЗначениеЗаполнено(Товар.ДополнительныйИдентификатор) Тогда
							ЕстьПустыеИдентификаторыИсходныхТоваров = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
					
					Для Каждого Товар Из ОбъектЭДВС.ТоварыВС Цикл
						Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификатор) И ЕстьПустыеИдентификаторыИсходныхТоваров Тогда
							ЕстьПустыеИдентификаторыТоваров = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе	
					ЕстьПустыеИдентификаторыТоваров = Ложь;
				КонецЕсли;	
				
			ИначеЕсли ОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Или ОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС Тогда
				
				Для Каждого Товар Из ОбъектЭДВС.ТоварыВС Цикл
					Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификаторПолучатель) Тогда
						ЕстьПустыеИдентификаторыТоваров = Истина;
						Прервать;	
					КонецЕсли;
				КонецЦикла;
				
			Иначе	
				Для Каждого Товар Из ОбъектЭДВС.ТоварыВС Цикл
					Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификатор) 
						ИЛИ (ОбъектЭДВС.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ И НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификаторПолучатель))
						Тогда
						
						//для вида операции по ВП заполненность ИД проверяем по графе ДополнительныйИдентификаторПолучатель
						// при пустой графе ДополнительныйИдентификатор
						Если ОбъектЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
							
							Если НЕ ЗначениеЗаполнено(Товар.ДополнительныйИдентификаторПолучатель) Тогда
								ЕстьПустыеИдентификаторыТоваров = Истина;
							КонецЕсли;
								
						Иначе	
							ЕстьПустыеИдентификаторыТоваров = Истина;
						КонецЕсли;
						
						Если ЕстьПустыеИдентификаторыТоваров Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ЕстьПустыеИдентификаторыТоваров;
	
КонецФункции

Функция ДатаПереходаНаВС() Экспорт
	
	Возврат Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить();
	
КонецФункции	

#КонецОбласти

#Область ОбработчикиСобытийМодуляОбъектаДокументаЭДВС

Процедура ДокументЭДВС_ПередЗаписью(ОбъектЭДВС, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ОбъектЭДВС.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектЭДВС.Номер) Тогда
		ОбъектЭДВС.УстановитьНовыйНомер();
	КонецЕсли;
	
	ОбъектЭДВС.Состояние = ВСКлиентСервер.ПолучитьСостояниеЭДВС(ОбъектЭДВС);
		
	ОбъектЭДВС.ОбщаяСуммаИсходныхТоваров 	= ОбъектЭДВС.ИсходныеТовары.Итог("Сумма") + ОбъектЭДВС.ИсходныеТоварыВС.Итог("Сумма");
	ОбъектЭДВС.ОбщаяСуммаТоваров		 	= ОбъектЭДВС.Товары.Итог("Сумма") + ОбъектЭДВС.ТоварыВС.Итог("Сумма");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И
		НЕ (ОбъектЭДВС.Состояние = Перечисления.СостоянияЭДВС.ОбработанНаСервере ИЛИ ОбъектЭДВС.Состояние = Перечисления.СостоянияЭДВС.НеПодлежитОтправке
			ИЛИ ОбъектЭДВС.Состояние = Перечисления.СостоянияЭДВС.Отменен) 
		И ОбъектЭДВС.Дата >= ДатаНачалаУчетаПоИдентификаторам() Тогда
		
		Отказ = Истина;
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа возможно только в состояниях ""Обработан на сервере"", ""Не подлежит отправке"" или ""Отменен"" '"));
		
	КонецЕсли;

	ТипФормы = ОбъектЭДВС.ТипФормы;
	
	//заполним организацию получателя
	Если ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары 
		И Не ЗначениеЗаполнено(ОбъектЭДВС.ОрганизацияПолучатель) Тогда
		
		ОбъектЭДВС.ОрганизацияПолучатель 	= ОбъектЭДВС.Организация;
		ОбъектЭДВС.ПолучательАдрес 			= ОбъектЭДВС.ОтправительАдрес;
		ОбъектЭДВС.ПолучательНаименование 	= ОбъектЭДВС.ОтправительНаименование;
		ОбъектЭДВС.ПолучательИдентификатор 	= ОбъектЭДВС.ОтправительИдентификатор;
	КонецЕсли;	
		
		
	//СозданиеИсточниковПроисхождения
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ОбъектЭДВС.КорректировкаИП Тогда
		
		Если ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары
				ИЛИ ТипФормы = Перечисления.ТипыФормВС.Производство
				ИЛИ ТипФормы = Перечисления.ТипыФормВС.Остатки
				ИЛИ ТипФормы = Перечисления.ТипыФормВС.КорректировкаОстатков
				Или ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта Тогда 
			//необходимо будет создать/обновить источники
			
			Если ОбъектЭДВС.ЭтоНовый() Тогда
				НовыйЭДВССсылка = Документы.ЭлектронныйДокументВС.ПолучитьСсылку(Новый УникальныйИдентификатор);
				ОбъектЭДВС.УстановитьСсылкуНового(НовыйЭДВССсылка);
			КонецЕсли;	
			СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "Товары");
			СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "ТоварыВС");
			
		ИначеЕсли ТипФормы = Перечисления.ТипыФормВС.Детализация ИЛИ ТипФормы = Перечисления.ТипыФормВС.ФизическаяМетка Тогда
			//необходимо будет создать/обновить источники
			
			Если ОбъектЭДВС.ЭтоНовый() Тогда
				НовыйЭДВССсылка = Документы.ЭлектронныйДокументВС.ПолучитьСсылку(Новый УникальныйИдентификатор);
				ОбъектЭДВС.УстановитьСсылкуНового(НовыйЭДВССсылка);
			КонецЕсли;	
			СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "Товары");
			СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "ТоварыВС");
			
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектЭДВС, Отказ, "ИсходныеТовары");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектЭДВС, Отказ, "ИсходныеТоварыВС");
		ИначеЕсли НЕ ТипФормы = Перечисления.ТипыФормВС.Детализация И НЕ ОбъектЭДВС.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ Тогда
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектЭДВС, Отказ, "Товары");
			ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ОбъектЭДВС, Отказ, "ТоварыВС");
			Если ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Тогда
				СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "Товары");
				СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "ТоварыВС");
			КонецЕсли;	
			
			Если ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Или ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС Тогда
				//необходимо будет создать/обновить источники
				Если ОбъектЭДВС.ЭтоНовый() Тогда
					НовыйЭДВССсылка = Документы.ЭлектронныйДокументВС.ПолучитьСсылку(Новый УникальныйИдентификатор);
					ОбъектЭДВС.УстановитьСсылкуНового(НовыйЭДВССсылка);
				КонецЕсли;	
				СоздатьОбновитьИсточникиПроисхождения(ОбъектЭДВС, "ТоварыВС");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбъектЭДВС.Автор) Тогда
		ОбъектЭДВС.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭДВС_ОбработкаПроверкиЗаполнения(ОбъектЭДВС, Отказ, ПроверяемыеРеквизиты) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	ВССерверПереопределяемый.ДокументЭДВС_ОбработкаПроверкиЗаполнения(ОбъектЭДВС, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	 
	ЭСФСерверПереопределяемый.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументЭДВС_ОбработкаПроведения(ОбъектЭДВС, Отказ, РежимПроведения) Экспорт
	
	ВСОбщегоНазначения.ПодготовитьНаборыЗаписейКПроведению(ОбъектЭДВС);
	
	ЭДВССсылка = ОбъектЭДВС.Ссылка;
	
	Если ОбъектЭДВС.Статус = Перечисления.СтатусыУТТН.Отмененный Тогда 
		ДокументЭДВС_ОбработкаУдаленияПроведения(ЭДВССсылка, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроведения = ПодготовитьПараметрыПроведенияЭДВС(ЭДВССсылка, Отказ);

	ДокументОснование = ОбъектЭДВС.ДокументОснование;
	
	Если ЗначениеЗаполнено(ДокументОснование) 
			И ВССерверПереопределяемый.РазрешеноИзменятьСтатусОформленияДокумента(ДокументОснование, ОбъектЭДВС.ТипФормы) Тогда
		ВССервер.СформироватьДвиженияСтатусыОформленияДокументов(ПараметрыПроведения.ТаблицаСтатусыОформленияДокументов);
	КонецЕсли;	
	
	Если ПараметрыПроведения.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		ВССервер.ВыполнитьКонтрольТоварыОрганизацийНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВС, Отказ);		
	КонецЕсли;	
	
	ВССервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты,ПараметрыПроведения.ТаблицаТоварыНаВС, ОбъектЭДВС.Движения, Отказ);
	
	ВССервер.СформироватьДвиженияТоваровНаВС(ПараметрыПроведения.Реквизиты, ПараметрыПроведения.ТаблицаТоварыНаВСПриход, ОбъектЭДВС.Движения, Отказ);		
	
КонецПроцедуры

Процедура ДокументЭДВС_ОбработкаУдаленияПроведения(ЭДВССсылка, Отказ) Экспорт
	ДокументОснование = ЭДВССсылка.ДокументОснование;
	
	Если ЗначениеЗаполнено(ДокументОснование) 
		И ВССерверПереопределяемый.РазрешеноИзменятьСтатусОформленияДокумента(ДокументОснование, ЭДВССсылка.ТипФормы) Тогда
			
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЭДВС.ТипФормы В (&ТипФормыПеремещение)
		|			ТОГДА ЭДВС.ОрганизацияПолучатель
		|		ИНАЧЕ ЭДВС.Организация
		|	КОНЕЦ КАК Организация,
		|	ЭДВС.ДокументОснование КАК Документ,
		|	ВЫБОР
		|		КОГДА ЭДВС.ТипФормы В (&ТипФормыПеремещение)
		|				И ЭДВС.Организация <> ЭДВС.ОрганизацияПолучатель
		|			ТОГДА ЭДВС.СкладПолучатель
		|		ИНАЧЕ ЭДВС.СкладОтправитель
		|	КОНЕЦ КАК Склад,
		|	ЭДВС.ДокументОснование.Дата КАК ДатаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументов.КПереоформлению) КАК Статус
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭДВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументов КАК СтатусыОформленияДокументов
		|		ПО ЭДВС.ДокументОснование = СтатусыОформленияДокументов.Документ
		|			И (ВЫБОР
		|				КОГДА ЭДВС.ТипФормы В (&ТипФормыПеремещение)
		|					ТОГДА ЭДВС.ОрганизацияПолучатель
		|				ИНАЧЕ ЭДВС.Организация
		|			КОНЕЦ = СтатусыОформленияДокументов.Организация)
		|			И (ВЫБОР
		|				КОГДА ЭДВС.ТипФормы В (&ТипФормыПеремещение)
		|						И ЭДВС.Организация <> ЭДВС.ОрганизацияПолучатель
		|					ТОГДА ЭДВС.СкладПолучатель
		|				ИНАЧЕ ЭДВС.СкладОтправитель
		|			КОНЕЦ = СтатусыОформленияДокументов.Склад)
		|ГДЕ
		|	ЭДВС.Ссылка = &ДокументСсылка
		|	И НЕ СтатусыОформленияДокументов.Статус ЕСТЬ NULL ";		
		
		Запрос.УстановитьПараметр("ДокументСсылка", ЭДВССсылка);
		
		МассивТиповФормПеремещение = Новый Массив;
		МассивТиповФормПеремещение.Добавить(Перечисления.ТипыФормВС.ВнутреннееПеремещение);
		МассивТиповФормПеремещение.Добавить(Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами);
		
		Запрос.УстановитьПараметр("ТипФормыПеремещение", МассивТиповФормПеремещение);
		
		ЭтоИмпорт =  ВССерверПереопределяемый.ТипДокументаТаможеннойДекларации(ТипЗнч(ДокументОснование));
		Если ЭтоИмпорт Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭДВС.СкладОтправитель", "ЭДВС.СкладПолучатель");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		ВССервер.СформироватьДвиженияСтатусыОформленияДокументов(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДокументЭДВС_ОбработкаЗаполнения(ОбъектЭСФ, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		ДокументОснованиеДляЗаполнения = ДанныеЗаполнения;
	КонецЕсли;	

	Если ДокументОснованиеДляЗаполнения = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(ДокументОснованиеДляЗаполнения) = Тип("Массив") 
			И ДокументОснованиеДляЗаполнения.Количество() <> 0 Тогда
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения[0]);
	Иначе
		ТипДокумента = ТипЗнч(ДокументОснованиеДляЗаполнения);
	КонецЕсли;	
	
	ВидДвижения = ВСКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения().Получить(ТипДокумента);
	Если ВидДвижения = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыЗаполнения = ВССервер.ПолучитьПараметрыЗаполненияЭДВСПоУмолчанию();

	НомерДетализируемойСтроки = Неопределено;
	ДетализироватьОС = Ложь;
	ЭтоВводОстатковИзВходящегоЭСФ = Ложь;
	ЭтоВводНаПеремещениеИзВходящегоСНТ = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("НомерДетализируемойСтроки") Тогда
			НомерДетализируемойСтроки = ДанныеЗаполнения.НомерДетализируемойСтроки;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДетализироватьОС") Тогда
			ДетализироватьОС = ДанныеЗаполнения.ДетализироватьОС;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ЭтоВводОстатковИзВходящегоЭСФ") Тогда
			ЭтоВводОстатковИзВходящегоЭСФ = ДанныеЗаполнения.ЭтоВводОстатковИзВходящегоЭСФ;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ЭтоВводНаПеремещениеИзВходящегоСНТ") Тогда
			ЭтоВводНаПеремещениеИзВходящегоСНТ = ДанныеЗаполнения.ЭтоВводНаПеремещениеИзВходящегоСНТ;
		КонецЕсли;
	КонецЕсли;	
	
	ДатаДокумента = ДокументОснованиеДляЗаполнения.Дата;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала"			, НачалоДня(ДатаДокумента));
	ПараметрыЗаполнения.Вставить("ДатаОкончания"		, КонецДня(ДатаДокумента));
	
	ПараметрыЗаполнения.Вставить("МассивДокументов"			, ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("МассивВидовДокумента"		, Новый Массив);
	ПараметрыЗаполнения.Вставить("НомерДетализируемойСтроки"	, НомерДетализируемойСтроки);
	ПараметрыЗаполнения.Вставить("ДетализироватьОС"				, ДетализироватьОС);
	ПараметрыЗаполнения.Вставить("ЭтоВводОстатковИзВходящегоЭСФ", ЭтоВводОстатковИзВходящегоЭСФ);
	ПараметрыЗаполнения.Вставить("ЭтоВводНаПеремещениеИзВходящегоСНТ", ЭтоВводНаПеремещениеИзВходящегоСНТ);

	ВидДвиженияПоВО = ВССерверПереопределяемый.ПроверитьВидДвиженияПоВО(ДанныеЗаполнения.ДокументОснование);
	ВидДвижения = ?(ЗначениеЗаполнено(ВидДвиженияПоВО), ВидДвиженияПоВО, ВидДвижения);
	
	Если ВидДвижения = "Приход" Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены", Ложь);

		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЭДВС(ПараметрыЗаполнения);
	Иначе
		Если (ВидДвижения = "ЭСФ" ИЛИ ВидДвижения = "Расход")
				И ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
				И ДанныеЗаполнения.Свойство("ЭтоОформлениеКонвертацииЕИ") Тогда
			ПараметрыЗаполнения.Вставить("ЭтоОформлениеКонвертацииЕИ"		, ДанныеЗаполнения.ЭтоОформлениеКонвертацииЕИ);
		КонецЕсли;	
		ПараметрыЗаполнения.Вставить("ЗаполнятьЦены"		, ВидДвижения <> "ЭСФ" И НЕ (ДанныеЗаполнения.Свойство("ЭтоОформлениеКонвертацииЕИ") И ДанныеЗаполнения.ЭтоОформлениеКонвертацииЕИ));
		ПараметрыЗаполнения.Вставить("ПоДвижениямДокумента"	, ВидДвижения <> "ЭСФ" И НЕ (ДанныеЗаполнения.Свойство("ЭтоОформлениеКонвертацииЕИ") И ДанныеЗаполнения.ЭтоОформлениеКонвертацииЕИ));
		
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЭДВС_Расход(ПараметрыЗаполнения);
	КонецЕсли;	
	
	Если ТипЗнч(МассивДанныхДляЗаполнения) = Тип("Массив") И МассивДанныхДляЗаполнения.Количество() > 0 Тогда
		
		СтруктураДокумента = МассивДанныхДляЗаполнения[0];
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ,СтруктураДокумента.Реквизиты[0]);
		
		Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
			ОбъектЭСФ.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
		КонецЕсли;
		
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.Товары Цикл
			
			НоваяСтрокаТЧ = ОбъектЭСФ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ТоварНаименование) Тогда
				НоваяСтрокаТЧ.ТоварНаименование = СтрокаТЧ.Товар;
			КонецЕсли;
			
			Если ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
				НоваяСтрокаТЧ.ИсточникПроисхожденияПолучатель = НоваяСтрокаТЧ.ИсточникПроисхождения;
				НоваяСтрокаТЧ.ДополнительныйИдентификаторПолучатель = НоваяСтрокаТЧ.ДополнительныйИдентификатор;
			КонецЕсли;				
			
			Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ЕдиницаИзмеренияКод)
				И ЗначениеЗаполнено(НоваяСтрокаТЧ.ЕдиницаИзмерения) 
				И ЗначениеЗаполнено(НоваяСтрокаТЧ.Товар) Тогда
				
				НоваяСтрокаТЧ.ЕдиницаИзмеренияКод = ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(НоваяСтрокаТЧ.ЕдиницаИзмерения, НоваяСтрокаТЧ.Товар);		
			КонецЕсли;
			
		КонецЦикла;	
		
		//Заполняем табличную часть "Товары ВС"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.ТоварыВС Цикл
			
			НоваяСтрокаТЧ = ОбъектЭСФ.ТоварыВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ТоварНаименование) Тогда
				НоваяСтрокаТЧ.ТоварНаименование = СтрокаТЧ.Товар;
			КонецЕсли;
			
			//Если у ГСВС есть записи третьего уровня - не заполняем 
			Если ВидДвижения = "Приход" Тогда
				Если ЗначениеЗаполнено(СтрокаТЧ.ГСВС) Тогда
					ГСВССодержитДополнительныйУровень = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ГСВС, "СодержитДополнительныйУровень");
				Иначе
					ГСВССодержитДополнительныйУровень = Ложь;
				КонецЕсли;
				
				Если ГСВССодержитДополнительныйУровень Тогда
					НоваяСтрокаТЧ.СоставнойКодГСВС = "";
					НоваяСтрокаТЧ.ГСВС = Справочники.НоменклатураГСВС.ПустаяСсылка();
					ТекстСообщения = НСтр("ru='Документ %1. Табличная часть ""Товары Виртуального склада"", раздел Е2. Товары, строка %2. ГСВС, найденный по коду ТН ВЭД товара, содержит коды третьего уровня, в связи с этим поле ГСВС не заполнено. Рекомендуется выбрать ГСВС самостоятельно'");
					ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектЭСФ, НоваяСтрокаТЧ.НомерСтроки); 
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
				НоваяСтрокаТЧ.ИсточникПроисхожденияПолучатель = НоваяСтрокаТЧ.ИсточникПроисхождения;
				НоваяСтрокаТЧ.ДополнительныйИдентификаторПолучатель = НоваяСтрокаТЧ.ДополнительныйИдентификатор;
			КонецЕсли;				
			
			Если Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ЕдиницаИзмеренияКод)
				И ЗначениеЗаполнено(НоваяСтрокаТЧ.ЕдиницаИзмерения) 
				И ЗначениеЗаполнено(НоваяСтрокаТЧ.Товар) Тогда
				
				НоваяСтрокаТЧ.ЕдиницаИзмеренияКод = ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(НоваяСтрокаТЧ.ЕдиницаИзмерения, НоваяСтрокаТЧ.Товар);		
			КонецЕсли;
			
		КонецЦикла;	
		
		//Заполняем табличную часть "Исходные товары"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.ИсходныеТовары Цикл
			НоваяСтрокаТЧ = ОбъектЭСФ.ИсходныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмеренияКод)
				И ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) 
				И ЗначениеЗаполнено(СтрокаТЧ.Товар) Тогда
				
				НоваяСтрокаТЧ.ЕдиницаИзмеренияКод = ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(НоваяСтрокаТЧ.ЕдиницаИзмерения, НоваяСтрокаТЧ.Товар);		
			КонецЕсли;
			
		КонецЦикла;	
		
		//Заполняем табличную часть "Исходные товары ВС"
		Для Каждого СтрокаТЧ Из СтруктураДокумента.ИсходныеТоварыВС Цикл
			НоваяСтрокаТЧ = ОбъектЭСФ.ИсходныеТоварыВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмеренияКод)
				И ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) 
				И ЗначениеЗаполнено(СтрокаТЧ.Товар) Тогда
				
				НоваяСтрокаТЧ.ЕдиницаИзмеренияКод = ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(НоваяСтрокаТЧ.ЕдиницаИзмерения, НоваяСтрокаТЧ.Товар);		
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументЭДВС_ЗаполнитьКорректировкаИП(ОбъектЭДВС, КорректируемыйДокументЭДВС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", КорректируемыйДокументЭДВС);
	
	ОбъектЭДВС.Товары.Очистить();
	ОбъектЭДВС.ТоварыВС.Очистить();
	ОбъектЭДВС.ИсходныеТовары.Очистить();
	ОбъектЭДВС.ИсходныеТоварыВС.Очистить();
	
	Если Не ЗначениеЗаполнено(КорректируемыйДокументЭДВС) Тогда
		Возврат;
	КонецЕсли;
	
	//Заполняем реквизиты документа
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВС.Организация,
	|	ЭлектронныйДокументВС.ПолучательАдрес,
	|	ЭлектронныйДокументВС.ПолучательНаименование,
	|	ЭлектронныйДокументВС.ПолучательИдентификатор,
	|	ЭлектронныйДокументВС.СкладПолучатель,
	|	ЭлектронныйДокументВС.СкладПолучательИдентификатор,
	|	ЭлектронныйДокументВС.СкладПолучательНаименование,
	|	ЭлектронныйДокументВС.ОтправительАдрес,
	|	ЭлектронныйДокументВС.ОтправительНаименование,
	|	ЭлектронныйДокументВС.ОтправительИдентификатор,
	|	ЭлектронныйДокументВС.СкладОтправитель,
	|	ЭлектронныйДокументВС.СкладОтправительИдентификатор,
	|	ЭлектронныйДокументВС.СкладОтправительНаименование,
	|	ЭлектронныйДокументВС.ДатаИсходногоДокумента,
	|	ЭлектронныйДокументВС.Комментарий,
	|	ЭлектронныйДокументВС.РегистрационныйНомер,
	|	ЭлектронныйДокументВС.ТипФормы,
	|	ЭлектронныйДокументВС.ПричинаСписания,
	|	ЭлектронныйДокументВС.ВерсияУТТН,
	|	ЭлектронныйДокументВС.Идентификатор,
	|	ЭлектронныйДокументВС.Статус,
	|	ЭлектронныйДокументВС.ТипПодписи,
	|	ЭлектронныйДокументВС.ОбщаяСуммаТоваров,
	|	ЭлектронныйДокументВС.ВидДетализации,
	|	ЭлектронныйДокументВС.ОбщаяСуммаИсходныхТоваров,
	|	ЭлектронныйДокументВС.ЭЦП,
	|	ЭлектронныйДокументВС.Причина,
	|	ЭлектронныйДокументВС.ДокументОснование,
	|	ЭлектронныйДокументВС.Ссылка КАК КорректируемыйДокументЭДВС,
	|	ИСТИНА КАК КорректировкаИП
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ТоварНаименование,
	|	Товары.Товар,
	|	Товары.СоставнойКодГСВС,
	|	Товары.ФизическаяМетка,
	|	Товары.КодТНВЭД,
	|	Товары.ЕдиницаИзмерения,
	|	-Товары.Количество КАК Количество,
	|	Товары.Цена,
	|	Товары.ВозможенЭкспорт,
	|	Товары.ТипПошлины,
	|	Товары.СтранаПроисхожденияТовараКод,
	|	Товары.НомерЗаявленияВРамкахТС,
	|	Товары.ДатаСертификатаПроисхождения,
	|	Товары.ПризнакПроисхождения,
	|	Товары.ТоварНаименованиеВРамкахТС,
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.ЕдиницаИзмеренияКод,
	|	Товары.Сумма,
	|	Товары.ГСВС,
	|	Товары.ИсточникПроисхождения,
	|	Товары.ТипПроисхождения,
	|	Товары.СтранаПроисхожденияТовара
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВС.ТоварНаименование,
	|	ТоварыВС.Товар,
	|	ТоварыВС.СоставнойКодГСВС,
	|	ТоварыВС.ФизическаяМетка,
	|	ТоварыВС.КодТНВЭД,
	|	ТоварыВС.ЕдиницаИзмерения,
	|	-ТоварыВС.Количество КАК Количество,
	|	ТоварыВС.Цена,
	|	ТоварыВС.ВозможенЭкспорт,
	|	ТоварыВС.ТипПошлины,
	|	ТоварыВС.СтранаПроисхожденияТовараКод,
	|	ТоварыВС.НомерЗаявленияВРамкахТС,
	|	ТоварыВС.ДатаСертификатаПроисхождения,
	|	ТоварыВС.ПризнакПроисхождения,
	|	ТоварыВС.ТоварНаименованиеВРамкахТС,
	|	ТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТоварыВС.ЕдиницаИзмеренияКод,
	|	ТоварыВС.Сумма,
	|	ТоварыВС.ГСВС,
	|	ТоварыВС.ИсточникПроисхождения,
	|	ТоварыВС.ТипПроисхождения,
	|	ТоварыВС.СтранаПроисхожденияТовара
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ТоварыВС
	|ГДЕ
	|	ТоварыВС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеТовары.ТоварНаименование,
	|	ИсходныеТовары.Товар,
	|	ИсходныеТовары.СоставнойКодГСВС,
	|	ИсходныеТовары.ФизическаяМетка,
	|	ИсходныеТовары.КодТНВЭД,
	|	ИсходныеТовары.ЕдиницаИзмерения,
	|	-ИсходныеТовары.Количество КАК Количество,
	|	ИсходныеТовары.Цена,
	|	ИсходныеТовары.ВозможенЭкспорт,
	|	ИсходныеТовары.ТипПошлины,
	|	ИсходныеТовары.СтранаПроисхожденияТовараКод,
	|	ИсходныеТовары.НомерЗаявленияВРамкахТС,
	|	ИсходныеТовары.ДатаСертификатаПроисхождения,
	|	ИсходныеТовары.ПризнакПроисхождения,
	|	ИсходныеТовары.ТоварНаименованиеВРамкахТС,
	|	ИсходныеТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсходныеТовары.ЕдиницаИзмеренияКод,
	|	ИсходныеТовары.Сумма,
	|	ИсходныеТовары.ГСВС,
	|	ИсходныеТовары.ИсточникПроисхождения,
	|	ИсходныеТовары.ТипПроисхождения,
	|	ИсходныеТовары.СтранаПроисхожденияТовара
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ИсходныеТовары КАК ИсходныеТовары
	|ГДЕ
	|	ИсходныеТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеТоварыВС.ТоварНаименование,
	|	ИсходныеТоварыВС.Товар,
	|	ИсходныеТоварыВС.СоставнойКодГСВС,
	|	ИсходныеТоварыВС.ФизическаяМетка,
	|	ИсходныеТоварыВС.КодТНВЭД,
	|	ИсходныеТоварыВС.ЕдиницаИзмерения,
	|	-ИсходныеТоварыВС.Количество КАК Количество,
	|	ИсходныеТоварыВС.Цена,
	|	ИсходныеТоварыВС.ВозможенЭкспорт,
	|	ИсходныеТоварыВС.ТипПошлины,
	|	ИсходныеТоварыВС.СтранаПроисхожденияТовараКод,
	|	ИсходныеТоварыВС.НомерЗаявленияВРамкахТС,
	|	ИсходныеТоварыВС.ДатаСертификатаПроисхождения,
	|	ИсходныеТоварыВС.ПризнакПроисхождения,
	|	ИсходныеТоварыВС.ТоварНаименованиеВРамкахТС,
	|	ИсходныеТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсходныеТоварыВС.ЕдиницаИзмеренияКод,
	|	ИсходныеТоварыВС.Сумма,
	|	ИсходныеТоварыВС.ГСВС,
	|	ИсходныеТоварыВС.ИсточникПроисхождения,
	|	ИсходныеТоварыВС.ТипПроисхождения,
	|	ИсходныеТоварыВС.СтранаПроисхожденияТовара
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ИсходныеТовары КАК ИсходныеТоварыВС
	|ГДЕ
	|	ИсходныеТоварыВС.Ссылка = &Ссылка";
				   
	Результат = Запрос.ВыполнитьПакет();
	
	ЗаполнитьЗначенияСвойств(ОбъектЭДВС, Результат[0].Выгрузить()[0],, "Идентификатор, Статус, ЭЦП, ТипПодписи, РегистрационныйНомер");
	
	//Заполняем таблицу Товары	
	Для Каждого СтрокаВыборки ИЗ Результат[1].Выгрузить() Цикл	
		СтрокаТабличнойЧасти = ОбъектЭДВС.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаВыборки); 
	КонецЦикла;		
	
	//Заполняем таблицу Товары ВС	
	Для Каждого СтрокаВыборки ИЗ Результат[2].Выгрузить() Цикл	
		СтрокаТабличнойЧасти = ОбъектЭДВС.ТоварыВС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаВыборки); 
	КонецЦикла;		
	
	//Заполняем таблицу Исходные товары	
	Для Каждого СтрокаВыборки ИЗ Результат[3].Выгрузить() Цикл
		СтрокаТабличнойЧасти = ОбъектЭДВС.ИсходныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаВыборки);
	КонецЦикла;	
	
	//Заполняем таблицу Исходные товары	ВС
	Для Каждого СтрокаВыборки ИЗ Результат[4].Выгрузить() Цикл
		СтрокаТабличнойЧасти = ОбъектЭДВС.ИсходныеТоварыВС.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаВыборки);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПодготовитьПараметрыПроведенияЭДВС(ДокументСсылка, Отказ) Экспорт	
	ПараметрыПроведения = Новый Структура;
	
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст 		= ТекстЗапросаРеквизитыДокументаЭДВС(НомераТаблиц);
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	Реквизиты = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаСтатусыОформленияДокументовЭДВС(НомераТаблиц, Реквизиты.ДокументОснование)
					+ ТекстЗапросаТаблицаТоварыНаВС_ЭДВС(НомераТаблиц, Реквизиты, ПараметрыПроведения);
					
	Если Реквизиты.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары
			ИЛИ Реквизиты.ТипФормы = Перечисления.ТипыФормВС.Производство
			ИЛИ Реквизиты.ТипФормы = Перечисления.ТипыФормВС.Остатки
			ИЛИ Реквизиты.ТипФормы = Перечисления.ТипыФормВС.КорректировкаОстатков
			Или Реквизиты.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта Тогда 
		ВидДвижения = ВидДвиженияНакопления.Приход;
	Иначе
		ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	
	ПараметрыПроведения.Вставить("ВидДвижения", ВидДвижения);
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыОформленияДокументов.Оформлено);
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

//Подготовка параметров
Функция ТекстЗапросаРеквизитыДокументаЭДВС(НомераТаблиц)
	
	НомераТаблиц.Вставить("вт_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВС.Дата,
	|	ЭлектронныйДокументВС.Организация,
	|	ЭлектронныйДокументВС.ОрганизацияПолучатель,
	|	ЭлектронныйДокументВС.СтруктурноеПодразделение,
	|	ЭлектронныйДокументВС.СтруктурноеПодразделениеПолучатель,
	|	ЭлектронныйДокументВС.Ссылка,
	|	ВЫБОР
	|		КОГДА ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДекларацияНаТовары)
	|			ТОГДА ЭлектронныйДокументВС.СкладПолучатель
	|		ИНАЧЕ ЭлектронныйДокументВС.СкладОтправитель
	|	КОНЕЦ КАК Склад,
	|	ЭлектронныйДокументВС.СкладПолучатель КАК СкладПолучатель,
	|	ЭлектронныйДокументВС.ДокументОснование КАК ДокументОснование,
	|	ЭлектронныйДокументВС.ТипФормы,
	|	ЭлектронныйДокументВС.ВидДетализации,
	|	ЭлектронныйДокументВС.КорректировкаИП,
	|	ЭлектронныйДокументВС.ПричинаСписания
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ОрганизацияПолучатель,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.СтруктурноеПодразделениеПолучатель,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.СкладПолучатель КАК СкладПолучатель,
	|	Реквизиты.ДокументОснование,
	|	Реквизиты.ТипФормы,
	|	Реквизиты.ВидДетализации,
	|	Реквизиты.КорректировкаИП,
	|	Реквизиты.ПричинаСписания
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса; 
	
КонецФункции

Функция ТекстЗапросаСтатусыОформленияДокументовЭДВС(НомераТаблиц, ДокументОснование)

	НомераТаблиц.Вставить("ТаблицаСтатусыОформленияДокументов", НомераТаблиц.Количество());

	ТекстЗапроса = ВССерверПереопределяемый.ТекстЗапросаСтатусыОформленияДокументовЭДВС(ДокументОснование);		

	Возврат ТекстЗапроса + ВСВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

//Подготовка таблицы товаров на ВС
Функция ТекстЗапросаТаблицаТоварыНаВС_ЭДВС(НомераТаблиц, Реквизиты, ПараметрыПроведения)

	Возврат ВССерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВС_ЭДВС(НомераТаблиц, Реквизиты, ПараметрыПроведения);		

КонецФункции

Функция ВыборкаТоваровБезДвиженийНаВС(Знач ТоварыЭСФВсе, Знач ТоварыЭСФДвиженияНаВС)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭСФТовары.Товар КАК ТоварыЭСФВсе,
	|	ЭСФТовары.НомерСтроки КАК НомерСтрокиЭСФВсе
	|ПОМЕСТИТЬ вт_ТоварыЭСФВсе
	|ИЗ
	|	&ТоварыЭСФВсе КАК ЭСФТовары
	|ГДЕ
	|	ЭСФТовары.ПризнакПроисхождения <> ""6""	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭСФТовары.Номенклатура КАК ТоварыэЭСФДвижНаВС,
	|	ЭСФТовары.НомерСтроки КАК НомерСтрокиЭСФДвижНаВС
	|ПОМЕСТИТЬ вт_ТоварыЭСФДвиженияНаВС
	|ИЗ
	|	&ТоварыЭСФДвиженияНаВС КАК ЭСФТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ТоварыЭСФДвиженияНаВС.ТоварыэЭСФДвижНаВС КАК ТоварыэЭСФДвижНаВС,
	|	вт_ТоварыЭСФВсе.ТоварыЭСФВсе КАК ТоварыЭСФВсе,
	|	вт_ТоварыЭСФДвиженияНаВС.НомерСтрокиЭСФДвижНаВС КАК НомерСтрокиЭСФДвижНаВС,
	|	вт_ТоварыЭСФВсе.НомерСтрокиЭСФВсе КАК НомерСтрокиЭСФВсе
	|ПОМЕСТИТЬ вт_ТоварыЭСФБезДвижений
	|ИЗ
	|	вт_ТоварыЭСФВсе КАК вт_ТоварыЭСФВсе
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ТоварыЭСФДвиженияНаВС КАК вт_ТоварыЭСФДвиженияНаВС
	|		ПО вт_ТоварыЭСФВсе.НомерСтрокиЭСФВсе = вт_ТоварыЭСФДвиженияНаВС.НомерСтрокиЭСФДвижНаВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ТоварыЭСФБезДвижений.ТоварыЭСФВсе КАК Номенклатура,
	|	вт_ТоварыЭСФБезДвижений.НомерСтрокиЭСФВсе КАК НомерСтроки
	|ИЗ
	|	вт_ТоварыЭСФБезДвижений КАК вт_ТоварыЭСФБезДвижений
	|ГДЕ
	|	вт_ТоварыЭСФБезДвижений.НомерСтрокиЭСФДвижНаВС ЕСТЬ NULL " ;
	
	Запрос.УстановитьПараметр("ТоварыЭСФВсе"			, ТоварыЭСФВсе.Выгрузить());	
	Запрос.УстановитьПараметр("ТоварыЭСФДвиженияНаВС"	, ТоварыЭСФДвиженияНаВС);
	
	Выборка = Запрос.Выполнить().Выгрузить();	
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#Область ПеренаправляемыеФункцииЭДВС

Функция ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭДВС(ПараметрКоманды, ВидДвижения) Экспорт
	Возврат ВССервер.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭДВС(ПараметрКоманды, ВидДвижения);
КонецФункции

Функция СоздатьСписокЭлектронныхДокументовВС(ПараметрыСоздания) Экспорт 
	Возврат ВССервер.СоздатьСписокЭлектронныхДокументовВС(ПараметрыСоздания);
КонецФункции

Функция ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания) Экспорт
	Возврат ВССервер.ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания);
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияЭДВС(ПараметрыЗаполненияЭДВС) Экспорт
	Возврат ВССервер.ПодготовитьТаблицыДанныхДляЗаполненияЭДВС(ПараметрыЗаполненияЭДВС)
КонецФункции	

Функция ПодготовитьТаблицыДанныхДляЗаполненияЭДВСДляЗаполненияВводаНачальныхОстатков(ПараметрыСоздания) Экспорт 
	Возврат ВССервер.ПодготовитьТаблицыДанныхДляЗаполненияЭДВСДляЗаполненияВводаНачальныхОстатков(ПараметрыСоздания);
КонецФункции	

Функция ПодготовитьДанныеДляЗаполненияЭДВС(ПараметрыСоздания) Экспорт 
	Возврат ВССервер.ПодготовитьДанныеДляЗаполненияЭДВС(ПараметрыСоздания);
КонецФункции	

Функция ПодготовитьДанныеДляЗаполненияЭДВС_Расход(ПараметрыСоздания) Экспорт 
	Возврат ВССервер.ПодготовитьДанныеДляЗаполненияЭДВС_Расход(ПараметрыСоздания);
КонецФункции	

Функция ПодготовитьДанныеДляЗаполненияЭДВС_ВводНачальныхОстатков(ПараметрыСоздания) Экспорт 
	Возврат ВССервер.ПодготовитьДанныеДляЗаполненияЭДВС_ВводНачальныхОстатков(ПараметрыСоздания);
КонецФункции	

#КонецОбласти

#Область ДанныеДляПроведенияЭСФ

Функция ПодготовитьПараметрыПроведенияЭСФ(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
			
	Если ДокументСсылка.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда		
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Иначе
		Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЗначениеУслуги", Строка(6));
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц);
	
	Результат 			= Запрос.ВыполнитьПакет();
	ТаблицаРеквизиты 	= Результат[НомераТаблиц["Реквизиты"]].Выгрузить();
	Реквизиты = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	ПараметрыПроведения.Вставить("Реквизиты", ТаблицаРеквизиты);
	
	НомераТаблиц = Новый Структура;
	
	ЭтоРозничнаяРеализацияВПределахДат = ПроверитьЭСФНаРеализацию(ДокументСсылка);
	ПараметрыПроведения.Вставить("ЭтоРозничнаяРеализацияВПределахДат", ЭтоРозничнаяРеализацияВПределахДат);
	
	Если (СтрНайти(ДокументСсылка.ДокументПодтверждающийПоставкуНомер, "NON SNT") > 0) Тогда			
		ЭСФБезСНТ = Истина;	
	Иначе
		ЭСФБезСНТ = Ложь;
	КонецЕсли;
	ПараметрыПроведения.Вставить("ЭСФБезСНТ", ЭСФБезСНТ);
	
	Если ДокументСсылка.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		ДатаПереходаНаВС = ДатаПереходаНаВС();
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДокументСсылка.Дата));
		Запрос.УстановитьПараметр("ДатаПереходаНаВС", ДатаПереходаНаВС);
		Запрос.Текст = ТекстЗапросаТаблицаТоварыНаВССУчетомДатыОборотаДатыПризнакаВС(НомераТаблиц, ЭСФБезСНТ);
	Иначе	
		Запрос.Текст = ТекстЗапросаТаблицаТоварыНаВС(НомераТаблиц, ЭСФБезСНТ);
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(Запрос.Текст) Тогда 
		Результат = Запрос.ВыполнитьПакет();
		Для Каждого НомерТаблицы Из НомераТаблиц Цикл		
			ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ПараметрыПроведения;

КонецФункции 

Функция ПроверитьЭСФНаРеализацию(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭСФПолучатели.РозничнаяРеализация,
	|	ЭСФ.ДатаОборота МЕЖДУ &НачалоПериода И &КонецПериода КАК ДатаОборотаВПределахДат
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ЭСФПолучатели.Ссылка = ЭСФ.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭСФ.ДатаОборота МЕЖДУ &НачалоПериода И &КонецПериода КАК ДатаОборотаВПределахДат,
	|	ЭСФПолучатели.РозничнаяРеализация
	|ИЗ
	|	Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ЭСФПолучатели.Ссылка = ЭСФ.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &СвязанныйЭСФССылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СвязанныйЭСФССылка", ДокументСсылка.СвязанныйЭСФ);
	Запрос.УстановитьПараметр("НачалоПериода", Дата("20210116"));
	Запрос.УстановитьПараметр("КонецПериода", Дата("20210505"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПоЭСФ = МассивРезультатов[0].Выгрузить();
	ДанныеПоСвязаннойЭСФ = МассивРезультатов[1].Выгрузить();
	
	
	ЭтоЭСФНаРеализациюВРамкахДат = Ложь;
	Если ДанныеПоСвязаннойЭСФ.Количество() > 0 Тогда
		
		Строка = ДанныеПоСвязаннойЭСФ[0];
		Если Строка.ДатаОборотаВПределахДат	И Строка.РозничнаяРеализация Тогда
			ЭтоЭСФНаРеализациюВРамкахДат = Истина;
		КонецЕсли;	
		
	ИначеЕсли ДанныеПоЭСФ.Количество() > 0 Тогда	
		
		Строка = ДанныеПоЭСФ[0];
		Если Строка.ДатаОборотаВПределахДат	И Строка.РозничнаяРеализация Тогда
			ЭтоЭСФНаРеализациюВРамкахДат = Истина;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ЭтоЭСФНаРеализациюВРамкахДат;
		
КонецФункции

//Подготовка таблицы товаров на ВС
Функция ТекстЗапросаТаблицаТоварыНаВС(НомераТаблиц, Знач ЭСФБезСНТ = Ложь, Знач ЭтоРозничнаяРеализацияВПределахДат = Ложь)

	НомераТаблиц.Вставить("ВТ_СвязанныеЭСФ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТаблицаТоварыНаВС", НомераТаблиц.Количество());
	
	ТекстЗапроса = ВССерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВС(ЭСФБезСНТ, ЭтоРозничнаяРеализацияВПределахДат);
		
	Возврат ТекстЗапроса + ВСВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаТоварыНаВССУчетомДатыОборотаДатыПризнакаВС(НомераТаблиц, Знач ЭСФБезСНТ = Ложь, Знач ЭтоРозничнаяРеализацияВПределахДат = Ложь)
		
	НомераТаблиц.Вставить("ВТ_СвязанныеЭСФ"		, 0);
	НомераТаблиц.Вставить("ТаблицаТоварыНаВС"	, 3);

	ТекстЗапроса = ВССерверПереопределяемый.ТекстЗапросаТаблицаТоварыНаВССУчетомДатыОборотаДатыПризнакаВС(ЭСФБезСНТ, ЭтоРозничнаяРеализацияВПределахДат);
		
	Возврат ТекстЗапроса + ВСВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

//Подготовка параметров
Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
	
	НомераТаблиц.Вставить("вт_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЭСФ.Дата,
	|	ЭСФ.Организация,
	|	ЭСФ.СтруктурноеПодразделение,
	|	ЭСФ.Ссылка,
	|	ЭСФ.Склад КАК Склад,
	|	ЭСФ.Направление,
	|	ЭСФ.Вид,
	|	ЭСФ.СвязанныйЭСФ,
	|	ЭСФ.ДатаОборота
	|
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.СтруктурноеПодразделение,
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.Направление,
	|	Реквизиты.Вид,
	|	Реквизиты.СвязанныйЭСФ,
	|	Реквизиты.ДатаОборота
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса; 
	
КонецФункции

#КонецОбласти

#Область ДействияСИсточникамиПроисхождения

Процедура СоздатьОбновитьИсточникиПроисхождения(ОбъектЭСФ, ИмяТабличнойЧасти)
	
	ТаблицаИсточниковПроисхождения = ВССервер.ПустаяТаблицаИсточниковПроисхождения();
	//будут хранится данные по измененным строкам, для создания новых источников происхождения
	ТаблицаИсточниковПроисхожденияДляОбработки = ТаблицаИсточниковПроисхождения.СкопироватьКолонки();
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерПозицииВДекларацииИлиЗаявленииЧисло", Новый ОписаниеТипов("Число"));	
	
	Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭлектронныйДокументВС")  
		И (ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами
		ИЛИ ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС
		ИЛИ ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС
		ИЛИ (ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.Детализация И ОбъектЭСФ.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)) Тогда
		ЭтоЭДВСПеремещение = Истина;	
	Иначе	
		ЭтоЭДВСПеремещение = Ложь;
	КонецЕсли;	
	
	Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭСФ") Тогда 
		Если СтрНайти(ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер, "NON SNT") = 1 Тогда
			ЭтоЭСФБезСНТ = Истина;
		Иначе
			ЭтоЭСФБезСНТ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовар Из ОбъектЭСФ[ИмяТабличнойЧасти] Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовар.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭлектронныйДокументВС") Тогда
			
			Если ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Тогда 
				//если источник списания ВС не заполен, то и НЕ ВС источник не нужно заполнять
				Если Не ЗначениеЗаполнено(СтрокаТовар.ИсточникПроисхождения) Тогда
					 Продолжить;
				КонецЕсли;
				СтрокаНомерИП = ТаблицаИсточниковПроисхождения.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНомерИП, СтрокаТовар.ИсточникПроисхождения);
				СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Ложь;
				СтрокаНомерИП.ДополнительныйИдентификатор = 0;
			Иначе
				СтрокаНомерИП = ТаблицаИсточниковПроисхождения.Добавить();
				СтрокаНомерИП.ГСВС                      = СтрокаТовар.ГСВС;
				СтрокаНомерИП.МеткаТовара				= СтрокаТовар.ФизическаяМетка;
				СтрокаНомерИП.ТипПроисхождения			= СтрокаТовар.ТипПроисхождения;
				СтрокаНомерИП.СтранаПроисхожденияТовара = СтрокаТовар.СтранаПроисхожденияТовара;
				СтрокаНомерИП.ТипПошлины                = СтрокаТовар.ТипПошлины;
				СтрокаНомерИП.ПинКод 					= СтрокаТовар.ПинКод;
				СтрокаНомерИП.Крепость 					= СтрокаТовар.Крепость;
				СтрокаНомерИП.GTIN						= СтрокаТовар.GTIN;
				СтрокаНомерИП.ДатаСертификатаПроисхожденияТовара = СтрокаТовар.ДатаСертификатаПроисхождения;
				
				Если ЭтоЭДВСПеремещение Тогда
					СтрокаНомерИП.СсылкаИсточникПроисхождения = СтрокаТовар.ИсточникПроисхожденияПолучатель;
					СтрокаНомерИП.ДополнительныйИдентификатор = СтрокаТовар.ДополнительныйИдентификаторПолучатель;
				Иначе
					СтрокаНомерИП.СсылкаИсточникПроисхождения = СтрокаТовар.ИсточникПроисхождения;
					СтрокаНомерИП.ДополнительныйИдентификатор = СтрокаТовар.ДополнительныйИдентификатор;
				КонецЕсли;
				
				Если ИмяТабличнойЧасти = "ТоварыВС" Тогда
					СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Истина;
				Иначе
					СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Ложь;
				КонецЕсли;
			КонецЕсли;
			  			
		Иначе
			//услуги не участвует в ИП
			//Также не создаются ИП для товаров ВС которые пришли по пометке NON SNT в ЭСФ
			Если СтрокаТовар.ПризнакПроисхождения  = "6" Или (ЭтоЭСФБезСНТ и СтрокаТовар.ПризнакУчетаНаВиртуальномСкладе) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНомерИП = ТаблицаИсточниковПроисхождения.Добавить();			
			СтрокаНомерИП.ГСВС              		  = ВСВызовСервера.ПолучитьГСВС(СтрокаТовар.ИдентификаторТовара, СтрокаТовар.КодТНВЭД);
			СтрокаНомерИП.МеткаТовара				  = ВСКлиентСервер.ОпределитьМеткуПоИдентификатору(СтрокаТовар.ИдентификаторТовара);;
			СтрокаНомерИП.ТипПроисхождения			  = ВСКлиентСервер.ОпределитьТипПроисхожденияПоПризнакуПроисхождения(СтрокаТовар.ПризнакПроисхождения);
			СтрокаНомерИП.ТипПошлины				  = ВСКлиентСервер.ОпределитьТипПошлины(СтрокаТовар.НомерЗаявленияВРамкахТС);
			СтрокаНомерИП.СтранаПроисхожденияТовара   = ВСКлиентСервер.ОпределитьСтрануПоПризнакуПроисхождения(СтрокаТовар.ПризнакПроисхождения);	
			СтрокаНомерИП.СсылкаИсточникПроисхождения = СтрокаТовар.ИсточникПроисхождения;
			СтрокаНомерИП.ДополнительныйИдентификатор = СтрокаТовар.ДополнительныйИдентификатор;
			СтрокаНомерИП.ПинКод = "";
			СтрокаНомерИП.Крепость = 0;
			Если СтрокаТовар.ПризнакУчетаНаВиртуальномСкладе Тогда
				СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Истина;
			Иначе
				СтрокаНомерИП.ПризнакУчетаНаВиртуальномСкладе = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭлектронныйДокументВС") 
			И  ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Тогда
			СтрокаНомерИП.ДокументПартии 			  				= ?(ОбъектЭСФ.ЭтоНовый(), ОбъектЭСФ.ПолучитьСсылкуНового(), ОбъектЭСФ.Ссылка);		
			СтрокаНомерИП.НомерСтроки                 				= СтрокаТовар.НомерСтроки;
		Иначе
			СтрокаНомерИП.ДокументПартии 			  				= ?(ОбъектЭСФ.ЭтоНовый(), ОбъектЭСФ.ПолучитьСсылкуНового(), ОбъектЭСФ.Ссылка);		
			СтрокаНомерИП.НомерСтроки                 				= СтрокаТовар.НомерСтроки;
			СтрокаНомерИП.Номенклатура                				= СтрокаТовар.Товар;
			СтрокаНомерИП.НомерЗаявленияВРамкахТС     				= СтрокаТовар.НомерЗаявленияВРамкахТС;
			СтрокаНомерИП.КодТНВЭД                	  				= СтрокаТовар.КодТНВЭД;
			СтрокаНомерИП.ТоварНаименованиеВРамкахТС  				= СтрокаТовар.ТоварНаименованиеВРамкахТС;
			СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявленииЧисло  = Формат(СтрокаТовар.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=");
			СтрокаНомерИП.НомерПозицииВДекларацииИлиЗаявлении       = СтрокаТовар.НомерПозицииВДекларацииИлиЗаявлении;
		КонецЕсли;
		
	КонецЦикла;
		
	//уберем строки, по которым не было изменений в ключевой аналитике ИП в исправленном ЭСФ
	Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭСФ") Тогда 
		ВидЭСФ = ОбъектЭСФ.Вид;
		Если ВидЭСФ = Перечисления.ВидыЭСФ.Исправленный Или ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный Тогда
			СравнитьКлючевыеРеквизитыИсправленногоИОсновногоЭСФ(ТаблицаИсточниковПроисхождения, ОбъектЭСФ);
		КонецЕсли;
	КонецЕсли;	
	
	Если ТаблицаИсточниковПроисхождения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Для новых документов по-умолчанию сразу создаем источники происхожденя
	Если ОбъектЭСФ.ЭтоНовый() Тогда		
		ВССервер.СоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхождения, ОбъектЭСФ[ИмяТабличнойЧасти], ЭтоЭДВСПеремещение);			
		Возврат;
	КонецЕсли;
	
	//если списание товаров, не подлежащих учету на ВС, то мы всегда ищем по полям основного источника
	Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭлектронныйДокументВС")  
		И ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.СписаниеТоваровНеВС Тогда  
		ВССервер.НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхождения, ОбъектЭСФ[ИмяТабличнойЧасти], ЭтоЭДВСПеремещение);
		Возврат;
	КонецЕсли;
	
	ТаблицаСИзмененнымиДанными = ИзмененнаяТаблицаКлючевыхРеквизитов(ТаблицаИсточниковПроисхождения,ОбъектЭСФ, ИмяТабличнойЧасти);
	МассивОтработанныхСтрок = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТаблицаИсточниковПроисхождения  Цикл		
	
		СтрокаКлючевыеИзменения = ТаблицаСИзмененнымиДанными.Найти(СтрокаТЧ.СсылкаИсточникПроисхождения, "СсылкаИсточникПроисхождения");
		//если нет изменений по ключевым реквизтам, обновить неключевые поля, если они изменены
		Если СтрокаКлючевыеИзменения = Неопределено И ЗначениеЗаполнено(СтрокаТЧ.СсылкаИсточникПроисхождения) Тогда
			ВССервер.ОбновитьРеквизитыИсточникаПроисхождения(СтрокаТЧ, СтрокаТЧ.СсылкаИсточникПроисхождения);	
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаИсточниковПроисхожденияДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ); 
		//очищаем ранее назначенный источник происхождения
		НоваяСтрока.СсылкаИсточникПроисхождения = ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
	КонецЦикла;
	
	ВССервер.НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточниковПроисхожденияДляОбработки, ОбъектЭСФ[ИмяТабличнойЧасти], ЭтоЭДВСПеремещение);
					
КонецПроцедуры

Функция ИзмененнаяТаблицаКлючевыхРеквизитов(ТаблицаИсточниковПроисхождения, ОбъектЭСФ, ИмяТабличнойЧасти)
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("ТаблицаИсточниковПроисхождения", ТаблицаИсточниковПроисхождения);
	Запрос.УстановитьПараметр("ДокументСсылка", ОбъектЭСФ.Ссылка);
	Запрос.УстановитьПараметр("ПустойИсточникПроисхождения", ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения());
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ИсточникиПроисхождения.Номенклатура КАК Номенклатура,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхождения.ГСВС КАК ГСВС,
	|   ИсточникиПроисхождения.МеткаТовара КАК МеткаТовара,
	|   ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|   ИсточникиПроисхождения.ПинКод КАК ПинКод,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_НовыеДанныеНомераИП
	|ИЗ
	|	&ТаблицаИсточниковПроисхождения КАК ИсточникиПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(Товары.Счетчик) КАК Счетчик
	|ПОМЕСТИТЬ ВТ_Сбор
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТЧТовары.КодТНВЭД КАК КодТНВЭД,
	|		ТЧТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|		ТЧТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|		ТЧТовары.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|		ТЧТовары.Ссылка КАК ДокументПартии,
	|		ТЧТовары.ИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|		ТЧТовары.Товар КАК Номенклатура,
	|		ТЧТовары.ГСВС КАК ГСВС,
	|		ТЧТовары.ФизическаяМетка КАК МеткаТовара,
	|		ТЧТовары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|   	ТЧТовары.ПинКод КАК ПинКод,
	|		-1 КАК Счетчик
	|	ИЗ
	|		Документ.ЭлектронныйДокументВС.%ИмяТабличнойЧасти КАК ТЧТовары
	|	ГДЕ
	|		ТЧТовары.Ссылка = &ДокументСсылка   И &УсловиеПоУслугам
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПроисхождения.КодТНВЭД,
	|		ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении,
	|		ИсточникиПроисхождения.НомерЗаявленияВРамкахТС,
	|		ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС,
	|		ИсточникиПроисхождения.ДокументПартии,
	|		ИсточникиПроисхождения.СсылкаИсточникПроисхождения,
	|		ИсточникиПроисхождения.Номенклатура,
	|		ИсточникиПроисхождения.ГСВС,
	|		ИсточникиПроисхождения.МеткаТовара,
	|		ИсточникиПроисхождения.ДополнительныйИдентификатор,
	|   	ИсточникиПроисхождения.ПинКод,
	|		ИсточникиПроисхождения.Счетчик
	|	ИЗ
	|		ВТ_НовыеДанныеНомераИП КАК ИсточникиПроисхождения) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КодТНВЭД,
	|	Товары.НомерПозицииВДекларацииИлиЗаявлении,
	|	Товары.НомерЗаявленияВРамкахТС,
	|	Товары.ТоварНаименованиеВРамкахТС,
	|	Товары.СсылкаИсточникПроисхождения,
	|	Товары.Номенклатура,
	|	Товары.ГСВС,
	|	Товары.МеткаТовара,
	|	Товары.ДокументПартии,
	|	Товары.ДополнительныйИдентификатор,
	|   Товары.ПинКод
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Товары.Счетчик) <> 0
	|		ИЛИ Товары.СсылкаИсточникПроисхождения = &ПустойИсточникПроисхождения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сбор.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	СУММА(ВТ_Сбор.Счетчик) КАК Счетчик
	|ИЗ
	|	ВТ_Сбор КАК ВТ_Сбор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Сбор.СсылкаИсточникПроисхождения";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти", ИмяТабличнойЧасти); 
	
	Если ТипЗнч(ОбъектЭСФ) = Тип("ДокументОбъект.ЭСФ") Тогда			   
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭлектронныйДокументВС", "ЭСФ"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникиПроисхождения.ГСВС", "ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоУслугам", " НЕ ТЧТовары.ПризнакПроисхождения = ""6""");		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТЧТовары.ГСВС", "ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)");		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникиПроисхождения.МеткаТовара", "&ПустаяСтрока");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТЧТовары.ФизическаяМетка", "&ПустаяСтрока");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТЧТовары.ПинКод", "&ПустаяСтрока");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоУслугам", " Истина");
		Если ОбъектЭСФ.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТЧТовары.ИсточникПроисхождения"		, " ТЧТовары.ИсточникПроисхожденияПолучатель");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТЧТовары.ДополнительныйИдентификатор" , " ТЧТовары.ДополнительныйИдентификаторПолучатель");
		КонецЕсли;		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура ЗаполнитьТоварыСУчетомИсточниковПроисхождения(Объект, Отказ = Ложь, ИмяТабличнойЧасти = "Товары") Экспорт
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата"		 , Объект.Дата);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяСписка"	 , ИмяТабличнойЧасти);		
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронныйДокументВС") Тогда
		ПараметрыФормы.Вставить("Склад", Объект.СкладОтправитель);			
	Иначе	
		ПараметрыФормы.Вставить("Склад", Объект.Склад);	
		
		Если Объект.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
			ПараметрыФормы.Вставить("СвязанныйЭСФ", Объект.СвязанныйЭСФ); 
		КонецЕсли;

	КонецЕсли;	
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронныйДокументВС") Тогда
		ПараметрыФормы.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить()));		
	Иначе			
		ПараметрыФормы.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));		
	КонецЕсли;	
		
	        	
	АдресХранилища = ВССервер.ЗаполнитьИсточникиПроисхождения(ПараметрыФормы, Отказ);	
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЭлектронныйДокументВС") Тогда
		Объект[ИмяТабличнойЧасти].Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));   	
	Иначе	
		Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресХранилища));   	
	КонецЕсли;	
	
КонецПроцедуры

Процедура СравнитьКлючевыеРеквизитыИсправленногоИОсновногоЭСФ(ТаблицаИсточниковПроисхождения, ОбъектКорректировочныйЭСФ)
	
	ОсновнойЭСФ = ОбъектКорректировочныйЭСФ.СвязанныйЭСФ;
	ВидЭСФ 		= ОбъектКорректировочныйЭСФ.Вид;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОсновнойЭСФ", ОсновнойЭСФ);
	Запрос.УстановитьПараметр("ТаблицаИсточниковПроисхождения", ТаблицаИсточниковПроисхождения);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.НомерСтроки,
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ИсточникиПроисхождения.Номенклатура КАК Номенклатура,
	|	ИсточникиПроисхождения.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.МеткаТовара КАК МеткаТовара,
	|	ИсточникиПроисхождения.СсылкаИсточникПроисхождения КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхождения.ГСВС КАК ГСВС,
	|	ИсточникиПроисхождения.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|	
	|ПОМЕСТИТЬ ВТ_НовыеДанныеНомераИП
	|ИЗ
	|	&ТаблицаИсточниковПроисхождения КАК ИсточникиПроисхождения
	|;
	|
	| ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки КАК НомерСтроки,
	|	ЭСФТовары.КодТНВЭД КАК КодТНВЭД,
	|	ЭСФТовары.Товар КАК Товар,
	|	ЭСФТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТовары.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ЭСФТовары.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	ИсточникиПроисхождения.МеткаТовара,
	|	ЭСФТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ ВТ_ОсновнойЭСФТовары
	|
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ЭСФТовары.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|ГДЕ
	|	ЭСФТовары.Ссылка = &ОсновнойЭСФ
	|
	|;
	|ВЫБРАТЬ
	|	ИсточникиПроисхожденияИсправленного.НомерСтроки,
	|	ИсточникиПроисхожденияОсновного.НомерСтроки КАК НомерСтрокиОсновного,
	|	ЕСТЬNULL(ИсточникиПроисхожденияОсновного.ИсточникПроисхождения, ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)) КАК СсылкаИсточникПроисхождения,
	|	ИсточникиПроисхожденияОсновного.ДополнительныйИдентификатор КАК ДополнительныйИдентификаторОсновного
	|ИЗ
	|	ВТ_НовыеДанныеНомераИП КАК ИсточникиПроисхожденияИсправленного
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОсновнойЭСФТовары КАК ИсточникиПроисхожденияОсновного
	|		ПО ИсточникиПроисхожденияИсправленного.Номенклатура = ИсточникиПроисхожденияОсновного.Товар 
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.КодТНВЭД = ИсточникиПроисхожденияОсновного.КодТНВЭД
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.НомерЗаявленияВРамкахТС = ИсточникиПроисхожденияОсновного.НомерЗаявленияВРамкахТС
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.НомерПозицииВДекларацииИлиЗаявлении = ИсточникиПроисхожденияОсновного.НомерПозицииВДекларацииИлиЗаявлении
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.ТоварНаименованиеВРамкахТС = ИсточникиПроисхожденияОсновного.ТоварНаименованиеВРамкахТС
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.ДополнительныйИдентификатор = ИсточникиПроисхожденияОсновного.ДополнительныйИдентификатор
	|//%Испр%			И ИсточникиПроисхожденияИсправленного.МеткаТовара = ИсточникиПроисхожденияОсновного.МеткаТовара
	|//%Доп%			И ИсточникиПроисхожденияИсправленного.НомерСтроки = ИсточникиПроисхожденияОсновного.НомерСтроки
	|";
	
	Если ВидЭСФ = Перечисления.ВидыЭСФ.Исправленный Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Испр%", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%Доп%", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	СтруктураПоискаПоНомеруСтрокиОсновного = Новый Структура("НомерСтроки, НомерСтрокиОсновного");
	
	Для Каждого СтрокаТЧ Из ТаблицаРезультата Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СсылкаИсточникПроисхождения) Тогда
			//в исправленном - найден источник, значит аналитика совпадает - новые ИП не создаем
			//в дополнительном - ИП в принципе не создаем, берем ИП основного
			
			//если найдено несколько строк ИП, тогда дополнительно ищем по номеру строки исправленного и основного ЭСФ
			
			СтруктураПоиска.НомерСтроки = СтрокаТЧ.НомерСтроки;
			
			МассивСтрок = ТаблицаРезультата.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество() > 1 Тогда
				СтруктураПоискаПоНомеруСтрокиОсновного.НомерСтроки = СтрокаТЧ.НомерСтроки;
				СтруктураПоискаПоНомеруСтрокиОсновного.НомерСтрокиОсновного = СтрокаТЧ.НомерСтроки;
				
				МассивСтрокСУчетомОсновного = ТаблицаРезультата.НайтиСтроки(СтруктураПоискаПоНомеруСтрокиОсновного);
				
				Если МассивСтрокСУчетомОсновного.Количество()>0 Тогда
					СтрокаИП = МассивСтрокСУчетомОсновного[0];
					
					Если СтрокаИП <> Неопределено Тогда
						УдаляемаяСтрока = ТаблицаИсточниковПроисхождения.Найти(СтрокаИП.НомерСтроки, "НомерСтроки");
					
						Если УдаляемаяСтрока <> Неопределено Тогда
							ТаблицаИсточниковПроисхождения.Удалить(УдаляемаяСтрока);
							
							//в исправленный ЭСФ подставляем источник из основного ЭСФ
							СтрокаДокумента = ОбъектКорректировочныйЭСФ.Товары.Найти(СтрокаИП.НомерСтроки, "НомерСтроки");
							СтрокаДокумента.ИсточникПроисхождения = СтрокаТЧ.СсылкаИсточникПроисхождения;
							
							Если СтрокаДокумента.Количество <= 0 И ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный Тогда
								СтрокаДокумента.ДополнительныйИдентификатор = СтрокаТЧ.ДополнительныйИдентификаторОсновного;
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
				Иначе
					
					//удаляем первый ИП в списке, т.к. во всех строках она повторяется
					СтрокаИП = МассивСтрок[0];
					Если СтрокаИП <> Неопределено Тогда
						УдаляемаяСтрока = ТаблицаИсточниковПроисхождения.Найти(СтрокаИП.НомерСтроки, "НомерСтроки");
					
						Если УдаляемаяСтрока <> Неопределено Тогда
							ТаблицаИсточниковПроисхождения.Удалить(УдаляемаяСтрока);
							
							//в исправленный ЭСФ подставляем источник из основного ЭСФ
							СтрокаДокумента = ОбъектКорректировочныйЭСФ.Товары.Найти(СтрокаИП.НомерСтроки, "НомерСтроки");
							СтрокаДокумента.ИсточникПроисхождения = СтрокаТЧ.СсылкаИсточникПроисхождения;
							
							Если СтрокаДокумента.Количество <= 0 И ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный Тогда
								СтрокаДокумента.ДополнительныйИдентификатор = СтрокаТЧ.ДополнительныйИдентификаторОсновного;
							КонецЕсли;

						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				УдаляемаяСтрока = ТаблицаИсточниковПроисхождения.Найти(СтрокаТЧ.НомерСтроки, "НомерСтроки");
			
				Если УдаляемаяСтрока <> Неопределено Тогда
					ТаблицаИсточниковПроисхождения.Удалить(УдаляемаяСтрока);
					
					//в исправленный ЭСФ подставляем источник из основного ЭСФ
					СтрокаДокумента = ОбъектКорректировочныйЭСФ.Товары.Найти(СтрокаТЧ.НомерСтроки, "НомерСтроки");
					СтрокаДокумента.ИсточникПроисхождения = СтрокаТЧ.СсылкаИсточникПроисхождения;
					
					Если СтрокаДокумента.Количество <= 0 И ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный Тогда
						СтрокаДокумента.ДополнительныйИдентификатор = СтрокаТЧ.ДополнительныйИдентификаторОсновного;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСсылочныхПолей
////////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных реквизитов ЭДВС	
Процедура ЗаполнитьТипПроисхожденияЭДВС(МассивЭДВС)
	Для Каждого Документ Из МассивЭДВС Цикл
		
		ТипФормы =  Документ.ТипФормы;
		
		Для Каждого Строка Из Документ.ТоварыВС Цикл
			Строка.ТипПроисхождения = ВСКлиентСервер.ОпределитьТипПроисхожденияПоПризнакуПроисхождения(Строка.ПризнакПроисхождения, ТипФормы, Строка);
		КонецЦикла;
		
		Для Каждого Строка Из Документ.ИсходныеТоварыВС Цикл
			Строка.ТипПроисхождения = ВСКлиентСервер.ОпределитьТипПроисхожденияПоПризнакуПроисхождения(Строка.ПризнакПроисхождения);
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаГСВС(МассивЭДВС)
	Для Каждого Документ из МассивЭДВС Цикл
				
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВСТовары.НомерСтроки,
		|	ЭлектронныйДокументВСТовары.СоставнойКодГСВС,
		|	СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС
		|ИЗ
		|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ПО ЭлектронныйДокументВСТовары.СоставнойКодГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС.Наименование
		|ГДЕ
		|	ЭлектронныйДокументВСТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВСИсходныеТовары.НомерСтроки,
		|	ЭлектронныйДокументВСИсходныеТовары.СоставнойКодГСВС,
		|	СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС
		|ИЗ
		|	Документ.ЭлектронныйДокументВС.ИсходныеТоварыВС КАК ЭлектронныйДокументВСИсходныеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
		|		ПО ЭлектронныйДокументВСИсходныеТовары.СоставнойКодГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС.Наименование
		|ГДЕ
		|	ЭлектронныйДокументВСИсходныеТовары.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Дата", Документ.Дата);
		Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаТовары = РезультатыЗапроса[0].Выбрать();
		
		Пока ВыборкаТовары.Следующий() Цикл
			Документ.ТоварыВС[ВыборкаТовары.НомерСтроки - 1].ГСВС = ВыборкаТовары.НоменклатураГСВС;	
		КонецЦикла;
		
		ВыборкаИсходныеТовары = РезультатыЗапроса[1].Выбрать();
		Пока ВыборкаИсходныеТовары.Следующий() Цикл
			Документ.ИсходныеТоварыВС[ВыборкаИсходныеТовары.НомерСтроки - 1].ГСВС = ВыборкаИсходныеТовары.НоменклатураГСВС;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиВиртуальныхСкладов(МассивЭДВС)
	МассивСсылокЭДВС = Новый Массив;
	Для Каждого Документ Из МассивЭДВС Цикл
		МассивСсылокЭДВС.Добавить(Документ.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВиртуальныеСклады.Ссылка,
		|	ЭлектронныйДокументВС.СкладПолучательИдентификатор КАК СкладИдентификатор
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|		ПО ЭлектронныйДокументВС.СкладПолучательИдентификатор = ВиртуальныеСклады.ИдентификаторСклада
		|ГДЕ
		|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВиртуальныеСклады.Ссылка,
		|	ЭлектронныйДокументВС.СкладОтправительИдентификатор
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|		ПО ЭлектронныйДокументВС.СкладОтправительИдентификатор = ВиртуальныеСклады.ИдентификаторСклада";
	Запрос.УстановитьПараметр("МассивЭДВС", МассивСсылокЭДВС);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СоответствиеСкладовВС = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеСкладовВС.Вставить(ВыборкаДетальныеЗаписи.СкладИдентификатор, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Для Каждого Документ из МассивЭДВС Цикл
			Документ.СкладОтправитель 	= СоответствиеСкладовВС[Документ.СкладОтправительИдентификатор];
			Документ.СкладПолучатель 	= СоответствиеСкладовВС[Документ.СкладПолучательИдентификатор];
	КонецЦикла;
	
КонецПроцедуры

// Заполняет ссылки на организацию.
//
// Параметры:
//  МассивЭДВС - Массив - Массив ЭДВС, в которых необходимо заполнить ссылки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭлектронныйДокументВС.
//
Процедура ЗаполнитьСсылкиНаСтруктурныеЕдиницыЭДВС(МассивЭДВС)
	
	// Очистить ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
	Для Каждого ЭДВС Из МассивЭДВС Цикл
		
		ЭДВС.Организация = Неопределено;
					
	КонецЦикла;
	
	ИмяРеквизитаОрганизацииОтправителя = "Отправитель";
	ИмяРеквизитаОрганизацииПолучателя = "Получатель";
	
	// Заполнить массивы идентификациооных номеров контрагентов и организаций для поиска ссылок.
	ИдентификационныеНомераКонтрагентов = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	Для Каждого ЭДВС Из МассивЭДВС Цикл
		
		// Добавить в массив идентификатор (БИН, ИИН) Отправителя.	
		Если НЕ ПустаяСтрока(ЭДВС[ИмяРеквизитаОрганизацииОтправителя+"Идентификатор"]) Тогда
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭДВС[ИмяРеквизитаОрганизацииОтправителя+"Идентификатор"]);
		КонецЕсли;
		// Добавить в массив идентификатор (БИН, ИИН) Получателя.
		Если НЕ ПустаяСтрока(ЭДВС[ИмяРеквизитаОрганизацииПолучателя+"Идентификатор"]) Тогда
			ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(ЭДВС[ИмяРеквизитаОрганизацииПолучателя+"Идентификатор"]);
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти ссылки на контрагентов и структурные единицы по идентификаторам (БИН, ИИН).
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
		ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого ЭДВС Из МассивЭДВС Цикл
		
		Если НЕ ПустаяСтрока(ЭДВС[ИмяРеквизитаОрганизацииОтправителя+"Идентификатор"]) Тогда
			
			СтруктурнаяЕдиница 						= СоответствияСтруктурныхЕдиниц[ЭДВС[ИмяРеквизитаОрганизацииОтправителя+"Идентификатор"]];
			ОрганизацияИСтруктурноеПодразделение 	= ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
			
			ЭДВС.Организация 				= ОрганизацияИСтруктурноеПодразделение.Организация;
			ЭДВС.СтруктурноеПодразделение 	= ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЭДВС[ИмяРеквизитаОрганизацииПолучателя+"Идентификатор"]) Тогда
			
			//ЭДВС.ОрганизацияПолучатель = СоответствияСтруктурныхЕдиниц[ЭДВС[ИмяРеквизитаОрганизацииПолучателя+"Идентификатор"]];
			
			СтруктурнаяЕдиница 						= СоответствияСтруктурныхЕдиниц[ЭДВС[ИмяРеквизитаОрганизацииПолучателя+"Идентификатор"]];
			ОрганизацияИСтруктурноеПодразделение 	= ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница);    
			
			ЭДВС.ОрганизацияПолучатель 					= ОрганизацияИСтруктурноеПодразделение.Организация;
			ЭДВС.СтруктурноеПодразделениеПолучатель 	= ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификаторыТоваров
	
Функция ДатаНачалаУчетаПоИдентификаторам() Экспорт
	Возврат Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Получить();	
КонецФункции

//Получает ИД товара из поля ИдентификаторТовара в ЭСФ
Процедура ПолучитьДополнительныйИдентификаторИзИдентификатораТовара(МассивЭСФ)
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Если ВССервер.ВедетсяУчетПоИдентификаторамТоваровВС() И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ЭСФ.Дата) Тогда
			ЕстьЗаполненныеИД = Ложь;
			Для	Каждого Товар из ЭСФ.Товары Цикл
				Если Товар.ДополнительныйИдентификатор = 0 Тогда
					ИдентификаторТовара = Товар.ИдентификаторТовара;
					ПозицияНачалаИдентификатора = СтрНайти(ИдентификаторТовара, "<",,,1);
					Если ПозицияНачалаИдентификатора > 0 И СтрНайти(ИдентификаторТовара, "<",,ПозицияНачалаИдентификатора+1) = 0 Тогда
						ПозицияКонцаИдентификатора = СтрНайти(ИдентификаторТовара, ">",,ПозицияНачалаИдентификатора+1);
						Если ПозицияКонцаИдентификатора > 0 Тогда
							Попытка
								Товар.ДополнительныйИдентификатор = Число(Сред(ИдентификаторТовара, ПозицияНачалаИдентификатора+1, ПозицияКонцаИдентификатора - ПозицияНачалаИдентификатора - 1));
								ЕстьЗаполненныеИД = Истина;
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьЗаполненныеИД Тогда
				ЭСФ.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#Область ОбновлениеИдентификаторовТоваровУТТНВС

Функция СформироватьЗапросДляПолученияИдентификаторов(МассивДокументов)
	
	ТипДокументов = ТипЗнч(МассивДокументов[0]);
	Запрос = Неопределено;
	
	Если ТипДокументов = Тип("ДокументСсылка.ЭлектронныйДокументВС") Тогда
		// В запросе не должны участвовать документы, у которых отсутствует рег. номер, 
		// а так же документы, введенные после даты перехода на механизм идентификации.
		// Иначе запрос выдаст ошибку
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокументВС.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВС.Идентификатор КАК Идентификатор,
		|	ЭлектронныйДокументВС.ТипФормы КАК ТипФормы,
		|	ЭлектронныйДокументВС.Статус,
		|	ЭлектронныйДокументВС.РегистрационныйНомер,
		|	ЭДВСТовары.НомерЗаявленияВРамкахТС КАК РегистрационныйНомерИмпорт,
		|	ЭлектронныйДокументВС.Состояние
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭДВСТовары
		|		ПО ЭлектронныйДокументВС.Ссылка = ЭДВСТовары.Ссылка
		|			И (ЭДВСТовары.НомерСтроки = 1)
		|ГДЕ
		|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)
		|	И ВЫБОР
		|			КОГДА ЭлектронныйДокументВС.ТипФормы <> ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДекларацияНаТовары)
		|				ТОГДА ЭлектронныйДокументВС.РегистрационныйНомер <> &ПустаяСтрока
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ЭлектронныйДокументВС.Дата >= &ДатаПереходаНаРежимИдентификации
		|	И (ЭлектронныйДокументВС.ТипФормы В (&ДопустимыеТипы)
		|			ИЛИ ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Детализация)
		|				И ЭлектронныйДокументВС.ВидДетализации В (&ВидыДетализации))";
		
		Запрос.УстановитьПараметр("МассивЭДВС", МассивДокументов);
		Запрос.УстановитьПараметр("ДатаПереходаНаРежимИдентификации", НачалоДня(ДатаНачалаУчетаПоИдентификаторам()));
		
		//Метод работает не для всех типов ЭДВС, 
		//необходимо отбирать полученный массив в зависимости от типа, если детализация - от вида детализации
		РазрешенныеТипыФормВС = ТипыФормВСДляПолученияИдентификаторов();
		
		Запрос.УстановитьПараметр("ДопустимыеТипы", РазрешенныеТипыФормВС.ТипыФормВС);
		Запрос.УстановитьПараметр("ВидыДетализации", РазрешенныеТипыФормВС.ВидыДетализации);
		Запрос.УстановитьПараметр("ДекларацияНаТовары", Перечисления.ТипыФормВС.ДекларацияНаТовары);
		
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
	ИначеЕсли ТипДокументов = Тип("ДокументСсылка.ЭСФ") Тогда
		// В запросе не должны участвовать документы, у которых отсутствует рег. номер, 
		// а так же документы, введенные после даты перехода на механизм идентификации.
		// Иначе запрос выдаст ошибку
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭСФ.Ссылка КАК Ссылка,
		|	ЭСФ.Идентификатор КАК Идентификатор,
		|	ЭСФ.Статус,
		|	ЭСФ.РегистрационныйНомер,
		|	ЭСФ.Состояние
		|ИЗ
		|	Документ.ЭСФ КАК ЭСФ
		|ГДЕ
		|	ЭСФ.Ссылка В (&МассивЭСФ)
		|	И
		|	НЕ ЭСФ.РегистрационныйНомер = """"
		|	И ЭСФ.Дата >= &ДатаПереходаНаРежимИдентификации
		|";
		
		Запрос.УстановитьПараметр("МассивЭСФ", МассивДокументов);
		Запрос.УстановитьПараметр("ДатаПереходаНаРежимИдентификации", НачалоДня(ДатаНачалаУчетаПоИдентификаторам()));

	ИначеЕсли ТипДокументов = ВССерверПереопределяемый.ТипДокументаСНТ() Тогда
		// В запросе не должны участвовать документы, у которых отсутствует рег. номер, 
		// а так же документы, введенные после даты перехода на механизм идентификации.
		// Иначе запрос выдаст ошибку
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СНТ.Ссылка КАК Ссылка,
		|	СНТ.Идентификатор КАК Идентификатор,
		|	СНТ.Статус,
		|	СНТ.Состояние,
		|	СНТ.РегистрационныйНомерИСЭСФ КАК РегистрационныйНомер
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	СНТ.Ссылка В(&МассивСНТ)
		|	И СНТ.Дата >= &ДатаПереходаНаРежимИдентификации";
		
		Запрос.УстановитьПараметр("МассивСНТ", МассивДокументов);
		Запрос.УстановитьПараметр("ДатаПереходаНаРежимИдентификации", НачалоДня(ДатаНачалаУчетаПоИдентификаторам()));
		
			
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции

Функция СформироватьЗапросДляПолученияИдентификаторовДИТ(МассивДокументов)
	
	ТипДокументов = ТипЗнч(МассивДокументов[0]);
	Запрос = Неопределено;
	
	Если ТипДокументов = Тип("ДокументСсылка.ЭлектронныйДокументВС") Тогда
		// В запросе не должны участвовать документы, у которых отсутствует рег. номер, 
		// а так же документы, введенные после даты перехода на механизм идентификации.
		// Иначе запрос выдаст ошибку
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйДокументВС.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВС.Идентификатор КАК Идентификатор,
		|	ЭлектронныйДокументВС.ТипФормы КАК ТипФормы,
		|	ЭлектронныйДокументВС.Статус,
		|	ЭлектронныйДокументВС.РегистрационныйНомер,
		|	ЭДВСИсходныеТовары.НомерЗаявленияВРамкахТС КАК РегистрационныйНомерИмпорт,
		|	ЭлектронныйДокументВС.Состояние
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВС.ИсходныеТоварыВС КАК ЭДВСИсходныеТовары
		|		ПО ЭлектронныйДокументВС.Ссылка = ЭДВСИсходныеТовары.Ссылка
		|			И (ЭДВСИсходныеТовары.НомерСтроки = 1)
		|ГДЕ
		|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)
		|	И ЭлектронныйДокументВС.Дата >= &ДатаПереходаНаРежимИдентификации
		|	И ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДетализацияИмпорта)
		|	";
		
		Запрос.УстановитьПараметр("МассивЭДВС", МассивДокументов);
		Запрос.УстановитьПараметр("ДатаПереходаНаРежимИдентификации", НачалоДня(ДатаНачалаУчетаПоИдентификаторам()));
		
	КонецЕсли; 
	
	Возврат Запрос;
	
КонецФункции

Процедура ПолучитьИдентификаторыТоваровПоРегНомерамДокументов(Знач МассивДокументов, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено, ПроводитьИзмененныеДокументы = Ложь, ДополнительныеПараметры = Неопределено, ПолучатьДанныеСопоставления = Ложь) Экспорт
	
	ВерсияВС = Неопределено; //ПараметрыЭСФ.ВерсияИСЭСФ;
			
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакета = 100;  // сделать параметром метода
		
	// В запросе не должны участвовать документы, у которых отсутствует рег. номер, 
	// а так же документы, введенные после даты перехода на механизм идентификации.
	// Иначе запрос выдаст ошибку
	ПолучатьДляИсходныхТоваровДетализации = Ложь;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("ПолучатьДляИсходныхТоваровДетализации") 
		И ДополнительныеПараметры.ПолучатьДляИсходныхТоваровДетализации Тогда
		
		ПолучатьДляИсходныхТоваровДетализации = Истина;
		Запрос = СформироватьЗапросДляПолученияИдентификаторовДИТ(МассивДокументов);
	Иначе	
		Запрос = СформироватьЗапросДляПолученияИдентификаторов(МассивДокументов);
	КонецЕсли;

	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	СписокРегНомеров = "";
	СчетчикДокументовВПакете = 0;

	МассивЭД = Новый Массив();
	Выборка = Результат.Выбрать();
	КоличествоДокументов = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		
		// считаем общее количество обработанных ЭДВС
		СчетчикДокументовВПакете = СчетчикДокументовВПакете + 1;
		
		Если ЗначениеЗаполнено(Выборка.РегистрационныйНомер) Тогда
			
			СписокРегНомеров = СписокРегНомеров + "<registrationNumber>" + Выборка.РегистрационныйНомер + "</registrationNumber>";
			МассивЭД.Добавить(Выборка.Ссылка);

		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВС") 
				И (Выборка.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары Или Выборка.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта) 
				И ЗначениеЗаполнено(Выборка.РегистрационныйНомерИмпорт) Тогда
				
			ДатаИмпорта = ВСКлиентСервер.ПолучитьДатуИзРегНомера(Выборка.РегистрационныйНомерИмпорт);
			
			Если ДатаИмпорта >= ДатаНачалаУчетаПоИдентификаторам() Тогда
				СписокРегНомеров = СписокРегНомеров + "<registrationNumber>" + Выборка.РегистрационныйНомерИмпорт + "</registrationNumber>";
				МассивЭД.Добавить(Выборка.Ссылка);
			КонецЕсли;	
		Иначе
			
			ТекстСообщения = НСтр("ru = 'По документу ""[Документ]"" не удалось получить идентификаторы товаров из Виртуального Склада, так как в документе не заполнен реквизит ""Регистрационный номер"" либо дата документа находится ранее даты перехода ВС на режим идентификации товаров.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Документ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Выборка.Ссылка));
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
		Если НЕ (СчетчикДокументовВПакете%ПредельныйРазмерПакета = 0 ИЛИ СчетчикДокументовВПакете = КоличествоДокументов) Тогда
			Продолжить;
		КонецЕсли;				
		
		ДанныеПоИдентификаторамТоваров = ОтправитьЗапросПоИдентификаторамТоваровДокументов(ПрофильИСЭСФ, ИдентификаторСессии, СписокРегНомеров, ВерсияВС);
		Если НЕ ДанныеПоИдентификаторамТоваров = Неопределено Тогда
			// если в пакете есть данные
			ТаблицаДанныхДокумента_ВВС = ЗаполнитьТаблицуИдентификаторовТоваровДокументов(ДанныеПоИдентификаторамТоваров);
			ТипДокументов = ТипЗнч(МассивЭД[0]);
			Если ТипДокументов = Тип("ДокументСсылка.ЭлектронныйДокументВС") Тогда
				ТаблицаСтрокДокумента_ВИБ = ЗаполнитьТаблицуНомеровСтрокЭДВС(МассивЭД, ПолучатьДляИсходныхТоваровДетализации);
			ИначеЕсли ТипДокументов = Тип("ДокументСсылка.ЭСФ") Тогда
				ТаблицаСтрокДокумента_ВИБ = ЗаполнитьТаблицуНомеровСтрокЭСФ(МассивЭД);
			ИначеЕсли ТипДокументов = ВССерверПереопределяемый.ТипДокументаСНТ() Тогда
				ТаблицаСтрокДокумента_ВИБ = ВССерверПереопределяемый.ЗаполнитьТаблицуНомеровСтрокСНТ(МассивЭД);
			КонецЕсли;
			ЗаполнитьИдентификаторыТоваровВДокументе(МассивЭД, ТаблицаДанныхДокумента_ВВС, ТаблицаСтрокДокумента_ВИБ, ПрофильИСЭСФ, ИдентификаторСессии,ВерсияВС, ПроводитьИзмененныеДокументы, ПолучатьДляИсходныхТоваровДетализации, ПолучатьДанныеСопоставления);
			
			СообщениеПользователя = Новый СообщениеПользователю;
			Текст = НСтр("ru = '%ТекущаяДата% Получение идентификаторов товаров с ВС успешно завершено.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
		КонецЕсли;
		
		// Обнулим данные для следующей порции

		МассивЭД.Очистить();
		СписокРегНомеров = "";

		
	КонецЦикла;
	
	Если ВССервер.СессияВСАктивна(ИдентификаторСессии, ПрофильИСЭСФ) Тогда
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуНомеровСтрокЭДВС(МассивЭД, ПолучатьДляИсходныхТоваровДетализации = Ложь)
	// Номер строки в ЭДВС, сейчас отличается от номера строки в документе, отправленном на сервер
	// Поскольку в таблице ЭДВС есть и отправляемые,и не отправляемые на сервере товары.
	// Нужно самостоятельно рассчитать порядковый номер строки отправляемыъ данных
	КвалификаторСтроки100 = Новый КвалификаторыСтроки(100);		
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", КвалификаторСтроки100);
	
	КвалификаторСтроки10 = Новый КвалификаторыСтроки(10);		
	ОписаниеТиповСтрока10 = Новый ОписаниеТипов("Строка", КвалификаторСтроки10);
	
	КвалификаторСтроки255 = Новый КвалификаторыСтроки(2000);
	ОписаниеТиповСтрока255 = Новый ОписаниеТипов("Строка", КвалификаторСтроки255);
	
	КвалификаторСтроки1024 = Новый КвалификаторыСтроки(1024);
	
	ТаблицаНомеровСтрокЭДВС = Новый ТаблицаЗначений;
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("РегистрационныйНомер", ОписаниеТиповСтрока100);
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВС"));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("ТипФормы", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыФормВС"));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("ВидДетализации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидДетализации"));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерСтрокиВВС", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10))); 
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерСтрокиВДокументе", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));	
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("ИдентификаторТовараВДокументе", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));	
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерЗаявленияВРамкахТС", ОписаниеТиповСтрока100); 
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерПозицииВДекларацииИлиЗаявлении", ОписаниеТиповСтрока10); 
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("ИдентификаторТовараВДокументеПолучатель", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("ТоварНаименованиеВРамкахТСВДокументе", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерФНО", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерПозицииИзФНО", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));	
	ТаблицаНомеровСтрокЭДВС.Колонки.Добавить("НомерТабличнойЧасти", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭлектронныйДокументВСТовары.Ссылка КАК Ссылка,
	                      |	ЭлектронныйДокументВСТовары.Ссылка.Проведен КАК Проведен,
						  | ЭлектронныйДокументВСТовары.Ссылка.ТипФормы КАК ТипФормы,
						  |	ЭлектронныйДокументВСТовары.Ссылка.ВидДетализации КАК ВидДетализации,
	                      |	ЭлектронныйДокументВСТовары.Ссылка.РегистрационныйНомер КАК РегистрационныйНомер,
	                      |	ЭлектронныйДокументВСТовары.НомерСтроки КАК НомерСтрокиВДокументе,
						  |	ЭлектронныйДокументВСТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	                      |	ЭлектронныйДокументВСТовары.ДополнительныйИдентификатор КАК ИдентификаторТовараВДокументе,
						  |//НеИсходныеТовары	ЭлектронныйДокументВСТовары.ДополнительныйИдентификаторПолучатель КАК ИдентификаторТовараВДокументеПолучатель,
						  |	ЭлектронныйДокументВСТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
						  //+
						  |	"""" КАК ТоварНаименованиеВРамкахТСВдокументе,
						  |	"""" КАК НомерФНО,
						  |	"""" КАК НомерПозицииИзФНО,
						  //-
						  |	1 КАК НомерТабличнойЧасти
						  |ИЗ
	                      |	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТовары
	                      |ГДЕ
	                      |	ЭлектронныйДокументВСТовары.Ссылка В(&МассивЭДВС)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка,
	                      |	НомерСтрокиВДокументе
	                      |ИТОГИ ПО
	                      |	Ссылка");
						  
	Если ПолучатьДляИсходныхТоваровДетализации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТоварыВС", "ИсходныеТоварыВС");
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//НеИсходныеТовары", "");
	КонецЕсли;	
						  
	Запрос.УстановитьПараметр("МассивЭДВС", МассивЭД);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// возвращаем пустую таблицу
		Возврат ТаблицаНомеровСтрокЭДВС;
	КонецЕсли;
	
	ВыборкаЭДВС = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭДВС.Следующий() Цикл
		СчетчикСтрок = 0;
		ВыборкаСтрок = ВыборкаЭДВС.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СчетчикСтрок = СчетчикСтрок + 1;
			
			НоваяСтрока = ТаблицаНомеровСтрокЭДВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаСтрок);
			
			НоваяСтрока.НомерСтрокиВВС = СчетчикСтрок;// порядковый номер строки в отправленном документе
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ТаблицаНомеровСтрокЭДВС;
	
КонецФункции

Функция ЗаполнитьТаблицуНомеровСтрокЭСФ(МассивЭСФ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭСФТовары.Ссылка КАК Ссылка,
	                      |	ЭСФТовары.Ссылка.Проведен КАК Проведен,
						  | ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка) КАК ТипФормы,
						  | ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка) КАК ВидДетализации,
	                      |	ЭСФТовары.Ссылка.РегистрационныйНомер КАК РегистрационныйНомер,
	                      |	ЭСФТовары.НомерСтроки КАК НомерСтрокиВВС,
	                      |	ЭСФТовары.НомерСтроки КАК НомерСтрокиВДокументе,
						  |	"""" КАК НомерЗаявленияВРамкахТС,
						  |	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	                      |	ЭСФТовары.ДополнительныйИдентификатор КАК ИдентификаторТовараВДокументе,
						  |	"""" КАК ТоварНаименованиеВРамкахТСВДокументе,
						  |	"""" КАК НомерФНО,
						  |	"""" КАК НомерПозицииИзФНО,
						  |	"""" КАК ИдентификаторТовараВДокументеПолучатель,
						  |	1 КАК НомерТабличнойЧасти
	                      |ИЗ
	                      |	Документ.ЭСФ.Товары КАК ЭСФТовары
	                      |ГДЕ
	                      |	ЭСФТовары.Ссылка В(&МассивЭСФ)
	                      |	И ЭСФТовары.ПризнакУчетаНаВиртуальномСкладе
	                      |	И ВЫБОР
	                      |			КОГДА ЭСФТовары.Ссылка.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	                      |				ТОГДА ЭСФТовары.Количество > 0
	                      |			КОГДА ЭСФТовары.Ссылка.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	                      |				ТОГДА ЭСФТовары.Количество < 0
	                      |		КОНЕЦ
						  |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Ссылка,
	                      |	НомерСтрокиВВС");
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ТаблицаНомеровСтрокЭДВС = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНомеровСтрокЭДВС;
	
КонецФункции

Функция ЗаполнитьТаблицуИдентификаторовТоваровДокументов(ДанныеПоИдентификаторамТоваров)
	
	КвалификаторСтроки100 = Новый КвалификаторыСтроки(100);
	КвалификаторСтроки10 = Новый КвалификаторыСтроки(10);
	КвалификаторСтроки1024 = Новый КвалификаторыСтроки(1024);
	
	ТаблицаИдентификаторовДокумента = Новый ТаблицаЗначений;
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("РегистрационныйномерДокумента", Новый ОписаниеТипов("Строка", КвалификаторСтроки100));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("НомерТабличнойЧасти", Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(2)));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("НомерПозицииИзДекларации", Новый ОписаниеТипов("Строка", КвалификаторСтроки10));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("ИдентификаторТовара",Новый ОписаниеТипов("Число", ,,Новый КвалификаторыЧисла(10)));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("ТоварНаименованиеВРамкахТС", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("НомерФНО", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));
	ТаблицаИдентификаторовДокумента.Колонки.Добавить("НомерПозицииИзФНО", Новый ОписаниеТипов("Строка", КвалификаторСтроки1024));
	
	Для Каждого income Из ДанныеПоИдентификаторамТоваров Цикл
		Строка = ТаблицаИдентификаторовДокумента.Добавить();
		Строка.РегистрационныйНомерДокумента = ЭСФСервер.ПолучитьСвойство(income, "receiptDocNumber", "");
		Строка.НомерСтроки = ЭСФСервер.ПолучитьСвойство(income, "productNumberInReceiptDoc", "");
		Строка.ИдентификаторТовара = ЭСФСервер.ПолучитьСвойство(income, "productId", "");
		Строка.ТоварНаименованиеВРамкахТС = ЭСФСервер.ПолучитьСвойство(income, "productNameInImportDoc", "");
		
		НомерСтрокиССервера = ЭСФСервер.ПолучитьСвойство(income, "productNumberInReceiptDoc", "1");
		ПозицияРазделителяНомераТаблицИСтрок = СтрНайти(НомерСтрокиССервера, "/");
		Если ПозицияРазделителяНомераТаблицИСтрок > 0 Тогда 
			Строка.НомерТабличнойЧасти = Число(Лев(НомерСтрокиССервера, ПозицияРазделителяНомераТаблицИСтрок - 1));
			Строка.НомерСтроки = Число(Прав(НомерСтрокиССервера, СтрДлина(НомерСтрокиССервера) - ПозицияРазделителяНомераТаблицИСтрок));
		Иначе
			Строка.НомерТабличнойЧасти = 1;
		КонецЕсли;
		
		Строка.НомерПозицииИзДекларации = ЭСФСервер.ПолучитьСвойство(income, "productNumberInReceiptDoc", "");
		Строка.НомерПозицииИзФНО = ЭСФСервер.ПолучитьСвойство(income, "productNumberInImportDoc", "");
		Строка.НомерФНО = ЭСФСервер.ПолучитьСвойство(income, "manufactureOrImportDocNumber", "");
		
	КонецЦикла;
	
	Возврат ТаблицаИдентификаторовДокумента;
	
КонецФункции

Процедура ЗаполнитьИдентификаторыТоваровВДокументе(МассивЭД, ТаблицаИдентификаторовДокумента, ТаблицаСтрокДокумента_ВИБ, ПрофильИСЭСФ, ИдентификаторСессии,ВерсияВС, ПроводитьИзмененныеДокументы = Ложь, ПолучатьДляИсходныхТоваровДетализации = Ложь, ПолучатьДанныеСопоставления = Ложь)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВТ_ИдентификаторыТоваров.РегистрационныйномерДокумента,
	                      |	ВТ_ИдентификаторыТоваров.НомерСтроки,
	                      |	ВТ_ИдентификаторыТоваров.ИдентификаторТовара,
						  | ВТ_ИдентификаторыТоваров.НомерПозицииИзДекларации,
						  //+
						  | ВТ_ИдентификаторыТоваров.ТоварНаименованиеВРамкахТС,
						  |	ВТ_ИдентификаторыТоваров.НомерФНО,
	                      |	ВТ_ИдентификаторыТоваров.НомерПозицииИзФНО,
						 //-
						  |	ВТ_ИдентификаторыТоваров.НомерТабличнойЧасти
	                      |ПОМЕСТИТЬ ВТ_ИдентификаторыТоваров
	                      |ИЗ
	                      |	&ТаблицаИдентификаторовДокумента КАК ВТ_ИдентификаторыТоваров
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ВТ_ИдентификаторыТоваров.РегистрационныйномерДокумента,
	                      |	ВТ_ИдентификаторыТоваров.НомерСтроки,
						  |	ВТ_ИдентификаторыТоваров.НомерТабличнойЧасти
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДокументТовары.Ссылка КАК Ссылка,
	                      |	ДокументТовары.ТипФормы КАК ТипФормы,
						  |	ДокументТовары.ВидДетализации КАК ВидДетализации,
	                      |	ДокументТовары.РегистрационныйНомер КАК РегистрационныйНомер,
	                      |	ДокументТовары.Проведен КАК СсылкаПроведен,
	                      |	ДокументТовары.НомерСтрокиВДокументе КАК НомерСтроки,
	                      |	ДокументТовары.НомерСтрокиВВС КАК НомерСтрокиОтправленногоЭД,
	                      |	ДокументТовары.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	                      |	ДокументТовары.ИдентификаторТовараВДокументе КАК ИдентификаторТовараВДокументе,
						  |	ДокументТовары.ИдентификаторТовараВДокументеПолучатель КАК ИдентификаторТовараВДокументеПолучатель,
						  |	ДокументТовары.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
						  |	ДокументТовары.ТоварНаименованиеВРамкахТСВДокументе КАК ТоварНаименованиеВРамкахТСВДокументе,
						  |	ДокументТовары.НомерФНО КАК НомерФНОВДокументе,
	                      |	ДокументТовары.НомерПозицииИзФНО КАК НомерПозицииИзФНОВДокументе,
	                      |	ДокументТовары.НомерТабличнойЧасти
	                      |ПОМЕСТИТЬ ВТ_Документ
	                      |ИЗ
	                      |	&ТаблицаСтрокДокумента_ВИБ КАК ДокументТовары
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	ДокументТовары.Ссылка,
	                      |	ДокументТовары.НомерСтрокиВВС,
						  |	ДокументТовары.НомерТабличнойЧасти
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДокументТовары.Ссылка КАК Ссылка,
						  |	ДокументТовары.ТипФормы КАК ТипФормы,
						  |	ДокументТовары.ВидДетализации КАК ВидДетализации,
	                      |	ДокументТовары.РегистрационныйНомер КАК РегистрационныйНомер,
	                      |	ДокументТовары.СсылкаПроведен КАК СсылкаПроведен,
	                      |	ДокументТовары.НомерСтроки КАК НомерСтроки,
	                      |	ДокументТовары.ИдентификаторТовараВДокументе КАК ИдентификаторТовараВДокументе,
						  |	ДокументТовары.ИдентификаторТовараВДокументеПолучатель КАК ИдентификаторТовараВДокументеПолучатель,
	                      |	ЕСТЬNULL(ВТ_ИдентификаторыТоваров.ИдентификаторТовара, """") КАК ИдентификаторТовараВВС,
						  //+
						  |	ДокументТовары.ТоварНаименованиеВРамкахТСВДокументе КАК ТоварНаименованиеВРамкахТСВДокументе,
						  |	ЕСТЬNULL(ВТ_ИдентификаторыТоваров.ТоварНаименованиеВРамкахТС, """") КАК ТоварНаименованиеВРамкахТС_ВС,
						  |	ЕСТЬNULL(ВТ_ИдентификаторыТоваров.НомерФНО, """") КАК НомерФНО_ВС,
						  |	ДокументТовары.НомерФНОВДокументе КАК НомерФНОВДокументе,
	                      |	ЕСТЬNULL(ВТ_ИдентификаторыТоваров.НомерПозицииИзФНО, """") КАК НомерПозицииИзФНО_ВС,
						  |	ДокументТовары.НомерПозицииИзФНОВДокументе КАК НомерПозицииИзФНОВДокументе,
						  //-
	                      |	ДокументТовары.НомерСтрокиОтправленногоЭД КАК НомерСтрокиОтправленногоЭД,
						  |	ДокументТовары.НомерТабличнойЧасти
	                      |ИЗ
	                      |	ВТ_Документ КАК ДокументТовары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентификаторыТоваров КАК ВТ_ИдентификаторыТоваров
	                      |		ПО (ВЫБОР
	                      |				КОГДА ДокументТовары.ТипФормы = &ТипФормыИмпорт Или &ПолучатьДляИсходныхТоваровДетализации
	                      |					ТОГДА ДокументТовары.НомерЗаявленияВРамкахТС = ВТ_ИдентификаторыТоваров.РегистрационныйНомерДокумента
	                      |				ИНАЧЕ ДокументТовары.РегистрационныйНомер = ВТ_ИдентификаторыТоваров.РегистрационныйномерДокумента
						  |			КОНЕЦ)
	                      |		И (ВЫБОР
	                      |				КОГДА ДокументТовары.ТипФормы = &ТипФормыИмпорт Или &ПолучатьДляИсходныхТоваровДетализации
	                      |					ТОГДА ДокументТовары.НомерПозицииВДекларацииИлиЗаявлении = ВТ_ИдентификаторыТоваров.НомерПозицииИзДекларации
	                      |				ИНАЧЕ ДокументТовары.НомерСтрокиОтправленногоЭД = ВТ_ИдентификаторыТоваров.НомерСтроки
						  |						И ДокументТовары.НомерТабличнойЧасти = ВТ_ИдентификаторыТоваров.НомерТабличнойЧасти
						  |			КОНЕЦ)
						  |ИТОГИ
	                      |	МАКСИМУМ(Ссылка),
	                      |	МАКСИМУМ(СсылкаПроведен),
	                      |	КОЛИЧЕСТВО(НомерСтрокиОтправленногоЭД)
	                      |ПО
	                      |	Ссылка"); 
	Запрос.УстановитьПараметр("ТаблицаИдентификаторовДокумента", ТаблицаИдентификаторовДокумента);
	Запрос.УстановитьПараметр("ТаблицаСтрокДокумента_ВИБ", ТаблицаСтрокДокумента_ВИБ);	
	Запрос.УстановитьПараметр("ТипФормыИмпорт", Перечисления.ТипыФормВС.ДекларацияНаТовары);
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ПолучатьДляИсходныхТоваровДетализации", ПолучатьДляИсходныхТоваровДетализации);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();  	
	Попытка	
		ЗаписатьИдентификаторыТоваровВДокументе(Результат, ПроводитьИзмененныеДокументы, ПолучатьДляИсходныхТоваровДетализации);	
		ЗаписатьНаименованияТоваровВРамкахТСВДокументе(Результат, ПроводитьИзмененныеДокументы, ПолучатьДанныеСопоставления);
		ЗафиксироватьТранзакцию();
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
								НСтр("ru = 'ОбменЭСФ.ПолучитьИдентификаторыТоваровПоРегНомерамДокументов'"), 
								УровеньЖурналаРегистрации.Ошибка,,,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
								
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;	
КонецПроцедуры

Процедура ЗаписатьИдентификаторыТоваровВДокументе(Результат, Провести = Ложь, ПолучатьДляИсходныхТоваровДетализации = Ложь)
	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеНомеровТаблицИНазваний = ВССерверПереопределяемый.СоответствиеНомеровТаблицИНазванийСНТ(); 
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Объект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КоличествоСтрокСИдентификаторами = 0;
		Пока ВыборкаСтрок.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаСтрок.ИдентификаторТовараВВС) Тогда
				КоличествоСтрокСИдентификаторами = КоличествоСтрокСИдентификаторами +1;
			КонецЕсли;	
			
			Если (ВыборкаСтрок.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами 
				Или (ВыборкаСтрок.ТипФормы = Перечисления.ТипыФормВС.Детализация И ВыборкаСтрок.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)
				Или ВыборкаСтрок.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС)
				И
				(ЗначениеЗаполнено(ВыборкаСтрок.ИдентификаторТовараВДокументеПолучатель) И ЗначениеЗаполнено(ВыборкаСтрок.ИдентификаторТовараВВС)) Тогда
 
				Если (ВыборкаСтрок.ИдентификаторТовараВДокументеПолучатель = ВыборкаСтрок.ИдентификаторТовараВВС) Тогда
					
					Продолжить;
					// все в порядке идентификатор был заполнен ранее, он не отличается от данных ВС
				Иначе
					
					//все плохо, по нашим данным ID другой но менять поздно, мог быть созда источник происхождения
					ТекстСообщения =  НСтр("ru = 'Идентификатор в документе %Документ% отличается от данных Виртуального склада. Строка %НомерСтроки%: ID в документе %IDВИБ%, ID в модуле ВС:  %IDВВС%. Идентификатор не загружен...'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СокрЛП(ВыборкаДокументов.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВИБ%", СокрЛП(ВыборкаСтрок.ИдентификаторТовараВДокументеПолучатель));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВВС%", СокрЛП(ВыборкаСтрок.ИдентификаторТовараВВС));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СокрЛП(ВыборкаСтрок.НомерСтроки));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Продолжить;
					
				КонецЕсли;
			ИначеЕсли (ВыборкаСтрок.ТипФормы <> Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами И
				НЕ (ВыборкаСтрок.ТипФормы = Перечисления.ТипыФормВС.Детализация И ВыборкаСтрок.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)
				И ВыборкаСтрок.ТипФормы <> Перечисления.ТипыФормВС.ВводОстатковНаВС)
				И 
				ЗначениеЗаполнено(ВыборкаСтрок.ИдентификаторТовараВДокументе) И ЗначениеЗаполнено(ВыборкаСтрок.ИдентификаторТовараВВС) Тогда
				
				Если (ВыборкаСтрок.ИдентификаторТовараВДокументе = ВыборкаСтрок.ИдентификаторТовараВВС) Тогда
					
					Продолжить;
					// все в порядке идентификатор был заполнен ранее, он не отличается от данных ВС
				Иначе
					
					//все плохо, по нашим данным ID другой но менять поздно, мог быть созда источник происхождения
					ТекстСообщения =  НСтр("ru = 'Идентификатор в документе %Документ% отличается от данных Виртуального склада. Строка %НомерСтроки%: ID в документе %IDВИБ%, ID в модуле ВС:  %IDВВС%. Идентификатор не загружен...'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СокрЛП(ВыборкаДокументов.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВИБ%", СокрЛП(ВыборкаСтрок.ИдентификаторТовараВДокументе));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВВС%", СокрЛП(ВыборкаСтрок.ИдентификаторТовараВВС));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СокрЛП(ВыборкаСтрок.НомерСтроки));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
					
				КонецЕсли;	
			Иначе
				Если ВыборкаДокументов.СсылкаПроведен 
					
					//15-07-19 вернуться
					//экслюзив для импортных документов
					//И НЕ (ТипЗнч(ВыборкаДокументов.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВС") И ВыборкаДокументов.Ссылка.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары)
				Тогда
					// в проведенном документе ИД не можем поменять, т.к. мог быть создан источник происхождения
					// поэтому только сообщаем об отличиях.
					ТекстСообщения =  НСтр("ru = 'Идентификатор в документе %Документ% отличается от данных Виртуального склада. Строка %НомерСтроки%: ID в документе %IDВИБ%, ID в модуле ВС:  %IDВВС%. Идентификатор не загружен...'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СокрЛП(ВыборкаДокументов.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВИБ%", "<не заполнено>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%IDВВС%", СокрЛП(ВыборкаСтрок.ИдентификаторТовараВВС));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СокрЛП(ВыборкаСтрок.НомерСтроки));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
					
				КонецЕсли;	
			КонецЕсли;		
			
			Если ТипЗнч(ВыборкаДокументов.Ссылка) = Тип("ДокументСсылка.ЭСФ") Тогда
				Объект.Товары[ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификатор = ВыборкаСтрок.ИдентификаторТовараВВС;
			ИначеЕсли ТипЗнч(ВыборкаДокументов.Ссылка) = Тип("ДокументСсылка.ЭлектронныйДокументВС") 
				И (ВыборкаДокументов.Ссылка.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Или ВыборкаДокументов.Ссылка.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами
				   Или (ВыборкаДокументов.Ссылка.ТипФормы = Перечисления.ТипыФормВС.Детализация И ВыборкаДокументов.Ссылка.ВидДетализации = Перечисления.ВидДетализации.КонвертацияМеждуЕИ)
				   Или ВыборкаДокументов.Ссылка.ТипФормы = Перечисления.ТипыФормВС.ВводОстатковНаВС
				   ) Тогда
				Объект.ТоварыВС[ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификаторПолучатель = ВыборкаСтрок.ИдентификаторТовараВВС;
			ИначеЕсли ПолучатьДляИсходныхТоваровДетализации Тогда
				Объект.ИсходныеТоварыВС[ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификатор = ВыборкаСтрок.ИдентификаторТовараВВС;
			ИначеЕсли ТипЗнч(ВыборкаДокументов.Ссылка) = ВССерверПереопределяемый.ТипДокументаСНТ() Тогда
				Если ВыборкаСтрок.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Тогда
					Объект[СоответствиеНомеровТаблицИНазваний[ВыборкаСтрок.НомерТабличнойЧасти]][ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификаторПолучатель = ВыборкаСтрок.ИдентификаторТовараВВС;
				Иначе
					Объект[СоответствиеНомеровТаблицИНазваний[ВыборкаСтрок.НомерТабличнойЧасти]][ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификатор = ВыборкаСтрок.ИдентификаторТовараВВС;
				КонецЕсли;
			Иначе	
				Объект.ТоварыВС[ВыборкаСтрок.НомерСтроки-1].ДополнительныйИдентификатор = ВыборкаСтрок.ИдентификаторТовараВВС;		
			КонецЕсли;	
			
		КонецЦикла; 
		
		// Нужно проверить что идентификаторы заполнены во всех строках, если это так, то можно изменить статус документа и провести его.
		Если Объект.Модифицированность() Тогда
			Режим = РежимЗаписиДокумента.Запись;
			Если КоличествоСтрокСИдентификаторами = ВыборкаДокументов.НомерСтрокиОтправленногоЭД Тогда // Количество строк совпадает с количеством идентифицированных строк
				Объект.Состояние = ВССерверПереопределяемый.КонечноеСостояниеОбработкиДокумента(ВыборкаДокументов.Ссылка);
				
				Если Провести Тогда
					КлючевыеПоляЗаполнены = Объект.ПроверитьЗаполнение();
					Если КлючевыеПоляЗаполнены Тогда
						Режим = РежимЗаписиДокумента.Проведение;
					КонецЕсли;
				КонецЕсли;
				
				Объект.Записать(Режим);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 	
КонецПроцедуры		

Процедура ЗаписатьНаименованияТоваровВРамкахТСВДокументе(Результат, Провести = Ложь, ПолучатьДанныеСопоставления = Ложь)
	
	ВыборкаДокументов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СоответствиеНомеровТаблицИНазваний = ВССерверПереопределяемый.СоответствиеНомеровТаблицИНазванийСНТ(); 
	
	НаименованияПоДТПолучены = Ложь;
	НомерФНОПолучен 		 = Ложь;
	НомерПозицииИзФНОПолучен = Ложь;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		//Наименования по ДТ/ФНО заполняем только в СНТ
		Если ТипЗнч(ВыборкаДокументов.Ссылка) <> ВССерверПереопределяемый.ТипДокументаСНТ() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрок.Следующий() Цикл
			НеобходимоЗаполнитьТоварНаименованиеВРамкахТС = Истина; 
			//Заполнение ИД товаров
			Если ЗначениеЗаполнено(ВыборкаСтрок.ТоварНаименованиеВРамкахТСВДокументе) И ЗначениеЗаполнено(ВыборкаСтрок.ТоварНаименованиеВРамкахТС_ВС) Тогда
				
				Если (ВыборкаСтрок.ТоварНаименованиеВРамкахТСВДокументе = ВыборкаСтрок.ТоварНаименованиеВРамкахТС_ВС) Тогда
					
					НеобходимоЗаполнитьТоварНаименованиеВРамкахТС = Ложь;
					// все в порядке Наименование было заполнен ранее, он не отличается от данных ВС
				Иначе
					
					//все плохо, по нашим данным Наименование другое но менять поздно, мог быть созда источник происхождения
					ТекстСообщения =  НСтр("ru = 'Наименование товара по ДТ/ФНО в документе %Документ% отличается от данных Виртуального склада. Строка %НомерСтроки%: Наименование по ДТ/ФНО в документе %НаименованиеВИБ%, в модуле ВС:  %НаименованиеВВС%. Наименование не загружено...'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СокрЛП(ВыборкаДокументов.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеВИБ%", СокрЛП(ВыборкаСтрок.ТоварНаименованиеВРамкахТСВДокументе));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеВВС%", СокрЛП(ВыборкаСтрок.ТоварНаименованиеВРамкахТС_ВС));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СокрЛП(ВыборкаСтрок.НомерСтроки));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
						
					НеобходимоЗаполнитьТоварНаименованиеВРамкахТС = Ложь;
					
				КонецЕсли;	
			Иначе
				Если ВыборкаДокументов.СсылкаПроведен Тогда
					// в проведенном документе Наименование не можем поменять, т.к. мог быть создан источник происхождения
					// поэтому только сообщаем об отличиях.
					
					ТекстСообщения =  НСтр("ru = 'Наименование товара по ДТ/ФНО в документе %Документ% отличается от данных Виртуального склада. Строка %НомерСтроки%: Наименование по ДТ/ФНО в документе %НаименованиеВИБ%, в модуле ВС:  %НаименованиеВВС%. Наименование не загружено...'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СокрЛП(ВыборкаДокументов.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеВИБ%", "<не заполнено>");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеВВС%", СокрЛП(ВыборкаСтрок.ТоварНаименованиеВРамкахТС_ВС));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СокрЛП(ВыборкаСтрок.НомерСтроки));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					
					НеобходимоЗаполнитьТоварНаименованиеВРамкахТС = Ложь;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НеобходимоЗаполнитьТоварНаименованиеВРамкахТС Тогда
				Объект[СоответствиеНомеровТаблицИНазваний[ВыборкаСтрок.НомерТабличнойЧасти]][ВыборкаСтрок.НомерСтроки-1].ТоварНаименованиеВРамкахТС = ВыборкаСтрок.ТоварНаименованиеВРамкахТС_ВС;
				НаименованияПоДТПолучены = Истина; 	
			КонецЕсли;
			
			//Заполнение Номера ФНО
			Если ПолучатьДанныеСопоставления И ЗначениеЗаполнено(ВыборкаСтрок.НомерФНО_ВС) И ВыборкаСтрок.НомерФНО_ВС <> ВыборкаСтрок.НомерФНОВДокументе Тогда
				Объект[СоответствиеНомеровТаблицИНазваний[ВыборкаСтрок.НомерТабличнойЧасти]][ВыборкаСтрок.НомерСтроки-1].НомерФНО = ВыборкаСтрок.НомерФНО_ВС;
				НомерФНОПолучен = Истина;  	
			КонецЕсли;

			//Заполнение Номера позиции из ФНО
			Если ПолучатьДанныеСопоставления И ЗначениеЗаполнено(ВыборкаСтрок.НомерПозицииИзФНО_ВС) И ВыборкаСтрок.НомерПозицииИзФНО_ВС <> ВыборкаСтрок.НомерПозицииИзФНОВДокументе Тогда
				Объект[СоответствиеНомеровТаблицИНазваний[ВыборкаСтрок.НомерТабличнойЧасти]][ВыборкаСтрок.НомерСтроки-1].НомерПозицииИзФНО = ВыборкаСтрок.НомерПозицииИзФНО_ВС;
				НомерПозицииИзФНОПолучен = Истина;  	
			КонецЕсли;
		
		КонецЦикла;
		
		// Нужно проверить что идентификаторы заполнены во всех строках, если это так, то можно изменить статус документа и провести его.
		Если Объект.Модифицированность() Тогда
			Режим = РежимЗаписиДокумента.Запись;
			
			Объект.Состояние = ВССерверПереопределяемый.КонечноеСостояниеОбработкиДокумента(ВыборкаДокументов.Ссылка);
			
			Если Провести Тогда
				КлючевыеПоляЗаполнены = Объект.ПроверитьЗаполнение();
				Если КлючевыеПоляЗаполнены Тогда
					Режим = РежимЗаписиДокумента.Проведение;
				КонецЕсли;
			КонецЕсли;
			
			Объект.Записать(Режим);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НаименованияПоДТПолучены Или НомерФНОПолучен Или НомерПозицииИзФНОПолучен Тогда
		
		СообщениеПользователя = Новый СообщениеПользователю;
		ПереченьПолей = Новый Массив;
		
		Если НаименованияПоДТПолучены Тогда
			ПереченьПолей.Добавить("Наименований товаров по ДТ/ФНО");
		КонецЕсли;
		
		Если НомерФНОПолучен Тогда
			ПереченьПолей.Добавить("Номера ФНО");
		КонецЕсли;
		
		Если НомерПозицииИзФНОПолучен Тогда
			ПереченьПолей.Добавить("Номера позиции из ФНО");	
		КонецЕсли;
		
		Текст = НСтр("ru = '%ТекущаяДата% Получение %ПереченьПолей% с ВС успешно завершено.'");
		Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
		Текст = СтрЗаменить(Текст, "%ПереченьПолей%", СтрСоединить(ПереченьПолей, ", "));
		СообщениеПользователя.Текст = Текст;
		СообщениеПользователя.Сообщить();
		
	КонецЕсли;

КонецПроцедуры

Функция ОтправитьЗапросПоИдентификаторамТоваровДокументов(ПрофильИСЭСФ, ИдентификаторСессии, СписокРегНомеров, ВерсияВС)
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(СписокРегНомеров) Тогда
		Возврат Неопределено;
	конецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСессии) ИЛИ НЕ ВССервер.СессияВСАктивна(ИдентификаторСессии, ПрофильИСЭСФ) Тогда
		ИдентификаторСессии = ВССервер.ОткрытьСессию(ПрофильИСЭСФ);
	КонецЕсли;	
	/////////////////////////////////////////////////////////////////////////////
	// Создать и выполнить запрос к API ИС ЭСФ.
	
	ЗапросXML = ПолучитьМакет("ЗапросВСqueryProductIdsRequest").ПолучитьТекст();
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[registrationNumberList]", СписокРегНомеров);
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаVstoreBalanceWebService(), , ВерсияВС); 
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Обработать результат запроса к API ИС ЭСФ.
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		Иначе
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		КонецЕсли;
		
		ProductIdsResponse = ОтветXDTO.Body.queryProductIdsResponse;
		incomes = ЭСФСервер.ПолучитьСвойство(ProductIdsResponse, "incomes", Неопределено); 
		income = ЭСФСервер.ПолучитьСвойство(incomes, "income", Неопределено); 
		
		Если НЕ income = Неопределено Тогда											
			Результат = ЭСФСервер.СписокXDTOИзОбъектXDTO(incomes.income);
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.ОтправитьЗапросПоИдентификаторамТоваровДокументов'"),  
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При заполнении идентификаторов товаров возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
				
	Возврат Результат;			
	
КонецФункции	

Функция ТипыФормВСДляПолученияИдентификаторов()
	
	МассивТиповФормВС 		= Новый Массив;
	МассивВидовДетализации 	= Новый Массив;
	СтруктураДоступныхФормИВидовДетализации = Новый Структура;
	
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.Остатки);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.КорректировкаОстатков);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.Производство);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.ДекларацияНаТовары);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.ДетализацияИмпорта);
	МассивТиповФормВС.Добавить(Перечисления.ТипыФормВС.ВводОстатковНаВС);

	МассивВидовДетализации.Добавить(Перечисления.ВидДетализации.Комплектация);
	МассивВидовДетализации.Добавить(Перечисления.ВидДетализации.Разукомплектация);
	МассивВидовДетализации.Добавить(Перечисления.ВидДетализации.РедактированиеДанных);
	МассивВидовДетализации.Добавить(Перечисления.ВидДетализации.КонвертацияМеждуЕИ);
	
	СтруктураДоступныхФормИВидовДетализации.Вставить("ТипыФормВС",  МассивТиповФормВС);
	СтруктураДоступныхФормИВидовДетализации.Вставить("ВидыДетализации",  МассивВидовДетализации);
	
	Возврат СтруктураДоступныхФормИВидовДетализации;
	
КонецФункции

#КонецОбласти 

#Область РаботаСДвижениямиТоваровВС

Функция ПолучитьДвиженияТоваровВС(Знач Направление, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, ИдентификаторСессии, ВерсияВС, ПараметрыМетода) Экспорт
	
	ФабрикаBalanceUpdates = Фабрика_BalanceUpdates_XML_API_ЭЦП_Версия1(); // Фабрика для приема сообщений с секцией CDATA
		
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "100"); 
	
	//при первом выполнении запроса, ориентируемся только на дату
	lastBalanceId = "0";//?(ПараметрыМетода.Свойство(ВРег("lastBalanceId")), ПараметрыМетода.lastBalanceId, "0"); // для 5.0
	lastEventDate = ДатаНачалаУчетаПоИдентификаторам();
	
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)				
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) И ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		
		ДатаНачалаУчетаПоИдентификаторам = ДатаНачалаУчетаПоИдентификаторам();
		Если ПараметрыМетода.ДатаНачалаСинхронизации < ДатаНачалаУчетаПоИдентификаторам Тогда
			lastEventDate = ДатаНачалаУчетаПоИдентификаторам;
		Иначе	
			lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;
		КонецЕсли;	
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;			
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросВСVstoreBalanceQueryUpdates_Версия1").ПолучитьТекст();				
		
	ПредыдущийlastBalanceId = Неопределено;
	ПредыдущийLastEventDate = Неопределено;
	
	ПоследнийБлок = Ложь; //
	
	//получим не обработанные документы (ЭДВС, ЭСФ), т.е. те документы, для товаров которых не присвоены идентификаторы
	МассивДокументов = ОпределитьНеОбработанныеДокументы(lastEventDate, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);

	Пока НЕ ПоследнийБлок И (LastEventDate<>ПредыдущийLastEventDate ИЛИ lastBalanceId <> ПредыдущийlastBalanceId) Цикл
		
		ПредыдущийlastBalanceId = lastBalanceId;
		ПредыдущийLastEventDate = LastEventDate;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[clientId]", ЭСФСервер.ИдентификаторКлиентаИСЭСФ());
		ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", ВСКлиентСервер.НаправлениеДвиженияТоваров(Направление));
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
						
		// в версии 5.0	 идентификаци по двум параметрам
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastBalanceId]", lastBalanceId); 
		
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
				
		ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаVstoreBalanceWebService(),,ВерсияВС);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			//ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрика_queryBalanceUpdates_V1);
			
			update = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse.updates, "update", Неопределено);				
			
			ПрисвоитьИдентификаторыТоваров(МассивДокументов, update, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница, lastEventDate); 
			
			// Сохранение  параметров
			ПоследнийБлок = XMLЗначение(Тип("Булево"), ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastBlock", Истина));			
			
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastEventDate",0); 
			lastBalanceId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.queryUpdatesResponse, "lastBalanceId",0); 
			
			ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
			Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
				//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекундов, возвращаемых сервером
				ПараметрДата = ПараметрДата - 1;
			КонецЕсли;
			
			ЭСФСервер.СохранитьПараметрыМетода(
							ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
							ВРег("VstoreBalanceWebService_queryUpdates"), 
							Направление, 
							ВРег("lastEventDate"), 
							ПараметрДата);
			
			ЭСФСервер.СохранитьПараметрыМетода(
							ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
							ВРег("VstoreBalanceWebService_queryUpdates"), 
							Направление, 
							ВРег("lastBalanceId"), 
							lastBalanceId);
							
			    				
			Если ПолучитьОднуПорцию Тогда
				//чтобы не возникало зацикливания
				ПоследнийБлок = Истина;
				Прервать;
			КонецЕсли;
				  
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
				
			ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияВС);
			ПредыдущийLastEventDate = Неопределено;			
			ПредыдущийlastBalanceId = Неопределено;			
		Иначе
			
			ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОбменЭСФ.ПолучитьДвиженияТоваровВС'"), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение НСтр("ru = 'При получении движений товаров с модуля виртуального склада возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?(ПоследнийБлок ИЛИ (LastEventDate = ПредыдущийLastEventDate И lastBalanceId = ПредыдущийlastBalanceId), Истина, Ложь);
			
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

// См. ЭСФСервер.ПолучитьИдентификаторыТоваров()
Функция ПолучитьИдентификаторыТоваров(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;	                                      	
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
		                                      	
	СообщениеПользователя = Новый СообщениеПользователю;

	ПараметрыВС = ВССерверПовтИсп.ПолучитьПараметрыЭДВС();
	ВерсияИСВС = Неопределено;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начато получение идиентификаторов товаров с ВС.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	//для приходных ЭДВС используемя перечисления по направлению ЭСФ, а именно значение Входящий
	//для расходных - значение Исходящий
	НаправлениеВходящие = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;		
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка); 				
		
		ПараметрыМетодаЭДВС = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("VstoreBalanceWebService_queryUpdates"), НаправлениеВходящие);	
			
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаЭДВС, , ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ВСВызовСервера.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияИСВС);
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение идентификаторов товаров с ВС. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДвиженияТоваровВС(НаправлениеВходящие, СтруктураПрофиляСинхронизации, Ложь, ИдентификаторСессии, ВерсияИСВС, ПараметрыМетодаЭДВС);
			
		КонецЦикла;
		
		ВСВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСВС);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
		
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Получение идентификаторов товаров с ВС успешно завершено.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПрисвоитьИдентификаторыТоваров(МассивДокументов, Знач update, Знач СтруктурнаяЕдиница, ДатаНачала) Экспорт
	
	Если update = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	update = ЭСФСервер.СписокXDTOИзОбъектXDTO(update);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивИзмененныхДокументов = Новый Массив;
		МассивПрисвоенныхИД		   = Новый Массив;
		
		ТаблицаОбновлений = ЗаписатьСписокXDTOВТаблицу(update);
		
		СтруктураПоискаПоНомеруСтрокиЭСФ = Новый Структура("БИН, НомерСтрокиВДокументеДвижения");
		СтруктураПоискаПоНомеруСтрокиЭДВС = Новый Структура("БИН, НомерСтрокиВДокументеДвижения, СкладИдентификатор");
		
		СтруктураПоискаПрочиеПоля = Новый Структура("БИН, СкладИдентификатор, ТоварНаименование, КодТНВЭД, ЕдиницаИзмеренияКод, 
													|Цена, Количество, НомерПозицииВДекларацииИлиЗаявлении, 
													|НомерЗаявленияВРамкахТС, ТоварНаименованиеВРамкахТС, ФизическаяМетка");
		
													
		//Получим список строк товаров, отсортированный нужным нам образом
		//это для тех случаев, когда в ЭДВС есть как товары виртуального склада, так и обычные товары.
		//
		ДеревоТоваровДокумента = ПолучитьДеревоУпорядоченныхТоваров(МассивДокументов);
		
		Для Каждого СтрокаДереваДокумент Из ДеревоТоваровДокумента.Строки Цикл
				
			ДокументДляОбработки = СтрокаДереваДокумент.Ссылка;
			
			Товары = СтрокаДереваДокумент.Строки;
			//позже обработать ситуацию с импортом, возможно здесь нужно будет их исключать
			//проверить ситуацию, когда импорт был до внедрения ИД товаров, а перемещение на склад - после.
			//
			Если ТипЗнч(ДокументДляОбработки) = Тип("ДокументСсылка.ЭлектронныйДокументВС") И ДокументДляОбработки.ТипФормы <> Перечисления.ТипыФормВС.ДекларацияНаТовары Тогда
				ТаблицаОбновленийПоДокументу = ПолучитьОбновленияДокумента(ТаблицаОбновлений, ДокументДляОбработки.РегистрационныйНомер);
			Иначе
				РегНомер = ДокументДляОбработки.РегистрационныйНомер;
				Если Товары.Количество() <> 0 Тогда
					СтрокаТовар = Товары[0];
					НомерИмпортногоДокумента = СтрокаТовар.НомерЗаявленияВРамкахТС;
					
					//"вычленим" Дату импортного документа из регистрационного номера
					ДатаДокументаПоИмпорту = ВСКлиентСервер.ПолучитьДатуИзРегНомера(НомерИмпортногоДокумента);
		
					Если ДатаДокументаПоИмпорту >= ДатаНачалаУчетаПоИдентификаторам() Тогда
						РегНомер = НомерИмпортногоДокумента;
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаОбновленийПоДокументу = ПолучитьОбновленияДокумента(ТаблицаОбновлений, РегНомер);	
			КонецЕсли;	
			
			Если ТаблицаОбновленийПоДокументу.Количество() <> 0 Тогда
				
				ДокументОбъект = ДокументДляОбработки.ПолучитьОбъект();
				
				МассивПрисвоенныхИД.Очистить();
				
				ВсемСтрокамПрисвоеныИД = Истина;
				
				Для Каждого СтрокаТовары Из Товары Цикл
					
					ПрисвоитьИДТовара = Ложь;
					
					ЭтоЭСФ = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЭСФ"));
					
					Если Не ЭтоЭСФ И
						(ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Или ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение)
						Тогда
						
						Если Не ЗначениеЗаполнено(СтрокаТовары.ДополнительныйИдентификаторПолучатель) Тогда
							Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
								ПрисвоитьИДТовара = Истина;
							КонецЕсли;						
						КонецЕсли;	
					
					Иначе	
						Если Не ЗначениеЗаполнено(СтрокаТовары.ДополнительныйИдентификатор) Тогда
							//в ЭДВС обрабатываем только те строки, в которых установлен признак учета на ВС - т.е. товар является товаром виртуальнеого склада.
							Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
								ПрисвоитьИДТовара = Истина;
							КонецЕсли;						
						КонецЕсли;	
					КонецЕсли;	
					
					Если ПрисвоитьИДТовара Тогда
						
						//в качестве номера строки, указанной в документе ИБ берем индекс товара
						//это для тех случаев, когда в одном ЭДВС встречаются как товары ВС, так и обычные товары
						НомерСтроки = Товары.Индекс(СтрокаТовары)+1;
						
						Если ЭтоЭСФ Тогда
							БИН = ДокументОбъект.Получатели[0].ПолучательИдентификатор;
							
							СтруктураПоискаПоНомеруСтрокиЭСФ.БИН							 = БИН;
							СтруктураПоискаПоНомеруСтрокиЭСФ.НомерСтрокиВДокументеДвижения	 = НомерСтроки;
							
							НайденныеСтроки = ТаблицаОбновленийПоДокументу.НайтиСтроки(СтруктураПоискаПоНомеруСтрокиЭСФ);
					
						Иначе
							Если ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Или ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ДетализацияИмпорта Тогда
								//для операции по перемещению БИН определяем по получателю.
								// в случае перемещения в рамках СП - отправитель и получатель разные, при этом ИД присваивается у получателя
								// поэтому БИН определяем по получателю
								БИН					= ДокументОбъект.ПолучательИдентификатор;
								ИдентификаторСклада = ДокументОбъект.СкладПолучательИдентификатор;
							Иначе	
								БИН					= ДокументОбъект.ОтправительИдентификатор;
								ИдентификаторСклада = ДокументОбъект.СкладОтправительИдентификатор;
							КонецЕсли;
							
							СтруктураПоискаПоНомеруСтрокиЭДВС.БИН							= БИН;
							СтруктураПоискаПоНомеруСтрокиЭДВС.СкладИдентификатор			= ИдентификаторСклада;
							СтруктураПоискаПоНомеруСтрокиЭДВС.НомерСтрокиВДокументеДвижения = НомерСтроки;
							
							НайденныеСтроки = ТаблицаОбновленийПоДокументу.НайтиСтроки(СтруктураПоискаПоНомеруСтрокиЭДВС);
					        
						КонецЕсли;

						Если ЭтоЭСФ Тогда
							СтрокаОбъектаДляИзменения = Документобъект.Товары.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
						Иначе
							СтрокаОбъектаДляИзменения = Документобъект.ТоварыВС.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
						КонецЕсли;	
						
						ИмяРеквизита = "ДополнительныйИдентификатор";
						Если Не ЭтоЭСФ И
							(ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами Или ДокументОбъект.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение)
							Тогда
							
							ИмяРеквизита = "ДополнительныйИдентификаторПолучатель";
							
						КонецЕсли;	
								
						
						Если НайденныеСтроки.Количество() <> 0 Тогда
							
							СтрокаОбъектаДляИзменения[ИмяРеквизита] = НайденныеСтроки[0].ДополнительныйИдентификатор;
								
						Иначе
							
							ЗаполнитьЗначенияСвойств(СтруктураПоискаПрочиеПоля, СтрокаТовары);

							Если ЭтоЭСФ Тогда
								ФизическаяМетка		= ВСКлиентСервер.СтруктураИдентификатораТовара(СтрокаТовары.ИдентификаторТовара).МеткаТовара;
							Иначе
								ФизическаяМетка		= СтрокаТовары.ФизическаяМетка;
							КонецЕсли;

							СтруктураПоискаПрочиеПоля.ФизическаяМетка	 = ФизическаяМетка;
							СтруктураПоискаПрочиеПоля.БИН			 	 = БИН;
							СтруктураПоискаПрочиеПоля.СкладИдентификатор = ИдентификаторСклада;
							
							НайденныеСтроки = ТаблицаОбновленийПоДокументу.НайтиСтроки(СтруктураПоискаПрочиеПоля);
							
							Если НайденныеСтроки.Количество() <> 0 Тогда
								
								//может оказаться так, что в документе были несколько строк с абсолютно одинаковыми данными
								Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									ИД = НайденнаяСтрока.ДополнительныйИдентификатор;
									ИндексИД = МассивПрисвоенныхИД.Найти(ИД); 
									
									Если ИндексИД = Неопределено Тогда
										СтрокаОбъектаДляИзменения[ИмяРеквизита] = НайденнаяСтрока.ДополнительныйИдентификатор;	
										МассивПрисвоенныхИД.Добавить(НайденнаяСтрока.ДополнительныйИдентификатор);										
									КонецЕсли;	
								КонецЦикла;	
						
							КонецЕсли;
							
						КонецЕсли;	
						
						Если Не ЗначениеЗаполнено(СтрокаОбъектаДляИзменения[ИмяРеквизита]) Тогда
							ВсемСтрокамПрисвоеныИД = Ложь;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если ВсемСтрокамПрисвоеныИД Тогда
					Если ЭтоЭСФ Тогда
						ДокументОбъект.Состояние = Перечисления.СостоянияЭСФ.ПринятОтПоставщика;
					Иначе
						ДокументОбъект.Состояние = Перечисления.СостоянияЭДВС.ОбработанНаСервере;
					КонецЕсли;
				КонецЕсли;	

				МассивИзмененныхДокументов.Добавить(ДокументОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		// Провести документы.
		// Запись и проведение выполнены разными действиями, т.к. если сделать в одной записи, 
		// то из-за того, что при проведении выполняются различные проверки, запись с проведением может быть не выполнена.
		//
		// 1. Сначала делаемпопытка проведения, чтобы ИП создались корректно.
		Для Каждого ДокументОбъект Из МассивИзмененныхДокументов Цикл
			
			//Если НЕ (ТипЗнч(ДокументДляОбработки) = Тип("ДокументСсылка.ЭлектронныйДокументВС") И ДокументДляОбработки.ТипФормы = Перечисления.ТипыФормВС.ДекларацияНаТовары) Тогда
			Если ТипЗнч(ДокументДляОбработки) = Тип("ДокументСсылка.ЭСФ") ИЛИ
				(ТипЗнч(ДокументДляОбработки) = Тип("ДокументСсылка.ЭлектронныйДокументВС") И ДокументДляОбработки.ТипФормы <> Перечисления.ТипыФормВС.ДекларацияНаТовары) Тогда
			
				КлючевыеПоляЗаполнены = ДокументОбъект.ПроверитьЗаполнение();
				
				Если КлючевыеПоляЗаполнены Тогда
					
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
					КонецПопытки;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'Не проведен документ с регистрационным номером %1 по причине не заполненных полей'");
					ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект.РегистрационныйНомер);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		
		// Записать документы
		//2. Запись на тот случай, если проведение не успешно
		Для Каждого ДокументОбъект Из МассивИзмененныхДокументов Цикл
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();

		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПрисвоитьИдентификаторыТоваров'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры      

Функция ОпределитьНеОбработанныеДокументы(ДатаНачала, СтруктурнаяЕдиница) Экспорт
	
	Запрос = Новый Запрос;
	
	//поиск необработанных ЭДВС
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЭлектронныйДокументВС.Ссылка,
	               |	ЭлектронныйДокументВС.Состояние
	               |ИЗ
	               |	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	               |ГДЕ
	               |	ЭлектронныйДокументВС.Состояние = &СостояниеЭДВСОжидаетИдентификации
	               |	И ЭлектронныйДокументВС.Дата >= &ДатаНачала
				   |	И ЭлектронныйДокументВС.Дата >= &ДатаНачалаУчетаПоИдентификаторам
	               |	И ЭлектронныйДокументВС.Проведен = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами)
	               |				ТОГДА ЭлектронныйДокументВС.ОрганизацияПолучатель = &СтруктурнаяЕдиница
	               |			ИНАЧЕ ЭлектронныйДокументВС.Организация = &СтруктурнаяЕдиница
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЭСФ.Ссылка,
	               |	ЭСФ.Состояние
	               |ИЗ
	               |	Документ.ЭСФ КАК ЭСФ
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	               |		ПО ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	               |			И (ЭСФПолучатели.НомерСтроки = 1)
	               |ГДЕ
	               |	ЭСФ.Состояние = &СостояниеЭСФОжидаетИдентификации
	               |	И ЭСФ.Направление = &НаправлениеЭСФ
	               |	И ЭСФ.Дата >= &ДатаНачала
				   |	И ЭСФ.Дата >= &ДатаНачалаУчетаПоИдентификаторам
	               |	И ЭСФ.Проведен = ЛОЖЬ
	               |	И ЭСФПолучатели.Получатель = &СтруктурнаяЕдиница";
				   
	Запрос.УстановитьПараметр("СостояниеЭДВСОжидаетИдентификации", Перечисления.СостоянияЭДВС.ОжидаетИдентификацииТоваровНаВС);
	Запрос.УстановитьПараметр("СостояниеЭСФОжидаетИдентификации", Перечисления.СостоянияЭСФ.ОжидаетИдентификацииТоваровНаВС);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("НаправлениеЭСФ", Перечисления.НаправленияЭСФ.Входящий);
		
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаПоИдентификаторам", ДатаНачалаУчетаПоИдентификаторам());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДокументов = РезультатЗапроса.Выгрузить();
	МассивДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции	

Функция НайтиДвиженияПоРегНомеру(Знач update, Знач movementDoc)
	
	МассивДвижений = Новый Массив;
	
	Для Каждого Строкаupdate Из update Цикл
		Если Строкаupdate.movementDoc = movementDoc Тогда
			
			МассивДвижений.Добавить(Строкаupdate);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДвижений;
	
КонецФункции

Функция ЗаписатьСписокXDTOВТаблицу(update) Экспорт
	
	ТаблицаОбновлений = ВССервер.ПустаяТаблицаОбновленийДвиженийТоваровВС();	
	
	Для Каждого Строкаupdate Из update Цикл
		СтрокаТаблицы = ТаблицаОбновлений.Добавить();
		                     
		СтрокаТаблицы.БИН 									 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "tin", "");
		СтрокаТаблицы.СкладИдентификатор					 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "taxpayerStoreId", 0);
		СтрокаТаблицы.ТоварНаименование						 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "name", "");
		СтрокаТаблицы.КодТНВЭД								 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "tnvedCode", "");
		СтрокаТаблицы.ДополнительныйИдентификатор			 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "productId", 0);
		СтрокаТаблицы.ЕдиницаИзмеренияКод					 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "measureUnitCode", "");
		СтрокаТаблицы.Цена									 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "unitPrice", 0);
		СтрокаТаблицы.Количество							 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "quantity", 0);
		СтрокаТаблицы.НомерПозицииВДекларацииИлиЗаявлении	 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "productNumberInImportDoc", "");
		СтрокаТаблицы.НомерЗаявленияВРамкахТС				 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "manufactureOrImportDocNumber", "");
		СтрокаТаблицы.ТоварНаименованиеВРамкахТС			 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "productNameInImportDoc", "");
		СтрокаТаблицы.ФизическаяМетка						 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "physicalLabel", "");
		СтрокаТаблицы.ДокументДвижения						 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "movementDoc", "");
		СтрокаТаблицы.ДатаОбновления						 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "updateDate", "");
		СтрокаТаблицы.НомерСтрокиВДокументеДвижения			 = ЭСФСервер.ПолучитьСвойство(Строкаupdate, "productNumberInMovementDoc", 0);
		
	КонецЦикла;
	
	Возврат ТаблицаОбновлений;
	
КонецФункции

Функция ПолучитьОбновленияДокумента(ТаблицаОбновлений, РегНомер)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТаблицаОбновлений.БИН,
	|	ТаблицаОбновлений.СкладИдентификатор,
	|	ТаблицаОбновлений.ТоварНаименование,
	|	ТаблицаОбновлений.КодТНВЭД,
	|	ТаблицаОбновлений.ДополнительныйИдентификатор,
	|	ТаблицаОбновлений.ЕдиницаИзмеренияКод,
	|	ТаблицаОбновлений.Цена,
	|	ТаблицаОбновлений.Количество,
	|	ТаблицаОбновлений.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТаблицаОбновлений.НомерЗаявленияВРамкахТС,
	|	ТаблицаОбновлений.ТоварНаименованиеВРамкахТС,
	|	ТаблицаОбновлений.ФизическаяМетка,
	|	ТаблицаОбновлений.ДокументДвижения,
	|	ТаблицаОбновлений.ДатаОбновления,
	|	ТаблицаОбновлений.НомерСтрокиВДокументеДвижения
    |
	|ПОМЕСТИТЬ 
	|	ВТ_ТаблицаОбновлений
	|
	|ИЗ &ТаблицаОбновлений КАК ТаблицаОбновлений
	|
	|;
	|ВЫБРАТЬ
	|	ТаблицаОбновлений.БИН,
	|	ТаблицаОбновлений.СкладИдентификатор,
	|	ТаблицаОбновлений.ТоварНаименование,
	|	ТаблицаОбновлений.КодТНВЭД,
	|	ТаблицаОбновлений.ДополнительныйИдентификатор,
	|	ТаблицаОбновлений.ЕдиницаИзмеренияКод,
	|	ТаблицаОбновлений.Цена,
	|	ТаблицаОбновлений.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТаблицаОбновлений.НомерЗаявленияВРамкахТС,
	|	ТаблицаОбновлений.ТоварНаименованиеВРамкахТС,
	|	ТаблицаОбновлений.ФизическаяМетка,
	|	ТаблицаОбновлений.ДокументДвижения,
	|	ТаблицаОбновлений.ДатаОбновления,
	|	ТаблицаОбновлений.НомерСтрокиВДокументеДвижения,
	|	СУММА(ТаблицаОбновлений.Количество)      //если при движении товара были подобраны разные вирт.метки, то количество разобьется по разным строкам (ИД баланса), при этом ИД товара будет одинаковый
	|
	|ИЗ ВТ_ТаблицаОбновлений КАК ТаблицаОбновлений
	|
	|ГДЕ 
	|	ТаблицаОбновлений.ДокументДвижения = &РегНомер	
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбновлений.БИН,
	|	ТаблицаОбновлений.СкладИдентификатор,
	|	ТаблицаОбновлений.ТоварНаименование,
	|	ТаблицаОбновлений.КодТНВЭД,
	|	ТаблицаОбновлений.ДополнительныйИдентификатор,
	|	ТаблицаОбновлений.ЕдиницаИзмеренияКод,
	|	ТаблицаОбновлений.Цена,
	|	ТаблицаОбновлений.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТаблицаОбновлений.НомерЗаявленияВРамкахТС,
	|	ТаблицаОбновлений.ТоварНаименованиеВРамкахТС,
	|	ТаблицаОбновлений.ФизическаяМетка,
	|	ТаблицаОбновлений.ДокументДвижения,
	|	ТаблицаОбновлений.ДатаОбновления,
	|	ТаблицаОбновлений.НомерСтрокиВДокументеДвижения
	|";
	
	Запрос.УстановитьПараметр("РегНомер", РегНомер);
	Запрос.УстановитьПараметр("ТаблицаОбновлений", ТаблицаОбновлений);
	
	ТаблицаОбновленийДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбновленийДокумента;
	
КонецФункции	

Функция ПолучитьДеревоУпорядоченныхТоваров(МассивДокументов)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭлектронныйДокументВСТовары.Ссылка КАК Ссылка,
	               |	ЭлектронныйДокументВСТовары.НомерСтроки КАК НомерСтроки,
	               |	ЭлектронныйДокументВСТовары.ДополнительныйИдентификатор,
				   |	ЭлектронныйДокументВСТовары.ДополнительныйИдентификаторПолучатель,
	               |	ЭлектронныйДокументВСТовары.ТоварНаименование,
	               |	ЭлектронныйДокументВСТовары.ФизическаяМетка,
	               |	ЭлектронныйДокументВСТовары.КодТНВЭД,
	               |	ЭлектронныйДокументВСТовары.Количество,
	               |	ЭлектронныйДокументВСТовары.Цена,
	               |	ЭлектронныйДокументВСТовары.НомерЗаявленияВРамкахТС,
	               |	ЭлектронныйДокументВСТовары.ТоварНаименованиеВРамкахТС,
	               |	ЭлектронныйДокументВСТовары.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ЭлектронныйДокументВСТовары.ЕдиницаИзмеренияКод,
	               |	ЭлектронныйДокументВСТовары.Сумма,
	               |	Истина КАК ПризнакУчетаНаВиртуальномСкладе,
	               |	"""" КАК ИдентификаторТовара,
	               |	ЭлектронныйДокументВСТовары.Ссылка.РегистрационныйНомер
	               |ИЗ
	               |	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТовары
				   |ГДЕ
	               //|	ЭлектронныйДокументВСТовары.ПризнакУчетаНаВиртуальномСкладе = ИСТИНА
	               |	ЭлектронныйДокументВСТовары.Ссылка В(&СписокДокументов)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЭСФТовары.Ссылка,
	               |	ЭСФТовары.НомерСтроки,
	               |	ЭСФТовары.ДополнительныйИдентификатор,
				   |	0,
	               |	ЭСФТовары.ТоварНаименование,
	               |	"""",
	               |	ЭСФТовары.КодТНВЭД,
	               |	ЭСФТовары.Количество,
	               |	ЭСФТовары.СуммаБезНалогов КАК Цена,
	               |	ЭСФТовары.НомерЗаявленияВРамкахТС,
	               |	ЭСФТовары.ТоварНаименованиеВРамкахТС,
	               |	ЭСФТовары.НомерПозицииВДекларацииИлиЗаявлении,
	               |	ЭСФТовары.ЕдиницаИзмеренияКод,
	               |	ЭСФТовары.Сумма,
	               |	ЭСФТовары.ПризнакУчетаНаВиртуальномСкладе,
	               |	ЭСФТовары.ИдентификаторТовара,
	               |	ЭСФТовары.Ссылка.РегистрационныйНомер
	               |ИЗ
	               |	Документ.ЭСФ.Товары КАК ЭСФТовары
	               |ГДЕ
	               |	ЭСФТовары.Ссылка В(&СписокДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |ИТОГИ ПО
	               |	Ссылка";
				   
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоТоваров = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоТоваров;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

&НаСервере
Процедура СоздатьВС(Знач МассивВС, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ВерсияИСВС = Неопределено; //ПараметрыЭСФ.ВерсияИСЭСФ;
		
	НачатьТранзакцию();
	
	Попытка
		МассивВСДляПолученияИдентификаторов = Новый Массив;
 		СоздатьВСПоПараметрам(МассивВС, ДанныеПрофиляИСЭСФ, ВерсияИСВС, МассивВСДляПолученияИдентификаторов);
		
		// Обновим состояние у ЭСФ со статусом НеПолучениОтветОтСервера
		МассивБезОтветаОтСервера = Новый Массив;
		
		ЗафиксироватьТранзакцию();
					
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьВС'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

// Запись изменений в реквизитах ЭСФ после их отправки на сервер
Процедура ЗаписатьИзмененияВиртуальныхСкладов(РезультатОтправки)
	
	МассивНесозданныхВС = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл	
		Если ЭлементРезультата.Значение.Идентификатор <> "" Тогда
			Склад = ЭлементРезультата.Значение.ВС.ПолучитьОбъект();
			Склад.ИдентификаторСклада = ЭлементРезультата.Значение.Идентификатор;
			Склад.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВиртуальныхСкладов.Активен");
			Склад.Записать();
		Иначе
			ВСОшибки = Новый Структура;
			ВСОшибки.Вставить("ВС",ЭлементРезультата.Значение.ВС);
			
			Если ЭлементРезультата.Значение.Ошибки <> Неопределено Тогда
				ОшибкиСтрока = "";
				
				Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
					ОшибкиСтрока = ОшибкиСтрока + Ошибка.Текст;
					//ОшибкиСтрока = ОшибкиСтрока + " в поле " + Ошибка.Поле + "; ";
				КонецЦикла;
				ВСОшибки.Вставить("ОшибкиСтрока", ОшибкиСтрока);
				
				// Очистить поля ЭСФ, которые будут заполнены после успешного приема в ИС ЭСФ.
				МассивНесозданныхВС.Добавить(ВСошибки);		
				
				//ТекстСообщения = "Не создан виртуальный склад ";
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='Не создан виртуальный склад: %1 по причине: %2'"),
				ЭлементРезультата.Значение.ВС,
				ОшибкиСтрока);
				
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);	
			КонецЕсли;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВС(СсылкаВС) Экспорт
	
	РезультатПроверки = ПустойРезультатПроверкиВС();
	
	// Объект ЭСФ не записывается, он получается только для сокращения обращений к ИБ.
	ОбъектВС = СсылкаВС.ПолучитьОбъект();
	
	Попытка
		
		ПроверитьРазличныеДанныеВС(ОбъектВС, РезультатПроверки);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстСообщения = НСтр(
		"ru = 'При проверке заполнения ВС возникла ошибка:
		|%1'");
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ПодробноеПредставлениеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПустойРезультатПроверкиВС() Экспорт
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("УведомительныеОшибки", Новый Массив);
	РезультатПроверки.Вставить("ЗапрещающиеОшибки", Новый Массив);
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ПроверитьРазличныеДанныеВС(ОбъектВС, РезультатПроверки) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверить, что склад еще не создан в ИС ЭСФ.
	Если ЗначениеЗаполнено(ОбъектВС.ИдентификаторСклада) 
		И (ОбъектВС.Статус = Перечисления.СтатусыВиртуальныхСкладов.Активен 
		ИЛИ ОбъектВС.Статус = Перечисления.СтатусыВиртуальныхСкладов.Неактивен) Тогда
		
		ТекстСообщения = НСтр("ru = 'Виртуальный склад %1 уже создан в ИС ЭСФ'"); 
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		ТекстСообщения, ОбъектВС);
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектВС.ТипСклада) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен тип склада виртуального склада %1'"); 
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		ТекстСообщения, ОбъектВС);
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектВС.Адрес) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен адрес местонахождения виртуального склада %1'"); 
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		ТекстСообщения, ОбъектВС);
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОбъектВС.ИИНОтветственногоЛица) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен ИИН ответственного лица виртуального склада %1'"); 
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		ТекстСообщения, ОбъектВС);
		
		РезультатПроверки.ЗапрещающиеОшибки.Добавить(ТекстСообщения);

	КонецЕсли;

КонецПроцедуры

Процедура СообщитьОбнаруженыОшибкиВС(Знач СсылкаВС, Знач РезультатПроверки = Неопределено) Экспорт

	Если РезультатПроверки <> Неопределено Тогда
		Если РезультатПроверки.УведомительныеОшибки.Количество() <> 0
			ИЛИ РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			
			ТекстСообщения = НСтр(
			"ru = 'Обнаружены ошибки при проверке виртуального склада: ""%1"". %2'");
			
			ТекстОшибки = "";
			Для Каждого Строка Из РезультатПроверки.ЗапрещающиеОшибки  Цикл
				ТекстОшибки = ТекстОшибки + Строка + ". ";	
			КонецЦикла;
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаВС, ТекстОшибки);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаВС);
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


//-- НЕ ЭСФ
#КонецЕсли

&НаСервере
Функция ПолучитьВерсиюКомпонентыНаСайте() Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	ШапкаОшибки = НСтр("ru = 'Ошибка получения версии модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ВерсияМодуляВИнтернете = "";
	
	ПараметрыСервераИнтернета = Контейнер.ПолучитьПараметрыИнтернета(Новый Структура);
	
	// пытаемся установить соединение с сервером
	Соединение = Контейнер.УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат "";
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(Контейнер.ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ Контейнер.ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат ВерсияМодуляВИнтернете;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете = СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	
	Возврат ВерсияМодуляВИнтернете;

КонецФункции

&НаСервере
Функция ВерсияВнешнегоМодуляКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Версия = Константы.ЭСФВерсияВнешнегоМодуля.Получить(); 
	
	Возврат Формат(Версия, "ЧРД=.; ЧРГ=' '"); // В формате "1.7". Библиотека возвращает числовой номер версии.
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюВнешнегоМодуляКриптографии(ВыдаватьСообщение = Ложь) Экспорт
	ТекущаяВерсияВнешнегоМодуля = ВерсияВнешнегоМодуляКриптографии();
	
	Если НЕ ЗначениеЗаполнено(ТекущаяВерсияВнешнегоМодуля) Тогда
		ТекстСообщения = НСТР("ru='Криптографическая библиотека отсутствует в информационной базе.'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);				
		Возврат Ложь;
	КонецЕсли;
	
	Макет = ПолучитьМакет("СписокПоддерживаемыхВерсийБиблиотеки");		
	ТекстВерсий = Макет.ПолучитьТекст();
	ПоддерживаемыеВерсии = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ТекстВерсий, ";");
	
	ВерсияПоддерживается = ПоддерживаемыеВерсии.Найти(ТекущаяВерсияВнешнегоМодуля)<> Неопределено;	
	Если НЕ ВерсияПоддерживается И ВыдаватьСообщение Тогда
		ТекстСообщения = НСТР("ru='Установленная версия криптографической библиотеки %Версия% не предназначена для запуска в текущей информационной базе. Возможно, необходимо обновить обработку обмена данными с ИС ЭСФ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Версия%", ТекущаяВерсияВнешнегоМодуля);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
	КонецЕсли;
	
	Возврат ВерсияПоддерживается;
КонецФункции

&НаСервере
Функция ТаблицаВерсийЭСФ() Экспорт
	
	ОписаниеТиповСтрока = ЭСФКлиентСервер.ПолучитьОписаниеТиповСтроки(254);
	ОписаниеТиповЧисло  = ЭСФКлиентСервер.ПолучитьОписаниеТиповЧисла(1,0);

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаВерсий = Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ВерсияЭСФ",          ОписаниеТиповЧисло);
	ТаблицаВерсий.Колонки.Добавить("ВерсияAPI",          ОписаниеТиповСтрока);
	ТаблицаВерсий.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаВерсий.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	
	НоваяФорма = ТаблицаВерсий.Добавить();
	НоваяФорма.ВерсияЭСФ          = 2;
	НоваяФорма.ВерсияAPI          = "4.0.0";
	НоваяФорма.ДатаНачалоДействия = '20130101';
	НоваяФорма.ДатаКонецДействия  = '20170930';
	
	НоваяФорма = ТаблицаВерсий.Добавить();
	НоваяФорма.ВерсияЭСФ          = 2;
	НоваяФорма.ВерсияAPI          = "5.0.0";
	НоваяФорма.ДатаНачалоДействия = '20171001';
	НоваяФорма.ДатаКонецДействия  = ЭСФКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));

	Возврат ТаблицаВерсий;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущуюВерсиюЭСФиAPI(Дата) Экспорт
	
	ТаблицаВерсий = ТаблицаВерсийЭСФ();
	
	СтруктураВерсий = Новый Структура("ВерсияЭСФ, ВерсияAPI");
	
	Для Каждого Стр Из ТаблицаВерсий Цикл
		Если Стр.ДатаКонецДействия = '00010101000000' Тогда
			Стр.ДатаКонецДействия = '20991231';
		КонецЕсли;
	КонецЦикла;

	ТаблицаВерсий.Сортировать("ДатаКонецДействия Убыв");

	Для Каждого Строка Из ТаблицаВерсий Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(Дата)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(Дата))) Тогда

			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтруктураВерсий, Строка);
		
		Возврат СтруктураВерсий;
	КонецЦикла;

	Возврат СтруктураВерсий;
	
КонецФункции

&НаСервере
Процедура СоздатьВСПоПараметрам(Знач МассивВС, Знач ПрофильИСЭСФ, ВерсияВС, МассивВСДляПолученияИдентификаторов = Неопределено) Экспорт
	
	ИдентификаторСессии = ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияВС);
	
	МассивВСXML = Новый Массив;
	Если МассивВС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВиртуальныхСкладов = "";
	
	ПредельныйРазмерПакетаВС = 250;
	ВыполнялосьОбращениеКСерверу = Ложь;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВиртуальныеСклады.Ссылка КАК Ссылка,
	|	ВиртуальныеСклады.Наименование,
	|	ВиртуальныеСклады.ПризнакОприходования,
	|	ВиртуальныеСклады.Адрес,
	|	ВиртуальныеСклады.ТипСклада,
	|	ВиртуальныеСклады.ИИНОтветственногоЛица,
	|	ВиртуальныеСклады.ЯвляетсяСкладомПоУмолчанию,
	|	ВиртуальныеСклады.ПризнакПубличногоСклада,
	|	ВиртуальныеСклады.СкладРеорганизуемогоЛица,
	|	ВиртуальныеСклады.СкладУСД,
	|	ВиртуальныеСклады.ПереработкаДавальческогоСырья,
	|	ВиртуальныеСклады.СкладДляЛизинга,
	|	ВиртуальныеСклады.БИНЛизингополучателя,
	|	ВиртуальныеСклады.НомерДоговораЛизингополучателя,
	|	ВиртуальныеСклады.ДатаДоговораЛизингополучателя
	|ИЗ
	|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
	|ГДЕ
	|	ВиртуальныеСклады.Ссылка В(&МассивВС)
	|	И НЕ ВиртуальныеСклады.ЭтоГруппа
	|	И НЕ ВиртуальныеСклады.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивВС", МассивВС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоВС = Выборка.Количество();
	
	СчетчикВС = 0;
	
	ВиртуальныеСклады = "";
	Пока Выборка.Следующий() Цикл
		
		// считаем общее количество ЭСФ
		СчетчикВС = СчетчикВС + 1;
		ВиртуальныйСклад = "<name><![CDATA[" + Выборка.Наименование + "]]></name>";
		ВиртуальныйСклад = ВиртуальныйСклад + "<address><![CDATA[" + Выборка.Адрес + "]]></address>";
		Если Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыВиртуальныхСкладов.Склад") Тогда 
			ТипСклада = "STORE_HOUSE";
		ИначеЕсли Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыВиртуальныхСкладов.ТочкаПродаж") Тогда 
			ТипСклада = "POINT_OF_SALE";
		ИначеЕсли Выборка.ТипСклада = ПредопределенноеЗначение("Перечисление.ТипыВиртуальныхСкладов.МобильныйСклад") Тогда 
			ТипСклада = "MOBILE_STORE";
		КонецЕсли;
		ВиртуальныйСклад = ВиртуальныйСклад + "<type>" + ТипСклада + "</type>";
		ВиртуальныйСклад = ВиртуальныйСклад + "<responsiblePersonIin>" + Выборка.ИИНОтветственногоЛица + "</responsiblePersonIin>";
		ВиртуальныйСклад = ВиртуальныйСклад + "<isDefault>" + ?(Выборка.ЯвляетсяСкладомПоУмолчанию, "true", "false") + "</isDefault>";
		ВиртуальныйСклад = ВиртуальныйСклад + "<isPostingGoods>" + ?(Выборка.ПризнакОприходования, "true", "false") + "</isPostingGoods>";
		ВиртуальныйСклад = ВиртуальныйСклад + "<isPublicStore>" + ?(Выборка.ПризнакПубличногоСклада, "true", "false") + "</isPublicStore>";
		//Если ЗначениеЗаполнено(Выборка.БИНЛизингополучателя) И Выборка.СкладДляЛизинга Тогда
		//	ВиртуальныйСклад = ВиртуальныйСклад + "<lesseeTin>" + Выборка.БИНЛизингополучателя + "</lesseeTin>";
		//КонецЕсли;
		//Если ЗначениеЗаполнено(Выборка.НомерДоговораЛизингополучателя) И Выборка.СкладДляЛизинга Тогда
		//	ВиртуальныйСклад = ВиртуальныйСклад + "<lesseeContractNumber>" + Выборка.НомерДоговораЛизингополучателя + "</lesseeContractNumber>";
		//КонецЕсли;
		//Если (Выборка.ДатаДоговораЛизингополучателя) <> Дата(1,1,1) И Выборка.СкладДляЛизинга Тогда
		//	ВиртуальныйСклад = ВиртуальныйСклад + "<lesseeContractDate>" + Формат(Выборка.ДатаДоговораЛизингополучателя, "ДФ=dd.MM.yyyy; ДП=01.01.0001") + "</lesseeContractDate>";
		//КонецЕсли;
		//ВиртуальныйСклад = ВиртуальныйСклад + "<isJointStore>" + ?(Выборка.СкладУСД, "true", "false") + "</isJointStore>";
		//ВиртуальныйСклад = ВиртуальныйСклад + "<isInherited>" + ?(Выборка.СкладРеорганизуемогоЛица, "true", "false") + "</isInherited>";
		//ВиртуальныйСклад = ВиртуальныйСклад + "<isRawMaterials>" + ?(Выборка.ПереработкаДавальческогоСырья, "true", "false") + "</isRawMaterials>";
		//ВиртуальныйСклад = ВиртуальныйСклад + "<isCooperativeStore>" + ?(Выборка.СкладДляЛизинга, "true", "false") + "</isCooperativeStore>";
		
				
		// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
		//Если НЕ (СчетчикВС%ПредельныйРазмерПакетаВС = 0 ИЛИ СчетчикВС = КоличествоВС) Тогда
		//	Продолжить;
		//КонецЕсли;				
		ВиртуальныйСклад = "<store>" + ВиртуальныйСклад + "</store>";
		ВиртуальныеСклады = ВиртуальныеСклады + ВиртуальныйСклад;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////////////
	// Создать и выполнить запрос к API ИС ЭСФ.
	
	ЗапросXML = ПолучитьМакет("ЗапросВСtaxpayerStoreCreateRequest").ПолучитьТекст();
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[storeList]", ВиртуальныеСклады);
	ОтветXML = ВыполнитьМетодВебСервисаВС(ЗапросXML, ИмяСервисаTaxpayerStoreService(), , ВерсияВС); 
	
	/////////////////////////////////////////////////////////////////////////////
	// Обработать результат запроса к API ИС ЭСФ.
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Если Найти(ВерсияВС, "5.0.0") <> 0 Тогда
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		Иначе
			ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		КонецЕсли;
		
		РезультатОтправкиПакета = Новый Соответствие;  
		Для Каждого ВС Из МассивВС Цикл
			РезультатСтруктура = Новый Структура;
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатСтруктура.Вставить("ВС", ВС);
			
			РезультатОтправкиПакета.Вставить(ВС.Наименование, РезультатСтруктура);
			
		КонецЦикла;
		
		acceptedList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.taxpayerStoreCreateResponse, "acceptedList", Неопределено);	
		deniedList  = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.taxpayerStoreCreateResponse, "deniedList", Неопределено);		
		
		Если acceptedList <> Неопределено И acceptedList.Свойства().Количество() <> 0 Тогда	
			
			storeList = ЭСФСервер.СписокXDTOИзОбъектXDTO(acceptedList.store);
			Для  ИндексОшибки = 0 По storeList.Количество() - 1 Цикл
				store = storeList.Получить(ИндексОшибки);
				
				Идентификатор = ЭСФСервер.ПолучитьСвойство(store, "id", "");
				Наименование =  ЭСФСервер.ПолучитьСвойство(store, "name", "");
				ВССтруктура = РезультатОтправкиПакета.Получить(Наименование);
				ВССтруктура.Идентификатор = Число(Идентификатор);
				
				errors = ЭСФСервер.ПолучитьСвойство(store, "errors", Неопределено);
				Если errors <> Неопределено Тогда
					errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
					ВС.Значение.Ошибки = Новый Массив;
					Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
						error = errorsList.Получить(ИндексОшибки);
						ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
						// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
						// с сервера на клиент приводи к ошибке мутабельного значения.
						Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
							ОшибкаПоле = "";
						КонецЕсли;
						ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
						Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
						ВС.Значение.Ошибки.Добавить(Ошибка);
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		Конецесли;
		
		Если deniedList <> Неопределено И deniedList.Свойства().Количество() <> 0 Тогда	
			storeValidationResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(deniedList.storeValidationResult);
			
			Для  ИндексОшибки = 0 По storeValidationResultList.Количество() - 1 Цикл
				storeValidationResult = storeValidationResultList.Получить(ИндексОшибки);
				
				Наименование =  ЭСФСервер.ПолучитьСвойство(storeValidationResult, "name", "");
				ВССтруктура = РезультатОтправкиПакета.Получить(Наименование);
				
				
				errorList = ЭСФСервер.ПолучитьСвойство(storeValidationResult, "errorList", Неопределено);
				errorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errorList);
				Если errorList <> Неопределено Тогда		
					ВССтруктура.Ошибки = Новый Массив;
					
					Для ИндексОшибки3 = 0 По errorList.Количество() - 1 Цикл
						error = errorList.Получить(ИндексОшибки3);
						
						ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
						// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
						// с сервера на клиент приводи к ошибке мутабельного значения.
						Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
							ОшибкаПоле = "";
						КонецЕсли;
						Если error.Свойства().Получить("text") <> Неопределено Тогда
							ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
						ИначеЕсли
							error.Свойства().Получить("errorCode") <> Неопределено Тогда
							ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
							ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
							ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
							ОшибкаТекст = ОшибкаТекст.ТекстИБ;
						Иначе
							ОшибкаТекст = "";
						КонецЕсли;
						Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
						ВССтруктура.Ошибки.Добавить(Ошибка);
					КонецЦикла;	
				КонецЕсли;		
			КонецЦикла;
		Конецесли;
		
		ЗаписатьИзмененияВиртуальныхСкладов(РезультатОтправкиПакета);
				
	Иначе
		
		ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'ОбменЭСФ.СоздатьВСПоПараметрам'"), 
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение НСтр("ru = 'При создании виртуального склада возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	ВыполнялосьОбращениеКСерверу = Истина;	
	
	ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	
КонецПроцедуры

#Область ЭлектронныеАВР

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ДОКУМЕНТА АВР.

Функция ПечатьАВР(МассивАВР, ОбъектыПечати = Неопределено) Экспорт
	
	Если ОбъектыПечати = Неопределено Тогда
		ОбъектыПечати = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК Ссылка,
	|	ЭлектронныйАктВыполненныхРабот.Номер КАК Номер,
	|	ЭлектронныйАктВыполненныхРабот.Дата КАК Дата,
	|	ЭлектронныйАктВыполненныхРабот.Идентификатор КАК Идентификатор,
	|	ЭлектронныйАктВыполненныхРабот.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ЭлектронныйАктВыполненныхРабот.КурсВалюты КАК ВалютаКурс,
	|	ЭлектронныйАктВыполненныхРабот.КодВалюты КАК КодВалюты,
	|	ЭлектронныйАктВыполненныхРабот.КурсВалюты КАК КурсВалюты,
	|	ЭлектронныйАктВыполненныхРабот.АВРДополнительныеСведения КАК АВРДополнительныеСведения,
	|	ЭлектронныйАктВыполненныхРабот.Статус КАК Статус,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПринятияСтатуса КАК ДатаПринятияСтатуса,
	|	ЭлектронныйАктВыполненныхРабот.ДатаВыполненияРабот КАК ДатаВыполненияРабот,
	|	ЭлектронныйАктВыполненныхРабот.ЭЦПОтправителя КАК ЭЦПОтправителя,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПодписиПолучателя КАК ДатаПодписиПолучателя,
	|	ЭлектронныйАктВыполненныхРабот.ДатаПодписиОтправителя КАК ДатаПодписиОтправителя,
	|	ЭлектронныйАктВыполненныхРабот.УполномоченныйСотрудникПолучателя КАК УполномоченныйСотрудникПолучателя,
	|	ЭлектронныйАктВыполненныхРабот.УполномоченныйСотрудник КАК УполномоченныйСотрудник,
	|	ЭлектронныйАктВыполненныхРабот.НомерДоговора КАК НомерДоговора,
	|	ЭлектронныйАктВыполненныхРабот.ДатаДоговора КАК ДатаДоговора,
	|	ЭлектронныйАктВыполненныхРабот.Договор КАК Договор,
	|	ЭлектронныйАктВыполненныхРабот.БезДоговора КАК БезДоговора,
	|	ЭлектронныйАктВыполненныхРабот.ЭЦППолучателя КАК ЭЦППолучателя,
	|	ЭлектронныйАктВыполненныхРабот.ТипПодписиОтправителя КАК ТипПодписиОтправителя,
	|	ЭлектронныйАктВыполненныхРабот.ТипПодписиПолучателя КАК ТипПодписиПолучателя,
	|	ЭлектронныйАктВыполненныхРабот.ИнформацияПолучатель КАК ИнформацияПолучатель,
	|	ЭлектронныйАктВыполненныхРабот.ИнформацияОтправитель КАК ИнформацияОтправитель
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРабот.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйАктВыполненныхРаботПоставщики.Ссылка КАК Ссылка,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.НомерСтроки КАК НомерСтроки,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.ПоставщикИдентификатор КАК ПоставщикИдентификатор,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.Адрес КАК Адрес,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.КБе КАК КБе,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.ИИК КАК ИИК,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.БИК КАК БИК,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.НаименованиеБанка КАК НаименованиеБанка,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.ДополнительныеСведения КАК ДополнительныеСведения,
	|	ЭлектронныйАктВыполненныхРаботПоставщики.БИНФилиала КАК БИНФилиала
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот.Поставщики КАК ЭлектронныйАктВыполненныхРаботПоставщики
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРаботПоставщики.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйАктВыполненныхРаботПолучатели.Ссылка КАК Ссылка,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.НомерСтроки КАК НомерСтроки,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.ПолучательИдентификатор КАК ПолучательИдентификатор,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.ПолучательНаименование КАК ПолучательНаименование,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.Адрес КАК Адрес,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.Нерезидент КАК Нерезидент,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.ДополнительныеСведения КАК ДополнительныеСведения,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.БИНФилиала КАК БИНФилиала,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.КБе КАК КБе,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.ИИК КАК ИИК,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.БИК КАК БИК,
	|	ЭлектронныйАктВыполненныхРаботПолучатели.НаименованиеБанка КАК НаименованиеБанка
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот.Получатели КАК ЭлектронныйАктВыполненныхРаботПолучатели
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРаботПолучатели.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка КАК Ссылка,
	|	ЭлектронныйАктВыполненныхРаботУслуги.НомерСтроки КАК НомерСтроки,
	|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ЭлектронныйАктВыполненныхРаботУслуги.Количество КАК Количество,
	|	ЭлектронныйАктВыполненныхРаботУслуги.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ЭлектронныйАктВыполненныхРаботУслуги.БезНДС
	|			ТОГДА &ТекстБезНДС
	|		ИНАЧЕ ЭлектронныйАктВыполненныхРаботУслуги.СтавкаНДСЧисло
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА ЭлектронныйАктВыполненныхРаботУслуги.БезНДС
	|			ТОГДА """"
	|		ИНАЧЕ ""%""
	|	КОНЕЦ КАК ШаблонПроцент,
	|	ЭлектронныйАктВыполненныхРаботУслуги.БезНДС КАК БезНДС,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СуммаНДС КАК СуммаНДС,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СтоимостьБезУчетаКосвенныхНалогов КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ЭлектронныйАктВыполненныхРаботУслуги.РазмерОборота КАК РазмерОборота,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СтоимостьСУчетомКосвенныхНалогов КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ЭлектронныйАктВыполненныхРаботУслуги.ДополнительныеСведения КАК ДополнительныеСведения,
	|	ЭлектронныйАктВыполненныхРаботУслуги.УслугаНаименование КАК УслугаНаименование
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот.Услуги КАК ЭлектронныйАктВыполненныхРаботУслуги
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаНДС),
	|	СУММА(СтоимостьБезУчетаКосвенныхНалогов),
	|	СУММА(РазмерОборота),
	|	СУММА(СтоимостьСУчетомКосвенныхНалогов)
	|ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивАВР);
	Запрос.УстановитьПараметр("ТекстБезНДС", НСтр("ru = 'Без НДС'"));
	
	Результат = Запрос.ВыполнитьПакет();
	ДанныеШапкиПоДокументам = Результат[0].Выбрать();
	ДанныеПоставщикиПоДокументам = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПолучателиПоДокументам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеТоварыПоДокументам = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивОбластей = Новый Массив;
	СтруктураОбластей = Новый Структура;	
	Макет = АВРСерверПереопределяемый.МакетПечатнойФормы("Обработка.ОбменЭСФ.ПФ_MXL_АВР");
	
	//Области Макет
	СтруктураОбластей.Вставить("ОбластьШапкаАВР", Макет.ПолучитьОбласть("ШапкаАВР_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделA", Макет.ПолучитьОбласть("РазделA_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделBC", Макет.ПолучитьОбласть("РазделBC_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделDE", Макет.ПолучитьОбласть("РазделDE_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделF", Макет.ПолучитьОбласть("РазделF_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделG", Макет.ПолучитьОбласть("РазделG_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделGHШапкаТаблица", Макет.ПолучитьОбласть("РазделGHШапкаТаблица_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделGHСтрокаТаблица", Макет.ПолучитьОбласть("РазделGHСтрокаТаблица_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделGHПодвалТаблица", Макет.ПолучитьОбласть("РазделGHПодвалТаблица_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделH", Макет.ПолучитьОбласть("РазделH_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделI", Макет.ПолучитьОбласть("РазделI_Версия1"));
	СтруктураОбластей.Вставить("ОбластьРазделJ", Макет.ПолучитьОбласть("РазделJ_Версия1"));	
	СтруктураОбластей.Вставить("ОбластьРазделK", Макет.ПолучитьОбласть("РазделK_Версия1"));
	
	МассивОбластей.Добавить(СтруктураОбластей);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭлектронныйАктВыполненныхРабот";
	
	Пока ДанныеШапкиПоДокументам.Следующий() Цикл
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		ОбластиМакета = МассивОбластей[МассивОбластей.Количество()-1];
		
		ДанныеПоставщикиПоДокументам.Сбросить();
		ДанныеПолучателиПоДокументам.Сбросить();
		ДанныеТоварыПоДокументам.Сбросить(); 	
		
		ТабДокумент.Вывести(ОбластиМакета.ОбластьШапкаАВР);
		//Раздел А	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделA.Параметры, ДанныеШапкиПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделA);
		
		//Раздел В. Реквизиты исполнителя (поставщика)
		//Раздел С. Банковские реквизиты исполнителя (поставщика)
		Если ДанныеПоставщикиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Тогда
			ДанныеПоставщикиПоДокументу = ДанныеПоставщикиПоДокументам.Выбрать();
			Пока ДанныеПоставщикиПоДокументу.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделBC.Параметры, ДанныеПоставщикиПоДокументу);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделBC);
			КонецЦикла;
		КонецЕсли;
		
		//Раздел D. Реквизиты заказчика (получателя)
		//Раздел E. Банковские реквизиты заказчика (получателя)	
		Пока ДанныеПолучателиПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
			ДанныеПолучателиПоДокументу = ДанныеПолучателиПоДокументам.Выбрать();
			Пока ДанныеПолучателиПоДокументу.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделDE.Параметры, ДанныеПолучателиПоДокументу);
				Если ДанныеПолучателиПоДокументу.Нерезидент Тогда	
					ОбластиМакета.ОбластьРазделDE.Параметры.Нерезидент = "v";
				Иначе
					ОбластиМакета.ОбластьРазделDE.Параметры.Нерезидент = " ";
				КонецЕсли;
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделDE);
			КонецЦикла;
		КонецЦикла;
		
		//Раздел F. Договор (контракт)
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделF.Параметры, ДанныеШапкиПоДокументам);
		Если ЗначениеЗаполнено(ДанныеШапкиПоДокументам.НомерДоговора) ИЛИ ЗначениеЗаполнено(ДанныеШапкиПоДокументам.ДатаДоговора) Тогда	
			ОбластиМакета.ОбластьРазделF.Параметры.Договор = "v";
			ОбластиМакета.ОбластьРазделF.Параметры.БезДоговора = "";
		Иначе
			ОбластиМакета.ОбластьРазделF.Параметры.БезДоговора = "v";
			ОбластиМакета.ОбластьРазделF.Параметры.Договор = "";
		КонецЕсли;
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделF);
		
		//Раздел G
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделG.Параметры, ДанныеШапкиПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделG);
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHШапкаТаблица.Параметры, ДанныеШапкиПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHШапкаТаблица);
		
		// Данные товаров по документу.
		Пока ДанныеТоварыПоДокументам.НайтиСледующий(ДанныеШапкиПоДокументам.Ссылка) Цикл
			ДанныеТоварыПоДокументу = ДанныеТоварыПоДокументам.Выбрать();
			Пока ДанныеТоварыПоДокументу.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHСтрокаТаблица.Параметры, ДанныеТоварыПоДокументу);
				ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHСтрокаТаблица);
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделGHПодвалТаблица.Параметры, ДанныеТоварыПоДокументам);
			ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделGHПодвалТаблица);				
		КонецЦикла;
		
		//Раздел H. Дополнительные сведения/Сведения об отчете о научных исследованиях,
		//маркетинговых, консультационных и прочих услугах (дата, номер, количество страниц) (при их наличии)
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделH.Параметры, ДанныеШапкиПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделH);
		
		//Раздел I. Сведения по ЭЦП исполнителя (поставщика)	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделI.Параметры, ДанныеШапкиПоДокументам);
		Если ДанныеШапкиПоДокументам.ТипПодписиОтправителя = Перечисления.ТипыПодписиЭСФ.ЮридическоеЛицо  Тогда	
			ОбластиМакета.ОбластьРазделI.Параметры.ЭЦПОтправителяЮрЛицо = ДанныеШапкиПоДокументам.ЭЦПОтправителя;
			ОбластиМакета.ОбластьРазделI.Параметры.ЭЦПОтправителя = "";
		Иначе
			ОбластиМакета.ОбластьРазделI.Параметры.ЭЦПОтправителяЮрЛицо = "";
			ОбластиМакета.ОбластьРазделI.Параметры.ЭЦПОтправителя = ДанныеШапкиПоДокументам.ЭЦПОтправителя;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделI);
		
		//Раздел J. Сведения по ЭЦП заказчика (получателя)	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделJ.Параметры, ДанныеШапкиПоДокументам);
		Если ДанныеШапкиПоДокументам.ТипПодписиПолучателя = Перечисления.ТипыПодписиЭСФ.ЮридическоеЛицо  Тогда	
			ОбластиМакета.ОбластьРазделJ.Параметры.ЭЦППолучателяЮрЛицо = ДанныеШапкиПоДокументам.ЭЦППолучателя;
			ОбластиМакета.ОбластьРазделJ.Параметры.ЭЦППолучателя = "";
		Иначе
			ОбластиМакета.ОбластьРазделJ.Параметры.ЭЦППолучателяЮрЛицо = "";
			ОбластиМакета.ОбластьРазделJ.Параметры.ЭЦППолучателя = ДанныеШапкиПоДокументам.ЭЦППолучателя;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделJ);
		
		//Раздел K. Текущий статус Акта выполненных работ				
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьРазделK.Параметры, ДанныеШапкиПоДокументам);
		ТабДокумент.Вывести(ОбластиМакета.ОбластьРазделK);
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеШапкиПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

#Область ОбработчикиСобытийМодуляОбъектаДокументаАВР

Процедура ДокументАВР_ОбработкаЗаполнения(ОбъектАВР, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("СтруктураДанных") Тогда
		ОснованиеДляЗаполнения = ДанныеЗаполнения;
	ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		ОснованиеДляЗаполнения = ДанныеЗаполнения.ДокументОснование;
	Иначе
		Возврат;
	КонецЕсли;
	
	АВРСервер.ЗаполнитьИсходящийАВР(ОснованиеДляЗаполнения,ОбъектАВР);
	
КонецПроцедуры

Процедура ДокументАВР_ПередЗаписью(ОбъектАВР, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ОбъектАВР.Состояние = АВРСервер.СостояниеАВР(ОбъектАВР);
	ОбъектАВР.Дата = НачалоДня(ОбъектАВР.Дата);
	ОбъектАВР.ИтогоРазмерОборота = ОбъектАВР.Услуги.Итог("РазмерОборота");
	ОбъектАВР.ИтогоСтоимостьБезУчетаКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьБезУчетаКосвенныхНалогов");
	ОбъектАВР.ИтогоСуммаНДС = ОбъектАВР.Услуги.Итог("СуммаНДС");
	ОбъектАВР.ИтогоСтоимостьСУчетомКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьСУчетомКосвенныхНалогов");
	
	Если НЕ ЗначениеЗаполнено(ОбъектАВР.Автор) Тогда
		ОбъектАВР.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
	Если ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		Если ОбъектАВР.Поставщики.Количество() > 0 Тогда
			ОбъектАВР.Контрагент = ОбъектАВР.Поставщики[0].Поставщик;
		КонецЕсли;
	Иначе
		Если ОбъектАВР.Получатели.Количество() > 0 Тогда
			ОбъектАВР.Контрагент = ОбъектАВР.Получатели[0].Получатель;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектАВР.ДокументОснование) Тогда
		Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
		Набор.Отбор.Основание.Установить(ОбъектАВР.ДокументОснование);
		
		Набор.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Процедура ЗаполнитьРеквизитыКонтрагентаАВР(Знач ОбъектАВР, Знач ПоставщикиСтрока) Экспорт
		
	АВРСерверПереопределяемый.ЗаполнитьРеквизитыКонтрагентаАВР(ОбъектАВР, ПоставщикиСтрока);
		
КонецПроцедуры

Функция НайтиДоговорыПоставкиПоДаннымАВР(Знач Объект, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	Возврат АВРСерверПереопределяемый.НайтиДоговорыПоставкиПоДаннымАВР(Объект, СтрокаКонтрагент, ИмяТаблицыКонтрагента);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА АВР

// См. АВРСервер.СоздатьИсходящиеAwp()
Процедура СоздатьИсходящиеAwp(
	Знач МассивАВР, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ,
	КоллекцияAwpXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	
	СоздатьИсходящиеAwp_ВерсияАПИ1(МассивАВР, 
				УстанавливатьПодпись, 
				ТипПодписиЭСФ, 
				КоллекцияAwpXML, 
				КоллекцияSignedContentXML,
				УполномоченныйСотрудник,
				ВерсияИСЭСФ);
	
	
КонецПроцедуры

// См. АВРСервер.СоздатьИсходящиеAwp()
Процедура СоздатьИсходящиеAwp_ВерсияАПИ1(
	Знач МассивАВР, 
	Знач УстанавливатьПодпись, 
	Знач ТипПодписиЭСФ, 
	КоллекцияAwpXML, 
	КоллекцияSignedContentXML,
	УполномоченныйСотрудник = Неопределено,
	ВерсияИСЭСФ) Экспорт
	
	КоллекцияAwpXML = Новый Соответствие;
	КоллекцияSignedContentXML = Новый Соответствие;
	
	Фабрика = ФабрикаАВР_XML_API_ЭЦП_Версия1();
	
	Для Каждого СсылкаАВР Из МассивАВР Цикл		
		
		// Чтобы при отправке АВР не выполнять запись дважды:
		// При создании АВР заполняются некоторые реквизиты АВР, но АВР не записывается.
		// При отправке АВР данные реквизиты заполняются теми же значениями, но ЭСФ уже записывается.
		// Подробнее см. заполнение и запись АВР в методе ОтправитьИсходящиеAWP().
		ОбъектАВР = СсылкаАВР.ПолучитьОбъект();
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			ОбъектАВР.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			ОбъектАВР.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		ОбъектАВР.ТипПодписи = ТипПодписиЭСФ;
		
		AwpXDTO = НовыйAwp(ОбъектАВР, Фабрика, "AwpV1", ВерсияИСЭСФ);
				
		AwpXML = АВРСервер.СтрокаXMLИзОбъектаXDTO(AwpXDTO, "awp", Фабрика);
		
		//Для отправки через API структура обернута в <invoiceBody> подписывается без верхних тегов
		Если УстанавливатьПодпись Тогда
			AwpHashXML = AwpXML;
			КоллекцияSignedContentXML.Вставить(СсылкаАВР, AwpHashXML);
			
			//Для отправки через API добавляем обертку <awpBody>
			AwpXML = "<awpBody><![CDATA[" + AwpXML + "]]></awpBody>";
			// Добавляем заготовку для подписи
			ТипПодписи = ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭСФ);
			AwpXML = "<awpInfo>" + AwpXML + "<version>AwpV1</version><signature>[%ЭЦП%]</signature><signatureType>"+ТипПодписи+"</signatureType><autoCalculating>[autoCalculating]</autoCalculating></awpInfo>";
			
			AwpXML = СтрЗаменить(AwpXML, "[autoCalculating]", "false");
		КонецЕсли;
		                                                    		
		КоллекцияAwpXML.Вставить(СсылкаАВР, AwpXML);		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ФабрикаАВР_XML_API_ЭЦП_Версия1()
	
	Если КэшированнаяФабрикаАВР_XML_API_ЭЦП_Версия2 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаAwp_XML_API_ЭЦП_Версия1");	
		ОбъектXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = АВРСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryAwpXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаАВР_XML_API_ЭЦП_Версия2 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаАВР_XML_API_ЭЦП_Версия2;
	
КонецФункции

Функция НовыйAwp(Знач АВР, Знач Фабрика, Знач ВерсияЭСФ = "InvoiceV2", ВерсияИСЭСФ)
	
	ПространствоИмен = "v1.awp";
		
	ТипAwp = Фабрика.Тип(ПространствоИмен, ВерсияЭСФ);
	Awp = Фабрика.Создать(ТипAwp);
	
	ЗаполнитьAwp(АВР, Фабрика, Awp, ВерсияЭСФ);
	
	Возврат Awp;
	
КонецФункции

Процедура ЗаполнитьAwp(Знач АВР, Знач Фабрика, Awp, ВерсияЭСФ)
	
	ЗаполнитьAwp_Версия1(АВР, Фабрика, Awp);	
	
КонецПроцедуры

Процедура ЗаполнитьAwp_Версия1(Знач АВР, Знач Фабрика, Awp) //Отправка АВР
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел А. Общий раздел.
	
	#Область ОбщийРаздел
	Если НЕ ПустаяСтрока(АВР.АВРДополнительныеСведения) Тогда
		Awp.AdditionalInfo = АВР.АВРДополнительныеСведения;
	КонецЕсли;
	
	Awp.date = Формат(АВР.Дата, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	Awp.number = АВР.Номер;
	Awp.performedDate = Формат(АВР.ДатаВыполненияРабот, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	
	
	// Заполнить реквизиты связанного договора
			
		contract = ЭСФСервер.НовоеСвойствоОбъектаXDTO(Awp, "contract", Фабрика);
		Если НЕ АВР.БезДоговора Тогда
		contract.isContract = "true";
		
		Если ЗначениеЗаполнено(АВР.ДатаДоговора) Тогда
		contract.date = Формат(АВР.ДатаДоговора, "ДФ=dd.MM.yyyy; ДП=01.01.0001");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АВР.НомерДоговора) Тогда
		contract.number = АВР.НомерДоговора;
		КонецЕсли;

		contract.isContract = "true";
		Если ЗначениеЗаполнено(АВР.РегистрационныйНомерДоговора) Тогда
		contract.registrationNumber = АВР.РегистрационныйНомерДоговора;
		КонецЕсли;

	Иначе
		contract.isContract = "false";
	КонецЕсли;
	
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел B. Реквизиты поставщика.
	
	#Область РеквизитыПоставщика
	senders = ЭСФСервер.НовоеСвойствоОбъектаXDTO(awp, "senders", Фабрика);
		
	Для Каждого ПоставщикиСтрока Из АВР.Поставщики Цикл
		
		sender = АВРСервер.НовыйЭлементСпискаXDTO(senders.sender, Фабрика);
		
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.ДополнительныеСведения) Тогда
			sender.AdditionalInfo = ПоставщикиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.Адрес) Тогда
			sender.address = СокрЛП(ПоставщикиСтрока.Адрес);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.БИНФилиала) Тогда
			sender.branchTin = СокрЛП(ПоставщикиСтрока.БИНФилиала);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.ПоставщикИдентификатор) Тогда
			sender.tin = СокрЛП(ПоставщикиСтрока.ПоставщикИдентификатор);
		КонецЕсли;
				
		Если НЕ ПустаяСтрока(ПоставщикиСтрока.НомерСвидетельстваПоНДС)
		   И НЕ ПустаяСтрока(ПоставщикиСтрока.СерияСвидетельстваПоНДС) Тогда
			sender.certificateNum = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			sender.certificateSeries = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
		КонецЕсли;

		sender.name = ПоставщикиСтрока.ПоставщикНаименование;

		bankDetails = АВРСервер.НовоеСвойствоОбъектаXDTO(sender, "bankDetails", Фабрика);
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.КБе) Тогда
			bankDetails.kbe = СокрЛП(ПоставщикиСтрока.КБе);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.НаименованиеБанка) Тогда
			bankDetails.bank = СокрЛП(ПоставщикиСтрока.НаименованиеБанка);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПоставщикиСтрока.ИИК) Тогда
			bankDetails.iik = СокрЛП(ПоставщикиСтрока.ИИК);
		КонецЕсли;

		Если НЕ ПустаяСтрока (ПоставщикиСтрока.БИК) Тогда
			bankDetails.bik = СокрЛП(ПоставщикиСтрока.БИК);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ТипРегистрации) Тогда
			sender.registrationType = АВРКлиентСервер.ТипРегистрацииНПАВРИСЭСФ(ПоставщикиСтрока.ТипРегистрации); // Категория поставщик(В)
		КонецЕсли;
		
	КонецЦикла;
	#КонецОбласти 
	
	//////////////////////////////////////////////////////////////////////////////
	// Раздел C. Реквизиты получателя.
	
	#Область РеквизитыПолучателя
	recipients = ЭСФСервер.НовоеСвойствоОбъектаXDTO(awp, "recipients", Фабрика);
		
	Для Каждого ПолучателиСтрока Из АВР.Получатели Цикл
		
		recipient = АВРСервер.НовыйЭлементСпискаXDTO(recipients.recipient, Фабрика);
		recipient.nonResident = ПолучателиСтрока.Нерезидент;
		Если НЕ ПустаяСтрока(ПолучателиСтрока.ДополнительныеСведения) Тогда
			recipient.AdditionalInfo = ПолучателиСтрока.ДополнительныеСведения;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.Адрес) Тогда
			recipient.address = СокрЛП(ПолучателиСтрока.Адрес);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.БИНФилиала) Тогда
			recipient.branchTin = СокрЛП(ПолучателиСтрока.БИНФилиала);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.ПолучательИдентификатор) Тогда
			recipient.tin = СокрЛП(ПолучателиСтрока.ПолучательИдентификатор);
		КонецЕсли;
				
		recipient.name = ПолучателиСтрока.ПолучательНаименование;

		bankDetails = АВРСервер.НовоеСвойствоОбъектаXDTO(recipient, "bankDetails", Фабрика);
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.КБе) Тогда
			bankDetails.kbe = СокрЛП(ПолучателиСтрока.КБе);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.НаименованиеБанка) Тогда
			bankDetails.bank = СокрЛП(ПолучателиСтрока.НаименованиеБанка);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока (ПолучателиСтрока.ИИК) Тогда
			bankDetails.iik = СокрЛП(ПолучателиСтрока.ИИК);
		КонецЕсли;

		Если НЕ ПустаяСтрока (ПолучателиСтрока.БИК) Тогда
			bankDetails.bik = СокрЛП(ПолучателиСтрока.БИК);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолучателиСтрока.ТипРегистрации) Тогда
			recipient.registrationType = АВРКлиентСервер.ТипРегистрацииНПАВРИСЭСФ(ПолучателиСтрока.ТипРегистрации); // Категория получатель(C)
		КонецЕсли;
				
	КонецЦикла;

	#КонецОбласти 

		
	//////////////////////////////////////////////////////////////////////////////
	// Раздел G. Данные по товарам (работам, услугам).
	
	#Область ДанныеПоТоварам
	
	worksPerformed = АВРСервер.НовоеСвойствоОбъектаXDTO(awp, "worksPerformed", Фабрика);
	works = АВРСервер.НовоеСвойствоОбъектаXDTO(worksPerformed, "works", Фабрика);
	Для Каждого УслугиСтрока Из АВР.Услуги Цикл
		
		work = АВРСервер.НовыйЭлементСпискаXDTO(works.work, Фабрика);
		
		work.name = СокрЛП(УслугиСтрока.УслугаНаименование);
		
		Если НЕ ПустаяСтрока(УслугиСтрока.ДополнительныеСведения) Тогда
			work.additionalInfo = СокрЛП(УслугиСтрока.ДополнительныеСведения);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(УслугиСтрока.ЕдиницаИзмеренияКод) Тогда
			work.measureUnitCode = СокрЛП(УслугиСтрока.ЕдиницаИзмеренияКод);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(УслугиСтрока.СуммаНДС) Тогда
			work.ndsAmount = УслугиСтрока.СуммаНДС;
		КонецЕсли;
		
		Если АВР.Поставщики.Количество() <> 0 И НЕ УслугиСтрока.БезНДС Тогда
			СтавкаНДС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(УслугиСтрока.СтавкаНДС, "Ставка");
			work.ndsRate = СтавкаНДС;
		КонецЕсли;
	
		Если НЕ ПустаяСтрока(УслугиСтрока.Количество) Тогда
			work.quantity = УслугиСтрока.Количество;
		КонецЕсли;

		 work.sumWithTax = УслугиСтрока.СтоимостьСУчетомКосвенныхНалогов;
		 
		 work.sumWithoutTax = УслугиСтрока.СтоимостьБезУчетаКосвенныхНалогов;
		 
		 work.turnoverSize = УслугиСтрока.РазмерОборота;
		 
		 work.unitPriceWithoutTax = УслугиСтрока.Цена;

	КонецЦикла;
	
	worksPerformed.currencyCode = АВР.КодВалюты;
	
	Если АВР.КодВалюты <> "KZT" Тогда
		worksPerformed.rate = АВР.КурсВалюты;
	КонецЕсли;
	
	worksPerformed.totalNdsAmount = АВР.ИтогоСуммаНДС;
	worksPerformed.totalSumWithTax    = АВР.ИтогоСтоимостьСУчетомКосвенныхНалогов;
	worksPerformed.totalSumWithoutTax    = АВР.ИтогоСтоимостьБезУчетаКосвенныхНалогов;
	worksPerformed.totalTurnoverSize       = АВР.ИтогоРазмерОборота;	
	
	#КонецОбласти
	
		
КонецПроцедуры

Функция ОтправитьИсходящиеAwp(ВерсияИСЭСФ, Знач КоллекцияAwpXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	ПредельныйРазмерПакетаИсходящихAwp = 250;
	ОбщийРазмерКолекцииНаОтправку = КоллекцияAwpXML.Количество();
	КоличествоПакетов = ОбщийРазмерКолекцииНаОтправку/ПредельныйРазмерПакетаИсходящихAwp;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеAwp", "Информация", , , "К отправке: " + СокрЛП(ОбщийРазмерКолекцииНаОтправку));

	РезультатОтправки = Новый Соответствие;
	// Сформируем пакеты на отправку с учетом предельного размера пакета
	СчетчикПакета = 0;
	НомерПакета = 0;
	КоллекцияAwpXMLПакета = новый Соответствие;
	Для Каждого ЭлементКоллекции Из КоллекцияAwpXML Цикл		
		СчетчикПакета = СчетчикПакета + 1;
		КоллекцияAwpXMLПакета.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		// Если это предельный размер пакета, то отправляем его и формируем новый
		Если (СчетчикПакета = ПредельныйРазмерПакетаИсходящихAwp) ИЛИ (СчетчикПакета = ОбщийРазмерКолекцииНаОтправку) Тогда
			НомерПакета = НомерПакета + 1;
			
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Происходит отправка пакета электронных актов выполненных работ %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);	
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();
			
			РезультатОтправкиПакета = ОтправитьПакетИсходящихAwp(ВерсияИСЭСФ, КоллекцияAwpXMLПакета, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
			КоллекцияAwpXMLПакета.Очистить();
			ДополнитьРезультатОтправкиДаннымиПакета(РезультатОтправки, РезультатОтправкиПакета);
					
			// уменьшим количество оставшихся документов
			ОбщийРазмерКолекцииНаОтправку = ОбщийРазмерКолекцииНаОтправку - СчетчикПакета;
			СчетчикПакета = 0;
		КонецЕсли;		
		
	КонецЦикла;
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеAwp", "Информация", , , "Отправка завершена");
	// Обновим статусы отправленных ЭСФ, после завершения отправки всех пакетов
	ОбновитьДокументыАВРПослеОтправки(РезультатОтправки, ПрофильИСЭСФ, , ВерсияИСЭСФ);
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ОбменЭСФ.ОтправитьИсходящиеAwp", "Информация", , , "Обновлены статусы отправленных документов");
			
	Возврат РезультатОтправки;
	
КонецФункции

Функция ОтправитьПакетИсходящихAwp(ВерсияИСЭСФ, Знач КоллекцияAwpXMLПакета, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
		
	Если ИдентификаторСессии = Неопределено Тогда
		ТекстОшибки = "";
		
		Попытка
			ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗакрытьСессию = Истина;		
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	AwpSet = "";
	Для Каждого ЭлементКоллекции Из КоллекцияAwpXMLПакета Цикл
		AwpXML = ЭлементКоллекции.Значение;
		ЭЦП = КоллекцияПодписей[ЭлементКоллекции.Ключ];
		AwpXML = СтрЗаменить(AwpXML, "[%ЭЦП%]", ЭЦП);		
		AwpSet = AwpSet + AwpXML + Символы.ПС; 		
	КонецЦикла;
	
	ОтветXML = ВыполнитьUploadAwpRequest(AwpSet, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияИСЭСФ);
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОтправитьИсходящиеAwp'"), 
			УровеньЖурналаРегистрации.Информация,,,
			"Отправлен пакет АВР");
			
		РезультатОтправкиПакета = Новый Соответствие;                        		
		Для Каждого ЭлементКоллекции Из КоллекцияAwpXMLПакета Цикл
			AwpXML = ЭлементКоллекции.Значение;
			
			РезультатСтруктура = Новый Структура;
			
			// Удалим Секцию CDATA для разбора XML
			AwpXMLБезCDATA = СтрЗаменить(AwpXML, "<![CDATA[", "");
			AwpXMLБезCDATA = СтрЗаменить(AwpXMLБезCDATA, "]]>", "");			
			AwpXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(AwpXMLБезCDATA, ФабрикаXDTO);
			
			РезультатСтруктура.Вставить("Номер", AwpXDTO.awpBody.awp.number);
			РезультатСтруктура.Вставить("Дата", AwpXDTO.awpBody.awp.date);
			
			РезультатСтруктура.Вставить("ТипПодписи", ЭСФКлиентСервер.ТипПодписиИБ(AwpXDTO.signatureType));
			РезультатСтруктура.Вставить("ПринятИСЭСФ", Ложь);
			РезультатСтруктура.Вставить("Идентификатор", "");
			РезультатСтруктура.Вставить("Ошибки", Неопределено);
			РезультатОтправкиПакета.Вставить(ЭлементКоллекции.Ключ, РезультатСтруктура);
		КонецЦикла;
		
		ОтветXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		ЗаполнитьРезультатОтправкиИсходящихAwp(ОтветXDTO, "declinedList", РезультатОтправкиПакета);
		ЗаполнитьРезультатОтправкиИсходящихAwp(ОтветXDTO, "acceptedList", РезультатОтправкиПакета);
		
		ЗаписатьИзмененияАВРПослеОтправкиПакета(РезультатОтправкиПакета, КоллекцияПодписей, УполномоченныйСотрудник);
				
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОтправитьИсходящиеAwp'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		ВызватьИсключение НСтр("ru = 'При отправке исходящих АВР возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат РезультатОтправкиПакета;
	
КонецФункции

Процедура ОбновитьДокументыАВРПослеОтправки(Знач РезультатОтправки, Знач ПрофильИСЭСФ, Знач ИдентификаторСессии = Неопределено, Знач ВерсияИСЭСФ)
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	// Создать и заполнить массив идентификаторов отправленных ЭСФ. 
	МассивИдентификаторовАВР = Новый Массив;
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл
		
		Если ТипЗнч(ЭлементРезультата.Значение) = Тип("Структура") Тогда
			
			Если ЭлементРезультата.Значение.Свойство("Идентификатор") Тогда
				
				Идентификатор = ЭлементРезультата.Значение.Идентификатор;
				
				Если ЗначениеЗаполнено(Идентификатор) Тогда
					МассивИдентификаторовАВР.Добавить(Идентификатор);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// При отправке исправленных АВР, исправляемые АВР, а также их дополнительные АВР, 
	// автоматически становятся аннулированными в ИС ЭСФ.
	//
	// Для того, чтобы информация об аннулировании отобразилась в 1С, 
	// необходимо обновить статусы исправляемых АВР и их дополнительных АВР.
	Если ТипЗнч(ПрофильИСЭСФ.СтруктурнаяЕдиница) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	Иначе
		СтруктурнаяЕдиница = ПрофильИСЭСФ.СтруктурнаяЕдиница;	
	КонецЕсли;
	//ДополнитьМассивИдентификаторамиАннулируемыхЭСФ(СтруктурнаяЕдиница, МассивИдентификаторовЭСФ);
	
	ПредельныйРазмерПакетаАВР = 1000;
	КоличествоАВР = МассивИдентификаторовАВР.Количество();
	СчетчикАВР = 0;
	МассивИдентификаторовАВРДляОтправки = Новый Массив;
	
	Если КоличествоАВР > ПредельныйРазмерПакетаАВР Тогда
		
		Для Каждого СтрокаМассива Из МассивИдентификаторовАВР Цикл
			
			СчетчикАВР = СчетчикАВР + 1;
			
			МассивИдентификаторовАВРДляОтправки.Добавить(СтрокаМассива);
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикАВР%ПредельныйРазмерПакетаАВР = 0 ИЛИ СчетчикАВР = КоличествоАВР) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполнить обновление статусов отправленных АВР.
			ОбновитьСтатусыАВРПоИдентификаторам(МассивИдентификаторовАВРДляОтправки, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
			
			МассивИдентификаторовАВРДляОтправки.Очистить();
			
		КонецЦикла;
		
	Иначе

		// Выполнить обновление статусов отправленных АВР.
		ОбновитьСтатусыАВРПоИдентификаторам(МассивИдентификаторовАВР, Перечисления.НаправленияЭСФ.Исходящий, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЕсли;
	
	Если ЗакрытьСессию Тогда
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыполнитьUploadAwpRequest(Знач awpSetXML, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии, ВерсияИСЭСФ)
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросUploadAwp_Версия1").ПолучитьТекст();
	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[x509Certificate]", ОткрытыйКлючЭЦП);	
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "[AwpSet]", awpSetXML);
	
	ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаUploadAwpService(),,ВерсияИСЭСФ); 	
	
	Если ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда		
		ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
		ЗапросXML = СтрЗаменить(ШаблонЗапроса, "[sessionId]", ИдентификаторСессии);
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаUploadAwpService(),,ВерсияИСЭСФ); 
	КонецЕсли;
	
	Возврат ОтветXML;
	
КонецФункции

Процедура ЗаполнитьРезультатОтправкиИсходящихAwp(Знач ОтветXDTO, Знач ИмяЭлемента, Результат)
	
	resultSet = ОтветXDTO.Body.awpUploadResponse[ИмяЭлемента];
	awpUploadResult = ЭСФСервер.ПолучитьСвойство(resultSet, "awpUploadResult", Неопределено);	
	
	Если awpUploadResult = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	awpUploadResult = ЭСФСервер.СписокXDTOИзОбъектXDTO(awpUploadResult);
	
	Если ИмяЭлемента = "acceptedList"  Тогда
		
		Для Индекс = 0 По awpUploadResult.Количество() - 1 Цикл
			
			standardResponse = awpUploadResult.Получить(Индекс);
			
			Для Каждого ЭлементРезультата Из Результат Цикл
				Если ЭлементРезультата.Значение.Номер = standardResponse.number 
					
					И ЭлементРезультата.Значение.Дата = standardResponse.date Тогда
					
					ЭлементРезультата.Значение.ПринятИСЭСФ = ?(ИмяЭлемента = "acceptedList", Истина, Ложь);
					ЭлементРезультата.Значение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "awpId", "");
					
					errors = ЭСФСервер.ПолучитьСвойство(standardResponse, "errors", Неопределено);
					Если errors <> Неопределено Тогда
						errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors.error);
						ЭлементРезультата.Значение.Ошибки = Новый Массив;
						Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
							error = errorsList.Получить(ИндексОшибки);
							ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
							// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
							// с сервера на клиент приводи к ошибке мутабельного значения.
							Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
								ОшибкаПоле = "";
							КонецЕсли;
							ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
							Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
							ЭлементРезультата.Значение.Ошибки.Добавить(Ошибка);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТаблицаАВР = Новый ТаблицаЗначений;
		ТаблицаАВР.Колонки.Добавить("Ссылка");
		ТаблицаАВР.Колонки.Добавить("Структура");
		
		Для Каждого ЭлементРезультата Из Результат Цикл
			НоваяСтрока = ТаблицаАВР.Добавить();
			НоваяСтрока.Ссылка = ЭлементРезультата.Ключ;
			НоваяСтрока.Структура = ЭлементРезультата.Значение;
		КонецЦикла;
		
		Для Индекс = 0 По awpUploadResult.Количество() - 1 Цикл
			
			standardResponse = awpUploadResult.Получить(Индекс);
			ЭлементТаблицыАВР = ТаблицаАВР[Индекс] ;
			ЭлементРезультатаЗначение = Результат.Получить(ЭлементТаблицыАВР.Ссылка);
			ЭлементРезультатаЗначение.ПринятИСЭСФ = ?(ИмяЭлемента = "acceptedList", Истина, Ложь);
			ЭлементРезультатаЗначение.Идентификатор = ЭСФСервер.ПолучитьСвойство(standardResponse, "awpId", "");
			
			errorlist = ЭСФСервер.ПолучитьСвойство(standardResponse, "errorlist", Неопределено);
			Если errorlist <> Неопределено Тогда
				errorsList = ЭСФСервер.СписокXDTOИзОбъектXDTO(errorlist.error);
				ЭлементРезультатаЗначение.Ошибки = Новый Массив;
				Для ИндексОшибки = 0 По errorsList.Количество() - 1 Цикл
					error = errorsList.Получить(ИндексОшибки);
					ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
					// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
					// с сервера на клиент приводи к ошибке мутабельного значения.
					Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
						ОшибкаПоле = "";
					КонецЕсли;
					ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
					Ошибка = Новый Структура("Поле, Текст", ОшибкаПоле, ОшибкаТекст);
					ЭлементРезультатаЗначение.Ошибки.Добавить(Ошибка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБНОВИТЬ АВР ИЗ ИС ЭСФ

Процедура ОбновитьДокументыАВРИзИСЭСФ(Знач МассивАВР, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбновитьДокументыАВРПоИдентификатору(МассивАВР, ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
		
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыАВРИзИСЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДокументыАВРПоИдентификатору(Знач МассивАВР, Знач ПрофильИСЭСФ, ВерсияИСЭСФ) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаAwpInfo = ФабрикаAwpInfo_Версия1(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			
	Если МассивАВР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредельныйРазмерПакетаАВР = 1000;
	ВыполнялосьОбращениеКСерверу = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыАВР.Ссылка,
	|	ДокументыАВР.Идентификатор,
	|	ДокументыАВР.Направление КАК Направление
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК ДокументыАВР
	|ГДЕ
	|	ДокументыАВР.Ссылка В(&МассивАВР)
	|	И НЕ ДокументыАВР.Идентификатор = """"
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивАВР", МассивАВР);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл
		
		Выборка = ВыборкаНаправление.Выбрать();
		
		СписокИдентификаторов = "";
		
		КоличествоАВР = Выборка.Количество();
		
		СчетчикАВР = 0;
		
		МассивИдентификаторовНайденныхАВР = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			// считаем общее количество АВР
			СчетчикАВР = СчетчикАВР + 1;
			
			Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
				
				СписокИдентификаторов = СписокИдентификаторов + "<id>" + Выборка.Идентификатор + "</id>";
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""[АВР]"" не удалось обновить из ИС ЭСФ, так как в документе не заполнен реквизит ""Идентификатор"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(Выборка.Ссылка));
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикАВР%ПредельныйРазмерПакетаАВР = 0 ИЛИ СчетчикАВР = КоличествоАВР) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СписокИдентификаторов) Тогда
				
				/////////////////////////////////////////////////////////////////////////////
				// Создать и выполнить запрос к API ИС ЭСФ.
				
				ЗапросXML = ПолучитьМакет("ЗапросQueryAwpById").ПолучитьТекст();
				ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
				ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", СписокИдентификаторов);
				ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаAwpService(), , ВерсияИСЭСФ);
				
				
				/////////////////////////////////////////////////////////////////////////////
				// Обработать результат запроса к API ИС ЭСФ.
				
				ИнформацияОбОшибке = Неопределено;
				Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
					
					ОтветXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаAwpInfo_Версия1); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
					
					AwpInfoList = ОтветXDTO.Body.awpQueryByIdResponse.AwpInfoList;
					AwpInfoList = ЭСФСервер.ПолучитьСвойство(AwpInfoList, "AwpInfo", Неопределено); 
					
					Если AwpInfoList <> Неопределено Тогда
						
						AwpInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(AwpInfoList);
						СоздатьОбновитьПолучаемыеАВР(AwpInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
						
						//////////////////////////////////////////////////////////////////////////
						// Сообщить пользователю, если не удалось найти АВР по идентификатору.
						МассивИдентификаторовОшибочныхАВР = Новый Массив;
						// Создать и заполнить массив идентификаторов АВР, которые удалось найти в ИС ЭСФ.
						Для Каждого AwpInfo Из AwpInfoList Цикл
							ИдентификаторАВР = ЭСФСервер.ПолучитьСвойство(AwpInfo, "AwpId", "");
							Если ЗначениеЗаполнено(ИдентификаторАВР) Тогда
								МассивИдентификаторовНайденныхАВР.Добавить(ИдентификаторАВР);
							КонецЕсли;
							СтатусАВР = ЭСФСервер.ПолучитьСвойство(AwpInfo, "status", "");
							Если СтатусАВР = Перечисления.СтатусыАВР.Ошибочный Тогда
								МассивИдентификаторовОшибочныхАВР.Добавить(ИдентификаторАВР);
							КонецЕсли;
						КонецЦикла;
						
						//Получим ошибки ошибочных АВР.
						Если МассивИдентификаторовОшибочныхАВР.Количество() > 0 Тогда
							РезультатОшибочныхАВР = ПолучитьОшибкиАВРПоИдентификаторам(МассивИдентификаторовОшибочныхАВР, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
							Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхАВР);
							
							// Обновить документы АВР.
							ОтразитьИзмененияСтатусовАВР(Результат, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыАВРПоИдентификатору'"), 
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ВызватьИсключение НСтр("ru = 'При обновлении АВР по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
					
				КонецЕсли;
				
				ВыполнялосьОбращениеКСерверу = Истина;
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			СписокИдентификаторов = "";
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых АВР, а также их дополнительных АВР.
		
		Если ВыполнялосьОбращениеКСерверу Тогда
			
			// Сообщить пользователю, если не удалось найти АВР по идентификатору.
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Идентификатор) Тогда
					Если МассивИдентификаторовНайденныхАВР.Найти(Выборка.Идентификатор) = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Документ ""[АВР]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден АВР с идентификатором: ""[Идентификатор]"".'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(Выборка.Ссылка));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Идентификатор]", Выборка.Идентификатор);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

// Получает номера и даты из МассивЭСФ,
// находит в ИС ЭСФ, ЭСФ с такими номерами и датами,
// обновляет в ИБ ЭСФ, по данным ИС ЭСФ.
//
// Если не удается найти в ИС ЭСФ документы с такими номерами и датами, 
// то показывается сообщение пользователю. 
//
// Параметры:
//  МассивЭСФ - Массив - Может содержать входящие и исходящие ЭСФ,
//   все ЭСФ в МассивЭСФ принадлежат только одной организации.
//
Функция ОбновитьДокументыАВРПоНомеруИДате(Знач МассивЭСФ, Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Если ВерсияИСЭСФ = Неопределено Тогда
		ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
		ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	КонецЕсли;	

	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаInvoiceInfo = ФабрикаInvoiceInfo_Версия2(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	Если МассивЭСФ.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
	ПредельныйРазмерПакетаЭСФ = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыЭСФ.Направление КАК Направление,
	|	ДокументыЭСФ.Ссылка,
	|	ДокументыЭСФ.Номер,
	|	ДокументыЭСФ.Дата,
	|	ДокументыЭСФ.Вид,
	|	ДокументыЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ДокументыЭСФ
	|ГДЕ
	|	ДокументыЭСФ.Ссылка В(&МассивЭСФ)
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	ВыборкаНаправление = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНаправление.Следующий() Цикл

		МассивИсправленныхЭСФ = Новый Массив;
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и заполнить массив ключей ЭСФ.
		
		// Ключ ЭСФ = Номер ЭСФ + Дата ЭСФ.
		МассивКлючейЭСФ = Новый Массив;		
		
		// Создать массив отсутствующих ЭСФ, который в начале содержит все ЭСФ из МассивКлючейЭСФ.
		// При обработке результата из МассивОтсутствующихЭСФ исключаются ЭСФ, которые есть в ИС ЭСФ.
		МассивОтсутствующихЭСФ = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаНаправление.Выбрать();
		
		КоличествоЭСФ = ВыборкаДетальныеЗаписи.Количество();
		СчетчикЭСФ 	  = 0;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СчетчикЭСФ = СчетчикЭСФ + 1;
			
			КлючЭСФ = Новый Структура;
			КлючЭСФ.Вставить("Номер", ВыборкаДетальныеЗаписи.Номер);
			КлючЭСФ.Вставить("Дата", ВыборкаДетальныеЗаписи.Дата);
			КлючЭСФ.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			КлючЭСФ.Вставить("Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
						
			МассивКлючейЭСФ.Добавить(КлючЭСФ);
			
			Если ВыборкаДетальныеЗаписи.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
				МассивИсправленныхЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЕсли;
			
			// Пакет обновляем, в случае если он кратен предельному размеру, либо равен последнему элементу пакета
			Если НЕ (СчетчикЭСФ%ПредельныйРазмерПакетаЭСФ = 0 ИЛИ СчетчикЭСФ = КоличествоЭСФ) Тогда
				Продолжить;
			КонецЕсли;				
			
			InvoiceKeyList = СтрокаInvoiceKeyList(МассивКлючейЭСФ);
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и выполнить запрос к API ИС ЭСФ.
			
			ЗапросXML = ПолучитьМакет("ЗапросQueryInvoiceByKey").ПолучитьТекст();
			ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[invoiceKeyList]", InvoiceKeyList);
			НаправлениеИСЭСФ = ЭСФКлиентСервер.НаправлениеИСЭСФ(ВыборкаНаправление.Направление);
			ЗапросXML = СтрЗаменить(ЗапросXML, "[direction]", НаправлениеИСЭСФ);
			
			ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаInvoiceService()); 
			
			/////////////////////////////////////////////////////////////////////////////
			// Обработать результат запроса к API ИС ЭСФ.
			
			ИнформацияОбОшибке = Неопределено;
			Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
				
				Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
					СтруктураОтсутствующийЭСФ = Новый Структура;
					СтруктураОтсутствующийЭСФ.Вставить("Номер", КлючЭСФ.Номер);
					СтруктураОтсутствующийЭСФ.Вставить("Дата", КлючЭСФ.Дата);
					СтруктураОтсутствующийЭСФ.Вставить("Ссылка", КлючЭСФ.Ссылка);
					СтруктураОтсутствующийЭСФ.Вставить("Идентификатор", КлючЭСФ.Идентификатор);
					МассивОтсутствующихЭСФ.Добавить(СтруктураОтсутствующийЭСФ);
				КонецЦикла;
				
				Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
				Иначе
					ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, КэшированнаяФабрикаInvoiceInfo_Версия2); // читаем через фабрику, чтобы не возникало проблем с секцией CDATA
				КонецЕсли;
				
				InvoiceInfoList = ОтветXDTO.Body.queryInvoiceByKeyResponse.invoiceInfoList;
				InvoiceInfoList = ЭСФСервер.ПолучитьСвойство(InvoiceInfoList, "invoiceInfo", Неопределено); 
				
				Если InvoiceInfoList <> Неопределено Тогда
					
					InvoiceInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(InvoiceInfoList);
					
					// Поиск существующих ЭСФ при создании и обновлении выполняется по идентификатору ЭСФ.
					// При выполнении данной команды документы ЭСФ были найдены в ИС ЭСФ по номеру и дате.
					// Поэтому установим документам ЭСФ идентификаторы.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда 
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							Идентификатор = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceId", "");
							
							Для Каждого КлючЭСФ Из МассивКлючейЭСФ Цикл
								
								Если КлючЭСФ.Номер = Номер И КлючЭСФ.Дата = Дата Тогда
									
									Если КлючЭСФ.Идентификатор <> Идентификатор Тогда
										
										ОбъектЭСФ = КлючЭСФ.Ссылка.ПолучитьОбъект();
										ОбъектЭСФ.Идентификатор = Идентификатор;
										
										ОбъектЭСФ.Записать();
										
										ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(КлючЭСФ.Ссылка);
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					СоздатьОбновитьПолучаемыеЭСФ(InvoiceInfoList, ВыборкаНаправление.Направление, ПрофильИСЭСФ.СтруктурнаяЕдиница.Ссылка, Истина);
					
					// Удалить из массива отсутствующих ЭСФ, ЭСФ которые найдены в ИС ЭСФ по номеру и дате.
					Для Каждого InvoiceInfo Из InvoiceInfoList Цикл
						
						Если Найти(ВерсияИСЭСФ, "4.0.0") <> 0 Тогда 
							Invoice = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoice", Неопределено);
						Иначе
							InvoiceBody = ЭСФСервер.ПолучитьСвойство(InvoiceInfo, "invoiceBody", Неопределено);
							Invoice = ЭСФСервер.ОбъектXDTOИзСтрокиXML(InvoiceBody, ФабрикаXDTO);
						КонецЕсли;
						
						Если Invoice <> Неопределено Тогда
							
							Номер = ЭСФСервер.ПолучитьСвойство(Invoice, "num", "");
							Дата = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(Invoice, "date", "01.01.0001"));
							
							Для Индекс = 0 По МассивОтсутствующихЭСФ.ВГраница() Цикл
								
								СтруктураОтсутствующийЭСФ = МассивОтсутствующихЭСФ[Индекс]; 
								
								Если СтруктураОтсутствующийЭСФ.Номер = Номер
									И СтруктураОтсутствующийЭСФ.Дата = Дата Тогда
									
									// ЭСФ найден по номеру и дате в ИС ЭСФ, поэтому удалим этот ЭСФ из МассивОтсутствующихЭСФ.
									МассивОтсутствующихЭСФ.Удалить(Индекс);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
								
						КонецЕсли;
											
					КонецЦикла;
					
				КонецЕсли;
						
			Иначе
				
				ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОбменЭСФ.ОбновитьДокументыЭСФПоНомеруИДате'"), 
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
				ВызватьИсключение НСтр("ru = 'При обновлении ЭСФ по номеру и дате возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
			КонецЕсли;
			
			// Обнулим данные для следующей порции
			МассивКлючейЭСФ.Очистить();

		КонецЦикла;
		
		Для Каждого СтрокаОтсутсвующийЭСФ Из МассивОтсутствующихЭСФ Цикл
			
			ТекстСообщения = НСтр("ru = 'Документ ""[ЭСФ]"" не удалось обновить из ИС ЭСФ, так как в ИС ЭСФ не найден ЭСФ с номером: ""[Номер]"" и датой ""[Дата]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СтрокаОтсутсвующийЭСФ.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Дата]", СтрокаОтсутсвующийЭСФ.Дата);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Номер]", СтрокаОтсутсвующийЭСФ.Номер);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// Обновить состояния исправляемых ЭСФ, а также их дополнительных ЭСФ.
		
		МассивИдентификаторовАннулируемыхЭСФ = МассивИдентификаторовАннулируемыхЭСФ(МассивИсправленныхЭСФ);
		ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовАннулируемыхЭСФ, ВыборкаНаправление.Направление, ПрофильИСЭСФ, ИдентификаторСессии);
		
	КонецЦикла;
	
	ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецФункции

Функция ИмяСервисаUploadAwpService() Экспорт
	Возврат "AwpWebService";	
КонецФункции

Функция ФабрикаAwpInfo_Версия1()
	
	Если КэшированнаяФабрикаAwpInfo_Версия1 = Неопределено Тогда	
		
		ТекстовыйМакет = ПолучитьМакет("СхемаAwpInfo_Версия1");	
		ОбъектXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(ТекстовыйМакет.ПолучитьТекст(), ФабрикаXDTO);
		СписокXSD = АВРСервер.СписокXDTOИзОбъектXDTO(ОбъектXDTO.Body.queryAwpXsdResponse.xsdList.xsd);
		КэшированнаяФабрикаAwpInfo_Версия1 = ФабрикаXDTOИзСпискаXSD(СписокXSD);
		
	КонецЕсли;
	
	Возврат КэшированнаяФабрикаInvoiceInfo_Версия2;
	
КонецФункции

Функция ИмяСервисаAwpService() Экспорт
	Возврат "AwpWebService";	
КонецФункции

Процедура СоздатьОбновитьПолучаемыеАВР(Знач AwpInfoList, Знач НаправлениеАВР, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыАВР, МассивИсключаемыхИД = Неопределено, Знач Провести = Ложь, МассивАВРДляПодтвержденияПолучениеВходящихАВР = Неопределено, Пользователь = Неопределено) Экспорт
	
	Если AwpInfoList = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	AwpInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(AwpInfoList);
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		МассивАВР = НовыйМассивЗагружаемыхАВР(AwpInfoList, СтруктурнаяЕдиница, Ложь, УчитыватьВсеСтатусыАВР, Пользователь);
		
		// Создать массив новых ЭАВР (которых еще нет в ИБ)
		// для заполнения ссылочных полей по текстовым и числовым представлениям.
		МассивНовыхАВР = Новый Массив;
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			Если ОбъектАВР.Ссылка.Пустая() Тогда
				МассивНовыхАВР.Добавить(ОбъектАВР);
			КонецЕсли;
		КонецЦикла;
		
		// Создать коллекцию старых ЭАВР (которые уже были в ИБ)
		// содержащую объекты ЭАВР до обновления и после обновления,
		// коллекция необходима для восстановления ссылочных полей.
		МассивСтарыхАВР = Новый Массив;
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			Если НЕ ОбъектАВР.Ссылка.Пустая() Тогда
				ДокументОснованиеИсходного = ОбъектАВР.ДокументОснование;
				КопияОбъектаАВР = ОбъектАВР.Скопировать();
				КопияОбъектаАВР.ДокументОснование = ДокументОснованиеИсходного;
				Структура = Новый Структура;
				Структура.Вставить("ИсходныйОбъектАВР", КопияОбъектаАВР);
				Структура.Вставить("ОбновленныйОбъектАВР", ОбъектАВР);
				МассивСтарыхАВР.Добавить(Структура);
			КонецЕсли;
		КонецЦикла;
		
		// Очистить старые документы ЭСФ.
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			Если НЕ ОбъектАВР.Ссылка.Пустая() Тогда
				ЭСФСервер.ОчиститьОбъект(ОбъектАВР, "Идентификатор, СтруктурноеПодразделение, Автор");
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		МассивПропускаемыхАВР = Новый Массив;
		
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			AwpInfo = НайтиAwpInfoПоId(AwpInfoList, ОбъектАВР.Идентификатор);
			РегНомер = "Неопределен";
			Попытка
				РегНомер = ЭСФСервер.ПолучитьСвойство(AwpInfo, "registrationNumber", "");
				ЗаполнитьАВР(AwpInfo, СтруктурнаяЕдиница, НаправлениеАВР, ОбъектАВР);
			Исключение
				СообщениеПользователя = Новый СообщениеПользователю;
				
				ТекстСообщ = НСтр("ru = 'Не удалось разобрать документ с идентификатором %1 и регистрационным номером %2 по причине не соответствия АВР формату.'");
				ТекстСообщ = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщ, ОбъектАВР.Идентификатор, РегНомер);
				
				СообщениеПользователя.Текст = ТекстСообщ;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхАВР.Добавить(ОбъектАВР);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектАВР.Идентификатор);
				КонецЕсли;	
			КонецПопытки;	
		КонецЦикла;
		
		Для Каждого ОбъектАВР Из МассивПропускаемыхАВР Цикл
			ИндексЭлемента = МассивАВР.Найти(ОбъектАВР);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивАВР.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхАВР.Найти(ОбъектАВР);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхАВР.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;
		
		// Записать старые и новые документы ЭСФ.
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			Если ЗначениеЗаполнено(ОбъектАВР.Дата) И ЗначениеЗаполнено(ОбъектАВР.ДатаВыполненияРабот) Тогда
				ОбъектАВР.Записать();
			Иначе
				Текст = НСтр("ru = 'Не записан документ с регистрационным номером %1 по причине: 
							|%2,
							|%3'");
				Причина1 = "";
				Причина2 = "";
				Если Не ЗначениеЗаполнено(ОбъектАВР.Дата) Тогда
					Причина1 = НСтр("ru = '- не удалось определить дату выписки'");
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ОбъектАВР.ДатаВыполнения) Тогда
					Причина2 = НСтр("ru = '- не удалось определить дату выполнения'");
				КонецЕсли;	
				Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Текст, ОбъектАВР.РегистрационныйНомер, Причина1, Причина2);
				
				СообщениеПользователя = Новый СообщениеПользователю;
				СообщениеПользователя.Текст = Текст;
				СообщениеПользователя.Сообщить();
				
				МассивПропускаемыхАВР.Добавить(ОбъектАВР);
				Если МассивИсключаемыхИД <> Неопределено Тогда
					МассивИсключаемыхИД.Добавить(ОбъектАВР.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ОбъектАВР Из МассивПропускаемыхАВР Цикл
			ИндексЭлемента = МассивАВР.Найти(ОбъектАВР);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивАВР.Удалить(ИндексЭлемента);
			КонецЕсли;
			ИндексЭлемента = МассивНовыхАВР.Найти(ОбъектАВР);
			Если ИндексЭлемента <> Неопределено Тогда
				МассивНовыхАВР.Удалить(ИндексЭлемента);
			КонецЕсли;
		КонецЦикла;	
			
		ЗаполнитьСсылочныеРеквизитыДокументовАВР(Неопределено, Неопределено, Неопределено, НаправлениеАВР, МассивНовыхАВР);
		ВосстановитьСсылочныеРеквизитыДокументовАВР(МассивСтарыхАВР);
		
		// Повторно записать старые и новые документы ЭСФ.
		Для Каждого ОбъектАВР Из МассивАВР Цикл
			ОбъектАВР.Записать();
			АВРСервер.ОбновитьСвязанныеДокументы(ОбъектАВР);
		КонецЦикла;
		
		Если НЕ МассивАВРДляПодтвержденияПолучениеВходящихАВР = Неопределено  Тогда
			Для Каждого ОбъектАВР Из МассивАВР Цикл
				МассивАВРДляПодтвержденияПолучениеВходящихАВР.Добавить(ОбъектАВР.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьОбновитьПолучаемыеАВР'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция НайтиAwpInfoПоId(Знач AwpInfoList, Знач id)
	
	НайденныйAwpInfo = Неопределено;
	
	Для Каждого ТекущийAwpInfo Из AwpInfoList Цикл
		Если ТекущийAwpInfo.awpId = id Тогда
			НайденныйAwpInfo = ТекущийAwpInfo;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныйAwpInfo;
	
КонецФункции

Процедура ЗаполнитьАВР(Знач AwpInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеАВР, АВР) Экспорт
	
	ЗаполнитьАВР_Версия1(AwpInfo, СтруктурнаяЕдиница, НаправлениеАВР, АВР);
	
КонецПроцедуры

Процедура ЗаполнитьАВР_Версия1(Знач AwpInfo, Знач СтруктурнаяЕдиница, Знач НаправлениеАВР, АВР) Экспорт  //Получение АВР
	
	Awp = ЭСФСервер.ПолучитьСвойство(AwpInfo, "awp", "");
	Если ПустаяСтрока(Awp) Тогда
		ТекстАВР = ЭСФСервер.ПолучитьСвойство(AwpInfo, "awpBody", "");
		Awp = ?(ПустаяСтрока(ТекстАВР), "", АВРСервер.ОбъектXDTOИзСтрокиXML(ТекстАВР, ФабрикаXDTO));
	КонецЕсли;
	
	Если ПустаяСтрока(Awp) Тогда
		Возврат;
	КонецЕсли;
	
	// Раздел А. Общий раздел.
	АВР.Дата = ЭСФСервер.ДатаИБ(Awp.date);
	АВР.Номер = ЭСФСервер.ПолучитьСвойство(Awp, "number", "");
	АВР.РегистрационныйНомер = ЭСФСервер.ПолучитьСвойство(AwpInfo, "registrationNumber", "");
	АВР.ДатаВыполненияРабот = ЭСФСервер.ДатаИБ(Awp.performedDate);
	АВР.Причина = ПричинаИБ(ЭСФСервер.ПолучитьСвойство(AwpInfo, "cancelReason", ""));
	АВР.АВРДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(Awp, "additionalInfo", "");
	
	contract = ЭСФСервер.ПолучитьСвойство(Awp, "contract",Неопределено);
	Если contract <> Неопределено Тогда
		АВР.БезДоговора = НЕ ЭСФСервер.ПолучитьСвойство(contract, "isContract", Ложь);
		Если НЕ АВР.БезДоговора Тогда
			АВР.ДатаДоговора = ЭСФСервер.ДатаИБ(contract.date);
			АВР.НомерДоговора = ЭСФСервер.ПолучитьСвойство(contract, "number", "");
			АВР.РегистрационныйНомерДоговора = ЭСФСервер.ПолучитьСвойство(contract, "registrationNumber", "");
		КонецЕсли;
	КонецЕсли;
	
	// Раздел B. Реквизиты поставщика.
	senderList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Awp.senders.sender);
	Для Каждого sender Из senderList Цикл    
		
		Поставщик = АВР.Поставщики.Добавить();
		
		Поставщик.ПоставщикИдентификатор = ЭСФСервер.ПолучитьСвойство(sender, "tin", "");
		Поставщик.ПоставщикНаименование = ЭСФСервер.ПолучитьСвойство(sender, "name", "");
		Поставщик.Адрес = ЭСФСервер.ПолучитьСвойство(sender, "address", "");
		Поставщик.БИНФилиала = ЭСФСервер.ПолучитьСвойство(sender, "branchTin", "");
		Поставщик.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(sender, "AdditionalInfo", "");
		Поставщик.СерияСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(sender, "certificateSeries", "");
		Поставщик.НомерСвидетельстваПоНДС = ЭСФСервер.ПолучитьСвойство(sender, "certificateNum", "");                
		
		bankDetails = ЭСФСервер.ПолучитьСвойство(sender, "bankDetails", Неопределено);
		Если bankDetails <> Неопределено Тогда
			Поставщик.КБе = ЭСФСервер.ПолучитьСвойство(bankDetails, "kbe", "");
			Поставщик.ИИК = ЭСФСервер.ПолучитьСвойство(bankDetails, "iik", "");
			Поставщик.БИК = ЭСФСервер.ПолучитьСвойство(bankDetails, "bik", "");
			Поставщик.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(bankDetails, "bank", "");
		КонецЕсли;
		
		Поставщик.ТипРегистрации = АВРКлиентСервер.ТипРегистрацииНПАВРИБ(ЭСФСервер.ПолучитьСвойство(sender, "registrationType", "")); // Категория поставщик (В)
		
	КонецЦикла;
	
	// Раздел C. Реквизиты получателя.
	recipientList = ЭСФСервер.СписокXDTOИзОбъектXDTO(Awp.recipients.recipient);
	Для Каждого recipient Из recipientList Цикл
		
		Получатель = АВР.Получатели.Добавить();
		
		Получатель.ПолучательИдентификатор = ЭСФСервер.ПолучитьСвойство(recipient, "tin", "");
		Получатель.ПолучательНаименование = ЭСФСервер.ПолучитьСвойство(recipient, "name", "");
		Получатель.Адрес = ЭСФСервер.ПолучитьСвойство(recipient, "address", "");
		Получатель.БИНФилиала = ЭСФСервер.ПолучитьСвойство(recipient, "branchTin", "");
		Получатель.ДополнительныеСведения = ЭСФСервер.ПолучитьСвойство(recipient, "AdditionalInfo", "");
		
		statuses = ЭСФСервер.ПолучитьСвойство(recipient, "statuses", Неопределено);
		bankDetails = ЭСФСервер.ПолучитьСвойство(recipient, "bankDetails", Неопределено);
		Если bankDetails <> Неопределено Тогда
			Получатель.КБе = ЭСФСервер.ПолучитьСвойство(bankDetails, "kbe", "");
			Получатель.ИИК = ЭСФСервер.ПолучитьСвойство(bankDetails, "iik", "");
			Получатель.БИК = ЭСФСервер.ПолучитьСвойство(bankDetails, "bik", "");
			Получатель.НаименованиеБанка = ЭСФСервер.ПолучитьСвойство(bankDetails, "bank", "");
		КонецЕсли;
		
		Получатель.ТипРегистрации = АВРКлиентСервер.ТипРегистрацииНПАВРИБ(ЭСФСервер.ПолучитьСвойство(recipient, "registrationType", "")); // Категория получатель(С)
		
	КонецЦикла;
	
	СписокУслуг = ЭСФСервер.ПолучитьСвойство(Awp, "worksPerformed", Неопределено);
	Если СписокУслуг <> Неопределено Тогда
		АВР.КодВалюты = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "currencyCode", "KZT");
		АВР.КурсВалюты = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "rate", 1);
		АВР.ИтогоСтоимостьБезУчетаКосвенныхНалогов = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "totalSumWithoutTax", 0);
		АВР.ИтогоРазмерОборота = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "totalTurnoverSize", 0);
		АВР.ИтогоСуммаНДС = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "totalNdsAmount", 0);
		АВР.ИтогоСтоимостьСУчетомКосвенныхНалогов = ЭСФСервер.ПолучитьСвойство(СписокУслуг, "totalSumWithTax", 0);
		
		СписокУслуг = ЭСФСервер.ПолучитьСвойство(СписокУслуг.works, "work", Неопределено);
	КонецЕсли;
	
	СписокУслуг = ЭСФСервер.СписокXDTOИзОбъектXDTO(СписокУслуг);
	Для Каждого УслугаXDTO Из СписокУслуг Цикл
		УслугаСтрока = АВР.Услуги.Добавить();
		УслугаСтрока.УслугаНаименование 				= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "name", "");
		УслугаСтрока.ЕдиницаИзмеренияКод 				= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "measureUnitCode", "");
		УслугаСтрока.Количество 						= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "quantity", 0);
		УслугаСтрока.Цена 								= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "unitPriceWithoutTax", 0);
		УслугаСтрока.СтоимостьБезУчетаКосвенныхНалогов 	= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "sumWithoutTax", 0);
		УслугаСтрока.РазмерОборота						= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "turnoverSize", 0);
		УслугаСтрока.СтавкаНДСЧисло 					= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "ndsRate", 0);
		УслугаСтрока.СуммаНДС 							= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "ndsAmount", 0);
		УслугаСтрока.БезНДС								= ?(ЭСФСервер.ЕстьСвойство(УслугаXDTO, "ndsRate"), Ложь, Истина);
		УслугаСтрока.СтоимостьСУчетомКосвенныхНалогов 	= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "sumWithTax", 0);
		УслугаСтрока.ДополнительныеСведения				= ЭСФСервер.ПолучитьСвойство(УслугаXDTO, "additionalInfo", "");
	КонецЦикла;
	
	// Прочие сведения.
	АВР.ДатаПринятияСтатуса = ЭСФСервер.ДатаИБ(AwpInfo.lastUpdateDate);
	АВР.Статус = АВРКлиентСервер.СтатусАВР(ЭСФСервер.ПолучитьСвойство(AwpInfo, "Status", ""));
	АВР.Идентификатор = AwpInfo.AwpId;
	
	ОрганизацияИСтруктурноеПодразделение = ЭСФСервер.ОрганизацияИСтруктурноеПодразделение(СтруктурнаяЕдиница); 
	АВР.Организация = ОрганизацияИСтруктурноеПодразделение.Организация;
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		АВР.СтруктурноеПодразделение = ОрганизацияИСтруктурноеПодразделение.СтруктурноеПодразделение;
	КонецЕсли;
	
	АВР.ТипПодписи = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(Awp, "signatureType", ""));
	АВР.ЭЦП = ЭСФСервер.ПолучитьСвойство(AwpInfo, "signature", "");
	
	ЭЦПОтправителя = ЭСФСервер.ПолучитьСвойство(AwpInfo.senderSignatures, "senderSignature", Неопределено);
	Если ЭЦПОтправителя <> Неопределено Тогда
		АВР.ЭЦПОтправителя = ЭСФСервер.ПолучитьСвойство(ЭЦПОтправителя, "signature", "");
		АВР.ТипПодписиОтправителя = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(ЭЦПОтправителя, "type", ""));
		АВР.ДатаПодписиОтправителя = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(ЭЦПОтправителя, "date",  "01.01.0001"));
		АВР.УполномоченныйСотрудник = ЭСФСервер.ПолучитьСвойство(ЭЦПОтправителя, "fullName","");
		
		//изменения АПИ от 24-04-2020
		АВР.ИнформацияОтправитель = ЭСФСервер.ПолучитьСвойство(ЭЦПОтправителя, "participantInfo",""); 
	КонецЕсли;
	
	ЭЦППолучателя = ЭСФСервер.ПолучитьСвойство(AwpInfo.recipientSignatures, "recipientSignature", Неопределено);
	Если ЭЦППолучателя <> Неопределено Тогда
		АВР.ЭЦППолучателя = ЭСФСервер.ПолучитьСвойство(ЭЦППолучателя, "signature", "");
		АВР.ТипПодписиПолучателя = ЭСФКлиентСервер.ТипПодписиИБ(ЭСФСервер.ПолучитьСвойство(ЭЦППолучателя, "type", ""));
		АВР.ДатаПодписиПолучателя = ЭСФСервер.ДатаИБ(ЭСФСервер.ПолучитьСвойство(ЭЦППолучателя, "date",  "01.01.0001"));
		АВР.УполномоченныйСотрудникПолучателя = ЭСФСервер.ПолучитьСвойство(ЭЦППолучателя, "fullName","");
		
		//изменения АПИ от 24-04-2020
		АВР.ИнформацияПолучатель = ЭСФСервер.ПолучитьСвойство(ЭЦППолучателя, "participantInfo",""); 
	КонецЕсли;
	
	АВР.Направление = АВРСерверПереопределяемый.ОпределитьНаправлениеАВР(АВР, СтруктурнаяЕдиница);	
	
КонецПроцедуры

Процедура ЗаполнитьСсылочныеРеквизитыДокументовАВР(
	Знач СоответствиеВалюты = Неопределено, 
	Знач СоответствиеАкцизы = Неопределено, 
	Знач ТаблицаНДС = Неопределено, 
	Знач НаправлениеАВР, 
	МассивАВР) Экспорт
	
	НаправлениеВходящие = Перечисления.НаправленияЭСФ.Входящий;
	НаправлениеИсходящие = Перечисления.НаправленияЭСФ.Исходящий;
	МассивВходящихАВР = Новый Массив;
	МассивИсходящихАВР = Новый Массив;
	РазделитьМассивПоНаправлениямАВР(МассивАВР, МассивВходящихАВР, МассивИсходящихАВР);

	СоответствиеВалюты = ?(СоответствиеВалюты = Неопределено, ЭСФСерверПовтИсп.НовоеСоответствиеВалюты(), СоответствиеВалюты);
	ТаблицаНДС = ?(ТаблицаНДС = Неопределено, ЭСФСерверПовтИсп.НоваяТаблицаНДС(), ТаблицаНДС);
		
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницыАВР(МассивВходящихАВР, НаправлениеВходящие);
	ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницыАВР(МассивИсходящихАВР, НаправлениеИсходящие);
	АВРСерверПереопределяемый.ЗаполнитьСсылкиЕдиницИзмеренияАВР(МассивАВР);

	ЗаполнитьСсылкиНаВалютыАВР(СоответствиеВалюты, МассивАВР);
	ЗаполнитьСсылкиНаНДСАВР(ТаблицаНДС, МассивАВР);
	
КонецПроцедуры

Процедура РазделитьМассивПоНаправлениямАВР(МассивАВР, МассивВходящихАВР, МассивИсходящихАВР)
	//Разделяем массив по входящим и исходящим. В случае если направление не указано - исключаем такие документы		
	Для Каждого АВР из МассивАВР Цикл
		Если АВР.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
			МассивВходящихАВР.Добавить(АВР);
		ИначеЕсли АВР.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
			МассивИсходящихАВР.Добавить(АВР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаВалютыАВР(Знач СоответствиеВалюты, МассивАВР)
	
	Для Каждого АВР Из МассивАВР Цикл
		АВР.Валюта = СоответствиеВалюты[АВР.КодВалюты];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаНДСАВР(Знач ТаблицаНДС, МассивАВР)
	
	Для Каждого АВР Из МассивАВР Цикл
		Для Каждого СтрокаУслуги Из АВР.Услуги Цикл
			ПараметрыОтбора = Новый Структура("СтавкаНДСЧисло, БезНДС", СтрокаУслуги.СтавкаНДСЧисло, СтрокаУслуги.БезНДС);
			МассивНайденныхСтрок = ТаблицаНДС.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() <> 0 Тогда
				СтрокаУслуги.СтавкаНДС = МассивНайденныхСтрок[0].СтавкаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаКонтрагентовИСтруктурныеЕдиницыАВР(МассивАВР, НаправлениеАВР)
	
	// Очистить ссылки на грузоотправителей, грузополучателей, поставщиков, получателей.
	Для Каждого АВР Из МассивАВР Цикл
						
		Для Каждого Получатель Из АВР.Получатели Цикл
			Получатель.Получатель = Неопределено;
		КонецЦикла;
		
		Для Каждого Поставщик Из АВР.Поставщики Цикл
			Поставщик.Поставщик = Неопределено;
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеАВР);	
	ИмяТаблицыСтруктурныхЕдиниц = ЭСФВызовСервераПовтИсп.ИмяТаблицыСтруктурныхЕдиниц(НаправлениеАВР);
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеАВР);
	ИмяРеквизитаСтруктурнойЕдиницы = ЭСФВызовСервераПовтИсп.ИмяРеквизитаСтруктурнойЕдиницы(НаправлениеАВР);
	
	// Заполнить массивы идентификациооных номеров контрагентов и организаций для поиска ссылок.
	ИдентификационныеНомераКонтрагентов = Новый Массив;
	ИдентификационныеНомераСтруктурныхЕдиниц = Новый Массив;	
	Для Каждого АВР Из МассивАВР Цикл
		// Добавить в массивы идентификаторы (БИН, ИИН) поставщиков и получателей.	
		Для Каждого СтрокаТаблицы Из АВР[ИмяТаблицыКонтрагентов] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]) Тогда
				ИдентификационныеНомераКонтрагентов.Добавить(СтрокаТаблицы[ИмяРеквизитаКонтрагента+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из АВР[ИмяТаблицыСтруктурныхЕдиниц] Цикл
			Если НЕ ПустаяСтрока(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]) Тогда
				ИдентификационныеНомераСтруктурныхЕдиниц.Добавить(СтрокаТаблицы[ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор"]);
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	// Найти ссылки на контрагентов и структурные единицы по идентификаторам (БИН, ИИН).
	СоответствияИдентификаторовИСсылок = НайтиКонтрагентовИСтруктурныеЕдиницыПоИдентификационнымНомерам(
		ИдентификационныеНомераКонтрагентов, ИдентификационныеНомераСтруктурныхЕдиниц);
		
	// Заполнить ссылки на контрагентов. 
	СоответствияКонтрагентов = СоответствияИдентификаторовИСсылок.СоответствияКонтрагентов;	
	Для Каждого АВР Из МассивАВР Цикл
		
		Для Каждого ЭлементСоответствияКонтрагентов Из СоответствияКонтрагентов Цикл
			
			Идентификатор = ЭлементСоответствияКонтрагентов.Ключ;
			Контрагент = ЭлементСоответствияКонтрагентов.Значение;
			
			// Заполнить ссылки на контрагентов в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаКонтрагента + "Идентификатор", Идентификатор);
			МассивНайденныхСтрок = АВР[ИмяТаблицыКонтрагентов].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаКонтрагента] = Контрагент;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	// Заполнить ссылки на структурные единицы.
	СоответствияСтруктурныхЕдиниц = СоответствияИдентификаторовИСсылок.СоответствияСтруктурныхЕдиниц;
	Для Каждого АВР Из МассивАВР Цикл
		
		Для Каждого ЭлементСоответствияСтруктурныхЕдиниц Из СоответствияСтруктурныхЕдиниц Цикл
			
			Идентификатор = ЭлементСоответствияСтруктурныхЕдиниц.Ключ;
			СтруктурнаяЕдиница = ЭлементСоответствияСтруктурныхЕдиниц.Значение;
			
			// Заполнить ссылки на организации в таблице поставщиков или получателей.
			ПараметрыОтбора = Новый Структура(ИмяРеквизитаСтруктурнойЕдиницы+"Идентификатор", Идентификатор);
			МассивНайденныхСтрок = АВР[ИмяТаблицыСтруктурныхЕдиниц].НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
				НайденнаяСтрока[ИмяРеквизитаСтруктурнойЕдиницы] = СтруктурнаяЕдиница;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыДокументовАВР(МассивСтарыхАВР)
	
	Для Каждого Структура Из МассивСтарыхАВР Цикл
		ВосстановитьСсылочныеРеквизитыОдногоАВР(Структура.ИсходныйОбъектАВР, Структура.ОбновленныйОбъектАВР);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСсылочныеРеквизитыОдногоАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР)
	
	ОбновленныйОбъектАВР.Валюта = ИсходныйОбъектАВР.Валюта;
	ОбновленныйОбъектАВР.ДокументОснование = ИсходныйОбъектАВР.ДокументОснование;
	ОбновленныйОбъектАВР.Договор = ИсходныйОбъектАВР.Договор;
	
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Поставщики", "Поставщик", "ПоставщикИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Получатели", "Получатель", "ПолучательИдентификатор");
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Услуги", "Номенклатура", "УслугаНаименование");
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Услуги", "СтавкаНДС", "СтавкаНДСЧисло");
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Услуги", "ЕдиницаИзмерения", "ЕдиницаИзмеренияКод");
	ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(ИсходныйОбъектАВР, ОбновленныйОбъектАВР, "Услуги", "ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения");

КонецПроцедуры

Процедура ВосстановитьСсылкиВРеквизитеТабличнойЧастиАВР(
	ИсходныйОбъектАВР,
	ОбновленныйОбъектАВР,
	ИмяТабличнойЧасти,
	ИмяРеквизитаДляВосстановления,
	ИмяРеквизитаДляПроверки)
	
	Если ОбновленныйОбъектАВР[ИмяТабличнойЧасти].Количество() = ИсходныйОбъектАВР[ИмяТабличнойЧасти].Количество() Тогда
		
		ВГраница = ИсходныйОбъектАВР[ИмяТабличнойЧасти].Количество() - 1;
		
		Для Индекс = 0 По ВГраница Цикл
			
			ИсходнаяСтрока = ИсходныйОбъектАВР[ИмяТабличнойЧасти][Индекс];
			ОбновленнаяСтрока = ОбновленныйОбъектАВР[ИмяТабличнойЧасти][Индекс];
			
			Если ОбновленнаяСтрока[ИмяРеквизитаДляПроверки] = ИсходнаяСтрока[ИмяРеквизитаДляПроверки] Тогда
				
				ОбновленнаяСтрока[ИмяРеквизитаДляВосстановления] = ИсходнаяСтрока[ИмяРеквизитаДляВосстановления];
				 
			Иначе
				
				ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"", в таблице ""[ИмяТабличнойЧасти]"", в строке [НомерСтроки], очищено поле ""[ИмяРеквизитаДляВосстановления]"", так как значение поля ""[ИмяРеквизитаДляПроверки]"" не соответствовало значению поля в полученном АВР.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектАВР.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[НомерСтроки]", Формат(Индекс + 1, "ЧГ="));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляПроверки]", ИмяРеквизитаДляПроверки);
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.УстановитьДанные(ОбновленныйОбъектАВР.Ссылка);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'В документе ""[ЭСФ]"" очищена колонка ""[ИмяРеквизитаДляВосстановления]"" в таблице ""[ИмяТабличнойЧасти]"", так как количество строк в этой таблице не соответствовало количеству строк в полученном ЭСФ.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ОбновленныйОбъектАВР.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаДляВосстановления]", ИмяРеквизитаДляВосстановления);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяТабличнойЧасти]", ИмяТабличнойЧасти);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.УстановитьДанные(ОбновленныйОбъектАВР.Ссылка);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает коллекцию АВР, сгруппированных по структурным единицам.
// Для группировки используются значения Поставщики[0].Поставщик или Получатели[0].Получатель,
// в зависимости от направления АВР.
//
// Параметры:
//  МассивАВР - Массив - Массив АВР, которые необходимо сгруппировать по структурным единицам.
//   В массиве могут быть одновременно входящие и исходящие АВР.
//
// Возвращаемое значение:
//  Соответствие - Коллекция АВР, сгруппированных по структурным единицам.
//   |- Ключ - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - Структурная единица.
//   |- Значение - Массив - Массив АВР, принадлежащих данной структурной единице.
//
Функция Переопределяемый_СгруппироватьАВРПоСтруктурнымЕдиницам(Знач МассивАВР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Ссылка КАК АВР,
	|	АВРПоставщики.Поставщик КАК Поставщик,
	|	АВР.Направление КАК Направление,
	|	АВРПолучатели.Получатель КАК Получатель
	|ПОМЕСТИТЬ ВТ_АВР
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот.Поставщики КАК АВРПоставщики
	|		ПО АВР.Ссылка = АВРПоставщики.Ссылка
	|			И (АВРПоставщики.НомерСтроки = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот.Получатели КАК АВРПолучатели
	|		ПО (АВРПолучатели.Ссылка = АВР.Ссылка)
	|			И (АВРПолучатели.НомерСтроки = 1)
	|ГДЕ
	|	АВР.Ссылка В(&МассивАВР)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АВР.АВР,
	|	ВЫБОР
	|		КОГДА ВТ_АВР.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
	|			ТОГДА ВТ_АВР.Получатель
	|		КОГДА ВТ_АВР.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий)
	|			ТОГДА ВТ_АВР.Поставщик
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтруктурнаяЕдиница
	|ИЗ
	|	ВТ_АВР КАК ВТ_АВР
	|ИТОГИ ПО
	|	СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("МассивАВР", МассивАВР);
	ВыборкаСтруктурнаяЕдиница = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоллекцияСгруппированныхАВР = Новый Соответствие;
	
	Пока ВыборкаСтруктурнаяЕдиница.Следующий() Цикл
		
		СгруппированныйМассивАВР = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаСтруктурнаяЕдиница.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СгруппированныйМассивАВР.Добавить(ВыборкаДетальныеЗаписи.АВР);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница) Тогда
			
			КоллекцияСгруппированныхАВР.Вставить(ВыборкаСтруктурнаяЕдиница.СтруктурнаяЕдиница, СгруппированныйМассивАВР);
			
		Иначе
			
			ТекстСообщения = НСтр(
			"ru = 'В документах не указан поставщик или получатель в разделе ""B. Поставщики"" или ""D. Получатели"":
			|%1'");
			
			СтрокаСписокАВР = "";
			Для Каждого СсылкаАВР Из СгруппированныйМассивАВР Цикл
				СтрокаСписокАВР = СтрокаСписокАВР + "- " + СсылкаАВР + Символы.ПС;
			КонецЦикла;
			СтрокаСписокАВР = СокрЛП(СтрокаСписокАВР);
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаСписокАВР);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцияСгруппированныхАВР;
	
КонецФункции

// См. ЭСФСервер.ПолучитьНовыеАВР()
Функция ПолучитьНовыеАВР(ПараметрыВыгрузки) Экспорт
	
	МассивДанныхПрофилейИСЭСФ = ПараметрыВыгрузки.МассивДанныхПрофилейИСЭСФ;
	МассивПрофилейИСЭСФСДатойСинхронизации = ПараметрыВыгрузки.МассивПрофилейИСЭСФСДатойСинхронизации;
	ПолучитьОднуПорцию = ?(ПараметрыВыгрузки.Свойство("ПолучитьОднуПорцию"), ПараметрыВыгрузки.ПолучитьОднуПорцию, Ложь);	
	ЗапускатьФоновоеЗадание = ?(ПараметрыВыгрузки.Свойство("ЗапускатьФоновоеЗадание"), ПараметрыВыгрузки.ЗапускатьФоновоеЗадание, Ложь);
	ТолькоСоздатьОбновитьФайлы = ?(ПараметрыВыгрузки.Свойство("ТолькоСоздатьОбновитьФайлы"), ПараметрыВыгрузки.ТолькоСоздатьОбновитьФайлы, Ложь);
	
	СообщениеПользователя = Новый СообщениеПользователю;

	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	Текст = НСтр("ru = '%ТекущаяДата% Начата синхронизация с ИС ЭСФ.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());	
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	НаправлениеПустаяСсылка = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка");
	
	КоличествоШагов = МассивДанныхПрофилейИСЭСФ.Количество() * 2;
	НомерШага = 0;
	
	СоответствиеПараметровСинхронизации = СоответствиеПараметровСинхронизации(МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Для Каждого СтруктураПрофиляСинхронизации Из МассивДанныхПрофилейИСЭСФ Цикл
		ДанныеПрофиля = СтруктураПрофиляСинхронизации.ПрофильИСЭСФ;		
		ПредставлениеПрофиля = Строка(ДанныеПрофиля.Ссылка); 				
		
		ПараметрыМетодаАВР = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("awpQueryUpdates"), НаправлениеПустаяСсылка);	
	
		ЗаполнитьСведенияОДатеСинхронизации(ПараметрыМетодаАВР, , ДанныеПрофиля, СоответствиеПараметровСинхронизации);
		
		ИдентификаторСессии = ЭСФВызовСервера.ОткрытьСессию(СтруктураПрофиляСинхронизации, ВерсияИСЭСФ);
		
		// Получить новые АВР.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		Пока НЕ ЭтоПоследняяПорция Цикл						
			Текст = НСтр("ru = '%ТекущаяДата% (Шаг %Номер% из %Количество%) Получение новых и измененных входящих электронных актов выполненных работ. Профиль: %ПрофильИСЭСФ%.'");
			Текст = СтрЗаменить(Текст, "%ТекущаяДата%",  ТекущаяДата());
			Текст = СтрЗаменить(Текст, "%ПрофильИСЭСФ%", ПредставлениеПрофиля);
			Текст = СтрЗаменить(Текст, "%Номер%",        НомерШага);
			Текст = СтрЗаменить(Текст, "%Количество%",   КоличествоШагов);
			СообщениеПользователя.Текст = Текст;
			СообщениеПользователя.Сообщить();	
			
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхАВР(Перечисления.НаправленияЭСФ.ПустаяСсылка(), СтруктураПрофиляСинхронизации, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаАВР, МассивИдентификаторовДляОбновленияСтатусаПриема);					
		КонецЦикла;
		
		ПодтвердитьПолучениеВходящихАВР(МассивИдентификаторовДляОбновленияСтатусаПриема, СтруктураПрофиляСинхронизации, ИдентификаторСессии); // Отправка уведомления о приеме
		ОбновитьСтатусыАВРПоИдентификаторам(МассивИдентификаторовДляОбновленияСтатусаПриема, Перечисления.НаправленияЭСФ.Входящий, СтруктураПрофиляСинхронизации, ИдентификаторСессии);	
		ЭСФВызовСервера.ЗакрытьСессию(СтруктураПрофиляСинхронизации, ИдентификаторСессии, ВерсияИСЭСФ);
		
		// Отобразить в комментарии, что синхронизация по профилю успешно завершена.
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пометка",            Истина);
		ПараметрыОтбора.Вставить("СтруктурнаяЕдиница", ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка);
		ПараметрыОтбора.Вставить("ПрофильИСЭСФ",       ДанныеПрофиля.Ссылка);
		ПараметрыОтбора.Вставить("Комментарий",        "");
				
	КонецЦикла;
	
	Текст = НСтр("ru = '%ТекущаяДата% Синхронизация с ИС ЭСФ успешно завершена.'");
	Текст = СтрЗаменить(Текст, "%ТекущаяДата%", ТекущаяДата());
	СообщениеПользователя.Текст = Текст;
	СообщениеПользователя.Сообщить();
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДанныеНовыхАВР(Знач НаправлениеАВР, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетода, МассивИдентификаторовДляОбновленияСтатусаПриема = Неопределено, МассивАВРДляПолученияИдентификаторовТоваров = Неопределено) Экспорт
	
	Если Найти(ВерсияИСЭСФ, "5.0.0") <> 0 Тогда
		ФабрикаAwpInfo = ФабрикаAwpInfo_Версия1(); // Фабрика для приема сообщений с секцией CDATA
	КонецЕсли;	
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	limit = ?(ПараметрыМетода.Свойство(ВРег("limit")), ПараметрыМетода.limit, "50");
	lastAwpId = ?(ПараметрыМетода.Свойство(ВРег("lastAwpId")), "0", "0"); // для 5.0
	lastEventDate = Дата(2010,01,01); // Используется только в 5.0. Пустую дату передавать нельзя, поэтому 0001 год не используется. Ставим 2010 (время до ЭСФ) так же как в форме синхронизации
	// если в форме синхронизации указана дата, берем ее.
	// если даты нет - берем дату из установленного параметра. Во время получаения пакетов сюда будет приходить
	// строковое представление даты lastEventDate их результаты предыдущего запроса (с милисекундами)
	Если ПараметрыМетода.Свойство(ВРег("ДатаНачалаСинхронизации")) и ТипЗнч(ПараметрыМетода.ДатаНачалаСинхронизации) = Тип("Дата") Тогда
		lastEventDate = ПараметрыМетода.ДатаНачалаСинхронизации;
	ИначеЕсли ПараметрыМетода.Свойство(ВРег("lastEventDate")) Тогда
		lastEventDate = ПараметрыМетода.lastEventDate;
	КонецЕсли;
	
	ШаблонЗапроса = ПолучитьМакет("ЗапросAwpQueryUpdates_Версия1").ПолучитьТекст();
	
	ПредыдущийLastEventDate = Неопределено;
	ПредыдущийlastAwpId = Неопределено;
	
	Пока LastEventDate <> ПредыдущийLastEventDate ИЛИ lastAwpId <> ПредыдущийlastAwpId Цикл
		ПредыдущийLastEventDate = LastEventDate;
		ПредыдущийlastAwpId = lastAwpId;
		
		ЗапросXML = ШаблонЗапроса;
		ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
		ЗапросXML = СтрЗаменить(ЗапросXML, "[clientId]", ЭСФСервер.ИдентификаторКлиентаИСЭСФ());
		ЗапросXML = СтрЗаменить(ЗапросXML, "[limit]", limit);
		
		// в версии 5.0	 идентификаци по двум параметрам
		ЗапросXML = СтрЗаменить(ЗапросXML, "[lastAwpId]", lastAwpId); // 5.0
		Если ТипЗнч(lastEventDate) = Тип("Дата") Тогда
			// в формате 2017-09-16T09:40:30+06:00
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", ЗаписатьДатуJSON(lastEventDate,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением));
		Иначе
			ЗапросXML = СтрЗаменить(ЗапросXML, "[lastEventDate]", lastEventDate); // Запись без преобразования, чтобы не потерять милисекунды в процессе обхода порций
		КонецЕсли;
		
		ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаAwpService(),,ВерсияИСЭСФ);
		
		ИнформацияОбОшибке = Неопределено;
		Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
			
			ОтветXDTO = АВРСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
			
			AwpInfoList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.awpQueryUpdatesResponse.awpInfoList, "awpInfo", Неопределено);
			
			Если ТолькоСоздатьОбновитьФайлы Тогда
				СоздатьОбновитьПрисоединенныеФайлыСуществующихАВР(awpInfoList, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка);
			Иначе
				МассивИсключаемыхИД = Новый Массив;
				МассивАВРДляПодтвержденияПолучениеВходящихАВР = Новый Массив();
				СоздатьОбновитьПолучаемыеАВР(AwpInfoList, НаправлениеАВР, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, Ложь, МассивИсключаемыхИД, Истина, МассивАВРДляПодтвержденияПолучениеВходящихАВР, ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Пользователь); 
				СформироватьМассивIDДляПодтвержденияПолучениеВходящихАВР(МассивАВРДляПодтвержденияПолучениеВходящихАВР, МассивИдентификаторовДляОбновленияСтатусаПриема, ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ИдентификационныйНомер);
				Для Каждого ИД Из МассивИсключаемыхИД Цикл
					ИндексЭлемента = МассивИдентификаторовДляОбновленияСтатусаПриема.Найти(ИД);
					Если ИндексЭлемента <> Неопределено Тогда
						МассивИдентификаторовДляОбновленияСтатусаПриема.Удалить(ИндексЭлемента);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Сохранение параметров
			lastEventDate = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.awpQueryUpdatesResponse, "lastEventDate",0); 
			lastAwpId = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.awpQueryUpdatesResponse, "lastAwpId",0); 
			
			ПараметрДата = XMLЗначение(Тип("Дата"), lastEventDate);
			Если ТипЗнч(ПараметрДата) = Тип("Дата") Тогда
				//в регистр записываем секундой раньше, чтобы не "потерять" пакеты из-за округлений миллисекундов, возвращаемых сервером
				ПараметрДата = ПараметрДата - 1;
			КонецЕсли;
			
			ЭСФСервер.СохранитьПараметрыМетода(
			ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
			ВРег("AwpQueryUpdates"), 
			НаправлениеАВР, 
			ВРег("lastEventDate"), 
			ПараметрДата);
			
			ЭСФСервер.СохранитьПараметрыМетода(
			ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка, 
			ВРег("AwpQueryUpdates"), 
			НаправлениеАВР, 
			ВРег("lastAwpId"), 
			lastAwpId);
			
		ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
			
			ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
			//ПредыдущийLastEventId = Неопределено;
			ПредыдущийLastEventDate = Неопределено;
			ПредыдущийlastAwpId = Неопределено;
		Иначе
			
			ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
			
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ПолучитьНовыеАВР'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение НСтр("ru = 'При получении новых АВР возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоПоследняяПорция = ?((LastEventDate = ПредыдущийLastEventDate И lastAwpId = ПредыдущийlastAwpId), Истина, Ложь);
	
	Возврат ЭтоПоследняяПорция;
	
КонецФункции

Процедура ПодтвердитьПолучениеВходящихАВР(МассивИдентификаторовАВР, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
		
	// Уведомить ИС ЭСФ о том, что отправленные ЭСФ были приняты (доставлены).
	ПредельныйРазмерПакетаИдентификаторов = 250; // ограничение ИС ЭСФ		
	ОбщийРазмерКолекции = МассивИдентификаторовАВР.Количество();
	КоличествоПакетов = ОбщийРазмерКолекции/ПредельныйРазмерПакетаИдентификаторов;
	Если КоличествоПакетов <> Цел(КоличествоПакетов) Тогда
		// количество пакетов дробное.
		КоличествоПакетов = Цел(КоличествоПакетов) + 1;
	КонецЕсли;
	
	НомерПакета = 1;
	СчетчикПакета = 0;
	ПакетДляОтправки = Новый Массив;	
	Для Каждого Идентификатор Из МассивИдентификаторовАВР Цикл
		СчетчикПакета = СчетчикПакета + 1;
		ПакетДляОтправки.Добавить(Идентификатор);
		
		Если (СчетчикПакета = ПредельныйРазмерПакетаИдентификаторов) ИЛИ (СчетчикПакета = ОбщийРазмерКолекции) Тогда
			СообщениеПользователя = Новый СообщениеПользователю;

			Текст = НСтр("ru = 'Отправляется подтверждение о приеме электронных актов выполненных работ: %НомерПакета% из %КоличествоПакетов%...'");
			Текст = СтрЗаменить(Текст, "%НомерПакета%", НомерПакета);	
			Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(Текст);
			
			ТекстЗапроса = СоздатьЗапросНаПодтверждениеПолученияВходящихАВР(ПакетДляОтправки);	
			ВыполнитьЗапросНаПодтверждениеПолученияВходящихАВР(ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);	
			
			СчетчикПакета = 0;
			ПакетДляОтправки = Новый Массив;
			НомерПакета = НомерПакета + 1;
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

Процедура СоздатьОбновитьПрисоединенныеФайлыСуществующихАВР(Знач AwpInfoList, Знач СтруктурнаяЕдиница)
	
КонецПроцедуры

Процедура СформироватьМассивIDДляПодтвержденияПолучениеВходящихАВР(Знач МассивАВРДляПодтвержденияПолучениеВходящихАВР, МассивИдентификаторовЭСФ, БинСтруктурногоПодразделения = Неопределено)
	
	Если МассивАВРДляПодтвержденияПолучениеВходящихАВР.Количество() = 0 Или БинСтруктурногоПодразделения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйАктВыполненныхРабот.Идентификатор
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРабот.Ссылка В(&МассивАВР)
		|	И ЭлектронныйАктВыполненныхРабот.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Входящий)
		|	И ЭлектронныйАктВыполненныхРабот.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.Непросмотренный)";
	
	Запрос.УстановитьПараметр("МассивАВР", МассивАВРДляПодтвержденияПолучениеВходящихАВР);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИдентификаторовЭСФ.Добавить(ВыборкаДетальныеЗаписи.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЗапросНаПодтверждениеПолученияВходящихАВР(Знач МассивИдентификаторовАВР)
	
	ТекстЗапроса = ПолучитьМакет("ЗапросQueryViewAwp").ПолучитьТекст();	
	
	СтрокаСписокИдентификаторов = "";
	ШаблонИдентификатора = "<id>[Идентификатор]</id>";
	
	Для Каждого Идентификатор Из МассивИдентификаторовАВР Цикл
		
		ИдентификаторПоШаблону = ШаблонИдентификатора;
		ИдентификаторПоШаблону = СтрЗаменить(ИдентификаторПоШаблону, "[Идентификатор]", Формат(Идентификатор, "ЧГ="));
		СтрокаСписокИдентификаторов = СтрокаСписокИдентификаторов + ИдентификаторПоШаблону;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[idList]", СтрокаСписокИдентификаторов);	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыполнитьЗапросНаПодтверждениеПолученияВходящихАВР(Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии)
	
	ЗапросXMLСИдентификаторомСессии = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);

	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXMLСИдентификаторомСессии, ИмяСервисаAwpService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		// Результат выполнения метода не обрабатывается.
		
	ИначеЕсли ЭтоМодульнаяОшибкаСессияЗакрыта(ОтветXML) Тогда
		
		ИдентификаторСессии = ОткрытьСессию(ПрофильИСЭСФ);
		ВыполнитьЗапросНаПодтверждениеПолученияВходящихАВР(ЗапросXML, ПрофильИСЭСФ, ИдентификаторСессии);
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаПодтверждениеПолученияВходящихАВР'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отправке подтверждения о доставке АВР возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
КонецФункции

// Запись изменений в реквизитах ЭСФ после их отправки на сервер
Процедура ЗаписатьИзмененияАВРПослеОтправкиПакета(РезультатОтправки, КоллекцияПодписей, УполномоченныйСотрудник)
	
	Для Каждого ЭлементРезультата Из РезультатОтправки Цикл		
		АВР = ЭлементРезультата.Ключ.ПолучитьОбъект();
		
		АВР.Идентификатор = ЭлементРезультата.Значение.Идентификатор;
		// для фоновых заданий передаваем значение уполномоченного сотрудника
		Если ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
			АВР.УполномоченныйСотрудник = СокрЛП(УполномоченныйСотрудник);
		Иначе
			АВР.УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
		КонецЕсли;
		АВР.ЭЦП = КоллекцияПодписей[ЭлементРезультата.Ключ];
		АВР.ТипПодписи = ЭлементРезультата.Значение.ТипПодписи;
		АВР.ДатаПодписи = ТекущаяДата();
		//В АВР, помимо ЭЦП документа, присутствуют ЭЦП отправителя и получателя, которые изменяются при изменении статуса.
		//При первой отправке нужно заполнять еще ЭЦП отправителя
		АВР.ЭЦПОтправителя = КоллекцияПодписей[ЭлементРезультата.Ключ];
		АВР.ТипПодписиОтправителя = ЭлементРезультата.Значение.ТипПодписи;
		АВР.ДатаПодписиОтправителя = АВР.ДатаПодписи;

		Если ЭлементРезультата.Значение.Ошибки = Неопределено Тогда
			Если ЗначениеЗаполнено(ЭлементРезультата.Значение.Идентификатор) Тогда
				АВР.Ошибки.Очистить();
			КонецЕсли;
		Иначе
			АВР.Ошибки.Очистить();
			Для Каждого Ошибка Из ЭлементРезультата.Значение.Ошибки Цикл
				ОшибкиСтрока = АВР.Ошибки.Добавить();
				ОшибкиСтрока.Текст = Ошибка.Текст;
				ОшибкиСтрока.Поле = Ошибка.Поле;
			КонецЦикла;
		КонецЕсли;
		
		// Очистить поля ЭСФ, которые будут заполнены после успешного приема в ИС ЭСФ.
		АВР.РегистрационныйНомер = "";
		АВР.Статус = Перечисления.СтатусыАВР.ПустаяСсылка();
		
		АВР.Записать();
				
	КонецЦикла;

КонецПроцедуры

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Функция ОбновитьСтатусыАВРПоИдентификаторам(Знач МассивИдентификаторовАВР, Знач НаправлениеАВР, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторАВР Из МассивИдентификаторовАВР Цикл
		Если ЗначениеЗаполнено(ИдентификаторАВР) Тогда
			idList = idList + "<id>" + ИдентификаторАВР + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросAwpQueryStatusById").ПолучитьТекст();	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаAwpService()); 
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторАВР Из МассивИдентификаторовАВР Цикл
			Результат.Вставить(ИдентификаторАВР, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		
		awpSummaryList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.awpQueryStatusByIdResponse.awpSummaryList, "awpSummary", Неопределено);
		                                               
		Если awpSummaryList <> Неопределено Тогда
			
			awpSummaryList = ЭСФСервер.СписокXDTOИзОбъектXDTO(awpSummaryList);
			
			МассивИдентификаторовОшибочныхАВР = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По awpSummaryList.Количество() - 1 Цикл
				awpSummary = awpSummaryList.Получить(Индекс);
				ДанныеСтатуса = ДанныеСтатусаAwp(awpSummary);
				Результат.Вставить(ДанныеСтатуса.Идентификатор, ДанныеСтатуса);
				Если ДанныеСтатуса.Статус = Перечисления.СтатусыАВР.Ошибочный Тогда
					МассивИдентификаторовОшибочныхАВР.Добавить(ДанныеСтатуса.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			//Получим ошибки ошибочных АВР.
			Если МассивИдентификаторовОшибочныхАВР.Количество() > 0 Тогда
				РезультатОшибочныхАВР = ПолучитьОшибкиАВРПоИдентификаторам(МассивИдентификаторовОшибочныхАВР, Неопределено, ПрофильИСЭСФ, ИдентификаторСессии);
				Результат = ОбъединитьРезультатыПолученияСтатусовИОшибок(Результат, РезультатОшибочныхАВР);
			КонецЕсли;
			
			// Обновить документы АВР.
			ОтразитьИзмененияСтатусовАВР(Результат, СтруктурнаяЕдиница);
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыАВРПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов АВР по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные статуса ЭСФ: Статус, Идентификатор, ДатаВыписки и т.д.
//
// Параметры:
//  InvoiceSummaryXDTO - ОбъектXDTO - Объект, из которого будут извлечены данные статуса.
//
// Возвращаемое значение:
//  Структура - Содержащая данные статуса ЭСФ.
//   |- Идентификатор - Строка - Идентификатор ЭСФ.
//   |- Причина - Строка - Причина по которой ИС ЭСФ отклонила ЭСФ или причина отзыва/аннулирования ЭСФ.
//   |- ДатаВыписки - Дата - Дата выписки ЭСФ.
//   |- РегистрационныйНомер - Строка - Регистрационный номер ЭСФ.
//   |- ДатаПоследнегоОбновления - Дата - Дата последнего обновления ЭСФ.
//   |- Номер - Строка - Номер ЭСФ.
//   |- ПользовательскийСтатус - ПеречислениеСсылка.ПользовательскиеСтатусыЭСФ - Пользовательский статус ЭСФ.
//   |- Статус - ПеречислениеСсылка.СтатусыЭСФ - Статус ЭСФ.
//
// Примечание:
//  Структура всегда содержит все вышеописанные элементы. Некоторые элементы могут быть пустыми.
//  Пустые элементы всегда имеют значение по умолчанию, для того типа, каким они являются, 
//  например, пустой РегистрационныйНомер будет иметь значение "".
//
Функция ДанныеСтатусаAwp(Знач AwpSummaryXDTO)
	                 
	ДанныеСтатуса = Новый Структура;
	
	ДанныеСтатуса.Вставить("Идентификатор", Формат(AwpSummaryXDTO.awpId, "ЧГ="));
	
	cancelReason = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "cancelReason", "");
	ДанныеСтатуса.Вставить("Причина", cancelReason);
	
	date = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "inputDate", "01.01.0001");
	ДанныеСтатуса.Вставить("Дата", ЭСФСервер.ДатаИБ(date));
	
	registrationNumber = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "registrationNumber", "");
	ДанныеСтатуса.Вставить("РегистрационныйНомер", registrationNumber);
	
	number = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "number", "");
	ДанныеСтатуса.Вставить("Номер", number);
	
	lastUpdateDate = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "lastUpdateDate", "01.01.0001");
	ДанныеСтатуса.Вставить("ДатаПоследнегоОбновления", ЭСФСервер.ДатаИБ(lastUpdateDate));
	
	senderTinList = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "senderTinList", Неопределено);
	Если senderTinList <> Неопределено Тогда
	senderTinList = ЭСФСервер.СписокXDTOИзОбъектXDTO(senderTinList);
	senderTin = senderTinList.Получить(0);
	ДанныеСтатуса.Вставить("ПоставщикБИН", ЭСФСервер.ПолучитьСвойство(senderTin, "senderTin", ""));
	КонецЕсли;
	
	recipientTinList = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "recipientTinList", Неопределено);
	Если recipientTinList <> Неопределено Тогда
	recipientTinList = ЭСФСервер.СписокXDTOИзОбъектXDTO(recipientTinList);
	recipientTin  = recipientTinList.Получить(0);
	ДанныеСтатуса.Вставить("ПолучательБИН", ЭСФСервер.ПолучитьСвойство(recipientTin, "recipientTin", ""));
	КонецЕсли;


	status = ЭСФСервер.ПолучитьСвойство(AwpSummaryXDTO, "status", "");
	ДанныеСтатуса.Вставить("Статус", АВРКлиентСервер.СтатусАВР(status));
	
	
	// На данный момент из ИС ЭСФ удален пользовательский статус (state).
	// Пользовательский статус не удален из конфигурации, т.к. есть вероятность, что его вернут в ИС ЭСФ. 
	//	ДанныеСтатуса.Вставить("ПользовательскийСтатус", Перечисления.ПользовательскиеСтатусыЭСФ.ПустаяСсылка());
	Возврат ДанныеСтатуса;
	
КонецФункции

Функция ПолучитьОшибкиАВРПоИдентификаторам(Знач МассивИдентификаторовАВР, Знач НаправлениеАВР, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьОшибкиВДокументах = Ложь) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;
	
	Результат = Новый Соответствие;	
	
	idList = "";	
	Для Каждого ИдентификаторЭСФ Из МассивИдентификаторовАВР Цикл
		Если ЗначениеЗаполнено(ИдентификаторЭСФ) Тогда
			idList = idList + "<id>" + ИдентификаторЭСФ + "</id>";
		КонецЕсли;	
	КонецЦикла;
	
	Если ПустаяСтрока(idList) Тогда
		Возврат Результат;
	КонецЕсли;	
		
	// Сформировать запрос на получение статусов по идентификаторам.
	ЗапросXML = ПолучитьМакет("ЗапросAwpQueryErrorByIdRequest").ПолучитьТекст();
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);
	ЗапросXML = СтрЗаменить(ЗапросXML, "[idList]", idList);
	
	// Выполнить запрос на получение статусов по идентификаторам.
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаAwpService());
	
	// Обработать результат запроса на получение статусов по идентификаторам.
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		Для Каждого ИдентификаторАВР Из МассивИдентификаторовАВР Цикл
			Результат.Вставить(ИдентификаторЭСФ, Неопределено);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		AwpErrorList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body.awpQueryErrorByIdResponse.awpErrorList, "awpError", Неопределено);
		
		Если AwpErrorList <> Неопределено Тогда
			
			AwpErrorList = ЭСФСервер.СписокXDTOИзОбъектXDTO(AwpErrorList);
			
			МассивИдентификаторовОшибочныхЭСФ = Новый Массив;
			// Заполнить Результат.
			Для Индекс = 0 По AwpErrorList.Количество() - 1 Цикл
				awpError = AwpErrorList.Получить(Индекс);
				ДанныеОшибки = ДанныеОшибкиAwr(awpError);
				Результат.Вставить(ДанныеОшибки.Идентификатор, ДанныеОшибки);
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			Если ОбновитьОшибкиВДокументах Тогда
				ОтразитьИзмененияОшибокЭСФ(Результат, СтруктурнаяЕдиница);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ОбновитьСтатусыЭСФПоИдентификаторам'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При получении статусов ЭСФ по идентификаторам возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиAwr(Знач AwpErrorList, ТаблицаЛокализацииОшибок = Неопределено)
	
	ДанныеОшибки = Новый Структура;
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Текст", Метаданные.Документы.ЭлектронныйДокументВС.ТабличныеЧасти.Ошибки.Реквизиты.Текст.Тип);
	ТаблицаОшибок.Колонки.Добавить("Поле",  Метаданные.Документы.ЭлектронныйДокументВС.ТабличныеЧасти.Ошибки.Реквизиты.Поле.Тип);
	ДанныеОшибки.Вставить("Идентификатор", Формат(AwpErrorList.awpId, "ЧГ="));
	
	errors = ЭСФСервер.ПолучитьСвойство(AwpErrorList.errors, "error", Неопределено);
	Если errors <> Неопределено Тогда
		errors = ЭСФСервер.СписокXDTOИзОбъектXDTO(errors);
		Для ИндексОшибки = 0 По errors.Количество() - 1 Цикл
			error = errors.Получить(ИндексОшибки);
				ОшибкаПоле = ЭСФСервер.ПолучитьСвойство(error, "property", "");
				// ОшибкаПоле может содержать тип ОбъектXDTO, который при передаче значения 
				// с сервера на клиент приводи к ошибке мутабельного значения.
				Если ТипЗнч(ОшибкаПоле) <> Тип("Строка") Тогда
					ОшибкаПоле = "";
				КонецЕсли;
				ОшибкаТекст = ЭСФСервер.ПолучитьСвойство(error, "text", "");
				Если ПустаяСтрока(ОшибкаТекст) Тогда
					Если ТаблицаЛокализацииОшибок = Неопределено Тогда
						ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
					КонецЕсли;
					ОшибкаКод = ЭСФСервер.ПолучитьСвойство(error, "errorCode", "");
					ОшибкаТекст = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, ОшибкаКод);
					ОшибкаТекст = ОшибкаТекст.ТекстИБ;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаОшибок.Добавить();
				СтрокаТаблицы.Поле = ОшибкаПоле;
				СтрокаТаблицы.Текст = ОшибкаТекст;
			
			КонецЦикла;
		ДанныеОшибки.Вставить("Ошибки", ТаблицаОшибок);

	КонецЕсли;
				
	Возврат ДанныеОшибки;
	
КонецФункции

// Обновляет документы ЭСФ, на основании новых данных статусов.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Коллеция статусов, изменение которых необходимо отразить.
//   Ключ - Строка - Идентификатор ЭСФ.
//   Значение - Струткруа - См. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов.
//
Процедура ОтразитьИзмененияСтатусовАВР(Знач КоллекцияСтатусовАВР, Знач СтруктурнаяЕдиница, Знач СоответствиеПодписейАВР = Неопределено, Знач Действие = "")
	
	СтарыеДанныеСтатусовАВР = НоваяВыборкаДанныеСтатусовАВР(КоллекцияСтатусовАВР, СтруктурнаяЕдиница);		
	
	Пока СтарыеДанныеСтатусовАВР.Следующий() Цикл
		
		НовыеДанныеСтатусовАВР = КоллекцияСтатусовАВР.Получить(СтарыеДанныеСтатусовАВР.Идентификатор);  
		
		Если НовыеДанныеСтатусовАВР <> Неопределено Тогда
			
			ОбновитьАВР = Ложь;
			
			ЕстьОшибки = НовыеДанныеСтатусовАВР.Свойство("Ошибки") И НовыеДанныеСтатусовАВР.Ошибки.Количество() > 0;
			
			Если ЕстьОшибки Тогда
				ОбновитьАВР = Истина;
			КонецЕсли;

			Если СтарыеДанныеСтатусовАВР.РегистрационныйНомер <> НовыеДанныеСтатусовАВР.РегистрационныйНомер Тогда
				ОбновитьАВР = Истина;
			КонецЕсли;
			
			Если СтарыеДанныеСтатусовАВР.Статус <> НовыеДанныеСтатусовАВР.Статус Тогда
				ОбновитьАВР = Истина;
			КонецЕсли;
			
			Если ОбновитьАВР Тогда
				
				ОбъектАВР = СтарыеДанныеСтатусовАВР.АВР.ПолучитьОбъект();
				
				Если (НовыеДанныеСтатусовАВР.Дата <> Дата(1, 1, 1)) И НовыеДанныеСтатусовАВР.Дата <> НачалоДня(ОбъектАВР.Дата) Тогда
					ОбъектАВР.Дата = НовыеДанныеСтатусовАВР.Дата;
					ОбъектАВР.УстановитьВремя();
				КонецЕсли;
				
				//Заполнение или обновление ЭЦП после изменения статуса
				Если СоответствиеПодписейАВР <> Неопределено Тогда
					ЗаполнитьЭЦППослеИзмененияСтатусаАВР(ОбъектАВР,
						Действие,
						СоответствиеПодписейАВР[ОбъектАВР.Идентификатор].Подпись,
						СоответствиеПодписейАВР[ОбъектАВР.Идентификатор].ТипПодписи);
				КонецЕсли;
							
				ОбъектАВР.Номер	= СтарыеДанныеСтатусовАВР.Номер; 
				ОбъектАВР.РегистрационныйНомер = НовыеДанныеСтатусовАВР.РегистрационныйНомер;
				//ОбъектЭСФ.ПользовательскийСтатус = НовыеДанныеСтатусовЭСФ.ПользовательскийСтатус;
				ОбъектАВР.Статус = НовыеДанныеСтатусовАВР.Статус;
				ОбъектАВР.ДатаПринятияСтатуса = НовыеДанныеСтатусовАВР.ДатаПоследнегоОбновления;				
				// Отразить содержимое узла cancelReason.
				Если ЕстьОшибки Тогда
					ОбъектАВР.Ошибки.Очистить();
					Для Каждого Строка из НовыеДанныеСтатусовАВР.Ошибки Цикл
						ОшибкиСтрока = ОбъектАВР.Ошибки.Добавить();	
						ОшибкиСтрока.Текст = Строка.Текст;
						ОшибкиСтрока.Поле = Строка.Поле;
					КонецЦикла;
					
					// Отразить содержимое узла cancelReason.
				ИначеЕсли НЕ ПустаяСтрока(НовыеДанныеСтатусовАВР.Причина) Тогда
					
					Если ПустаяСтрока(НовыеДанныеСтатусовАВР.РегистрационныйНомер) Тогда
						
						ОшибкиСтрока = ОбъектАВР.Ошибки.Добавить();
						ОшибкиСтрока.Текст = НовыеДанныеСтатусовАВР.Причина;
						ОшибкиСтрока.Поле = "";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(НовыеДанныеСтатусовАВР.Причина) Тогда
					
					Если НовыеДанныеСтатусовАВР.Статус = Перечисления.СтатусыЭСФ.Отозванный
						ИЛИ НовыеДанныеСтатусовАВР.Статус = Перечисления.СтатусыЭСФ.Аннулированный Тогда
						
						ОбъектАВР.Причина = ПричинаИБ(НовыеДанныеСтатусовАВР.Причина);
						
					КонецЕсли;

				КонецЕсли;
				
				ОбъектАВР.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭЦППослеИзмененияСтатусаАВР(ОбъектАВР, Действие, Подпись, ТипПодписи)
	
	УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
	Если Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		ОбъектАВР.ЭЦППолучателя = Подпись;
		ОбъектАВР.ТипПодписиПолучателя = ТипПодписи;
		ОбъектАВР.УполномоченныйСотрудникПолучателя = УполномоченныйСотрудник;
		ОбъектАВР.ДатаПодписиПолучателя = ТекущаяДата();
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		ОбъектАВР.ЭЦПОтправителя = Подпись;
		ОбъектАВР.ТипПодписиОтправителя = ТипПодписи;
		ОбъектАВР.УполномоченныйСотрудник = УполномоченныйСотрудник;
		ОбъектАВР.ДатаПодписи = ТекущаяДата();
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
		ОбъектАВР.ЭЦППолучателя = Подпись;
		ОбъектАВР.ТипПодписиПолучателя = ТипПодписи;
		ОбъектАВР.УполномоченныйСотрудникПолучателя = УполномоченныйСотрудник;
		ОбъектАВР.ДатаПодписиПолучателя = ТекущаяДата();
	ИначеЕсли ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Исходящий И
		(Действие = АВРКлиентСервер.ДействиеРасторжение() 
		ИЛИ Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения()
		ИЛИ Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения()) Тогда
		ОбъектАВР.ЭЦПОтправителя = Подпись;
		ОбъектАВР.ТипПодписиОтправителя = ТипПодписи;
		ОбъектАВР.УполномоченныйСотрудник = УполномоченныйСотрудник;
		ОбъектАВР.ДатаПодписи = ТекущаяДата();
	ИначеЕсли ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Входящий И
		(Действие = АВРКлиентСервер.ДействиеРасторжение() 
		ИЛИ Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения()
		ИЛИ Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения())Тогда
		ОбъектАВР.ЭЦППолучателя = Подпись;
		ОбъектАВР.ТипПодписиПолучателя = ТипПодписи;
		ОбъектАВР.УполномоченныйСотрудникПолучателя = УполномоченныйСотрудник;
		ОбъектАВР.ДатаПодписиПолучателя = ТекущаяДата();
	КонецЕсли;
	
	
КонецПроцедуры

// Возвращает выборку, содержащую данные статусов существующих ЭСФ.
//
// Параметры:
//  КоллекцияСтатусовЭСФ - Соответствие - Статусы, для которых необходимо получить статусы документов ЭСФ. 
//   |- Ключ - Строка - Идентификатор ЭСФ.
//   |- Значение - Струткруа - Данные статуса, см. в описании функции ДанныеСтатусаInvoice().
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все статусы в коллекции статусов. 
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка, содержащая все идентификаторы  
//   из КоллекцияСтатусовЭСФ и данные статусов существующих ЭСФ.
//
Функция НоваяВыборкаДанныеСтатусовАВР(Знач КоллекцияСтатусовАВР, Знач СтруктурнаяЕдиница)
		
	ТабЗначИдентификаторы = Новый ТаблицаЗначений;
	ТабЗначИдентификаторы.Колонки.Добавить("Идентификатор", Метаданные.Документы.ЭлектронныйАктВыполненныхРабот.Реквизиты.Идентификатор.Тип);	
	Для Каждого ЭлементКоллекции Из КоллекцияСтатусовАВР Цикл
		СтрокаТабЗначИдентификаторы = ТабЗначИдентификаторы.Добавить();
		СтрокаТабЗначИдентификаторы.Идентификатор = ЭлементКоллекции.Ключ;		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗначИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	&ТабЗначИдентификаторы КАК ТабЗначИдентификаторы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Идентификатор КАК Идентификатор,
	|	АВР.Ссылка,
	|	АВР.РегистрационныйНомер,
	|	АВР.Статус,
	|	АВР.Номер,
	|	АВР.СтруктурноеПодразделение,
	|	АВР.Организация
	|ПОМЕСТИТЬ АВР
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|ГДЕ
	|	АВР.Идентификатор В
	|			(ВЫБРАТЬ
	|				Идентификаторы.Идентификатор
	|			ИЗ
	|				Идентификаторы КАК Идентификаторы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идентификаторы.Идентификатор КАК Идентификатор,
	|	АВР.Ссылка КАК АВР,
	|	АВР.РегистрационныйНомер КАК РегистрационныйНомер,
	|	АВР.Статус КАК Статус,
	|	АВР.Номер КАК Номер,
	|	АВР.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	АВР.Организация КАК Организация
	|ИЗ
	|	Идентификаторы КАК Идентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ АВР КАК АВР
	|		ПО Идентификаторы.Идентификатор = АВР.Идентификатор";
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВР.СтруктурноеПодразделение,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И АВР.СтруктурноеПодразделение = &СтруктурноеПодразделение", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВР.СтруктурноеПодразделение КАК СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабЗначИдентификаторы", ТабЗначИдентификаторы);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Возвращает массив объектов ЭСФ, которые необходимо обработать при синхронизации с ИС ЭСФ.
// Объекты ЭСФ находятся по идентификатору из InvoiceInfoList и структурной единице.
// Поиск выполняется среди входящих и исходящих ЭСФ.
//
// Параметры:
//  InvoiceInfoList - СписокXDTO - Список invoice, для которых необходимо найти документы ЭСФ.
//   Если в InvoiceInfoList есть Черновик, Импортированный, Ошибочный, то для них не находятся и не создаются объекты ЭСФ.
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой принадлежат все invoice из InvoiceInfoList.
//  ТолькоСуществующиеЭСФ - Булево - Если Истина, то вернет только те ЭСФ, которые уже есть в ИБ.
//   Если Ложь, то верент ЭСФ которые есть в ИБ, а для тех, которых нет в ИБ создаст новые объекты ЭСФ, но не будет записывать их.
//  УчитыватьВсеСтатусыЭСФ - Булево - Если Истина, то массив будет включать все ЭСФ: 
//   Черновики, Импортированные, Ошибочные, Доставленные, Отправленные и т.д.
//   Если Ложь, то массив будет включать все ЭСФ, кроме Черновик, Ошибочный, Импортированный.
//
// Возвращаемое значение:
//  Массив - Массив найденных объектов ЭСФ. Каждый элемент массива имеет тип ДокументОбъект.ЭСФ.
//
Функция НовыйМассивЗагружаемыхАВР(Знач AwpInfoList, Знач СтруктурнаяЕдиница, Знач ТолькоСуществующиеАВР, Знач УчитыватьВсеСтатусыЭСФ, Пользователь = Неопределено)
	
	МассивАВР = Новый Массив;
	
	// Создать массив идентификаторов Awp.
	МассивИдентификаторов = Новый Массив;
	Для Каждого AwpInfo Из AwpInfoList Цикл
		
		Если УчитыватьВсеСтатусыЭСФ Тогда
			
			МассивИдентификаторов.Добавить(AwpInfo.awpId);
			
		Иначе
			
			СтатусAwp = АВРКлиентСервер.СтатусАВР(AwpInfo.Status);
			
			Если СтатусAwp <> Перечисления.СтатусыАВР.Черновик 
				И СтатусAwp <> Перечисления.СтатусыАВР.Ошибочный
				И СтатусAwp <> Перечисления.СтатусыАВР.Импортированный Тогда
				
				МассивИдентификаторов.Добавить(AwpInfo.awpId);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСуществующихАВР = НайтиСуществующиеАВРПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);
	
	// Создать массив старых и новых объектов АВР.
	// Если ТолькоСуществующиеАВР, то только старых объектов ЭСФ.
	Для Каждого ЭлементКоллекции Из КоллекцияСуществующихАВР Цикл
		
		ИдентификаторАВР = ЭлементКоллекции.Ключ;
		СсылкаАВР = ЭлементКоллекции.Значение;
		
		Если СсылкаАВР.Пустая() Тогда
			Если НЕ ТолькоСуществующиеАВР Тогда
				ОбъектАВР = Документы.ЭлектронныйАктВыполненныхРабот.СоздатьДокумент();
				ОбъектАВР.Идентификатор = ИдентификаторАВР;
				
				ТекущийПользователь = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				ТекущийПользовательНеУказан = ЭСФСерверПереопределяемый.ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь);
				Если ТекущийПользовательНеУказан Тогда  
					ОбъектАВР.Автор = Пользователь;
				Иначе
					ОбъектАВР.Автор = ТекущийПользователь;
				КонецЕсли;
				
				МассивАВР.Добавить(ОбъектАВР);
			КонецЕсли;
		Иначе
			МассивАВР.Добавить(СсылкаАВР.ПолучитьОбъект());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивАВР;
	
КонецФункции

// См. ЭСФСервер.НайтиСуществующиеЭСФПоИдентификаторам()
Функция НайтиСуществующиеАВРПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт
		
	// Создать пустую таблицу параметров поиска ЭСФ.	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	Иначе
		ИменаРеквизитов = "Идентификатор, ПометкаУдаления";
	КонецЕсли;
	ПараметрыПоискаДокументовАВР = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, Метаданные.Документы.ЭлектронныйАктВыполненныхРабот);
	
	// Заполнить таблицу параметров поиска ЭСФ.
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		ОписаниеАВР = ПараметрыПоискаДокументовАВР.Добавить();
		ОписаниеАВР.Идентификатор = Идентификатор;
		ОписаниеАВР.ПометкаУдаления = Ложь;
	КонецЦикла;
	
	ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(СтруктурнаяЕдиница);
	ИдентификационныйНомер = ДанныеСтруктурнойЕдиницы.ИдентификационныйНомер;
	НайденныеДокументыАВР = НайтиСсылкиАВРПоЗначениямРеквизитов(ПараметрыПоискаДокументовАВР, Метаданные.Документы.ЭлектронныйАктВыполненныхРабот, ИдентификационныйНомер);
	
	СуществующиеАВР = Новый Соответствие;
	
	// Заполнить соответствие пустыми ссылками.
	ПустаяСсылка = Документы.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка();
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СуществующиеАВР.Вставить(Идентификатор, ПустаяСсылка);
	КонецЦикла;
	
	// Установить ссылки на документы ЭСФ, если они нашлись.
	Для Каждого СтрокаТаблицы Из НайденныеДокументыАВР Цикл
		// Обработаем ситуацию, когда в одной базе выполняется выставление и получение ЭСФ двух организаций друг другу
		// В указанной ситуации, после получения ЭСФ в базе формируется две ЭСФ с одним и тем же номером, датой и идентификатором (различается направление)
		// При работе НайтиСсылкиПоЗначениямРеквизитов будут получены две строки по таким ЭСФ, у одной из которых ссылка будет очищена 
		// Если в СуществующиеЭСФ уже есть ссылка на ЭСФ, то не заменяем из строки с очищенной ЭСФ в функции НайтиСсылкиПоЗначениямРеквизитов 
		Если НЕ ЗначениеЗаполнено(СуществующиеАВР.Получить(СтрокаТаблицы.Идентификатор)) Тогда
			СуществующиеАВР.Вставить(СтрокаТаблицы.Идентификатор, СтрокаТаблицы.НайденнаяСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеАВР;
	
КонецФункции

// Находит ссылки на документы, справочники и т.д. по переданным значениям реквизитов.
//
// Параметры:
// ЗначенияРеквизитов - ТаблицаЗначений - Параметры поиска ссылок.
// Колонки - Имена реквизитов. 
// Строки - Значения реквизитов.    
// Для формирования параметра можно использовать: ЭСФСервер.НовыеПараметрыПоискаСсылок().
// ОбъектМетаданных - ОбъектМетаданных - Объект, ссылки на элементы которого необходимо найти. 
// Например, Метаданные.Документы.ЭСФ, если необходимо найти ссылки на документы ЭСФ.
//
// Возвращаемое значение:
// ТаблицаЗначений - Найденные ссылки.
// Содержит все колонки и строки из таблицы ЗначенияРеквизитов,
// а также колонку "НайденнаяСсылка", в которой находятся найденные ссылки.
// Если объекта, удовлетворяющих условиям поиска не найдено, 
// то в колонке ""НайденнаяСсылка"" содержится пустая ссылка на ОбъектМетаданных.
// Если найдено несколько объектов, удовлетворяющих условиям поиска,
// то в таблице будет несколько строк, с одинаковыми значениями реквизитов, но разными ссылками.
//
// Пример:
// // Найти документы ЭСФ, которые имеют комбинацю номера и даты: 
// // ("0001" и '2014-01-01') или ("0002" и '2014-02-02').
// ПараметрыПоиска = ЭСФСервер.НовыеПараметрыПоискаСсылок("Номер, Дата", Метаданные.Документы.ЭСФ);
// СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
// СтрокаПараметровПоиска.Номер = "0001";
// СтрокаПараметровПоиска.Дата = '2014-01-01';
// СтрокаПараметровПоиска = ПараметрыПоиска.Добавить();
// СтрокаПараметровПоиска.Номер = "0002";
// СтрокаПараметровПоиска.Дата = '2014-02-02';
// НайденныеСсылки = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСсылкиЭДВСПоЗначениямРеквизитов(ПараметрыПоиска, Метаданные.Документы.ЭСФ);
//
Функция НайтиСсылкиАВРПоЗначениямРеквизитов(Знач ЗначенияРеквизитов, Знач ОбъектМетаданных, Знач ИдентификационныйНомер = Неопределено) Экспорт
    
    ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
    ИмяВидаОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1); // "Документ", "Справочник" и т.д.
    ИмяОбъекта = ОбъектМетаданных.Имя;
    
    // Сформировать массив имен реквизитов.
    МассивИменРеквизитов = Новый Массив;
    Для Каждого Колонка Из ЗначенияРеквизитов.Колонки Цикл
        МассивИменРеквизитов.Добавить(Колонка.Имя);    
    КонецЦикла;
    
    // Подготовить строку запроса %ИменаРеквизитов%.
    ИменаРеквизитов = "";
    Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
        ИменаРеквизитов = ИменаРеквизитов + "ЗначенияРеквизитов." + ИмяРеквизита + ", ";    
    КонецЦикла;
    Если Прав(ИменаРеквизитов, 2) = ", " Тогда
        ИменаРеквизитов = Сред(ИменаРеквизитов, 1, СтрДлина(ИменаРеквизитов) - 2);    
    КонецЕсли;
    
    // Подготовить строку запроса %УсловияСоединения%.
    УсловияСоединения = "";
    Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
        Условие = "(ЗначенияРеквизитов.%ИмяРеквизита% = %ИмяОбъекта%.%ИмяРеквизита%)";
        Условие = СтрЗаменить(Условие, "%ИмяОбъекта%", ИмяОбъекта);
        Условие = СтрЗаменить(Условие, "%ИмяРеквизита%", ИмяРеквизита);
        УсловияСоединения = УсловияСоединения + Условие + " И ";    
    КонецЦикла;    
    Если Прав(УсловияСоединения, 3) = " И " Тогда
        УсловияСоединения = Сред(УсловияСоединения, 1, СтрДлина(УсловияСоединения) - 3);    
    КонецЕсли;
    
    // Сформировать текст запроса.
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    %ИменаРеквизитов%
    |ПОМЕСТИТЬ ЗначенияРеквизитов
    |ИЗ
    |    &ЗначенияРеквизитов КАК ЗначенияРеквизитов
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |    %ИменаРеквизитов%,
    |    ЕСТЬNULL(%ИмяОбъекта%.Ссылка, ЗНАЧЕНИЕ(%ИмяВидаОбъекта%.%ИмяОбъекта%.ПустаяСсылка)) КАК НайденнаяСсылка
    |ИЗ
    |    ЗначенияРеквизитов КАК ЗначенияРеквизитов
    |        ЛЕВОЕ СОЕДИНЕНИЕ %ИмяВидаОбъекта%.%ИмяОбъекта% КАК %ИмяОбъекта%
    |        ПО (%УсловияСоединения%)";    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИменаРеквизитов%", ИменаРеквизитов);    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловияСоединения%", УсловияСоединения);    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяОбъекта%", ИмяОбъекта);    
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяВидаОбъекта%", ИмяВидаОбъекта);    
    Запрос.УстановитьПараметр("ЗначенияРеквизитов", ЗначенияРеквизитов);
    
    РезультатПоиска = Запрос.Выполнить().Выгрузить();
    //////////////////////////////////////////////////////////////////////////////
    // Удалить из результатов поиска документы ЭСФ, которые не принадлежат указанной структурной единице.
    // Работает только для документов ЭСФ, для остальных объектов переменная ОтборПоСтруктурнойЕдинице должна быть Неопределено.
    
    Если ИдентификационныйНомер <> Неопределено Тогда
        
       Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронныйАктВыполненныхРаботПоставщики.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот.Поставщики КАК ЭлектронныйАктВыполненныхРаботПоставщики
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРаботПоставщики.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭлектронныйАктВыполненныхРабот.Ссылка
		|			ИЗ
		|				Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
		|			ГДЕ
		|				ЭлектронныйАктВыполненныхРабот.Ссылка В (&МассивАВР)
		|				И ЭлектронныйАктВыполненныхРабот.Направление = &Исходящий)
		|	И (ЭлектронныйАктВыполненныхРаботПоставщики.ПоставщикИдентификатор = &ИдентификационныйНомер
		|			ИЛИ ЭлектронныйАктВыполненныхРаботПоставщики.БИНФилиала = &ИдентификационныйНомер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭлектронныйАктВыполненныхРаботПолучатели.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот.Получатели КАК ЭлектронныйАктВыполненныхРаботПолучатели
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРаботПолучатели.Ссылка В
		|			(ВЫБРАТЬ
		|				ЭлектронныйАктВыполненныхРабот.Ссылка
		|			ИЗ
		|				Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
		|			ГДЕ
		|				ЭлектронныйАктВыполненныхРабот.Ссылка В (&МассивАВР)
		|				И ЭлектронныйАктВыполненныхРабот.Направление = &Входящий)
		|	И (ЭлектронныйАктВыполненныхРаботПолучатели.ПолучательИдентификатор = &ИдентификационныйНомер
		|			ИЛИ ЭлектронныйАктВыполненныхРаботПолучатели.БИНФилиала = &ИдентификационныйНомер)";
		
		Запрос.УстановитьПараметр("МассивАВР", РезультатПоиска.ВыгрузитьКолонку("НайденнаяСсылка"));
		Запрос.УстановитьПараметр("Исходящий", Перечисления.НаправленияЭСФ.Исходящий);
		Запрос.УстановитьПараметр("Входящий", Перечисления.НаправленияЭСФ.Входящий);
		Запрос.УстановитьПараметр("ИдентификационныйНомер", ИдентификационныйНомер);
        
        ТаблицаАВРПринадлежащихСтруктурнойЕдинице = Запрос.Выполнить().Выгрузить();
        МассивАВРПринадлежащихСтруктурнойЕдинице = ТаблицаАВРПринадлежащихСтруктурнойЕдинице.ВыгрузитьКолонку("Ссылка");
        
        // Удалить из результатов поиска документы АВР, которые не принадлежат указанной структурной единице.            
        Для Каждого СтрокаРезультата Из РезультатПоиска Цикл                
            Если МассивАВРПринадлежащихСтруктурнойЕдинице.Найти(СтрокаРезультата.НайденнаяСсылка) = Неопределено Тогда                        
                
                // Если Истина, значит АВР не принадлежит указанной структурной единице,
                // поэтому ссылку на данный ЭСФ нужно очистить.
                СтрокаРезультата.НайденнаяСсылка = Документы.ЭлектронныйАктВыполненныхРабот.ПустаяСсылка();;
                
            КонецЕсли;
        КонецЦикла;
        
	КонецЕсли;
	        
    Возврат РезультатПоиска;
    
КонецФункции

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов() 
Функция ВыполнитьЗапросНаИзменениеСтатусовАВР(Знач Действие, Знач ЗапросXML, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено, СоответствиеПодписейАВР = Неопределено) Экспорт
	
	ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	СтруктурнаяЕдиница = ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.Ссылка;	
	
	Если ИдентификаторСессии = Неопределено Тогда
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ);
		ЗакрытьСессию = Истина;	
	Иначе
		ЗакрытьСессию = Ложь;
	КонецЕсли;
	
	ЗапросXML = СтрЗаменить(ЗапросXML, "[sessionId]", ИдентификаторСессии);	
	ОтветXML = ВыполнитьМетодВебСервиса(ЗапросXML, ИмяСервисаAwpService());
	
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоМодульнаяОшибка(ОтветXML, ИнформацияОбОшибке) Тогда
		
		ИменаЭлементовРезультата = "ТекущийСтатус, СтатусИзменился, Ошибка";
		ИменаЭлементовОшибки = "Есть, Код, Представление, Расшифровка";
		
		// Выполнить начальное заполнение результата по ЗапросXML.
		КоллекцияРезультатов = Новый Соответствие;
		ЗапросXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ЗапросXML, ФабрикаXDTO);
		ИмяУзла = ЗапросXDTO.Body.Свойства()[0].Имя;
		awpActionInfoList = ЭСФСервер.СписокXDTOИзОбъектXDTO(ЗапросXDTO.Body[ИмяУзла].awpActionInfoList.awpActionInfo);
		Для Индекс = 0 По awpActionInfoList.Количество() - 1 Цикл
			awpActionInfo = awpActionInfoList.Получить(Индекс);	
			Идентификатор = awpActionInfo.awpId;
			Результат = Новый Структура(ИменаЭлементовРезультата);
			Результат.СтатусИзменился = Ложь;
			
			Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
			Результат.Ошибка.Есть = Ложь;
			Результат.Ошибка.Код = "";
			Результат.Ошибка.Представление = "";
			Результат.Ошибка.Расшифровка = "";
			
			КоллекцияРезультатов.Вставить(Идентификатор, Результат);	
		КонецЦикла;
		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);
		ИмяУзла = ОтветXDTO.Body.Свойства()[0].Имя;
		changeStatusResultList = ЭСФСервер.ПолучитьСвойство(ОтветXDTO.Body[ИмяУзла].resultList, "changeStatusResult", Неопределено);
		
		// Заполнить КоллекцияРезультатов, обновить документы ЭСФ.
		Если changeStatusResultList <> Неопределено Тогда
			
			changeStatusResultList = ЭСФСервер.СписокXDTOИзОбъектXDTO(changeStatusResultList);
			
			// Заполнить КоллекцияРезультатов.
			Для ИндексChangeStatusResultList = 0 По changeStatusResultList.Количество() - 1 Цикл
				
				Результат = Новый Структура(ИменаЭлементовРезультата);
				Результат.Ошибка = Новый Структура(ИменаЭлементовОшибки);
				
				changeStatusResult = changeStatusResultList.Получить(ИндексChangeStatusResultList);	
				Результат.ТекущийСтатус = ДанныеСтатусаAwp(changeStatusResult.awpSummary);				
				Результат.СтатусИзменился = ?(ВРег(changeStatusResult.isChanged) = "TRUE", Истина, Ложь);
				
				// Заполнить сведения об ошибке, если она произошла при изменении статуса.
				КодОшибки = ЭСФСервер.ПолучитьСвойство(changeStatusResult, "errorCode", "");				
				Если КодОшибки <> "" Тогда	
					Результат.Ошибка.Есть = Истина;
					Результат.Ошибка.Код = КодОшибки;
					ДанныеОшибки = ДанныеОшибкиИзмененияСтатусаАВР(КодОшибки, Действие);
					Результат.Ошибка.Представление = ДанныеОшибки.Представление;
					Результат.Ошибка.Расшифровка = ДанныеОшибки.Расшифровка;
				Иначе
					Результат.Ошибка.Есть = Ложь;
				КонецЕсли;
								
				КоллекцияРезультатов.Вставить(Результат.ТекущийСтатус.Идентификатор, Результат);
				
			КонецЦикла;
			
			// Обновить документы ЭСФ.
			КоллекцияСтатусовАВР = Новый Соответствие;
			Для Каждого ЭлементКоллекции ИЗ КоллекцияРезультатов Цикл
				КоллекцияСтатусовАВР.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение.ТекущийСтатус); 
			КонецЦикла;
			ОтразитьИзмененияСтатусовАВР(КоллекцияСтатусовАВР, СтруктурнаяЕдиница, СоответствиеПодписейАВР, Действие);
			
		КонецЕсли;
		
		Если ЗакрытьСессию Тогда
			ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
			ИдентификаторСессии = Неопределено;
		КонецЕсли;
		
	Иначе
		
		ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.ВыполнитьЗапросНаИзменениеСтатусов'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'При отзыве ЭСФ возникла ошибка.'") + Символы.ПС + ИнформацияОбОшибке.ПодробноеПредставление;
		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

Процедура ОбработатьРезультатыИзмененияСтатусовАВР(Знач КоллекцияРезультатовИзмененияСтатусов, Форма) Экспорт
	
	Для Каждого РезультатИзмененияСтатуса Из КоллекцияРезультатовИзмененияСтатусов Цикл
		
		// Найти строки по идентификатору.
		ПараметрыОтбора = Новый Структура("Идентификатор", РезультатИзмененияСтатуса.Ключ);
		МассивНайденныхСтрок = Форма.СписокАВР.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайденнаяСтрока Из МассивНайденныхСтрок Цикл
			
			Если РезультатИзмененияСтатуса.Значение.ТекущийСтатус <> Неопределено Тогда
				
				// Заполнить колонку "Статус".
				НайденнаяСтрока.Статус = РезультатИзмененияСтатуса.Значение.ТекущийСтатус.Статус;
				
				// Заполнить колонки ошибки.
				Если РезультатИзмененияСтатуса.Значение.Ошибка.Есть Тогда
					
					НайденнаяСтрока.ОшибкаЕсть = Истина;
					НайденнаяСтрока.ОшибкаПредставление = РезультатИзмененияСтатуса.Значение.Ошибка.Представление;
					НайденнаяСтрока.ОшибкаРасшифровка = РезультатИзмененияСтатуса.Значение.Ошибка.Расшифровка;
					
				Иначе
					
					НайденнаяСтрока.ОшибкаЕсть = Ложь;
					НайденнаяСтрока.ОшибкаПредставление = "";
					НайденнаяСтрока.ОшибкаРасшифровка = "";
					
				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрока.ОшибкаЕсть = Истина;
				НайденнаяСтрока.ОшибкаПредставление = НСтр("ru = 'АВР не найден в ИС ЭСФ.'");
				
				ТекстРасшифровки = НСтр("ru = 'Акт выполненных работ, с идентификатором ""%Идентификатор%"", не найден в ИС ЭСФ.'");
				ТекстРасшифровки = СтрЗаменить(ТекстРасшифровки, "%Идентификатор%", РезультатИзмененияСтатуса.Ключ);
				НайденнаяСтрока.ОшибкаРасшифровка = ТекстРасшифровки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов()          
Функция СоздатьЗапросНаИзменениеСтатусовАВР(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеКлючаЭЦП, Знач ТипПодписиЭСФ) Экспорт
		

	// Сформировать текст запроса.
	ТекстЗапроса = ПолучитьМакет("ЗапросAwpChangeStatus").ПолучитьТекст();
	awpActionInfoList = "";
	awpActionInfo = "<awpActionInfo><awpActionBody><![CDATA[[AwpAction]]]></awpActionBody><signature>[Signature]</signature><signatureType>[signatureType]</signatureType><awpId>[awpId]</awpId><certificate>[x509Certificate]</certificate></awpActionInfo>";	
	awpAction = "<v1:awpAction xmlns:aawp=""abstractAwp.awp"" xmlns:v1=""v1.awp""><actionType>[actionType]</actionType><awpId>[awpID]</awpId><originalDocumentSignature>[originalDocumentSignature]</originalDocumentSignature><cause>[cause]</cause></v1:awpAction>";
	МассивЧастейЗапроса = Новый Массив;
	
	Для Каждого ЭлементКоллеции Из КоллецияДляИзмененияСтатусов Цикл
		
		awpActionInfoТекущегоДокумента = awpActionInfo;
		awpActionТекущегоДокумента = awpAction;

		
		// Заполнить параметр [Действие].
		Если Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
			ТекстДействие = "REVOKE";
		ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
			ТекстДействие = "CONFIRM";
			awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "<cause>[cause]</cause>", "");
		ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
			ТекстДействие = "DECLINE";
		ИначеЕсли Действие = АВРКлиентСервер.ДействиеРасторжение() Тогда
			ТекстДействие = "TERMINATE";
		ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения() Тогда
			ТекстДействие = "CONFIRM_TERMINATION";
			awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "<cause>[cause]</cause>", "");
		ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения() Тогда
			ТекстДействие = "DECLINE_TERMINATION";	
		Иначе
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОбменЭСФ.СоздатьЗапросНаИзменениеСтатусовАВР'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		КонецЕсли;
		
		
		ДанныеАВР = ЭлементКоллеции.Значение;
		awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "[awpID]", ДанныеАВР.ИД);
		awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "[cause]", ДанныеАВР.Причина);
		awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "[actionType]", ТекстДействие);
		awpActionТекущегоДокумента = СтрЗаменить(awpActionТекущегоДокумента, "[originalDocumentSignature]", ДанныеАВР.ЭЦП);	

		awpActionInfoТекущегоДокумента = СтрЗаменить(awpActionInfoТекущегоДокумента, "[AwpAction]", awpActionТекущегоДокумента);
		awpActionInfoТекущегоДокумента = СтрЗаменить(awpActionInfoТекущегоДокумента, "[x509Certificate]", ДанныеКлючаЭЦП.ОткрытыйСертификатBase64);
		awpActionInfoТекущегоДокумента = СтрЗаменить(awpActionInfoТекущегоДокумента, "[awpId]", ДанныеАВР.ИД);
		awpActionInfoТекущегоДокумента = СтрЗАменить(awpActionInfoТекущегоДокумента, "[signatureType]", ЭСФКлиентСервер.ТипПодписиИСЭСФ(ТипПодписиЭСФ)); 
		
		МассивЧастейЗапроса.Добавить(Новый Структура("ИД, ЧастьЗапроса, СтрокаДляПодписи", ДанныеАВР.ИД, awpActionInfoТекущегоДокумента, awpActionТекущегоДокумента));
		
	КонецЦикла;

	СтрокаДляПодписи = "";
	
	Результат = Новый Структура("ТекстЗапроса, МассивЧастейЗапроса", ТекстЗапроса, МассивЧастейЗапроса);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеОшибкиИзмененияСтатусаАВР(Знач КодОшибки, Знач Действие)
	
	ДанныеОшибки = Новый Структура;
	ДанныеОшибки.Вставить("Код", КодОшибки);
	ДанныеОшибки.Вставить("Представление", "");
	ДанныеОшибки.Вставить("Расшифровка", "");
		
	// Заполнить представление ошибки.
	Если КодОшибки = "WRONG_STATUS" Тогда
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный статус ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_TYPE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Некорректный тип ЭСФ'");	
		
	ИначеЕсли КодОшибки = "WRONG_DATE" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Истек срок возможности отклонения ЭСФ'");	
	ИначеЕсли КодОшибки = "SIGNATURE_VERIFICATION_FAILED" Тогда 
		
		ДанныеОшибки.Представление = НСтр("ru = 'Ошибка проверки подписи при изменении статуса'");		
	Иначе
		
		ДанныеОшибки.Представление = КодОшибки;	
		
	КонецЕсли;
	
	// Заполнить расшифровку ошибки.
	Если КодОшибки = "WRONG_DATE" Тогда
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'Истек срок возможности отклонения ЭСФ.'");	
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		
		ДанныеОшибки.Расшифровка = НСтр(
			"ru = 'Допускается отзывать только обычные ЭСФ, которые находятся в статусах ""Создан"" или ""Доставлен"".
			|Дополнительные ЭСФ и исправленные ЭСФ отзывать не допускается.'");
		
	ИначеЕсли 
			
		Действие = ЭСФКлиентСервер.ДействиеОтклонениеОтзыва() Тогда
		
		ДанныеОшибки.Расшифровка = НСтр(
			 "ru = 'Допускается отклонять отозванные ЭСФ, а также дополнительные и исправленные ЭСФ.
			 |Отклоняемый ЭСФ должен иметь статус ""Доставленный"" или ""Отозванный"".'");
					
	Иначе	
		
		ДанныеОшибки.Расшифровка = НСтр("ru = 'ЭСФ имеет статус, который не позволяет выполнить выбранное действие.'");
		
	КонецЕсли;

		
	Возврат ДанныеОшибки;
		
КонецФункции

// См. АВРСервер.ЗаполнитьИсходящийАВР()
Процедура ЗаполнитьИсходящийАВР(Знач ДанныеЗаполнения, ОбъектАВР) Экспорт
	
	АВРСерверПереопределяемый.ЗаполнитьИсходящийАВР(ДанныеЗаполнения, ОбъектАВР)
	
КонецПроцедуры

// Функция создает несколько ЭАВР на основании нескольких документов.
//
Функция СоздатьСписокИсходящихАВР(МассивОснований) Экспорт
	
	Возврат АВРСерверПереопределяемый.СоздатьСписокИсходящихАВР(МассивОснований)
	
КонецФункции

Функция ПроверитьДокументОснованияЭАВР(ДокументОснования) Экспорт
	Возврат АВРСерверПереопределяемый.ПроверитьДокументОснованияЭАВР(ДокументОснования);
КонецФункции

#Область ПеренаправляемыеФункцииЭАВР

Функция ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(ПараметрКоманды) Экспорт
	Возврат АВРСервер.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(ПараметрКоманды);
КонецФункции

#КонецОбласти

#КонецОбласти 

ВерсияБЭСФ = "1.0.8.1";
