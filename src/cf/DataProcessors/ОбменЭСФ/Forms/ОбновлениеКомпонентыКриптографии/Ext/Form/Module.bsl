#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБазаФайловая = ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	
	БиблиотекаЗагружена = Ложь; // Заполним флаг расчете версий библиотеки
	
	// Установить переключатель МестоУстановкиБиблиотеки.
	МестоУстановкиБиблиотеки = Константы.МестоВыполненияКриптографическихОпераций.Получить();
	Если МестоУстановкиБиблиотеки = Перечисления.МестаВыполненияКриптографическихОпераций.ПустаяСсылка() Тогда
		МестоУстановкиБиблиотеки = ?(ИнформационнаяБазаФайловая, Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте, Перечисления.МестаВыполненияКриптографическихОпераций.НаСервере);
		Константы.МестоВыполненияКриптографическихОпераций.Установить(МестоУстановкиБиблиотеки);
	КонецЕсли;
	
	ПрочитатьСпособыОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленМодульКриптографии" Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотеки();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьКриптобиблиотеку(Команда)	
	
	Если СтатусКомпоненты = "НеУстановлена" Тогда
		
		ПоказатьПользовательскоеСоглашение("Заключение");
		
	ИначеЕсли СтатусКомпоненты = "ТребуетОбновления" Тогда
		
		ПоказатьПользовательскоеСоглашение("Обновление");
		
	Иначе
	
		УникальныйИдентификаторФормыКлиента = ЭтаФорма.УникальныйИдентификатор;	
		Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
		СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента);	
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаКомпонентыЗавершение", ЭтаФорма);		
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, СсылкаНаМодуль);
		ОбновитьПовторноИспользуемыеЗначения();
	
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура УстановкаКомпонентыЗавершение(Результат)Экспорт
	
	Оповестить("ОбновленМодульКриптографии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПользовательскоеСоглашение(ЦельОткрытияСоглашения)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI", ЦельОткрытияСоглашения, ИспользоватьОбменЭСФЧерезAPI);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаключениеПользовательскогоСоглашенияЗавершение", ЭтаФорма, ДополнительныеПараметры);		
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПользовательскоеСоглашение", ДополнительныеПараметры, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаключениеПользовательскогоСоглашенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	// Если условия использования не приняты, то использование криптографии недоступно.
	Если ДополнительныеПараметры.ЦельОткрытияСоглашения = "Заключение" И Результат <> Истина Тогда		
		ИспользоватьОбменЭСФЧерезAPI = Ложь;		
		// откатываемся на предыдущую страницу
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru='В связи с отказом от заключения Соглашения возможность прямого обмена данными с ИС ЭСФ отключена.'"));
		ЗаписатьСпособыОбмена();
	КонецЕсли;	  
	
	ОбновитьИнтерфейс();
	ОбновитьПредставлениеСтатусаКриптобиблиотеки();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаБиблиотекиОфертаНажатие(Элемент)
	ПоказатьПользовательскоеСоглашение("Ознакомление");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаботуБиблиотеки(Команда)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	Версия = "";
	Результат = Контейнер.КриптопровайдерПодключается(Версия, Ложь, МестоУстановкиБиблиотеки);
	Если Результат Тогда
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Библиотека успешно подключена! Версия: %1'"), СокрЛП(Версия));
		ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе	
		ВызватьИсключение ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось подключить библиотеку криптографии.'"), Символы.ПС, ОписаниеОшибки());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(Форма)
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	// Данные о наличии загруженной библиотеки
	ВерсияВнешнегоМодуляКриптографии = Контейнер.ВерсияВнешнегоМодуляКриптографии();
	Форма.ВерсияКриптобиблиотекиБД = ВерсияВнешнегоМодуляКриптографии; 	
	БиблиотекаЗагружена = ЗначениеЗаполнено(ВерсияВнешнегоМодуляКриптографии); 	
	
	Форма.ВерсияКриптобиблиотекиНаСайте = Контейнер.ПолучитьВерсиюКомпонентыНаСайте();
	
	
	Если БиблиотекаЗагружена Тогда

		// заполнение реквизита ВерсияКриптобиблиотеки в форме настройки
		КриптопровайдерПодключается = Контейнер.КриптопровайдерПодключается(Форма.ВерсияКриптобиблиотеки,,, Истина); // Без выдачи сообщения пользователю. Так как 	информация о статуске отображается визуально.
		
		// в криптопровайдере представленеи дробных чисел через запятую, преобразуем для сравнения версий
		Форма.ВерсияКриптобиблиотеки = СтрЗаменить(Форма.ВерсияКриптобиблиотеки, ",", ".");
		
		// версия на сайте отличается от версии в базе данных
		Если Форма.ВерсияКриптобиблиотекиБД <> Форма.ВерсияКриптобиблиотекиНаСайте Тогда
			Форма.СтатусКомпоненты = "ТребуетОбновления";
		// компонента не установлена на клиенте	
		//ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ВерсияКриптобиблиотеки) Тогда
		//	Форма.СтатусКомпоненты = "НеУстановлена";
		// версии на компьютере отличаются от версии на сервере
		ИначеЕсли Форма.ВерсияКриптобиблиотекиБД <> Форма.ВерсияКриптобиблиотеки Тогда
			Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте";
		Иначе 
			Форма.СтатусКомпоненты = "Установлена";
		КонецЕсли;			
	Иначе
		Форма.СтатусКомпоненты = "НеУстановлена";
	КонецЕсли;  

	Форма.Элементы.ГруппаБиблиотекаУстановлена.Видимость = (Форма.СтатусКомпоненты = "Установлена");
	Форма.Элементы.ГруппаБиблиотекаНеОбновлена.Видимость = (Форма.СтатусКомпоненты = "ТребуетОбновления") ИЛИ (Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте");
	Форма.Элементы.ГруппаБиблиотекаНеУстановлена.Видимость = (Форма.СтатусКомпоненты = "НеУстановлена");	
	
	Форма.Элементы.ВерсияКриптобиблиотекиНаСайте.Видимость = (Форма.СтатусКомпоненты = "ТребуетОбновления");
	Форма.Элементы.ВерсияКриптобиблиотекиБДОбновление.Видимость = (Форма.СтатусКомпоненты = "ТребуетОбновления") ИЛИ (Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте");
	Форма.Элементы.ВерсияКриптобиблиотекиОбновление.Видимость = (Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте");
	
	Если Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте" Тогда
		Форма.Элементы.ОбновитьКриптобиблиотеку.Заголовок = НСтр("ru = 'Установить криптобиблиотеку'");
	КонецЕсли;
 		
	СформироватьЗаголовокОбщийСтатусБиблиотеки(Форма);			
	СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, Форма.МестоУстановкиБиблиотеки);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере()
	
	ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСтатусаКриптобиблиотеки()
	
	Если ЭтаФорма.ИнформационнаяБазаФайловая Тогда
		ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
	Иначе	
		Если ЭтаФорма.МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте") Тогда
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаКлиентеНаСервере(ЭтаФорма);
		Иначе
			ОбновитьПредставлениеСтатусаКриптобиблиотекиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокОбщийСтатусБиблиотеки(Форма)
	Если Форма.СтатусКомпоненты = "Установлена" Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена и готова к использованию'");
	ИначеЕсли Форма.СтатусКомпоненты = "ТребуетОбновления" Тогда
		Если НЕ Форма.ИнформационнаяБазаФайловая Тогда
			Форма.Элементы.ВерсияКриптобиблиотекиНаСайте.Заголовок = НСтр("ru = 'Новая версия'");
		КонецЕсли;
		Форма.Элементы.ГруппаБиблиотекаНеОбновлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека установлена, но требует обновления версии'");
	ИначеЕсли Форма.СтатусКомпоненты = "ТребуетОбновленияНаКлиенте" Тогда
		Если НЕ Форма.ИнформационнаяБазаФайловая Тогда
			Форма.Элементы.ВерсияКриптобиблиотекиНаСайте.Заголовок = НСтр("ru = 'Версия на сервере'");
		КонецЕсли;
		Форма.Элементы.ГруппаБиблиотекаНеОбновлена.Заголовок = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека загружена в информационную базу, требуется установка версии на клиенте'");
	ИначеЕсли Форма.СтатусКомпоненты	= "НеУстановлена" Тогда
		Форма.Элементы.НадписьБиблиотекаУстановлена.Заголовок = НСтр("ru = 'Библиотека не установлена'");
	КонецЕсли;		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокЛокальнаяВерсияБиблиотеки(Форма, МестоУстановкиБиблиотеки)
	Если МестоУстановкиБиблиотеки = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаСервере") И Форма.ИнформационнаяБазаФайловая Тогда
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = НСтр("ru = 'Версия на сервере:'");
	Иначе	
		Форма.Элементы.НадписьВерсияКриптобиблиотеки.Заголовок = НСтр("ru = 'Версия на компьютере:'");
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСпособыОбмена()
	
	ИспользоватьОбменЭСФЧерезAPI = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСпособыОбмена()
	
	Константы.ИспользоватьОбменЭСФЧерезAPI.Установить(ИспользоватьОбменЭСФЧерезAPI);
	
КонецПроцедуры

#КонецОбласти
