#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуютсяФоновыеЗадания = ЭСФВызовСервераПовтИсп.ИспользоватьФоновуюОтправкуЭСФ();
	ИнформационнаяБазаСерверная = НЕ ЭСФСерверПереопределяемый.ИнформационнаяБазаФайловая();
	ЗаполнитьИтогиПоОчередиЭСФ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.КлючУникальности = Новый УникальныйИдентификатор;

	ОтборСостоянияСписокВыбора = Элементы.ОтборСостояния.СписокВыбора;
	ОтборСостоянияСписокВыбора.Добавить(НСтр("ru = '<Не установлен>'"));
	Если ИспользуютсяФоновыеЗадания Тогда
		// без заполненного идетификатора фонового задания в регистре очереди
		ОтборСостоянияСписокВыбора.Добавить(НСтр("ru = 'Документы в процессе подписи ЭЦП пользователем'"));
		// Активно - выполняется процесс отправки
		ОтборСостоянияСписокВыбора.Добавить(НСтр("ru = 'Документы в процессе отправки на сервер ИС ЭСФ'"));
		// Завершено - фоновое задание выполнено, но по каким-то причинам записи в регистре очереди не были очищены
        // ЗавершеноАварийно - фоновое задание не выполнено из-за модульных ошибок
		ОтборСостоянияСписокВыбора.Добавить(НСтр("ru = 'Документы, отправка которых завершилась неудачей'"));
	КонецЕсли;
	
	// отображение состояния имеет значение только для серверных баз, поддерживающих фоновые задания
	// в файловой ИБ состояния фоновых заданий досутпны только в сеансе, запустившем фоновое;
	// также не хранится информация о результате выполнения фонового задания после его завершения
	Элементы.ОтборСостояния.Видимость 	 = ИспользуютсяФоновыеЗадания И ИнформационнаяБазаСерверная;
	// форма может быть открыта и в момент работы с базой, когда пользователь в регистр очереди добавил и новые записи, актуальны будут в списке только те
	Элементы.ОбновитьСостояние.Видимость = ИспользуютсяФоновыеЗадания И ИнформационнаяБазаСерверная;
	
	ОтборСостояния = ОтборСостоянияСписокВыбора[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ() Тогда
		
		ОбновитьДанныеФормы();
		
	ИначеЕсли ИмяСобытия = "ЭСФ_ПроверятьОповещенияФоновогоЗадания"
		И ЭтаФорма.КлючУникальности = Источник Тогда
			
		ЭСФКлиентПереопределяемый.ОбработкаОповещенияЭСФ_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр);
		
		ОбновитьДанныеФормы();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьВыделенныеИзОчереди(Команда)
	
	ОповещатьФормы = Элементы.Список.ВыделенныеСтроки.Количество() > 0;
	
	УдалитьВыделенныеИзОчередиНаСервере();
	
	Если ОповещатьФормы Тогда
		Оповестить(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	КонецЕсли;

	ЭСФКлиентСервер.СообщитьПользователю(НСтр("Выделенные ЭСФ удалены из очереди отправки, для их дальнейшей обработки необходимо открыть форму списка исходящих ЭСФ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФоновыхЗаданий(Команда)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭСФИОтправитьЭСФ(Команда)
	
	МассивСтрокЭСФ = Элементы.Список.ВыделенныеСтроки;
	
	Если МассивСтрокЭСФ.Количество() > 0 Тогда
		
		МассивЭСФ = ПолучитьСсылкиЭСФ(МассивСтрокЭСФ);
		
		Если МассивЭСФ.Количество() > 0 Тогда
			
			ДополнительныеПараметры = Новый Структура("ЗапускатьФоновоеЗадание, КлючФормы, НеПерезаполнятьОчередьОтправки", ИспользуютсяФоновыеЗадания, КлючУникальности, Истина);
			
			ЭСФКлиент.ОбновитьИОтправитьИсходящиеЭСФ(МассивЭСФ, ДополнительныеПараметры);
			
		Иначе
			
			ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке отсутсвуют ЭСФ для отправки'"));
			
		КонецЕсли;
		
	Иначе 
		
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для отправки необходимо выделить ЭСФ в списке'"));
		
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостоянияПриИзменении(Элемент)
	
	Если ОтборСостояния = "<Не установлен>" Тогда
		
		ОбновитьДанныеФормы();
		
	Иначе
		
		МассивЭСФ = ПолучитьСписокЭСФПоОтбору(ОтборСостояния, ИспользуютсяФоновыеЗадания);
		Список.Отбор.Элементы.Очистить();
		ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбораСписка(Список, "ЭСФ", МассивЭСФ);
		
	КонецЕсли;
	
	Элементы.ОбновитьИОтправитьЭСФ.Видимость = ОтборСостояния = "Документы, отправка которых завершилась неудачей" ИЛИ НЕ ИспользуютсяФоновыеЗадания;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Попытка
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если НЕ Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ПоказатьЗначение(, ТекущиеДанные.ЭСФ);
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьИтогиПоОчередиЭСФ()
	
	Запрос = Новый Запрос;
	
	// если не используеются фоновые задания, то при запуске в ИБ в очереди могут существовать зависшие задания (только по текущему пользователю)
	Запрос.УстановитьПараметр("ПользовательОтправки", ЭСФКлиентСерверПереопределяемый.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПустойИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	// перед завершением работы всегда контролруем только свои документы ЭСФ, как в состоянии отправки, так и находящиеся на подписи
	// при начале работы с ИБ пользователю с полными правами даем возможность просмотреть свои ЭСФ в состоянии подписи и все фоновые задания завершенные неудачей (в том числе других пользователей)
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьЭСФ.ПользовательОтправки,
	|	ОчередьЭСФ.КлючФоновогоЗадания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьЭСФ.ЭСФ) КАК КоличествоЭСФ
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьЭСФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьЭСФ.ПользовательОтправки,
	|	ОчередьЭСФ.КлючФоновогоЗадания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ПользовательОтправки КАК ПользовательОтправки,
	|	СУММА(ВТ_Данные.КоличествоЭСФ) КАК КоличествоЭСФ
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.ПользовательОтправки
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользовательОтправки),
	|	СУММА(КоличествоЭСФ)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР 
	|		КОГДА ВТ_Данные.КлючФоновогоЗадания = &ПустойИдентификатор 
	|   		ТОГДА 0
	|   	ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоФоновыхЗаданий,
	|	ВТ_Данные.КлючФоновогоЗадания КАК КлючФоновогоЗадания,
	|	ВТ_Данные.ПользовательОтправки КАК ПользовательОтправки,
	|	ВТ_Данные.КоличествоЭСФ КАК КоличествоЭСФ
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|ИТОГИ
	|	СУММА(КоличествоФоновыхЗаданий),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПользовательОтправки),
	|	СУММА(КоличествоЭСФ)
	|ПО
	|	ОБЩИЕ";

	РезультатЗапросов = Запрос.ВыполнитьПакет();

	Если ИспользуютсяФоновыеЗадания И ИнформационнаяБазаСерверная Тогда
		
		ИтоговыеДанныеФоновыхЗаданий = РезультатЗапросов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ИтоговыеДанныеФоновыхЗаданий.Следующий() Тогда
			
			КоличествоФоновыхЗаданий = ИтоговыеДанныеФоновыхЗаданий.КоличествоФоновыхЗаданий;
			КоличествоФоновыхПользователей = ИтоговыеДанныеФоновыхЗаданий.ПользовательОтправки;
			КоличествоЭСФ = ИтоговыеДанныеФоновыхЗаданий.КоличествоЭСФ;

			КоллекцияФоновыхЗаданий = Новый Соответствие;
			
			ИдентификаторыРазличныхФоновых = ИтоговыеДанныеФоновыхЗаданий.Выбрать();
			
			КоличествоНаПодписи = 0;
			КоличествоАктивных = 0;
			КоличествоЗавершенных = 0;
			КоличествоЗавершенныхПоОшибке = 0;
			
			// использовать ПолучитьФоновыеЗадания в виде таблицы в запросе нельзя, из-за типа состояния фонового и передачи типа УникальныйИдентификатор в запрос
			// получаем поэлементно в цикле информацию о состоянии фонового задания
			// МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
			Пока ИдентификаторыРазличныхФоновых.Следующий() Цикл
				
				ДанныеФоновогоЗадания = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторыРазличныхФоновых.КлючФоновогоЗадания);
				
				Если ДанныеФоновогоЗадания = Неопределено Тогда
					
					Если ЗначениеЗаполнено(ИдентификаторыРазличныхФоновых.КлючФоновогоЗадания) Тогда
						
						// данные о фоновом задании могли быть удалены из кэша по истечению времени
						КоличествоЗавершенныхПоОшибке = КоличествоЗавершенныхПоОшибке + ИдентификаторыРазличныхФоновых.КоличествоЭСФ;
						
					Иначе
						
						// при использовании фоновых заданий такое состояние у записи в регистре возможно только если пользователь подписывает ЭСФ
						КоличествоНаПодписи = КоличествоНаПодписи + ИдентификаторыРазличныхФоновых.КоличествоЭСФ;
						
					КонецЕсли;
					
				ИначеЕсли ДанныеФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					
					КоличествоАктивных = КоличествоАктивных + ИдентификаторыРазличныхФоновых.КоличествоЭСФ;
					
				ИначеЕсли ДанныеФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно 
					ИЛИ ДанныеФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					
					КоличествоЗавершенныхПоОшибке = КоличествоЗавершенныхПоОшибке + ИдентификаторыРазличныхФоновых.КоличествоЭСФ;
					
				ИначеЕсли ДанныеФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					
					КоличествоЗавершенных = КоличествоЗавершенных + ИдентификаторыРазличныхФоновых.КоличествоЭСФ;
					
				КонецЕсли;
					
			КонецЦикла;
			
			ИнформационнаяНадпись = НСтр("ru = 'Выполняется отправка %1 ЭСФ, %2 пользователем(ми) (%3 фоновых заданий):
											| - %4 ЭСФ в процессе подписи ЭЦП пользователем(ми);
											| - %5 ЭСФ в процессе отправки на сервер ИС ЭСФ; 
											| - отправка %6 ЭСФ завершилась сбоем.
											|%7'");

			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%1", КоличествоЭСФ);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%2", КоличествоФоновыхПользователей);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%3", КоличествоФоновыхЗаданий);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%4", КоличествоНаПодписи);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%5", КоличествоАктивных);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%6", КоличествоЗавершенныхПоОшибке);
			ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%7", НСтр("ru = 'При попытке повторной отправки:
																							|- будет проверено наличие ЭСФ в ИС ЭСФ с тем же номером и датой выписки, если ЭСФ присутствует в ИС ЭСФ, то документ будет обновлен и удален из очереди;
																							|- в случае отсутствия, будет произведена попытка отправки документа.'"));

		КонецЕсли;
		
	Иначе
		
		ИтоговыеДанныеПользователей = РезультатЗапросов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ИтоговыеДанныеПользователей.Количество() = 0 Тогда
			
			ИнформационнаяНадпись = НСтр("ru = 'Очередь отправки ЭСФ пуста'");
			Элементы.ИнформационнаяНадпись.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();

		Иначе
			
			Элементы.ИнформационнаяНадпись.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();

			Пока ИтоговыеДанныеПользователей.Следующий() Цикл
				
				ИнформационнаяНадпись = НСтр("ru = 'Отправляется %1 ЭСФ, %2 пользователем(ми)
													|%3'");	
				ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%1", ИтоговыеДанныеПользователей.КоличествоЭСФ);
				ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%2", ИтоговыеДанныеПользователей.ПользовательОтправки);
				
			КонецЦикла;
			
		КонецЕсли;
				
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%3", НСтр("ru = 'При попытке повторной отправки:
																						|- будет проверено наличие ЭСФ в ИС ЭСФ с тем же номером и датой выписки, если ЭСФ присутствует в ИС ЭСФ, то документ будет обновлен и удален из очереди;
																						|- в случае отсутствия, будет произведена попытка отправки документа."));
		
	КонецЕсли;

	Элементы.ИнформационнаяНадпись.Высота = СтрЧислоСтрок(ИнформационнаяНадпись);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокЭСФПоОтбору(ОтборСостояния, ИспользуютсяФоновыеЗадания)
	
	Если НЕ ИспользуютсяФоновыеЗадания Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОчередьОтправкиЭСФ.ЭСФ
			|ИЗ
			|	РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьОтправкиЭСФ";
		
		МассивЭСФ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭСФ");
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПользовательОтправки", ЭСФКлиентСерверПереопределяемый.ТекущийПользователь());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьЭСФ.ПользовательОтправки,
		|	ОчередьЭСФ.КлючФоновогоЗадания,
		|	ОчередьЭСФ.ЭСФ КАК ЭСФ
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьЭСФ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Данные.КлючФоновогоЗадания КАК КлючФоновогоЗадания,
		|	ВТ_Данные.ЭСФ
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|ИТОГИ ПО
		|	КлючФоновогоЗадания";

		МассивЭСФ = Новый Массив;
		
		ВыборкаФоновыхЗаданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФоновыхЗаданий.Следующий() Цикл
			
			ДанныеФоновогоЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", ВыборкаФоновыхЗаданий.КлючФоновогоЗадания));
			
			Если ОтборСостояния = "Документы в процессе подписи ЭЦП пользователем"
				И НЕ ЗначениеЗаполнено(ВыборкаФоновыхЗаданий.КлючФоновогоЗадания)
				И ДанныеФоновогоЗадания.Количество() = 0 Тогда
				
				ВыборкаЭСФ = ВыборкаФоновыхЗаданий.Выбрать();
				
				Пока ВыборкаЭСФ.Следующий() Цикл
					МассивЭСФ.Добавить(ВыборкаЭСФ.ЭСФ);
				КонецЦикла;
				
			ИначеЕсли ОтборСостояния = "Документы в процессе отправки на сервер ИС ЭСФ"
				И (ДанныеФоновогоЗадания.Количество() > 0
				И ДанныеФоновогоЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно) Тогда
				
				ВыборкаЭСФ = ВыборкаФоновыхЗаданий.Выбрать();
				
				Пока ВыборкаЭСФ.Следующий() Цикл
					МассивЭСФ.Добавить(ВыборкаЭСФ.ЭСФ);
				КонецЦикла;
				
			ИначеЕсли ОтборСостояния = "Документы, отправка которых завершилась неудачей"
				И (ДанныеФоновогоЗадания.Количество() > 0
				И (ДанныеФоновогоЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
				ИЛИ ДанныеФоновогоЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено
				ИЛИ ДанныеФоновогоЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено)
				// данные о фоновом задании удалены из кэша
				ИЛИ ДанныеФоновогоЗадания.Количество() = 0 И ЗначениеЗаполнено(ВыборкаФоновыхЗаданий.КлючФоновогоЗадания)) Тогда
				
				ВыборкаЭСФ = ВыборкаФоновыхЗаданий.Выбрать();
				
				Пока ВыборкаЭСФ.Следующий() Цикл
					МассивЭСФ.Добавить(ВыборкаЭСФ.ЭСФ);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЭСФ;
	
КонецФункции

&НаСервере
Функция ОчиститьОчередь(МассивОтсутствующихЭСФ)
	
	НачатьТранзакцию();
	
	Попытка
		
		// Сообщить пользователю, что некоторые ЭСФ не удалось найти в ИС ЭСФ по номеру и дате.
		Для Каждого СтруктураОтсутствующийЭСФ Из МассивОтсутствующихЭСФ Цикл

			ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(СтруктураОтсутствующийЭСФ.Ссылка);

		КонецЦикла;
		
	Исключение
	
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось очистить очередь'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);

		Возврат Ложь;
		
	КонецПопытки;

	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура УдалитьВыделенныеИзОчередиНаСервере()
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ОчередьОтправкиЭСФ.СоздатьНаборЗаписей();
		
		Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
			НаборЗаписей.Отбор.ЭСФ.Установить(СтрокаСписка.ЭСФ);
			НаборЗаписей.Записать();	
		КонецЦикла;
		
		ОбновитьДанныеФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()

	Если ОтборСостояния = "<Не установлен>" Тогда
		
		Список.Отбор.Элементы.Очистить();
		
	Иначе
		
		МассивЭСФ = ПолучитьСписокЭСФПоОтбору(ОтборСостояния, ИспользуютсяФоновыеЗадания);
		
		Список.Отбор.Элементы.Очистить();
		ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбораСписка(Список, "ЭСФ", МассивЭСФ);
		
	КонецЕсли;
	
	ЗаполнитьИтогиПоОчередиЭСФ();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкиЭСФ(МассивСтрокЭСФ)
	
	МассивЭСФ = Новый Массив;
	
	Для Каждого СтрокаЭСФ Из МассивСтрокЭСФ Цикл
		// список может быть сгруппирован пользователем
		Если НЕ ТипЗнч(СтрокаЭСФ) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивЭСФ.Добавить(СтрокаЭСФ.ЭСФ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭСФ;
	
КонецФункции

#КонецОбласти
