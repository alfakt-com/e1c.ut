
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Действие = Параметры.Действие;
	
	Если ВозможноВыполнитьДействие() Тогда
		
		СтруктурнаяЕдиница = ЭСФСервер.СтруктурнаяЕдиницаЭСФ(Параметры.МассивАВР[0]);
		УстановитьПараметрыВыбораАВР();
		ЗаполнитьСписокАВР();
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	УстановитьЗаголовокКнопкиВыполнитьДействие();	
	УстановитьВидимостьПоляПричина();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаСписокАВР Из СписокАВР Цикл
		
		Если ПустаяСтрока(СтрокаСписокАВР.Идентификатор) Тогда
			
			ИндексСтроки = СписокАВР.Индекс(СтрокаСписокАВР);
			НомерСтроки = ИндексСтроки + 1;
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru = 'В строке %НомерСтроки% не заполнено поле ""Идентификатор"".'"); 
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%НомерСтроки%", Формат(НомерСтроки, "ЧГ="));
			
			Сообщение.Поле = "СписокАВР[%ИндексСтроки%].Идентификатор";
			Сообщение.Поле = СтрЗаменить(Сообщение.Поле, "%ИндексСтроки%", Формат(ИндексСтроки, "ЧГ="));
			
			Сообщение.Сообщить();
			
			Отказ = Истина;	
			
		Иначе
			
			ТекстСообщения = "";
			
			Если НЕ АВРКлиентСервер.ИдентификаторКорректен(СтрокаСписокАВР.Идентификатор, ТекстСообщения) Тогда 
				
				ИндексСтроки = СписокАВР.Индекс(СтрокаСписокАВР);
				НомерСтроки = ИндексСтроки + 1;
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru = 'В строке %НомерСтроки% поле ""Идентификатор"" заполнено некорректно. Причина: %Причина%'"); 
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%НомерСтроки%", Формат(НомерСтроки, "ЧГ="));
				Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Причина%", ТекстСообщения);
				
				Сообщение.Поле = "СписокАВР[%ИндексСтроки%].Идентификатор";
				Сообщение.Поле = СтрЗаменить(Сообщение.Поле, "%ИндексСтроки%", Формат(ИндексСтроки, "ЧГ="));
				
				Сообщение.Сообщить();
				
				Отказ = Истина;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР()
		И НЕ Параметр = Неопределено 
		И Источник = ЭтаФорма Тогда
		
		КоллекцияРезультатовИзмененияСтатусов = ПолучитьИзВременногоХранилища(Параметр.АдресХранилища);
		
		Если НЕ Тип("Соответствие") = ТипЗнч(КоллекцияРезультатовИзмененияСтатусов) Тогда
			Возврат
		КонецЕсли;

		// Обработать результаты действия.
	    ОбработатьРезультатыИзмененияСтатусовНаСервере(КоллекцияРезультатовИзмененияСтатусов);
		
		// Обновить открытые формы.
		МассивАВР = Новый Массив;
		Для Каждого СтрокаТаблицы Из СписокАВР Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.АВР) Тогда
				МассивАВР.Добавить(СтрокаТаблицы.АВР);
			КонецЕсли;
		КонецЦикла; 
		
		// Показать результат отзыва.		
		Если ВсеСтатусыУспешноИзменены() Тогда
			
			ЗакрытьПослеОповещения = Новый ОписаниеОповещения("ЗакрытьФормуПослеОповещения", ЭтаФорма);
			ПоказатьПредупреждение(ЗакрытьПослеОповещения, НСтр("ru = 'Действие выполнено успешно.'"));
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выполнить действие для всех электронных актов выполненных работ.'"));
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АВР_ПроверятьОповещенияФоновогоЗадания"
		И ЭтаФорма.КлючУникальности = Источник Тогда
		
		АВРКлиент.ОбработкаОповещенияАВР_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуПослеОповещения(Результат) Экспорт

	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицФормы

&НаКлиенте
Процедура СписокАВРАВРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокАВР.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.АВР) Тогда 
			ДанныеАВР = ДанныеАВР(ТекущиеДанные.АВР);
			ТекущиеДанные.Идентификатор = ДанныеАВР.Идентификатор;
			ТекущиеДанные.Статус = ДанныеАВР.Статус;
		КонецЕсли;
		
		ТекущиеДанные.ОшибкаПредставление = "";
		ТекущиеДанные.ОшибкаРасшифровка = "";
		ТекущиеДанные.ОшибкаЕсть = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАВРИдентификаторПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокАВР.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.АВР) Тогда 
			ТекущиеДанные.Статус = Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАВРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАВРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.СписокАВР.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ОшибкаЕсть Тогда
			
			Если Поле.Имя = "СписокАВРОшибкаПредставление" Тогда
				СтандартнаяОбработка = Ложь;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекущиеДанные.ОшибкаРасшифровка;
				Сообщение.Поле = "СписокАВР[" + Формат(СписокАВР.Индекс(ТекущиеДанные), "ЧН=0; ЧГ=") + "].ОшибкаПредставление";
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьСтатусАВР (Команда)
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();

	Если НЕ Контейнер.КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;	
	
	// Проверить заполнение.
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат
	КонецЕсли;
	
	КоллекцияСгруппированныхАВР = Новый Соответствие;
	КоллекцияСгруппированныхАВР.Вставить(СтруктурнаяЕдиница, );
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхАВР", КоллекцияСгруппированныхАВР);

	ИзменитьСтатусАВРЗавершение = Новый ОписаниеОповещения("ИзменитьСтатусАВРЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", КоллекцияСгруппированныхАВР, Истина);
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ИзменитьСтатусАВРЗавершение, ПараметрыФормы);	
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьСтатусАВРЗавершение(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// форма изменения статуса работает только с одной структурной единицей
	ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
	ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);
	ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеКлючаЭЦП.ПарольИСЭСФ;
	
	// Сформировать коллекцию для выполнения действия.
	КоллецияДляИзмененияСтатусов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из СписокАВР Цикл
		ДанныеДляИзмененияСтатусовПоАВР = Новый Структура;
		ДанныеДляИзмененияСтатусовПоАВР.Вставить("ИД", СтрокаТаблицы.Идентификатор); 
		ДанныеДляИзмененияСтатусовПоАВР.Вставить("ЭЦП", СтрокаТаблицы.ЭЦП);
		ДанныеДляИзмененияСтатусовПоАВР.Вставить("Статус", СтрокаТаблицы.Статус);
		ДанныеДляИзмененияСтатусовПоАВР.Вставить("Причина", Причина);
		
		КоллецияДляИзмененияСтатусов.Вставить(СтрокаТаблицы.Идентификатор, ДанныеДляИзмененияСтатусовПоАВР);	
	КонецЦикла;
	
	// Выполнить действие.
	КоллекцияРезультатовИзмененияСтатусов = АВРКлиент.ИзменитьСтатусыАВР(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, Параметры.ЗапускатьФоновоеЗадание);		
				
	Если Параметры.ЗапускатьФоновоеЗадание Тогда
				
		Если ТипЗнч(КоллекцияРезультатовИзмененияСтатусов) = Тип("Структура") Тогда
			КоллекцияРезультатовИзмененияСтатусов.Вставить("ТекстСообщения", НСтр("ru = 'Отзыв документов из ИС ЭСФ'"));
		КонецЕсли;
		
		АВРКлиент.ОповеститьФормы("АВР_ПроверятьОповещенияФоновогоЗадания", КоллекцияРезультатовИзмененияСтатусов, КлючУникальности);
		
	Иначе
		
		// Обработать результаты действия.
	    ОбработатьРезультатыИзмененияСтатусовНаСервере(КоллекцияРезультатовИзмененияСтатусов);
		
		АдресХранилища = ПоместитьВоВременноеХранилище(КоллекцияРезультатовИзмененияСтатусов);
		АВРКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), Новый Структура("АдресХранилища", АдресХранилища), ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыИзмененияСтатусовНаСервере(Знач КоллекцияРезультатовИзмененияСтатусов)
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
	ОбработкаОбменЭСФ.ОбработатьРезультатыИзмененияСтатусовАВР(КоллекцияРезультатовИзмененияСтатусов, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////                       
// Проверка возможности выполнения действия

&НаСервере
Функция ВозможноВыполнитьДействие()
	
	Возможно = Истина;
	
	РезультатЗапроса = ДанныеДляПроверкиВозможностиВыполненияДействия();
	
	// Проверить количество ЭСФ.
	Если РезультатЗапроса.Пустой() Тогда
		
		Возможно = Ложь;
		ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить действие, так как не указаны электронные акты выполненных работ, для которых необходимо выполнить действие.'"));
		
	КонецЕсли;
	
	// Проверить, что во всех ЭСФ указана одинаковая организация и подразделение организации. 
	Если Возможно Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		// Проверить, что во всех ЭСФ указана одинаковая организация.
		Выборка.Сбросить();
		Выборка.Следующий();
		ПерваяОрганизация 	= Выборка.Организация;
		ПервыйСтатус	    = Выборка.Статус;
		//У АВР есть действия доступные для любого направления, так что берем направление первого АВР
		НаправлениеПервогоАВР = Выборка.Направление;
		СоответствиеВозможностиДействий = АВРСервер.РазрешенныеДействияПоСтатусамАВР(НаправлениеПервогоАВР);
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Организация <> ПерваяОрганизация Тогда
				ОтзывВозможен = Ложь;
				ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Все электронные акты выполненных работ должны принадлежать одной организации.'"));
				Прервать;
			КонецЕсли;
			
			Если НЕ СоответствиеВозможностиДействий[Действие][Выборка.Статус] Тогда
				ОтзывВозможен = Ложь;
				ТекстСообщения = НСтр("ru = 'Для электронных актов выполненных работ со статусом %1 не выполнимо действие""%2"".'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Статус, Действие); 
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Прервать;				
			КонецЕсли;
					
		КонецЦикла;
		
				
		// Проверить, что во всех ЭСФ указано одинаковое подразделение организации.
		Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
			Выборка.Сбросить();
			Выборка.Следующий();
			ПервоеПодразделение = Выборка.СтруктурноеПодразделение;
			Пока Выборка.Следующий() Цикл
				Если Выборка.СтруктурноеПодразделение <> ПервоеПодразделение Тогда
					ОтзывВозможен = Ложь;
					ЭСФКлиентСервер.СообщитьПользователю(НСтр("ru = 'Все электронные акты выполненных работ должны принадлежать одному структурному подразделению.'"));
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
				
	КонецЕсли;
	
	// Проверить, чтобы у всех ЭСФ было одинаковое направление, в зависимости от действия.
	ТребуемоеНаправление = НаправлениеДляДействия(Действие, НаправлениеПервогоАВР);
	Если НЕ ВсеАВРИмеютНаправление(ТребуемоеНаправление, РезультатЗапроса, Истина) Тогда
		Возможно = Ложь;
	КонецЕсли;
	
	//Если Возможно Тогда
	//	
	//	// 1. Для отклонения отозванных используется метод unrevokeInvoiceById.
	//	// 2. Для отклонения дополнительных и исправленных используется метод declineInvoiceById.
	//	// Все отклоняемые ЭСФ должны быть первого или второго типа.
	//	Если Действие = ЭСФКлиентСервер.ДействиеОтклонение() Тогда
	//		
	//		Выборка = РезультатЗапроса.Выбрать();
	//		
	//		Пока Выборка.Следующий() Цикл
	//			
	//			Если Выборка.Вид <> Перечисления.ВидыЭСФ.Дополнительный
	//				И Выборка.Вид <> Перечисления.ВидыЭСФ.Исправленный
	//				И Выборка.Статус <> Перечисления.СтатусыЭСФ.Отозванный Тогда
	//				
	//				Возможно = Ложь;
	//				
	//				ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как ""[ЭСФ]"" не является дополнительным, исправленным или отозванным.'");		
	//				ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ЭСФ]", Выборка.ЭСФ);
	//				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//				
	//			КонецЕсли;	
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
		
	Возврат Возможно;
	
КонецФункции

&НаСервере
Функция НаправлениеДляДействия(Знач Действие, Знач НаправлениеАВР = Неопределено)
	
	Направление = Неопределено;
	
	Если Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		
		Направление = Перечисления.НаправленияЭСФ.Исходящий;
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		
		Направление = Перечисления.НаправленияЭСФ.Входящий;
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		
		Направление = Перечисления.НаправленияЭСФ.Входящий;
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
		
		Направление = Перечисления.НаправленияЭСФ.Входящий;
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеРасторжение()
		ИЛИ Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения()
		ИЛИ Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения() Тогда
		
		Направление = НаправлениеАВР;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		
	КонецЕсли;
	
	Возврат Направление;
		
КонецФункции

&НаСервере
Функция ВсеАВРИмеютНаправление(Знач Направление, Знач РезультатЗапроса, Знач ПоказыватьСообщения)
	
	ВсеАВРИмеютНаправление = Истина;
	
	Выборка = РезультатЗапроса.Выбрать();		
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Направление <> Направление Тогда
			
			ВсеАВРИмеютНаправление = Ложь;
			
			Если ПоказыватьСообщения Тогда 
				ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие для документа ""%АВР%"", так как он %Направление%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АВР%", Выборка.АВР);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Направление%", НРег(Направление));				
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ВсеАВРИмеютНаправление;
	
КонецФункции

&НаСервере
Функция ДанныеДляПроверкиВозможностиВыполненияДействия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Ссылка КАК АВР,
	|	АВР.Направление,
	|	АВР.СтруктурноеПодразделение,
	|	АВР.Организация,
	|	АВР.Статус
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|ГДЕ
	|	АВР.Ссылка В(&МассивАВР)";
	
	Запрос.УстановитьПараметр("МассивАВР", Параметры.МассивАВР);
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АВР.СтруктурноеПодразделение,", "");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

&НаКлиенте
Функция ВсеСтатусыУспешноИзменены()
	
	Успешно = Истина;
	
	Для Каждого СтрокаСписокЭСФ Из СписокАВР Цикл
		Если СтрокаСписокЭСФ.ОшибкаЕсть Тогда
			Успешно = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокАВР()	
	
	СписокАВР.Очистить();
	
	Если Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
		
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеРасторжение() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
		
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения() Тогда
		
		ЗаполнитьСписокАВР_Отзыв();
			
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАВР_Отзыв()
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Ссылка КАК АВР,
	|	АВР.Идентификатор КАК Идентификатор,
	|	АВР.Статус КАК Статус,
	|	АВР.ЭЦП
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|ГДЕ
	|	АВР.Ссылка В(&МассивОтзываемыхАВР)";
		
	Запрос.УстановитьПараметр("МассивОтзываемыхАВР", Параметры.МассивАВР);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСписокАВР = СписокАВР.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписокАВР, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАВР_Отклонение()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Ссылка КАК АВР,
	|	АВР.Идентификатор КАК Идентификатор,
	|	АВР.Статус КАК Статус
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|ГДЕ
	|	АВР.Ссылка В(&МассивОтзываемыхАВР)";

	
	Запрос.УстановитьПараметр("МассивАВР", Параметры.МассивАВР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСписокАВР = СписокАВР.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписокАВР, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораАВР()
	
	Массив = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Направление", НаправлениеДляДействия(Действие, Параметры.МассивАВР[0].Направление)); 
	Массив.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", Параметры.МассивАВР[0].Организация); 
	Массив.Добавить(ПараметрВыбора);	
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.СтруктурноеПодразделение", Параметры.МассивАВР[0].СтруктурноеПодразделение); 
		Массив.Добавить(ПараметрВыбора);		
	КонецЕсли;
	
	Элементы.СписокАВРАВР.ПараметрыВыбора = Новый ФиксированныйМассив(Массив);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеАВР(АВР)
	
	Данные = Новый Структура;
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("Статус", Перечисления.СтатусыЭСФ.ПустаяСсылка());
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АВР.Идентификатор,
	|	АВР.Статус
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК АВР
	|ГДЕ
	|	АВР.Ссылка = &АВР";	
	
	Запрос.УстановитьПараметр("АВР", АВР);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Данные.Идентификатор = Выборка.Идентификатор;
		Данные.Статус = Выборка.Статус;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Отзыв актов выполненных работ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Подтверждение актов выполненных работ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Отклонение актов выполненных работ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеРасторжение() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Расторжение актов выполненных работ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Отклонение расторжения актов выполненных работ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения() Тогда
		
		ЭтаФорма.Заголовок = НСтр("ru = 'Подтверждение расторжения актов выполненных работ'");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКнопкиВыполнитьДействие()
	
	Если Действие = АВРКлиентСервер.ДействиеОтзыв() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Отозвать АВР в ИС ЭСФ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждение() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Подтвердить АВР в ИС ЭСФ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонение() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Отклонить АВР в ИС ЭСФ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеРасторжение() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Расторгнуть АВР в ИС ЭСФ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеОтклонениеРасторжения() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Отклонить расторжение АВР в ИС ЭСФ'");
		
	ИначеЕсли Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения() Тогда
		
		Элементы.ФормаВыполнитьДействие.Заголовок = НСтр("ru = 'Подтвердить расторжение АВР в ИС ЭСФ'");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка. Необработанное действие.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоляПричина()
	Если Действие = АВРКлиентСервер.ДействиеПодтверждение() ИЛИ Действие = АВРКлиентСервер.ДействиеПодтверждениеРасторжения() Тогда
		Элементы.Причина.Видимость = Ложь;	
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ОтклонитьИсправленныеИлиДополнительныеИлиОтозванныеЭСФ(ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП)
	
	/////////////////////////////////////////////////////////////////////////////
	// Выполнить отклонение отозванных ЭСФ.
	
	// Сформировать коллекцию для отклонения отозванных.
	КоллецияДляИзмененияСтатусов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СписокАВР Цикл
		Если СтрокаТаблицы.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") Тогда
			КоллецияДляИзмененияСтатусов.Вставить(СтрокаТаблицы.Идентификатор, Причина);
		КонецЕсли;
	КонецЦикла;
	
	// Выполнить отклонение отозванных.
	Если КоллецияДляИзмененияСтатусов.Количество() <> 0 Тогда
		
		КоллекцияРезультатовОтклоненияОтозванных = ЭСФКлиент.ИзменитьСтатусыЭСФ(
			ЭСФКлиентСервер.ДействиеОтклонениеОтзыва(),
			КоллецияДляИзмененияСтатусов,
			ДанныеПрофиляИСЭСФ,
			ДанныеКлючаЭЦП,
			УникальныйИдентификатор,
			// всегда равено Ложь, тк действие требует выполнения нескольких запросов
			Ложь);
			
	Иначе
		
		КоллекцияРезультатовОтклоненияОтозванных = Новый Соответствие;
		
	КонецЕсли;
	
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Выполнить отклонение исправленных или дополнительных ЭСФ.
	
	// Сформировать коллекцию для отклонения дополнительных и исправленных.
	КоллецияДляИзмененияСтатусов = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из СписокАВР Цикл
		Если СтрокаТаблицы.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") Тогда
			// В данной проверке не проверяется "Дополнительный" или "Исправленный",
			// чтобы во второй запрос попали все ЭСФ, которые не являются отозванными.
			КоллецияДляИзмененияСтатусов.Вставить(СтрокаТаблицы.Идентификатор, Причина);
		КонецЕсли;
	КонецЦикла;
	
	// Выполнить отклонение дополнительных и исправленных.
	Если КоллецияДляИзмененияСтатусов.Количество() <> 0 Тогда
		
		КоллекцияРезультатовОтклоненияДополнительныхИлиИсправленных = ЭСФКлиент.ИзменитьСтатусыЭСФ(
			ЭСФКлиентСервер.ДействиеОтклонениеДополнительногоИлиИсправленного(), 
			КоллецияДляИзмененияСтатусов, 
			ДанныеПрофиляИСЭСФ, 
			ДанныеКлючаЭЦП,
			УникальныйИдентификатор,
			// всегда равено Ложь, тк действие требует выполнения нескольких запросов
			Ложь);
			
	Иначе
		
		КоллекцияРезультатовОтклоненияДополнительныхИлиИсправленных = Новый Соответствие;
		
	КонецЕсли;
	
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Объединить результаты выполнения двух отклонений.
	
	КоллекцияРезультатовИзмененияСтатусов = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из КоллекцияРезультатовОтклоненияОтозванных Цикл
		КоллекцияРезультатовИзмененияСтатусов.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из КоллекцияРезультатовОтклоненияДополнительныхИлиИсправленных Цикл
		КоллекцияРезультатовИзмененияСтатусов.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
	КонецЦикла;
	
	
	
	/////////////////////////////////////////////////////////////////////////////
	// Возврат результата.
	
	Возврат КоллекцияРезультатовИзмененияСтатусов;
	
КонецФункции

#КонецОбласти
