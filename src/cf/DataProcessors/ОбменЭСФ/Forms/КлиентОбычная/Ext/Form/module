#Если ТолстыйКлиентОбычноеПриложение Тогда
// Текст модуля одинаковый в:
// - Обработка.ОбменЭСФ.МодульОбъекта,
// - Обработка.ОбменЭСФ.Форма.КлиентОбычная,
// - Обработка.ОбменЭСФ.Форма.КлиентУправляемая.
// При изменении в одном месте необходимо внести их в другие места.

#Область Криптография

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Перем ВерсияБЭСФ Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер(,РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаСервере(Версия = "", РежимТишины = Ложь) Экспорт
	
	Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);
			       		
	Возврат Подключается;	
	
КонецФункции

&НаКлиенте
Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = Перечисления.МестаВыполненияКриптографическихОпераций.НаКлиенте;
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	КонецЕсли;	
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);				
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
// При вызове процедуры из конекста клиента необходимо передавать идентификатор клиентской формы,
// иначе хранилище будет очищено при возврате в контекст клиента
Функция АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента = Неопределено) Экспорт
	СсылкаНаМодуль = ПоместитьВоВременноеХранилище(Константы.ЭСФВнешнийМодуль.Получить().Получить(), УникальныйИдентификаторФормыКлиента);
	Возврат СсылкаНаМодуль;
КонецФункции

&НаКлиенте
Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ОписаниеОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//  Ключ - Строка - Ключевой контейнер PKCS#12 в кодировке Base64.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера PKCS#12.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
&НаКлиенте
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();		
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает строку, содержащую ЭЦП.
//
// Параметры:
//  Криптопровайдер - Криптопровайдер, по которому определяется строка подписи ЭЦП
//  СтрокаДляПодписи - Строка - Строка, для которой необходимо получить ЭЦП.
//
// Возвращаемое значение:
//  Строка - ЭЦП.
//
&НаКлиенте
Функция СоздатьЭЦПДляПакета(Криптопровайдер, Знач СтрокаДляПодписи) Экспорт
	
	Попытка
		
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

// Возвращает тип ключа (ГОСТ или RSA) файла PKCS#12.
//
// Параметры:
//  КлючBase64 - Строка - Ключевой контейнер в Base64, тип ключа которого необходимо определить.
//  ПарольКлюча - Строка - Пароль от ключевого контейнера.
//
// Возвращаемое значение:
//  Строка - Тип ключа. См. КлючGOST(), КлючRSA().
//   Если не удалось определить тип ключа, то возвращается пустая строка.
//
&НаКлиенте
Функция ТипКлюча(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт
	
	СвойстваСертификата = СвойстваСертификата(КлючBase64, ПарольОтКлюча);	
	ТипКлюча = СвойстваСертификата.ТипКлюча;	
	Возврат ТипКлюча;
	
КонецФункции

// Возвращает сертификат открытого ключа в виде строки Base64.
//
// Параметры:
//  КлючBase64 - Строка - Файл PKCS#12 содержащий сертификат открытого ключа, в кодировке P12.
//  Пароль - Строка - Пароль к файлу PKCS#12 содержащему сертификат открытого ключа.
//
// Возвращаемое значение:
//  Строка - Сертификат открытого ключа в формате Base64.
//
&НаКлиенте
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач ПарольКлюча) Экспорт
		
	Попытка
		
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		Сертификат = Криптопровайдер.ПолучитьСертификат(ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64());
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось выполнить действие.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	СертификатBase64 = "";
	
	Для Счетчик = 1 По СтрЧислоСтрок(Сертификат) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(Сертификат, Счетчик);
		Если Найти(ТекущаяСтрока, " CERTIFICATE-----") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		СертификатBase64 = СертификатBase64 + СокрЛП(СтрПолучитьСтроку(Сертификат, Счетчик));
	КонецЦикла;
	
	СертификатBase64 = СокрЛП(СертификатBase64);
	
	Возврат СертификатBase64;
			
КонецФункции

// Возвращает свойства сертификата, извлеченные из файла *.p12.
// При выполнении происходит обращение к серверу.
//
// Параметры:
//  КлючBase64 - Строка - Файл P12 в кодировке Base64.
//  ПарольОтКлюча - Строка - Пароль от файла P12.
//
// Возвращаемое значение:
//  Структура - Свойства сертификата.
//   |- Ключ - Строка - Имя свойства сертификата.
//   |- Значение - Строка - Значение свойства сертификата.
//  Содержит все свойства из НоваяКоллекцияИдентификаторовСвойствСертификата().
//  Если какого-нибудь свойства не было в сертификате, то его значением будет пустая строка.
//
&НаКлиенте
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

// Возврашает текстовое описание сертификата.
//
// Параметры:
//  Свойства - Структура - См. СвойстваСертификата()
//
// Возвращаемое значение:
//  Строка, текстовое описание сертификата.
//
&НаКлиенте
Функция ОписаниеСертификата(Знач Свойства) Экспорт
	
	//Наименование организации:
	//БИН организации: 
	//
	//ФИО владельца:
	//ИИН владельца:
	//Адрес владельца:
	//Email владельца:
	//
	//Издатель сертификата:
	//Начало действия сертификата:
	//Окончание действия сертификата:
	//Идентификатор открытого ключа:
	
	Описание = "";
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Наименование организации'"), Свойства.НаименованиеОрганизации);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'БИН организации'"), Свойства.БИНОрганизации);
	
	Описание = Описание + Символы.ПС;
	
	ФИО = СокрЛП(Свойства.ИмяФамилияСубъекта + " " + Свойства.ОтчествоСубъекта);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ФИО владельца'"), ФИО);
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'ИИН владельца'"), Свойства.ИИНСубъекта);
	
	Адрес = Свойства.Страна + ", " + Свойства.РегионОбласть + ", " + Свойства.Город;
	Пока Лев(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 3);	
	КонецЦикла;
	Пока Прав(Адрес, 2) = ", " Цикл
		Адрес = Сред(Адрес, 1, СтрДлина(Адрес) - 2);	
	КонецЦикла;	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Адрес владельца'"), Адрес);	
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Email владельца'"), Свойства.EmailСубъекта);
	
	Описание = Описание + Символы.ПС;
	
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Издатель сертификата'"),           Свойства.ИмяИздателя);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Начало действия сертификата'"),    Свойства.СрокГодностиОт);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Окончание действия сертификата'"), Свойства.СрокГодностиДо);
	ДобавитьСтрокуОписания(Описание, НСтр("ru = 'Идентификатор открытого ключа'"),  Свойства.ИдентификаторОткрытогоКлюча);
	
	Возврат СокрЛП(Описание);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

#Область ПримитивныеКонстанты

&НаКлиенте
Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

&НаКлиенте
Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

&НаКлиенте
Функция ПолучитьСертификат_ТипВозвращаемыхДанных_СтрокаBase64() Экспорт
	Возврат 1;	
КонецФункции

&НаКлиенте
Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

// не имеет директив
Функция ИмяКомпонентыКриптографии() Экспорт
	
	// для обхода ошибки подключения внешней компоненты на серверных базах
	// при параллельных сеансах работы пользователей используем номер сеанса ИБ, начиная с версии 8.3.7
	Попытка
		
		ТекущийСеансИБ = Вычислить("ПолучитьТекущийСеансИнформационнойБазы()");
		
		УникальныйНомерКомпоненты = "" + Формат(ТекущийСеансИБ.НомерСеанса, "ЧРГ=_") + "" + Формат(ТекущийСеансИБ.НачалоСеанса, "ДФ=ддММгггЧЧммсс") + ЭСФВызовСервераПовтИсп.ПолучитьЭСФВерсияВнешнегоМодуля();
		
		Результат = "";
		
		Для НомерСимвола = 1 По СтрДлина(УникальныйНомерКомпоненты) Цикл
			КодСимвола = КодСимвола(УникальныйНомерКомпоненты, НомерСимвола);
			Если КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
				Результат = Результат + Символ(КодСимвола);
			КонецЕсли;
		КонецЦикла;
		
		УникальныйНомерКомпоненты = Результат;
		
	Исключение
		
		УникальныйНомерКомпоненты = "";
		
	КонецПопытки;
	
	Возврат "CryptoAPI" + УникальныйНомерКомпоненты;
	
КонецФункции

// не имеет директив
Функция ИмяОбъектаКриптографии() Экспорт
	Возврат "AddIn." + ИмяКомпонентыКриптографии() + ".Crypto";	
КонецФункции

&НаКлиенте
Функция ПолноеИмяФормыУстановкаКриптографии() Экспорт
	Возврат "Обработка.ОбменЭСФ.Форма.УстановкаКриптографии";	
КонецФункции

&НаКлиенте
Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

&НаКлиенте
Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

#КонецОбласти

#Область Сертификат

&НаКлиенте
Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

&НаКлиенте
Функция НовыеСвойстваСертификата() 
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуОписания(Описание, Знач Наименование, Знач Значение)
	
	Если НЕ ПустаяСтрока(Значение) Тогда
		Строка = НСтр("ru = '%Наименование%: %Значение%'");
		Строка = СтрЗаменить(Строка, "%Наименование%", Наименование);
		Строка = СтрЗаменить(Строка, "%Значение%", Значение);
		Описание = Описание + Строка + Символы.ПС;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОшибкиКриптографии

&НаКлиенте
Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

&НаКлиенте
Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

&НаКлиенте
Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

&НаКлиенте
Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОТОРЫЕ НУЖНО ВЫПОЛНЯТЬ ОБЯЗАТЕЛЬНО НА СЕРВЕРЕ

#Область СерверныеПроцедурыИФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МодульОбновленияКриптографии

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОНЛАЙН-ОБНОВЛЕНИЯ МОДУЛЯ

// Процедуры c директивой //&НаКлиентеНаСервереБезКонтекста в модуле обычной формы
// объявляются БЕЗ ДИРЕКТИВ

#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ОбновитьМодульКриптографии(ПараметрыАвторизации, ВыполняемоеОповещение = Неопределено, ТихийРежим = Ложь) Экспорт

	Состояние("Подождите, пожалуйста...", ,
		"Производится проверка наличия обновлений модуля криптографии...");
		
	ШапкаОшибки = НСтр("ru = 'Ошибка обновления модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ПараметрыСервераИнтернета = ПолучитьПараметрыИнтернета(ПараметрыАвторизации);
	
	Если ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) = Ложь Тогда 
		// обновление не требуется, завершаем процесс
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	Иначе
		
		// Добавим к параметрым версию модуля
		ПараметрыСервераИнтернета.ДополнительныеПараметры.Вставить("Версия", СвойстваМодуляДляТекущегоРелиза.Версия);
			
		Если НЕ ТихийРежим Тогда
			
			Состояние("Подождите, пожалуйста...", , "Обнаружена новая версия модуля", БиблиотекаКартинок.ДлительнаяОперация48);
			ДатаВыпускаМодуля = ЭСФКлиентСервер.ДатаПоСтроке(СвойстваМодуляДляТекущегоРелиза.Дата);
			// запрашиваем подтверждение на закачку нового модуля
			ТекстВопроса = "В Интернете доступно обновление библиотеки криптографии.
				|
				|Новый модуль: версия " + СвойстваМодуляДляТекущегоРелиза.Версия;
			Если ЗначениеЗаполнено(ДатаВыпускаМодуля) Тогда
				ТекстВопроса = ТекстВопроса + " от " + Формат(ДатаВыпускаМодуля, "ДЛФ=DD");
			Иначе
				ТекстВопроса = ТекстВопроса + ".";
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + "
				|
				|Обновить модуль сейчас (рекомендуется)?";
				
			
			// Выполним обработку
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьМодульКриптографииЗавершение", ЭтаФорма, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Ответ = КодВозвратаДиалога.Да;
			
			ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза", 
				ВыполняемоеОповещение, ШапкаОшибки, ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза);
			
			ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМодульКриптографииЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ШапкаОшибки = ДополнительныеПараметры.ШапкаОшибки;
	ПараметрыСервераИнтернета = ДополнительныеПараметры.ПараметрыСервераИнтернета;
	
	//СвойстваМодуляДляТекущегоРелиза - Возвращаемое значение по результатам обновления
	СвойстваМодуляДляТекущегоРелиза = ДополнительныеПараметры.СвойстваМодуляДляТекущегоРелиза;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// закачиваем, кэшируем и включаем признак использования внешнего модуля		
		Состояние("Подождите, пожалуйста...", , "Производится получение новой версии модуля...", БиблиотекаКартинок.ДлительнаяОперация48);
		Результат = ЗакачатьИВключитьПризнакИспользования(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки);
		Если Результат Тогда			
			ОбновитьПовторноИспользуемыеЗначения();
			Оповестить("ОбновленМодульКриптографии");
		КонецЕсли;
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
		КонецЕсли;
	Иначе
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыИнтернета(СтруктураДополнительныхПараметров) Экспорт
	
	ПараметрыСервераИнтернета = Новый Структура("URLСервера,Порт, КаталогФайловНаСервере, ИмяКлючевогоФайлаНаСервере, Логин, Пароль, Прокси, ДополнительныеПараметры");
	
	ПараметрыСервераИнтернета.URLСервера = АдресРесурсаИТС();	
	ПараметрыСервераИнтернета.Прокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
		
	// аутентификация пользователя	
	ПараметрыСервераИнтернета.ДополнительныеПараметры = СтруктураДополнительныхПараметров;
		
	Возврат ПараметрыСервераИнтернета;	
КонецФункции

#КонецОбласти

#Область СервисыИТС

// Выполняет метод веб-сервиса ИТС.
//
// Параметры:
//  ТекстМетода - Строка - Текст метода, который необходимо выполнить.
//  ИмяВебСервиса - Строка - Имя веб-сервиса, метод которого необходимо вызвать.
//
// Возвращаемое значение:
//  Строка - Результат выполения метода.
//
//&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьМетодВебСервисаИТС(Знач ТекстМетода, Знач ИмяВебСервиса) Экспорт
		
	HTTPСоединение = Новый HTTPСоединение(
			АдресРесурсаИТС(), 
			, 
			, 
			, 
			ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ(), 
			,			
			);
		
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса	= ИмяВебСервиса;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	
	HTTPЗапрос.Заголовки = Заголовки;
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстМетода, "UTF-8");
	
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
	
	ТекстОтвета = СокрЛП(HTTPОтвет.ПолучитьТелоКакСтроку());
	
	Возврат ТекстОтвета;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСсылкуНаСкачиваниеБиблиотеки(ДанныеПрофиля, Идентификатор = "") Экспорт
	СсылкаНаСкачивание = "";
		
	ЗапросXML = ТекстЗапросаEsfLibRequest(ДанныеПрофиля);
	ОтветXML = ВыполнитьМетодВебСервисаИТС(ЗапросXML, ИмяСервисаВыдачиСсылкиПользователю());
		
	ИнформацияОбОшибке = Неопределено;
	Если НЕ ЭтоОшибкаСервисаИТС(ОтветXML, ИнформацияОбОшибке) Тогда		
		ОтветXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);		
		СсылкаНаСкачивание = ОтветXDTO.reference;	
		Идентификатор = ОтветXDTO.id;			
	Иначе
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ИнформацияОбОшибке.ПодробноеПредставление);
		ВызватьИсключение(НСТР("ru='Не удалось получить данные с сервера ИТС!'") + Символы.ПС + ИнформацияОбОшибке.КраткоеПредставление);
	КонецЕсли;
	
	Возврат СсылкаНаСкачивание;
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Процедура ОтправитьПодтверждениеОЗавершенииСкачивания(Идентификатор)
	СсылкаНаСкачивание = "";
		
	ЗапросXML = ТекстЗапросаEsfDnlAckRequest(Идентификатор);
	
	ОтветXML = ВыполнитьМетодВебСервисаИТС(ЗапросXML,  ИмяСервисаПодтвержденияЗагрузки());		
КонецПроцедуры

///////////////////////////////////////////////////////////
// Имена сервисов

//&НаКлиентеНаСервереБезКонтекста
Функция АдресРесурсаИТС()
	Возврат "its.1c.kz";
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ИмяСервисаВыдачиСсылкиПользователю()
	Возврат "/download/esf/request";
КонецФункции	

//&НаКлиентеНаСервереБезКонтекста
Функция ИмяСервисаПодтвержденияЗагрузки()
	Возврат "/download/esf/acknowledge";
КонецФункции	

// Тексты запросов
//&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаEsfLibRequest(ДанныеПрофиля) Экспорт	
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfLibRequest");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[IDConf]", ДанныеПрофиля.ИДКонфигурации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[VersionConf]", ДанныеПрофиля.ВерсияКонфигурации); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Version]", ДанныеПрофиля.Версия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Isbase]", ?(ДанныеПрофиля.ЭтоБазовая,1,0));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[RegNumber]", ДанныеПрофиля.РегистрационныйНомер);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationBIN]", ДанныеПрофиля.ОрганизацияБИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationName]", ДанныеПрофиля.ОрганизацияНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationAddr]", ДанныеПрофиля.ОрганизацияАдрес);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[OrgainzationContacts]", ДанныеПрофиля.ОрганизацияТелефон);
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserIIN]", ДанныеПрофиля.ПользовательИИН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserFisrtName]", ДанныеПрофиля.ПользовательИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserSecondName]", ДанныеПрофиля.ПользовательОтчество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserLastName]", ДанныеПрофиля.ПользовательФамилия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[UserPosition]", ДанныеПрофиля.ПользовательДолжность);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ExtraInfo]", ДанныеПрофиля.ДополнительныеСведения);
	
	Возврат ТекстЗапроса;
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗапросаEsfDnlAckRequest(ИдентификаторСессии)Экспорт	
	ТекстЗапроса = КриптографияВызовСервера.ПолучитьТекстЗапроса("ЗапросEsfDnlAckRequest");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ID]", ИдентификаторСессии);
	         	
	Возврат ТекстЗапроса;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ОШИБОК
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЭтоОшибкаСервисаИТС(Знач ОтветXML, ИнформацияОбОшибке = Неопределено, IDСессии = "") Экспорт
	
	ЭтоОшибка = Ложь;
	
	ИнформацияОбОшибке = Новый Структура("Код, КраткоеПредставление, ПодробноеПредставление", 0, "", "");
	// Нештатная ситуация, некорректный ответ	
	Если Найти(НРЕГ(ОтветXML), "esf_lib_response") = 0 Тогда
		
		ИнформацияОбОшибке.Код = 100;	
		ИнформацияОбОшибке.КраткоеПредставление = "Сервер ИТС недоступен или предоставил некорректный ответ.";
		
		ТекстОшибки = "Сообщите в службу поддержки нижеприведенную информацию. %ПС% Ответ сервиса: %1%";
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", СокрЛП(ОтветXML));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %ПС%", Символы.ПС);		
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
		
		Возврат Истина;
	КонецЕсли;	
	
	// Нештатная ситуация, корректный ответ	
	ОбъектXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(ОтветXML, ФабрикаXDTO);	
	Попытка
		ИнформацияОбОшибке.Код = Число(СокрЛП(ОбъектXDTO.code));
		ИнформацияОбОшибке.КраткоеПредставление = СокрЛП(ОбъектXDTO.message);		
		IDСессии = ?(ТипЗнч(ОбъектXDTO.id) = Тип("ОбъектXDTO"), "", СокрЛП(ОбъектXDTO.id));// в случае пустого значения, возникает Объект XDTO 			
		
		ТекстОшибки = НСТР("ru = 'Код ошибки: %1%. IDСессии: %2%. Ошибка: %3%'");			
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", ИнформацияОбОшибке.Код);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %2%", IDСессии);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %3%", СокрЛП(ОбъектXDTO.message));
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
	Исключение
		ИнформацияОбОшибке.Код = "101";	
		ИнформацияОбОшибке.КраткоеПредставление = НСТР("ru='При обработке сведений сервиса ИТС возникла неустановленная ошибка.'");
		
		ТекстОшибки = НСТР("ru = 'Код ошибки: %1%. IDСессии: %2%. %ПС% Ответ сервиса: %3%'");			
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %1%", ИнформацияОбОшибке.Код);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %2%", IDСессии);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %3%", СокрЛП(ОтветXML));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, " %ПС%", Символы.ПС);
		ИнформацияОбОшибке.ПодробноеПредставление = ТекстОшибки;
		
		Возврат Истина;
	КонецПопытки;
		
	// штатная ситуация, в выдаче отказано
	Если ИнформацияОбОшибке.Код <> 0 Тогда
		// В случае верных данных сервис возвращает 0 код ошибки.
		// Код, отличный от 0 означает наличие ошибки в регистрационных данных пользователя.
		
		ЭтоОшибка = Истина;				
	КонецЕсли;
	
	Возврат ЭтоОшибка;	
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции разбора XML

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЗагрузитьXMLВДеревоЗначений(ИмяФайлаXML = Неопределено, ТекстXML = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// считываем текст из файла
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайлаXML, , Истина);
		Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем дерево
	Возврат ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML, ОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с Интернет

//&НаКлиентеНаСервереБезКонтекста
Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
		
	НастройкиПрокси = ЭСФКлиентСервер.НовыйПроксиСерверИСЭСФ();
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, 
					?(ЗначениеЗаполнено(ПараметрыСоединения.Порт), ПараметрыСоединения.Порт, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Логин), ПараметрыСоединения.Логин, Неопределено),
					?(ЗначениеЗаполнено(ПараметрыСоединения.Пароль), ПараметрыСоединения.Пароль, Неопределено),
					НастройкиПрокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Функции работы с файлами-обновления
//&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаКартыРелизов() Экспорт
	Возврат "/download/esf/releasemap?version=2.0";		
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
// Возвращает структуру: Версия, Имя, Дата См. структуру файла releasemap для текущего релиза конфигурации
Функция ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Для Каждого Стр1 Из ДеревоКартыРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Продолжить;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								
								Если ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурации И ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурацииБЭСФ Тогда
									Продолжить;
								КонецЕсли;
								
								Для Каждого Стр5 Из Стр4.Строки Цикл
									Если Стр5.Тип = "Э" И Стр5.Имя = "module" Тогда
										УзелВерсия = Стр5.Строки.Найти("version", "Имя");
										УзелИмя = Стр5.Строки.Найти("name", "Имя");
										УзелДата = Стр5.Строки.Найти("date", "Имя");
										Если УзелВерсия <> Неопределено И УзелИмя <> Неопределено Тогда
											Результат = Новый Структура("Версия, Имя", СокрЛП(УзелВерсия.Значение), СокрЛП(УзелИмя.Значение));
											Если ЗначениеЗаполнено(УзелДата) И ЗначениеЗаполнено(УзелДата.Значение) Тогда
												Результат.Вставить("Дата", УзелДата.Значение);
											КонецЕсли;
											Возврат Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

&НаКлиенте
// Возвращаемые значения:
// 		Ложь - обновление не требуется
// 		Истина - необходимо обновить внешний модуль
Функция ПроверитьНаличиеОбновлений(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки) Экспорт
	
	// пытаемся установить соединение с сервером
	Соединение = УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат Ложь;
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете 	= СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	КонтейнерМетодов = ЭСФКлиентСервер.КонтейнерМетодов();	
	ВерсияМодуляВБазе = СтрЗаменить(КонтейнерМетодов.ВерсияВнешнегоМодуляКриптографии(), Символы.НПП, "");
	
	Если ВерсияМодуляВИнтернете = ВерсияМодуляВБазе Тогда
		// обновление не требуется
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ОпределитьПараметрыМодуляТекущегоРелиза(ФайлКартаРелизовАдрес, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Экспорт
	
	// распаковываем
	ФайлКартыРелизовАрхив = ПолучитьИмяВременногоФайла("zip");
	ФайлКартыРелизовДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлКартаРелизовАдрес);
	ФайлКартыРелизовДвоичныеДанные.Записать(ФайлКартыРелизовАрхив);
	
	ОписаниеОшибки = "";
	ФайлКартаРелизов = ЭСФСервер.РаспаковатьФайл(ФайлКартыРелизовАрхив, ОписаниеОшибки);

	УдалитьФайлы(ФайлКартыРелизовАрхив);
	
	Если НЕ ЗначениеЗаполнено(ФайлКартаРелизов) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем справочник в дерево
	ТекстФайлаСправочника = "";
	ОписаниеОшибки = "";
	
	ДеревоКартыРелизов = ЗагрузитьXMLВДеревоЗначений(ФайлКартаРелизов, ТекстФайлаСправочника, ОписаниеОшибки);
	
	УдалитьФайлы(ФайлКартаРелизов);
	
	Если НЕ ЗначениеЗаполнено(ДеревоКартыРелизов) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
									ШапкаОшибки + Символы.ПС + Символы.ПС,
									Символы.ПС + ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ДеревоКартыРелизов = Неопределено Тогда		
		Возврат Ложь;                           			
	КонецЕсли;
	
	// определяем последнюю доступную версию модуля документооборота для текущего релиза
	СвойстваМодуляДляТекущегоРелиза = ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов);
	Если НЕ ЗначениеЗаполнено(СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат Ложь;
	КонецЕсли;
			
	Возврат Истина;
	
КонецФункции //ОпределитьПараметрыМодуляТекущегоРелиза

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПрименитьСвойстваМодуляДокументооборота(ВнешнийМодульАдрес = Неопределено, СвойстваМодуля = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	ВнешнийМодуль = ПолучитьИзВременногоХранилища(ВнешнийМодульАдрес);
	
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	
	// подготавливаем двоичные данные внешнего модуля
	Если ВнешнийМодуль <> Неопределено И СвойстваМодуля <> Неопределено Тогда
		
		МодифицируемыеКонстанты.Добавить("ЭСФВерсияВнешнегоМодуля");
		МодифицируемыеКонстанты.Добавить("ЭСФВнешнийМодуль");
		
		ОбъектВнешнийМодуль = Новый ХранилищеЗначения(ВнешнийМодуль);
		ВерсияВнешнегоМодуля = СвойстваМодуля.Версия;					
	КонецЕсли;
		
	СтрМодифицируемыеКонстанты = "";
	Для Счетчик = 0 По МодифицируемыеКонстанты.Количество()-1 Цикл
		Если Счетчик > 0 Тогда
			СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + ", " ;
		КонецЕсли;		
		СтрМодифицируемыеКонстанты = СтрМодифицируемыеКонстанты + МодифицируемыеКонстанты[Счетчик]; 
	КонецЦикла;
		
	// инициализируем значения констант
	Попытка
		КонстантыНабор = Константы.СоздатьНабор(СтрМодифицируемыеКонстанты);		
		Если ВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ЭСФВнешнийМодуль = ОбъектВнешнийМодуль;
			КонстантыНабор.ЭСФВерсияВнешнегоМодуля = ВерсияВнешнегоМодуля;
		КонецЕсли;
		КонстантыНабор.Записать();
		ЗаписьЖурналаРегистрации("Загрузка",,Метаданные.Константы.ЭСФВнешнийМодуль,ВерсияВнешнегоМодуля, "Загружен новый модуль криптографии"); 
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ЗакачатьИВключитьПризнакИспользования(ПараметрыСервераИнтернета, СвойстваМодуляДляТекущегоРелиза, ШапкаОшибки)
	ИдентификаторСессии = "";
	СсылкаМодуль = ПолучитьСсылкуНаСкачиваниеБиблиотеки(ПараметрыСервераИнтернета.ДополнительныеПараметры, ИдентификаторСессии);
	// пытаемся установить соединение с сервером	
	Соединение = УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	АрхивМодуля = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(СсылкаМодуль, АрхивМодуля);
		УстановитьСоединение = Ложь;
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	ОписаниеОшибки = "";	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(АрхивМодуля)); // переходим на сервер
	РезультатРегистрации = ПрименитьСвойстваМодуляДокументооборота(АдресВоВременномХранилище, СвойстваМодуляДляТекущегоРелиза, ОписаниеОшибки);	
	УдалитьФайлы(АрхивМодуля);
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда		
		ОтправитьПодтверждениеОЗавершенииСкачивания(ИдентификаторСессии);
	КонецЕсли;
	
	Если НЕ РезультатРегистрации Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				ОписаниеОшибки);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;     	
	// сообщаем
	ТекстСообщения = НСтр("ru = 'Новая версия криптографической библиотеки зарегистрирована в информационной базе.'");
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
	
	Возврат Истина;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////
// Прочие функции

//&НаКлиентеНаСервереБезКонтекста
Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации)
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ID", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) 
			ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурацииБЭСФ, ИДКонфигурацииУзла) Тогда
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	             
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии)
	
	МассивЧастейШаблона = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ШаблонВерсии);
	МассивЧастейТекущейВерсии = ЭСФКлиентСервер.РазобратьСтрокуВМассивПоРазделителю(ВерсияТекущейПлатформы);
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "version", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ИнформацияОПрограмме()
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ЭСФКлиентСервер.ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			ЭСФСерверПереопределяемый.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Результат.Вставить("ИДКонфигурацииБЭСФ",		"БиблиотекаЭлектронныхСчетовФактур");	
	Результат.Вставить("ВерсияКонфигурацииБЭСФ",	СокрЛП(ВерсияБЭСФ));
	
	Возврат Результат;	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЭСФКлиент

&НаКлиенте
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	ЭСФВызовСервера.ПроверитьИсходящиеЭСФ(МассивИсходящихЭСФ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
		
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭСФВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("МассивИсходящихЭСФ", МассивИсходящихЭСФ);
	ОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты", ЭтаФорма, ДополнительныеПараметры);
	ЭСФКлиент.УстановитьТекущуюДатуДляЭСФИСчетовФакутурВопрос(МассивИсходящихЭСФ, ЭСФКлиентСервер.ДействиеОтправка(), ОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		// если действие выполняется при закрытии открытии ИБ, очередь не должна очиститься в случае отмены исправления даты
		Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(ДополнительныеПараметры.МассивИсходящихЭСФ);
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.МассивИсходящихЭСФ);
		
		Возврат;
		
	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭСФВызовСервера.УстановитьТекущуюДатуДляЭСФИСчетовФакутур(ДополнительныеПараметры.МассивИсходящихЭСФ, ДополнительныеПараметры.ТекущаяДата);
		ОтправитьИсходящиеЭСФВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	Иначе
		ОтправитьИсходящиеЭСФВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеЭСФВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихЭСФ = ДополнительныеПараметры.МассивИсходящихЭСФ;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры());
	
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивИсходящихЭСФ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);

	ОтправитьИсходящиеЭСФЗавершение = Новый ОписаниеОповещения("ОтправитьИсходящиеЭСФЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", КоллекцияСгруппированныхЭСФ, Истина);
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОтправитьИсходящиеЭСФЗавершение, ПараметрыФормы);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеЭСФЗавершение(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихЭСФ = ДополнительныеПараметры.МассивИсходящихЭСФ;
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		
		// если действие выполняется при закрытии открытии ИБ, очередь не должна очиститься
		Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(МассивИсходящихЭСФ);
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихЭСФ);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЭСФ = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;
	
	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	КоллекцияСгруппированныхЭСФ = ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ;
	
	КоллекцияПодписейЭСФ = Новый Соответствие;
	КоллекцияАдресКоллекцииInvoiceXML = Новый Соответствие;
	КоллекцияСоответствиеЭСФ = Новый Соответствие;
	КоллекцияУполномоченныйСотрудник = Новый Соответствие;
	
	Попытка
	
		Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			
			Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
				
				СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
				МассивЭСФ = СгруппированныеЭСФ.Значение;
				
				ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
				
				ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);
				
				Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ) Тогда
					Возврат;	
				КонецЕсли;
				
				ТипПодписиЭСФ = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
				
				УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
				
				Если НЕ ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
					
					ДанныеКлюча = СвойстваСертификата(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
					
					УполномоченныйСотрудник = ДанныеКлюча.ИмяФамилияСубъекта + " " + ДанныеКлюча.ОтчествоСубъекта;
					
				КонецЕсли;
				
				КоллекцияУполномоченныйСотрудник.Вставить(СтруктурнаяЕдиница, УполномоченныйСотрудник);

				АдресКоллекцииInvoiceXML = Неопределено;
				КоллекцияSignedContentXML = Неопределено;
				ЭСФВызовСервера.СоздатьИсходящиеInvoice(МассивЭСФ, Истина, ТипПодписиЭСФ, АдресКоллекцииInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
				
				КоллекцияПодписейЭСФ.Вставить(СтруктурнаяЕдиница, ЭСФКлиентСервер.НоваяКоллекцияПодписейЭСФ(КоллекцияSignedContentXML, ДанныеКлючаЭЦП));
			
				КоллекцияСоответствиеЭСФ.Вставить(СтруктурнаяЕдиница, ПолучитьИзВременногоХранилища(АдресКоллекцииInvoiceXML));
				
				КоллекцияАдресКоллекцииInvoiceXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииInvoiceXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		
		Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(МассивИсходящихЭСФ);
		КонецЕсли;
		
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихЭСФ);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки; 	
		
	// Создать и отправить коллекцию Invoice.
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		
		
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
			КлючФоновогоЗадания = Новый УникальныйИдентификатор;
			
			ПараметрыЗадания = Новый Структура("ВерсияИСЭСФ, КоллекцияСоответствиеЭСФ, КоллекцияПодписейЭСФ, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания", ВерсияИСЭСФ, КоллекцияСоответствиеЭСФ, КоллекцияПодписейЭСФ, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания);
			Если ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
				ПараметрыЗадания.Вставить("НеПерезаполнятьОчередьОтправки", ДополнительныеПараметры.НеПерезаполнятьОчередьОтправки);
			КонецЕсли;
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка ЭСФ'");
			ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
			
			Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ОтправитьИсходящиеInvoiceВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");

			Попытка
				
				Результат = ЭСФВызовСервера.ОтправитьИсходящиеInvoice(
					ВерсияИСЭСФ,
					КоллекцияАдресКоллекцииInvoiceXML, 
					КоллекцияПодписейЭСФ, 
					ДанныеПрофилейИСЭСФ,
					КоллекцияУполномоченныйСотрудник,
					НеПерезаполнятьОчередьОтправки);
					
			Исключение
				
				// обновим данные открытых форм, тк до вызова исключения часть ЭСФ может быть отправлена и обновлена в ИБ
				ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихЭСФ);
				
				ВызватьИсключение ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииInvoiceXML Из КоллекцияАдресКоллекцииInvoiceXML Цикл
			
			АдресКоллекцииInvoiceXML = СтрокаАдресКоллекцииInvoiceXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииInvoiceXML);
			
		КонецЦикла;

	Иначе 
		
		ДополнительныеПараметры.Вставить("КоллекцияУполномоченныйСотрудник", КоллекцияУполномоченныйСотрудник);
		
		Результат = ЭСФВызовСервера.СоздатьИОтправитьКоллекциюInvoice(КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры, ВерсияИСЭСФ);
			
	КонецЕсли;

	// Если отправляем из формы списка, делаем фоновую отправку
	Если ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Отправка документов в ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("ЭСФ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихЭСФ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
		
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивИсходящихЭСФ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);
	ДополнительныеПараметры.Вставить("МассивИсходящихЭСФ", МассивИсходящихЭСФ);

	ОбновитьПоНомеруИДатеИОтправитьИсходящиеЭСФ = Новый ОписаниеОповещения("ОбновитьПоНомеруИДатеИОтправитьИсходящиеЭСФ", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", КоллекцияСгруппированныхЭСФ, Истина);
	
	ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьПоНомеруИДатеИОтправитьИсходящиеЭСФ, ПараметрыФормы);	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоНомеруИДатеИОтправитьИсходящиеЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихЭСФ = ДополнительныеПараметры.МассивИсходящихЭСФ;
		
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		
		
		// если действие выполняется при закрытии открытии ИБ, очередь не должна очиститься
		Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(МассивИсходящихЭСФ);
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихЭСФ);
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры);
	
	// проверим и исключим документы ЭСФ, уже отправленные в ИС ЭСФ
	Если НЕ ЭСФВызовСервера.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МассивИсходящихЭСФ", МассивИсходящихЭСФ);
	ДополнительныеПараметры.Вставить("ДанныеПрофилейИСЭСФ", ДанныеПрофилейИСЭСФ);
	ОбновитьИОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ОбновитьИОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты", ЭтаФорма, ДополнительныеПараметры);
	ЭСФКлиент.УстановитьТекущуюДатуДляЭСФИСчетовФакутурВопрос(МассивИсходящихЭСФ, ЭСФКлиентСервер.ДействиеОтправка(), ОбновитьИОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИОтправитьИсходящиеЭСФПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		// если действие выполняется при закрытии открытии ИБ, очередь не должна очиститься в случае отмены исправления даты
		Если НЕ ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(ДополнительныеПараметры.МассивИсходящихЭСФ);
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.МассивИсходящихЭСФ);
		
		Возврат;
		
	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭСФВызовСервера.УстановитьТекущуюДатуДляЭСФИСчетовФакутур(ДополнительныеПараметры.МассивИсходящихЭСФ, ДополнительныеПараметры.ТекущаяДата);
	КонецЕсли;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры());
	
	ОтправитьИсходящиеЭСФЗавершение(ДополнительныеПараметры.ДанныеПрофилейИСЭСФ, ДополнительныеПараметры);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
		
	Если МассивИсходящихЭСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьИсходящиеЭСФПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ВыгрузитьИсходящиеЭСФПослеВопросаУстановкиДаты", ЭтаФорма, Новый Структура("МассивИсходящихЭСФ", МассивИсходящихЭСФ));
	ЭСФКлиент.УстановитьТекущуюДатуДляЭСФИСчетовФакутурВопрос(МассивИсходящихЭСФ, ЭСФКлиентСервер.ДействиеВыгрузка(), ВыгрузитьИсходящиеЭСФПослеВопросаУстановкиДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИсходящиеЭСФПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;	
	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЭСФВызовСервера.УстановитьТекущуюДатуДляЭСФИСчетовФакутур(ДополнительныеПараметры.МассивИсходящихЭСФ, ДополнительныеПараметры.ТекущаяДата);
	КонецЕсли;
	
	XML = ЭСФВызовСервера.СоздатьXMLДляИмпортаВИСЭСФ(ДополнительныеПараметры.МассивИсходящихЭСФ);
	
	Если НЕ ПустаяСтрока(XML) Тогда
		ЭСФКлиент.СохранитьXMLДляИмпортаВИСЭСФ(XML);
	КонецЕсли;
	
	// Изменили статус документа, нужно перечитать, если отправка происходит из формы
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры());

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивЭСФ, Знач НаправлениеЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
		
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивЭСФ);		
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхЭСФ);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);
	ДополнительныеПараметры.Вставить("НаправлениеЭСФ", НаправлениеЭСФ);
	ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", ЗапускатьФоновоеЗадание);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОбновитьСтатусыЭСФПоИдентификаторамВыборДанныхПрофилей = Новый ОписаниеОповещения("ОбновитьСтатусыЭСФПоИдентификаторамВыборДанныхПрофилей", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьСтатусыЭСФПоИдентификаторамВыборДанныхПрофилей, ПараметрыФормы);	
		
	Иначе
		ОбновитьСтатусыЭСФПоИдентификаторамВыборДанныхПрофилей(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЭСФПоИдентификаторамВыборДанныхПрофилей(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ, НаправлениеЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры.НаправлениеЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(ЭтаФорма);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов ЭСФ'");
		
		Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ОбновитьСтатусыЭСФПоИдентификаторамВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
	
		ЭСФВызовСервера.ОбновитьСтатусыЭСФПоИдентификаторам(ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;

	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("ЭСФ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивЭСФ);		
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхЭСФ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФ = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФ", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыВыборДанныхПрофилейИСЭСФ, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВыборДанныхПрофилейИСЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов ЭСФ'");
		
		Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
							
		ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФ(ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("ЭСФ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивЭСФ);		

	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхЭСФ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов ЭСФ'");
		
		Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДатеВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
	Иначе
		
		ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
		
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("ЭСФ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭСФ(Знач Параметр) Экспорт
	
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетовФактур.Количество() > 1 Тогда 
		
		ТекстВопроса = НСтр(
		"ru = 'Для выделенных счетов-фактур будут созданы и записаны документы ЭСФ.
		|Созданные документы ЭСФ будут указаны в качестве актуальных ЭСФ для счетов-фактур.
		|Продолжить?'");
		
		ДополнительныеПараметры = Новый Структура("МассивСчетовФактур", МассивСчетовФактур);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокЭСФЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли МассивСчетовФактур.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", МассивСчетовФактур[0]);
		ОткрытьФорму("Документ.ЭСФ.ФормаОбъекта", ПараметрыФормы);	
		
	Иначе // МассивСчетовФактур.Количество() = 0 Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один счет-фактуру.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписокЭСФЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МассивСчетовФактур = ДополнительныеПараметры.МассивСчетовФактур;
		СписокСозданныхЭСФ = ЭСФВызовСервера.СоздатьСписокИсходящихЭСФ(МассивСчетовФактур);
		
		Если СписокСозданныхЭСФ <> Неопределено И СписокСозданныхЭСФ.Количество() > 0 Тогда
			
			ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
			ПараметрыФормы = Новый Структура;	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокСозданныхЭСФ)));
			ОткрытьФорму("Документ.ЭСФ.Форма.ФормаСпискаИсходящих", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЭСФ(Знач Параметр) Экспорт
	
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один счет-фактуру.'"));
		Возврат;
	КонецЕсли;
	
	СоответствиеДляОбновленияАктуальныхЭСФ = ЭСФВызовСервера.НовоеСоответствиеДляОбновленияАктуальныхЭСФ(МассивСчетовФактур);
	
	ПерезаполнитьЭСФЗавершение = Новый ОписаниеОповещения("ПерезаполнитьЭСФЗавершение", ЭтаФорма, Новый Структура("СоответствиеДляОбновленияАктуальныхЭСФ", СоответствиеДляОбновленияАктуальныхЭСФ));
	
	Если СоответствиеДляОбновленияАктуальныхЭСФ.Количество() = МассивСчетовФактур.Количество() Тогда
		Если СоответствиеДляОбновленияАктуальныхЭСФ.Количество() > 1 Тогда 
			ПоказатьВопрос(ПерезаполнитьЭСФЗавершение, НСтр("ru = 'Перезаполнить актуальные электронные счета-фактуры на основании счетов-фактур?'"), РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли СоответствиеДляОбновленияАктуальныхЭСФ.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Перезаполнить ""%ЭСФ%"" на основании счета-фактуры?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ЭСФ%", СоответствиеДляОбновленияАктуальныхЭСФ[МассивСчетовФактур[0]]);
			ПоказатьВопрос(ПерезаполнитьЭСФЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;		
	ИначеЕсли СоответствиеДляОбновленияАктуальныхЭСФ.Количество() <> 0 Тогда
		ТекстВопроса = НСтр(
			"ru = 'Невозможно перезаполнить все электронные счета-фактуры.
             |
             |Всего счетов-фактур: %ВсегоКоличество% шт.
             |Возможно перезаполнить счетов-фактур: %ВозможноКоличество% шт.
             |
             |Перезаполнить электронные счета-фактуры, которые возможно перезаполнить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВсегоКоличество%", МассивСчетовФактур.Количество());	
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВозможноКоличество%", СоответствиеДляОбновленияАктуальныхЭСФ.Количество());
		ПоказатьВопрос(ПерезаполнитьЭСФЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЭСФЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		СоответствиеДляОбновленияАктуальныхЭСФ = ДополнительныеПараметры.СоответствиеДляОбновленияАктуальныхЭСФ;
		ЭСФВызовСервера.ОбновитьАктуальныеЭСФ(СоответствиеДляОбновленияАктуальныхЭСФ);
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
		Если СоответствиеДляОбновленияАктуальныхЭСФ.Количество() > 1 Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'Актуальные электронные счета-фактуры успешно перезаполнены.'"));
		ИначеЕсли СоответствиеДляОбновленияАктуальныхЭСФ.Количество() = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Электронный счет-фактура успешно перезаполнен.'"));
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭСФ(Знач Параметр, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать и заполнить массив счетов-фактур.
	
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один счет-фактуру.'"));
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Создать и заполнить массив ЭСФ для обновления через API ИС ЭСФ.
	
	МассивЭСФ = Новый Массив;
	
	СоответствиеАктуальныхЭСФ = ЭСФВызовСервера.НайтиАктуальныеЭСФПоСчетамФактурам(МассивСчетовФактур);
	
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхЭСФ Цикл
		
		Если ЭлементСоответствия.Значение <> Неопределено Тогда
			
			МассивЭСФ.Добавить(ЭлементСоответствия.Значение.ЭСФ);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Документ ""%СчетФактура%"" не имеет связанного электронного счета-фактуры.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", ЭлементСоответствия.Ключ);
			Сообщить(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Вызвать метод для обновления документов ЭСФ через API ИС ЭСФ.

	ОбновитьДокументыЭСФИзИСЭСФ(МассивЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЭСФ(Знач Параметр, Знач ЗапускатьФоновоеЗадание) Экспорт
		
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один счет-фактуру.'"));
		Возврат;
	КонецЕсли;
	
	МассивОтзываемыхЭСФ = ЭСФВызовСервера.НовыйМассивОтзываемыхЭСФ(МассивСчетовФактур);
	
	ОткрытьФормуИзменениеСтатусовЭСФ(ЭСФКлиентСервер.ДействиеОтзыв(), МассивОтзываемыхЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзменениеСтатусовЭСФ(Знач Действие, Знач МассивЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	ПараметрыФормы = ЭСФКлиентСервер.ПустыеПараметрыФормыИзменениеСтатусовЭСФ();
	ПараметрыФормы.Действие = Действие;
	ПараметрыФормы.МассивЭСФ = МассивЭСФ;
	ПараметрыФормы.ЗапускатьФоновоеЗадание = ЗапускатьФоновоеЗадание;
	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ИзменениеСтатусовЭСФ", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭСФ(Знач Параметр) Экспорт
		
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МассивСчетовФактур", МассивСчетовФактур);
	
	Если МассивСчетовФактур.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите хотя бы один счет-фактуру.'"));
		Возврат;
	ИначеЕсли МассивСчетовФактур.Количество() > 10 Тогда
		ТекстВопроса = НСтр(
			"ru = 'Будет открыто форм электронных счетов-фактур: %Количество%.
			|Вы действительно хотите продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Количество%", МассивСчетовФактур.Количество());	
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьМодульКриптографииЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьЭСФЗавершение(КодВозвратаДиалога.ОК, ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭСФЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		КоллецияАктуальныхЭСФ = ЭСФВызовСервера.НайтиАктуальныеЭСФПоСчетамФактурам(ДополнительныеПараметры.МассивСчетовФактур);
		
		ТекстСообщения = "";
		
		Для Каждого ЭлементКоллекции Из КоллецияАктуальныхЭСФ Цикл
			
			Если ЭлементКоллекции.Значение <> Неопределено Тогда
				ПоказатьЗначение(, ЭлементКоллекции.Значение.ЭСФ);		
			Иначе
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Документ ""%СчетФактура%"" не имеет актуального электронного счета-фактуры.'") + Символы.ПС;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетФактура%", ЭлементКоллекции.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Сообщить(СокрЛП(ТекстСообщения));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура СвязанныеЭСФ(Знач Параметр) Экспорт
	
	МассивСчетовФактур = ЭСФКлиент.МассивСчетовФактур(Параметр);
	
	Если МассивСчетовФактур = Неопределено Тогда
		Возврат;
	ИначеЕсли МассивСчетовФактур.Количество() <> 1 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите один счет-фактуру.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("СчетФактура", МассивСчетовФактур[0]);
	
	Если ТипЗнч(МассивСчетовФактур[0]) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		ОткрытьФорму("Документ.ЭСФ.Форма.ФормаСпискаИсходящих", ПараметрыФормы);
	Иначе
		ОткрытьФорму("Документ.ЭСФ.Форма.ФормаСпискаВходящих", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭСФ(Знач Направление = Неопределено) Экспорт
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ОткрытьФорму("Документ.ЭСФ.Форма.ФормаСпискаВходящих");
	ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		ОткрытьФорму("Документ.ЭСФ.Форма.ФормаСпискаИсходящих");
	Иначе
		ОткрытьФорму("Документ.ЭСФ.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСтатусыЭСФ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификаторФормыВладельца, Знач ЗапускатьФоновоеЗадание) Экспорт	
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
					
		Результат = ЭСФВызовСервера.СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП.ОткрытыйСертификатBase64);
		
		ПодписьЗапроса = СоздатьЭЦП(
			Результат.СтрокаДляПодписи, 
			ДанныеКлючаЭЦП.КлючBase64,
			ДанныеКлючаЭЦП.Пароль);
			
		ТекстЗапроса = Результат.ТекстЗапроса; 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signature]", ПодписьЗапроса);	
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ", Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ);
			
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			НаименованиеЗадания = НСтр("ru = '%1 ЭСФ'");
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ВыполнитьЗапросНаИзменениеСтатусовВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = ЭСФВызовСервера.ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ);
			
		КонецЕсли;
					
	Иначе 
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ", Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			
			НаименованиеЗадания = НСтр("ru = '%1 ЭСФ'");
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ИзменитьСтатусыЭСФВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = ЭСФВызовСервера.ИзменитьСтатусыЭСФ(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОткрытиеФорм

&НаКлиенте
Процедура ПриОткрытииФормы(Форма, Отказ) Экспорт
		
КонецПроцедуры

#КонецОбласти

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ВерсияВнешнегоМодуляКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЭСФВерсияВнешнегоМодуля.Получить();
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПолучитьВерсиюКомпонентыНаСайте() Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	
	ШапкаОшибки = НСтр("ru = 'Ошибка получения версии модуля криптографии:'");	
	
	СвойстваМодуляДляТекущегоРелиза = Неопределено;
	КаталогФайловНаСервере = Неопределено;
	
	ВерсияМодуляВИнтернете = "";
	
	ПараметрыСервераИнтернета = Контейнер.ПолучитьПараметрыИнтернета(Новый Структура);
	
	// пытаемся установить соединение с сервером
	Соединение = Контейнер.УстановитьСоединениеССерверомИнтернета(ПараметрыСервераИнтернета.URLСервера,ПараметрыСервераИнтернета);
	Если Соединение = Неопределено Тогда		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
																				ШапкаОшибки + Символы.ПС + Символы.ПС,
																				Символы.ПС + ИнформацияОбОшибке().Описание);

		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);		
		Возврат "";
	КонецЕсли;
		
		
	ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");	
	Попытка
		Соединение.Получить(Контейнер.ПолучитьИмяФайлаКартыРелизов(), ФайлКартаРелизовАрхив);
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Ошибка доступа к серверу обновлений модуля документооборота: %2.'"),
							ШапкаОшибки + Символы.ПС + Символы.ПС,
							Символы.ПС + ИнформацияОбОшибке().Описание);
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
	// получаем файл справочника внешних модулей с сервера (карты релизов)
	СвойстваМодуляДляТекущегоРелиза = Неопределено;			
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлКартаРелизовАрхив));
	// РаспаковатьСохранитьСправочникВКэше
	Если НЕ Контейнер.ОпределитьПараметрыМодуляТекущегоРелиза(АдресВоВременномХранилище, ШапкаОшибки, СвойстваМодуляДляТекущегоРелиза) Тогда
		Возврат ВерсияМодуляВИнтернете;
	КонецЕсли;
	
	// Сравниваем требуемую версию модуля, с версией, загруженной в ИБ	
	ВерсияМодуляВИнтернете = СтрЗаменить(СвойстваМодуляДляТекущегоРелиза.Версия, Символы.НПП, "");	
	
	Возврат ВерсияМодуляВИнтернете;

КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция ПроверитьСоответствиеВерсииМодуляИБиблиотеки() Экспорт
	ВерсияВнешнегоМодуля = Константы.ЭСФВерсияВнешнегоМодуля.Получить();
	
КонецФункции

#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
&НаСервере
#КонецЕсли
Функция СписокПоддерживаемыхВерсийБиблиотеки() Экспорт
	Список = Новый СписокЗначений;
	
КонецФункции

ВерсияБЭСФ = "1.0.8.1";
#КонецЕсли