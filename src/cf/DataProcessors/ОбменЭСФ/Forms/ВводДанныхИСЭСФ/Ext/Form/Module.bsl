#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТребуетсяВыборСертификата = Параметры.Свойство("ТребуетсяВыборСертификата");
	ПереданСписокПользователей = Параметры.Свойство("СписокПользователейИСЭСФ");
	ТребуетсяВыборПрофиляИСЭСФ = Параметры.Свойство("ТребуетсяВыборПрофиляИСЭСФ");
	Если Параметры.Свойство("ВызвавшийМодуль") Тогда
		ВызвавшийМодуль	= Параметры.ВызвавшийМодуль;
	КонецЕсли;
	
	ИнициироватьЭлементыФормы();
	
	ЗаполнитьТаблицуДанныеИСЭСФ();
	
	Если ДанныеИСЭСФ.Количество() > 0 Тогда
		
		Если Параметры.Свойство("СписокСтруктурныхЕдиниц") Тогда
			СтруктурнаяЕдиница = ДанныеИСЭСФ[0].СтруктурнаяЕдиница;
		КонецЕсли;			
		
		Если ПереданСписокПользователей Тогда
			ПользовательИСЭСФ = ДанныеИСЭСФ[0].ПользовательИСЭСФ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикСтруктурныхЕдиниц = 0;
	
	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
		
		Если ТребуетсяВыборСертификата Тогда
			
			ДанныеКлюча = КлючBase64ЗапомненныйНаВремяСеанса(СтрокаДанных.ПрофильИСЭСФ);
			СтрокаДанных.КлючИмя = ДанныеКлюча.КлючИмя;
			СтрокаДанных.КлючBase64 = ДанныеКлюча.КлючBase64;
			
			СтрокаДанных.Пароль = ПарольКлючевогоКонтейнераЗапомненныйНаВремяСеанса(СтрокаДанных.КлючИмя);
			
			Если НЕ ПустаяСтрока(СтрокаДанных.Пароль) Тогда
				СтрокаДанных.ЗапомнитьНаВремяСеанса = Истина;	
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаДанных.КлючИмя) Тогда
				СтрокаДанных.КлючИмя = НСтр("ru = 'Выбрать сертификат...'");
			КонецЕсли;
			
		КонецЕсли;
		
		ПарольИСЭСФ = ЭСФВызовСервераПовтИсп.ПарольАутентификации(СтрокаДанных.ПользовательИСЭСФ);
		
		ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации();
		ПоказыватьДанныеВводаПароляАутентификации = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПользовательИСЭСФ, Истина);
	
		// если пароль сохранен в справочнике, скрываем поле ввода
		// анализируем пароль профиля ПарольИСЭСФ, далее загружаем его из настройки сеанса
		Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПарольИСЭСФ"].Видимость 					   = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
		Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПользовательИСЭСФ"].Видимость				   = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
		Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ЗапомнитьНаВремяСеансаАвторизация"].Видимость = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
		Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "НеЗапрашиватьПарольНаВремяСеанса"].Видимость  = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
	
		Если ПустаяСтрока(ПарольИСЭСФ) Тогда
			
			ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ();
			ПарольИСЭСФ = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПользовательИСЭСФ, "");
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПарольИСЭСФ) Тогда
			СтрокаДанных.ЗапомнитьНаВремяСеансаАвторизация = Истина;	
		КонецЕсли;
		
		СтрокаДанных.ПарольИСЭСФ = ПарольИСЭСФ;
		
		СчетчикСтруктурныхЕдиниц = СчетчикСтруктурныхЕдиниц + 1;
		
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура КлючИмяНажатие(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	НомерТекущейСтраницы = Число(СтрЗаменить(Элементы.ГруппаДанныеОрганизаций.ТекущаяСтраница.Имя, "ГруппаОрганизация", ""));
	
	ОбработкаВыбораКлючаЗавершение = Новый ОписаниеОповещения("ОбработкаВыбораКлючаЗавершение", ЭтаФорма, Новый Структура("НомерТекущейСтраницы", НомерТекущейСтраницы));
	НачатьПомещениеФайла(ОбработкаВыбораКлючаЗавершение,,,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКлючаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда		
		
		ИнфомацияПоФайлу = ЭСФВызовСервера.ИнфомацияПоФайлу(ВыбранноеИмяФайла);
		
		Если ВРег(ИнфомацияПоФайлу.Расширение) = ".P12" Тогда
			ДанныеИСЭСФ[ДополнительныеПараметры.НомерТекущейСтраницы].КлючИмя = ИнфомацияПоФайлу.Имя;
			ДанныеИСЭСФ[ДополнительныеПараметры.НомерТекущейСтраницы].КлючПолноеИмя = ВыбранноеИмяФайла;
			ДанныеИСЭСФ[ДополнительныеПараметры.НомерТекущейСтраницы].КлючBase64 = КлючBase64(Адрес);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Файл должен иметь расширение ""*.p12"".'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныеОрганизацийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НомерТекущейСтраницы = Число(СтрЗаменить(Элементы.ГруппаДанныеОрганизаций.ТекущаяСтраница.Имя, "ГруппаОрганизация", ""));

	Если ТребуетсяВыборСертификата Тогда
		СтруктурнаяЕдиница = ДанныеИСЭСФ[НомерТекущейСтраницы].СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если ПереданСписокПользователей Тогда
		ПользовательИСЭСФ = ДанныеИСЭСФ[НомерТекущейСтраницы].ПользовательИСЭСФ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
		
	НомерТекущейСтраницы = Число(СтрЗаменить(Элементы.ГруппаДанныеОрганизаций.ТекущаяСтраница.Имя, "ГруппаОрганизация", ""));
	
	Если НЕ ЗначениеЗаполнено(ДанныеИСЭСФ[НомерТекущейСтраницы].ПрофильИСЭСФ) Тогда
		ДанныеИСЭСФ[НомерТекущейСтраницы].ПользовательИСЭСФ = Неопределено;
		Возврат;
	КонецЕсли;
		
	ДанныеПрофиля = ПолучитьДанныеПрофиляНаСервере(ДанныеИСЭСФ[НомерТекущейСтраницы].ПрофильИСЭСФ);
	
	ДанныеИСЭСФ[НомерТекущейСтраницы].ПользовательИСЭСФ = ДанныеПрофиля.ПользовательИСЭСФ.Ссылка;
	Если ТребуетсяВыборПрофиляИСЭСФ Тогда
		ДанныеИСЭСФ[НомерТекущейСтраницы].СтруктурнаяЕдиница = ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка;
	КонецЕсли;
	
	ПарольИСЭСФ = ДанныеПрофиля.ТекущийПарольАутентификации;
	
	ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации();
	ПоказыватьДанныеВводаПароляАутентификации = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ДанныеИСЭСФ[НомерТекущейСтраницы].ПользовательИСЭСФ, Истина);
	
	// анализируем пароль профиля ПарольИСЭСФ, далее загружаем его из настройки сеанса
	Элементы["Организация" + НомерТекущейСтраницы + "ПарольИСЭСФ"].Видимость = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
	Элементы["Организация" + НомерТекущейСтраницы + "ПользовательИСЭСФ"].Видимость = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
	Элементы["Организация" + НомерТекущейСтраницы + "ЗапомнитьНаВремяСеансаАвторизация"].Видимость = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
	Элементы["Организация" + НомерТекущейСтраницы + "НеЗапрашиватьПарольНаВремяСеанса"].Видимость  = ПустаяСтрока(ПарольИСЭСФ) И ПоказыватьДанныеВводаПароляАутентификации;
	
	Если ПустаяСтрока(ПарольИСЭСФ) Тогда
		
		ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ();
		ПарольИСЭСФ = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ДанныеПрофиля.ПользовательИСЭСФ.Ссылка, "");
		
	КонецЕсли;
	
	ДанныеИСЭСФ[НомерТекущейСтраницы].ПарольИСЭСФ = ПарольИСЭСФ;
	
КонецПроцедуры

&НаКлиенте
Процедура НеЗапрашиватьПарольНаВремяСеансаПриИзменении(Элемент)

	НомерТекущейСтраницы = Число(СтрЗаменить(Элементы.ГруппаДанныеОрганизаций.ТекущаяСтраница.Имя, "ГруппаОрганизация", ""));
	
	Элементы["Организация" + НомерТекущейСтраницы + "ЗапомнитьНаВремяСеансаАвторизация"].Доступность = НЕ ДанныеИСЭСФ[НомерТекущейСтраницы].НеЗапрашиватьПарольНаВремяСеанса;
	
	Если ДанныеИСЭСФ[НомерТекущейСтраницы].НеЗапрашиватьПарольНаВремяСеанса Тогда
		ДанныеИСЭСФ[НомерТекущейСтраницы].ЗапомнитьНаВремяСеансаАвторизация = ДанныеИСЭСФ[НомерТекущейСтраницы].НеЗапрашиватьПарольНаВремяСеанса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	СчетчикСтруктурныхЕдиниц = 0;
	
	ЕстьОшибки = Ложь;
	
	СоответствиеОрганизацийИНастроек = Новый Соответствие;

	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
		
		СтруктурнаяЕдиницаТекст = "(" + Строка(СтрокаДанных.СтруктурнаяЕдиница) + ")";
		ПользовательТекст = "(" + Строка(СтрокаДанных.ПользовательИСЭСФ) + ")";
		
		Если ПустаяСтрока(СтрокаДанных.ПарольИСЭСФ) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите пароль входа ИС ЭСФ %1'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ?(ПереданСписокПользователей, ПользовательТекст, СтруктурнаяЕдиницаТекст));
			ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения, "Организация[" + СчетчикСтруктурныхЕдиниц + "].КлючИмя");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		// Проверить, что ключевой контейнер был выбран.
		Если ТребуетсяВыборСертификата Тогда
			
			Если ПустаяСтрока(СтрокаДанных.КлючBase64) Тогда
				ТекстСообщения = НСтр("ru = 'Выберите файл сертификата %1'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтруктурнаяЕдиницаТекст);
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения, "Организация[" + СчетчикСтруктурныхЕдиниц + "].КлючИмя");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаДанных.Пароль) Тогда
				ТекстСообщения = НСтр("ru = 'Укажите пароль сертификата %1'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтруктурнаяЕдиницаТекст);
				ЭСФКлиентСервер.СообщитьПользователю(ТекстСообщения, "Организация[" + СчетчикСтруктурныхЕдиниц + "].Пароль");
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ();
		ЭСФКлиент.СохранитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПользовательИСЭСФ, ?(СтрокаДанных.ЗапомнитьНаВремяСеансаАвторизация, СтрокаДанных.ПарольИСЭСФ, ""));	
		
		Если СтрокаДанных.НеЗапрашиватьПарольНаВремяСеанса Тогда
			
			Если УдалосьОткрытьСессию(СтрокаДанных.ПользовательИСЭСФ, СтрокаДанных.ПарольИСЭСФ, СчетчикСтруктурныхЕдиниц) Тогда
				ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации();
				ЭСФКлиент.СохранитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПользовательИСЭСФ, Ложь);
			Иначе
				СтрокаДанных.НеЗапрашиватьПарольНаВремяСеанса = Ложь;
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ЗапомнитьНаВремяСеансаАвторизация"].Доступность = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		СчетчикСтруктурныхЕдиниц = СчетчикСтруктурныхЕдиниц + 1;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		
		Возврат;
		
	Иначе
		
		// требуется указать только пароль входа ИС ЭСФ
		Если ТребуетсяВыборСертификата Тогда
			
			Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
				
				Результат = Новый Структура;
				
				ОткрытыйСертификатBase64 = ОткрытыйСертификатBase64(СтрокаДанных.КлючBase64, СтрокаДанных.Пароль);
				
				Результат.Вставить("ОткрытыйСертификатBase64", ОткрытыйСертификатBase64);
				Результат.Вставить("Пароль", СтрокаДанных.Пароль);
				Результат.Вставить("КлючBase64", СтрокаДанных.КлючBase64);
				Результат.Вставить("ПарольИСЭСФ", СтрокаДанных.ПарольИСЭСФ);
				Результат.Вставить("ПрофильИСЭСФ", СтрокаДанных.ПрофильИСЭСФ);
				
				СоответствиеОрганизацийИНастроек.Вставить(СтрокаДанных.СтруктурнаяЕдиница, Результат);
				
			КонецЦикла;
			
			// Запомнить ввеленные данные.
			СохранитьРасположениеКлючевогоКонтейнера();
			ЗапомнитьПарольКлючевогоКонтейнераНаВремяСеанса();
			ЗапомнитьКлючBase64НаВремяСеанса();
			
			Закрыть(СоответствиеОрганизацийИНастроек);
			
		Иначе
			
			Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
				
				СоответствиеОрганизацийИНастроек.Вставить(?(ПереданСписокПользователей, СтрокаДанных.ПользовательИСЭСФ, СтрокаДанных.СтруктурнаяЕдиница), ?(ПереданСписокПользователей, СтрокаДанных.ПарольИСЭСФ, Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", СтрокаДанных.ПрофильИСЭСФ, СтрокаДанных.ПарольИСЭСФ)));
				
			КонецЦикла;
				
			Закрыть(СоответствиеОрганизацийИНастроек);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициироватьГруппуЭлементовДанныхКлюча(СчетчикСтруктурныхЕдиниц, ГруппаОрганизации)
		Группа = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеКлюча", Тип("ГруппаФормы"), Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц]);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Заголовок = НСтр("ru = 'Данные ключа для подписи ЭСФ'");
		
		Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеКлюча"].Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "УполномоченныйСотрудник", Тип("ПолеФормы"), Группа);
		НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].УполномоченныйСотрудник";	
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		
		НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "КлючИмя", Тип("ПолеФормы"), Группа);
		НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].КлючИмя";	
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.Шрифт = Новый Шрифт(,,Истина);
		НовыйЭлемент.УстановитьДействие("Нажатие", "КлючИмяНажатие");
		
		НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "Пароль", Тип("ПолеФормы"), Группа);
		НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].Пароль";	
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		НовыйЭлемент.РежимПароля = Истина;
		
		// заполнить на время сеанса можем только, если на форме присутсвуют все данные для сохранения структуры	
		НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "ЗапомнитьНаВремяСеанса", Тип("ПолеФормы"), ГруппаОрганизации);
		НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ЗапомнитьНаВремяСеанса";	
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;    
КонецПроцедуры

&НаСервере
Процедура ИнициироватьГруппуЭлементовОрганизации(СчетчикСтруктурныхЕдиниц)
	ГруппаОрганизации = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц, Тип("ГруппаФормы"), Элементы.ГруппаДанныеОрганизаций);
	ГруппаОрганизации.Вид = ВидГруппыФормы.Страница;
	ГруппаОрганизации.ПутьКДаннымЗаголовка = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].СтруктурнаяЕдиница";
	
	Группа = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеПрофиля", Тип("ГруппаФормы"), Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц]);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Заголовок = НСтр("ru = 'Профиль'");
	
	Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеПрофиля"].Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ", Тип("ПолеФормы"), Группа);
	НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ПрофильИСЭСФ";	
	Если ТребуетсяВыборПрофиляИСЭСФ Тогда
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "ПрофильПриИзменении");
	Иначе
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлемент.Гиперссылка = Истина;
	КонецЕсли;
	
	ИнициироватьПанельСоединениеСИСЭСФ(СчетчикСтруктурныхЕдиниц);
	
	Если ТребуетсяВыборСертификата Тогда
		ИнициироватьГруппуЭлементовДанныхКлюча(СчетчикСтруктурныхЕдиниц, ГруппаОрганизации);
	 КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИнициироватьЭлементыФормы()
	
	СчетчикСтруктурныхЕдиниц = 0;
	
	Если Параметры.Свойство("СписокСтруктурныхЕдиниц") Тогда
		
		Для Каждого СтруктурнаяЕдиница Из Параметры.СписокСтруктурныхЕдиниц Цикл
			
			Элементы.ГруппаДанныеОрганизаций.ОтображениеСтраниц = ?(Параметры.СписокСтруктурныхЕдиниц.Количество() > 1, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
			
			ИнициироватьГруппуЭлементовОрганизации(СчетчикСтруктурныхЕдиниц);
			
			СчетчикСтруктурныхЕдиниц = СчетчикСтруктурныхЕдиниц + 1;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// требуется указать только пароль входа ИС ЭСФ
	Если ПереданСписокПользователей Тогда
		
		Элементы.ГруппаДанныеОрганизаций.ОтображениеСтраниц = ?(Параметры.СписокПользователейИСЭСФ.Количество() > 1, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
			
		Для Каждого СтруктурнаяЕдиница Из Параметры.СписокПользователейИСЭСФ Цикл
			
			ГруппаОрганизации = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц, Тип("ГруппаФормы"), Элементы.ГруппаДанныеОрганизаций);
			ГруппаОрганизации.Вид = ВидГруппыФормы.Страница;
			ГруппаОрганизации.ПутьКДаннымЗаголовка = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ПользовательИСЭСФ";
			
			// Создадим одну панель
			ИнициироватьПанельСоединениеСИСЭСФ(СчетчикСтруктурныхЕдиниц);
			
			СчетчикСтруктурныхЕдиниц = СчетчикСтруктурныхЕдиниц + 1;
		
		КонецЦикла;
	
	КонецЕсли;
	
	// Для управляющей задачи допустима синхронизация под любым доступным профилем без прямой связи с СЕ
	Если ТребуетсяВыборПрофиляИСЭСФ Тогда
		ИнициироватьГруппуЭлементовОрганизации(0);
		Элементы.ГруппаДанныеОрганизаций.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИнициироватьПанельСоединениеСИСЭСФ(СчетчикСтруктурныхЕдиниц)
	
	Группа = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизацииИСЭСФ", Тип("ГруппаФормы"), Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц]);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Заголовок = НСтр("ru = 'Соединение с ИС ЭСФ'");
	Группа.ОтображатьЗаголовок = Истина;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	ГруппаДанныеАвторизации = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизации", Тип("ГруппаФормы"), Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизацииИСЭСФ"]);
	ГруппаДанныеАвторизации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДанныеАвторизации.ОтображатьЗаголовок = Ложь;
	ГруппаДанныеАвторизации.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизации"].Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "ПользовательИСЭСФ", Тип("ПолеФормы"), ГруппаДанныеАвторизации);
	НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ПользовательИСЭСФ";	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Гиперссылка = Истина;
	
	НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "ПарольИСЭСФ", Тип("ПолеФормы"), ГруппаДанныеАвторизации);
	НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ПарольИСЭСФ";	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
	НовыйЭлемент.РежимПароля = Истина;
	
	ГруппаСеансовыеДанныеАвторизации = Элементы.Вставить("ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизацииСеансовыеДанные", Тип("ГруппаФормы"), Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизацииИСЭСФ"]);
	ГруппаСеансовыеДанныеАвторизации.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСеансовыеДанныеАвторизации.ОтображатьЗаголовок = Ложь;
	ГруппаСеансовыеДанныеАвторизации.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	Элементы["ГруппаОрганизация" + СчетчикСтруктурныхЕдиниц + "ДанныеАвторизацииСеансовыеДанные"].Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "ЗапомнитьНаВремяСеансаАвторизация", Тип("ПолеФормы"), ГруппаСеансовыеДанныеАвторизации);
	НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].ЗапомнитьНаВремяСеансаАвторизация";	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	НовыйЭлемент = Элементы.Добавить("Организация" + СчетчикСтруктурныхЕдиниц + "НеЗапрашиватьПарольНаВремяСеанса", Тип("ПолеФормы"), ГруппаСеансовыеДанныеАвторизации);
	НовыйЭлемент.ПутьКДанным = "ДанныеИСЭСФ[" + СчетчикСтруктурныхЕдиниц + "].НеЗапрашиватьПарольНаВремяСеанса";	
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "НеЗапрашиватьПарольНаВремяСеансаПриИзменении");

КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьТаблицуДанныеИСЭСФ()
	
	ПользовательИБ = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();

	СчетчикСтруктурныхЕдиниц = 0;
	
	УполномоченныйСотрудник = СокрЛП(ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник());
	Если НЕ ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
		УполномоченныйСотрудник = НСтр("ru = '<Будет получен из сертификата>'");
	КонецЕсли;

	Если Параметры.Свойство("СписокСтруктурныхЕдиниц") Тогда
		
		Для Каждого СтрокаСЕ Из Параметры.СписокСтруктурныхЕдиниц Цикл
			
			СтрокаДанных = ДанныеИСЭСФ.Добавить();
			СтрокаДанных.СтруктурнаяЕдиница = СтрокаСЕ.Ключ;
			
			МассивПрофилейИСЭСФ = ЭСФВызовСервераПовтИсп.ПрофилиИСЭСФ(СтрокаСЕ.Ключ, Неопределено, ПользовательИБ);
			
			Если МассивПрофилейИСЭСФ.Количество() > 1 Тогда
				
				СтрокаДанных.ПрофильИСЭСФ = МассивПрофилейИСЭСФ[0];
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].Вид = ВидПоляФормы.ПолеВвода;
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].КнопкаОткрытия = Истина;
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].УстановитьДействие("ПриИзменении", "ПрофильПриИзменении");

				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СтруктурнаяЕдиница", "СтруктурнаяЕдиница");
				НовыйМассив = Новый Массив;
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи  = Новый ФиксированныйМассив(НовыйМассив);
				
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].СвязиПараметровВыбора = НовыеСвязи;
				
			ИначеЕсли МассивПрофилейИСЭСФ.Количество() = 1 Тогда
				
				СтрокаДанных.ПрофильИСЭСФ = МассивПрофилейИСЭСФ[0];
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].Вид = ВидПоляФормы.ПолеНадписи;
				Элементы["Организация" + СчетчикСтруктурныхЕдиниц + "ПрофильИСЭСФ"].Видимость = Ложь;
				
			Иначе
				
				// если не назначен профиль ЭСФ для отправки, то необходимо очистить очередь, тк далее вызываем исключение
				Для Каждого СгруппированныеЭСФ Из Параметры.СписокСтруктурныхЕдиниц Цикл
					ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(СгруппированныеЭСФ.Значение);
				КонецЦикла;
				
				Текст = НСтр("ru = 'Невозможно выполнить действие, т.к. для пользователя ""%ПользовательИБ%"" не задан профиль ИС ЭСФ для работы с предприятием ""%СтруктурнаяЕдиница%"".'");
				Текст = СтрЗаменить(Текст, "%ПользовательИБ%", 		ПользовательИБ);
				Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", 	СтрокаСЕ.Ключ);
				
				ВызватьИсключение Текст;
				
			КонецЕсли;
			
			СтрокаДанных.КлючПолноеИмя = СохраненноеРасположениеКлючевогоКонтейнера(СтрокаДанных.ПрофильИСЭСФ);
			СтрокаДанных.УполномоченныйСотрудник = УполномоченныйСотрудник;
			СтрокаДанных.ПользовательИСЭСФ = СтрокаДанных.ПрофильИСЭСФ.Владелец;
			
			СчетчикСтруктурныхЕдиниц = СчетчикСтруктурныхЕдиниц + 1;

		КонецЦикла;
		
	КонецЕсли;
	
	Если ПереданСписокПользователей Тогда
		// требуется указать только пароль входа ИС ЭСФ
		Для Каждого СтрокаПользователь Из Параметры.СписокПользователейИСЭСФ Цикл
			СтрокаДанных = ДанныеИСЭСФ.Добавить();
			СтрокаДанных.ПользовательИСЭСФ = СтрокаПользователь;
		КонецЦикла;
	КонецЕсли;
	
	Если ТребуетсяВыборПрофиляИСЭСФ Тогда
		// Нужно выбрать профиль и пароль для входа
		СтрокаДанных = ДанныеИСЭСФ.Добавить();
		ПрофилиИСЭСФ = ЭСФСервер.ПрофилиИСЭСФ(Неопределено,,ПользовательИБ);
		Если ПрофилиИСЭСФ.Количество()>0 Тогда
			СтрокаДанных.ПрофильИСЭСФ = ПрофилиИСЭСФ[0].Ссылка;			
			ЗаполнитьДанныеИСЭСФДляПрофиля(СтрокаДанных, СтрокаДанных.ПрофильИСЭСФ);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИСЭСФДляПрофиля(Строка, ПрофильИСЭСФ)
	ДанныеПрофиля = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);	
	
	Строка.СтруктурнаяЕдиница = ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка;
	Строка.ПользовательИСЭСФ = ДанныеПрофиля.ПользовательИСЭСФ.Ссылка;
	Строка.ПарольИСЭСФ = ДанныеПрофиля.ПользовательИСЭСФ.ПарольАутентификации;		
	Строка.КлючПолноеИмя = СохраненноеРасположениеКлючевогоКонтейнера(ПрофильИСЭСФ);
КонецПроцедуры


&НаСервере
Функция УдалосьОткрытьСессию(ПользовательИСЭСФ, Пароль, НомерСтроки)
	
	Удалось = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|	И ПрофилиИСЭСФ.Владелец = &ПользовательИСЭСФ";
	
	Запрос.УстановитьПараметр("ПользовательИСЭСФ", ПользовательИСЭСФ);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Удалось = Ложь;
		
		ЭСФКлиентСервер.СообщитьПользователю(НСтр(
			"ru = 'Невозможно установить флаг ""Не показывать это окно на время сеанса"", 
        	|так как пользователь ИС ЭСФ не имеет профилей ИС ЭСФ.'"), "Организация" + НомерСтроки + "ЗапомнитьНаВремяСеансаАвторизация");
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Попытка
				
				Если ВызвавшийМодуль.Пустая() Или ВызвавшийМодуль = Неопределено Тогда
					ВызвавшийМодуль = Перечисления.МодулиЭСФ.ЭСФ;
				КонецЕсли;
				
				ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(Выборка.ПрофильИСЭСФ);
				ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = Пароль;
				Если ВызвавшийМодуль = Перечисления.МодулиЭСФ.ЭСФ Тогда
					ИдентфикаторСессии = ЭСФСервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
					ЭСФСервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентфикаторСессии);
				//++ НЕ ЭСФ	
				ИначеЕсли ВызвавшийМодуль = Перечисления.МодулиЭСФ.ВС Тогда
					ИдентфикаторСессии = ВССервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
					ВССервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентфикаторСессии);
				//-- НЕ ЭСФ	
				КонецЕсли;
			Исключение
				
				Удалось = Ложь;
				ТекстОшикби = НСтр(
					"ru = 'Невозможно установить флаг ""Не показывать это окно на время сеанса"", 
                     |так как используя указанный пароль не удалось войти в ИС ЭСФ, причина:
                     |
                     |%ТекстОшибки%'");
				ТекстОшикби = СтрЗаменить(ТекстОшикби, "%ТекстОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭСФКлиентСервер.СообщитьПользователю(ТекстОшикби, "Организация" + НомерСтроки + "ЗапомнитьНаВремяСеансаАвторизация");
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Удалось;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрофиляНаСервере(ПрофильИСЭСФ)

	Возврат ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
	
КонецФункции

&НаКлиенте
Функция ОткрытыйСертификатBase64(Знач КлючBase64, Знач Пароль)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда 
		ОткрытыйСертификатBase64 = Контейнер.ОткрытыйСертификатBase64(КлючBase64, Пароль);
	Иначе
		ОткрытыйСертификатBase64 = ОткрытыйСертификатBase64НаСервере(КлючBase64, Пароль);	
	КонецЕсли;
	
	Возврат ОткрытыйСертификатBase64;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытыйСертификатBase64НаСервере(Знач КлючBase64, Знач Пароль)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	ОткрытыйСертификатBase64 = Контейнер.ОткрытыйСертификатBase64(КлючBase64, Пароль);
	Возврат ОткрытыйСертификатBase64;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючBase64(Адрес)
	
	КлючДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	КлючBase64 = Base64Строка(КлючДвоичныеДанные);
	
	Возврат КлючBase64;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сохранение и загрузка расположения ключевого контейнера

&НаСервере
Процедура СохранитьРасположениеКлючевогоКонтейнера()
	
	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
	
		СоответствиеРасположений = ХранилищеОбщихНастроек.Загрузить(ИмяНастройкиРасположенияКлючевыхКонтейнеров());	
		СоответствиеРасположений = ?(СоответствиеРасположений = Неопределено, Новый Соответствие(), СоответствиеРасположений); 
		
		СоответствиеРасположений.Вставить(СтрокаДанных.ПрофильИСЭСФ, СтрокаДанных.КлючПолноеИмя);
		
		ХранилищеОбщихНастроек.Сохранить(ИмяНастройкиРасположенияКлючевыхКонтейнеров(), , СоответствиеРасположений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СохраненноеРасположениеКлючевогоКонтейнера(Знач ПрофильИСЭСФ)
	
	СоответствиеРасположений = ХранилищеОбщихНастроек.Загрузить(ИмяНастройкиРасположенияКлючевыхКонтейнеров());	
	
	Если СоответствиеРасположений <> Неопределено Тогда
		Расположение = СоответствиеРасположений.Получить(ПрофильИСЭСФ);	
	КонецЕсли;
	
	Расположение = ?(Расположение = Неопределено, "", Расположение);
	
	Возврат Расположение;
	
КонецФункции

&НаСервере
Функция ИмяНастройкиРасположенияКлючевыхКонтейнеров()	
	Возврат "РасположенияКлючевыхКонтейнеров";	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сохранение и загрузка пароля ключевого контейнера.

&НаКлиенте
Процедура ЗапомнитьПарольКлючевогоКонтейнераНаВремяСеанса()
	
	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
		
		ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП();
	
		Если СтрокаДанных.ЗапомнитьНаВремяСеанса Тогда	
			ЭСФКлиент.СохранитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.КлючИмя, СтрокаДанных.Пароль); 
		Иначе
			ЭСФКлиент.УдалитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.КлючИмя);		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПарольКлючевогоКонтейнераЗапомненныйНаВремяСеанса(Знач КлючИмя)
	
	ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП();
	Пароль = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, КлючИмя, "");
	
	Возврат Пароль;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сохранение и загрузка ключевого контейнера в формате Base64.
// Ключевой контейнер сохраняется в переменной сеанса пользователя.

&НаКлиенте
Процедура ЗапомнитьКлючBase64НаВремяСеанса()
	
	ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхКлючBase64();
	
	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
		
		ДанныеКлюча = Новый Структура;
		ДанныеКлюча.Вставить("КлючИмя", СтрокаДанных.КлючИмя);
		ДанныеКлюча.Вставить("КлючBase64", СтрокаДанных.КлючBase64);
		
		Если СтрокаДанных.ЗапомнитьНаВремяСеанса Тогда	
			ЭСФКлиент.СохранитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПрофильИСЭСФ, ДанныеКлюча); 
		Иначе
			ЭСФКлиент.УдалитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПрофильИСЭСФ);		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КлючBase64ЗапомненныйНаВремяСеанса(Знач ПрофильИСЭСФ)
	
	ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхКлючBase64();
	
	Для Каждого СтрокаДанных Из ДанныеИСЭСФ Цикл
		
		ПустыеДанныеКлюча = Новый Структура;
		ПустыеДанныеКлюча.Вставить("КлючИмя", "");
		ПустыеДанныеКлюча.Вставить("КлючBase64", "");
		
		ДанныеКлюча = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, СтрокаДанных.ПрофильИСЭСФ, ПустыеДанныеКлюча);
		
	КонецЦикла;
	
	Возврат ДанныеКлюча;
	
КонецФункции

#КонецОбласти


