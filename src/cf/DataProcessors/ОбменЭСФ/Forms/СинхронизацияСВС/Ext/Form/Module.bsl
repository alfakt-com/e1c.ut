////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимЗапуска = Параметры.РежимЗапуска;
	
	ЗаполнитьТаблицуПрофилейДляСинхронизации();
		
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)	
	Отказ = Истина;	
	ОткрытьФорму("Справочник.ПрофилиИСЭСФ.ФормаВыбора", , Элемент);	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ТаблицаОбработкаВыбораНаСервере(ВыбранноеЗначение)	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПрофилиИСЭСФ") Тогда
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.Пометка = Истина;
		СтрокаТаблицы.СтруктурнаяЕдиница = ВыбранноеЗначение.СтруктурнаяЕдиница;
		СтрокаТаблицы.ПрофильИСЭСФ = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурнаяЕдиницаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрофильИСЭСФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрофильИСЭСФОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомментарийОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
    
&НаКлиенте
Процедура Синхронизировать(Команда)
	
	// Очистить комментарий.
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Комментарий = "";	
	КонецЦикла;
	
	// Создать массив профилей ИС ЭСФ из помеченных строк таблицы.
	МассивПрофилейИСЭСФ = Новый Массив;	
	МассивПрофилейИСЭСФСДатойСинхронизации = Новый Массив; // Для получения входящих ЭСФ в версии 5.0, в свзяи с вводом параметра LastEventDate
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Пометка Тогда
			МассивПрофилейИСЭСФ.Добавить(СтрокаТаблицы.ПрофильИСЭСФ);	
			МассивПрофилейИСЭСФСДатойСинхронизации.Добавить(Новый Структура("ПрофильИСЭСФ, ДатаНачалаСинхронизацииВходящихЭСФ, ДатаНачалаСинхронизацииИсходящихЭСФ", СтрокаТаблицы.ПрофильИСЭСФ, СтрокаТаблицы.ДатаНачалаСинхронизацииЭДВС, Дата(1, 1, 1)));	
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПрофилейИСЭСФ.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите хотя бы один профиль для синхронизации с ИС ЭСФ.'");
		Сообщение.Поле = "Таблица";
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
		
	// Получить пароли для пользователей ИС ЭСФ, которые не имеют сохраненных паролей.
	МассивПользователейИСЭСФБезПароля = ЭСФВызовСервера.ПользователиИСЭСФБезПароляАутентификации(МассивПрофилейИСЭСФ);	
	
	ДополнительныеПараметры = Новый Структура("МассивПрофилейИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации", МассивПрофилейИСЭСФ, МассивПользователейИСЭСФБезПароля, МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Если МассивПользователейИСЭСФБезПароля.Количество() > 0 Тогда
		СинхронизироватьЗавершение = Новый ОписаниеОповещения("СинхронизироватьЗавершение", ЭтаФорма, ДополнительныеПараметры);
		ЭСФКлиент.ПаролиАутентификации(СинхронизироватьЗавершение, МассивПользователейИСЭСФБезПароля, ПредопределенноеЗначение("Перечисление.МодулиЭСФ.ВС"));
	Иначе
		СинхронизироватьЗавершение(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьНаСервере(МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации)
	
	ПараметрыЗадания = Новый Структура("МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации, ПолучитьОднуПорцию, ТолькоСоздатьОбновитьФайлы, ЗапускатьФоновоеЗадание");
	ПараметрыЗадания.Вставить("МассивДанныхПрофилейИСЭСФ", МассивДанныхПрофилейИСЭСФ);
	ПараметрыЗадания.Вставить("ПолучитьОднуПорцию", Истина);
	ПараметрыЗадания.Вставить("ТолькоСоздатьОбновитьФайлы", Ложь);
	ПараметрыЗадания.Вставить("ЗапускатьФоновоеЗадание", ЭСФКлиентСерверПереопределяемый.ИспользоватьФоновуюОтправкуЭСФ());
	ПараметрыЗадания.Вставить("МассивПрофилейИСЭСФСДатойСинхронизации", МассивПрофилейИСЭСФСДатойСинхронизации);	
	
	Если ПараметрыЗадания.ЗапускатьФоновоеЗадание Тогда
		
		РезультатРаботыЗадания = Неопределено;
		
		Если РежимЗапуска = "СинхронизацияСВС" Тогда
			ИмяПроцедурыПолученияЭДВС = "ВСВызовСервера.ПолучитьНовыеУТТН";
			НаименованиеЗадания = НСтр("ru = 'Синхронизация ЭДВС'");
			
			ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс получения документов ВС.  
										|Перед запуском нового процесса синхронизации, необходимо дождаться завершения предыдущего (запущено на %1, время запуска %2'");
										
			
		Иначе
			ИмяПроцедурыПолученияЭДВС = "ВСВызовСервера.ПолучитьИдентификаторыТоваров";
			НаименованиеЗадания = НСтр("ru = 'Получение идентификаторов товаров'");
			
			ТекстСообщения = НСтр("ru = 'В информационной базе уже запущен процесс получения документов ВС.  
										|Перед запуском нового процесса синхронизации, необходимо дождаться завершения предыдущего (запущено на %1, время запуска %2'");
										
			
		КонецЕсли;	
			
		
		СтруктураВыполненияЗадания = ЭСФСерверПереопределяемый.ФоновоеЗаданиеЗапущено(ИмяПроцедурыПолученияЭДВС);
		
		Если НЕ СтруктураВыполненияЗадания.ЗаданиеАктивно Тогда
			
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
			
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			РезультатРаботыЗадания = ЭСФВызовСервера.ВыполнитьВФоне(ИмяПроцедурыПолученияЭДВС, ПараметрыЗадания, ПараметрыВыполнения);
				
		Иначе
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СтруктураВыполненияЗадания.Расположение, СтруктураВыполненияЗадания.Начало);
										
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
				
		КонецЕсли;
			
	Иначе
		
		Если РежимЗапуска = "СинхронизацияСВС" Тогда
			ВСВызовСервера.ПолучитьНовыеУТТН(ПараметрыЗадания);			
		Иначе
			ВСВызовСервера.ПолучитьИдентификаторыТоваров(ПараметрыЗадания);
		КонецЕсли;	
			
		
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;

КонецФункции

&НаКлиенте
Процедура УстановитьФлажки(Команда)	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СинхронизироватьЗавершение(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	МассивПрофилейИСЭСФ = ДополнительныеПараметры.МассивПрофилейИСЭСФ;
	МассивПользователейИСЭСФБезПароля = ДополнительныеПараметры.МассивПользователейИСЭСФБезПароля;
	МассивПрофилейИСЭСФСДатойСинхронизации = ДополнительныеПараметры.МассивПрофилейИСЭСФСДатойСинхронизации; 
	
	Если НЕ Результат = Неопределено Тогда
		
		КоллецияПаролей = Результат;
		МассивДанныхПрофилейИСЭСФ = ДанныеПрофилейДляСинхронизацииНаСервере(МассивПрофилейИСЭСФ, КоллецияПаролей);
	
	КонецЕсли;

	Если МассивДанныхПрофилейИСЭСФ = Неопределено ИЛИ МассивДанныхПрофилейИСЭСФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	
	РезультатРаботыЗадания = СинхронизироватьНаСервере(МассивДанныхПрофилейИСЭСФ, МассивПрофилейИСЭСФСДатойСинхронизации);
	
	Если Параметры.ЗапускатьФоновоеЗадание Тогда
		
		Если ТипЗнч(РезультатРаботыЗадания) = Тип("Структура") Тогда
			
			Если РежимЗапуска = "СинхронизацияСВС" Тогда
				РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Получение документов из ИС ЭСФ'"));
			Иначе
				РезультатРаботыЗадания.Вставить("ТекстСообщения", НСтр("ru = 'Получение идентификаторов товаров'"));
			КонецЕсли;	
			
			СтруктураОповещений = Новый Структура(ВСКлиентСервер.ИмяСобытияСинхронизацияЭДВС());
			РезультатРаботыЗадания.Вставить("ДополнительныеОповещения", СтруктураОповещений);
		КонецЕсли;
				
		ВСКлиентПереопределяемый.ОбработкаОповещенияВС_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, РезультатРаботыЗадания);
		
	Иначе
		ЭСФКлиент.ОповеститьФормы(ВСКлиентСервер.ИмяСобытияЗаписьЭДВС());
		ЭСФКлиент.ОповеститьФормы(ВСКлиентСервер.ИмяСобытияСинхронизацияЭДВС());
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПрофилейДляСинхронизацииНаСервере(Знач МассивПрофилейИСЭСФ, Знач КоллецияПаролей)
	
	// Создать массив, содержащий данные профилей ИС ЭСФ.
	МассивДанныхПрофилейИСЭСФ = Новый Массив();
	Для Каждого ПрофильИСЭСФ Из МассивПрофилейИСЭСФ Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
	КонецЦикла;
	
	// Заполнить пароли, у пользователей, которые не имеют сохраненных паролей. 
	Для Каждого ДанныеПрофиляИСЭСФ Из МассивДанныхПрофилейИСЭСФ Цикл
		Если ПустаяСтрока(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации) Тогда
			ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = КоллецияПаролей[ДанныеПрофиляИСЭСФ.ПользовательИСЭСФ.Ссылка];	
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивДанныхПрофилейИСЭСФ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрофилейДляСинхронизации()
	
	// Запрос организован таким образом, чтобы сработал RLS.
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Наименование
	|ПОМЕСТИТЬ СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	| [ЗапросПоСтруктурнымЕдиницам]
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ
	|ПОМЕСТИТЬ ВТ_ПрофилиСинхронизации	
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ	
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|	И ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				СтруктурныеЕдиницы.СтруктурнаяЕдиница
	|			ИЗ
	|				СтруктурныеЕдиницы КАК СтруктурныеЕдиницы);
	|
	|ВЫБРАТЬ
	|	ПрофилиСинхронизации.СтруктурнаяЕдиница,
	|	ПрофилиСинхронизации.ПрофильИСЭСФ,
	|	ЕСТЬNULL(ПараметрыМетодовИСЭСФВходящихЭСФ.ЗначениеПараметра, &ДатаПоУмолчанию) КАК ДатаНачалаСинхронизацииЭДВС
	|ИЗ
	|	ВТ_ПрофилиСинхронизации КАК ПрофилиСинхронизации
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФВходящихЭСФ
	|		ПО (ПрофилиСинхронизации.СтруктурнаяЕдиница = ПараметрыМетодовИСЭСФВходящихЭСФ.СтруктурнаяЕдиница
	|				И ПараметрыМетодовИСЭСФВходящихЭСФ.ИмяМетода = &ИмяМетода     // дата начала синхронизации
	|				И ПараметрыМетодовИСЭСФВходящихЭСФ.НаправлениеЭСФ = &Направление
	|				И ПараметрыМетодовИСЭСФВходящихЭСФ.ИмяПараметра = &ИмяПараметра)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиСинхронизации.СтруктурнаяЕдиница.Наименование";
	
	// Не все конфигурации поддерживают структурные единицы.
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ЗапросПоСтруктурнымЕдиницам = 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.Наименование
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением";		
	Иначе
		ЗапросПоСтруктурнымЕдиницам = "";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ЗапросПоСтруктурнымЕдиницам]", ЗапросПоСтруктурнымЕдиницам);
	Запрос.УстановитьПараметр("ИмяПараметра", "LASTEVENTDATE");
	
	Если РежимЗапуска = "СинхронизацияСВС" Тогда
		Запрос.УстановитьПараметр("ИмяМетода",	"QUERYUFORMUPDATES");	
		Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭСФ.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаПоУмолчанию", Дата(2018, 4, 1, 0, 0, 0));
	Иначе
		Запрос.УстановитьПараметр("ИмяМетода",	"VSTOREBALANCEWEBSERVICE_QUERYUPDATES");	
		Запрос.УстановитьПараметр("Направление", Перечисления.НаправленияЭСФ.Входящий);
		Запрос.УстановитьПараметр("ДатаПоУмолчанию", ВСВызовСервера.ДатаНачалаУчетаПоИдентификаторам());
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		//СтрокаТаблицы.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПрофилейДляСинхронизации()
	МассивПрофилейИСЭСФ = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.Пометка Тогда
			МассивПрофилейИСЭСФ.Добавить(СтрокаТаблицы.ПрофильИСЭСФ);				
		КонецЕсли;
	КонецЦикла;
	Таблица.Очистить();
	ЗаполнитьТаблицуПрофилейДляСинхронизации();
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если МассивПрофилейИСЭСФ.Найти(СтрокаТаблицы.ПрофильИСЭСФ)<>Неопределено Тогда
			СтрокаТаблицы.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ВСКлиентСервер.ИмяСобытияСинхронизацияЭДВС() Тогда
		ОбновитьТаблицуПрофилейДляСинхронизации(); // Обновление даты синхронизации по результататм работы события
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Если РежимЗапуска = "ПолучениеИДТоваров" Тогда
		Элементы.ФормаСинхронизировать.Заголовок = "Получить ID товаров из модуля ВС";
		Элементы.ТаблицаДатаНачалаСинхронизацииЭДВС.Заголовок = "Начальная дата получения ID товаров";
		
		ЭтаФорма.Заголовок = "Получение идентификаторов товаров из модуля ВС";
		
		Элементы.ДекорацияПояснение.Видимость = Истина;
	Иначе
		Элементы.ДекорацияПояснение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	