#Область ОтправкаЭАВР 

&НаКлиенте
Процедура ОтправитьИсходящиеАВР(Знач МассивИсходящихАВР, Знач ДополнительныеПараметры) Экспорт
		
	Если НЕ КриптопровайдерПодключается() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ АВРВызовСервера.ПроверитьВозможностьОтправкиДокументовАВР(МассивИсходящихАВР, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МассивИсходящихАВР", МассивИсходящихАВР);
	ОтправитьИсходящиеАВРПослеВопросаУстановкиДаты = Новый ОписаниеОповещения("ОтправитьИсходящиеАВРПослеВопросаУстановкиДаты", ЭтаФорма, ДополнительныеПараметры);
	АВРКлиент.УстановитьТекущуюДатуДляАВРВопрос(МассивИсходящихАВР, АВРКлиентСервер.ДействиеОтправка(), ОтправитьИсходящиеАВРПослеВопросаУстановкиДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеАВРПослеВопросаУстановкиДаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;

	КонецЕсли;
		
	Если Результат = КодВозвратаДиалога.Да Тогда
		АВРВызовСервера.УстановитьТекущуюДатуДляАВР(ДополнительныеПараметры.МассивИсходящихАВР, ДополнительныеПараметры.ТекущаяДата);
		ДополнительныеПараметры.Вставить("ДокументыОбработаны", Истина);
		ОтправитьИсходящиеАВРВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	Иначе
		ОтправитьИсходящиеАВРВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИсходящиеАВРВыборПараметровИСЭСФ(Результат, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихАВР = ДополнительныеПараметры.МассивИсходящихАВР;

	Если Не ДополнительныеПараметры.Свойство("ДокументыОбработаны") Тогда
		 //Изменили статус документа, нужно перечитать, если отправка происходит из формы
		Если Результат = КодВозвратаДиалога.Да Тогда
			АВРВызовСервера.УстановитьТекущуюДатуДляАВР(ДополнительныеПараметры.МассивИсходящихАВР, ДополнительныеПараметры.ТекущаяДата);
		КонецЕсли;
	КонецЕсли;

	АВРКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР());
	//ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры());
	
	КоллекцияСгруппированныхАВР = АВРВызовСервера.СгруппироватьАВРПоСтруктурнымЕдиницам(МассивИсходящихАВР);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхАВР", КоллекцияСгруппированныхАВР);
	
	ОтправитьИсходящиеАВРЗавершение = Новый ОписаниеОповещения("ОтправитьИсходящиеАВРЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц, ТребуетсяВыборСертификата", КоллекцияСгруппированныхАВР, Истина);
	
	АВРКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОтправитьИсходящиеАВРЗавершение, ПараметрыФормы);	
	
КонецПроцедуры

&НаСервере
Функция ОбновитьМассивИсходящихАВР(МассивИсходящихАВР) Экспорт
	
	МассивАВР = Новый Массив();
	
	Для Каждого ДокументАВР Из МассивИсходящихАВР Цикл
		Если ДокументАВР.Дата = ТекущаяДата() Тогда
			МассивАВР.Добавить(ДокументАВР);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАВР;
КонецФункции

&НаКлиенте
Процедура ОтправитьИсходящиеАВРЗавершение(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт
	
	МассивИсходящихАВР = ДополнительныеПараметры.МассивИсходящихАВР;
	
	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЭСФ = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;

	ЗапускатьФоновоеЗадание = ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
	КоллекцияСгруппированныхАВР = ДополнительныеПараметры.КоллекцияСгруппированныхАВР;
	
	КоллекцияПодписейАВР = Новый Соответствие;
	КоллекцияАдресКоллекцииAwpXML = Новый Соответствие;
	КоллекцияСоответствиеАВР = Новый Соответствие;
	КоллекцияУполномоченныйСотрудник = Новый Соответствие;
	
	Попытка
	
		Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
			
			Для Каждого СгруппированныеАВР Из КоллекцияСгруппированныхАВР Цикл
				
				СтруктурнаяЕдиница = СгруппированныеАВР.Ключ;
				МассивАВР = СгруппированныеАВР.Значение;
				
				ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
				
				ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);
				
				Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ) Тогда
					Возврат;	
				КонецЕсли;
				
				ТипПодписиЭСФ = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
				
				УполномоченныйСотрудник = ЭСФКлиентСерверПереопределяемый.УполномоченныйСотрудник();
				
				Если НЕ ЗначениеЗаполнено(УполномоченныйСотрудник) Тогда
					
					ДанныеКлюча = СвойстваСертификата(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
					
					УполномоченныйСотрудник = ДанныеКлюча.ИмяФамилияСубъекта + " " + ДанныеКлюча.ОтчествоСубъекта;
					
				КонецЕсли;
				
				КоллекцияУполномоченныйСотрудник.Вставить(СтруктурнаяЕдиница, УполномоченныйСотрудник);

				АдресКоллекцииAwpXML = Неопределено;
				КоллекцияSignedContentXML = Неопределено;
				АВРВызовСервера.СоздатьИсходящиеAwp(МассивАВР, Истина, ТипПодписиЭСФ, АдресКоллекцииAwpXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
				
				КоллекцияПодписейАВР.Вставить(СтруктурнаяЕдиница, ЭСФКлиентСервер.НоваяКоллекцияПодписейЭСФ(КоллекцияSignedContentXML, ДанныеКлючаЭЦП));
			
				КоллекцияСоответствиеАВР.Вставить(СтруктурнаяЕдиница, ПолучитьИзВременногоХранилища(АдресКоллекцииAwpXML));
				
				КоллекцияАдресКоллекцииAwpXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииAwpXML);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
			
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), МассивИсходящихАВР);
		
		ВызватьИсключение ОписаниеОшибки();
		
	КонецПопытки; 	
		
	// Создать и отправить коллекцию Awp.
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		
		
		// Если отправляем из формы списка, делаем фоновую отправку
		Если ЗапускатьФоновоеЗадание Тогда
			
			КлючФоновогоЗадания = Новый УникальныйИдентификатор;
			
			ПараметрыЗадания = Новый Структура("ВерсияИСЭСФ, КоллекцияСоответствиеАВР, КоллекцияПодписейАВР, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания", ВерсияИСЭСФ, КоллекцияСоответствиеАВР, КоллекцияПодписейАВР, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания);
			Если ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
				ПараметрыЗадания.Вставить("НеПерезаполнятьОчередьОтправки", ДополнительныеПараметры.НеПерезаполнятьОчередьОтправки);
			КонецЕсли;
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка АВР'");
			ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
			
			Результат = ЭСФВызовСервера.ВыполнитьВФоне("АВРВызовСервера.ОтправитьИсходящиеAwpВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");

			Попытка
				
				Результат = АВРВызовСервера.ОтправитьИсходящиеAwp(
					ВерсияИСЭСФ,
					КоллекцияАдресКоллекцииAwpXML, 
					КоллекцияПодписейАВР, 
					ДанныеПрофилейИСЭСФ,
					КоллекцияУполномоченныйСотрудник,
					НеПерезаполнятьОчередьОтправки);
					
			Исключение
				
				// обновим данные открытых форм, тк до вызова исключения часть ЭСФ может быть отправлена и обновлена в ИБ
				ЭСФКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), МассивИсходящихАВР);
				
				ВызватьИсключение ОписаниеОшибки();
				
			КонецПопытки;
			
		КонецЕсли;
		
		Для Каждого СтрокаАдресКоллекцииAwpXML Из КоллекцияАдресКоллекцииAwpXML Цикл
			
			АдресКоллекцииAwpXML = СтрокаАдресКоллекцииAwpXML.Значение;
			
			// Принудительное удаление, иначе значение не удалится.	
			УдалитьИзВременногоХранилища(АдресКоллекцииAwpXML);
			
		КонецЦикла;

	Иначе 
		
		ДополнительныеПараметры.Вставить("КоллекцияУполномоченныйСотрудник", КоллекцияУполномоченныйСотрудник);
		
		Результат = АВРВызовСервера.СоздатьИОтправитьКоллекциюAwp(КоллекцияСгруппированныхАВР, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры, ВерсияИСЭСФ);
			
	КонецЕсли;

	// Если отправляем из формы списка, делаем фоновую отправку
	Если ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Отправка документов в ИС ЭСФ'"));
		КонецЕсли;
		АВРКлиент.ОповеститьФормы("АВР_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		АВРКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), МассивИсходящихАВР);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаКлиенте(Версия = "", РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер(, РежимТишины, ТолькоПодключение);
		
	Если Криптопровайдер = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Подключается = Ложь;
		Версия = "";
	Иначе
		Подключается = Истина;
		Версия = Криптопровайдер.Версия;
	КонецЕсли;
		
		
	Возврат Подключается;
	
КонецФункции

&НаКлиенте
Функция УдалосьПодключитьКриптопровайдерНаСервере(Версия = "", РежимТишины = Ложь) Экспорт
	
	Подключается = КриптографияВызовСервера.УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);
			       		
	Возврат Подключается;	
	
КонецФункции

&НаКлиенте
Функция КриптопровайдерПодключается(Версия = "", РежимТишины = Ложь, МестоВыполненияОпераций = Неопределено, ТолькоПодключение = Ложь) Экспорт
	// Место выполнения операции
	ВыполнятьКриптографическиеОперацииНаКлиенте = Неопределено;	
	Если ЗначениеЗаполнено(МестоВыполненияОпераций) Тогда
		ВыполнятьКриптографическиеОперацииНаКлиенте = МестоВыполненияОпераций = ПредопределенноеЗначение("Перечисление.МестаВыполненияКриптографическихОпераций.НаКлиенте");
	Иначе
		ВыполнятьКриптографическиеОперацииНаКлиенте = ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте(); 
	КонецЕсли;	
	
	// Проверка подключения в требуемом контексте.
	Если ВыполнятьКриптографическиеОперацииНаКлиенте Тогда		
		Подключается = УдалосьПодключитьКриптопровайдерНаКлиенте(Версия, РежимТишины, ТолькоПодключение);		
	Иначе		
		Подключается = УдалосьПодключитьКриптопровайдерНаСервере(Версия, РежимТишины);				
	КонецЕсли;
	
	Возврат Подключается;	

КонецФункции

#КонецОбласти

#Область Криптография

&НаКлиенте
Функция СвойстваСертификата(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	СвойстваСертификатаБезОбработки = СвойстваСертификатаБезОбработки(КлючBase64, ПарольОтКлюча);	
	
	СвойстваСертификата = НовыеСвойстваСертификата();
	
	СвойстваСертификата.ИдентификаторОткрытогоКлюча = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "ext.subjectKeyIdentifier", "");
	СвойстваСертификата.ИмяИздателя = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "issuer.CN", "");
	СвойстваСертификата.СрокГодностиОт = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_before", "");
	СвойстваСертификата.СрокГодностиДо = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "not_after", "");
	СвойстваСертификата.ИмяФамилияСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.CN", "");
	СвойстваСертификата.ОтчествоСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.GN", "");	
	СвойстваСертификата.ИИНСубъекта = Сертфикат_ИИНСубъектаИзСвойств(СвойстваСертификатаБезОбработки);
	СвойстваСертификата.EmailСубъекта = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.emailAddress", "");	
	СвойстваСертификата.Страна = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.C", "");	
	СвойстваСертификата.РегионОбласть = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.ST", "");	
	СвойстваСертификата.Город = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.L", "");	
	СвойстваСертификата.БИНОрганизации = Сертфикат_БИНОрганизацииИзСвойств(СвойстваСертификатаБезОбработки);	
	СвойстваСертификата.НаименованиеОрганизации = ПолучитьСвойствоСертификата(СвойстваСертификатаБезОбработки, "subject.O", "");		
	СвойстваСертификата.ТипКлюча = Сертификат_ТипКлючаИзСвойств(СвойстваСертификатаБезОбработки);
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция СвойстваСертификатаБезОбработки(Знач КлючBase64, Знач ПарольОтКлюча) Экспорт 
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();	
	Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольОтКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	СвойстваXML = Криптопровайдер.ПолучитьСвойстваСертификатаВВидеXML();
	
	СвойстваСертификата = СвойстваСертификатаБезОбработкиНаСервере(СвойстваXML);
	
	Возврат СвойстваСертификата;
	
КонецФункции

Функция СвойстваСертификатаБезОбработкиНаСервере(Знач СвойстваXML) Экспорт
	
	СвойстваXDTO = ЭСФСервер.ОбъектXDTOИзСтрокиXML(СвойстваXML, ФабрикаXDTO);
	СписокСвойствXDTO = ЭСФСервер.СписокXDTOИзОбъектXDTO(СвойстваXDTO.prop);
		
	СвойстваСертификата = Новый Соответствие;
	
	Для Каждого СвойствоXDTO Из СписокСвойствXDTO Цикл
		СвойстваСертификата.Вставить(СвойствоXDTO.name, СокрЛП(СвойствоXDTO.value));	
	КонецЦикла;
		
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64() Экспорт
	Возврат 2;	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойствоСертификата(СвойстваСертификата, ИмяСвойства, ПустоеЗначение)
	
	ЗначениеСвойства = СвойстваСертификата.Получить(ИмяСвойства);
	
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПустоеЗначение;	
	Иначе
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_БИНОрганизацииИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	БИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.OU");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		БИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат БИН;
	
КонецФункции

&НаКлиенте
Функция Сертификат_ТипКлючаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ТипКлюча = "";
	
	ИмяАлгоритма = СвойстваСертификатаБезОбработки.Получить("algorithmName");
	
	Если ИмяАлгоритма <> Неопределено Тогда
		Если Найти(ВРег(ИмяАлгоритма), "RSA") <> 0 Тогда
			ТипКлюча = КлючRSA();
		ИначеЕсли Найти(ВРег(ИмяАлгоритма), "GOST") <> 0 Тогда
			ТипКлюча = КлючGOST();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипКлюча;
	
КонецФункции

&НаКлиенте
Функция Сертфикат_ИИНСубъектаИзСвойств(Знач СвойстваСертификатаБезОбработки)
	
	ИИН = "";
	
	СерийныйНомер = СвойстваСертификатаБезОбработки.Получить("subject.serialNumber");
	Если СтрДлина(СерийныйНомер) > 3 Тогда
		ИИН = Сред(СерийныйНомер, 4);
	КонецЕсли;
	
	Возврат ИИН;
	
КонецФункции

&НаКлиенте
Функция КлючGOST() Экспорт 
	
	Возврат "GOST";
	
КонецФункции

&НаКлиенте
Функция КлючRSA() Экспорт
	
	Возврат "RSA";
	
КонецФункции

&НаКлиенте
Функция НовыеСвойстваСертификата() 
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ИдентификаторОткрытогоКлюча", "");
	СвойстваСертификата.Вставить("ИмяИздателя", "");
	СвойстваСертификата.Вставить("СрокГодностиОт", "");
	СвойстваСертификата.Вставить("СрокГодностиДо", "");
	СвойстваСертификата.Вставить("ИмяФамилияСубъекта", "");
	СвойстваСертификата.Вставить("ОтчествоСубъекта", "");
	СвойстваСертификата.Вставить("ИИНСубъекта", "");
	СвойстваСертификата.Вставить("EmailСубъекта", "");
	СвойстваСертификата.Вставить("Страна", "");
	СвойстваСертификата.Вставить("РегионОбласть", "");
	СвойстваСертификата.Вставить("Город", "");
	СвойстваСертификата.Вставить("БИНОрганизации", "");
	СвойстваСертификата.Вставить("НаименованиеОрганизации", "");
	СвойстваСертификата.Вставить("ТипКлюча", "");
	
	Возврат СвойстваСертификата;
	
КонецФункции

&НаКлиенте
Функция СоздатьЭЦП(Знач СтрокаДляПодписи, Знач КлючBase64, Знач ПарольКлюча) Экспорт
	
	Попытка
				
		Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();		
		Криптопровайдер.ИнициализироватьХранилищеКлюча(КлючBase64, ПарольКлюча, ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
		ЭЦП = Криптопровайдер.ПолучитьПодпись(СтрокаДляПодписи, ПолучитьПодпись_ТипДанных_UTF8());		
		
		Возврат ЭЦП;	
		
	Исключение
		
		Ошибка = ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке());
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка выполнения'"), "Ошибка", , , Ошибка.ПодробноеПредставление);
		
		ТекстИсключения = НСтр(
		"ru = 'Не удалось подписать электронный счет-фактуру.
		|[КраткоеПредставление]'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "[КраткоеПредставление]", Ошибка.КраткоеПредставление);				
		
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПодпись_ТипДанных_UTF8() Экспорт
	Возврат 1;
КонецФункции

&НаКлиенте
Функция ОшибкаКриптопровайдера(Криптопровайдер, ИнформацияОбОшибке) Экспорт
	
	Ошибка = Новый Структура;
	
	Если Криптопровайдер = Неопределено Тогда
		Ошибка.Вставить("Версия", "");
		Ошибка.Вставить("КодОшибки", "");
		Ошибка.Вставить("ОписаниеОшибки", "");		
	Иначе
		Ошибка.Вставить("Версия", Криптопровайдер.Версия);
		Ошибка.Вставить("КодОшибки", Криптопровайдер.КодОшибки);
		Ошибка.Вставить("ОписаниеОшибки", Криптопровайдер.ОписаниеОшибки);
	КонецЕсли;
	
	Ошибка.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	
	ТипОшибки = ТипОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("ТипОшибки", ТипОшибки);
	
	ПредставленияОшибки = ПредставленияОшибкиКриптопровайдера(Ошибка);
	Ошибка.Вставить("КраткоеПредставление", ПредставленияОшибки.КраткоеПредставление);
	Ошибка.Вставить("ПодробноеПредставление", ПредставленияОшибки.ПодробноеПредставление);
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Функция ТипОшибкиКриптопровайдера(Ошибка)
	
	ТипОшибки = Ошибка_НеизвестнаяОшибка();
	
	Если Найти(Ошибка.ОписаниеОшибки, "0D0680A8") Тогда
		ТипОшибки = Ошибка_НеверныйФайл();		
	ИначеЕсли Найти(Ошибка.ОписаниеОшибки, "23076071") Тогда
		ТипОшибки = Ошибка_НеверныйПароль();	
	Иначе
		ТипОшибки = Ошибка_НеизвестнаяОшибка();	
	КонецЕсли;
	
	Возврат ТипОшибки;
	
КонецФункции

&НаКлиенте
Функция ПредставленияОшибкиКриптопровайдера(Ошибка)
	
	ПредставленияОшибки = Новый Структура;
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);
	КраткоеПредставление = КраткоеПредставление + Символы.ПС + НСтр("ru = 'Подробности ошибки смотрите в журнале регистрации.'");
	ПредставленияОшибки.Вставить("КраткоеПредставление", КраткоеПредставление);
	
	ПодробноеПредставление = ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка);
	ПредставленияОшибки.Вставить("ПодробноеПредставление", ПодробноеПредставление);
	
	Возврат ПредставленияОшибки;
	
КонецФункции

&НаКлиенте
Функция КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	КраткоеПредставление = "";
	
	Если Ошибка.ТипОшибки = Ошибка_НеверныйФайл() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно выбранный файл не является файлом сертификата ""*.p12"".'");		
	ИначеЕсли Ошибка.ТипОшибки = Ошибка_НеверныйПароль() Тогда
		КраткоеПредставление = НСтр("ru = 'Возможно был введен некорректный пароль для файла сертификата.'");				
	Иначе	
		КраткоеПредставление = КраткоеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);					
	КонецЕсли;
	
	Возврат КраткоеПредставление;
	
КонецФункции

&НаКлиенте
Функция ПодробноеПредставлениеОшибкиКриптопровайдера(Ошибка)
	
	ПодробноеПредставление = НСтр(
	"ru = '[КраткоеПредставление]
	|[ИнформацияИзКриптопровайдера]
	|[ПодробноеПредставлениеОшибки]'");
	
	КраткоеПредставление = КраткоеПредставлениеОшибкиКриптопровайдера(Ошибка);	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[КраткоеПредставление]", КраткоеПредставление);
	
	Если ПустаяСтрока(Ошибка.Версия) И ПустаяСтрока(Ошибка.КодОшибки) И ПустаяСтрока(Ошибка.ОписаниеОшибки) Тогда
		ИнформацияИзКриптопровайдера = "";
	Иначе
		ИнформацияИзКриптопровайдера = НСтр("ru = 'Версия криптографии: [Версия], Код ошибки: [КодОшибки], Описание ошибки: [ОписаниеОшибки]'");
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[Версия]", Ошибка.Версия);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[КодОшибки]", Ошибка.КодОшибки);
		ИнформацияИзКриптопровайдера = СтрЗаменить(ИнформацияИзКриптопровайдера, "[ОписаниеОшибки]", Ошибка.ОписаниеОшибки);
	КонецЕсли;	
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ИнформацияИзКриптопровайдера]", ИнформацияИзКриптопровайдера);
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка.ИнформацияОбОшибке);
	ПодробноеПредставление = СтрЗаменить(ПодробноеПредставление, "[ПодробноеПредставлениеОшибки]", ПодробноеПредставлениеОшибки);
	
	Возврат ПодробноеПредставление;
	
КонецФункции

&НаКлиенте
Функция Ошибка_НеверныйПароль() Экспорт
	Возврат "НеверныйПароль";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеверныйФайл() Экспорт
	Возврат "НеверныйФайл";	
КонецФункции

&НаКлиенте
Функция Ошибка_НеизвестнаяОшибка() Экспорт
	Возврат "НеизвестнаяОшибка";	
КонецФункции

#КонецОбласти 

#Область ОбновлениеЭАВР 

&НаКлиенте
Процедура ОбновитьДокументыАВРИзИСЭСФ(Знач МассивАВР, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхАВР = АВРВызовСервера.СгруппироватьАВРПоСтруктурнымЕдиницам(МассивАВР);		
	
	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхАВР);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхАВР", КоллекцияСгруппированныхАВР);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		
		ОбновитьДокументыАВРВыборДанныхПрофилейИСЭСФ = Новый ОписаниеОповещения("ОбновитьДокументыАВРВыборДанныхПрофилейИСЭСФ", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхАВР);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыАВРВыборДанныхПрофилейИСЭСФ, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыАВРВыборДанныхПрофилейИСЭСФ(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыАВРВыборДанныхПрофилейИСЭСФ(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхАВР, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхАВР, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов АВР'");
		
		Результат = АВРВызовСервера.ВыполнитьВФоне("АВРВызовСервера.ОбновитьДокументыАВРИзИСЭСФВФоне", ПараметрыЗадания, ПараметрыВыполнения);
		
	Иначе
							
		АВРВызовСервера.ОбновитьДокументыАВРИзИСЭСФ(ДополнительныеПараметры.КоллекцияСгруппированныхАВР, ДанныеПрофилейИСЭСФ);
			
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("АВР_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), ДополнительныеПараметры.КоллекцияСгруппированныхАВР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	КоллекцияСгруппированныхЭСФ = ЭСФВызовСервера.СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивЭСФ);		

	МассивПрофилейИСЭСФ = ЭСФКлиент.ПолучитьНастройкиПараметровИСЭСФ(КоллекцияСгруппированныхЭСФ);
	
	ДополнительныеПараметры.Вставить("КоллекцияСгруппированныхЭСФ", КоллекцияСгруппированныхЭСФ);
	
	Если МассивПрофилейИСЭСФ = Неопределено Тогда
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате = Новый ОписаниеОповещения("ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате", ЭтаФорма, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("СписокСтруктурныхЕдиниц", КоллекцияСгруппированныхЭСФ);
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате, ПараметрыФормы);	
		
	Иначе
		ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате(МассивПрофилейИСЭСФ, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВыборДанныхПрофилейИСЭСФПоНомеруИДате(ДанныеПрофилейИСЭСФ, ДополнительныеПараметры) Экспорт

	Если ДанныеПрофилейИСЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
	
		ПараметрыЗадания = Новый Структура("КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ", ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
		
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление статусов ЭСФ'");
		
		Результат = ЭСФВызовСервера.ВыполнитьВФоне("ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДатеВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
	Иначе
		
		ЭСФВызовСервера.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ);
		
	КонецЕсли;
		
	Если ДополнительныеПараметры.ЗапускатьФоновоеЗадание Тогда
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("ТекстСообщения", НСтр("ru = 'Обновление документов из ИС ЭСФ'"));
		КонецЕсли;
		ЭСФКлиент.ОповеститьФормы("ЭСФ_ПроверятьОповещенияФоновогоЗадания", Результат, ДополнительныеПараметры.КлючФормы);
	Иначе
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), ДополнительныеПараметры.КоллекцияСгруппированныхЭСФ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзменениеСтатусовАВР(Знач Действие, Знач МассивАВР, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	ПараметрыФормы = АВРКлиентСервер.ПустыеПараметрыФормыИзменениеСтатусовАВР();
	ПараметрыФормы.Действие = Действие;
	ПараметрыФормы.МассивАВР = МассивАВР;
	ПараметрыФормы.ЗапускатьФоновоеЗадание = ЗапускатьФоновоеЗадание;
	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ИзменениеСтатусовАВР", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСтатусыАВР(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификаторФормыВладельца, Знач ЗапускатьФоновоеЗадание) Экспорт	
	
	Если ЭСФВызовСервераПовтИсп.ВыполнятьКриптографическиеОперацииНаКлиенте() Тогда
		ТипПодписиАВР = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);			
		Результат = АВРВызовСервера.СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ТипПодписиАВР);
		
		СоответствиеПодписейАВР = Новый Соответствие();
		awpActionInfoList = "";                                                   

		ТекстЗапроса = Результат.ТекстЗапроса; 
		
		Для Каждого ЭлементМассива из Результат.МассивЧастейЗапроса Цикл
			Подпись = СоздатьЭЦП(
			ЭлементМассива.СтрокаДляПодписи, 
			ДанныеКлючаЭЦП.КлючBase64, 
			ДанныеКлючаЭЦП.Пароль);
			ТекстЧастиЗапроса = СтрЗаменить(ЭлементМассива.ЧастьЗапроса, "[Signature]", Подпись);
			awpActionInfoList = awpActionInfoList + ТекстЧастиЗапроса;
			
			СоответствиеПодписейАВР.Вставить(ЭлементМассива.ИД, Новый Структура("Подпись, ТипПодписи", Подпись, ТипПодписиАВР));	
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[awpActionInfoList]", awpActionInfoList);
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ, СоответствиеПодписейАВР", Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ, СоответствиеПодписейАВР);
			
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			НаименованиеЗадания = НСтр("ru = '%1 АВР'");
			НаименованиеЗадания = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = АВРВызовСервера.ВыполнитьВФоне("АВРВызовСервера.ВыполнитьЗапросНаИзменениеСтатусовВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = АВРВызовСервера.ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ,, СоответствиеПодписейАВР);
			
		КонецЕсли;
					
	Иначе 
		
		Если ЗапускатьФоновоеЗадание Тогда
							
			ПараметрыЗадания = Новый Структура("Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ", Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормыВладельца);
			
			НаименованиеЗадания = НСтр("ru = '%1 АВР'");
			НаименованиеЗадания = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Действие));
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
			
			Результат = АВРВызовСервера.ВыполнитьВФоне("АВРВызовСервера.ИзменитьСтатусыАВРВФоне", ПараметрыЗадания, ПараметрыВыполнения);
			
		Иначе
			
			Результат = АВРВызовСервера.ИзменитьСтатусыАВР(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОткрытиеФорм

&НаКлиенте
Процедура ПриОткрытииФормы(Форма, Отказ) Экспорт
		
КонецПроцедуры

&НаКлиенте
Процедура СписокАВР(Знач Направление = Неопределено) Экспорт
	
	Если Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаСпискаВходящих");
	ИначеЕсли Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаСпискаИсходящих");
	Иначе
		ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
