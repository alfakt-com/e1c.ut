
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

&НаСервере
Процедура ЗаполнитьДеревоДокументов()
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныйДокументВС.Организация КАК Организация,
	|	ЭлектронныйДокументВС.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ЭлектронныйДокументВС.Ссылка КАК Документ,
	|	ЭлектронныйДокументВС.СкладОтправитель КАК Склад,
	|	ВЫБОР
	|		КОГДА ЭлектронныйДокументВС.Проведен
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭлектронныйДокументВС.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЭлектронныйДокументВС.Ссылка ЕСТЬ NULL 
	|							ТОГДА 3
	|						ИНАЧЕ 2
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СостояниеДокумента
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Остатки)
	|	И ЭлектронныйДокументВС.Организация В(&СписокВыбранныхОрганизаций)
	|	И ЭлектронныйДокументВС.СтруктурноеПодразделение В(&СписокВыбранныхСтруктурныхПодразделений)
	|	И ЭлектронныйДокументВС.ДокументОснование = НЕОПРЕДЕЛЕНО
	|	И ЭлектронныйДокументВС.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	Склад
	|ИТОГИ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад";
	
	ДатаДокумента = НачалоДня(ДатаПереходаНаУчетТоваровВС);
	Если СписокВыбранныхСтруктурныхПодразделений.Количество() = 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ЭлектронныйДокументВС.СтруктурноеПодразделение В(&СписокВыбранныхСтруктурныхПодразделений)", " И ЭлектронныйДокументВС.СтруктурноеПодразделение = &ПустоеПодразделение");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокВыбранныхОрганизаций"	, СписокВыбранныхОрганизаций.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СписокВыбранныхСтруктурныхПодразделений"	, СписокВыбранныхСтруктурныхПодразделений.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ДатаНачала"					, НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ДатаОкончания"				, КонецДня(ДатаДокумента));
		
	ПустоеПодразделение = ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения(); 
	Запрос.УстановитьПараметр("ПустоеПодразделение" , ПустоеПодразделение);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапросаУровень1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Дерево = РеквизитФормыВЗначение("ДеревоДокументов");
	Дерево.Строки.Очистить();
	Пока ВыборкаЗапросаУровень1.Следующий() Цикл
		СтрокаУровня1 						= Дерево.Строки.Добавить();
		СтрокаУровня1.ЭлементДерева 		= ВыборкаЗапросаУровень1.Организация;
		СтрокаУровня1.СостояниеДокумента 	= ?(ВыборкаЗапросаУровень1.Организация.ПометкаУдаления,1,3);
		ВыборкаЗапросаУровень2 				= ВыборкаЗапросаУровень1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗапросаУровень2.Следующий() Цикл
			СтрокаУровня2 						= СтрокаУровня1.Строки.Добавить();
			СтрокаУровня2.ЭлементДерева 		= ?(ВыборкаЗапросаУровень2.СтруктурноеПодразделение = ПустоеПодразделение, "Головное подразделение", ВыборкаЗапросаУровень2.СтруктурноеПодразделение);
			СтрокаУровня2.СостояниеДокумента 	= ?(ВыборкаЗапросаУровень2.СтруктурноеПодразделение.ПометкаУдаления,1,3);
			ВыборкаЗапросаУровень3 				= ВыборкаЗапросаУровень2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗапросаУровень3.Следующий() Цикл
				СтрокаУровня3 						= СтрокаУровня2.Строки.Добавить();
				СтрокаУровня3.ЭлементДерева 		= ВыборкаЗапросаУровень3.Склад;
				СтрокаУровня3.СостояниеДокумента 	= ?(ВыборкаЗапросаУровень3.Склад.ПометкаУдаления,1,3);
				ВыборкаЗапросаУровень4 				= ВыборкаЗапросаУровень3.Выбрать();
				Пока ВыборкаЗапросаУровень4.Следующий() Цикл
					СтрокаУровня4 						= СтрокаУровня3.Строки.Добавить();
					СтрокаУровня4.ЭлементДерева 		= ВыборкаЗапросаУровень4.Документ;
					СтрокаУровня4.СостояниеДокумента 	= ВыборкаЗапросаУровень4.СостояниеДокумента;
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДокументов");
	
КонецПроцедуры	

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДатаПереходаНаУчетТоваровВС 				 = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить();
	ДатаПереходаНаУчетПоИдентификаторамТоваровВС = Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Получить();
	
	Если ЗначениеЗаполнено(ДатаПереходаНаУчетТоваровВС)
		 И НЕ ЗначениеЗаполнено(ДатаПереходаНаУчетПоИдентификаторамТоваровВС) Тогда
		ДатаПереходаНаУчетПоИдентификаторамТоваровВС = Дата(2018,11,04);		 
	КонецЕсли;
	
	Элементы.ДатаПереходаНаУчетТоваровВС.Доступность 				  = ПравоДоступа("Изменение", Метаданные.Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах);
	Элементы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Доступность = ПравоДоступа("Изменение", Метаданные.Константы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС);
	
	ПроводитьСозданныеДокументы 	= Истина;
	
	ЗаполнитьДеревоОрганизаций();
	
	Элементы.Назад.Видимость = Ложь;
	
	УчетПоИсточникамПроисхождения = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");

	// СпособЗаполнения ПоДаннымБУ не предусмотрен в УПК
	СпособЗаполнения = "ТоварамОрганизацииБУ";
	
	ПараметрыЭДВС 		= ВССервер.ПолучитьПараметрыЭДВС();
	ЗначениеЦены 		= ПараметрыЭДВС.ЗначениеЦены;
	СпособЗаполненияЦены= ПараметрыЭДВС.СпособЗаполненияЦены;
	ТипЦены 			= ПараметрыЭДВС.ТипЦены;
	
	ИспользоватьОбменЭСФЧерезAPI = Константы.ИспользоватьОбменЭСФЧерезAPI.Получить();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ПоТипуЦены") Тогда
		Форма.Элементы.ТипЦены.Видимость 		= Истина;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Ложь; 
		Форма.ЗначениеЦены						= 0;
	ИначеЕсли Форма.СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением") Тогда
		Форма.Элементы.ТипЦены.Видимость 		= Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Истина;
		Форма.ТипЦены							= Неопределено;
	Иначе
		Форма.Элементы.ТипЦены.Видимость 		= Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Ложь; 
		Форма.ЗначениеЦены						= 0;
		Форма.ТипЦены							= Неопределено;
	КонецЕсли;	
	
	Форма.Элементы.ГруппаДоступ.ОтображениеСтраниц 				= ОтображениеСтраницФормы.Нет;
	Форма.Элементы.ГруппаВерсия.ОтображениеСтраниц				= ОтображениеСтраницФормы.Нет;
	Форма.Элементы.ГруппаДоступВС.ОтображениеСтраниц 			= ОтображениеСтраницФормы.Нет;
	Форма.Элементы.ГруппаВерсияВС.ОтображениеСтраниц			= ОтображениеСтраницФормы.Нет;
	
	Форма.Элементы.ДатаПереходаНаУчетПоИдентификаторамТоваровВС.Видимость = ЗначениеЗаполнено(Форма.ДатаПереходаНаУчетТоваровВС);;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияЦеныПриИзменении(Элемент)
	
	ПараметрыЭДВС 		= ВСВызовСервераПовтИсп.ПолучитьПараметрыЭДВС();
	ЗначениеЦены 		= ПараметрыЭДВС.ЗначениеЦены;
	ТипЦены 			= ПараметрыЭДВС.ТипЦены;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОрганизаций()
	//Запрос = НОвый Запрос;
	////Запрос.Текст =
	////"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	////|	ВЫБОР
	////|		КОГДА Организации.ПометкаУдаления
	////|			ТОГДА 1
	////|		ИНАЧЕ 3
	////|	КОНЕЦ КАК Состояние,
	////|	Организации.Ссылка КАК Организация,
	////|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	////|	Организации.Наименование КАК ПолеДляСортировки
	////|ИЗ
	////|	Справочник.Организации КАК Организации
	////|
	////|УПОРЯДОЧИТЬ ПО
	////|	ГоловнаяОрганизация,
	////|	ПолеДляСортировки
	////|ИТОГИ ПО
	////|	ГоловнаяОрганизация";
	//
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ВЫБОР
	//|		КОГДА Организации.ПометкаУдаления
	//|			ТОГДА 1
	//|		ИНАЧЕ 3
	//|	КОНЕЦ КАК Состояние,
	//|	Организации.Ссылка КАК Организация,
	//|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	//|	Организации.Наименование КАК ПолеДляСортировки,
	////|	1 КАК Номер,
	//|	Организации.Ссылка КАК СП
	//|ИЗ
	//|	Справочник.Организации КАК Организации
	//|
	////|ОБЪЕДИНИТЬ ВСЕ
	////|
	////|ВЫБРАТЬ
	////|	ВЫБОР
	////|		КОГДА ПодразделенияОрганизаций.ПометкаУдаления
	////|			ТОГДА 1
	////|		ИНАЧЕ 3
	////|	КОНЕЦ,
	////|	ПодразделенияОрганизаций.Владелец,
	////|	ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация,
	////|	ПодразделенияОрганизаций.Наименование,
	////|	2,
	////|	ПодразделенияОрганизаций.Ссылка
	////|ИЗ
	////|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	////|ГДЕ
	////|	ПодразделенияОрганизаций.ЯвляетсяСтруктурнымПодразделением = ИСТИНА
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ГоловнаяОрганизация,
	//|	Организация,
	//|	СП
	//|ИТОГИ ПО
	//|	ГоловнаяОрганизация,
	//|	Организация";

	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//ВыборкаЗапросаУровень1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//ДеревоОрганизаций = РеквизитФормыВЗначение("ОрганизацииДляПерехода");
	//ДеревоОрганизаций.Строки.Очистить();
	//Пока ВыборкаЗапросаУровень1.Следующий() Цикл
	//	СтрокаУровня1 				= ДеревоОрганизаций.Строки.Добавить();
	//	СтрокаУровня1.Пометка 		= Ложь;
	//	СтрокаУровня1.Организация 	= ВыборкаЗапросаУровень1.ГоловнаяОрганизация;
	//	СтрокаУровня1.Состояние 	= 3;
	//	СтрокаУровня1.Уровень		= 0;
	//	ВыборкаЗапросаУровень2 		= ВыборкаЗапросаУровень1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаЗапросаУровень2.Следующий() Цикл
	//		СтрокаУровня2 				= СтрокаУровня1.Строки.Добавить();
	//		СтрокаУровня2.Пометка 		= Ложь;
	//		СтрокаУровня2.Организация 	= ВыборкаЗапросаУровень2.Организация;
	//		СтрокаУровня2.Состояние 	= ВыборкаЗапросаУровень2.Состояние;
	//		СтрокаУровня2.Уровень		= 1;
	//		ВыборкаЗапросаУровень3 		= ВыборкаЗапросаУровень2.Выбрать();
	//		Пока ВыборкаЗапросаУровень3.Следующий() Цикл
	//			СтрокаУровня3 				= СтрокаУровня2.Строки.Добавить();
	//			СтрокаУровня3.Пометка 		= Ложь;
	//			СтрокаУровня3.Организация 	= ВыборкаЗапросаУровень3.СП;
	//			СтрокаУровня3.Состояние 	= ВыборкаЗапросаУровень3.Состояние;
	//			СтрокаУровня3.Уровень		= 2;
	//		КонецЦикла;	
	//	КонецЦикла;	
	//КонецЦикла;	
	//
	//ЗначениеВРеквизитФормы(ДеревоОрганизаций, "ОрганизацииДляПерехода");
	
	Запрос = НОвый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Состояние,
	|	Организации.Ссылка КАК Организация,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.Наименование КАК ПолеДляСортировки
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГоловнаяОрганизация,
	|	ПолеДляСортировки
	|ИТОГИ ПО
	|	ГоловнаяОрганизация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапросаУровень1 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоОрганизаций = РеквизитФормыВЗначение("ОрганизацииДляПерехода");
	ДеревоОрганизаций.Строки.Очистить();
	Пока ВыборкаЗапросаУровень1.Следующий() Цикл
		СтрокаУровня1 				= ДеревоОрганизаций.Строки.Добавить();
		СтрокаУровня1.Пометка 		= Ложь;
		СтрокаУровня1.Организация 	= ВыборкаЗапросаУровень1.ГоловнаяОрганизация;
		СтрокаУровня1.Состояние 	= 3;
		СтрокаУровня1.Уровень		= 0;
		ВыборкаЗапросаУровень2 		= ВыборкаЗапросаУровень1.Выбрать();
		Пока ВыборкаЗапросаУровень2.Следующий() Цикл
			СтрокаУровня2 				= СтрокаУровня1.Строки.Добавить();
			СтрокаУровня2.Пометка 		= Ложь;
			СтрокаУровня2.Организация 	= ВыборкаЗапросаУровень2.Организация;
			СтрокаУровня2.Состояние 	= ВыборкаЗапросаУровень2.Состояние;
			СтрокаУровня2.Уровень		= 1;
		КонецЦикла;	
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДеревоОрганизаций, "ОрганизацииДляПерехода");
	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиВоВсемДереве(ВыполняемоеДействие)
	
	Для Каждого СтрокаУровень1 Из ОрганизацииДляПерехода.ПолучитьЭлементы() Цикл
		
		СтрокаУровень1.Пометка = ВыполняемоеДействие = "Установить";
		
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.ПолучитьЭлементы() Цикл
			СтрокаУровень2.Пометка = ВыполняемоеДействие = "Установить";
			
			Для Каждого СтрокаУровень3 Из СтрокаУровень2.ПолучитьЭлементы() Цикл
				СтрокаУровень3.Пометка = ВыполняемоеДействие = "Установить";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	ЗаполнитьСписокОрганизацийДляВводаОстатков();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиРодителей(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаУровень1Пометка = Ложь;
	СтрокаУровень2СнятыВсеПометки = Истина;
	Для Каждого СтрокаУровень1 Из Родитель.ПолучитьЭлементы() Цикл
		Если СтрокаУровень1.Пометка Тогда
			СтрокаУровень2СнятыВсеПометки = Ложь;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Родитель.Пометка = НЕ СтрокаУровень2СнятыВсеПометки;
	УстановитьПометкиРодителей(Родитель);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущиеДанные)
	
	Пометка	= ТекущиеДанные.Пометка;
	Подчиненные	= ТекущиеДанные.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() > 0 Тогда
		
		Для Каждого Строка Из Подчиненные Цикл
			Строка.Пометка = Пометка;
			УстановитьПометкиПодчиненных(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСписокОрганизацийДляВводаОстатков();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания)
	
	ДатаДокумента = НачалоДня(ДатаПереходаНаУчетТоваровВС) - 1;
	
	СпособЗаполнения = "ТоварамОрганизацииБУ";
	
	ПараметрыСоздания.Вставить("ДатаПереходаНаУчетТоваровВС"	, НачалоДня(ДатаПереходаНаУчетТоваровВС));
	ПараметрыСоздания.Вставить("ПомощникПерехода"				, Истина);
	ПараметрыСоздания.Вставить("ФормироватьСписокДокументов"	, Ложь);
	ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	, ПроводитьСозданныеДокументы);
	ПараметрыСоздания.Вставить("ЗаполнятьПоТоварамОрганизации"	, Истина);
	ПараметрыСоздания.Вставить("СпособЗаполненияЦены"			, СпособЗаполненияЦены);
	ПараметрыСоздания.Вставить("ТипЦены"						, ТипЦены);
	ПараметрыСоздания.Вставить("ЗначениеЦены"					, ЗначениеЦены);
	ПараметрыСоздания.Вставить("ДатаОформления"					, КонецДня(ДатаДокумента));
	ПараметрыСоздания.Вставить("ДатаНачала"						, НачалоДня(ДатаДокумента));
	ПараметрыСоздания.Вставить("ДатаОкончания"					, КонецДня(ДатаДокумента));
	
	ОбработкаОбменЭСФ 		= ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ПараметрыЗаполненияЭДВС = ОбработкаОбменЭСФ.ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания);
	
	Если СпособЗаполнения = "ТоварамОрганизацииБУ" ИЛИ СпособЗаполненияЦены <> Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости Тогда
		ЗаполнятьЦены = Истина
	ИначеЕсли НЕ ПараметрыЗаполненияЭДВС.СебестоимостьПоСкладам Тогда	
		ЗаполнятьЦены = Истина
	Иначе
		ЗаполнятьЦены = Ложь;	
	КонецЕсли;	
	ПараметрыЗаполненияЭДВС.Вставить("ЗаполнятьЦены"		, ЗаполнятьЦены) ;
	ПараметрыЗаполненияЭДВС.Вставить("ПоДвижениямДокумента"	, Ложь) ;
	Возврат ПараметрыЗаполненияЭДВС;
	
КонецФункции

&НаСервере
Процедура СоздатьВводОстатковНаСервере(ПараметрыСоздания)
	
	ПараметрыЗаполненияЭДВС = ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания);
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьСписокЭлектронныхДокументовВС(ПараметрыЗаполненияЭДВС);
	
	ЗаполнитьДеревоДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокОрганизацийДляВводаОстатков()
	//СписокВыбранныхОрганизаций.Очистить();
	//СписокВыбранныхСтруктурныхПодразделений.Очистить();
	//Для Каждого СтрокаУровень1 Из ОрганизацииДляПерехода.ПолучитьЭлементы() Цикл
	//	Для Каждого СтрокаУровень2 Из СтрокаУровень1.ПолучитьЭлементы() Цикл
	//		Для Каждого СтрокаУровень3 Из СтрокаУровень2.ПолучитьЭлементы() Цикл
	//			Если СтрокаУровень3.Пометка Тогда 
	//				Если ТипЗнч(СтрокаУровень3.Организация) = Тип("СправочникСсылка.Организации") Тогда						
	//					СписокВыбранныхОрганизаций.Добавить(СтрокаУровень3.Организация);
	//					СписокВыбранныхСтруктурныхПодразделений.Добавить(ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	//				ИначеЕсли ТипЗнч(СтрокаУровень3.Организация) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
	//					СписокВыбранныхСтруктурныхПодразделений.Добавить(СтрокаУровень3.Организация);
	//					СтрокаОргРодитель = СтрокаУровень3.ПолучитьРодителя();
	//					СписокВыбранныхОрганизаций.Добавить(СтрокаОргРодитель.Организация);
	//				КонецЕсли;	
	//			КонецЕсли;	
	//		КонецЦикла;
	//	КонецЦикла;
	//КонецЦикла;
	
	СписокВыбранныхОрганизаций.Очистить(); 
	
	Для Каждого СтрокаУровень1 Из ОрганизацииДляПерехода.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаУровень2 Из СтрокаУровень1.ПолучитьЭлементы() Цикл
			Если СтрокаУровень2.Пометка Тогда 
				СписокВыбранныхОрганизаций.Добавить(СтрокаУровень2.Организация);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеСкладовИВиртуальныхСкладов(МассивОрганизаций, МассивСтруктурныхПодразделений)
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("МассивОрганизаций"				, МассивОрганизаций);
	ПараметрыПроверки.Вставить("МассивСтруктурныхПодразделений"	, МассивСтруктурныхПодразделений);
	ПараметрыПроверки.Вставить("СпособЗаполнения"				, СпособЗаполнения);
	ПараметрыПроверки.Вставить("ДатаПереходаНаУчетТоваровВС"	, ДатаПереходаНаУчетТоваровВС);
	
	ВыборкаЗапроса = ВССерверПереопределяемый.ПроверитьСоответствиеСкладовИВиртуальныхСкладов(ПараметрыПроверки);
	
	ЕстьОшибки = Ложь;
	
	Если ВыборкаЗапроса <> Неопределено Тогда
		Пока ВыборкаЗапроса.Следующий() Цикл
			ЕстьОшибки = Истина;
			ТекстСообщения = НСтр("ru = 'В организации ""%1"", структурном подразделении ""%2"" для склада ""%3"" не назначено соответствие виртуальному складу'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаЗапроса.Организация,ВыборкаЗапроса.СтруктурноеПодразделение, ВыборкаЗапроса.Склад);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, Значение)
	
	Если ПравоДоступа("Изменение", Метаданные.Константы[ИмяКонстанты]) Тогда
		Константы[ИмяКонстанты].Установить(Значение);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПолучитьМассивЭДВС(ПараметрыОтбора)
	
	Склад 						= ПараметрыОтбора.Склад;
	Организация					= ПараметрыОтбора.Организация;
	СтруктурноеПодразделение 	= ПараметрыОтбора.СтруктурноеПодразделение;
	МассивЭДВС 	= Новый Массив;
	
	Для Каждого СтрокаДокумента из ДеревоДокументов.ПолучитьЭлементы() Цикл	
		Если СтрокаДокумента.ЭлементДерева = Организация Тогда
			Для Каждого СтрокаСП из СтрокаДокумента.ПолучитьЭлементы() Цикл	
				Если СтруктурноеПодразделение = Неопределено ИЛИ СтрокаСП.ЭлементДерева = СтруктурноеПодразделение Тогда
					Для Каждого СтрокаСклада из СтрокаСП.ПолучитьЭлементы() Цикл
						Если Склад = Неопределено ИЛИ СтрокаСклада.ЭлементДерева = Склад Тогда
							Для Каждого СтрокаЭДВС из СтрокаСклада.ПолучитьЭлементы() Цикл
								Если ЗначениеЗаполнено(СтрокаЭДВС.ЭлементДерева) 
									И МассивЭДВС.Найти(СтрокаЭДВС.ЭлементДерева) = Неопределено Тогда
									МассивЭДВС.Добавить(СтрокаЭДВС.ЭлементДерева);	
								КонецЕсли;	
							КонецЦикла;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивЭДВС;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыЗаполненияТабличныхЧастей()
	ТекущиеДанные = Элементы.ДеревоДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ЭлементДерева = ТекущиеДанные.ЭлементДерева;
	Если ТипЗнч(ЭлементДерева) = Тип("ДокументСсылка.ЭлектронныйДокументВС") Тогда
		Родитель 					= ТекущиеДанные.ПолучитьРодителя();
		Склад 						= Родитель.ЭлементДерева;
		Родитель 					= Родитель.ПолучитьРодителя();
		СтруктурноеПодразделение	= Родитель.ЭлементДерева;
		Родитель 					= Родитель.ПолучитьРодителя();
		Организация					= Родитель.ЭлементДерева;
		
	ИначеЕсли ТипЗнч(ЭлементДерева) = Тип("СправочникСсылка.ВиртуальныеСклады") Тогда
		Склад 						= ЭлементДерева;
		Родитель 					= ТекущиеДанные.ПолучитьРодителя();
		СтруктурноеПодразделение	= Родитель.ЭлементДерева;
		Родитель 					= Родитель.ПолучитьРодителя();
		Организация					= Родитель.ЭлементДерева;
	ИначеЕсли ТипЗнч(ЭлементДерева) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
		СтруктурноеПодразделение	= ЭлементДерева;
		Родитель 					= ТекущиеДанные.ПолучитьРодителя();
		Организация					= Родитель.ЭлементДерева;
	Иначе
		Склад		= Неопределено;	
		Организация = ЭлементДерева;
		СтруктурноеПодразделение = Неопределено;
	КонецЕсли;	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Склад"		, Склад);
	ПараметрыОтбора.Вставить("Организация"	, Организация);
	ПараметрыОтбора.Вставить("СтруктурноеПодразделение"	, СтруктурноеПодразделение);
	
	Возврат ПараметрыОтбора;
КонецФункции

&НаСервере
Процедура ПровестиНаСервере(МассивДокументов)
	
	Для Каждого ЭлементМассив Из МассивДокументов Цикл
		ЭДВС = ЭлементМассив.ПолучитьОбъект();
		Попытка 
			ЭДВС.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеНаСервере(МассивДокументов)
	
	Для Каждого ЭлементМассив Из МассивДокументов Цикл
		ЭДВС = ЭлементМассив.ПолучитьОбъект();
		Попытка 
			ЭДВС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = НСтр("ru = 'При отмене проведения документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументыЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СоздатьВводОстатковНаСервере(ДополнительныеПараметры);
	КонецЕсли;	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьМассивСкладов(ПараметрыПереоформления)
	Если ПараметрыПереоформления.Склад = Справочники.ВиртуальныеСклады.ПустаяСсылка() Тогда
		Запрос 		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
		|		ПО Склады.Ссылка = СоответствиеСкладовИВиртуальныхСкладов.Склад.Ссылка
		|			И (ВЫБОР КОГДА &СтруктурноеПодразделение = &ПустоеПодразделение
		|				ТОГДА &Организация = СоответствиеСкладовИВиртуальныхСкладов.Организация
		|				ИНАЧЕ &СтруктурноеПодразделение = СоответствиеСкладовИВиртуальныхСкладов.Организация КОНЕЦ)
		|ГДЕ
		|	СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад ЕСТЬ NULL 
		|	И Склады.ЭтоГруппа = ЛОЖЬ";
	Иначе
		Запрос 		 = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеСкладовИВиртуальныхСкладов.Склад КАК Склад
		|ИЗ
		|	РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
		|ГДЕ
		|	(ВЫБОР КОГДА &СтруктурноеПодразделение = &ПустоеПодразделение
		|		ТОГДА СоответствиеСкладовИВиртуальныхСкладов.Организация = &Организация 
		|		ИНАЧЕ СоответствиеСкладовИВиртуальныхСкладов.Организация = &СтруктурноеПодразделение КОНЕЦ)
		|	И СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад = &Склад";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Организация"								, ПараметрыПереоформления.Организация);	
	Запрос.УстановитьПараметр("Склад"									, ПараметрыПереоформления.Склад);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение"				, ПараметрыПереоформления.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("ПустоеПодразделение"	, ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
КонецФункции

&НаКлиенте
Функция ИндексТекущейСтраницы()
	Возврат Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница);	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиПрокси()
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПроксиСервера", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыЗаполненияЭДВС()	
	ПараметрыЭДВС 						= ВССервер.ПолучитьПараметрыЭДВС();
	ПараметрыЭДВС.ЗначениеЦены 			= ЗначениеЦены;
	ПараметрыЭДВС.СпособЗаполненияЦены 	= СпособЗаполненияЦены;
	ПараметрыЭДВС.ТипЦены 				= ТипЦены;
	
	ВССервер.СохранитьПараметрыЭДВС(ПараметрыЭДВС);
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура СнятьФлаги(Команда)
	
	УстановитьПометкиВоВсемДереве("Снять");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(Команда)
	
	УстановитьПометкиВоВсемДереве("Установить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииДляПереходаПометкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОрганизацииДляПерехода.ТекущиеДанные;
	
	УстановитьПометкиПодчиненных(ТекущиеДанные);
	УстановитьПометкиРодителей(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.Далее.Видимость = Истина;
	
	Если ИндексТекущейСтраницы() > 0 Тогда		 
		ПредыдущаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() - 1);
		Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = ПредыдущаяСтраница;				
		Если Не ИспользоватьОбменЭСФЧерезAPI И Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаНастройкаПодключенияКВСИЭСФ Тогда		
			ПредыдущаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() - 1);
			Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = ПредыдущаяСтраница;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексТекущейСтраницы() = 0 Тогда
		Элементы.Назад.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиНаСледующуюСтраницу = Истина;
	
	Если Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаСтраницаПриветствиеДата Тогда
		
		Если Не ЗначениеЗаполнено(ДатаПереходаНаУчетТоваровВС) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана дата перехода на учет по товарам организаций на виртуальных складах. Создание документов невозможно!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ДатаПереходаНаУчетТоваровВС");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		УстановитьЗначениеКонстанты("ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах", ДатаПереходаНаУчетТоваровВС);	
		УстановитьЗначениеКонстанты("ДатаПереходаНаУчетПоИдентификаторамТоваровВС", ДатаПереходаНаУчетПоИдентификаторамТоваровВС);	
		
		ОбновитьИнтерфейс();
		
	ИначеЕсли Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаНастройкиЗаполненияЭДВС Тогда
		
		Если СпособЗаполненияЦены=ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ПоТипуЦены") И Не ЗначениеЗаполнено(ТипЦены) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан тип цены!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ТипЦены");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если СпособЗаполненияЦены=ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением") И Не ЗначениеЗаполнено(ЗначениеЦены) Тогда
			ТекстСообщения = НСтр("ru = 'Не указано значение цены!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ЗначениеЦены");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		СохранитьПараметрыЗаполненияЭДВС();

	ИначеЕсли Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаПомощникСопоставленияВС Тогда		
		
		УстановитьПометкиВоВсемДереве("Установить");
		ПроверитьСоответствиеСкладовИВиртуальныхСкладов(СписокВыбранныхОрганизаций, СписокВыбранныхСтруктурныхПодразделений);
		УстановитьПометкиВоВсемДереве("Снять");
		
	ИначеЕсли Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаПараметров Тогда
		
		ЕстьОшибки = Ложь;	
		
		Если СписокВыбранныхОрганизаций.Количество() = 0 И СписокВыбранныхСтруктурныхПодразделений.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрано ни одно значение организации или структурного подразделения. Создание документов не возможно!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения,,"ОрганизацииДляПерехода");
			ЕстьОшибки = Истина;
		КонецЕсли;	
		
		Если Не ЕстьОшибки Тогда
			Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.ГруппаВводОстатков;
			
			ЗаполнитьДеревоДокументов();
			Если ДеревоДокументов.ПолучитьЭлементы().Количество() = 0 Тогда
				ОформитьДокументы(Команда);
			Иначе 
				ТекстСообщения = НСтр("ru = 'В конфигурации по выбранным организациям уже существуют электронные документы ВС
				|ввода остатков по регистру ""Товары на виртуальных складах"".'");	
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Элементы.Далее.Видимость = Ложь;
			ПерейтиНаСледующуюСтраницу = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерейтиНаСледующуюСтраницу Тогда		 
		СледующаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() + 1);
		Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = СледующаяСтраница;
		Элементы.Назад.Видимость = Истина; 
		Если Не ИспользоватьОбменЭСФЧерезAPI И Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаНастройкаПодключенияКВСИЭСФ Тогда		
			СледующаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.Получить(ИндексТекущейСтраницы() + 1);
			Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = СледующаяСтраница;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = ДеревоДокументов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	ЭлементДерева = ТекущиеДанные.ЭлементДерева;
	Если ЗначениеЗаполнено(ЭлементДерева) Тогда 
		ПоказатьЗначение(, ЭлементДерева);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументы(Команда)
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("МассивОрганизаций"				, СписокВыбранныхОрганизаций);
	ПараметрыСоздания.Вставить("МассивСтруктурныхПодразделений"	, СписокВыбранныхСтруктурныхПодразделений);
	ПараметрыСоздания.Вставить("МассивСкладов"					, Неопределено);
	
	Если ДеревоДокументов.ПолучитьЭлементы().Количество() <> 0 Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ТекстВопроса = НСтр("ru = 'В конфигурации по выбранным организациям уже существуют электронные документы ВС,
		|выполнившие движения по начальному заполнению регистра накопления ""Товары на виртуальных складах"".
		|
		|Создать новые документы?'");
		ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, НачалоДня(ДатаПереходаНаУчетТоваровВС)-1);						   
		Обработчик = Новый ОписаниеОповещения("ОформитьДокументыЗавершение", ЭтотОбъект, ПараметрыСоздания);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена);
	Иначе
		СоздатьВводОстатковНаСервере(ПараметрыСоздания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведение(Команда)
	ПараметрыОтбора = ПолучитьПараметрыЗаполненияТабличныхЧастей();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОтменитьПроведениеНаСервере(ПолучитьМассивЭДВС(ПараметрыОтбора));
	
	ЗаполнитьДеревоДокументов();
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)

	ПараметрыОтбора = ПолучитьПараметрыЗаполненияТабличныхЧастей();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(ПараметрыОтбора.Организация);
	
	СписокСтруктурныхПодразделений = Новый СписокЗначений;
	Если НЕ ПараметрыОтбора.СтруктурноеПодразделение = Неопределено Тогда
		СписокСтруктурныхПодразделений.Добавить(ПараметрыОтбора.СтруктурноеПодразделение);
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("МассивОрганизаций"	, СписокОрганизаций);
	ПараметрыСоздания.Вставить("МассивСтруктурныхПодразделений"	, СписокСтруктурныхПодразделений);
	ПараметрыСоздания.Вставить("МассивСкладов"		, ?(ПараметрыОтбора.Склад = Неопределено, Неопределено, ПолучитьМассивСкладов(ПараметрыОтбора)));
	ПараметрыСоздания.Вставить("МассивЭДВС"	, ПолучитьМассивЭДВС(ПараметрыОтбора));
	
	ПараметрыЗаполненияЭДВС = ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания);
	
	ПараметрыПереоформления = Новый Структура;
	ПараметрыПереоформления.Вставить("ПараметрыСоздания", ПараметрыЗаполненияЭДВС);
	
	ПараметрыПереоформления.Вставить("ПомощникПерехода", Истина);
	ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаПереоформлениеДокументов", ПараметрыПереоформления,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	ПараметрыОтбора = ПолучитьПараметрыЗаполненияТабличныхЧастей();
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПровестиНаСервере(ПолучитьМассивЭДВС(ПараметрыОтбора));
	
	ЗаполнитьДеревоДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СверкаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОстатка"						, ДатаПереходаНаУчетТоваровВС);
	ПараметрыФормы.Вставить("СписокОрганизация"					, СписокВыбранныхОрганизаций);
	ПараметрыФормы.Вставить("СписокСтруктурныхПодразделений"	, СписокВыбранныхСтруктурныхПодразделений);
	ПараметрыФормы.Вставить("СпособЗаполнения"					, СпособЗаполнения);
	ОткрытьФорму("Обработка.ПомощникПереходаНаУчетТоваровВС.Форма.ФормаСравненияОстатков", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКСерверуИСВСНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуВС");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуВС", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НадписьДоступПодробнееНажатие(Элемент)
	Сообщить(ОшибкаСоединения, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВерсияПодробнееНажатие(Элемент)
	Сообщить(ОшибкаВерсии, СтатусСообщения.Внимание);
КонецПроцедуры

&НаКлиенте
Процедура ПомощникСопоставленияСкладовВСНажатие(Элемент)
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.СопоставлениеИдСкладов", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIВСПроксиНажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсиюВС(Команда)
	
	СтруктураПараметров = ВСВызовСервера.ПроверитьДоступИВерсиюВСНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	
	Элементы.ГруппаВерсияВС.Видимость  = Истина;
	
	Если СтруктураПараметров.ВерсияВС = Неопределено Тогда
		Элементы.ГруппаДоступВС.ТекущаяСтраница = Элементы.СтраницаДоступОшибкаВС;
		Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияВопросВС;
		
		Элементы.ГруппаВерсияВС.Видимость  = Ложь;
		
	Иначе
		Элементы.ГруппаДоступВС.ТекущаяСтраница = Элементы.СтраницаДоступУспешноВС;
		Элементы.НадписьВерсияОшибкаВС.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживаетВС.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияВСПоддерживается Тогда
			Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияОшибкаВС;				
		Иначе
			Элементы.ГруппаВерсияВС.ТекущаяСтраница = Элементы.СтраницаВерсияУспешноВС;		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияКСерверуИСЭСФНажатие(Элемент)
	ДополнительныеПараметры = Новый Структура("ЦельОткрытияФормы", "НастройкаПодключенияКСерверуИСЭСФ");	
	ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ПараметрыПодключенияКСерверуИСЭСФ", ДополнительныеПараметры, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОписаниеОбменаЧерезAPIПроксиЭСФНажатие(Элемент)
	ПоказатьНастройкиПрокси();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступИВерсию(Команда)
	
	СтруктураПараметров = ЭСФВызовСервера.ПроверитьДоступИВерсиюНаСервере();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	
	Элементы.ГруппаВерсия.Видимость  = Истина;
	
	Если СтруктураПараметров.ВерсияИСЭСФ = Неопределено Тогда
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступОшибка;
		Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияВопрос;
		
		Элементы.ГруппаВерсия.Видимость  = Ложь;
		
	Иначе
		Элементы.ГруппаДоступ.ТекущаяСтраница = Элементы.СтраницаДоступУспешно;
		Элементы.НадписьВерсияОшибка.Заголовок = СтруктураПараметров.ТекстВерсияОшибка;
		Элементы.НадписьВерсияПоддерживает.Заголовок = СтруктураПараметров.ТекстВерсияПоддерживает;
		
		Если НЕ СтруктураПараметров.ВерсияИСЭСФПоддерживается Тогда
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияОшибка;
		Иначе
			Элементы.ГруппаВерсия.ТекущаяСтраница = Элементы.СтраницаВерсияУспешно;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуальныеСкладыНажатие(Элемент)
	ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаСписка"); 
КонецПроцедуры

&НаКлиенте
Процедура НадписьНоменклатураГСВСНажатие(Элемент)
	ОткрытьФорму("Справочник.НоменклатураГСВС.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	ЗаполнитьДеревоДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Элементы.ГруппаСтраницыПомощника.ТекущаяСтраница = Элементы.ГруппаСтраницыПомощника.ПодчиненныеЭлементы.ГруппаВводОстатков
		И ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		ЗаполнитьДеревоДокументов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПереходаНаУчетТоваровВСПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДатаПереходаНаУчетТоваровВС) Тогда
		ДатаПереходаНаУчетПоИдентификаторамТоваровВС = Дата(1,1,1);
		//УстановитьНастройкиРегламентногоЗадания("ОбновлениеНоменклатурыГСВС", "", Ложь);
	ИначеЕсли Не ЗначениеЗаполнено(ДатаПереходаНаУчетПоИдентификаторамТоваровВС) Тогда
		ДатаПереходаНаУчетПоИдентификаторамТоваровВС = Дата(2018,11,04);		 
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ДатаПереходаНаУчетТоваровВС) Тогда
	//	УстановитьНастройкиРегламентногоЗадания("ОбновлениеНоменклатурыГСВС", "", Истина);
	//КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНастройкиРегламентногоЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания, ИспользованиеРегЗадания) 
	
	РегламентноеЗадание = ПолучитьРегламентноеЗадание(ИмяЗадания);
	Если РегламентноеЗадание <> Неопределено Тогда
		//РегламентноеЗадание.Расписание    = РасписаниеРегламентногоЗадания;
		РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
		РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении = 600; // Чтобы исключить нагрузку на сервер в случае аварийных повторов
		РегламентноеЗадание.Записать();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗадание(ИмяЗадания);
	
	МетаданныеРегЗадания = Метаданные.РегламентныеЗадания[ИмяЗадания];
	
	МассивРегламентныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", МетаданныеРегЗадания));
	
	Для Каждого ТекСтрока Из МассивРегламентныхЗаданий Цикл
		
		Если ТекСтрока.Метаданные = МетаданныеРегЗадания Тогда
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РегламентныеЗадания.СоздатьРегламентноеЗадание(ИмяЗадания);
	
КонецФункции

#КонецОбласти



