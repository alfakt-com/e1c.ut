
#Область ЗагрузкаДанныхПоПакету

Функция ЗагрузитьОбновитьПользовательскиеПоляОбъектов(пОбщиеНастройки, мДанных, ТипОбъектаОбмена) Экспорт
	
	мСвойстваИсключения = Б24_СинхронизацияВызовСервера.ПолучитьНазванияИсключающихСвойств();	
	
	ИспользуемыеТипыСвойствБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьИспользуемыеТипыСвойствБитрикс24();
	
	ЕстьДопРеквизиты = Истина;
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	Если ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании тогда
		ТипЗначенияСвойств 	= ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании; 
		НаборСвойств		= Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие;	
		ОкончаниеНазвания	= " (Контрагенты)";
		ТипДляЛога = "Компания";	
	ИначеЕсли ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта тогда
		ТипЗначенияСвойств 	= ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта;
		НаборСвойств		= Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие;
		ОкончаниеНазвания	= " (Контрагенты)";
		ТипДляЛога = "Контакт";	
	ИначеЕсли ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки тогда
		ТипЗначенияСвойств 	= ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки; 	
		НаборСвойств		= Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;	
		ОкончаниеНазвания	= " (Заказы покупателей)";
		ТипДляЛога = "Сделка";	
	ИначеЕсли ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета тогда
		ТипЗначенияСвойств 	= ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета;
		НаборСвойств		= Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту;
		ОкончаниеНазвания	= " (Счет на оплату)";
		ТипДляЛога = "Счет";	
		//ЕстьДопРеквизиты 	= Ложь;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"				, ТипОбъектаОбмена);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ТипЗначенияСвойств);
	Запрос.УстановитьПараметр("НаборСвойств"			, НаборСвойств);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияСвойств
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Объект,
	|	ЗначенияСвойствОбъектов.Владелец КАК Свойство,
	|	ЗначенияСвойствОбъектов.Наименование КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияЗначенийСвойств
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство,
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;	
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента	= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		ДополнительныйИдЭлемента = ТекЭлемент.Получить("FIELD_NAME");
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ПользовательскийТип = ТекЭлемент.Получить("USER_TYPE_ID");    
		Если ИспользуемыеТипыСвойствБитрикс24.Найти(ПользовательскийТип) = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		Наименование = "";
		НаименованияНаФормах = ТекЭлемент.Получить("EDIT_FORM_LABEL");
		Если НаименованияНаФормах <> Неопределено тогда
			Наименование = НаименованияНаФормах.Получить(Б24_ОбщегоНазначенияСервер.ПолучитьЛокализациюБитрикс24());		
		КонецЕсли;
		
		Если Наименование = "" тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найдено наименование для свойства с Ид:" + ИдЭлемента);
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			Продолжить;	
		КонецЕсли;
		
		ВнешнийКод 	= Строка(ТекЭлемент.Получить("XML_ID"));
		
		Если мСвойстваИсключения.Найти(Наименование) <> Неопределено тогда   
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент.Получить("MULTIPLE") = "Y" тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + Наименование + " не будет добавлено/обновлено. т.к. является множественным");
			Продолжить;
		КонецЕсли;
		
#Область ПоискСозданиеСвойства	
		Свойство = Неопределено;
		Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод)И НЕ ЗначениеЗаполнено(Свойство)  тогда
			Свойство = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Свойство)  тогда
			Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованияСвойств", Наименование);	
		КонецЕсли;
		
		ЭтоНовый = Истина;
		
		Если Свойство = Неопределено тогда
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			Свойство.НаборСвойств = НаборСвойств;
			
			Если Наименование = "Внешний URL" тогда
				Свойство.Доступен 	= Ложь;
				Свойство.Виден 		= Ложь;
			КонецЕсли;
			
		Иначе
			
			//Если ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов тогда
			ЭтоНовый = Ложь;
			Свойство = Свойство.ПолучитьОбъект();
			//Иначе
			//	Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			//	Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипОбъектаОбмена, Свойство.Ссылка, ИдЭлемента);
			//	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что объекты с типом "+Строка(ТипОбъектаОбмена)+" не обновляются. Свойство: " + Наименование + " не будет обновлено");
			//	Продолжить;  				
			//КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Если ЭтоНовый тогда
			Свойство.Наименование 	= Наименование + ОкончаниеНазвания;
		КонецЕсли;
		
		Если ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании тогда
			Если стрНайти(Свойство.Комментарий, "Свойство компании (Битрикс24)") = 0 тогда	
				Свойство.Комментарий = Свойство.Комментарий+" "+"Свойство компании (Битрикс24)";
			КонецЕсли;
			
		ИначеЕсли ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта тогда
			Если стрНайти(Свойство.Комментарий, "Свойство контакта (Битрикс24)") = 0 тогда	
				Свойство.Комментарий = Свойство.Комментарий+" "+"Свойство контакта (Битрикс24)";
			КонецЕсли;
		КонецЕсли;
		
		Свойство.Заголовок 				= Наименование;
		Свойство.ЗаполнятьОбязательно 	= ТекЭлемент.Получить("MANDATORY") = "Y"; 
		
		Если ЭтоНовый тогда
			
			Свойство.ЭтоДополнительноеСведение = НЕ ЕстьДопРеквизиты;	
			
#Область РазборТипаСвойства
		МассивТипов = Новый Массив;
		
		Если ПользовательскийТип = "string" тогда
			
			КС = Новый КвалификаторыСтроки(0);
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповС = Новый ОписаниеТипов(МассивТипов, , КС);
			Свойство.ТипЗначения = ОписаниеТиповС;	
			
		ИначеЕсли ПользовательскийТип = "url" тогда
			
			КС = Новый КвалификаторыСтроки(777);
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТиповС = Новый ОписаниеТипов(МассивТипов, , КС);
			Свойство.ТипЗначения = ОписаниеТиповС;	
			
		ИначеЕсли ПользовательскийТип = "boolean" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("Булево"));
			ОписаниеТиповБ = Новый ОписаниеТипов(МассивТипов);
			Свойство.ТипЗначения = ОписаниеТиповБ;	
			
		ИначеЕсли ПользовательскийТип = "integer" тогда
			
			КЧ = Новый КвалификаторыЧисла(12,0);
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧ  = Новый ОписаниеТипов(МассивТипов, , КЧ);
			Свойство.ТипЗначения = ОписаниеТиповЧ;	
			
		ИначеЕсли ПользовательскийТип = "double" тогда
			
			КЧ = Новый КвалификаторыЧисла(12,3);
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТиповЧ  = Новый ОписаниеТипов(МассивТипов, , КЧ);
			Свойство.ТипЗначения = ОписаниеТиповЧ;	
			
		ИначеЕсли ПользовательскийТип = "datetime" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , КД);
			Свойство.ТипЗначения = ОписаниеТиповД;	
			
		ИначеЕсли ПользовательскийТип = "date" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , КД);
			Свойство.ТипЗначения = ОписаниеТиповД;	
			
		ИначеЕсли ПользовательскийТип = "employee" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
			ОписаниеТиповП = Новый ОписаниеТипов(МассивТипов);
			Свойство.ТипЗначения = ОписаниеТиповП;	
			
		ИначеЕсли ПользовательскийТип = "enumeration" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
			ОписаниеТиповП = Новый ОписаниеТипов(МассивТипов);
			Свойство.ТипЗначения = ОписаниеТиповП;	
			Свойство.ДополнительныеЗначенияИспользуются = Истина;
		КонецЕсли;
#КонецОбласти
		КонецЕсли;	

		Попытка
			Свойство.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Свойство.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипОбъектаОбмена, Свойство.Ссылка, ИдЭлемента, ДополнительныйИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записано свойство объекта типа: "+ТипДляЛога+ " с наименованием: " + Наименование);
			
			Если ПользовательскийТип = "enumeration" тогда
				
#Область ЗаписьЗначенийСвойств
				ЗначенияСписка = ТекЭлемент.Получить("LIST");	
				
				Если ЗначениеЗаполнено(ЗначенияСписка) тогда
					
					Для Каждого ТекЗначениеСвойства из ЗначенияСписка Цикл
						
						ИдЗначенияСвойства 		= Формат(ТекЗначениеСвойства.Получить("ID"),"ЧГ=0");
						НаименованиеЗнСвойства	= Строка(ТекЗначениеСвойства.Получить("VALUE"));
						
#Область ПоискСозданиеЗначенияСвойства	
						ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств", ИдЗначенияСвойства);	
						
						Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) тогда
							Запрос = Новый Запрос;
							Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
							Запрос.УстановитьПараметр("Свойство", Свойство.Ссылка);
							Запрос.УстановитьПараметр("Наименование", НаименованиеЗнСвойства);
							Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
							|	ВремНаименованияЗначенийСвойств.Объект КАК Объект
							|ИЗ
							|	ВремНаименованияЗначенийСвойств КАК ВремНаименованияЗначенийСвойств
							|ГДЕ
							|	ВремНаименованияЗначенийСвойств.Свойство = &Свойство
							|	И ВремНаименованияЗначенийСвойств.Идентификатор = &Наименование";
							
							ВыборкаЗначенийСвойств = Запрос.Выполнить().Выбрать();
							
							Пока ВыборкаЗначенийСвойств.Следующий() Цикл
								ЗначениеСвойства = ВыборкаЗначенийСвойств.Объект; 
								Прервать
							КонецЦикла;
						КонецЕсли;
						
						Если ЗначениеСвойства = Неопределено тогда
							ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						Иначе
							ЗначениеСвойства = ЗначениеСвойства.ПолучитьОбъект();
						КонецЕсли;
#КонецОбласти
						
						ЗначениеСвойства.Владелец 			= ?(Свойство.ВладелецДополнительныхЗначений.Пустая(), Свойство.Ссылка,  Свойство.ВладелецДополнительныхЗначений);					
						ЗначениеСвойства.Наименование 		= НаименованиеЗнСвойства;					
						//ЗначениеСвойства.ПолноеНаименование = НаименованиеЗнСвойства;	
						
						ЗначениеСвойства.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
						ЗначениеСвойства.Записать();
						Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипЗначенияСвойств, ЗначениеСвойства.Ссылка, ИдЗначенияСвойства);
						
					КонецЦикла;
					
				КонецЕсли;
#КонецОбласти
				
			КонецЕсли;	
			
			Если ЭтоНовый И Наименование <> "Внешний URL" тогда
				
				НаборСвойств 	= Свойство.НаборСвойств;
				ТекНаборСвойств = НаборСвойств.ПолучитьОбъект();
				
				Если ЕстьДопРеквизиты тогда
					НовоеСвойствоНабора = ТекНаборСвойств.ДополнительныеРеквизиты.Добавить();
				Иначе
					НовоеСвойствоНабора = ТекНаборСвойств.ДополнительныеСведения.Добавить();
				КонецЕсли;
				
				НовоеСвойствоНабора.Свойство = Свойство.Ссылка;
				
				ТекНаборСвойств.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				ТекНаборСвойств.Записать();
				
			КонецЕсли;	
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи свойства объекта типа: "+ТипДляЛога+" с наименованием: " + Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
	
КонецФункции

Функция РазобратьПользовательскиеПоляВТаблицу(ОбщиеНастройки, ИнформацияООбъекте, МенеджерВременныхТаблиц)
	
	ЗапросПоСвойствам = Новый Запрос;
	ЗапросПоСвойствам.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПоСвойствам.Текст = "ВЫБРАТЬ *
	|ИЗ
	|	ВремСвойства КАК ВремСвойства";
	ТаблицаСвойств = ЗапросПоСвойствам.Выполнить().Выгрузить();
	
	мСвойстваИсключения = ОбщиеНастройки.ИсключающиеСвойства;
	
	тзнЗначенийСвойствТовара = новый ТаблицаЗначений;
	тзнЗначенийСвойствТовара.Колонки.Добавить("Свойство");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЗначениеСвойства");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ПоддерживаетсяСвойство");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЗначениеОчищено");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЭтоДополнительноеСведение");
	
	Для Каждого ТекСвойство Из ТаблицаСвойств Цикл
		
		Свойство = ТекСвойство.Объект;
		
		Если мСвойстваИсключения.Найти(Свойство) <> Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		НовоеЗначениеСвойстваТовара = тзнЗначенийСвойствТовара.Добавить();
		
		НовоеЗначениеСвойстваТовара.Свойство 					= Свойство;
		НовоеЗначениеСвойстваТовара.ПоддерживаетсяСвойство 		= Истина;
		НовоеЗначениеСвойстваТовара.ЗначениеОчищено 			= Ложь;
		НовоеЗначениеСвойстваТовара.ЭтоДополнительноеСведение 	= Свойство.ЭтоДополнительноеСведение;
		
		ЗначениеСвойстваСПортала = ИнформацияООбъекте.Получить(ТекСвойство.ДополнительныйИдентификатор);
		
		Если ЗначениеСвойстваСПортала <> Неопределено И ТипЗнч(ЗначениеСвойстваСПортала) <> Тип("Соответствие")  тогда
			
			ТипСвойстваСтрокой = Строка(Свойство.ТипЗначения);
			
			Если ТипСвойстваСтрокой = "Строка" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = ЗначениеСвойстваСПортала;
			ИначеЕсли ТипСвойстваСтрокой = "Булево" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Булево"), ЗначениеСвойстваСПортала);
			ИначеЕсли ТипСвойстваСтрокой = "Число" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ЗначениеСвойстваСПортала);
			ИначеЕсли ТипСвойстваСтрокой = "Дата" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), ЗначениеСвойстваСПортала);
				//ИначеЕсли ТипСвойстваСтрокой = "Пользователь" тогда
			ИначеЕсли ТипСвойстваСтрокой = "Пользователь" тогда
				
				НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти( ЗначениеСвойстваСПортала, "ИдПользователя");	
				
				Если НайденнаяСтрока <> Неопределено тогда
					НовоеЗначениеСвойстваТовара.ЗначениеСвойства = НайденнаяСтрока.Пользователь1С;
				КонецЕсли;
				
			ИначеЕсли ТипСвойстваСтрокой = "Дополнительное значение" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств",  ЗначениеСвойстваСПортала);
			Иначе
				НовоеЗначениеСвойстваТовара.ПоддерживаетсяСвойство = Ложь;	
			КонецЕсли;
			
		Иначе
			НовоеЗначениеСвойстваТовара.ЗначениеОчищено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзнЗначенийСвойствТовара;
	
КонецФункции

Процедура ЗаполнениеДополнительныеРеквизитыОбъектов(ОбщиеНастройки, ТаблицаСвойств, Объект, ЭтоНовыйОбъект)
	
	Если ТипЗнч(Объект)=Тип("СправочникОбъект.Партнеры") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляКомпанийИКонтактов") <> Истина тогда
		Возврат;
	ИначеЕсли ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказКлиента") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСделок") <> Истина тогда
		Возврат;
	ИначеЕсли ТипЗнч(Объект)=Тип("ДокументОбъект.СчетНаОплатуКлиенту") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСчетов") <> Истина тогда
		Возврат;
	Иначе
		Для Каждого ТекСвойство из ТаблицаСвойств Цикл
			
			Если НЕ ТекСвойство.ЭтоДополнительноеСведение И ТекСвойство.ПоддерживаетсяСвойство тогда   					
				Если ТекСвойство.ЗначениеОчищено ИЛИ НЕ ЗначениеЗаполнено(ТекСвойство.ЗначениеСвойства)тогда
					Если ЭтоНовыйОбъект тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого ЗаполненнеСвойствоТовара из Объект.ДополнительныеРеквизиты Цикл
						Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойство.Свойство тогда
							ЗаполненнеСвойствоТовара.Значение = Неопределено;
						КонецЕсли;
					КонецЦикла;
				Иначе
					
					ЕстьРеквизит = Ложь;
					Для Каждого ЗаполненнеСвойствоТовара из Объект.ДополнительныеРеквизиты Цикл
						Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойство.Свойство тогда
							ЗаполненнеСвойствоТовара.Значение = ТекСвойство.ЗначениеСвойства;
							Если ТипЗнч(ТекСвойство.ЗначениеСвойства) = Тип("Строка") тогда
								ЗаполненнеСвойствоТовара.ТекстоваяСтрока = ТекСвойство.ЗначениеСвойства;
							КонецЕсли;
							ЕстьРеквизит = Истина
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЕстьРеквизит тогда
						НовыйРеквизит = Объект.ДополнительныеРеквизиты.Добавить();
						НовыйРеквизит.Свойство 	= ТекСвойство.Свойство; 
						НовыйРеквизит.Значение 	= ТекСвойство.ЗначениеСвойства; 
						Если ТипЗнч(ТекСвойство.ЗначениеСвойства) = Тип("Строка") тогда
							НовыйРеквизит.ТекстоваяСтрока = ТекСвойство.ЗначениеСвойства;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеДополнительныеСведенияОбъектов(ОбщиеНастройки, ТаблицаСвойств, СсылкаНаОбъект, ЭтоНовыйОбъект)
	
	НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.Партнеры") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляКомпанийИКонтактов") <> Истина тогда
		Возврат;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.ЗаказКлиента") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСделок") <> Истина тогда
		Возврат;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.СчетНаОплатуКлиенту") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСчетов") <> Истина тогда
		Возврат;
	Иначе
		Для Каждого ТекСвойство из ТаблицаСвойств Цикл
			
			Если ТекСвойство.ЭтоДополнительноеСведение И ТекСвойство.ПоддерживаетсяСвойство тогда   					
				
				ЕстьСвойство = Ложь;
				Для Каждого ТекСтрока из НаборЗаписей Цикл
					Если ТекСтрока.Свойство = ТекСвойство.Свойство тогда
						ЕстьСвойство = Истина;
						ТекСтрока.Значение = ТекСвойство.ЗначениеСвойства;	
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьСвойство = Ложь тогда
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Объект = СсылкаНаОбъект;
					НоваяЗапись.Свойство = ТекСвойство.Свойство;
					НоваяЗапись.Значение = ТекСвойство.ЗначениеСвойства;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьКомпании(пОбщиеНастройки, ПодробныеДанные) Экспорт
	
	мДанных = ПодробныеДанные.ИнформацияОКомпаниях;
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ФормированиеВременныхТаблицДанных		
	мТипыКИ = новый Массив;
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"				, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхСвойств"		, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании);
	Запрос.УстановитьПараметр("ТипыКИ"					, мТипыКИ);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСвойств
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК КомпанияКонтакт,
	|	Партнеры.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(Партнеры.НаименованиеПолное КАК СТРОКА(100)) КАК НаименованиеПолное,
	|	ВремИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремКомпанииКонтакты
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторы КАК ВремИдентификаторы
	|		ПО Партнеры.Ссылка = ВремИдентификаторы.Объект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.Наименование,
	|	ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(100)),
	|	ВремИдентификаторы.Идентификатор
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторы КАК ВремИдентификаторы
	|		ПО Организации.Ссылка = ВремИдентификаторы.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК КомпанияКонтакт,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ПОМЕСТИТЬ ВремИННКомпанииКонтакты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК КомпанияКонтакт,
	|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
	|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
	|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
	|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ВремКИ
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ПО ПартнерыКонтактнаяИнформация.Ссылка = Б24_ИдентификаторыОбъектов.Объект
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И Б24_ИдентификаторыОбъектов.Идентификатор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Ссылка,
	|	ОрганизацииКонтактнаяИнформация.Тип,
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление,
	|	ОрганизацииКонтактнаяИнформация.АдресЭП,
	|	ОрганизацииКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ПО ОрганизацииКонтактнаяИнформация.Ссылка = Б24_ИдентификаторыОбъектов.Объект
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И Б24_ИдентификаторыОбъектов.Идентификатор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Представление";
	
	Запрос.Выполнить();
#КонецОбласти
	
	СтруктураИспКИ = Б24_СинхронизацияПовтИсп.ПолучитьСтруктуруВидовКИКонтрагентов();
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента = Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		
		ИНН = "";
		КПП = "";
		Для Каждого РеквизитКомпании из ПодробныеДанные.ИнформацияОРеквизитах Цикл
			Если Формат(РеквизитКомпании.Получить("ENTITY_ID"),"ЧГ=0") = ИдЭлемента тогда
				ИНН = РеквизитКомпании.Получить("RQ_IIN");
				//КПП = РеквизитКомпании.Получить("RQ_KPP");
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ВнешнийКод 			= ТекЭлемент.Получить("ORIGIN_ID"); 
		ЗаголовокКомпании 	= Строка(ТекЭлемент.Получить("TITLE"));
		ЭтоНашаКомпания 	= ТекЭлемент.Получить("IS_MY_COMPANY"); 
		
		Телефоны 	= ТекЭлемент.Получить("PHONE");
		Почта 		= ТекЭлемент.Получить("EMAIL");
		
#Область ПоискСозданиеКомпании
		
		Компания		 	= Неопределено;
		лПорядокИдентификации = ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ПорядокИдентификацииЮрЛиц;	
		
		Для Каждого ТекЗначение из лПорядокИдентификации Цикл
			
			Критерий = ТекЗначение.Значение;
			
			Компания = ПолучитьКомпаниюКонтактПоКритерию(ОбщиеНастройки, Критерий, МенеджерВременныхТаблиц, ТекЭлемент, ЗаголовокКомпании, Телефоны, Почта, ИНН, КПП);
			
			Если ЗначениеЗаполнено(Компания) или  Компания = Неопределено тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Компания = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(Компания) тогда
			Компания = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.Партнеры"), ВнешнийКод);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Компания) тогда
			Если НЕ ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что партнеры не обновляются. Партнер: " + ЗаголовокКомпании + " не будет обновлен.");
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Компания, Компания.Ссылка, ИдЭлемента);
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Продолжить;
				
			Иначе
				Компания 	= Компания.ПолучитьОбъект();
				
				Если ТипЗнч(Компания) = Тип("СправочникОбъект.Организации") тогда
					ЭтоНашаКомпания = "Y";	
				Иначе
					ЭтоНашаКомпания = "N";	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЭтоНашаКомпания = "N" тогда 
				
				Компания 				= Справочники.Партнеры.СоздатьЭлемент();
				
				Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Количество() > 0 тогда
					Компания.ЮрФизЛицо	= ОбщиеНастройки.ТипыКонтрагентовДляКомпаний[0];
				Иначе
					Компания.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.Компания;
				КонецЕсли;
				
				Компания.Клиент 	= Истина;
				
			Иначе
				Компания 							= Справочники.Организации.СоздатьЭлемент();
				Компания.ЮрФизЛицо 					= Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				Компания.ЮридическоеФизическоеЛицо 	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				Компания.НаименованиеСокращенное	= ЗаголовокКомпании;			
			КонецЕсли;
			
		КонецЕсли;	
#КонецОбласти
		
		Компания.Наименование 				= ЗаголовокКомпании;
		Компания.НаименованиеПолное 		= ЗаголовокКомпании;
		
		
		Если ЭтоНашаКомпания = "N" тогда
			Компания.Комментарий	= ТекЭлемент.Получить("COMMENTS");
		Иначе
			Компания.НаименованиеСокращенное	= ЗаголовокКомпании;			
		КонецЕсли;
		
		ЗаполнениеТелефонаИЕмейлКонтрагента(ОбщиеНастройки, СтруктураИспКИ, Компания, Телефоны, Почта);
		
		Если ЭтоНашаКомпания = "N" тогда 
			
			ИдСотрудника 	= Формат(ТекЭлемент.Получить("ASSIGNED_BY_ID"),"ЧГ=0");
			
			Если ЗначениеЗаполнено(ИдСотрудника) тогда
				
				НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти(ИдСотрудника, "ИдПользователя");
				
				Если НайденнаяСтрока <> Неопределено тогда
					Компания.ОсновнойМенеджер = НайденнаяСтрока.Пользователь1С; 					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ЭтоНовыйОбъект = Компания.Ссылка.Пустая()=Истина;
		ТаблицаСвойств = РазобратьПользовательскиеПоляВТаблицу(ОбщиеНастройки, ТекЭлемент, МенеджерВременныхТаблиц);
		ЗаполнениеДополнительныеРеквизитыОбъектов(ОбщиеНастройки, ТаблицаСвойств, Компания, ЭтоНовыйОбъект);			
		
		Попытка
			
			Компания.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Компания.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Компания, Компания.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан партнер: " + ЗаголовокКомпании);
			
			Если ЭтоНашаКомпания = "N" тогда
				ЗаполнениеДополнительныеСведенияОбъектов(ОбщиеНастройки, ТаблицаСвойств, Компания.Ссылка, ЭтоНовыйОбъект);			
			КонецЕсли;
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи партнера: " + ЗаголовокКомпании + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьОбновитьКонтакты(пОбщиеНастройки, ПодробныеДанные) Экспорт
	
	мДанных = ПодробныеДанные.ИнформацияОКонтактах;
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
#Область ФормированиеВременныхТаблицДанных		
	мТипыКИ = новый Массив;
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"				, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхКомпания"		, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхСвойств"		, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта);
	Запрос.УстановитьПараметр("ТипыКИ"					, мТипыКИ);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпаний
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпания
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСвойств
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК КомпанияКонтакт,
	|	Партнеры.Наименование КАК Наименование,
	|	Партнеры.НаименованиеПолное КАК НаименованиеПолное,
	|	ВремИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремКомпанииКонтакты
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторы КАК ВремИдентификаторы
	|		ПО Партнеры.Ссылка = ВремИдентификаторы.Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Ссылка,
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.Наименование,
	|	ВремИдентификаторы.Идентификатор
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторы КАК ВремИдентификаторы
	|		ПО КонтактныеЛицаПартнеров.Ссылка = ВремИдентификаторы.Объект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Ссылка КАК КомпанияКонтакт,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ПОМЕСТИТЬ ВремИННКомпанииКонтакты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК КомпанияКонтакт,
	|	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
	|	ПартнерыКонтактнаяИнформация.Вид КАК Вид,
	|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
	|	ПартнерыКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ВремКИ
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ПО ПартнерыКонтактнаяИнформация.Ссылка = Б24_ИдентификаторыОбъектов.Объект
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И Б24_ИдентификаторыОбъектов.Идентификатор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ПО КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = Б24_ИдентификаторыОбъектов.Объект
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип В(&ТипыКИ)
	|	И Б24_ИдентификаторыОбъектов.Идентификатор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Представление";
	
	Запрос.Выполнить();
#КонецОбласти	
	
	СтруктураИспКИ = Б24_СинхронизацияПовтИсп.ПолучитьСтруктуруВидовКИКонтрагентов();
	
	ЗагруженныеОбъекты = Новый Массив;	
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента 			= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		ЭтоКонтактноеЛицо 	= Ложь;
		
		ИНН = "";
		КПП = "";
		Для Каждого РеквизитКомпании из ПодробныеДанные.ИнформацияОРеквизитах Цикл
			Если Формат(РеквизитКомпании.Получить("ENTITY_ID"),"ЧГ=0") = ИдЭлемента тогда
				ИНН = РеквизитКомпании.Получить("RQ_IIN");
				//КПП = РеквизитКомпании.Получить("RQ_KPP");
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ВнешнийКод 	= ТекЭлемент.Получить("ORIGIN_ID"); 
		Имя 		= Строка(ТекЭлемент.Получить("NAME"));
		Фамилия 	= Строка(ТекЭлемент.Получить("LAST_NAME"));
		Отчество 	= Строка(ТекЭлемент.Получить("SECOND_NAME"));
		
		ИдКомпании 	= ТекЭлемент.Получить("COMPANY_ID"); 
		
		Телефоны 	= ТекЭлемент.Получить("PHONE");
		Почта 		= ТекЭлемент.Получить("EMAIL");
		
		НаименованиеКонтрагента = Фамилия + " " + Имя + " " + Отчество; 
		
		Если ЗначениеЗаполнено(ИдКомпании) И НЕ Строка(ИдКомпании) = "0" тогда
			ЭтоКонтактноеЛицо = Истина;
			Компания = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКомпаний", ИдКомпании);	
			
			Если НЕ ЗначениеЗаполнено(Компания) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "У контакта: " + НаименованиеКонтрагента + " не найдена компания по ИД "+ИдКомпании+". Такие контакты не обрабатываются.");
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Продолжить;
			КонецЕсли;
		КонецЕсли;			
		
#Область ПоискСозданиеКонтакта
		Контакт = Неопределено;
		
		лПорядокИдентификации = ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ПорядокИдентификацииФизЛиц;	
		
		Для Каждого ТекЗначение из лПорядокИдентификации Цикл
			Критерий = ТекЗначение.Значение;
			
			Контакт = ПолучитьКомпаниюКонтактПоКритерию(ОбщиеНастройки, Критерий, МенеджерВременныхТаблиц, ТекЭлемент, НаименованиеКонтрагента, Телефоны, Почта, ИНН, КПП);
			
			Если ЗначениеЗаполнено(Контакт) или  Контакт = Неопределено тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Контакт = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(Контакт) тогда
			Если НЕ ЭтоКонтактноеЛицо тогда
				Контакт = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.Партнеры"), ВнешнийКод);
			Иначе
				Контакт = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), ВнешнийКод);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакт) тогда
			
			Если (ЭтоКонтактноеЛицо и ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры"))
				ИЛИ (НЕ ЭтоКонтактноеЛицо и ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) тогда
				
				ОписаниеОшибки = "Контакту '" + НаименованиеКонтрагента + "', который в 1С контрагент, назначили покупателя. Такие контакты в 1С не загружаются, т.к. будет дубль в контактных лицах. Или наоборт, контактному лицу убрали покупателя. Или по указанным критериям поичска(телефон/емейл) был найден партнер, а не контактное лицо партнера(например создан и компания и контакт по лиду).";
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки);
				
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов тогда
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что контакты не обновляются. Контакт: " + НаименованиеКонтрагента + " не будет обновлен.");
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт, Контакт.Ссылка, ИдЭлемента);
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Продолжить;
				
			Иначе
				Контакт 	= Контакт.ПолучитьОбъект();
			КонецЕсли;
			
		Иначе
			
			Если НЕ ЭтоКонтактноеЛицо тогда
				
				Контакт 				= Справочники.Партнеры.СоздатьЭлемент();
				
				Если ОбщиеНастройки.ТипыКонтрагентовДляКонтактов.Количество() > 0 тогда
					Контакт.ЮрФизЛицо	= ОбщиеНастройки.ТипыКонтрагентовДляКонтактов[0];
				Иначе
					Контакт.ЮрФизЛицо	= Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
				КонецЕсли;
				
			Иначе
				Контакт = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			КонецЕсли;
			
		КонецЕсли;	
#КонецОбласти
		
		Контакт.Наименование			= СокрЛП(НаименованиеКонтрагента);
		
		Контакт.Комментарий				= ТекЭлемент.Получить("COMMENTS");
		
		ЗаполнениеТелефонаИЕмейлКонтрагента(ОбщиеНастройки, СтруктураИспКИ, Контакт, Телефоны, Почта);
		
		ИдСотрудника 	= Формат(ТекЭлемент.Получить("ASSIGNED_BY_ID"),"ЧГ=0");
		
		Если ЗначениеЗаполнено(ИдСотрудника) тогда
			
			НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти(ИдСотрудника, "ИдПользователя");
			
			Если НайденнаяСтрока <> Неопределено тогда
				ОсновнойМенеджер = НайденнаяСтрока.Пользователь1С; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоКонтактноеЛицо тогда
			Контакт.Владелец 	= Компания;	
			Контакт.Автор 		= ОсновнойМенеджер; 	
		Иначе
			Контакт.ОсновнойМенеджер = ОсновнойМенеджер; 
			Контакт.НаименованиеПолное		= НаименованиеКонтрагента;
			
			Контакт.Клиент 					= Истина;
		КонецЕсли;
		
		ЭтоНовыйОбъект = Контакт.Ссылка.Пустая()=Истина;
		ТаблицаСвойств = РазобратьПользовательскиеПоляВТаблицу(ОбщиеНастройки, ТекЭлемент, МенеджерВременныхТаблиц);
		ЗаполнениеДополнительныеРеквизитыОбъектов(ОбщиеНастройки, ТаблицаСвойств, Контакт, ЭтоНовыйОбъект);			
		
		Попытка
			
			Контакт.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			
			Контакт.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт, Контакт.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан контрагент: " + НаименованиеКонтрагента);
			
			ЗаполнениеДополнительныеСведенияОбъектов(ОбщиеНастройки, ТаблицаСвойств, Контакт.Ссылка, ЭтоНовыйОбъект);			
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи контрагента: " + НаименованиеКонтрагента + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнениеТелефонаИЕмейлКонтрагента(ОбщиеНастройки, СтруктураИспКИ, КомпанияКонтакт, Телефоны, Почта)
	
	ТзнВрем = КомпанияКонтакт.КонтактнаяИнформация.ВыгрузитьКолонки();
	
	Если ТипЗнч(КомпанияКонтакт) = Тип("СправочникОбъект.Партнеры") тогда
		ТелефонРабочий 		= СтруктураИспКИ.ТелефонРабочий; 	
		ТелефонМобильный 	= СтруктураИспКИ.ТелефонМобильный; 	
		ТелефонДомашний 	= СтруктураИспКИ.ТелефонДомашний; 
		
		ПочтаРабочий 		= СтруктураИспКИ.ПочтаРабочий; 	
		ПочтаЧастная 		= СтруктураИспКИ.ПочтаЧастная; 	
	ИначеЕсли ТипЗнч(КомпанияКонтакт) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров") тогда
		ТелефонРабочий 		= СтруктураИспКИ.ТелефонРабочийКонЛица; 	
		ТелефонМобильный 	= СтруктураИспКИ.ТелефонМобильныйКонЛица; 	
		ТелефонДомашний 	= СтруктураИспКИ.ТелефонДомашнийКонЛица; 
		
		ПочтаРабочий 		= СтруктураИспКИ.ПочтаРабочийКонЛица; 	
		ПочтаЧастная 		= СтруктураИспКИ.ПочтаЧастнаяКонЛица; 	
	Иначе	
		ТелефонРабочий 		= СтруктураИспКИ.ТелефонРабочийОрг; 	
		ТелефонМобильный 	= СтруктураИспКИ.ТелефонМобильныйОрг; 	
		ТелефонДомашний 	= СтруктураИспКИ.ТелефонДомашнийОрг; 
		
		ПочтаРабочий 		= СтруктураИспКИ.ПочтаРабочийОрг; 	
		ПочтаЧастная 		= СтруктураИспКИ.ПочтаЧастнаяОрг; 	
	КонецЕсли;
	
	
	Для Каждого ТекСтрока из КомпанияКонтакт.КонтактнаяИнформация Цикл
		
		Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И (ТекСтрока.Вид = ТелефонРабочий ИЛИ ТекСтрока.Вид = ТелефонМобильный ИЛИ ТекСтрока.Вид = ТелефонДомашний) тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТекСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И (ТекСтрока.Вид = ПочтаРабочий ИЛИ ТекСтрока.Вид = ПочтаЧастная) тогда
			Продолжить;	
		КонецЕсли;
		
		НовСтрока = ТзнВрем.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока); 
		
	КонецЦикла;
	
	КомпанияКонтакт.КонтактнаяИнформация.Очистить();
	КомпанияКонтакт.КонтактнаяИнформация.Загрузить(ТзнВрем);
	
	Если Телефоны <> Неопределено тогда
		
		Для Каждого ТекТелефон из Телефоны Цикл
			
			НомерТелефона = ТекТелефон.Получить("VALUE");
			
			Если Не ЗначениеЗаполнено(НомерТелефона) тогда
				Продолжить;					
			КонецЕсли;
			
			ВидТелефона = ТекТелефон.Получить("VALUE_TYPE");
			
			Если ВидТелефона = "WORK" тогда
				
				НовыйКонтакт = КомпанияКонтакт.КонтактнаяИнформация.Добавить(); 
				
				НовыйКонтакт.Вид = ТелефонРабочий;
				НовыйКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НовыйКонтакт.Представление 			= НомерТелефона; 
				НовыйКонтакт.НомерТелефона 			= НомерТелефона;
				НовыйКонтакт.НомерТелефонаБезКодов 	= НомерТелефона;
				НовыйКонтакт.ЗначенияПолей 			= ПолучитьЗначениеПолейТелефонаИПочты("Телефон", НомерТелефона)
			ИначеЕсли ВидТелефона = "MOBILE" тогда 
				
				НовыйКонтакт = КомпанияКонтакт.КонтактнаяИнформация.Добавить(); 
				
				НовыйКонтакт.Вид = ТелефонМобильный;
				НовыйКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НовыйКонтакт.Представление 			= НомерТелефона; 
				НовыйКонтакт.НомерТелефона 			= НомерТелефона;
				НовыйКонтакт.НомерТелефонаБезКодов 	= НомерТелефона;
				НовыйКонтакт.ЗначенияПолей 			= ПолучитьЗначениеПолейТелефонаИПочты("Телефон", НомерТелефона)
			ИначеЕсли ВидТелефона = "HOME" тогда 
				
				НовыйКонтакт = КомпанияКонтакт.КонтактнаяИнформация.Добавить(); 
				
				НовыйКонтакт.Вид = ТелефонДомашний;
				НовыйКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НовыйКонтакт.Представление 			= НомерТелефона; 
				НовыйКонтакт.НомерТелефона 			= НомерТелефона;
				НовыйКонтакт.НомерТелефонаБезКодов 	= НомерТелефона;
				НовыйКонтакт.ЗначенияПолей 			= ПолучитьЗначениеПолейТелефонаИПочты("Телефон", НомерТелефона)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Почта <> Неопределено тогда
		
		Для Каждого ТекПочта из Почта Цикл
			
			АдресПочты = ТекПочта.Получить("VALUE");
			
			Если Не ЗначениеЗаполнено(АдресПочты) тогда
				Продолжить;					
			КонецЕсли;
			
			ВидПочты = ТекПочта.Получить("VALUE_TYPE");
			
			Если ВидПочты = "WORK" тогда
				
				НовыйКонтакт = КомпанияКонтакт.КонтактнаяИнформация.Добавить(); 
				
				НовыйКонтакт.Вид = ПочтаРабочий;
				НовыйКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НовыйКонтакт.Представление 			= АдресПочты; 
				НовыйКонтакт.АдресЭП 				= АдресПочты;
				НовыйКонтакт.ЗначенияПолей 			= ПолучитьЗначениеПолейТелефонаИПочты("ЭПочта", АдресПочты)
			ИначеЕсли ВидПочты = "HOME" тогда 
				
				НовыйКонтакт = КомпанияКонтакт.КонтактнаяИнформация.Добавить(); 
				
				НовыйКонтакт.Вид = ПочтаЧастная;
				НовыйКонтакт.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НовыйКонтакт.Представление 			= АдресПочты; 
				НовыйКонтакт.АдресЭП 				= АдресПочты;
				НовыйКонтакт.ЗначенияПолей 			= ПолучитьЗначениеПолейТелефонаИПочты("ЭПочта", АдресПочты)
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЗначениеПолейТелефонаИПочты(ТипКИ, ЗначениеКИ)
	
	ЗаписьXML = новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("КонтактнаяИнформация");
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns", XMLСтрока("http://www.v8.1c.ru/ssl/contactinfo"));
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xs", XMLСтрока("http://www.w3.org/2001/XMLSchema"));
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", XMLСтрока("http://www.w3.org/2001/XMLSchema-instance"));
	ЗаписьXML.ЗаписатьАтрибут("Представление", XMLСтрока(ЗначениеКИ));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Состав");
	
	Если ТипКИ = "Телефон" тогда
		ЗаписьXML.ЗаписатьАтрибут("xsi:type"	, "НомерТелефона");
		ЗаписьXML.ЗаписатьАтрибут("КодСтраны"	, "");
		ЗаписьXML.ЗаписатьАтрибут("КодГорода"	, "");
		ЗаписьXML.ЗаписатьАтрибут("Номер"		, XMLСтрока(ЗначениеКИ));
		ЗаписьXML.ЗаписатьАтрибут("Добавочный"	, "");
	ИначеЕсли ТипКИ = "ЭПочта" тогда
		ЗаписьXML.ЗаписатьАтрибут("xsi:type"	, "ЭлектроннаяПочта");
		ЗаписьXML.ЗаписатьАтрибут("Значение"	, XMLСтрока(ЗначениеКИ));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьРеквизиты(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	мТипыКИ = новый Массив;
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"			, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	Запрос.УстановитьПараметр("ТипДанныхКомпаний"	, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтактов"	, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	Запрос.УстановитьПараметр("Портал"				, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВремИдентификаторыВладельца
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И (Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпаний
	|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтактов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипДанных";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		НовыйРеквизит 	= Ложь;
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		ИдВладельца 	= Формат(ТекЭлемент.Получить("ENTITY_ID"),"ЧГ=0");
		ВнешнийКод 		= ТекЭлемент.Получить("XML_ID"); 
		Фамилия 		= Строка(ТекЭлемент.Получить("RQ_LAST_NAME")); 
		Имя 			= Строка(ТекЭлемент.Получить("RQ_FIRST_NAME")); 
		Отчество 		= Строка(ТекЭлемент.Получить("RQ_SECOND_NAME")); 
		ФИО				= Фамилия + " " + Имя + " " + Отчество; 
		
		Если ЗагруженныеОбъекты.Найти(ИдВладельца + "_" + ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдВладельца + "_" + ИдЭлемента);
		
		ТипРеквизита 	= Строка(ТекЭлемент.Получить("ENTITY_TYPE_ID"));
		
		Если ТипРеквизита = "3" тогда     
			НаименованиеПолное	= ФИО;
			НаименованиеПолное	= ?(ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, Строка(ТекЭлемент.Получить("RQ_NAME")));
		Иначе
			Наименование 		= Строка(ТекЭлемент.Получить("RQ_COMPANY_NAME"));
			Наименование		= ?(ЗначениеЗаполнено(Наименование), Наименование, ФИО);
			
			НаименованиеПолное 	= Строка(ТекЭлемент.Получить("RQ_COMPANY_FULL_NAME"));
			НаименованиеПолное	= ?(ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, Наименование);
			
		КонецЕсли;
		
		Если НЕ (ТипРеквизита = "4" ИЛИ ТипРеквизита = "3") тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		Активный 				= ТекЭлемент.Получить("ACTIVE") = "Y";
		ИНН 					= Строка(ТекЭлемент.Получить("RQ_IIN"));
		КодПоОКПО				= Строка(ТекЭлемент.Получить("RQ_OKPO"));
		КПП 					= Строка(ТекЭлемент.Получить("RQ_KPP"));
		
		//СтранаРегистрации		= Справочники.СтраныМира.НайтиПоНаименованию(ТекЭлемент.Получить("RQ_RESIDENCE_COUNTRY"), Истина);
		
		СвидетельствоСерияНомер	= Строка(ТекЭлемент.Получить("RQ_IDENT_DOC_SER")) + " " + Строка(ТекЭлемент.Получить("RQ_IDENT_DOC_NUM"));
		
		ДУЛ 	= Строка(ТекЭлемент.Получить("RQ_IDENT_DOC"));
		СД 		= ПолучитьДатуИзСтрокиJSON(Строка(ТекЭлемент.Получить("RQ_IDENT_DOC_DATE")));
		
		ОГРН 	= Строка(ТекЭлемент.Получить("RQ_OGRN"));
		ОГРН	= ?(ЗначениеЗаполнено(ОГРН), ОГРН, Строка(ТекЭлемент.Получить("RQ_OGRNIP")));
		
#Область ПоискСозданиеРеквизита
		Реквизит = Неопределено;
		
		Реквизит = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(Реквизит) тогда
			Реквизит = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.Контрагенты"), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Реквизит) тогда
			
			НовыйРеквизит = Истина;
			
			ВладелецРеквизита = Неопределено;	
			
			Запрос = новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Идентификатор", ИдВладельца);
			
			Если ТипРеквизита = "3" тогда     
				Запрос.УстановитьПараметр("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
			Иначе
				Запрос.УстановитьПараметр("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
			КонецЕсли;
			
			Запрос.Текст = "ВЫБРАТЬ
			|	ВремИдентификаторы.Объект КАК Объект
			|ИЗ
			|	ВремИдентификаторыВладельца КАК ВремИдентификаторы
			|ГДЕ
			|	ВремИдентификаторы.Идентификатор = &Идентификатор
			|   И ВремИдентификаторы.ТипДанных = &ТипДанных";
			
			ВыполненныйЗапрос = Запрос.Выполнить();
			
			Если НЕ ВыполненныйЗапрос.Пустой() тогда
				Выборка = ВыполненныйЗапрос.Выбрать();
				Пока Выборка.Следующий() Цикл
					ВладелецРеквизита = Выборка.Объект;
					Прервать;
				КонецЦикла;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВладелецРеквизита) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не удалось найти Компанию/Контакт для создаваяемого реквизита: " + Наименование + ". Будет пропущен.");
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
				Продолжить;
			Иначе
				
				Если ТипЗнч(ВладелецРеквизита) <> Тип("СправочникСсылка.Организации") Тогда
					
					Реквизит = Справочники.Контрагенты.СоздатьЭлемент();
					Реквизит.Партнер = ВладелецРеквизита; 
				Иначе
					Реквизит = ВладелецРеквизита.ПолучитьОбъект(); 	
				КонецЕсли;
			КонецЕсли;
		Иначе
			Реквизит = Реквизит.ПолучитьОбъект();
		КонецЕсли;
#КонецОбласти
		
		ЭтоОрганизация 	= ТипЗнч(Реквизит) = Тип("СправочникОбъект.Организации"); 
		ЭтоКонтакт		= ТипЗнч(Реквизит) = Тип("СправочникОбъект.КонтактныеЛицаПартнеров"); 
		
		Если ЭтоКонтакт тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Для контатного лица: " + Наименование + ". Не записывается реквизит.");
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		Если НовыйРеквизит тогда
			НайденнаяСтрока = ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.Пресеты.Найти(ТекЭлемент.Получить("PRESET_ID"), "ИдШаблона");
			
			Если НайденнаяСтрока <> Неопределено тогда
				
				Реквизит.ЮрФизЛицо	= НайденнаяСтрока.ТипКонтрагента;
				
				Если НайденнаяСтрока.ТипКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицо ИЛИ НайденнаяСтрока.ТипКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент тогда
					Реквизит.ЮридическоеФизическоеЛицо	= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				Иначе
					Реквизит.ЮридическоеФизическоеЛицо	= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				КонецЕсли;
				
			Иначе
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не удалось определить шаблон Битрикс24 для реквизита: " + Наименование + ". Будет пропущен. Их нужно перезаполнить настройках");
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОбновлятьРеквизиты = ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов;
		
		Если ОбновлятьРеквизиты тогда
			
			Если НЕ ЭтоОрганизация тогда
				Реквизит.Наименование 		= Наименование;
			КонецЕсли;
			
			Реквизит.НаименованиеПолное 	= НаименованиеПолное;	
			Реквизит.ПометкаУдаления 		= НЕ Активный;	
			Реквизит.ИНН 					= ИНН;	
			Реквизит.КПП 					= КПП;	
			Реквизит.КодПоОКПО 				= КодПоОКПО;	
			
			Если НЕ ЭтоОрганизация тогда
				Реквизит.РегистрационныйНомер = ОГРН;
			Иначе
				Если СД = Неопределено тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не удалось разобрать дату выдачи свидетельства. Контрагент: " + Наименование);
				Иначе
					Реквизит.СвидетельствоДатаВыдачи = СД;	
				КонецЕсли;
				Реквизит.ОГРН = ОГРН;
				Реквизит.СвидетельствоСерияНомер = СвидетельствоСерияНомер;	
			КонецЕсли;
			
		Иначе
			
			Реквизит.ПометкаУдаления 	= НЕ Активный;	
			Реквизит.ИНН = ?(ЗначениеЗаполнено(Реквизит.ИНН), Реквизит.ИНН, ИНН);
			Реквизит.КПП = ?(ЗначениеЗаполнено(Реквизит.КПП), Реквизит.КПП, КПП);
			Реквизит.КодПоОКПО = ?(ЗначениеЗаполнено(Реквизит.КодПоОКПО), Реквизит.КодПоОКПО, КодПоОКПО);
			//Реквизит.СтранаРегистрации = ?(ЗначениеЗаполнено(Реквизит.СтранаРегистрации), Реквизит.ИНН, СтранаРегистрации);
			
			Если НЕ ЭтоОрганизация тогда
				Реквизит.Наименование = ?(ЗначениеЗаполнено(Реквизит.Наименование), Реквизит.Наименование, Наименование);
			КонецЕсли;
			
			Реквизит.НаименованиеПолное = ?(ЗначениеЗаполнено(Реквизит.НаименованиеПолное), Реквизит.НаименованиеПолное, НаименованиеПолное);
			
			Если НЕ ЭтоОрганизация тогда
				Реквизит.РегистрационныйНомер = ?(ЗначениеЗаполнено(Реквизит.РегистрационныйНомер), Реквизит.РегистрационныйНомер, ОГРН);
			Иначе
				Реквизит.ОГРН = ?(ЗначениеЗаполнено(Реквизит.ОГРН), Реквизит.ОГРН, ОГРН);
				Реквизит.СвидетельствоСерияНомер = ?(ЗначениеЗаполнено(Реквизит.СвидетельствоСерияНомер), Реквизит.СвидетельствоСерияНомер, СвидетельствоСерияНомер);
				Реквизит.СвидетельствоДатаВыдачи = ?(ЗначениеЗаполнено(Реквизит.СвидетельствоДатаВыдачи), Реквизит.СвидетельствоДатаВыдачи, СД);
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Реквизит.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Реквизит.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит, Реквизит.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записаны реквизиты контрагента: " + Наименование);
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи реквизитов контрагента: " + Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьАдресаРеквизитов(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	Запрос.УстановитьПараметр("Портал"	, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ТипВладельца 	= Формат(ТекЭлемент.Получить("ENTITY_TYPE_ID"),"ЧГ=0"); 		
		ИдВладельца 	= Формат(ТекЭлемент.Получить("ENTITY_ID"),"ЧГ=0");
		ТипАдреса		= ТекЭлемент.Получить("TYPE_ID");
		ИдВозврата 		= ТипВладельца + "_" +  ИдВладельца;
		Страна 			= Строка(ТекЭлемент.Получить("COUNTRY"));
		Регион 			= Строка(ТекЭлемент.Получить("PROVINCE"));
		Район 			= Строка(ТекЭлемент.Получить("REGION"));
		Индекс 			= Строка(ТекЭлемент.Получить("POSTAL_CODE"));
		ГородНП 		= Строка(ТекЭлемент.Получить("CITY"));
		Адрес1 			= Строка(ТекЭлемент.Получить("ADDRESS_1"));
		Адрес2 			= Строка(ТекЭлемент.Получить("ADDRESS_2"));
		
		Если ТипВладельца <> "8" тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Истина)));
			Продолжить;
		КонецЕсли;
		
#Область ПоискРеквизита
		КомпанияКонтакт = Неопределено;
		
		КомпанияКонтакт = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдВладельца);	
		
		Если КомпанияКонтакт = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Ложь)));
			Продолжить;
		ИначеЕсли КомпанияКонтакт = Справочники.Контрагенты.ПустаяСсылка() тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Для заполнения адреса реквизита не найден реквизит с ид: " + ИдВладельца + ". Вид адреса: " + ТипАдреса +"Будет пропущен.");
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Ложь)));
			Продолжить;
		КонецЕсли;	
		
		ОбновлятьРеквизиты = ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов;
		
		ЭтоОрганизация = ТипЗнч(КомпанияКонтакт) = Тип("СправочникСсылка.Организации"); 
		
		Если Строка(ТипАдреса) = "1" тогда
			ВидКИ = ?(ЭтоОрганизация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита;
		Иначе
			ВидКИ = ?(ЭтоОрганизация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			ТипОбъектаОбмена = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита;
		КонецЕсли;
		
		КомпанияКонтакт 	= КомпанияКонтакт.ПолучитьОбъект();
#КонецОбласти
		
		Страна	= ?(ЗначениеЗаполнено(Страна), Врег(Страна), Б24_ОбщегоНазначенияСервер.ПолучитьНазваниеСтраны()); 
		
		СтруктураДанных = ПолучитьСтруктуруСПолямиКИ(Страна, Регион, Район, Индекс, ГородНП, Адрес1, Адрес2);
		
		НайденнаяСтрока = КомпанияКонтакт.КонтактнаяИнформация.Найти(ВидКИ, "Вид"); 
		
		Если НайденнаяСтрока = Неопределено тогда
			
			НовыйКИ =  КомпанияКонтакт.КонтактнаяИнформация.Добавить();
			НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НовыйКИ.Вид = ВидКИ;
			
			НовыйКИ.Страна 			= СтруктураДанных.Страна;
			НовыйКИ.Регион 			= СтруктураДанных.Регион;
			НовыйКИ.Город 			= СтруктураДанных.Город;
			НовыйКИ.Представление 	= СтруктураДанных.Представление;
			НовыйКИ.ЗначенияПолей	= ПолучитьЗначениеПолейАдреса(СтруктураДанных);
			
		Иначе
			Если НЕ ОбновлятьРеквизиты И ЗначениеЗаполнено(НайденнаяСтрока.Представление) тогда
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Истина)));
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипОбъектаОбмена, КомпанияКонтакт.Ссылка, ИдВладельца);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что контрагенты не обновляются. У контрагента : " + КомпанияКонтакт.Наименование + " не будет обновлен " + ВидКИ.Наименование);
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока.Страна 			= СтруктураДанных.Страна;
			НайденнаяСтрока.Регион 			= СтруктураДанных.Регион;
			НайденнаяСтрока.Город 			= СтруктураДанных.Город;
			
			//Если НайденнаяСтрока.Представление 	<> СтруктураДанных.Представление тогда
			//	НайденнаяСтрока.Значение = "";
			//КонецЕсли;
			
			НайденнаяСтрока.Представление 	= СтруктураДанных.Представление;
			
			НайденнаяСтрока.ЗначенияПолей 	= ПолучитьЗначениеПолейАдреса(СтруктураДанных);	
			
		КонецЕсли;
		
		Попытка
			КомпанияКонтакт.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			КомпанияКонтакт.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипОбъектаОбмена, КомпанияКонтакт.Ссылка, ИдВладельца);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записаны адреса контрагента: " + КомпанияКонтакт.Наименование);
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи адреса реквизита : " + КомпанияКонтакт.Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдВозврата, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруСПолямиКИ(Страна, Регион, Район, Индекс, ГородНП, Адрес1, Адрес2)
	
	СтруктураДанных =  новый Структура;
	СтруктураДанных.Вставить("Страна"		,Страна);
	СтруктураДанных.Вставить("Регион"		, Регион);
	СтруктураДанных.Вставить("Район"		, Район);
	СтруктураДанных.Вставить("ПИндекс"		, Индекс);
	
	Если Врег(СокрЛп(Страна)) <> Б24_ОбщегоНазначенияСервер.ПолучитьНазваниеСтраны() тогда
		
		СтруктураДанных.Вставить("Город"		, "");
		СтруктураДанных.Вставить("Представление", Адрес1);
		
		Возврат СтруктураДанных;
		
	КонецЕсли;
	
	Город 		= "";
	НасПункт 	= "";
	Улица 		= "";
	Дом 		= "";
	Корпус 		= "";
	Участок 	= "";
	Сооружение 	= "";
	Строение 	= "";
	Литера		= "";
	
	Квартира	= "";
	Офис		= "";
	Бокс		= "";
	Помещение	= "";
	Этаж		= "";
	АЯ			= "";
	ПОП			= "";
	ВЧ			= "";
	Другое		= "";
	Комната		= "";
	
	ГородНПМассив = СтрРазделить(ГородНП, ",");
	
	Если ГородНПМассив.Количество()>0 тогда
		Город = СокрЛП(ГородНПМассив[0]);
	КонецЕсли;
	
	Если ГородНПМассив.Количество()>1 тогда
		НасПункт = СокрЛП(СтрЗаменить(ГородНПМассив[1], "нас. пункт", ""));
	КонецЕсли;
	
	Адрес1Массив = СтрРазделить(Адрес1, ","); 
	
	Для каждого Элемент из Адрес1Массив Цикл
		
		Если СтрНайти(Элемент, "улица ")> 0 тогда
			Улица = СокрЛП(СтрЗаменить(Элемент, "улица", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Улица ")> 0 тогда
			Улица = СокрЛП(СтрЗаменить(Элемент, "Улица", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "УЛИЦА ")> 0 тогда
			Улица = СокрЛП(СтрЗаменить(Элемент, "УЛИЦА", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "УЛ. ")> 0 тогда
			Улица = СокрЛП(СтрЗаменить(Элемент, "УЛ.", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "БУЛЬВАР ")> 0 тогда
			Улица = СокрЛП(Элемент);	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ПЛОЩАДЬ ")> 0 тогда
			Улица = СокрЛП(Элемент);	
			Продолжить;
		КонецЕсли;
		
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "дом ")> 0 тогда
			Дом = СокрЛП(СтрЗаменить(Элемент, "дом ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Дом ")> 0 тогда
			Дом = СокрЛП(СтрЗаменить(Элемент, "Дом ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ДОМ ")> 0 тогда
			Дом = СокрЛП(СтрЗаменить(Элемент, "ДОМ ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Д. ")> 0 тогда
			Дом = СокрЛП(СтрЗаменить(Элемент, "Д. ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "этаж ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "этаж ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Этаж ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "Этаж ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ЭТАЖ ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "ЭТАЖ ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "корпус ")> 0 тогда
			Корпус = СокрЛП(СтрЗаменить(Элемент, "корпус", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Корпус ")> 0 тогда
			Корпус = СокрЛП(СтрЗаменить(Элемент, "Корпус", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "КОРПУС ")> 0 тогда
			Корпус = СокрЛП(СтрЗаменить(Элемент, "КОРПУС ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "сооружение ")> 0 тогда
			Сооружение = СокрЛП(СтрЗаменить(Элемент, "сооружение ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Сооружение ")> 0 тогда
			Сооружение = СокрЛП(СтрЗаменить(Элемент, "Сооружение ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "СООРУЖЕНИЕ ")> 0 тогда
			Сооружение = СокрЛП(СтрЗаменить(Элемент, "СООРУЖЕНИЕ ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "литера ")> 0 тогда
			Литера = СокрЛП(СтрЗаменить(Элемент, "литера ", ""));
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Литера ")> 0 тогда
			Литера = СокрЛП(СтрЗаменить(Элемент, "Литера ", ""));
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ЛИТЕРА ")> 0 тогда
			Литера = СокрЛП(СтрЗаменить(Элемент, "ЛИТЕРА ", ""));
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "строение ")> 0 тогда
			Строение = СокрЛП(СтрЗаменить(Элемент, "строение", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Строение ")> 0 тогда
			Строение = СокрЛП(СтрЗаменить(Элемент, "Строение", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "СТРОЕНИЕ ")> 0 тогда
			Строение = СокрЛП(СтрЗаменить(Элемент, "СТРОЕНИЕ ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "участок ")> 0 тогда
			Участок = СокрЛП(СтрЗаменить(Элемент, "участок", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Участок ")> 0 тогда
			Участок = СокрЛП(СтрЗаменить(Элемент, "Участок", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "УЧАСТОК ")> 0 тогда
			Участок = СокрЛП(СтрЗаменить(Элемент, "УЧАСТОК", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "а/я")> 0 тогда
			АЯ = СокрЛП(СтрЗаменить(Элемент, "а/я", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "А/Я")> 0 тогда
			АЯ = СокрЛП(СтрЗаменить(Элемент, "А/Я", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "п/о")> 0 тогда
			ПОП = СокрЛП(СтрЗаменить(Элемент, "п/о", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "П/П")> 0 тогда
			ПОП = СокрЛП(СтрЗаменить(Элемент, "П/О", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "в/ч")> 0 тогда
			ВЧ = СокрЛП(СтрЗаменить(Элемент, "в/ч", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "В/Ч")> 0 тогда
			ВЧ = СокрЛП(СтрЗаменить(Элемент, "В/Ч", ""));	
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Адрес2Массив = СтрРазделить(Адрес2, ",");
	
	Для Каждого Элемент из Адрес2Массив Цикл
		
		Если СтрНайти(Элемент, "квартира ")> 0 тогда
			Квартира = СокрЛП(СтрЗаменить(Элемент, "квартира ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти((Элемент), "Квартира ")> 0 тогда
			Квартира = СокрЛП(СтрЗаменить(Элемент, "Квартира ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти((Элемент), "КВАРТИРА ")> 0 тогда
			Квартира = СокрЛП(СтрЗаменить(Элемент, "КВАРТИРА ", ""));	

			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "офис ")> 0 тогда
			Офис = СокрЛП(СтрЗаменить(Элемент, "офис ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Офис ")> 0 тогда
			Офис = СокрЛП(СтрЗаменить(Элемент, "Офис ", ""));	

			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ОФИС ")> 0 тогда
			Офис = СокрЛП(СтрЗаменить(Элемент, "ОФИС ", ""));	

			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "бокс ")> 0 тогда
			бокс = СокрЛП(СтрЗаменить(Элемент, "бокс ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Бокс ")> 0 тогда
			бокс = СокрЛП(СтрЗаменить(Элемент, "Бокс ", ""));	

			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "БОКС ")> 0 тогда
			бокс = СокрЛП(СтрЗаменить(Элемент, "БОКС ", ""));	

			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "помещение ")> 0 тогда
			Помещение = СокрЛП(СтрЗаменить(Элемент, "помещение ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Помещение ")> 0 тогда
			Помещение = СокрЛП(СтрЗаменить(Элемент, "Помещение ", ""));	

			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ПОМЕЩЕНИЕ ")> 0 тогда
			Помещение = СокрЛП(СтрЗаменить(Элемент, "ПОМЕЩЕНИЕ ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "этаж ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "этаж ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Этаж ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "Этаж ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "ЭТАЖ ")> 0 тогда
			Этаж = СокрЛП(СтрЗаменить(Элемент, "ЭТАЖ ", ""));	
			Продолжить;
		КонецЕсли;
/////////////////////////////////////////////////////////////////////////////////////////		
		Если СтрНайти(Элемент, "комната ")> 0 тогда
			Комната = СокрЛП(СтрЗаменить(Элемент, "комната ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "Комната ")> 0 тогда
			Комната = СокрЛП(СтрЗаменить(Элемент, "Комната ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "КОМНАТА ")> 0 тогда
			Комната = СокрЛП(СтрЗаменить(Элемент, "КОМНАТА ", ""));	
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Элемент, "КОМН ")> 0 тогда
			Комната = СокрЛП(СтрЗаменить(Элемент, "КОМН ", ""));	
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Представление = Строка(Индекс);
	
	Представление = Представление + ?(ЗначениеЗаполнено(Регион)		, ", " + Регион					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Район)		, ", " + Район					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Город)		, ", " + Город					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(НасПункт)	, ", " + НасПункт				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Улица)		, ", " + Улица					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Дом)		, ", дом № " + Дом				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Участок)	, ", участок " + Участок		, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Сооружение)	, ", сооружение " + Сооружение	, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Литера)		, ", литера " + Литера			, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Строение)	, ", строение " + Строение		, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Корпус)		, ", корпус " + Корпус			, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Квартира)	, ", квартира " + Квартира		, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Офис)		, ", офис " + Офис				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Бокс)		, ", бокс " + Бокс				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Помещение)	, ", помещение " + Помещение	, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Этаж)		, ", этаж " + Этаж				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(АЯ)			, ", а/я " + АЯ					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(ПОП)		, ", п/о " + ПОП				, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(ВЧ)			, ", в/ч " + ВЧ					, "");	
	Представление = Представление + ?(ЗначениеЗаполнено(Комната)	, ", комната " + Комната		, "");	
	
	СтруктураДанных.Вставить("Представление",Представление);
	СтруктураДанных.Вставить("Город"	, Город);
	СтруктураДанных.Вставить("НаселПункт",НасПункт);
	СтруктураДанных.Вставить("Улица"	, Улица);
	
	
	СтруктураДанных.Вставить("Дом"		, Дом);
	СтруктураДанных.Вставить("Участок"	, Участок);
	СтруктураДанных.Вставить("Сооружение",Сооружение);
	СтруктураДанных.Вставить("Литера"	, Литера);
	СтруктураДанных.Вставить("Строение"	, Строение);
	СтруктураДанных.Вставить("Корпус"	, Корпус);
	
	СтруктураДанных.Вставить("Квартира"	, Квартира);
	СтруктураДанных.Вставить("Офис"		, Офис);
	СтруктураДанных.Вставить("Бокс"		, Бокс);
	СтруктураДанных.Вставить("Помещение", Помещение);
	СтруктураДанных.Вставить("Этаж"		, Этаж);
	СтруктураДанных.Вставить("АЯ"		, АЯ);
	СтруктураДанных.Вставить("ПО"		, ПОП);
	СтруктураДанных.Вставить("ВЧ"		, ВЧ);
	СтруктураДанных.Вставить("Другое"	, Другое);
	СтруктураДанных.Вставить("Комната"	, Комната);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьЗначениеПолейАдреса(СтруктураДанных)
	
	ЗаписьXML = новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("КонтактнаяИнформация");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xs"		, XMLСтрока("http://www.w3.org/2001/XMLSchema"));
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi"		, XMLСтрока("http://www.w3.org/2001/XMLSchema-instance"));
	ЗаписьXML.ЗаписатьАтрибут("xmlns"			, XMLСтрока("http://www.v8.1c.ru/ssl/contactinfo"));
	ЗаписьXML.ЗаписатьАтрибут("Представление"	, XMLСтрока(СтруктураДанных.Представление));
	
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Комментарий");
	//ЗаписьXML.ЗаписатьКонецЭлемента();
	
	лСтрана = Врег(СокрЛП(СтруктураДанных.Страна));
	Если лСтрана = Б24_ОбщегоНазначенияСервер.ПолучитьНазваниеСтраны() тогда 
		ЗаписьXML.ЗаписатьНачалоЭлемента("Состав");
		ЗаписьXML.ЗаписатьАтрибут("xsi:type", "Адрес");
		ЗаписьXML.ЗаписатьАтрибут("Страна", Б24_ОбщегоНазначенияСервер.ПолучитьНазваниеСтраны());
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Состав");
		ЗаписьXML.ЗаписатьАтрибут("xsi:type", "АдресРФ");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СубъектРФ");
		ЗаписьXML.ЗаписатьТекст(СтруктураДанных.Регион);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвРайМО");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Район");
		ЗаписьXML.ЗаписатьТекст(СтруктураДанных.район);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Город");
		ЗаписьXML.ЗаписатьТекст(СтруктураДанных.Город);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("НаселПункт");
		ЗаписьXML.ЗаписатьТекст(СтруктураДанных.НаселПункт);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Улица");
		ЗаписьXML.ЗаписатьТекст(СтруктураДанных.Улица);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОКТМО");
		ЗаписьXML.ЗаписатьТекст("27701000001");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		
		//ЗаписьXML.ЗаписатьНачалоЭлемента("ОКТМО");
		//	ЗаписьXML.ЗаписатьТекст("");
		//ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1010", СтруктураДанных.Дом);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1040", СтруктураДанных.Участок);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1070", СтруктураДанных.Сооружение);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1080", СтруктураДанных.Литера);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1060", СтруктураДанных.Строение);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "1050", СтруктураДанных.Корпус);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2010", СтруктураДанных.Квартира);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2030", СтруктураДанных.Офис);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2040", СтруктураДанных.Бокс);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2020", СтруктураДанных.Помещение);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2060", СтруктураДанных.Этаж);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2070", СтруктураДанных.АЯ);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2090", СтруктураДанных.ПО);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2080", СтруктураДанных.ВЧ);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "Другое", СтруктураДанных.Другое);
		ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, "2050", СтруктураДанных.Комната);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДопАдрЭл");
		ЗаписьXML.ЗаписатьАтрибут("ТипАдрЭл", "10100000");
		ЗаписьXML.ЗаписатьАтрибут("Значение", СтруктураДанных.ПИндекс);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Состав");
		ЗаписьXML.ЗаписатьАтрибут("xsi:type", "Адрес");
		ЗаписьXML.ЗаписатьАтрибут("Страна", XMLСтрока(лСтрана));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Состав");
		ЗаписьXML.ЗаписатьАтрибут("xsi:type", "xs:string");
		ЗаписьXML.ЗаписатьТекст(XMLСтрока(СтруктураДанных.Представление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции

Процедура ДобавитьТегВАдресноеПолеРФ(ЗаписьXML, ТипЗначения, Значение)
	
	Если ЗначениеЗаполнено(Значение) тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДопАдрЭл");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Номер");
		ЗаписьXML.ЗаписатьАтрибут("Тип", ТипЗначения);
		ЗаписьXML.ЗаписатьАтрибут("Значение", Значение);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьБанковскиеСчетаКомпанийКонтактов(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхВладельца", ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	Запрос.УстановитьПараметр("Портал"				, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Объект,
	|	БанковскиеСчета.НомерСчета КАК Идентификатор
	|ПОМЕСТИТЬ ВремНомераСчетов
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыВладельца
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхВладельца
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;	
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);    
		
		ВнешнийКод 		= Строка(ТекЭлемент.Получить("XML_ID"));		
		ИдВладельца 	= Формат(ТекЭлемент.Получить("ENTITY_ID"),"ЧГ=0");
		НомерСчета		= Строка(ТекЭлемент.Получить("RQ_ACC_NUM"));
		БикБанка 		= Строка(ТекЭлемент.Получить("RQ_BIK"));
		НаименованиеБС	= Строка(ТекЭлемент.Получить("NAME"));
		
		БанковскийСчет 	= Неопределено;
		
		Если Не ЗначениеЗаполнено(БикБанка) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не указан БИК в счете:" + НомерСчета + " у реквизита с кодом " + ИдВладельца);
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			Продолжить;
		КонецЕсли;
		
#Область ПоискСозданиеБанкСчета
		
		БанковскийСчет = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(БанковскийСчет)  тогда
			БанковскийСчет = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"), ВнешнийКод);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НомерСчета) И НЕ ЗначениеЗаполнено(БанковскийСчет)  тогда
			БанковскийСчет = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНомераСчетов", НомерСчета);	
		КонецЕсли;
		
		Если БанковскийСчет = Неопределено тогда
			
			ВладелецБСчета = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыВладельца", ИдВладельца);	
			
			Если ВладелецБСчета = Неопределено тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден владелец банковского счета. Ид реквизита: " + ИдВладельца + ". Будет пропущен банковвкий счет : " + ИдЭлемента);
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ВладелецБСчета) = Тип("СправочникСсылка.Контрагенты") тогда
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			Иначе
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
			КонецЕсли;
			
			БанковскийСчет.Владелец = ВладелецБСчета;
			
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.ОбновлятьКонтрагентов тогда
				БанковскийСчет = БанковскийСчет.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита, БанковскийСчет.Ссылка, ИдЭлемента);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что контрагенты не обновляются. Банковский счет: " + НомерСчета + " не будет обновлен.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти
		
		Активный 						= ТекЭлемент.Получить("ACTIVE") = "Y";
		БанковскийСчет.ПометкаУдаления 	= НЕ Активный;	
		
		БанковскийСчет.НомерСчета		= НомерСчета; 
		
		НайденныйБанк = Справочники.КлассификаторБанковРФ.НайтиПоКоду(БикБанка);
		
		Если ЗначениеЗаполнено(НайденныйБанк) тогда
			БанковскийСчет.Банк = НайденныйБанк;
		Иначе
			БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина;
			БанковскийСчет.СВИФТБанка 			= Строка(ТекЭлемент.Получить("RQ_SWIFT"));
			БанковскийСчет.НаименованиеБанка 	= Строка(ТекЭлемент.Получить("RQ_BANK_NAME"));
			БанковскийСчет.АдресБанка 			= Строка(ТекЭлемент.Получить("RQ_BANK_ADDR"));
			БанковскийСчет.БИКБанка 			= БикБанка;
			БанковскийСчет.КоррСчетБанка 		= Строка(ТекЭлемент.Получить("RQ_COR_ACC_NUM"));
			
		КонецЕсли;
		
		КодВалюты = ПолучитьКодПоВалюте(Строка(ТекЭлемент.Получить("RQ_ACC_CURRENCY")));
		БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		
		БанковскийСчет.Наименование = НаименованиеБС;
		
		Попытка
			БанковскийСчет.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			БанковскийСчет.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита, БанковскийСчет.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан номер счета: " + НомерСчета);
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи банковского счета контрагента: " + НомерСчета + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодПоВалюте(Валюта)
	
	Если Валюта = "USD" тогда
		Результат = "840";
	ИначеЕсли Валюта = "EUR" тогда
		Результат = "978";
	ИначеЕсли Валюта = "UAH" тогда
		Результат = "980";
	ИначеЕсли Валюта = "BYN" тогда
		Результат = "974";
	ИначеЕсли Валюта = "KZT" тогда
		Результат = "398";
	ИначеЕсли Валюта = "RUB" тогда
		Результат = "643";
	Иначе
		Результат = "398";
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьРазделыНоменклатуры(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	ЕстьПользовательскоеДерево = Б24_СинхронизацияПовтИсп.ЕстьПользовательскоеДеревоГрупп(ОбщиеНастройки.НастройкаСинхронизации);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара);
	Запрос.УстановитьПараметр("ЕстьПользовательскоеДерево", ЕстьПользовательскоеДерево);
	Запрос.УстановитьПараметр("Портал"					  , ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Объект,
	|	Номенклатура.Наименование КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованиеРазделов
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ИСТИНА
	|	И НЕ &ЕстьПользовательскоеДерево
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Б24_ПользовательскиеГруппыТоваров.Ссылка,
	|	Б24_ПользовательскиеГруппыТоваров.Наименование
	|ИЗ
	|	Справочник.Б24_ПользовательскиеГруппыТоваров КАК Б24_ПользовательскиеГруппыТоваров
	|ГДЕ
	|	&ЕстьПользовательскоеДерево
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ВнешнийКод 		= Строка(ТекЭлемент.Получить("XML_ID")); 		
		ИдРодителя 		= Формат(ТекЭлемент.Получить("SECTION_ID"),"ЧГ=0");
		Наименование	= Строка(ТекЭлемент.Получить("NAME"));
		
#Область ПоискСозданиеРаздела	
		ГруппаНоменклатуры = Неопределено;
		ГруппаНоменклатуры = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) тогда
			ГруппаНоменклатуры = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(?(ЕстьПользовательскоеДерево, Тип("СправочникСсылка.Б24_ПользовательскиеГруппыТоваров"), Тип("СправочникСсылка.Номенклатура")), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) тогда
			ГруппаНоменклатуры = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованиеРазделов", Наименование);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) тогда
			
			Если ЕстьПользовательскоеДерево тогда
				ГруппаНоменклатуры = Справочники.Б24_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
			Иначе
				ГруппаНоменклатуры = Справочники.Номенклатура.СоздатьГруппу();
			КонецЕсли;
			
		Иначе
			Если ОбщиеНастройки.НастройкиСинхронизацииТоваров.ОбновлятьТовары тогда
				ГруппаНоменклатуры = ГруппаНоменклатуры.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара, ГруппаНоменклатуры.Ссылка, ИдЭлемента);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что товары не обновляются. раздел номенклатуры: " + Наименование + " не будет обновлен.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти
		
		ГруппаНоменклатуры.Наименование	= Наименование; 
		
		РодительГруппы = Неопределено;
		
		Если ЗначениеЗаполнено(ИдРодителя) тогда
			
			ВыборкаРодителей = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("ТипДанных", ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара)); 
			
			Пока ВыборкаРодителей.Следующий() Цикл
				Если ВыборкаРодителей.Идентификатор = ИдРодителя тогда 
					РодительГруппы = ВыборкаРодителей.Объект;	
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ  ЗначениеЗаполнено(ИдРодителя) И ЕстьПользовательскоеДерево тогда
			РодительГруппы = ОбщиеНастройки.ДеревоГрупп;	
		КонецЕсли;
		
		Если РодительГруппы = Неопределено И ЗначениеЗаполнено(ИдРодителя) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден родитель группы номенклатуры: " + Наименование);
			Если ЕстьПользовательскоеДерево тогда
				ГруппаНоменклатуры.Родитель = ОбщиеНастройки.ДеревоГрупп;
			КонецЕсли;
		Иначе
			ГруппаНоменклатуры.Родитель = РодительГруппы;	
		КонецЕсли;
		
		Попытка
			ГруппаНоменклатуры.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			ГруппаНоменклатуры.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара, ГруппаНоменклатуры.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записана группа номенклатуры: " + Наименование);
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи группы номенклатуры: " + Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьЕдиницыИзмерения(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"	, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Портал"		, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;	
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);	
		
		КодЭлемента 	= Строка(ТекЭлемент.Получить("CODE"));
		Наименование	= Строка(ТекЭлемент.Получить("MEASURE_TITLE"));
		НаименованиеП	= Строка(ТекЭлемент.Получить("SYMBOL_RUS"));
		НаименованиеМ	= Строка(ТекЭлемент.Получить("SIMBOL_INTL"));
		
#Область ПоискСозданиеЕдИзм	
		ЕдиницаИзмерения = Неопределено;
		Если ЗначениеЗаполнено(КодЭлемента) тогда
			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодЭлемента,,,Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) тогда 
			ЕдиницаИзмерения = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) тогда 
			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
			ЕдиницаИзмерения.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения; 
		Иначе
			Если ОбщиеНастройки.НастройкиСинхронизацииТоваров.ОбновлятьТовары тогда
				ЕдиницаИзмерения = ЕдиницаИзмерения.ПолучитьОбъект();
			Иначе
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения, ЕдиницаИзмерения.Ссылка, ИдЭлемента);
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что товары не обновляются. единица измерения номенклатуры: " + НаименованиеП + " не будет обновлена.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		ЕдиницаИзмерения.Код						= КодЭлемента; 
		ЕдиницаИзмерения.Наименование				= Наименование; 
		ЕдиницаИзмерения.НаименованиеПолное			= НаименованиеП;  
		ЕдиницаИзмерения.МеждународноеСокращение	= НаименованиеМ; 
		
		Попытка
			ЕдиницаИзмерения.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			ЕдиницаИзмерения.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения, ЕдиницаИзмерения.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записана единица измерения номенклатуры: " + НаименованиеП);
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи единицы измерения номенклатуры: " + НаименованиеП + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьСвойстваНоменклатуры(пОбщиеНастройки, мДанных) Экспорт
	
	мСвойстваИсключения = Б24_СинхронизацияВызовСервера.ПолучитьНазванияИсключающихСвойств();	
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"				, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияСвойств
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	(ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|			ИЛИ ДополнительныеРеквизитыИСведения.НаборСвойств В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Запрос.Выполнить();
	
	ЗагруженныеОбъекты = Новый Массив;	
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ЭтоСвойствоХарактеристикиНоменклатуры = Ложь;
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ОписаниеТипов 		= Неопределено;
		ТипСвойства 		= ТекЭлемент.Получить("PROPERTY_TYPE");
		ПользовательскийТип = ТекЭлемент.Получить("USER_TYPE");
#Область РазборТипаСвойства
		МассивТипов 	= Новый Массив;
		
		Если ТипСвойства = "N" И ПользовательскийТип = "" тогда
			
			КЧ = Новый КвалификаторыЧисла(12,2);
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТипов  = Новый ОписаниеТипов(МассивТипов, , КЧ);
			
		ИначеЕсли ТипСвойства = "S" И ПользовательскийТип = "" тогда
			
			КС = Новый КвалификаторыСтроки(100);
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КС);
			
		ИначеЕсли ТипСвойства = "S" И ПользовательскийТип = "HTML" тогда
			
			КС = Новый КвалификаторыСтроки(0);
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КС);
			
		ИначеЕсли ТипСвойства = "S" И ПользовательскийТип = "DateTime" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КД);
			
		ИначеЕсли ТипСвойства = "S" И ПользовательскийТип = "Date" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КД);
			
		ИначеЕсли ТипСвойства = "S" И ПользовательскийТип = "employee" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
		ИначеЕсли ТипСвойства = "L" И ПользовательскийТип = "" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
			МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли;
		
#КонецОбласти
		
		Если ОписаниеТипов = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		ВнешнийКод 	= Строка(ТекЭлемент.Получить("XML_ID"));
		Если Лев(ВнешнийКод, 2) = "H_" тогда
			ЭтоСвойствоХарактеристикиНоменклатуры = Истина;
			ВнешнийКод	= Прав(ВнешнийКод, СтрДлина(ВнешнийКод)-2);
			
			ДлинаПрефикса 			= СтрДлина(Б24_СинхронизацияПовтИсп.ПолучитьПрефиксСвойстваХарактеристики());
			НаименованиеСБитрикс24 	= Строка(ТекЭлемент.Получить("NAME"));
			Наименование			= Прав(НаименованиеСБитрикс24, СтрДлина(НаименованиеСБитрикс24) -ДлинаПрефикса);
		Иначе	
			Наименование	= Строка(ТекЭлемент.Получить("NAME"));
		КонецЕсли;
		
		Если мСвойстваИсключения.Найти(Наименование) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		
		Если ТекЭлемент.Получить("MULTIPLE") = "Y" тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + Наименование + " не будет добавлено/обновлено. т.к. является множественным");
			Продолжить;
		КонецЕсли;
		
#Область ПоискСозданиеСвойства	
		Свойство = Неопределено;
		Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод)И НЕ ЗначениеЗаполнено(Свойство)  тогда
			Свойство = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Свойство) тогда
			Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованияСвойств", Наименование);	
		КонецЕсли;
		
		ЭтоНовый = Истина;
		
		Если НЕ ЗначениеЗаполнено(Свойство)тогда
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			
			Если НЕ ЭтоСвойствоХарактеристикиНоменклатуры тогда
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие;
			Иначе
				Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры;
			Конецесли;
			
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииТоваров.ОбновлятьТовары тогда
				ЭтоНовый = Ложь;
				Свойство = Свойство.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара, Свойство.Ссылка, ИдЭлемента);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что товары не обновляются. Свойство: " + Наименование + " не будет обновлено");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Свойство.ПометкаУдаления 		= НЕ ТекЭлемент.Получить("ACTIVE") = "Y";	
		
		Если ЭтоНовый тогда
			Если НЕ ЭтоСвойствоХарактеристикиНоменклатуры тогда
				Свойство.Наименование 	= Наименование + " (Справочник ""Номенклатура"" (Общие))";
			Иначе
				Свойство.Наименование 	= Наименование + " (Справочник ""Характеристики номенклатуры""";
			КонецЕсли;
		КонецЕсли;
		
		Свойство.Заголовок 				= Наименование;
		Свойство.ЗаполнятьОбязательно 	= ТекЭлемент.Получить("IS_REQUIRED") = "Y"; 
		
		ТипСвойства 		= ТекЭлемент.Получить("PROPERTY_TYPE");
		ПользовательскийТип = ТекЭлемент.Получить("USER_TYPE");
		
		Если ТипСвойства = "L" И ПользовательскийТип = "" тогда
			Свойство.ДополнительныеЗначенияИспользуются = Истина;
		КонецЕсли;
		
		Свойство.ТипЗначения = ОписаниеТипов;
		Попытка
			Свойство.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Свойство.Записать();
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара, Свойство.Ссылка, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записано свойство номенклатуры: " + Наименование);
			
			Если ТипСвойства = "L" И ПользовательскийТип = "" тогда
				#Область ЗаписьЗначенийСвойств
				ЗначенияСписка = ТекЭлемент.Получить("VALUES");	
				
				Если ЗначениеЗаполнено(ЗначенияСписка) тогда
					
					Для Каждого ТекЗначениеСвойства из ЗначенияСписка Цикл
						
						лВнешнийКодЗначенияСвойства = Строка(ТекЗначениеСвойства.Значение.Получить("XML_ID")); 		
						ИдЗначенияСвойства 		= Формат(ТекЗначениеСвойства.Значение.Получить("ID"),"ЧГ=0");
						НаименованиеЗнСвойства	= Строка(ТекЗначениеСвойства.Значение.Получить("VALUE"));
						
						ЗначениеСвойства = Неопределено;
						ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств", ИдЗначенияСвойства);	
						
						Если ЗначениеЗаполнено(лВнешнийКодЗначенияСвойства) И НЕ ЗначениеЗаполнено(ЗначениеСвойства) тогда
							ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), лВнешнийКодЗначенияСвойства);
						КонецЕсли;
						
						Если ЗначениеСвойства = Неопределено тогда
							ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						Иначе
							ЗначениеСвойства = ЗначениеСвойства.ПолучитьОбъект();
						КонецЕсли;
						
						ЗначениеСвойства.Владелец 			= ?(Свойство.ВладелецДополнительныхЗначений.Пустая(), Свойство.Ссылка,  Свойство.ВладелецДополнительныхЗначений);					
						ЗначениеСвойства.Наименование 		= НаименованиеЗнСвойства;					
						//ЗначениеСвойства.ПолноеНаименование = НаименованиеЗнСвойства;	
						
						ЗначениеСвойства.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
						ЗначениеСвойства.Записать();
						Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара, ЗначениеСвойства.Ссылка, ИдЗначенияСвойства);
						
					КонецЦикла;
					
				КонецЕсли;
				#КонецОбласти
			КонецЕсли;	
			
			Если ЭтоНовый тогда
				
				НаборСвойств 	= Свойство.НаборСвойств;
				ТекНаборСвойств = НаборСвойств.ПолучитьОбъект();
				
				НовоеСвойствоНабора = ТекНаборСвойств.ДополнительныеРеквизиты.Добавить();
				НовоеСвойствоНабора.Свойство = Свойство.Ссылка;
				
				ТекНаборСвойств.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				ТекНаборСвойств.Записать();
				
			КонецЕсли;	
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи свойства товара: " + Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьНоменклатуру(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	ИдСвойстваВидаНоменклатуры = Б24_СинхронизацияВызовСервера.ПолучитьИдОбъекта(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.ПредопределенноеСвойствоВидаНоменклатуры	, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара); 
	
	ОбщиеНастройки.Вставить("ИдСвойстваВидаНоменклатуры", ИдСвойстваВидаНоменклатуры);
	
	ЕстьДеревоГрупп = Б24_СинхронизацияПовтИсп.ЕстьПользовательскоеДеревоГрупп(ОбщиеНастройки.НастройкаСинхронизации);
	Если ЕстьДеревоГрупп тогда
		тзнПользовательскогоДереваГрупп = ПолучитьТаблицуТоваровИДереваГрупп(ОбщиеНастройки);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ФормированиеВременныхТаблицДанных		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанныхТовара"			, ОбщиеНастройки.ТипыОбъектовОбмена.Товар);
	Запрос.УстановитьПараметр("ТипДанныхЕдиницИзмерения", ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ТипДанныхГрупп"			, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыТоваров
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхТовара
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЕдиницИзмерения
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЕдиницИзмерения
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыГрупп
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхГрупп
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремИдентификаторыЗначенийСвойств.Идентификатор КАК Идентификатор,
	|	ВидыНоменклатуры.Ссылка КАК Объект
	|ПОМЕСТИТЬ ВремИдВидовНоменклатуры
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремИдентификаторыЗначенийСвойств КАК ВремИдентификаторыЗначенийСвойств
	|			ПО ЗначенияСвойствОбъектов.Ссылка = ВремИдентификаторыЗначенийСвойств.Объект
	|		ПО ВидыНоменклатуры.Наименование = ЗначенияСвойствОбъектов.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Объект,
	|	Номенклатура.Наименование КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияТоваров
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Объект,
	|	ХарактеристикиНоменклатуры.Наименование КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияХарактеристикТоваров
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";	
	Запрос.Выполнить();
#КонецОбласти	
	
	ЗапросПоСвойствамТовров = Новый Запрос;
	ЗапросПоСвойствамТовров.УстановитьПараметр("ТипДанных"	, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
	ЗапросПоСвойствамТовров.УстановитьПараметр("Портал"		, ОбщиеНастройки.Портал);
	
	ЗапросПоСвойствамТовров.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Ссылка КАК Набор,
	|	ДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ВЫБОР
	|		КОГДА ДополнительныеРеквизиты.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСвойствоНоменклатуры
	|ПОМЕСТИТЬ ВремВсеНаборы
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Ссылка,
	|	ДополнительныеСведения.Свойство,
	|	ВЫБОР
	|		КОГДА ДополнительныеСведения.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВремВсеНаборы.Набор) КАК Набор,
	|	ВремВсеНаборы.Свойство КАК Свойство,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	ВремВсеНаборы.ЭтоСвойствоНоменклатуры КАК ЭтоСвойствоНоменклатуры
	|ПОМЕСТИТЬ ВремСвойстваНаборы
	|ИЗ
	|	ВремВсеНаборы КАК ВремВсеНаборы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВремВсеНаборы.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВремВсеНаборы.Свойство,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение,
	|	ВремВсеНаборы.ЭтоСвойствоНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремВсеНаборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремСвойстваНаборы.Свойство КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ВремСвойстваНаборы.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	ВремСвойстваНаборы.ЭтоСвойствоНоменклатуры КАК ЭтоСвойствоНоменклатуры
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремСвойстваНаборы КАК ВремСвойстваНаборы
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ВремСвойстваНаборы.Свойство
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных	
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"";
	
	тзнСвойств = ЗапросПоСвойствамТовров.Выполнить().Выгрузить();
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
		ИдЭлемента 		= Формат(ТекЭлемент.Получить("ID"),"ЧГ=0");
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ИдВнешнийОбщий	= Строка(ТекЭлемент.Получить("XML_ID"));
		ИдРодителя 		= Формат(ТекЭлемент.Получить("SECTION_ID"),"ЧГ=0");
		Наименование	= Строка(ТекЭлемент.Получить("NAME"));
		НаименованиеП	= Строка(ТекЭлемент.Получить("DESCRIPTION"));
		ИдЕдИзм			= Формат(ТекЭлемент.Получить("MEASURE"),"ЧГ=0");
		Активность		= ТекЭлемент.Получить("ACTIVE") = "Y";
		
		СтавкаНДС		= Строка(ТекЭлемент.Получить("VAT_ID"));
		Цена			= Строка(ТекЭлемент.Получить("PRICE"));
		Валюта			= Формат(ТекЭлемент.Получить("CURRENCY_ID"), "ЧГ=0");
		ДетальнаяКартинка = ТекЭлемент.Получить("DETAIL_PICTURE");
		
		ВидТовара	= ТекЭлемент.Получить("PROPERTY_" + ОбщиеНастройки.ИдСвойстваВидаНоменклатуры);
		ИдВидаТовара = ?(ВидТовара = Неопределено, Неопределено, ВидТовара.Получить("value"));
		
		СтруктураИдентификаторовТовара = Б24_СинхронизацияВызовСервера.ПолучитьДвеСоставныеЧастиИзСтроки(ИдВнешнийОбщий, "#");
		ИдВнешнийНоменклатуры 	= СтруктураИдентификаторовТовара.ПерваяЧасть;
		ИдВнешнийХарактеристики = СтруктураИдентификаторовТовара.ВтораяЧасть;
		
		Если ИдВнешнийХарактеристики = "" тогда
			ЕстьХарактеристика 		= Ложь;
		Иначе
			ЕстьХарактеристика 		= Истина;
		КонецЕсли;
		
		Если ЕстьХарактеристика тогда
			СтруктураИдентификаторовТовара = Б24_СинхронизацияВызовСервера.ПолучитьДвеСоставныеЧастиИзСтроки(Наименование, Б24_СинхронизацияПовтИсп.ПолучитьРазделительНаименованийНоменклатуры());
			
			НаименованиеНоменклатуры		= СтруктураИдентификаторовТовара.ПерваяЧасть;	
			НаименованиеХарактеристики		= СтруктураИдентификаторовТовара.ВтораяЧасть;	
			
			СтруктураИдентификаторовТовара  = Б24_СинхронизацияВызовСервера.ПолучитьДвеСоставныеЧастиИзСтроки(НаименованиеП, Б24_СинхронизацияПовтИсп.ПолучитьРазделительНаименованийНоменклатуры());
			
			ПолноеНаименованиеНоменклатуры	= СтруктураИдентификаторовТовара.ПерваяЧасть;	
			ПолноеНаименованиеХарактеристики= СтруктураИдентификаторовТовара.ВтораяЧасть;	
		Иначе
			НаименованиеНоменклатуры		= Наименование;	
			ПолноеНаименованиеНоменклатуры 	= НаименованиеП;	
			
			НаименованиеХарактеристики		= "";	
			ПолноеНаименованиеХарактеристики= "";	
		КонецЕсли;
		
		ТаблицаСвойствТовара = РазобратьСвойстваТовараВТаблицу(ОбщиеНастройки, МенеджерВременныхТаблиц, ТекЭлемент, тзнСвойств);
		
#Область ПоискТовара	
		
		ИнформацияОНоменклатуре = Неопределено;	
		
		Запрос = новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Идентификатор", ИдЭлемента);
		Запрос.УстановитьПараметр("Портал"		, ОбщиеНастройки.Портал);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВремИдентификаторы.Объект КАК Объект,
		|	ВремИдентификаторы.ПодчиненныйОбъект КАК ПодчиненныйОбъект
		|ИЗ
		|	ВремИдентификаторыТоваров КАК ВремИдентификаторы
		|ГДЕ
		|	ВремИдентификаторы.Идентификатор = &Идентификатор";
		
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если НЕ ВыполненныйЗапрос.Пустой() тогда
			Выборка = ВыполненныйЗапрос.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИнформацияОНоменклатуре = Выборка;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		Номенклатура 	= ?(ИнформацияОНоменклатуре = Неопределено, Неопределено, ИнформацияОНоменклатуре.Объект);
		Характеристика  = ?(ИнформацияОНоменклатуре = Неопределено, Неопределено, ИнформацияОНоменклатуре.ПодчиненныйОбъект);
		
		Если ЗначениеЗаполнено(ИдВнешнийНоменклатуры) И НЕ ЗначениеЗаполнено(Номенклатура) тогда
			Номенклатура = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.Номенклатура"), ИдВнешнийНоменклатуры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдВнешнийХарактеристики) И НЕ ЗначениеЗаполнено(Характеристика) тогда
			Характеристика = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), ИдВнешнийХарактеристики);
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) тогда
			Номенклатура = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованияТоваров", НаименованиеНоменклатуры);	
		КонецЕсли;
		
		Если ЕстьХарактеристика И НЕ ЗначениеЗаполнено(Характеристика) тогда
			Характеристика = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованияХарактеристикТоваров", НаименованиеХарактеристики);	
		КонецЕсли;
		
		
		ЭтоНоваяНоменклатура 	= ?(ЗначениеЗаполнено(Номенклатура), Ложь,Истина);
		ЭтоНоваяХарактеристика 	= ?(ЕстьХарактеристика И НЕ ЗначениеЗаполнено(Характеристика), Истина, Ложь);
#КонецОбласти	
		
#Область ФильтрПоОбновляемымТоварам
		
		Если НЕ ЭтоНоваяНоменклатура тогда
			ИспользованиеХарактеристик = Номенклатура.ИспользованиеХарактеристик;
			Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать тогда
				
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				
				ДанныеДляИД = Новый Структура;
				ДанныеДляИД.Вставить("Объект"				, Номенклатура);
				ДанныеДляИД.Вставить("ПодчиненныйОбъект"	, ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика));
				
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Товар, ДанныеДляИД, ИдЭлемента);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Товары, использующие характеристики, не обновляются из Битрикс24. Номенклатура: " + Наименование + " будет пропущена.");
				Продолжить; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ (ЭтоНоваяНоменклатура ИЛИ ЭтоНоваяХарактеристика) И НЕ ОбщиеНастройки.НастройкиСинхронизацииТоваров.ОбновлятьТовары тогда
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			ДанныеДляИД = Новый Структура;
			ДанныеДляИД.Вставить("Объект"				, Номенклатура);
			ДанныеДляИД.Вставить("ПодчиненныйОбъект"	, ?(Характеристика = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Характеристика));
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Товар, ДанныеДляИД, ИдЭлемента);
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что товары не обновляются. Номенклатура: " + Наименование + " не будет обновлена.");
			Продолжить; 
		КонецЕсли;
		
		#КонецОбласти	
		
#Область СозданиеОбновлениеНоменклатуры	
		
		Если ЭтоНоваяНоменклатура тогда
			Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
		Иначе
			Номенклатура = Номенклатура.ПолучитьОбъект();
		КонецЕсли;
		
		Номенклатура.ПометкаУдаления 	= НЕ ЕстьХарактеристика И НЕ Активность;
		Номенклатура.Наименование 		= НаименованиеНоменклатуры;
		Номенклатура.НаименованиеПолное	= ?(ЗначениеЗаполнено(Номенклатура.НаименованиеПолное), Номенклатура.НаименованиеПолное, НаименованиеНоменклатуры);
		Номенклатура.Описание 			= ПолноеНаименованиеНоменклатуры;
		
		
		Родитель = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыГрупп", ИдРодителя);
		Если НЕ ЕстьДеревоГрупп тогда
			Номенклатура.Родитель = Родитель;
		КонецЕсли;
		
		ВидНоменклатуры = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдВидовНоменклатуры", ИдВидаТовара);
		
		ВидНоменклатуры = ?(ЗначениеЗаполнено(ВидНоменклатуры), ВидНоменклатуры, Номенклатура.ВидНоменклатуры);  
		
		Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) тогда
			ВидНоменклатурыВрем = Справочники.ВидыНоменклатуры.ВидНоменклатурыПоУмолчанию();
			Если ЗначениеЗаполнено(ВидНоменклатурыВрем) тогда
				ВидНоменклатуры = ВидНоменклатурыВрем;	
			КонецЕсли;
		КонецЕсли;
		
		Номенклатура.ВидНоменклатуры = ВидНоменклатуры;
		
		Номенклатура.ТипНоменклатуры 				= ВидНоменклатуры.ТипНоменклатуры;	
		Номенклатура.ИспользованиеХарактеристик 	= ВидНоменклатуры.ИспользованиеХарактеристик;	
		Номенклатура.ИспользоватьУпаковки 			= ВидНоменклатуры.ИспользоватьУпаковки;	
		Номенклатура.НаборУпаковок 					= ВидНоменклатуры.НаборУпаковок;
		Номенклатура.ВариантОформленияПродажи      	= ВидНоменклатуры.ВариантОформленияПродажи;
		Номенклатура.ГруппаДоступа      			= ?(ЗначениеЗаполнено(Номенклатура.ГруппаДоступа), Номенклатура.ГруппаДоступа, ВидНоменклатуры.ГруппаДоступа);  
		
		
		Если Номенклатура.НаборУпаковок.Пустая() И ВидНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга тогда
			Номенклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		КонецЕсли;
		
		ЕдиницаИзмерения                = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЕдиницИзмерения", ИдЕдИзм);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
			Номенклатура.ЕдиницаИзмерения  = ЕдиницаИзмерения;	
			Номенклатура.ЕдиницаДляОтчетов = ЕдиницаИзмерения;	
		Иначе
			Номенклатура.ЕдиницаИзмерения  = ВидНоменклатуры.ЕдиницаИзмерения;
			Номенклатура.ЕдиницаДляОтчетов = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		НайденнаяСтавкаНДС = ОбщиеНастройки.НастройкиСинхронизацииТоваров.СтавкиНДС.Найти(СтавкаНДС);
		Если НайденнаяСтавкаНДС <> Неопределено тогда
			Номенклатура.СтавкаНДС = НайденнаяСтавкаНДС.СтавкаНДС;	
		Иначе
			Номенклатура.СтавкаНДС = ПолучитьСтавкуНДСПоСтавке(ОбщиеНастройки, 0);	
		КонецЕсли;
		
#Область ЗаполнениеПредопределеннымиЗначениямиПриСоздании	
		Если ЭтоНоваяНоменклатура тогда		
		КонецЕсли;	
#КонецОбласти	
		
#Область ЗаполнениеДополнительныхРеквизитовНоменклатуры	
		Для Каждого ТекСвойствоТовара из ТаблицаСвойствТовара Цикл
			
			Если НЕ ТекСвойствоТовара.ЭтоСвойствоНоменклатуры тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ТекСвойствоТовара.ЭтоДополнительноеСведение И ТекСвойствоТовара.ПоддерживаетсяСвойство тогда   					
				Если ТекСвойствоТовара.ЗначениеОчищено тогда
					Если ЭтоНоваяНоменклатура тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого ЗаполненнеСвойствоТовара из Номенклатура.ДополнительныеРеквизиты Цикл
						Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойствоТовара.Свойство тогда
							ЗаполненнеСвойствоТовара.Значение = Неопределено;
						КонецЕсли;
					КонецЦикла;
				Иначе
					
					ЕстьРеквизит = Ложь;
					Для Каждого ЗаполненнеСвойствоТовара из Номенклатура.ДополнительныеРеквизиты Цикл
						Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойствоТовара.Свойство тогда
							ЗаполненнеСвойствоТовара.Значение = ТекСвойствоТовара.ЗначениеСвойства;
							Если ТипЗнч(ТекСвойствоТовара.ЗначениеСвойства) = Тип("Строка") тогда
								ЗаполненнеСвойствоТовара.ТекстоваяСтрока = ТекСвойствоТовара.ЗначениеСвойства;
							КонецЕсли;
							ЕстьРеквизит = Истина
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЕстьРеквизит тогда
						НовыйРеквизит = Номенклатура.ДополнительныеРеквизиты.Добавить();
						НовыйРеквизит.Свойство 	= ТекСвойствоТовара.Свойство; 
						НовыйРеквизит.Значение 	= ТекСвойствоТовара.ЗначениеСвойства; 
						Если ТипЗнч(ТекСвойствоТовара.ЗначениеСвойства) = Тип("Строка") тогда
							НовыйРеквизит.ТекстоваяСтрока = ТекСвойствоТовара.ЗначениеСвойства;
						КонецЕсли;
					КонецЕсли;	
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
#КонецОбласти	
		
		
#КонецОбласти	
		
		
#Область СозданиеОбновлениеХарактеристикиНоменклатуры	
		
		Если ЕстьХарактеристика тогда
			Если ЭтоНоваяХарактеристика тогда
				Характеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
			Иначе
				Характеристика = Характеристика.ПолучитьОбъект();
			КонецЕсли;
			
			Характеристика.ПометкаУдаления 		= НЕ Активность;
			Характеристика.Наименование 	 	= НаименованиеХарактеристики;
			Характеристика.НаименованиеПолное 	= ПолноеНаименованиеХарактеристики;
			
#Область ЗаполнениеДополнительныхРеквизитовХарактеристикНоменклатуры	
			Для Каждого ТекСвойствоТовара из ТаблицаСвойствТовара Цикл
				
				Если ТекСвойствоТовара.ЭтоСвойствоНоменклатуры тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ТекСвойствоТовара.ЭтоДополнительноеСведение И ТекСвойствоТовара.ПоддерживаетсяСвойство тогда   					
					Если ТекСвойствоТовара.ЗначениеОчищено тогда
						Если ЭтоНоваяХарактеристика тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого ЗаполненнеСвойствоТовара из Характеристика.ДополнительныеРеквизиты Цикл
							Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойствоТовара.Свойство тогда
								ЗаполненнеСвойствоТовара.Значение = Неопределено;
							КонецЕсли;
						КонецЦикла;
					Иначе
						
						ЕстьРеквизит = Ложь;
						Для Каждого ЗаполненнеСвойствоТовара из Характеристика.ДополнительныеРеквизиты Цикл
							Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойствоТовара.Свойство тогда
								ЗаполненнеСвойствоТовара.Значение = ТекСвойствоТовара.ЗначениеСвойства;
								ЕстьРеквизит = Истина
							КонецЕсли;
						КонецЦикла;
						
						Если НЕ ЕстьРеквизит тогда
							НовыйРеквизит = Характеристика.ДополнительныеРеквизиты.Добавить();
							НовыйРеквизит.Свойство 	= ТекСвойствоТовара.Свойство; 
							НовыйРеквизит.Значение 	= ТекСвойствоТовара.ЗначениеСвойства; 
						КонецЕсли;	
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
#КонецОбласти	
			
		КонецЕсли;		
#КонецОбласти	
		
		Попытка
			Номенклатура.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Номенклатура.Записать();
			Если ЕстьХарактеристика тогда
				
				Если Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры тогда
					Характеристика.Владелец = Номенклатура.Ссылка;
				ИначеЕсли Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры тогда
					Характеристика.Владелец = Номенклатура.ВидНоменклатуры;
				ИначеЕсли Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры тогда
					Характеристика.Владелец = Номенклатура.ВидНоменклатуры.ВладелецХарактеристик;
				КонецЕсли;       				
				Характеристика.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				Характеристика.Записать();
			КонецЕсли;
			
			ДанныеДляИД = Новый Структура;
			ДанныеДляИД.Вставить("Объект", Номенклатура.Ссылка);
			ДанныеДляИД.Вставить("ПодчиненныйОбъект", ?(ЕстьХарактеристика, Характеристика.Ссылка, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Товар, ДанныеДляИД, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записана номенклатуры: " + Наименование);
			
#Область ЗаполнениеПользователькогоДереваДляТовара		
			
			Если ЕстьДеревоГрупп тогда
				
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель, ОбщиеНастройки.ДеревоГрупп);
				
				Если НЕ ЭтоНоваяНоменклатура тогда
					
					НайденныеРазделыСТоваром = тзнПользовательскогоДереваГрупп.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура.Ссылка));
					
					Для Каждого НайденныйРаздел из НайденныеРазделыСТоваром Цикл
						
						РазделОбъект = НайденныйРаздел.Раздел.ПолучитьОбъект(); 
						
						тзнВремТоваровРездела = РазделОбъект.Товары.Выгрузить();
						
						РазделОбъект.Товары.Очистить();
						
						Для каждого ТоварРаздела из тзнВремТоваровРездела Цикл
							
							Если ТоварРаздела.Номенклатура <> Номенклатура.Ссылка тогда
								НоваяСтрока = РазделОбъект.Товары.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ТоварРаздела); 
							КонецЕсли;
							
						КонецЦикла;
						РазделОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
						РазделОбъект.Записать();
						
					КонецЦикла;
					РазделОбъект = Справочники.Б24_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
					РазделОбъект.товары.Выгрузить()
				КонецЕсли;
				
				РодительОбъект = Родитель.ПолучитьОбъект();
				
				НовыйТоварРаздела= РодительОбъект.Товары.Добавить();
				НовыйТоварРаздела.Номенклатура = Номенклатура.Ссылка;
				
				РодительОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				РодительОбъект.Записать();	
				
			КонецЕсли;	
#КонецОбласти	
			
			
#Область ЗаполнениеДополнительногоСведенияНоменклатуры	
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Номенклатура.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого ТекСвойствоТовара из ТаблицаСвойствТовара Цикл
				
				Если НЕ ТекСвойствоТовара.ЭтоСвойствоНоменклатуры тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСвойствоТовара.ЭтоДополнительноеСведение И ТекСвойствоТовара.ПоддерживаетсяСвойство тогда   					
					Если НЕ ТекСвойствоТовара.ЗначениеОчищено тогда
						
						ЕстьСвойство = Ложь;
						Для Каждого ТекСтрока из НаборЗаписей Цикл
							Если ТекСтрока.Свойство = ТекСвойствоТовара.Свойство тогда
								ЕстьСвойство = Истина;
								ТекСтрока.Значение = ТекСвойствоТовара.ЗначениеСвойства;	
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьСвойство = Ложь тогда
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Объект = Номенклатура.Ссылка;
							НоваяЗапись.Свойство = ТекСвойствоТовара.Свойство;
							НоваяЗапись.Значение = ТекСвойствоТовара.ЗначениеСвойства;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			НаборЗаписей.Записать();
#КонецОбласти	
			
#Область ЗаполнениеДополнительногоСведенияХарактеристикиНоменклатуры	
			Если ЕстьХарактеристика тогда
				Для Каждого ТекСвойствоТовара из ТаблицаСвойствТовара Цикл
					
					Если ТекСвойствоТовара.ЭтоСвойствоНоменклатуры тогда
						Продолжить;
					КонецЕсли;
					
					Если ТекСвойствоТовара.ЭтоДополнительноеСведение И ТекСвойствоТовара.ПоддерживаетсяСвойство тогда   					
						Если ТекСвойствоТовара.ЗначениеОчищено тогда
							Если ЭтоНоваяХарактеристика тогда
								Продолжить;
							КонецЕсли;
							
							Выборка = РегистрыСведений.ДополнительныеСведения.Выбрать(Новый Структура("Объект", Характеристика.Ссылка));
							Пока Выборка.Следующий() Цикл
								Если Выборка.Свойство = ТекСвойствоТовара.Свойство тогда
									Выборка.ПолучитьМенеджерЗаписи().Удалить();	
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						Иначе
							
							НовоеСведение = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
							НовоеСведение.Объект 	= Характеристика.Ссылка; 
							НовоеСведение.Свойство 	= ТекСвойствоТовара.Свойство; 
							НовоеСведение.Значение 	= ТекСвойствоТовара.ЗначениеСвойства; 
							НовоеСведение.Записать();	
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;			
#КонецОбласти	
			
#Область СохранениеАдресаКартинки	
			Если ОбщиеНастройки.НастройкиСинхронизацииТоваров.ЗагружатьКартинкиИФайлы тогда
				Если ЗначениеЗаполнено(ДетальнаяКартинка) тогда
					АдресКартинки = ДетальнаяКартинка.Получить("downloadUrl");
					Если ЗначениеЗаполнено(АдресКартинки) тогда
						
						//ИнформацияОКартинке = Новый Структура;
						//ИнформацияОКартинке.Вставить("Номенклатура"	, Номенклатура.Ссылка); 
						//ИнформацияОКартинке.Вставить("АдресКартинки", АдресКартинки); 
						//
						//ОбщиеНастройки.КартинкиИФайлыНоменклатуры.Добавить(ИнформацияОКартинке);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
#КонецОбласти	
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи товара: " + Наименование + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.КартинкиИФайлыНоменклатуры 	= ОбщиеНастройки.КартинкиИФайлыНоменклатуры; 		
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуТоваровИДереваГрупп(ОбщиеНастройки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Инфоблок", ОбщиеНастройки.ДеревоГрупп); 
	
	Запрос.Текст = 	"ВЫБРАТЬ
	|	Б24_ПользовательскиеГруппыТоваровТовары.Ссылка КАК Раздел,
	|	Номенклатура1.Ссылка КАК Номенклатура,
	|	Номенклатура1.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВремПользовательскиеГруппы
	|ИЗ
	|	Справочник.Б24_ПользовательскиеГруппыТоваров.Товары КАК Б24_ПользовательскиеГруппыТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	|		ПО Б24_ПользовательскиеГруппыТоваровТовары.Номенклатура = Номенклатура1.Ссылка
	|ГДЕ
	|	Б24_ПользовательскиеГруппыТоваровТовары.Ссылка В ИЕРАРХИИ(&Инфоблок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремПользовательскиеГруппы.Раздел КАК Раздел,
	|	Номенклатура1.Ссылка КАК Номенклатура,
	|	Номенклатура1.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВремГруппы1
	|ИЗ
	|	ВремПользовательскиеГруппы КАК ВремПользовательскиеГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	|		ПО ВремПользовательскиеГруппы.Номенклатура = Номенклатура1.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ

	|	ВремГруппы1.Раздел КАК Раздел,
	|	Номенклатура1.Ссылка КАК Номенклатура,
	|	Номенклатура1.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВремГруппы2
	|ИЗ
	|	ВремГруппы1 КАК ВремГруппы1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	|		ПО ВремГруппы1.Номенклатура = Номенклатура1.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ

	|	ВремГруппы2.Раздел КАК Раздел,
	|	Номенклатура1.Ссылка КАК Номенклатура,
	|	Номенклатура1.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВремГруппы3
	|ИЗ
	|	ВремГруппы2 КАК ВремГруппы2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура1
	|		ПО ВремГруппы2.Номенклатура = Номенклатура1.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ

	|	ВремПользовательскиеГруппы.Раздел КАК Раздел,
	|	ВремПользовательскиеГруппы.Номенклатура КАК Номенклатура,
	|	ВремПользовательскиеГруппы.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВремТоварыДерева
	|ИЗ
	|	ВремПользовательскиеГруппы КАК ВремПользовательскиеГруппы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ

	|	ВремГруппы3.Раздел,
	|	NULL,
	|	ВремГруппы3.ЭтоГруппа
	|ИЗ
	|	ВремГруппы3 КАК ВремГруппы3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ

	|	ВремГруппы2.Раздел,
	|	ВремГруппы2.Номенклатура,
	|	ВремГруппы2.ЭтоГруппа
	|ИЗ
	|	ВремГруппы2 КАК ВремГруппы2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ

	|	ВремГруппы1.Раздел,
	|	ВремГруппы1.Номенклатура,
	|	ВремГруппы1.ЭтоГруппа
	|ИЗ
	|	ВремГруппы1 КАК ВремГруппы1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремПользовательскиеГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремГруппы1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремГруппы2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремГруппы3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремТоварыДерева.Номенклатура КАК Номенклатура,
	|	ВремТоварыДерева.Раздел КАК Раздел
	|ИЗ
	|	ВремТоварыДерева КАК ВремТоварыДерева
	|ГДЕ
	|	ВремТоварыДерева.ЭтоГруппа = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьСвойстваТовараВТаблицу(ОбщиеНастройки, МенеджерВременныхТаблиц, ИнформацияОТоваре, ТаблицаСвойств)
	
	мСвойстваИсключения = ОбщиеНастройки.ИсключающиеСвойства;
	
	тзнЗначенийСвойствТовара = новый ТаблицаЗначений;
	тзнЗначенийСвойствТовара.Колонки.Добавить("Свойство");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЗначениеСвойства");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ПоддерживаетсяСвойство");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЗначениеОчищено");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЭтоДополнительноеСведение");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЭтоСвойствоНоменклатуры");
	
	Для Каждого ТекСвойство Из ТаблицаСвойств Цикл
		
		Свойство = ТекСвойство.Объект;
		
		Если мСвойстваИсключения.Найти(Свойство) <> Неопределено тогда
			Продолжить;			
		КонецЕсли;
		
		НовоеЗначениеСвойстваТовара = тзнЗначенийСвойствТовара.Добавить();
		
		НовоеЗначениеСвойстваТовара.Свойство 					= Свойство;
		НовоеЗначениеСвойстваТовара.ЭтоСвойствоНоменклатуры		= ТекСвойство.ЭтоСвойствоНоменклатуры;
		НовоеЗначениеСвойстваТовара.ПоддерживаетсяСвойство 		= Истина;
		НовоеЗначениеСвойстваТовара.ЗначениеОчищено 			= Ложь;
		НовоеЗначениеСвойстваТовара.ЭтоДополнительноеСведение 	= Свойство.ЭтоДополнительноеСведение;
		
		ЗначениеСвойстваСПортала = ИнформацияОТоваре.Получить("PROPERTY_" + ТекСвойство.Идентификатор);
		
		Если ЗначениеСвойстваСПортала <> Неопределено тогда
			
			ТипСвойстваСтрокой = Строка(Свойство.ТипЗначения);
			
			Если ТипСвойстваСтрокой = "Строка" тогда
				
				ЗначениеСвойства = ЗначениеСвойстваСПортала.Получить("value");
				
				Если ТипЗнч(ЗначениеСвойства) = Тип("Соответствие") тогда
					НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ЗначениеСвойства.Получить("TEXT"));
				Иначе
					НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ЗначениеСвойства);
				КонецЕсли;
				
			ИначеЕсли ТипСвойстваСтрокой = "Число" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ЗначениеСвойстваСПортала.Получить("value"));
			ИначеЕсли ТипСвойстваСтрокой = "Дата" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), ЗначениеСвойстваСПортала.Получить("value"));
			ИначеЕсли ТипСвойстваСтрокой = "Пользователь" тогда
				
				НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти( ЗначениеСвойстваСПортала.Получить("value"), "ИдПользователя");	
				
				Если НайденнаяСтрока <> Неопределено тогда
					НовоеЗначениеСвойстваТовара.ЗначениеСвойства = НайденнаяСтрока.Пользователь1С;
				КонецЕсли;
				
			ИначеЕсли ТипСвойстваСтрокой = "Дополнительное значение" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств",  ЗначениеСвойстваСПортала.Получить("value"));
			Иначе
				НовоеЗначениеСвойстваТовара.ПоддерживаетсяСвойство = Ложь;	
			КонецЕсли;
			
		Иначе
			НовоеЗначениеСвойстваТовара.ЗначениеОчищено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат тзнЗначенийСвойствТовара;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьСчета(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
#Область ФормированиеВременныхТаблицДанных		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанныхСчет"			, ОбщиеНастройки.ТипыОбъектовОбмена.Счет);
	Запрос.УстановитьПараметр("ТипДанныхСделка"			, ОбщиеНастройки.ТипыОбъектовОбмена.Сделка);
	Запрос.УстановитьПараметр("ТипДанныхКомпания"		, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтакт"		, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхТовар"			, ОбщиеНастройки.ТипыОбъектовОбмена.Товар);
	Запрос.УстановитьПараметр("ТипДанныхЕдИзм"			, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ТипДанныхБанкСчет"		, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхСвойств"		, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыСделок
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСделка
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтакт
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпаний
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпания
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыТоваров
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхТовар
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыБанкСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхБанкСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСвойств
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЕдИзм
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЕдИзм
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	Запрос.Выполнить();
	#КонецОбласти	
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных.ИнформацияОСчетах Цикл	
		
		ИдЭлемента	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("ID"),"ЧГ=0"));
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Продолжить;	
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ЕстьКритическиеОшибки = Ложь;
		
		ВнешнийКод				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("XML_ID"));
		Комментарий				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("COMMENTS"));
		КомментарийПользователя	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("USER_DESCRIPTION"));
		ДатаВыставления			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), ТекЭлемент.Получить("DATE_BILL"));
		ОплатаДо				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), ТекЭлемент.Получить("DATE_PAY_BEFORE"));
		СуммаДокумента			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ТекЭлемент.Получить("PRICE"));
		СтавкаНДС				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("TAX_VALUE"));
		ТемаСчета				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("ORDER_TOPIC"));
		НомерСчетаБ24			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("ACCOUNT_NUMBER"));
		ОписаниеОплатыОтмены	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("REASON_MARKED"));
		
		Оплачен					= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("PAYED"))= "Y";
		
		ИдКомпании				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("UF_COMPANY_ID"),"ЧГ=0"));
		ИдКонтакта				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("UF_CONTACT_ID"),"ЧГ=0"));
		
		ИдОрганизации			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("UF_MYCOMPANY_ID"),"ЧГ=0"));
		ИдСделки				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("UF_DEAL_ID"),"ЧГ=0"));
		ИдСтатуса				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("STATUS_ID"),"ЧГ=0"));
		ИдСотрудника			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("RESPONSIBLE_ID"),"ЧГ=0"));
		
		ИдБанкСчетаОрганизации	= Формат(Б24_RestApiКлиентСервер.ПолучитьЗначниеИзМассиваСоответствий(мДанных.ИнформацияОРеквизитахСчетов, "ENTITY_ID", ИдЭлемента, "MC_BANK_DETAIL_ID"),"ЧГ=0");
		
		КодВалюты 				= ПолучитьКодПоВалюте(Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("CURRENCY")));
		
		Товары 					= ТекЭлемент.Получить("PRODUCT_ROWS");
		
		Если ДатаВыставления < ОбщиеНастройки.НастройкиСинхронизацииСчетов.ДатаНачалаЗагрузкиСчетов тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Счет с ид:  " + Строка(ИдЭлемента) + " будет пропущена т.к. дата выставления счета  меньше даты, с которой счета  загружаются в 1С.");
			Продолжить;  			
		КонецЕсли;
		
		Если ОбщиеНастройки.НастройкиСинхронизацииСчетов.Свойство("ИнформацияОСтатусах") тогда	
			ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииСчетов.ИнформацияОСтатусах;
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоСчета" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияЗначенийСвойств;				
			КонецЕсли;
		Иначе
			ИнформацияОСтатусах = Неопределено;
		КонецЕсли;
		
		Если ИнформацияОСтатусах <> Неопределено тогда
			
			ПропускаемСчетИзЗаСтатуса = Ложь;
			
			НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
			
			Если НайденнаяСтрока <> Неопределено тогда
				ПропускаемСчетИзЗаСтатуса = НайденнаяСтрока.НеЗагружать;	
			КонецЕсли;				
			
			Если ПропускаемСчетИзЗаСтатуса тогда			
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Счет с ид:  " + Строка(ИдЭлемента) + " будет пропущена т.к. не стоит, что с таким статусом документ не загружается в 1С.");
				Продолжить;  			
			КонецЕсли;					
		КонецЕсли;				
		
		Если Товары = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В счете с ид: "+ИдЭлемента+" не указаны товары. Счет будет пропущен.");
			Продолжить;  				
		КонецЕсли;
		
		Организация 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКомпаний", ИдОрганизации);	
		Подразделение 	= ОбщиеНастройки.НастройкиСинхронизацииСчетов.Подразделение;
		
		Если НЕ ЗначениеЗаполнено(Организация) тогда
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена организация по ид. Попытка создания организации с Ид: " + ИдОрганизации);
			Организация = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Компания", ИдОрганизации);
			
			Если НЕ ЗначениеЗаполнено(Организация) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена организация с Ид: " + ИдОрганизации);
				ЕстьКритическиеОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
#Область ПоискСозданиеСчета		
		ЭтоНовыйСчет = Ложь;
		
		Счет = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыСчетов", ИдЭлемента);	
		
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(Счет) тогда
			Счет = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.СчетНаОплатуКлиенту"), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Счет) тогда 
			
			Счет = Документы.СчетНаОплатуКлиенту.СоздатьДокумент();
			ЭтоНовыйСчет = Истина;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииСчетов.ОбновлятьСчета тогда
				Счет = Счет.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что счета не обновляются. Счет: " + Строка(Счет) + " не будет обновлена.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Если ЭтоНовыйСчет тогда
			Счет.Дата 		= ТекущаяДата();
		КонецЕсли;
		
		Счет.Организация	= Организация;
		
		Если ОбщиеНастройки.НастройкиСинхронизацииСчетов.ИсточникДатыДокумента = "По данным с Битрикс24" тогда
			Счет.Дата = ДатаВыставления;	
		КонецЕсли;
		
		Если ЭтоНовыйСчет тогда
			Если ОбщиеНастройки.НастройкиСинхронизацииСчетов.ИсточникНомераДокумента = "По данным с Битрикс24" тогда
				Счет.Номер = НомерСчетаБ24;	
			Иначе
				Счет.УстановитьНовыйНомер();
				//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Счет, Истина, "");					
			КонецЕсли;
		КонецЕсли;
		
		БанкСчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
#Область ПоискБанкСчетаРеквизита	
		БанкСчетОрганизации = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыБанкСчетов", ИдБанкСчетаОрганизации);	
		Если НЕ ЗначениеЗаполнено(БанкСчетОрганизации) И НЕ(ИдБанкСчетаОрганизации = "" ИЛИ ИдБанкСчетаОрганизации = "0") тогда
			
			Если Не ЗначениеЗаполнено(БанкСчетОрганизации) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден банковский счет организации. Попытка создания банковского счета с Ид: " + ИдБанкСчетаОрганизации);
				БанкСчетОрганизации = СформироватьБанковскийСчетПоИд(ОбщиеНастройки, ИдБанкСчетаОрганизации);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(БанкСчетОрганизации) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден счет организация с Ид: " + ИдОрганизации);
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	
		
		Партнер 		= Справочники.Партнеры.ПустаяСсылка();
		КонтактноеЛицо 	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Контакт			= "";
		Компания		= "";
#Область ПоискКонтрагента
		Если НЕ(ИдКонтакта = "" ИЛИ ИдКонтакта = "0") тогда
			Контакт 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКонтактов", ИдКонтакта);
			
			Если НЕ ЗначениеЗаполнено(Контакт) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден контакт по ид. Попытка создания контакта с Ид: " + ИдКонтакта);
				Контакт = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Контакт", ИдКонтакта);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКонтакта;
		КонецЕсли;
		
		Если НЕ(ИдКомпании = "" ИЛИ ИдКомпании = "0") тогда
			Компания 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКомпаний", ИдКомпании);	
			
			Если НЕ ЗначениеЗаполнено(Компания) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена компания по ид. Попытка создания компании с Ид: " + ИдКомпании);
				Компания = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Компания", ИдКомпании);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКомпании;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Компания) тогда
			Партнер = Компания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакт) тогда
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") тогда
				КонтактноеЛицо = Контакт;
			ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") тогда
				Если ЗначениеЗаполнено(Компания) тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Партнерами являются и компания и контакт. Установлен будет из компании");
					ЕстьКритическиеОшибки = Истина;                                                                                     
				Иначе
					Партнер = Контакт;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Партнер) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена компания/контакт с Ид: " + ИдКомпании+"/"+ИдКонтакта);
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
#КонецОбласти	
		
		Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		
		Счет.БанковскийСчет				= БанкСчетОрганизации;
		Счет.Партнер					= Партнер;
		
//		Если ЗначениеЗаполнено(Партнер) И ЗначениеЗаполнено(Организация) И НЕ ЗначениеЗаполнено(Счет.Договор) тогда
//			Счет.Договор				= ПолучитьДоговор(ОбщиеНастройки, Организация, Контрагент, Валюта);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ИдСделки) тогда
//			
//			Сделка = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыСделок", ПреффиксыВнешнихКодовБитрикс24.Сделки + ИдСделки);
//			
//			Если НЕ ЗначениеЗаполнено(Сделка) тогда
//			
//				Если ОбщиеНастройки.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьСделки") = Истина тогда
//					Сделка = СформироватьСделкуПоИд(ОбщиеНастройки, ИдСделки);
//				КонецЕсли;
//				
//			КонецЕсли;
//			Счет.ДокументОснование		= ?(ЗначениеЗаполнено(Сделка), Сделка, Счет.ДокументОснование);
//		КонецЕсли;
//		
//		Счет.ВалютаДокумента 			= Валюта;
//		Счет.Курс 	 					= 1;
//		Счет.Кратность 					= 1;
//		Счет.ВидЦен						= ОбщиеНастройки.НастройкиСинхронизацииТоваров.ТипЦены;
//		Счет.СуммаДокумента				= СуммаДокумента;
//		Счет.ТипДенежныхСредств 		= Перечисления.ТипыДенежныхСредств.Безналичные; 
//		Счет.Комментарий				= Комментарий;
//		Счет.ХозяйственнаяОперация 		= Справочники.ХозяйственныеОперации.СчетНаОплатуКлиенту;
//		
//		Счет.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Счет.Организация,, Счет.Дата);
//		Счет.Касса 				= Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
//		Счет.УсловияСчетаЗаказа = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
//		Счет.Автор 				= ПараметрыСеанса.ТекущийПользователь;	
//		
//		Счет.СкидкиРассчитаны 	= Истина;
//		
//		Счет.СтоимостьДоставки		= 0;
//		Счет.СтавкаНДСДоставки 		= Неопределено;
//		Счет.СуммаНДСДоставки		= 0;
//		
//#Область ЗаполнениеОтветственного		
//		Ответственный 	= Неопределено;
//		Если ЗначениеЗаполнено(ИдСотрудника) тогда
//			НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти(ИдСотрудника, "ИдПользователя");
//			Если НайденнаяСтрока <> Неопределено тогда
//				Ответственный = НайденнаяСтрока.Пользователь1С; 
//			КонецЕсли;
//		КонецЕсли;
//		Счет.Ответственный 	= Ответственный;
//#КонецОбласти	
//		
//#Область ДобавлениеДополнительногоРеквизитаСтатуса
//		Если ИнформацияОСтатусах <> Неопределено тогда			
//			
//			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоСчета" тогда
//				
//				ЗначениеСвойства = Неопределено;
//				
//				НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
//				
//				Если НайденнаяСтрока <> Неопределено тогда
//					ЗначениеСвойства = НайденнаяСтрока.Статус;	
//				КонецЕсли;
//				
//				НайденноеСвойствоТЧ = Счет.ДополнительныеРеквизиты.Найти(ИнформацияОСтатусах.СвойствоСчета, "Свойство");
//				Если НайденноеСвойствоТЧ = Неопределено тогда
//					НовыйРеквизит = Счет.ДополнительныеРеквизиты.Добавить();
//					НовыйРеквизит.Значение = ЗначениеСвойства;
//					НовыйРеквизит.Свойство = ИнформацияОСтатусах.СвойствоСчета;
//				Иначе
//					НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//#КонецОбласти	
//		
//#Область ДобавлениеДополнительныхРеквизитовДокумента	
//		
//		НайденноеСвойствоТЧ = Счет.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНазваниеТемыСчета, "Свойство");
//		Если НайденноеСвойствоТЧ = Неопределено тогда
//			НовыйРеквизит = Счет.ДополнительныеРеквизиты.Добавить();
//			НовыйРеквизит.Значение = ТемаСчета;
//			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНазваниеТемыСчета;
//		Иначе
//			НайденноеСвойствоТЧ.Значение = ТемаСчета;	
//		КонецЕсли;
//		
//		НайденноеСвойствоТЧ = Счет.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНомерСчетаБитрикс24, "Свойство");
//		Если НайденноеСвойствоТЧ = Неопределено тогда
//			НовыйРеквизит = Счет.ДополнительныеРеквизиты.Добавить();
//			НовыйРеквизит.Значение = НомерСчетаБ24;
//			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНомерСчетаБитрикс24;
//		Иначе
//			НайденноеСвойствоТЧ.Значение = НомерСчетаБ24;	
//		КонецЕсли;
//		
//		НайденноеСвойствоТЧ = Счет.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоДатаСчетаБитрикс24, "Свойство");
//		Если НайденноеСвойствоТЧ = Неопределено тогда
//			НовыйРеквизит = Счет.ДополнительныеРеквизиты.Добавить();
//			НовыйРеквизит.Значение = ДатаВыставления;
//			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоДатаСчетаБитрикс24;
//		Иначе
//			НайденноеСвойствоТЧ.Значение = ДатаВыставления;	
//		КонецЕсли;
//		
//		НайденноеСвойствоТЧ = Счет.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНазваниеКомментарияСчета, "Свойство");
//		Если НайденноеСвойствоТЧ = Неопределено тогда
//			НовыйРеквизит = Счет.ДополнительныеРеквизиты.Добавить();
//			НовыйРеквизит.Значение = КомментарийПользователя;
//			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНазваниеКомментарияСчета;
//		Иначе
//			НайденноеСвойствоТЧ.Значение = КомментарийПользователя;	
//		КонецЕсли;
//		
//#КонецОбласти		
//		
//#Область ЗаполнениеТоваров	
//		
//		Счет.Запасы.Очистить();	
//		Для Каждого ТоварСчета из Товары Цикл
//			
//			ИдТовара			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварСчета.Получить("PRODUCT_ID"),"ЧГ=0"));
//			ВнешнийКодТовара	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТоварСчета.Получить("PRODUCT_XML_ID"));
//			ИдЕдИзм				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварСчета.Получить("MEASURE_CODE"),"ЧГ=0"));
//			НаименованиеТовара	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТоварСчета.Получить("PRODUCT_NAME"));
//			
//			Количество			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ТоварСчета.Получить("QUANTITY"));
//			Цена				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ТоварСчета.Получить("PRICE"));
//			Скидка				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ТоварСчета.Получить("DISCOUNT_PRICE"));
//			
//			СтавкаНалога		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ТоварСчета.Получить("VAT_RATE"));
//			СтавкаНалога 		= ?(ЗначениеЗаполнено(СтавкаНалога),СтавкаНалога,0);
//			
//			НалогВключен		  = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТоварСчета.Получить("VAT_INCLUDED"))= "Y";
//			
//			Счет.СуммаВключаетНДС = НалогВключен;
//			
//			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
//#Область ПоискЕдиницыИзмерения	
//			Если ЗначениеЗаполнено(ИдЕдИзм) тогда
//				ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ИдЕдИзм);;
//			КонецЕсли;
//			
//			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена единица измерения по ид. Попытка создания единицы измерения с Ид: " + ИдЕдИзм);
//				ЕдиницаИзмерения = СформироватьЕдиницуИзмеренияПоИд(ОбщиеНастройки, ИдЕдИзм);
//			КонецЕсли;
//#КонецОбласти	
//			
//			Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка();
//			Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
//#Область ПоискТовара	
//			СтруктураИдентификаторовТовара = Б24_СинхронизацияВызовСервера.ПолучитьДвеСоставныеЧастиИзСтроки(ВнешнийКодТовара, "#");
//			ИдВнешнийНоменклатуры 	= СтруктураИдентификаторовТовара.ПерваяЧасть;
//			ИдВнешнийХарактеристики = СтруктураИдентификаторовТовара.ВтораяЧасть;
//			
//			Если ИдВнешнийХарактеристики = "" тогда
//				ЕстьХарактеристика 		= Ложь;
//			Иначе
//				ЕстьХарактеристика 		= Истина;
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(ИдТовара) Тогда
//				
//				ИнформацияОНоменклатуре = Неопределено;	
//				
//				Запрос = новый Запрос;
//				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
//				Запрос.УстановитьПараметр("Идентификатор", ИдТовара);
//				
//				Запрос.Текст = "ВЫБРАТЬ
//				|	ВремИдентификаторы.Объект КАК Объект,
//				|	ВремИдентификаторы.ПодчиненныйОбъект КАК ПодчиненныйОбъект
//				|ИЗ
//				|	ВремИдентификаторыТоваров КАК ВремИдентификаторы
//				|ГДЕ
//				|	ВремИдентификаторы.Идентификатор = &Идентификатор";
//				
//				ВыполненныйЗапрос = Запрос.Выполнить();
//				
//				Если НЕ ВыполненныйЗапрос.Пустой() тогда
//					Выборка = ВыполненныйЗапрос.Выбрать();
//					Пока Выборка.Следующий() Цикл
//						ИнформацияОНоменклатуре = Выборка;
//						Прервать;
//					КонецЦикла;
//				КонецЕсли;
//				
//				Номенклатура 	= ?(ИнформацияОНоменклатуре = Неопределено, Номенклатура	, ИнформацияОНоменклатуре.Объект);
//				Характеристика  = ?(ИнформацияОНоменклатуре = Неопределено, Характеристика	, ИнформацияОНоменклатуре.ПодчиненныйОбъект);
//				
//				Если ЗначениеЗаполнено(ИдВнешнийНоменклатуры) И НЕ ЗначениеЗаполнено(Номенклатура) тогда
//					Номенклатура = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.Номенклатура"), ИдВнешнийНоменклатуры);
//				КонецЕсли;
//				
//				Если ЗначениеЗаполнено(ИдВнешнийХарактеристики) И НЕ ЗначениеЗаполнено(Характеристика) тогда
//					Характеристика = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), ИдВнешнийХарактеристики);
//				КонецЕсли;
//				
//				Если НЕ ЗначениеЗаполнено(Номенклатура) тогда
//					
//					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден товар по ид. Попытка создания товара с Ид: " + ИдТовара);
//					ИнформацияОНоменклатуре = СформироватьНоменклатуруПоИд(ОбщиеНастройки, ИдТовара);
//					
//					Если ИнформацияОНоменклатуре <> Неопределено тогда
//						Номенклатура   = ИнформацияОНоменклатуре.Объект;	
//						Характеристика = ИнформацияОНоменклатуре.ПодчиненныйОбъект;	
//					КонецЕсли;
//				КонецЕсли; 
//				
//				Если НЕ ЗначениеЗаполнено(Номенклатура) тогда
//					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена информация о номенклатуре с Ид: " + ИдТовара);
//					ЕстьКритическиеОшибки = Истина;
//				КонецЕсли; 
//				
//			Иначе
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "В счете был указан не товар, а строка. Товар: " + НаименованиеТовара + " в счет: " + Строка(Счет) + " не будет указан.");
//			КонецЕсли; 			
//#КонецОбласти	
//			Номенклатура = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, Справочники.Номенклатура.ПустаяСсылка());
//			
//			СтавкаНДС = ПолучитьСтавкуНДСПоСтавке(ОбщиеНастройки, СтавкаНалога*100);
//			Если НЕ ЗначениеЗаполнено(СтавкаНДС) тогда СтавкаНДС = Номенклатура.СтавкаНДС КонецЕсли;

//			Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения КонецЕсли;

//			Если НалогВключен тогда
//				ЦенаИтого 		= Цена+Скидка+Скидка*СтавкаНалога;	
//				СкидкаИтого 	= Скидка;
//				
//				СуммаИтого 		= Цена*Количество;
//				СуммаНДСИтого	= СуммаИтого/(СтавкаНалога+1)*СтавкаНалога;
//			Иначе
//				ЦенаИтого 		= Цена+Скидка;	
//				СкидкаИтого 	= Скидка;	
//				
//				СуммаИтого 		= (Цена+Цена*СтавкаНалога)*Количество;
//				СуммаНДСИтого	= СуммаИтого*СтавкаНалога;
//			КонецЕсли;
//			
//			Если Номенклатура = Счет.НоменклатураДоставки тогда
//				Если НалогВключен тогда
//					// ЦенаСоСкидкойСНалогом
//					Счет.СтоимостьДоставки		= Цена;
//					Счет.СтавкаНДСДоставки 		= СтавкаНДС;
//					Счет.СуммаНДСДоставки		= Счет.СтоимостьДоставки/(СтавкаНалога+1)*СтавкаНалога;  
//				Иначе
//					Счет.СтоимостьДоставки		= Цена;
//					Счет.СтавкаНДСДоставки 		= СтавкаНДС;
//					Счет.СуммаНДСДоставки		= Счет.СтоимостьДоставки * СтавкаНалога;  
//				КонецЕсли;
//				
//				Продолжить;	
//				
//			КонецЕсли;
//			
//			НоваяЗаписьТовара = Счет.Запасы.Добавить();
//			
//			НоваяЗаписьТовара.Номенклатура 		= Номенклатура;
//			НоваяЗаписьТовара.Характеристика 	= Характеристика;
//			
//			Если НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Содержание) И 
//				(Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(Номенклатура)) тогда
//				НоваяЗаписьТовара.Содержание = НаименованиеТовара;
//			КонецЕсли;
//			
//			НоваяЗаписьТовара.ЕдиницаИзмерения 	= ЕдиницаИзмерения;
//			
//			НоваяЗаписьТовара.Количество 	= Количество;
//			НоваяЗаписьТовара.Цена 			= ЦенаИтого;
//			НоваяЗаписьТовара.СтавкаНДС 	= СтавкаНДС;
//			НоваяЗаписьТовара.СуммаСкидкиНаценки= СкидкаИтого;
//			
//			
//			НоваяЗаписьТовара.Сумма 		= СуммаИтого;
//			НоваяЗаписьТовара.Всего 		= СуммаИтого;
//			НоваяЗаписьТовара.СуммаНДС		= СуммаНДСИтого;
//			
//			
//		КонецЦикла;
//		
//#КонецОбласти	
//		
//		ЭтоНовыйОбъект = Счет.Ссылка.Пустая()=Истина;
//		ТаблицаСвойств = РазобратьПользовательскиеПоляВТаблицу(ОбщиеНастройки, ТекЭлемент, МенеджерВременныхТаблиц);
//		ЗаполнениеДополнительныеРеквизитыОбъектов(ОбщиеНастройки, ТаблицаСвойств, Счет, ЭтоНовыйОбъект);
//		
//#Область ПроведениеДокумента
//		ОтменаПроведенияСОшибкой = Ложь;
//		Счет.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
//		Если (ОбщиеНастройки.НастройкиСинхронизацииСчетов.РежимЗаписиДокумента = "Проводить оплаченные" И Оплачен)
//			ИЛИ ОбщиеНастройки.НастройкиСинхронизацииСчетов.РежимЗаписиДокумента = "Проводить" тогда
//			
//			Попытка
//				Счет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Проведен документ: " + Строка(Счет));
//			Исключение
//				
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время проведения документа: " + Строка(Счет) + " возникли ошибки.");
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
//				
//				ЕстьКритическиеОшибки = Истина;
//				
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Попытка записи документа: " + Строка(Счет));
//				
//				Попытка
//					Счет.Записать(РежимЗаписиДокумента.Запись);
//					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан документ: " + Строка(Счет));
//				Исключение
//					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Счет) + " возникли ошибки.");
//					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
//			
//					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
//			
//				КонецПопытки;
//				
//			КонецПопытки;
//			
//		Иначе
//			Попытка
//				Если ЭтоНовыйОбъект ИЛИ НЕ Счет.Проведен тогда
//					Счет.Записать(РежимЗаписиДокумента.Запись); 
//				Иначе
//					Счет.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
//				КонецЕсли;
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан: " + Строка(Счет));
//			Исключение
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Счет) + " возникли ошибки.");
//				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
//				ОтменаПроведенияСОшибкой = Ложь;
//				ЕстьКритическиеОшибки = Истина;
//			
//				ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
//	
//			КонецПопытки;
//		КонецЕсли;
//		
//		
//		Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, НЕ ЕстьКритическиеОшибки)));
//#КонецОбласти	
//		
//		Если ЗначениеЗаполнено(Счет.Ссылка) тогда
//			
//			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Счет, Счет.Ссылка, ИдЭлемента);
//			
//			Если НЕ ОтменаПроведенияСОшибкой тогда
//				ЗаполнениеДополнительныеСведенияОбъектов(ОбщиеНастройки, ТаблицаСвойств, Счет.Ссылка, ЭтоНовыйОбъект);			
//			КонецЕсли;
//			
//			ЗаписатьКонтактДокумента(Счет.Ссылка, КонтактноеЛицо);
//			
//		КонецЕсли;
//		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьСделки(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ФормированиеВременныхТаблицДанных		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанныхСчет"			, ОбщиеНастройки.ТипыОбъектовОбмена.Сделка);
	Запрос.УстановитьПараметр("ТипДанныхКомпания"		, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтакт"		, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхТовар"			, ОбщиеНастройки.ТипыОбъектовОбмена.Товар);
	Запрос.УстановитьПараметр("ТипДанныхРеквизит"		, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	Запрос.УстановитьПараметр("ТипДанныхБанкСчет"		, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхСвойств"		, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыСделок
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтакт
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыРеквизитов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхРеквизит
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпаний
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпания
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиОплаты.Ссылка КАК ГрафикОплаты,
	|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
	|ПОМЕСТИТЬ ВремГрафикиОплаты
	|ИЗ
	|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
	|ГДЕ
	|	ГрафикиОплаты.ПометкаУдаления = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФормаОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВремИдентификаторыТоваров
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхТовар
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыБанкСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхБанкСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал	
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСвойств
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"";
	Запрос.Выполнить();
#КонецОбласти	
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных.ИнформацияОСделках Цикл	
		
		ИдБитрикс24	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("ID"),"ЧГ=0"));
		ИдЭлемента	= ПреффиксыВнешнихКодовБитрикс24.Сделки + ИдБитрикс24;
		
		Если ЗагруженныеОбъекты.Найти(ИдБитрикс24) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдБитрикс24);
		
		ЕстьКритическиеОшибки = Ложь;
		
		ВнешнийКод     	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("XML_ID"));
		Комментарий    	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("COMMENTS"));
		ТемаСделки     	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("TITLE"));
		
		СуммаДокумента 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("OPPORTUNITY"),"ЧГ=0"));
		ЦенаВклНДС 		= Б24_RestApiКлиентСервер.ПолучитьЗначниеИзМассиваСоответствий(мДанных.ИнформацияОТоварахСделок, "OWNER_ID", ИдБитрикс24, "TAX_INCLUDED")= "Y";		
		СуммаНДС       	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("TAX_VALUE"),"ЧГ=0"));
		КодВалюты 	   	= ПолучитьКодПоВалюте(Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("CURRENCY_ID"),"ЧГ=0")));
		
		ИдКомпании    	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("COMPANY_ID"),"ЧГ=0"));
		ИдКонтакта     	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("CONTACT_ID"),"ЧГ=0"));
		ИдРеквизита	   = Формат(Б24_RestApiКлиентСервер.ПолучитьЗначниеИзМассиваСоответствий(мДанных.ИнформацияОРеквизитахСделок, "ENTITY_ID", ИдБитрикс24, "REQUISITE_ID"),"ЧГ=0");
		ИдБанкСчетаРек 	= Формат(Б24_RestApiКлиентСервер.ПолучитьЗначниеИзМассиваСоответствий(мДанных.ИнформацияОРеквизитахСделок, "ENTITY_ID", ИдБитрикс24, "BANK_DETAIL_ID"),"ЧГ=0");
		
		ИдСотрудника   	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("ASSIGNED_BY_ID"),"ЧГ=0"));
		
		НомерСделкиБ24 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("ID"),"ЧГ=0"));
		ДатаНачала     		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("BEGINDATE"));
		ДатаЗавершения		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("CLOSEDATE"));
		Если НЕ ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДата();
		КонецЕсли;
		
		Открыт         = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("OPENED")) = "Y";
		Закрыт         = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("CLOSED")) = "Y";
		
		РезультатСделки= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("STAGE_SEMANTIC_ID")); //UNDEFINED = '';  PROCESS = 'P';  SUCCESS = 'S';  FAILURE = 'F';
		
		ИдСтатуса      	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"),   ТекЭлемент.Получить("STAGE_ID"));
		ИдНаправления  	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"),   ТекЭлемент.Получить("CATEGORY_ID"));
		ЕстьНаправление= НЕ (ИдНаправления = "" ИЛИ ИдНаправления = "0");
		ИдНаправления  = ?(ЕстьНаправление, ИдНаправления, "");		
		
		Если ДатаНачала < ОбщиеНастройки.НастройкиСинхронизацииСделок.ДатаНачалаЗагрузкиСделок тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Сделка с ид:  " + Строка(ИдБитрикс24) + " будет пропущена т.к. дата сделки меньше даты, с которой сделки загружаются в 1С.");
			Продолжить;  			
		КонецЕсли;		
		
		Если ОбщиеНастройки.НастройкиСинхронизацииСделок.Свойство("ИнформацияОСтатусах") тогда	
			ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииСделок.ИнформацияОСтатусах;
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СостоянияЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СтатусыНаправленийСостояний;	
			ИначеЕсли ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СтатусыНаправленийЗначенийСвойств;
			ИначеЕсли ИнформацияОСтатусах.ИсточникСтатусов1С = "СтатусыЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СтатусыНаправленийСтатусов;
			КонецЕсли;
		Иначе
			ИнформацияОСтатусах = Неопределено;
		КонецЕсли;
		
		Если ИнформацияОСтатусах <> Неопределено тогда
			
			ПропускаемСделкуИзЗаСтатуса = Ложь;
			
			НайденныеСтроки = тзнСтатусов.НайтиСтроки(Новый Структура("ИдСтатуса, ИдНаправления", ИдСтатуса, ИдНаправления));
			Если НайденныеСтроки.Количество() >0 тогда
				ПропускаемСделкуИзЗаСтатуса = НайденныеСтроки[0].НеЗагружать;	
			КонецЕсли;				
			
			Если ПропускаемСделкуИзЗаСтатуса тогда			
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Сделка с ид:  " + Строка(ИдБитрикс24) + " будет пропущена т.к.  т.к. не стоит, что с таким статусом документ не загружается в 1С.");
				Продолжить;  			
			КонецЕсли;					
		КонецЕсли;
		
		Организация    	= ОбщиеНастройки.НастройкиСинхронизацииСделок.Организация;
		Подразделение 	= ОбщиеНастройки.НастройкиСинхронизацииСделок.Подразделение;  
		Соглашение		= ОбщиеНастройки.НастройкиСинхронизацииСделок.Соглашение;
		
#Область ПоискСозданиеСделки		
		ЭтоНоваяСделка = Ложь;
		Сделка = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыСделок", ПреффиксыВнешнихКодовБитрикс24.Сделки + ИдБитрикс24);	
		Если ЗначениеЗаполнено(ВнешнийКод) И НЕ ЗначениеЗаполнено(Сделка) тогда
			Сделка = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.ЗаказКлиента"), ВнешнийКод);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сделка) тогда 
			Сделка = Документы.ЗаказКлиента.СоздатьДокумент();
			ЭтоНоваяСделка = Истина;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииСделок.ОбновлятьСделки тогда
				Сделка = Сделка.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что сделки не обновляются. Сделка: " + Строка(Сделка) + " не будет обновлена.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Если ЭтоНоваяСделка тогда
			Сделка.Дата 			= ТекущаяДата();
			Сделка.Организация 		= Организация;  
			Сделка.Подразделение 	= Подразделение;  
			Сделка.Соглашение 		= Соглашение;  
		КонецЕсли;
		
		Если ОбщиеНастройки.НастройкиСинхронизацииСделок.ИсточникДатыДокумента = "По данным с Битрикс24" тогда
			Сделка.Дата = ДатаНачала;	
		КонецЕсли;
		
		Если ЭтоНоваяСделка тогда
			Если ОбщиеНастройки.НастройкиСинхронизацииСделок.ИсточникНомераДокумента = "По данным с Битрикс24" тогда
				Сделка.Номер = НомерСделкиБ24;	
			Иначе
				Сделка.УстановитьНовыйНомер();
				//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Сделка, Истина, "");					
			КонецЕсли;
		КонецЕсли;
		
		Партнер 		= Справочники.Партнеры.ПустаяСсылка();
		КонтактноеЛицо 	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Контакт			= "";
		Компания		= "";
#Область ПоискПартнера
		Если НЕ(ИдКонтакта = "" ИЛИ ИдКонтакта = "0") тогда
			Контакт 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКонтактов", ИдКонтакта);
			
			Если НЕ ЗначениеЗаполнено(Контакт) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден контакт по ид. Попытка создания контакта с Ид: " + ИдКонтакта);
				Контакт = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Контакт", ИдКонтакта);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКонтакта;
		КонецЕсли;
		
		Если НЕ(ИдКомпании = "" ИЛИ ИдКомпании = "0") тогда
			Компания 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКомпаний", ИдКомпании);	
			
			Если НЕ ЗначениеЗаполнено(Компания) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена компания по ид. Попытка создания компании с Ид: " + ИдКомпании);
				Компания = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Компания", ИдКомпании);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКомпании;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Компания) тогда
			Партнер = Компания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакт) тогда
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") тогда
				КонтактноеЛицо = Контакт;
			ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") тогда
				Если ЗначениеЗаполнено(Компания) тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Указанные компания и контакт в сделке являются партнерами в 1С. В заказе будет установлен контрагент из компании");
					ЕстьКритическиеОшибки = Истина;                                                                                     
				Иначе
					Партнер = Контакт;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Партнер) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена компания/контакт с Ид: " + ИдКомпании+"/"+ИдКонтакта);
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
#КонецОбласти	

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
#Область ПоискКонтрагента	
		Если ЗначениеЗаполнено(ИдРеквизита) тогда

			Контрагент 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыРеквизитов", ИдРеквизита);
			ИдДляЛога	= ИдРеквизита;
			
			Если НЕ ЗначениеЗаполнено(Контрагент) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден реквизит с Ид: " + ИдДляЛога);
				ЕстьКритическиеОшибки = Истина;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Партнер) тогда
			
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Партнер); 	
			
		КонецЕсли;
#КонецОбласти	

		БанкСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
#Область ПоискБанкСчетаРеквизита	
		Если НЕ(ИдБанкСчетаРек = "" ИЛИ ИдБанкСчетаРек = "0") тогда
			
			БанкСчетКонтрагента 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыБанкСчетов", ИдБанкСчетаРек);
			
			Если Не ЗначениеЗаполнено(БанкСчетКонтрагента) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден банковский счет реквизита. Попытка создания банковского счета с Ид: " + ИдБанкСчетаРек);
				БанкСчетКонтрагента 	= СформироватьБанковскийСчетПоИд(ОбщиеНастройки, ИдБанкСчетаРек);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(БанкСчетКонтрагента) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден банковский счет с Ид: " + ИдБанкСчетаРек);
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	

		Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Если НЕ ЗначениеЗаполнено(Валюта) тогда
			Валюта = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
		
		Сделка.Партнер 					= Партнер; 
		Сделка.Контрагент 				= Контрагент; 
		Сделка.КонтактноеЛицо 			= КонтактноеЛицо; 
		Сделка.БанковскийСчетКонтрагента= БанкСчетКонтрагента; 
		
		//Если ЗначениеЗаполнено(Сделка.Контрагент) И ЗначениеЗаполнено(Сделка.Соглашение) И ЗначениеЗаполнено(Сделка.Организация) тогда
		//	Сделка.ЗаполнитьУсловияПродажПоСоглашению(); 
		//КонецЕсли;
		
		Сделка.СпособДоставки 	= ?(ЗначениеЗаполнено(Сделка.СпособДоставки), Сделка.СпособДоставки, Перечисления.СпособыДоставки.Самовывоз);
							  
		Сделка.Валюта = Валюта;
		
		Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Сделка.Организация) И НЕ ЗначениеЗаполнено(Сделка.Договор) тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") И Сделка.Соглашение.ИспользуютсяДоговорыКонтрагентов тогда
				Сделка.Договор	= ПолучитьДоговор(ОбщиеНастройки, Сделка.Организация, Контрагент, Валюта);
			КонецЕсли;
		КонецЕсли;

		Сделка.ЦенаВключаетНДС  = ЦенаВклНДС;		
		Сделка.СуммаДокумента	= СуммаДокумента;
		Сделка.Комментарий		= Комментарий;
		Сделка.Склад 			= ?(ЗначениеЗаполнено(Сделка.Склад), Сделка.Склад, ОбщиеНастройки.НастройкиСинхронизацииТоваров.Склад);
		Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		Сделка.Приоритет = ?(ЗначениеЗаполнено(Сделка.Приоритет), Сделка.Приоритет, Приоритет);
		
		ХозяйственнаяОперация = Сделка.Соглашение.ХозяйственнаяОперация;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(ХозяйственнаяОперация), ХозяйственнаяОперация,  Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		Сделка.ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Сделка.ХозяйственнаяОперация), Сделка.ХозяйственнаяОперация, ХозяйственнаяОперация);
		
		ФормаОплаты = Сделка.Соглашение.ФормаОплаты;
		Сделка.ФормаОплаты = ?(ЗначениеЗаполнено(Сделка.ФормаОплаты), Сделка.ФормаОплаты, ФормаОплаты);
		
		//ПорядокОплаты = Сделка.Соглашение.ПорядокОплаты;
		//ПорядокОплаты = ?(ЗначениеЗаполнено(ПорядокОплаты), ПорядокОплаты,  Сделка.Договор.ПорядокОплаты);
		//ПорядокОплаты = ?(ЗначениеЗаполнено(ПорядокОплаты), ПорядокОплаты,  Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
		//Сделка.ПорядокОплаты = ?(ЗначениеЗаполнено(Сделка.ПорядокОплаты), Сделка.ПорядокОплаты, ПорядокОплаты);
		
		
		НалогообложениеНДС = Сделка.Соглашение.НалогообложениеНДС;
		НалогообложениеНДС = ?(ЗначениеЗаполнено(НалогообложениеНДС), НалогообложениеНДС,  Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Сделка.НалогообложениеНДС = ?(ЗначениеЗаполнено(Сделка.НалогообложениеНДС), Сделка.НалогообложениеНДС, НалогообложениеНДС);
		
		Сделка.СкидкиРассчитаны = Истина;
		Сделка.ЖелаемаяДатаОтгрузки = ДатаЗавершения;
		
#Область ЗаполнениеОтветственного		
		Менеджер = Неопределено;
		Если ЗначениеЗаполнено(ИдСотрудника) тогда
			НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти(ИдСотрудника, "ИдПользователя");
			Если НайденнаяСтрока <> Неопределено тогда
				Менеджер = НайденнаяСтрока.Пользователь1С; 
			КонецЕсли;
		КонецЕсли;
		Сделка.Менеджер	= Менеджер;
#КонецОбласти	

#Область ЗаполнениеБанковскогоСчетаОрганизации
		ВремСтруктДанных = Новый Структура;
		ВремСтруктДанных.Вставить("Организация"		, Сделка.Организация);
		ВремСтруктДанных.Вставить("ФормаОплаты"		, Сделка.ФормаОплаты);
		ВремСтруктДанных.Вставить("БанковскийСчет"	, Сделка.БанковскийСчет);
		ВремСтруктДанных.Вставить("Валюта"			, Сделка.Валюта);
		ВремСтруктДанных.Вставить("НаправлениеДеятельности", Сделка.НаправлениеДеятельности);
		
		Сделка.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ВремСтруктДанных);			
#КонецОбласти	
		
#Область ЗаполнениеГрафикаОплаты
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") тогда
			
			ГрафикОплаты = Сделка.Соглашение.ГрафикОплаты;
			
			Если НЕ ЗначениеЗаполнено(ГрафикОплаты) тогда
				
				Запрос = новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("ФормаОплаты", Сделка.ФормаОплаты);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВремГрафикиОплаты.ГрафикОплаты КАК ГрафикОплаты
				|ИЗ
				|	ВремГрафикиОплаты КАК ВремГрафикиОплаты
				|ГДЕ
				|	ВремГрафикиОплаты.ФормаОплаты = &ФормаОплаты";
				
				тзнГО = Запрос.Выполнить().Выгрузить();;
				Если тзнГО.Количество()> 0 тогда
					ГрафикОплаты = тзнГО[0].ГрафикОплаты;	
				КонецЕсли;
			КонецЕсли;

			Сделка.ГрафикОплаты = ?(ЗначениеЗаполнено(Сделка.ГрафикОплаты), Сделка.ГрафикОплаты, ГрафикОплаты);
			
			Если Сделка.ЭтапыГрафикаОплаты.Количество() = 0 тогда
				
				Для Каждого ТекЭтапыГрафика из Сделка.ГрафикОплаты.Этапы Цикл
					НовыйЭтапГрафикаОплаты = Сделка.ЭтапыГрафикаОплаты.Добавить();
					НовыйЭтапГрафикаОплаты.ВариантОплаты 		= ТекЭтапыГрафика.ВариантОплаты;
					НовыйЭтапГрафикаОплаты.ДатаПлатежа 			= Сделка.ЖелаемаяДатаОтгрузки + ТекЭтапыГрафика.Сдвиг*60*60*24; 	
					//НовыйЭтапГрафикаОплаты.Сдвиг 				= ТекЭтапыГрафика.Сдвиг;
					НовыйЭтапГрафикаОплаты.ПроцентПлатежа 		= ТекЭтапыГрафика.ПроцентПлатежа;
					НовыйЭтапГрафикаОплаты.ПроцентЗалогаЗаТару 	= ТекЭтапыГрафика.ПроцентЗалогаЗаТару;
					НовыйЭтапГрафикаОплаты.СуммаПлатежа 		= СуммаДокумента*ТекЭтапыГрафика.ПроцентПлатежа/100;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	


#Область ЗаполнениеСтатуса
		СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		Если ИнформацияОСтатусах <> Неопределено тогда			
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СтатусыЗаказов" тогда
				
				НайденныеСтроки = тзнСтатусов.НайтиСтроки(Новый Структура("ИдСтатуса, ИдНаправления", ИдСтатуса, ИдНаправления));
				Если НайденныеСтроки.Количество() >0 тогда
					НайденнаяСтрока = НайденныеСтроки[0];	
				Иначе
					НайденнаяСтрока = Неопределено;	
				КонецЕсли;
					
				Если НайденнаяСтрока <> Неопределено тогда
					СтатусЗаказа = НайденнаяСтрока.Статус;	
				Иначе                                                     
					СтатусЗаказа = ?(ЗначениеЗаполнено(Сделка.Статус), Сделка.Статус, СтатусЗаказа);	
				КонецЕсли;
			Иначе
				СтатусЗаказа = ?(ЗначениеЗаполнено(Сделка.Статус), Сделка.Статус, СтатусЗаказа);	
			КонецЕсли;
		Иначе
			СтатусЗаказа = ?(ЗначениеЗаполнено(Сделка.Статус), Сделка.Статус, СтатусЗаказа);	
		КонецЕсли;
		
		Если Закрыт И НЕ ЗначениеЗаполнено(СтатусЗаказа) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Документ закрыт, но не найден статус заказа");
		КонецЕсли;

		Сделка.Статус = СтатусЗаказа;
#КонецОбласти	

#Область ДобавлениеДополнительныхРеквизитовДокумента	

		НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНазваниеТемыСделки, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНазваниеТемыСделки;
			НовыйРеквизит.Значение = ТемаСделки;
		Иначе
			НайденноеСвойствоТЧ.Значение = ТемаСделки;	
		КонецЕсли;

		НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНомерСделкиБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНомерСделкиБитрикс24;
			НовыйРеквизит.Значение = НомерСделкиБ24;
		Иначе
			НайденноеСвойствоТЧ.Значение = НомерСделкиБ24;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоДатаСделкиБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоДатаСделкиБитрикс24;
			НовыйРеквизит.Значение = ДатаНачала;
		Иначе
			НайденноеСвойствоТЧ.Значение = ДатаНачала;	
		КонецЕсли;
		
		НаправлениеСделки = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств", ?(ЕстьНаправление, "NS_" + ИдНаправления, "NS_"));
		
		НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНаправлениеСделки, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНаправлениеСделки;
			НовыйРеквизит.Значение = НаправлениеСделки;
		Иначе
			НайденноеСвойствоТЧ.Значение = НаправлениеСделки;	
		КонецЕсли;
		
#КонецОбласти	

#Область ДобавлениеДополнительногоРеквизитаСтатуса
		Если ИнформацияОСтатусах <>Неопределено тогда
			
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоЗаказов" тогда
				
				ЗначениеСвойства = Неопределено;
				
				НайденныеСтроки = тзнСтатусов.НайтиСтроки(Новый Структура("ИдСтатуса, ИдНаправления", ИдСтатуса, ИдНаправления));
				Если НайденныеСтроки.Количество() >0 тогда
					НайденнаяСтрока = НайденныеСтроки[0];	
				Иначе
					НайденнаяСтрока = Неопределено;	
				КонецЕсли;
				
				Если НайденнаяСтрока <> Неопределено тогда
					ЗначениеСвойства = НайденнаяСтрока.Статус;	
				КонецЕсли;
				
				НайденноеСвойствоТЧ = Сделка.ДополнительныеРеквизиты.Найти(ИнформацияОСтатусах.СвойствоЗаказов, "Свойство");
				Если НайденноеСвойствоТЧ = Неопределено тогда
					НовыйРеквизит = Сделка.ДополнительныеРеквизиты.Добавить();
					НовыйРеквизит.Свойство = ИнформацияОСтатусах.СвойствоЗаказов;
					НовыйРеквизит.Значение = ЗначениеСвойства;
				Иначе
					НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти
		
		
#Область ЗаполнениеТоваров	
		тзнТоваровАрх = Сделка.Товары.Выгрузить();
		Сделка.Товары.Очистить();
		
		//Костыль для искл дублей
		тзнПроверкаДублейСтрок = Новый ТаблицаЗначений;
		тзнПроверкаДублейСтрок.Колонки.Добавить("ИдТовара");
		тзнПроверкаДублейСтрок.Колонки.Добавить("ИдЕдИзм");
		тзнПроверкаДублейСтрок.Колонки.Добавить("Скидка");
		тзнПроверкаДублейСтрок.Колонки.Добавить("Количество");
		тзнПроверкаДублейСтрок.Колонки.Добавить("Цена");
		
		Для Каждого ТоварСделки из мДанных.ИнформацияОТоварахСделок Цикл
			
			Если Формат(ТоварСделки.Получить("OWNER_ID"),"ЧГ=0") = ИдБитрикс24 тогда
				
				ИдТовара			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварСделки.Получить("PRODUCT_ID"),"ЧГ=0"));
				НаименованиеТовара	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Строка(ТоварСделки.Получить("PRODUCT_NAME")));
				
				КодЕдИзм			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварСделки.Получить("MEASURE_CODE"),"ЧГ=0"));
				
				Количество				= ТоварСделки.Получить("QUANTITY");
				ЦенаСоСкидкойСНалогом	= ТоварСделки.Получить("PRICE");
				ЦенаБезСкидкиБезНалога	= ТоварСделки.Получить("PRICE_NETTO");
				ЦенаБезСкидкиСНалогом	= ТоварСделки.Получить("PRICE_BRUTTO");
				ЦенаСоСкидкойБезНалога	= ТоварСделки.Получить("PRICE_EXCLUSIVE");
				
				НалогВключен		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Строка(ТоварСделки.Получить("TAX_INCLUDED")))= "Y";
				Скидка				= ТоварСделки.Получить("DISCOUNT_SUM");
				ПроцентСкидки		= ТоварСделки.Получить("DISCOUNT_RATE");
				СтавкаНалога		= ТоварСделки.Получить("TAX_RATE");
				СтавкаНалога 		= ?(ЗначениеЗаполнено(СтавкаНалога),СтавкаНалога, 0);
				
				Если НалогВключен = Истина тогда   //баг есть
					Цена = ?(ЦенаБезСкидкиСНалогом = 0 И Скидка<>0, Скидка/ПроцентСкидки*100 ,ЦенаБезСкидкиСНалогом); //есть баг с скидкой
				Иначе
					Цена = ?(ЦенаБезСкидкиБезНалога = 0 И Скидка<>0, Скидка/ПроцентСкидки*100 ,ЦенаБезСкидкиБезНалога); //есть баг с скидкой
				КонецЕсли;
				
#Область ИсключениеВозможныхДублей	
				//бывает глюк, когда с б24 приходят дубли строк
				НайденныеСтрокиПроверкиДублей = тзнПроверкаДублейСтрок.НайтиСтроки(Новый Структура("ИдТовара, ИдЕдИзм, Скидка, Количество, Цена", ИдТовара, КодЕдИзм, Скидка, Количество, ЦенаСоСкидкойСНалогом));
				
				Если НайденныеСтрокиПроверкиДублей.Количество() > 0 тогда
					Продолжить;
				Иначе
					ИнфОНовойСтрокеТовара = тзнПроверкаДублейСтрок.Добавить();
					ИнфОНовойСтрокеТовара.ИдТовара 	= ИдТовара; 
					ИнфОНовойСтрокеТовара.ИдЕдИзм 	= КодЕдИзм; 
					ИнфОНовойСтрокеТовара.Скидка 	= Скидка; 
					ИнфОНовойСтрокеТовара.Количество= Количество; 
					ИнфОНовойСтрокеТовара.Цена 		= ЦенаСоСкидкойСНалогом; 
				КонецЕсли;
#КонецОбласти	
				
				
				ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
#Область ПоискЕдиницыИзмерения	
				Если ЗначениеЗаполнено(КодЕдИзм) тогда
					ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодЕдИзм);;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена единица измерения по ид. Попытка создания единицы измерения с Ид: " + КодЕдИзм);
					ЕдиницаИзмерения = СформироватьЕдиницуИзмеренияПоИд(ОбщиеНастройки, КодЕдИзм);
				КонецЕсли;
#КонецОбласти	
				
				Номенклатура	= Справочники.Номенклатура.ПустаяСсылка();	
				Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
#Область ПоискТовара	
				Если ЗначениеЗаполнено(ИдТовара) Тогда
					
					ИнформацияОНоменклатуре = Неопределено;	
					
					Запрос = новый Запрос;
					Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
					Запрос.УстановитьПараметр("Идентификатор", ИдТовара);
					
					Запрос.Текст = "ВЫБРАТЬ
					|	ВремИдентификаторы.Объект КАК Объект,
					|	ВремИдентификаторы.ПодчиненныйОбъект КАК ПодчиненныйОбъект
					|ИЗ
					|	ВремИдентификаторыТоваров КАК ВремИдентификаторы
					|ГДЕ
					|	ВремИдентификаторы.Идентификатор = &Идентификатор";
					
					ВыполненныйЗапрос = Запрос.Выполнить();
					
					Если НЕ ВыполненныйЗапрос.Пустой() тогда
						Выборка = ВыполненныйЗапрос.Выбрать();
						Пока Выборка.Следующий() Цикл
							ИнформацияОНоменклатуре = Выборка;
							Прервать;
						КонецЦикла;
					КонецЕсли;
					
					Если ИнформацияОНоменклатуре = Неопределено тогда
						
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден товар по ид. Попытка создания товара с Ид: " + ИдТовара);
						ИнформацияОНоменклатуре = СформироватьНоменклатуруПоИд(ОбщиеНастройки, ИдТовара);
						
						Если ИнформацияОНоменклатуре = Неопределено тогда
							Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена информация о номенклатуре с Ид: " + ИдТовара);
							ЕстьКритическиеОшибки = Истина;
						Иначе
							Номенклатура   = ИнформацияОНоменклатуре.Объект;	
							Характеристика = ИнформацияОНоменклатуре.ПодчиненныйОбъект;	
						КонецЕсли;
						
					Иначе
						Номенклатура   = ИнформацияОНоменклатуре.Объект;	
						Характеристика = ИнформацияОНоменклатуре.ПодчиненныйОбъект;	
					КонецЕсли; 
				Иначе
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "В сделке был указан не товар, а строка. Товар: " + НаименованиеТовара + " в сделку: " + Строка(Сделка) + " не будет указан.");
				КонецЕсли; 			
#КонецОбласти	
				Номенклатура = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, Справочники.Номенклатура.ПустаяСсылка());

				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения КонецЕсли;

				СтавкаНДС = ПолучитьСтавкуНДСПоСтавке(ОбщиеНастройки, СтавкаНалога);

//				Если СтавкаНалога = 0 тогда
//					СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
//				ИначеЕсли СтавкаНалога = 18 тогда
//					СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
//				ИначеЕсли СтавкаНалога = 20 тогда
//					СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
//				ИначеЕсли СтавкаНалога = 10 тогда
//					СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
//				Иначе
//					СтавкаНДС = Номенклатура.СтавкаНДС;	
//				КонецЕсли;
				
				НоваяЗаписьТовара = Сделка.Товары.Добавить();
				
#Область ЗаполнениеСтрокиСтарымиДанными	
				НайденныеСтроки = тзнТоваровАрх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
				Если НайденныеСтроки.Количество() > 0 тогда
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТовара, НайденныеСтроки[0]);
				КонецЕсли;
#КонецОбласти	
				
				НоваяЗаписьТовара.Номенклатура 		= Номенклатура;
				НоваяЗаписьТовара.Характеристика 	= Характеристика;
				НоваяЗаписьТовара.Упаковка			= ЕдиницаИзмерения;
				НоваяЗаписьТовара.СтавкаНДС  		= СтавкаНДС;
				
				НоваяЗаписьТовара.Склад		 		= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.Склад), НоваяЗаписьТовара.Склад, Сделка.Склад);
				НоваяЗаписьТовара.ВариантОбеспечения= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.ВариантОбеспечения), НоваяЗаписьТовара.ВариантОбеспечения, Перечисления.ВариантыОбеспечения.НеТребуется);
				
				Если НоваяЗаписьТовара.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Номенклатура) тогда
					НоваяЗаписьТовара.Содержание = НаименованиеТовара;
				КонецЕсли;
				
			    НоваяЗаписьТовара.Количество  			= Количество;
			    НоваяЗаписьТовара.КоличествоУпаковок  	= Количество;
				
				Если НалогВключен = Истина тогда
					ЦенаИтого = ЦенаБезСкидкиСНалогом;
				Иначе
					ЦенаИтого = ЦенаБезСкидкиБезНалога;
				КонецЕсли;
				
				НоваяЗаписьТовара.Цена 					= ЦенаИтого;
				НоваяЗаписьТовара.ПроцентРучнойСкидки 	= ПроцентСкидки;
				
				СтруктураДействий = Новый Структура;
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Сделка);
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(НоваяЗаписьТовара, СтруктураДействий, Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
		
#КонецОбласти	
		
		ЭтоНовыйОбъект = Сделка.Ссылка.Пустая()=Истина;
		ТаблицаСвойств = РазобратьПользовательскиеПоляВТаблицу(ОбщиеНастройки, ТекЭлемент, МенеджерВременныхТаблиц);
		ЗаполнениеДополнительныеРеквизитыОбъектов(ОбщиеНастройки, ТаблицаСвойств, Сделка, ЭтоНовыйОбъект);			
		
#Область ПроведениеДокумента
		ОтменаПроведенияСОшибкой = Ложь;
		Сделка.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
		
		Если (ОбщиеНастройки.НастройкиСинхронизацииСделок.РежимЗаписиДокумента = "Проводить закрытые" И Закрыт)
			ИЛИ ОбщиеНастройки.НастройкиСинхронизацииСделок.РежимЗаписиДокумента = "Проводить" тогда
			
			Попытка
				Сделка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Проведен документ: " + Строка(Сделка));
			Исключение
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время проведения документа: " + Строка(Сделка) + " возникли ошибки.");
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				
				ЕстьКритическиеОшибки = Истина;
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Попытка записи документа: " + Строка(Сделка));
				
				Попытка
					Сделка.Записать(РежимЗаписиДокумента.Запись);
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан документ: " + Строка(Сделка));
				Исключение
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Сделка) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
				КонецПопытки;
				
			КонецПопытки;
		Иначе
			Попытка
				Если ЭтоНовыйОбъект ИЛИ НЕ Сделка.Проведен тогда
					Сделка.Записать(РежимЗаписиДокумента.Запись); 
				Иначе
					Сделка.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
				КонецЕсли;
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан: " + Строка(Сделка));
			Исключение
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Сделка) + " возникли ошибки.");
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				ОтменаПроведенияСОшибкой = Истина;
				ЕстьКритическиеОшибки 	 = Истина;
			
				ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
			КонецПопытки;
		КонецЕсли;
		Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, НЕ ЕстьКритическиеОшибки)));
#КонецОбласти		
		
		Если ЗначениеЗаполнено(Сделка.Ссылка) тогда
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Сделка, Сделка.Ссылка, ИдБитрикс24);
			
			Если НЕ ОтменаПроведенияСОшибкой тогда
				ЗаполнениеДополнительныеСведенияОбъектов(ОбщиеНастройки, ТаблицаСвойств, Сделка.Ссылка, ЭтоНовыйОбъект);			
			КонецЕсли;
			
			//ЗаписатьКонтактДокумента(Сделка.Ссылка, КонтактноеЛицо);
			
		КонецЕсли;
		
#Область ДобавлениеСостоянияЗаказа
	Если ЗначениеЗаполнено(Сделка.Ссылка) тогда
		Если ИнформацияОСтатусах <> Неопределено тогда			
			
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СостоянияЗаказов" тогда
				
				тзнСтатусов = ИнформацияОСтатусах.СтатусыНаправленийСостояний;
				
				НайденныеСтроки = тзнСтатусов.НайтиСтроки(Новый Структура("ИдСтатуса, ИдНаправления", ИдСтатуса, ИдНаправления));
				
				Если НайденныеСтроки.Количество() > 0 тогда
					НайденнаяСтрока = НайденныеСтроки[0];	
				Иначе
					НайденнаяСтрока = Неопределено;	
				КонецЕсли;
				
				Если НайденнаяСтрока <> Неопределено тогда
					НоваяЗапись = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
					НоваяЗапись.Заказ 		= Сделка.Ссылка;
					НоваяЗапись.ДатаСобытия = ТекущаяДата();
					НоваяЗапись.Состояние 	= НайденнаяСтрока.Статус;
					НоваяЗапись.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
#КонецОбласти	

	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Функция ЗагрузитьОбновитьСвойстваЗаказов(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ФормированиеВременныхТаблицДанных		
	мТипыКИ = новый Массив;
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	мТипыКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанных"				, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваЗаказа);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторы
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.Заголовок КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияСвойств
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Объект,
	|	ЗначенияСвойствОбъектов.Владелец КАК Свойство,
	|	ЗначенияСвойствОбъектов.Наименование КАК Идентификатор
	|ПОМЕСТИТЬ ВремНаименованияЗначенийСвойств
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство,
	|	Идентификатор";
	
	Запрос.Выполнить();
#КонецОбласти

	мСвойстваИсключения 		= Б24_СинхронизацияВызовСервера.ПолучитьНазванияИсключающихСвойств();	
	мСписокПоддерживаемыхТипов 	= Б24_СинхронизацияПовтИсп.ПолучитьСписокТиповСвойствЗаказов();
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого property из мДанных Цикл	
		
		ТекЭлемент 			 = property.Получить("property");
		
		ИдЭлемента 			 = Формат(ТекЭлемент.Получить("id"),"ЧГ=0");
		НаименованиеСвойства = ТекЭлемент.Получить("name"); 
		ТипСвойства 		 = ТекЭлемент.Получить("type");      //"STRING" "ENUM" NUMBER  "DATE" "Y/N"
		ВнешнийИдентификтор  = ТекЭлемент.Получить("xmlId");      
		
		ТипПлательщика 		 = Формат(ТекЭлемент.Получить("personTypeId"),"ЧГ=0"); 
		//Обязательное 		 = ТекЭлемент.Получить("required")="Y"; 
		Обязательное 		 = Ложь; 
		Активный			 = ТекЭлемент.Получить("active") = "Y";
		
		Если ЗагруженныеОбъекты.Найти(ИдЭлемента) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;	
		КонецЕсли;
		Если НЕ ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ЗагружаемыеСвойстваЗаказов") тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;

		НайденноеЗначениеФильтраПоСвойствам = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ЗагружаемыеСвойстваЗаказов.НайтиПоЗначению(НаименованиеСвойства);
		
		Если НайденноеЗначениеФильтраПоСвойствам = Неопределено тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + НаименованиеСвойства + " не будет добавлено/обновлено. т.к. не подходит по фильтру");
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		Иначе
			Если НайденноеЗначениеФильтраПоСвойствам.Пометка = Ложь тогда   
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + НаименованиеСвойства + " не будет добавлено/обновлено. т.к. в фильтре указано, что оно не загружается в 1С");
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если мСписокПоддерживаемыхТипов.Найти(ТипСвойства) = Неопределено тогда 
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + НаименованиеСвойства + " не будет добавлено/обновлено. т.к. тип свойства не поддерживается.");
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		Если мСвойстваИсключения.Найти(НаименованиеСвойства) <> Неопределено тогда   
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;
		Если ТекЭлемент.Получить("multiple") = "Y" тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Свойство: " + НаименованиеСвойства + " не будет добавлено/обновлено. т.к. является множественным");
			Продолжить;
		КонецЕсли;
		
		ЗагруженныеОбъекты.Добавить(ИдЭлемента);
		
		ОписаниеТипов 	= Неопределено;
#Область РазборТипаСвойства
		МассивТипов 	= Новый Массив;
		
		Если ТипСвойства = "NUMBER" тогда
			
			КЧ = Новый КвалификаторыЧисла(12,2);
			МассивТипов.Добавить(Тип("Число"));
			ОписаниеТипов  = Новый ОписаниеТипов(МассивТипов, , КЧ);
			
		ИначеЕсли ТипСвойства = "STRING" тогда
			
			КС = Новый КвалификаторыСтроки(0);
			МассивТипов.Добавить(Тип("Строка"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КС);
			
		ИначеЕсли ТипСвойства = "DATE" тогда
			
			КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов, , КД);
			
		ИначеЕсли ТипСвойства = "Y/N"  тогда
			
			МассивТипов.Добавить(Тип("Булево"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
		ИначеЕсли ТипСвойства = "ENUM" тогда
			
			МассивТипов.Добавить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"));
			ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
			
		КонецЕсли;
		
#КонецОбласти
		Если ОписаниеТипов = Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			Продолжить;
		КонецЕсли;

#Область ПоискСозданиеСвойства	
		ЭтоНовый = Истина;
		Свойство = Неопределено;
		
		Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторы", ИдЭлемента);	
		
		Если НЕ ЗначениеЗаполнено(Свойство) тогда
			Свойство = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ВнешнийИдентификтор);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Свойство) тогда
			Свойство = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремНаименованияСвойств", НаименованиеСвойства);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Свойство)тогда     //свойства могут иметь одинаковые имена в разрезе разных плательщиков, поэтому запрос в цикле
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Заголовок", НаименованиеСвойства);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
			|ИЗ
			|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
			|ГДЕ
			|	ДополнительныеРеквизитыИСведения.Заголовок = &Заголовок
			|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)";
			ВыполненныйЗапрос = Запрос.Выполнить();
			
			Если НЕ ВыполненныйЗапрос.Пустой() тогда
				
				ВремВыборкаСвойств = ВыполненныйЗапрос.Выбрать();
				Пока ВремВыборкаСвойств.Следующий() Цикл
					Свойство = ВремВыборкаСвойств.Ссылка; 	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Свойство)тогда   
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			Свойство.НаборСвойств 	= Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
			Свойство.ТипЗначения 	= ОписаниеТипов;
		Иначе
			ЭтоНовый = Ложь;
			Свойство = Свойство.ПолучитьОбъект();
		КонецЕсли;
#КонецОбласти	
		
		Свойство.ПометкаУдаления 		= НЕ Активный;	
		
		Если ЭтоНовый тогда
			Свойство.Наименование 	= НаименованиеСвойства + " (Заказы покупателей)";
		КонецЕсли;
		
		Свойство.Заголовок 				= НаименованиеСвойства;
		Свойство.ЗаполнятьОбязательно 	= Обязательное; 
		
		Если ТипСвойства = "ENUM" тогда
			Свойство.ДополнительныеЗначенияИспользуются = Истина;
		КонецЕсли;
		
		
		Попытка
			Свойство.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
			Свойство.Записать();
			
			ДанныеДляИД = Новый Структура;
			ДанныеДляИД.Вставить("Объект"				, Свойство.Ссылка);
			ДанныеДляИД.Вставить("ПодчиненныйОбъект"	, ТипПлательщика);
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа, ДанныеДляИД, ИдЭлемента);
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Истина)));
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записано свойство заказа: " + НаименованиеСвойства);
			
			Если ТипСвойства = "ENUM" тогда
#Область ЗаписьЗначенийСвойств                          
				ЗначенияСписка = ТекЭлемент.Получить("variants");	
				
				Если ЗначениеЗаполнено(ЗначенияСписка) тогда
					
					Для Каждого ТекЗначениеСвойства из ЗначенияСписка Цикл
						
						ВнешнийИдентификторЗначСвойства = ТекЗначениеСвойства.Получить("xmlId");      

						
						ИдЗначенияСвойства 				= Формат(ТекЗначениеСвойства.Получить("id"),"ЧГ=0");
						КодЗначенияСвойства 			= ТекЗначениеСвойства.Получить("value");
						НаименованиеЗначенияСвойства	= ТекЗначениеСвойства.Получить("name");
						ОписаниеЗначенияСвойства		= ТекЗначениеСвойства.Получить("description");
						
						ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств", ИдЗначенияСвойства);	
						
						Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) тогда
							ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), ВнешнийИдентификторЗначСвойства);
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) тогда
							ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
						Иначе
							ЗначениеСвойства = ЗначениеСвойства.ПолучитьОбъект();
						КонецЕсли;
						
						ЗначениеСвойства.Владелец 			= ?(Свойство.ВладелецДополнительныхЗначений.Пустая(), Свойство.Ссылка,  Свойство.ВладелецДополнительныхЗначений);					
						ЗначениеСвойства.Наименование 		= НаименованиеЗначенияСвойства;					
						//ЗначениеСвойства.ПолноеНаименование = ?(ЗначениеЗаполнено(ОписаниеЗначенияСвойства), ОписаниеЗначенияСвойства, НаименованиеЗначенияСвойства);	
						
						ЗначениеСвойства.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
						ЗначениеСвойства.Записать();
						
						ДанныеДляИД = Новый Структура;
						ДанныеДляИД.Вставить("Объект"				, ЗначениеСвойства.Ссылка);
						ДанныеДляИД.Вставить("ПодчиненныйОбъект"	, ТипПлательщика);
						
						Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваЗаказа, ДанныеДляИД, ИдЗначенияСвойства, КодЗначенияСвойства);
						
					КонецЦикла;
					
				КонецЕсли;
#КонецОбласти
			КонецЕсли;	
			
			Если ЭтоНовый тогда
				
				НаборСвойств 	= Свойство.НаборСвойств;
				ТекНаборСвойств = НаборСвойств.ПолучитьОбъект();
				
				НовоеСвойствоНабора = ТекНаборСвойств.ДополнительныеРеквизиты.Добавить();
				НовоеСвойствоНабора.Свойство = Свойство.Ссылка;
				
				ТекНаборСвойств.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				ТекНаборСвойств.Записать();
				
			КонецЕсли;	
			
		Исключение
			
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи свойства заказа: " + НаименованиеСвойства + " возникли ошибки.");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдЭлемента, Ложь)));
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
		КонецПопытки;
		
	КонецЦикла;
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьЗаказы(пОбщиеНастройки, мДанных) Экспорт
	
	Результат = Новый Массив; 
	
	ОбщиеНастройки = Новый Структура;
	Для Каждого ЭлементСтруктуры Из пОбщиеНастройки Цикл
		ОбщиеНастройки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки);
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	ИнформацияОСтатусах = Неопределено;
	Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОСтатусах") тогда	
		ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОСтатусах;
		Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда
			тзнСтатусов = ИнформацияОСтатусах.СоответствияССостояниямиЗаказа;	
		ИначеЕсли ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда
			тзнСтатусов = ИнформацияОСтатусах.СоответствияСЗначениямиСвойствЗаказа;
		Иначе	
			тзнСтатусов = ИнформацияОСтатусах.СоответствияССтатусамиЗаказа;
		КонецЕсли;
	КонецЕсли;     
	
	ИнформацияОДоставках = Неопределено;
	Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОДоставках") тогда	
		ИнформацияОДоставках = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОДоставках;
	КонецЕсли;                                                        
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
#Область ФормированиеВременныхТаблицДанных		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТипДанныхЗаказ"			, ОбщиеНастройки.ТипыОбъектовОбмена.Заказ);
	Запрос.УстановитьПараметр("ТипДанныхОплата"			, ОбщиеНастройки.ТипыОбъектовОбмена.Оплата);
	Запрос.УстановитьПараметр("ТипДанныхОтгрузка"		, ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка);
	Запрос.УстановитьПараметр("ТипДанныхКомпания"		, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтакт"		, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхТовар"			, ОбщиеНастройки.ТипыОбъектовОбмена.Товар);
	Запрос.УстановитьПараметр("ТипДанныхРеквизит"		, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	Запрос.УстановитьПараметр("ТипДанныхБанкСчет"		, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхСвойств"		, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа);
	Запрос.УстановитьПараметр("ТипДанныхЗначенийСвойств", ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваЗаказа);
	Запрос.УстановитьПараметр("Портал"					, ОбщиеНастройки.Портал);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗаказов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗаказ
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|ВЫБРАТЬ 
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыОплат
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхОплата
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыОтгрузок
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхОтгрузка
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтакт
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыРеквизитов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхРеквизит
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпаний
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпания
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиОплаты.Ссылка КАК ГрафикОплаты,
	|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
	|ПОМЕСТИТЬ ВремГрафикиОплаты
	|ИЗ
	|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
	|ГДЕ
	|	ГрафикиОплаты.ПометкаУдаления = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФормаОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВремИдентификаторыТоваров
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхТовар
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыБанкСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхБанкСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	ВЫРАЗИТЬ(Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК СТРОКА(100)) КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЗначенийСвойств
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗначенийСвойств
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Объект,
	|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение КАК ЭтоДополнительноеСведение,
	|	Б24_ИдентификаторыОбъектов.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор
	|ПОМЕСТИТЬ ВремСвойства
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО Б24_ИдентификаторыОбъектов.Объект = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСвойств
	|	И Б24_ИдентификаторыОбъектов.Идентификатор <> """"";
	Запрос.Выполнить();
#КонецОбласти	
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из мДанных Цикл	
		
#Область ПолучениеЗначенийЗаказа

		ИдБитрикс24	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("id"),"ЧГ=0"));
		ИдЭлемента	= ПреффиксыВнешнихКодовБитрикс24.Заказы + ИдБитрикс24;
		
		Если ЗагруженныеОбъекты.Найти(ИдБитрикс24) <> Неопределено тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдБитрикс24);
		
		ЕстьКритическиеОшибки = Ложь;
		
		НомерЗаказаБ24 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("accountNumber"),"ЧГ=0"));
		НомерЗаказаБ24	= ?(ЗначениеЗаполнено(НомерЗаказаБ24), НомерЗаказаБ24, ИдБитрикс24);
		
		ДатаНачала     	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("dateInsert"));
		
		ДатаОтгрузки	= ДатаНачала + 7*24*60*60;
		
		ВнешнийИдентификатор	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("xmlId"),"ЧГ=0"));
		
		КомментарийМенеджера 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("comments"));
		КомментарийПользователя = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("userDescription"));
		
		ИспользуютсяНалоги	= ТекЭлемент.Получить("isUsedVat");   
		Оплачен	 			= ТекЭлемент.Получить("isPaid") = "Y";   
		ДатаОплаты 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), Формат(ТекЭлемент.Получить("dateBill"),"ЧГ=0"));   
		Отгружен 			= ТекЭлемент.Получить("isShipped") = "Y"; 
		Отменен	 			= ТекЭлемент.Получить("isCanceled") = "Y";   
		ДатаОтмены 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), Формат(ТекЭлемент.Получить("dateCanceled"),"ЧГ=0"));   
		ИдПричиныОтмены		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("empCanceledId"),"ЧГ=0"));   
		
		ИдСтатуса			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("statusId"),"ЧГ=0"));
		ИдСклада			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("storeId"),"ЧГ=0"));
		
		СуммаНДС 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("taxValue"),"ЧРД=.; ЧГ=0"));		
		СуммаДокумента 		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("price"),"ЧРД=.; ЧГ=0"));
		
		ТемаЗаказа     		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("orderTopic"));
		
		ИдСотрудника		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("responsibleId"),"ЧГ=0"));
		
		Закрыт				= Оплачен И Отгружен;
		
		Оплаты				= ТекЭлемент.Получить("payments");		
		Отгрузки			= ТекЭлемент.Получить("shipments");		
		
		ТрекНомер = "";       
		Если Отгрузки <> Неопределено тогда
			Для Каждого ТекОтгрузка из Отгрузки Цикл
				ТрекНомер = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекОтгрузка.Получить("trackingNumber"),"ЧГ=0"));
				Прервать	
			КонецЦикла;
		КонецЕсли;
		
		ИдДоставки = "";
		Если Отгрузки <> Неопределено тогда
			Для Каждого ТекОтгрузка из Отгрузки Цикл
				ИдДоставки = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекОтгрузка.Получить("deliveryId"),"ЧГ=0"));
			Прервать;	
			КонецЦикла;
		КонецЕсли;
		
		ИдКомпании		= "";
		ИдКонтакта		= "";
		
		Клиенты			= ТекЭлемент.Получить("clients");

		Если Клиенты <> Неопределено тогда
			Для каждого ТекКлиент из Клиенты Цикл
				
				Если Строка(ТекКлиент.Получить("entityTypeId")) = "3" тогда
					ИдКонтакта		= ?(ЗначениеЗаполнено(ИдКонтакта), ИдКонтакта, Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекКлиент.Получить("entityId"),"ЧГ=0")));
				Иначе
					ИдКомпании		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекКлиент.Получить("entityId"),"ЧГ=0"));
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ИдРеквизита			= "";
		ИдНашегоРеквизита	= "";
		ИдБанкСчетаРек		= "";
		ИдНашегоБанкСчетаРек= "";
		
		Реквизиты			= ТекЭлемент.Получить("requisiteLink");
		
		Если Реквизиты <> Неопределено И ТипЗнч(Реквизиты) <> Тип("Массив") тогда
			ИдРеквизита			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(Реквизиты.Получить("requisiteId"),"ЧГ=0"));
			ИдНашегоРеквизита	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(Реквизиты.Получить("mcRequisiteId"),"ЧГ=0"));
			ИдБанкСчетаРек		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(Реквизиты.Получить("bankDetailId"),"ЧГ=0"));
			ИдНашегоБанкСчетаРек= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(Реквизиты.Получить("mcBankDetailId"),"ЧГ=0"));
		КонецЕсли;                                                                                                                      
					
		ЭлементыКорзины = Неопределено;
		Корзина = ТекЭлемент.Получить("basket");                                                                                             
		Если Корзина <> Неопределено тогда
			ЭлементыКорзины = Корзина.Получить("items");	
		КонецЕсли;
		ЭлементыКорзины = ?(ЭлементыКорзины = Неопределено, Новый Массив, ЭлементыКорзины);
		                               
		СвойстваЗаказа = ТекЭлемент.Получить("propertyValues");
		СвойстваЗаказа = ?(СвойстваЗаказа = Неопределено, Новый Массив, СвойстваЗаказа);
		
		АдресДоставки = "";
		Для Каждого ТекСвойство из СвойстваЗаказа Цикл
			
			Если ТекСвойство.Получить("name") = "Адрес доставки" тогда
				АдресДоставки = ТекСвойство.Получить("value");
				Если ЗначениеЗаполнено(АдресДоставки) тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЦенаВклНДС		= Истина;		
		СимвольныйКодВалюты = "RUB";
		Если ЭлементыКорзины <> Неопределено тогда
			Если ЭлементыКорзины.Количество() > 0 тогда 
				СимвольныйКодВалюты = ПолучитьКодПоВалюте(ВРег(ЭлементыКорзины[0].Получить("currency")));
				ЦенаВклНДС			= ЭлементыКорзины[0].Получить("vatIncluded") = "Y";	
			КонецЕсли;	
		КонецЕсли;
		КодВалюты = ПолучитьКодПоВалюте(ВРег(СимвольныйКодВалюты));
		
#КонецОбласти	
		
		
		Если ДатаНачала < ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ДатаНачалаЗагрузкиЗаказов тогда
			Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Заказ с ид:  " + Строка(ИдБитрикс24) + " будет пропущен т.к. дата заказа меньше даты, с которой заказы загружаются в 1С.");
			Продолжить;  			
		КонецЕсли;		
		
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОСтатусах") тогда	
			ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОСтатусах;
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияССостояниямиЗаказа;	
			ИначеЕсли ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияСЗначениямиСвойствЗаказа;
			Иначе	
				тзнСтатусов = ИнформацияОСтатусах.СоответствияССтатусамиЗаказа;
			КонецЕсли;
		Иначе                                             
			ИнформацияОСтатусах = Неопределено;
		КонецЕсли;                                                        
		
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОСтатусах") тогда	
			ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОСтатусах;
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияССостояниямиЗаказа;	
			ИначеЕсли ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияСЗначениямиСвойствЗаказа;
			Иначе	
				тзнСтатусов = ИнформацияОСтатусах.СоответствияССтатусамиЗаказа;
			КонецЕсли;
		Иначе                                             
			ИнформацияОСтатусах = Неопределено;
		КонецЕсли;                                                        
		
		Если ИнформацияОСтатусах <> Неопределено тогда
			
			ПропускаемЗаказИзЗаСтатуса = Ложь;
			
			НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
			Если НайденнаяСтрока <> Неопределено тогда
				ПропускаемЗаказИзЗаСтатуса = НайденнаяСтрока.НеЗагружать;	
			КонецЕсли;				
			
			Если ПропускаемЗаказИзЗаСтатуса тогда			
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Заказ с ид:  " + Строка(ИдБитрикс24) + " будет пропущен т.к.  у него не подходящий статус");
				Продолжить;  			
			КонецЕсли;					
		КонецЕсли;
		
		Организация    	= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Организация;
		Подразделение 	= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Подразделение;  
		Соглашение		= ОбщиеНастройки.НастройкиСинхронизацииСделок.Соглашение;
		
		
#Область ПоискСозданиеЗаказа		
		ЭтоНовыйЗаказ = Ложь;
		
		Заказ = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗаказов", ПреффиксыВнешнихКодовБитрикс24.Заказы + ИдБитрикс24);	
		Если ЗначениеЗаполнено(ВнешнийИдентификатор) И НЕ ЗначениеЗаполнено(Заказ) тогда
			Заказ = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.ЗаказКлиента"), ВнешнийИдентификатор);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Заказ) тогда 
			
			Если Отменен тогда
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Заказ с ид:  " + Строка(ИдБитрикс24) + " будет пропущен т.к.  его в 1С нет и он отменен.");
				Продолжить;  			
			КонецЕсли;					
			
			Заказ = Документы.ЗаказКлиента.СоздатьДокумент();
			ЭтоНовыйЗаказ = Истина;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ОбновлятьДокументы тогда
				Заказ = Заказ.ПолучитьОбъект();
			Иначе
				Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, Истина)));
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что заказы и подчиненные данные не обновляются. Заказ: " + Строка(Заказ) + " не будет обновлен.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Если ЭтоНовыйЗаказ тогда
			Заказ.Дата 			 	= ТекущаяДата();
			Заказ.Организация 		= Организация;  
			Заказ.Подразделение 	= Подразделение;  
			Заказ.Соглашение 		= Соглашение;  
		КонецЕсли;
		
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникДатыДокумента = "По данным с Битрикс24" тогда
			Заказ.Дата = ДатаНачала;	
		КонецЕсли;
		
		Если ЭтоНовыйЗаказ тогда
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникНомераДокумента = "По данным с Битрикс24" тогда
				Заказ.Номер = НомерЗаказаБ24;	
			Иначе
				Заказ.УстановитьНовыйНомер();
				//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Заказ, Истина, "");					
			КонецЕсли;
		КонецЕсли;
		
		
		Партнер 		= Справочники.Партнеры.ПустаяСсылка();
		КонтактноеЛицо 	= Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Контакт			= "";
		Компания		= "";
#Область ПоискКонтрагента
		Если НЕ(ИдКонтакта = "" ИЛИ ИдКонтакта = "0") тогда
			Контакт 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКонтактов", ИдКонтакта);
			
			Если НЕ ЗначениеЗаполнено(Контакт) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден контакт по ид. Попытка создания контакта с Ид: " + ИдКонтакта);
				Контакт = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Контакт", ИдКонтакта);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКонтакта;
		КонецЕсли;
		
		Если НЕ(ИдКомпании = "" ИЛИ ИдКомпании = "0") тогда
			Компания 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыКомпаний", ИдКомпании);	
			
			Если НЕ ЗначениеЗаполнено(Компания) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена компания по ид. Попытка создания компании с Ид: " + ИдКомпании);
				Компания = СформироватьКомпаниюКонтактПоИд(ОбщиеНастройки, "Компания", ИдКомпании);
		    КонецЕсли;
			
			ИдДляЛога	= ИдКомпании;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Компания) тогда
			Партнер = Компания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контакт) тогда
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") тогда
				КонтактноеЛицо = Контакт;
			ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Партнеры") тогда
				Если ЗначениеЗаполнено(Компания) тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Указанные компания и контакт в сделке являются партнерами в 1С. В заказе будет установлен контрагент из компании");
					ЕстьКритическиеОшибки = Истина;                                                                                     
				Иначе
					Партнер = Контакт;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Партнер) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена компания/контакт с Ид: " + ИдКомпании+"/"+ИдКонтакта);
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
#КонецОбласти	

		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
#Область ПоискКонтрагента	
		Если ЗначениеЗаполнено(ИдРеквизита) тогда

			Контрагент 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыРеквизитов", ИдРеквизита);
			ИдДляЛога	= ИдРеквизита;
			
			Если НЕ ЗначениеЗаполнено(Контрагент) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден реквизит с Ид: " + ИдДляЛога);
				ЕстьКритическиеОшибки = Истина;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Партнер) тогда
			
			Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Партнер); 	
			
		КонецЕсли;
#КонецОбласти	

		БанкСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
#Область ПоискБанкСчетаРеквизита	
		Если НЕ(ИдБанкСчетаРек = "" ИЛИ ИдБанкСчетаРек = "0") тогда
			
			БанкСчетКонтрагента 	= ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыБанкСчетов", ИдБанкСчетаРек);
			
			Если Не ЗначениеЗаполнено(БанкСчетКонтрагента) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден банковский счет реквизита. Попытка создания банковского счета с Ид: " + ИдБанкСчетаРек);
				БанкСчетКонтрагента 	= СформироватьБанковскийСчетПоИд(ОбщиеНастройки, ИдБанкСчетаРек);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(БанкСчетКонтрагента) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден банковский счет с Ид: " + ИдБанкСчетаРек);
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	


		Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
		Если НЕ ЗначениеЗаполнено(Валюта) тогда
			Валюта = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
		
		Заказ.Партнер 					= Партнер; 
		Заказ.Контрагент 				= Контрагент; 
		Заказ.КонтактноеЛицоПодписант 	= КонтактноеЛицо; 
		Заказ.БанковскийСчетКонтрагента= БанкСчетКонтрагента; 
		
		Если ЗначениеЗаполнено(Заказ.Контрагент) И ЗначениеЗаполнено(Заказ.Соглашение) И ЗначениеЗаполнено(Заказ.Организация) тогда
			Заказ.ЗаполнитьУсловияПродажПоСоглашению(); 
		КонецЕсли;
		
		Заказ.СпособДоставки 	= ?(ЗначениеЗаполнено(Заказ.СпособДоставки), Заказ.СпособДоставки, Перечисления.СпособыДоставки.Самовывоз);
							  
		Заказ.Валюта = Валюта;
		
		Если ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Заказ.Организация) И НЕ ЗначениеЗаполнено(Заказ.Договор) тогда
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") И Заказ.Соглашение.ИспользуютсяДоговорыКонтрагентов тогда
				Заказ.Договор	= ПолучитьДоговор(ОбщиеНастройки, Заказ.Организация, Контрагент, Валюта);
			КонецЕсли;
		КонецЕсли;

		Заказ.ЦенаВключаетНДС  = ЦенаВклНДС;		
		Заказ.СуммаДокумента	= СуммаДокумента;
		Заказ.Комментарий		= КомментарийМенеджера;
		Заказ.Склад 			= ?(ЗначениеЗаполнено(Заказ.Склад), Заказ.Склад, ОбщиеНастройки.НастройкиСинхронизацииТоваров.Склад);
		
		Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		Заказ.Приоритет = ?(ЗначениеЗаполнено(Заказ.Приоритет), Заказ.Приоритет, Приоритет);
		
		ХозяйственнаяОперация = Заказ.Соглашение.ХозяйственнаяОперация;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(ХозяйственнаяОперация), ХозяйственнаяОперация,  Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		Заказ.ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Заказ.ХозяйственнаяОперация), Заказ.ХозяйственнаяОперация, ХозяйственнаяОперация);
		
		ФормаОплаты = Заказ.Соглашение.ФормаОплаты;
		Заказ.ФормаОплаты = ?(ЗначениеЗаполнено(Заказ.ФормаОплаты), Заказ.ФормаОплаты, ФормаОплаты);
		
		ПорядокОплаты = Заказ.Соглашение.ПорядокОплаты;
		ПорядокОплаты = ?(ЗначениеЗаполнено(ПорядокОплаты), ПорядокОплаты,  Заказ.Договор.ПорядокОплаты);
		ПорядокОплаты = ?(ЗначениеЗаполнено(ПорядокОплаты), ПорядокОплаты,  Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
		Заказ.ПорядокОплаты = ?(ЗначениеЗаполнено(Заказ.ПорядокОплаты), Заказ.ПорядокОплаты, ПорядокОплаты);
		
		
		НалогообложениеНДС = Заказ.Соглашение.НалогообложениеНДС;
		НалогообложениеНДС = ?(ЗначениеЗаполнено(НалогообложениеНДС), НалогообложениеНДС,  Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		Заказ.НалогообложениеНДС = ?(ЗначениеЗаполнено(Заказ.НалогообложениеНДС), Заказ.НалогообложениеНДС, НалогообложениеНДС);
		
		Заказ.СкидкиРассчитаны = Истина;
		Заказ.ЖелаемаяДатаОтгрузки = ДатаОтгрузки;
		
#Область ЗаполнениеОтветственного		
		Менеджер = Неопределено;
		Если ЗначениеЗаполнено(ИдСотрудника) тогда
			НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти(ИдСотрудника, "ИдПользователя");
			Если НайденнаяСтрока <> Неопределено тогда
				Менеджер = НайденнаяСтрока.Пользователь1С; 
			КонецЕсли;
		КонецЕсли;
		Заказ.Менеджер	= Менеджер;
#КонецОбласти	

#Область ЗаполнениеБанковскогоСчетаОрганизации
		ВремСтруктДанных = Новый Структура;
		ВремСтруктДанных.Вставить("Организация"		, Заказ.Организация);
		ВремСтруктДанных.Вставить("ФормаОплаты"		, Заказ.ФормаОплаты);
		ВремСтруктДанных.Вставить("БанковскийСчет"	, Заказ.БанковскийСчет);
		ВремСтруктДанных.Вставить("Валюта"			, Заказ.Валюта);
		ВремСтруктДанных.Вставить("НаправлениеДеятельности", Заказ.НаправлениеДеятельности);
		
		Заказ.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ВремСтруктДанных);			
#КонецОбласти	
		
#Область ЗаполнениеГрафикаОплаты
		Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") тогда
			
			ГрафикОплаты = Заказ.Соглашение.ГрафикОплаты;
			
			Если НЕ ЗначениеЗаполнено(ГрафикОплаты) тогда
				
				Запрос = новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("ФормаОплаты", Заказ.ФормаОплаты);
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВремГрафикиОплаты.ГрафикОплаты КАК ГрафикОплаты
				|ИЗ
				|	ВремГрафикиОплаты КАК ВремГрафикиОплаты
				|ГДЕ
				|	ВремГрафикиОплаты.ФормаОплаты = &ФормаОплаты";
				
				тзнГО = Запрос.Выполнить().Выгрузить();;
				Если тзнГО.Количество()> 0 тогда
					ГрафикОплаты = тзнГО[0].ГрафикОплаты;	
				КонецЕсли;
			КонецЕсли;

			Заказ.ГрафикОплаты = ?(ЗначениеЗаполнено(Заказ.ГрафикОплаты), Заказ.ГрафикОплаты, ГрафикОплаты);
			
		КонецЕсли;
#КонецОбласти	

#Область ЗаполнениеСтатуса
		СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		Если ИнформацияОСтатусах <> Неопределено тогда			
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СтатусыЗаказов" тогда
				
				НайденныеСтроки = тзнСтатусов.НайтиСтроки(Новый Структура("ИдСтатуса", ИдСтатуса));
				Если НайденныеСтроки.Количество() >0 тогда
					НайденнаяСтрока = НайденныеСтроки[0];	
				Иначе
					НайденнаяСтрока = Неопределено;	
				КонецЕсли;
					
				Если НайденнаяСтрока <> Неопределено тогда
					СтатусЗаказа = НайденнаяСтрока.Статус;	
				Иначе                                                     
					СтатусЗаказа = ?(ЗначениеЗаполнено(Заказ.Статус), Заказ.Статус, СтатусЗаказа);	
				КонецЕсли;
			Иначе
				СтатусЗаказа = ?(ЗначениеЗаполнено(Заказ.Статус), Заказ.Статус, СтатусЗаказа);	
			КонецЕсли;
		Иначе
			СтатусЗаказа = ?(ЗначениеЗаполнено(Заказ.Статус), Заказ.Статус, СтатусЗаказа);	
		КонецЕсли;
		
		Если Закрыт И НЕ ЗначениеЗаполнено(СтатусЗаказа) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Документ закрыт, но не найден статус заказа");
		КонецЕсли;

		Заказ.Статус = СтатусЗаказа;
#КонецОбласти	
		
#Область ДобавлениеДополнительныхРеквизитовДокумента	
		НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоТрекНомераЗаказаБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = ТрекНомер;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоТрекНомераЗаказаБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = ТрекНомер;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоКомментарияЗаказаБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = КомментарийПользователя;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоКомментарияЗаказаБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = КомментарийПользователя;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНомераЗаказаБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = НомерЗаказаБ24;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНомераЗаказаБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = НомерЗаказаБ24;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоДатыЗаказаБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = ДатаНачала;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоДатыЗаказаБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = ДатаНачала;	
		КонецЕсли;
		
#КонецОбласти		
		
#Область ДобавлениеДополнительногоРеквизитаСтатуса
		Если ИнформацияОСтатусах <>Неопределено тогда
			
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда
				
				ЗначениеСвойства = Неопределено;
				
				НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
				Если НайденнаяСтрока <> Неопределено тогда
					ЗначениеСвойства = НайденнаяСтрока.Статус;	
				КонецЕсли;
				                                                                     
				НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ИнформацияОСтатусах.СвойствоЗаказа, "Свойство");
				Если НайденноеСвойствоТЧ = Неопределено тогда
					НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
					НовыйРеквизит.Значение = ЗначениеСвойства;
					НовыйРеквизит.Свойство = ИнформацияОСтатусах.СвойствоЗаказа;
				Иначе
					НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	


#Область ДобавлениеСлужбыДоставки

		Если ИнформацияОДоставках <>Неопределено тогда
			Если ИнформацияОДоставках.ИсточникСлужбДоставкиЗаказов = "СпособыДоставкиЗаказов" тогда
				НайденнаяСтрока = ИнформацияОДоставках.СоответствияСпособовДоставкиЗаказа.Найти(ИдДоставки, "ИдСлужбы");
				Если НайденнаяСтрока <> Неопределено тогда
					Заказ.СпособДоставки = НайденнаяСтрока.СпособДоставки;
					Заказ.СлужбаДоставки = НайденнаяСтрока.СлужбаДоставки;
				КонецЕсли;
			Иначе
				ЗначениеСвойства = Неопределено;
				НайденнаяСтрока = ИнформацияОДоставках.СоответствияСЗначениямиСвойствЗаказа.Найти(ИдДоставки, "ИдСлужбы");
				Если НайденнаяСтрока <> Неопределено тогда
					ЗначениеСвойства = НайденнаяСтрока.Служба;	
				КонецЕсли;
				
				НайденноеСвойствоТЧ = Заказ.ДополнительныеРеквизиты.Найти(ИнформацияОДоставках.СвойствоЗаказа, "Свойство");
				Если НайденноеСвойствоТЧ = Неопределено тогда
					НовыйРеквизит = Заказ.ДополнительныеРеквизиты.Добавить();
					НовыйРеквизит.Значение = ЗначениеСвойства;
					НовыйРеквизит.Свойство = ИнформацияОДоставках.СвойствоЗаказа;
				Иначе
					НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	                                                                                              




		Если НЕ ЗначениеЗаполнено(Заказ.АдресДоставки) тогда
		
			НайденнаяСтрокаАдрес = Заказ.Контрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Если НайденнаяСтрокаАдрес <> Неопределено тогда
				Заказ.АдресДоставки 			 = НайденнаяСтрокаАдрес.Представление;	
				Заказ.АдресДоставкиЗначенияПолей =  УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(НайденнаяСтрокаАдрес.Представление, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			КонецЕсли;
			
		КонецЕсли;
		
		
#Область ЗаполнениеТоваров	
		тзнТоваровАрх = Заказ.Товары.Выгрузить();
		Заказ.Товары.Очистить();
		
		ЭлементыКорзины = ?(ЭлементыКорзины = Неопределено, Новый Массив, ЭлементыКорзины);
		
		тзнСвойстваПозиций = Новый ТаблицаЗначений;
		тзнСвойстваПозиций.Колонки.Добавить("ИдентификаторПозиции");
		тзнСвойстваПозиций.Колонки.Добавить("КлючСвязи");
		тзнСвойстваПозиций.Колонки.Добавить("НаименованиеСвойства");
		тзнСвойстваПозиций.Колонки.Добавить("КодСвойства");
		тзнСвойстваПозиций.Колонки.Добавить("ИдентификаторСвойства");
		тзнСвойстваПозиций.Колонки.Добавить("Значение");
		тзнСвойстваПозиций.Колонки.Добавить("Номенклатура");
		тзнСвойстваПозиций.Колонки.Добавить("Характеристика");
		
		Для Каждого ТоварЗаказа из ЭлементыКорзины Цикл
			
			ИдПозиции			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварЗаказа.Получить("id"),"ЧГ=0"));
			КлючСвязиПозиции 	= Число(Прав(ИдПозиции, 5)); 

			ИдТовара 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварЗаказа.Получить("productId"),"ЧГ=0"));
			НаименованиеТовара	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Строка(ТоварЗаказа.Получить("name")));
			
			
			КодЕдИзм			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварЗаказа.Получить("measureCode"),"ЧГ=0"));
			НаименованиеЕдИзм	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварЗаказа.Получить("measureName"),"ЧГ=0"));
				                   
			Количество			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварЗаказа.Получить("quantity"),"ЧРД=.; ЧГ=0"));
			
			БазоваяЦена			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварЗаказа.Получить("basePrice"),"ЧРД=.; ЧГ=0"));
			Цена				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварЗаказа.Получить("price"),"ЧРД=.; ЧГ=0"));
			
			НалогВключен		= ТоварЗаказа.Получить("vatIncluded") = "Y";
			
			СтавкаНалога		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварЗаказа.Получить("vatRate"),"ЧРД=.; ЧГ=0"))*100;
			СтавкаНалога 		= ?(ЗначениеЗаполнено(СтавкаНалога),СтавкаНалога, 0);			
			
			Скидка				= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварЗаказа.Получить("discountPrice"),"ЧРД=.; ЧГ=0"));
	       	ПроцентСкидки		= 0;
			
			СвойстваПозиции		= ТоварЗаказа.Получить("properties");
			
			ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
#Область ПоискЕдиницыИзмерения	
				Если ЗначениеЗаполнено(КодЕдИзм) тогда
					ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодЕдИзм);;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) И ЗначениеЗаполнено(НаименованиеЕдИзм) тогда
					ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(НаименованиеЕдИзм);;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найдена единица измерения по ид. Попытка создания единицы измерения с Ид: " + КодЕдИзм);
					ЕдиницаИзмерения = СформироватьЕдиницуИзмеренияПоИд(ОбщиеНастройки, КодЕдИзм);
				КонецЕсли;
#КонецОбласти	
				
				Номенклатура	= Справочники.Номенклатура.ПустаяСсылка();	
				Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
#Область ПоискТовара	
				Если ЗначениеЗаполнено(ИдТовара) Тогда
					
					ИнформацияОНоменклатуре = Неопределено;	
					
					Запрос = новый Запрос;
					Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
					Запрос.УстановитьПараметр("Идентификатор", ИдТовара);
					
					Запрос.Текст = "ВЫБРАТЬ
					|	ВремИдентификаторы.Объект КАК Объект,
					|	ВремИдентификаторы.ПодчиненныйОбъект КАК ПодчиненныйОбъект
					|ИЗ
					|	ВремИдентификаторыТоваров КАК ВремИдентификаторы
					|ГДЕ
					|	ВремИдентификаторы.Идентификатор = &Идентификатор";
					
					ВыполненныйЗапрос = Запрос.Выполнить();
					
					Если НЕ ВыполненныйЗапрос.Пустой() тогда
						Выборка = ВыполненныйЗапрос.Выбрать();
						Пока Выборка.Следующий() Цикл
							ИнформацияОНоменклатуре = Выборка;
							Прервать;
						КонецЦикла;
					КонецЕсли;
					
					Если ИнформацияОНоменклатуре = Неопределено тогда
						
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Не найден товар по ид. Попытка создания товара с Ид: " + ИдТовара);
						ИнформацияОНоменклатуре = СформироватьНоменклатуруПоИд(ОбщиеНастройки, ИдТовара);
						
						Если ИнформацияОНоменклатуре = Неопределено тогда
							Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена информация о номенклатуре с Ид: " + ИдТовара);
							ЕстьКритическиеОшибки = Истина;
						Иначе
							Номенклатура   = ИнформацияОНоменклатуре.Объект;	
							Характеристика = ИнформацияОНоменклатуре.ПодчиненныйОбъект;	
						КонецЕсли;
						
					Иначе
						Номенклатура   = ИнформацияОНоменклатуре.Объект;	
						Характеристика = ИнформацияОНоменклатуре.ПодчиненныйОбъект;	
					КонецЕсли; 
				Иначе
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "В заказе был указан не товар, а строка. Товар: " + НаименованиеТовара + " в сделку: " + Строка(Заказ) + " не будет указан.");
				КонецЕсли; 			
#КонецОбласти	
				Номенклатура = ?(ЗначениеЗаполнено(Номенклатура), Номенклатура, Справочники.Номенклатура.ПустаяСсылка());

				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) тогда ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения КонецЕсли;

				Если СтавкаНалога = 0 тогда
					СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				ИначеЕсли СтавкаНалога = 18 тогда
					СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
				ИначеЕсли СтавкаНалога = 20 тогда
					СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				ИначеЕсли СтавкаНалога = 10 тогда
					СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
				Иначе
					СтавкаНДС = Номенклатура.СтавкаНДС;	
				КонецЕсли;
				
				НоваяЗаписьТовара = Заказ.Товары.Добавить();
				
#Область ЗаполнениеСтрокиСтарымиДанными	
				НайденныеСтроки = тзнТоваровАрх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
				Если НайденныеСтроки.Количество() > 0 тогда
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТовара, НайденныеСтроки[0]);
				КонецЕсли;
#КонецОбласти	
				НоваяЗаписьТовара.КлючСвязи 		= КлючСвязиПозиции;
				
				НоваяЗаписьТовара.Номенклатура 		= Номенклатура;
				НоваяЗаписьТовара.Характеристика 	= Характеристика;
				НоваяЗаписьТовара.Упаковка			= ЕдиницаИзмерения;
				НоваяЗаписьТовара.СтавкаНДС  		= СтавкаНДС;
				
				НоваяЗаписьТовара.Склад		 		= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.Склад), НоваяЗаписьТовара.Склад, Заказ.Склад);
				НоваяЗаписьТовара.ДатаОтгрузки 		= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.ДатаОтгрузки), НоваяЗаписьТовара.ДатаОтгрузки, ДатаОтгрузки);
				НоваяЗаписьТовара.ВариантОбеспечения= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.ВариантОбеспечения), НоваяЗаписьТовара.ВариантОбеспечения, Перечисления.ВариантыОбеспечения.НеТребуется);
				
				Если НоваяЗаписьТовара.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Номенклатура) тогда
					НоваяЗаписьТовара.Содержание = НаименованиеТовара;
				КонецЕсли;
				
			    НоваяЗаписьТовара.Количество  			= Количество;
			    НоваяЗаписьТовара.КоличествоУпаковок  	= Количество;
				
				
				НоваяЗаписьТовара.Цена 					= Цена;
				НоваяЗаписьТовара.ПроцентРучнойСкидки 	= ПроцентСкидки;
				
				СтруктураДействий = Новый Структура;
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(НоваяЗаписьТовара, СтруктураДействий, Неопределено);
				
#Область ЗаполнениеСвойствПозицийЗаказов	
			Если ТипЗнч(СвойстваПозиции) = Тип("Массив") тогда
				
				Для Каждого ТекСвойствоПозиции Из СвойстваПозиции Цикл
					
					ИдСвойстваПозицииПозиции 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекСвойствоПозиции.Получить("id"),"ЧГ=0"));
					ЗначениеСвойстваПозицииПозиции 		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекСвойствоПозиции.Получить("value"),"ЧРД=.; ЧГ=0"));
					НаименованиеСвойстваПозицииПозиции 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекСвойствоПозиции.Получить("name"));
					КодСвойстваПозицииПозиции 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекСвойствоПозиции.Получить("code"));
					
					НовоеСвойствоПозиции = тзнСвойстваПозиций.Добавить();
					НовоеСвойствоПозиции.ИдентификаторПозиции 	= ИдПозиции; 
					НовоеСвойствоПозиции.КлючСвязи 				= КлючСвязиПозиции; 
					НовоеСвойствоПозиции.Номенклатура 			= Номенклатура; 
					НовоеСвойствоПозиции.Характеристика 		= Характеристика; 
					
					НовоеСвойствоПозиции.ИдентификаторСвойства 	= ИдСвойстваПозицииПозиции; 
					НовоеСвойствоПозиции.НаименованиеСвойства 	= НаименованиеСвойстваПозицииПозиции; 
					НовоеСвойствоПозиции.КодСвойства 			= КодСвойстваПозицииПозиции; 
					НовоеСвойствоПозиции.Значение 				= ЗначениеСвойстваПозицииПозиции; 
					
				КонецЦикла;
			
			Иначе
				
				НовоеСвойствоПозиции = тзнСвойстваПозиций.Добавить();
				НовоеСвойствоПозиции.ИдентификаторПозиции 	= ИдПозиции; 
				НовоеСвойствоПозиции.КлючСвязи 				= Формат(КлючСвязиПозиции,"ЧГ=0");
				НовоеСвойствоПозиции.Номенклатура 			= Номенклатура; 
				НовоеСвойствоПозиции.Характеристика 		= Характеристика; 
			КонецЕсли;
#КонецОбласти	

		КонецЦикла;

#Область ЗаполнениеСуммыДоставки	
		СуммаДоставки = 0;       
		Если Отгрузки <> Неопределено тогда
			Для Каждого ТекОтгрузка из Отгрузки Цикл
				СуммаДоставки = СуммаДоставки + Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекОтгрузка.Получить("priceDelivery"),"ЧРД=.; ЧГ=0"));
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаДоставки > 0 тогда
			
			НоменклатураДоставки = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.НоменклатураДоставка;
			СтавкаНДС 			 = НоменклатураДоставки.СтавкаНДС;
				
			НоваяЗаписьТовара = Заказ.Товары.Добавить();
#Область ЗаполнениеСтрокиСтарымиДанными	
			НайденныеСтроки = тзнТоваровАрх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", НоменклатураДоставки, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
			Если НайденныеСтроки.Количество() > 0 тогда
				ЗаполнитьЗначенияСвойств(НоваяЗаписьТовара, НайденныеСтроки[0]);
			КонецЕсли;
#КонецОбласти	
			НоваяЗаписьТовара.КлючСвязи = 9999;
				
			НоваяЗаписьТовара.Номенклатура 		= НоменклатураДоставки;
			НоваяЗаписьТовара.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			
			Если НоваяЗаписьТовара.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Номенклатура) тогда
				НоваяЗаписьТовара.Содержание = НаименованиеТовара;
			КонецЕсли;
			
			НоваяЗаписьТовара.Склад		 		= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.Склад), НоваяЗаписьТовара.Склад, Заказ.Склад);
			НоваяЗаписьТовара.ВариантОбеспечения= ?(ЗначениеЗаполнено(НоваяЗаписьТовара.ВариантОбеспечения), НоваяЗаписьТовара.ВариантОбеспечения, Перечисления.ВариантыОбеспечения.НеТребуется);
			
			НоваяЗаписьТовара.Упаковка			= НоменклатураДоставки.ЕдиницаИзмерения;
			НоваяЗаписьТовара.Количество		= 1;
			НоваяЗаписьТовара.КоличествоУпаковок= 1;
			
			НоваяЗаписьТовара.ЕдиницаИзмерения	= ЕдиницаИзмерения;
			
			НоваяЗаписьТовара.СтавкаНДС			= СтавкаНДС;
			НоваяЗаписьТовара.Цена				= СуммаДоставки;
			
			НоваяЗаписьТовара.ПроцентАвтоматическойСкидки 	= 0;
			НоваяЗаписьТовара.СуммаАвтоматическойСкидки		= 0;
			
			НоваяЗаписьТовара.ПроцентСкидкиНаценки 	= 0;
			НоваяЗаписьТовара.СуммаСкидкиНаценки 	= 0;
			
			СтруктураДействий = Новый Структура;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Заказ);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(НоваяЗаписьТовара, СтруктураДействий, Неопределено);
			
		КонецЕсли;
#КонецОбласти	
		
		
#КонецОбласти	
		
		ЭтоНовыйОбъект = Заказ.Ссылка.Пустая()=Истина;
		
		ТаблицаСвойств = ПолучитьТаблицуСвойствЗаказов(ОбщиеНастройки, МенеджерВременныхТаблиц, СвойстваЗаказа);
		ЗаполнениеСвойствЗаказа(ОбщиеНастройки, ТаблицаСвойств, Заказ, ЭтоНовыйОбъект, Ложь);			
		
#Область ПроведениеДокумента
		ОтменаПроведенияСОшибкой = Ложь;
		Заказ.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);

		Если НЕ Отменен тогда
			
			Если (ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить закрытые" И Закрыт)
				ИЛИ ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить" тогда
				
				Попытка
					Заказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Проведен документ: " + Строка(Заказ));
				Исключение
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время проведения документа: " + Строка(Заказ) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
					
					ЕстьКритическиеОшибки = Истина;
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Попытка записи документа: " + Строка(Заказ));
					
					Попытка
						Заказ.Записать(РежимЗаписиДокумента.Запись);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан документ: " + Строка(Заказ));
					Исключение
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Заказ) + " возникли ошибки.");
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				
						ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
		
					КонецПопытки;
					
				КонецПопытки;
				
			Иначе
				Попытка
					Если ЭтоНовыйОбъект ИЛИ НЕ Заказ.Проведен тогда
						Заказ.Записать(РежимЗаписиДокумента.Запись); 
					Иначе
						Заказ.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
					КонецЕсли;
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан: " + Строка(Заказ));
				Исключение
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Заказ) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
					ОтменаПроведенияСОшибкой = Истина;
					ЕстьКритическиеОшибки 	 = Истина;
				
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
		
				КонецПопытки;
			КонецЕсли;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.КогдаОтменен = "Помечать на удаление" тогда
				Если НЕ Заказ.ПометкаУдаления Тогда
					Заказ.ПометкаУдаления = Истина;
					Попытка
						Заказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Помечен на удаление документ: " + Строка(Заказ));
					Исключение
					
						ЕстьКритическиеОшибки = Истина;
					
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Ошибка при установке пометки на удаление документа: " + Строка(Заказ) + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ОбщиеНастройки.НастройкиСинхронизацииЗаказов.КогдаОтменен = "Отменять проведение" тогда
				
				Если Заказ.Проведен Тогда
					Попытка
						Заказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Отменено проведение у документа: " + Строка(Заказ));
					Исключение
					
						ЕстьКритическиеОшибки 	 = Истина;
						ОтменаПроведенияСОшибкой = Истина;
						
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Ошибка при отмене проведения документа: " + Строка(Заказ) + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе 
				
	     	КонецЕсли;
		КонецЕсли;
		
		Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, НЕ ЕстьКритическиеОшибки)));
		
#КонецОбласти		

		Если ЗначениеЗаполнено(Заказ.Ссылка) тогда
			
			Для Каждого ТекСвойствоПозицииЗаказа из тзнСвойстваПозиций Цикл
				
				НоваяЗаписьСвойстваПозиции = РегистрыСведений.Б24_СвойстваПозицийЗаказов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(НоваяЗаписьСвойстваПозиции, ТекСвойствоПозицииЗаказа); 
				НоваяЗаписьСвойстваПозиции.Документ = Заказ.Ссылка;
				НоваяЗаписьСвойстваПозиции.Записать(Истина);
				
			КонецЦикла;
			
			ОбновитьДополнительнуюИнформациюОЗаказе(Заказ.Ссылка, ТекЭлемент);
			
			ЗаписатьКонтактДокумента(Заказ.Ссылка, КонтактноеЛицо);
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Заказ, Заказ.Ссылка, ИдБитрикс24);
			
			тзнСвойстваПозиций.Свернуть("ИдентификаторПозиции, КлючСвязи");
			Для Каждого ТекСвойствоПозицииЗаказа из тзнСвойстваПозиций Цикл
				
				ДанныеОПозиции = Новый Структура;
				ДанныеОПозиции.Вставить("Объект"			, Заказ.Ссылка);
				ДанныеОПозиции.Вставить("ПодчиненныйОбъект"	, ТекСвойствоПозицииЗаказа.ИдентификаторПозиции);
				
				Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыЗаказа, ДанныеОПозиции, ТекСвойствоПозицииЗаказа.ИдентификаторПозиции, ТекСвойствоПозицииЗаказа.КлючСвязи);

			КонецЦикла;
			
			Если НЕ ОтменаПроведенияСОшибкой тогда
				ЗаполнениеСвойствЗаказа(ОбщиеНастройки, ТаблицаСвойств, Заказ.Ссылка, ЭтоНовыйОбъект, Истина);			
			КонецЕсли;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьОплаты") тогда
				ЕстьКритическиеОшибкиОплат = ЗагрузитьОбновитьОплатыЗаказов(ОбщиеНастройки, ТекЭлемент.Получить("payments"), Заказ.Ссылка, МенеджерВременныхТаблиц);
				ЕстьКритическиеОшибки = ?(ЕстьКритическиеОшибки, ЕстьКритическиеОшибки, ЕстьКритическиеОшибкиОплат);
			КонецЕсли;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьОтгрузки") тогда
				ЕстьКритическиеОшибкиОтгрузок = ЗагрузитьОбновитьОтгрузкиЗаказов(ОбщиеНастройки, ТекЭлемент.Получить("shipments"), Заказ.Ссылка, МенеджерВременныхТаблиц);
				ЕстьКритическиеОшибки = ?(ЕстьКритическиеОшибки, ЕстьКритическиеОшибки, ЕстьКритическиеОшибкиОтгрузок);
			КонецЕсли;
			
		КонецЕсли;
		
#Область ДобавлениеСостоянияЗаказа
		Если ЗначениеЗаполнено(Заказ.Ссылка) тогда
			Если ИнформацияОСтатусах <> Неопределено тогда			
				
				Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда
					
					тзнСтатусов = ИнформацияОСтатусах.СтатусыНаправленийСостояний;
					НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
					
					Если НайденныеСтроки.Количество() > 0 тогда
						НайденнаяСтрока = НайденныеСтроки[0];	
					Иначе
						НайденнаяСтрока = Неопределено;	
					КонецЕсли;
					
					Если НайденнаяСтрока <> Неопределено тогда
						НоваяЗапись = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьМенеджерЗаписи();
						НоваяЗапись.Заказ 		= Заказ.Ссылка;
						НоваяЗапись.ДатаСобытия = ТекущаяДата();
						НоваяЗапись.Состояние 	= НайденнаяСтрока.Статус;
						НоваяЗапись.Записать();
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	

	КонецЦикла;

	Результат.Добавить((СформироватьПростуюСтруктуруСИд(ИдБитрикс24, НЕ ЕстьКритическиеОшибки)));
	
	пОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения; 	// чтобы лог не затерся.
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДополнительнуюИнформациюОЗаказе(Заказ, ИнформацияОЗаказе) Экспорт
	
	НоваяЗаписьИнфоЗаказа = РегистрыСведений.Б24_ИнформацияОЗаказах.СоздатьМенеджерЗаписи();
	НоваяЗаписьИнфоЗаказа.Заказ = Заказ;
	НоваяЗаписьИнфоЗаказа.ДополнительныеДанные = Новый ХранилищеЗначения(ИнформацияОЗаказе);
	НоваяЗаписьИнфоЗаказа.Записать();
	
КонецПроцедуры


Функция ПолучитьТаблицуСвойствЗаказов(ОбщиеНастройки, МенеджерВременныхТаблиц, СвойстваЗаказа)
	
	тзнЗначенийСвойствТовара = новый ТаблицаЗначений;
	тзнЗначенийСвойствТовара.Колонки.Добавить("Свойство");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЗначениеСвойства");
	тзнЗначенийСвойствТовара.Колонки.Добавить("ЭтоДополнительноеСведение");
	
	
	мСвойстваИсключения = ОбщиеНастройки.ИсключающиеСвойства;
	
	Для Каждого ТекСвойствоЗаказа из СвойстваЗаказа Цикл
		
		ИдСвойстваЗаказа			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекСвойствоЗаказа.Получить("orderPropsId"),"ЧГ=0"));
		ЗначениеСвойстваСПортала	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекСвойствоЗаказа.Получить("value"),"ЧРД=.; ЧГ=0"));
		
		СвойствоЗаказа = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремСвойства", ИдСвойстваЗаказа);
		
		Если ЗначениеЗаполнено(СвойствоЗаказа) тогда
			
			Если мСвойстваИсключения.Найти(СвойствоЗаказа) <> Неопределено тогда
				Продолжить;
			КонецЕсли;
			
			НовоеЗначениеСвойстваТовара = тзнЗначенийСвойствТовара.Добавить();
			НовоеЗначениеСвойстваТовара.Свойство 				 	= СвойствоЗаказа;
			НовоеЗначениеСвойстваТовара.ЭтоДополнительноеСведение 	= СвойствоЗаказа.ЭтоДополнительноеСведение; 
			
			ТипСвойстваСтрокой = Строка(СвойствоЗаказа.ТипЗначения);
			
			Если ТипСвойстваСтрокой = "Строка" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = ЗначениеСвойстваСПортала;
			ИначеЕсли ТипСвойстваСтрокой = "Булево" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Булево"), ЗначениеСвойстваСПортала);
			ИначеЕсли ТипСвойстваСтрокой = "Число" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), ЗначениеСвойстваСПортала);
			ИначеЕсли ТипСвойстваСтрокой = "Дата" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), ЗначениеСвойстваСПортала);
				//ИначеЕсли ТипСвойстваСтрокой = "Пользователь" тогда
			ИначеЕсли ТипСвойстваСтрокой = "Пользователь" тогда
				
				НайденнаяСтрока = ОбщиеНастройки.ТаблицаСопоставленияПользователей.Найти( ЗначениеСвойстваСПортала, "ИдПользователя");	
				
				Если НайденнаяСтрока <> Неопределено тогда
					НовоеЗначениеСвойстваТовара.ЗначениеСвойства = НайденнаяСтрока.Пользователь1С;
				КонецЕсли;
				
			ИначеЕсли ТипСвойстваСтрокой = "Дополнительное значение" тогда
				НовоеЗначениеСвойстваТовара.ЗначениеСвойства = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыЗначенийСвойств",  ЗначениеСвойстваСПортала);
			Иначе
				НовоеЗначениеСвойстваТовара.ПоддерживаетсяСвойство = Ложь;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат тзнЗначенийСвойствТовара;
	
КонецФункции

Процедура ЗаполнениеСвойствЗаказа(ОбщиеНастройки, ТаблицаСвойств, Объект, ЭтоНовыйОбъект, ЭтоДополнительноеСведение)
	
	Для Каждого ТекСвойство из ТаблицаСвойств Цикл
		
		Если ТекСвойство.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение тогда
			
			Если ЭтоДополнительноеСведение тогда
				
				НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Объект);
				НаборЗаписей.Прочитать();
				
				Если ТипЗнч(Объект)=Тип("ДокументСсылка.ЗаказКлиента") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляЗаказов") <> Истина тогда
					Возврат;
				Иначе
					Для Каждого ТекСвойство из ТаблицаСвойств Цикл
						
						ЕстьСвойство = Ложь;
						Для Каждого ТекСтрока из НаборЗаписей Цикл
							Если ТекСтрока.Свойство = ТекСвойство.Свойство тогда
								ЕстьСвойство = Истина;
								ТекСтрока.Значение = ТекСвойство.ЗначениеСвойства;	
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьСвойство = Ложь тогда
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Объект = Объект;
							НоваяЗапись.Свойство = ТекСвойство.Свойство;
							НоваяЗапись.Значение = ТекСвойство.ЗначениеСвойства;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
				НаборЗаписей.Записать();
				
			Иначе
				
				Если ТипЗнч(Объект)=Тип("ДокументОбъект.ЗаказКлиента") И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляЗаказов") <> Истина тогда
					Возврат;
				Иначе
					Для Каждого ТекСвойство из ТаблицаСвойств Цикл
						
						Если НЕ ЗначениеЗаполнено(ТекСвойство.ЗначениеСвойства)тогда
							Если ЭтоНовыйОбъект тогда
								Продолжить;
							КонецЕсли;
							
							Для Каждого ЗаполненнеСвойствоТовара из Объект.ДополнительныеРеквизиты Цикл
								Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойство.Свойство тогда
									ЗаполненнеСвойствоТовара.Значение = Неопределено;
								КонецЕсли;
							КонецЦикла;
						Иначе
							
							ЕстьРеквизит = Ложь;
							Для Каждого ЗаполненнеСвойствоТовара из Объект.ДополнительныеРеквизиты Цикл
								Если ЗаполненнеСвойствоТовара.Свойство = ТекСвойство.Свойство тогда
									ЗаполненнеСвойствоТовара.Значение = ТекСвойство.ЗначениеСвойства;
									Если ТипЗнч(ТекСвойство.ЗначениеСвойства) = Тип("Строка") тогда
										ЗаполненнеСвойствоТовара.ТекстоваяСтрока = ТекСвойство.ЗначениеСвойства;
									КонецЕсли;
									ЕстьРеквизит = Истина
								КонецЕсли;
							КонецЦикла;
							
							Если НЕ ЕстьРеквизит тогда
								НовыйРеквизит = Объект.ДополнительныеРеквизиты.Добавить();
								НовыйРеквизит.Свойство 	= ТекСвойство.Свойство; 
								НовыйРеквизит.Значение 	= ТекСвойство.ЗначениеСвойства; 
								Если ТипЗнч(ТекСвойство.ЗначениеСвойства) = Тип("Строка") тогда
									НовыйРеквизит.ТекстоваяСтрока = ТекСвойство.ЗначениеСвойства;
								КонецЕсли;
							КонецЕсли;	
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Функция ЗагрузитьОбновитьОтгрузкиЗаказов(ОбщиеНастройки, Отгрузки, Заказ, МенеджерВременныхТаблиц)
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	ДокументОснование = Заказ; 
	
	ЗагруженныеОбъекты = Новый Массив;
	
	РезультатЕстьКритическиеОшибки = Ложь;
	
	Для каждого ТекЭлемент из Отгрузки Цикл	
		
#Область ПолучениеЗначенийЗаказа

		ИдБитрикс24	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("id"),"ЧГ=0"));
		ИдЭлемента	= ИдБитрикс24;
		
		Если ЗагруженныеОбъекты.Найти(ИдБитрикс24) <> Неопределено тогда
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдБитрикс24);
		
		ЕстьКритическиеОшибки = Ложь;
		
		НомерОтгрузкиБ24 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("accountNumber"),"ЧГ=0"));
		НомерОтгрузкиБ24	= ?(ЗначениеЗаполнено(НомерОтгрузкиБ24), НомерОтгрузкиБ24, ИдБитрикс24);
		
		ДатаНачала     	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("dateInsert"));
		Если Не ЗначениеЗаполнено(ДатаНачала) тогда ДатаНачала = ТекущаяДата() КонецЕсли;
		
		ДатаОтгрузки = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("deliveryDocDate"));
		Если Не ЗначениеЗаполнено(ДатаОтгрузки) тогда ДатаОтгрузки = ДатаНачала + 7*24*60*60 КонецЕсли;
		
		ВнешнийИдентификатор= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("xmlId"));
		Комментарий 		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("comments"));
		
		ИспользуютсяНалоги	= ТекЭлемент.Получить("isUsedVat");   
		Отгружен	 		= ТекЭлемент.Получить("isShipped") = "Y";   
		Отменен	 			= ТекЭлемент.Получить("isCanceled") = "Y";   
		ДатаОтмены 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"), Формат(ТекЭлемент.Получить("dateCanceled"),"ЧГ=0"));   
		ИдПричиныОтмены		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("empCanceledId"),"ЧГ=0"));   
		
		ИдСтатуса			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("statusId"),"ЧГ=0"));
		
		СуммаДоставки 		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("priceDelivery"),"ЧРД=.; ЧГ=0"));
		
		Закрыт				= Отгружен;
		
		ТрекНомер 			= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("trackingNumber"),"ЧГ=0"));
		
		ЭлементыКорзины = Неопределено;
		Корзина = ТекЭлемент.Получить("basket");
		Если Корзина <> Неопределено тогда
			ЭлементыКорзины = Корзина.Получить("items");	
		КонецЕсли;
		ЭлементыКорзины = ?(ЭлементыКорзины = Неопределено, Новый Массив, ЭлементыКорзины);
		
		ИдСотрудника	= "";
#КонецОбласти	
		
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОСтатусах") тогда	
			ИнформацияОСтатусах = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОСтатусах;
			Если ИнформацияОСтатусах.ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" тогда
				тзнСтатусов = ИнформацияОСтатусах.СоответствияСЗначенямиСвойствОтгрузки;	
			Иначе	
				тзнСтатусов = ИнформацияОСтатусах.СоответствияССтатусамиОтгрузки;
			КонецЕсли;
		Иначе                                             
			ИнформацияОСтатусах = Неопределено;
		КонецЕсли;                                                        
		
		Если ИнформацияОСтатусах <> Неопределено тогда
			
			ПропускаемЗаказИзЗаСтатуса = Ложь;
			
			НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
			Если НайденнаяСтрока <> Неопределено тогда
				ПропускаемЗаказИзЗаСтатуса = НайденнаяСтрока.НеЗагружать;	
			КонецЕсли;				
			
			Если ПропускаемЗаказИзЗаСтатуса тогда			
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Отгрузка с ид:  " + Строка(ИдБитрикс24) + " будет пропущена т.к.  у нее неподходящий статус");
				Продолжить;  			
			КонецЕсли;					
		КонецЕсли;
		
#Область ПоискСозданиеОтгрузки		
		ЭтоНоваяОтгрузка = Ложь;
		
		Отгрузка = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыОтгрузок", ИдЭлемента);	
		Если ЗначениеЗаполнено(ВнешнийИдентификатор) И НЕ ЗначениеЗаполнено(Отгрузка) тогда
			Отгрузка = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.РеализацияТоваровУслуг"), ВнешнийИдентификатор);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отгрузка) тогда 
			
			Если Отменен тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, " Отгрузка с ид:  " + Строка(ИдБитрикс24) + " будет пропущеан т.к.  его в 1С нет и она отменена.");
				Продолжить;  			
			КонецЕсли;					
			
			Отгрузка = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ЭтоНоваяОтгрузка = Истина;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ОбновлятьДокументы тогда
				Отгрузка = Отгрузка.ПолучитьОбъект();
			Иначе
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что заказы и подчиненные данные не обновляются. Отгрузка: " + Строка(Отгрузка) + " не будет обновлена.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	
		
		Если ЭтоНоваяОтгрузка тогда
			Отгрузка.Дата 				= ТекущаяДата();
			Отгрузка.Организация 		= ДокументОснование.Организация;  
			Отгрузка.Подразделение 		= ДокументОснование.Подразделение;  
		КонецЕсли;
		
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникДатыДокумента = "По данным с Битрикс24" тогда
			Отгрузка.Дата = ДатаНачала;	
		КонецЕсли;
		
		Если ЭтоНоваяОтгрузка тогда
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникНомераДокумента = "По данным с Битрикс24" тогда
				Отгрузка.Номер = НомерОтгрузкиБ24;	
			Иначе
				Отгрузка.УстановитьНовыйНомер();
				//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Заказ, Истина, "");					
			КонецЕсли;
		КонецЕсли;
		
		Отгрузка.Заказ 						= ДокументОснование;
		
		Отгрузка.Контрагент 				= ДокументОснование.Контрагент;
		Отгрузка.КонтактноеЛицоПодписант	= ДокументОснование.КонтактноеЛицо;
		Отгрузка.Договор					= ДокументОснование.Договор;
		
		Отгрузка.БанковскийСчет 			= ДокументОснование.БанковскийСчет;  
		Отгрузка.БанковскийСчетКонтрагента 	= ДокументОснование.БанковскийСчетКонтрагента;  
		
		//Отгрузка.ВидЦен					= ДокументОснование.ВидЦен;
		Отгрузка.ВидОперации				= Перечисления.ВидыОперацийРеализацияТоваровУслуг.ПродажаПокупателю;
		Отгрузка.ХозяйственнаяОперация		= Справочники.ХозяйственныеОперации.ПродажаПокупателю;
		
		Отгрузка.НалогообложениеНДС 		= ДокументОснование.ДокументОснование;
		Отгрузка.НДСВключатьВСтоимость		= ДокументОснование.НДСВключатьВСтоимость;
		Отгрузка.СуммаВключаетНДС			= ДокументОснование.СуммаВключаетНДС;
		Отгрузка.СкидкиРассчитаны 			= ДокументОснование.СкидкиРассчитаны;
		
		
		Отгрузка.Комментарий				= Комментарий;
		Отгрузка.УсловияСчетаЗаказа 		= ДокументОснование.УсловияСчетаЗаказа;
		Отгрузка.Автор 						= ПараметрыСеанса.ТекущийПользователь;	
		Отгрузка.Ответственный				= ДокументОснование.Ответственный;
		
		Отгрузка.ВалютаДокумента			= ДокументОснование.ВалютаДокумента;
		Отгрузка.Курс 						= ДокументОснование.Курс;
		Отгрузка.Кратность					= ДокументОснование.Кратность;
		
		//Отгрузка.СуммаДокумента				= СуммаДокумента;
		
		Отгрузка.АдресДоставки				= ДокументОснование.АдресДоставки;
		Отгрузка.СтруктурнаяЕдиница 		= ДокументОснование.СтруктурнаяЕдиницаРезерв;
		
		Отгрузка.СтоимостьДоставки		= 0;
		Отгрузка.СтавкаНДСДоставки 		= Неопределено;
		Отгрузка.СуммаНДСДоставки		= 0;
		
#Область ДобавлениеДополнительныхРеквизитовДокумента	
		НайденноеСвойствоТЧ = Отгрузка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоНомераОтгрузкиБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Отгрузка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = ИдЭлемента;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоНомераОтгрузкиБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = ИдЭлемента;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Отгрузка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоДатыОтгрузкиБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Отгрузка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = ДатаНачала;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоДатыОтгрузкиБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = ДатаНачала;	
		КонецЕсли;
		
		НайденноеСвойствоТЧ = Отгрузка.ДополнительныеРеквизиты.Найти(ОбщиеНастройки.ПредопределенноеСвойствоТрекНомераОтгрузкиБитрикс24, "Свойство");
		Если НайденноеСвойствоТЧ = Неопределено тогда
			НовыйРеквизит = Отгрузка.ДополнительныеРеквизиты.Добавить();
			НовыйРеквизит.Значение = ТрекНомер;
			НовыйРеквизит.Свойство = ОбщиеНастройки.ПредопределенноеСвойствоТрекНомераОтгрузкиБитрикс24;
		Иначе
			НайденноеСвойствоТЧ.Значение = ТрекНомер;	
		КонецЕсли;
		
#КонецОбласти		
		
#Область ДобавлениеДополнительногоРеквизитаСтатуса
		Если ИнформацияОСтатусах <>Неопределено тогда
			
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоОтгрузок" тогда
				
				ЗначениеСвойства = Неопределено;
				
				НайденнаяСтрока = тзнСтатусов.Найти(ИдСтатуса, "ИдСтатуса");
				Если НайденнаяСтрока <> Неопределено тогда
					ЗначениеСвойства = НайденнаяСтрока.Статус;	
				КонецЕсли;
				                                                                     
				НайденноеСвойствоТЧ = Отгрузка.ДополнительныеРеквизиты.Найти(ИнформацияОСтатусах.СвойствоЗаказа, "Свойство");
				Если НайденноеСвойствоТЧ = Неопределено тогда
					НовыйРеквизит = Отгрузка.ДополнительныеРеквизиты.Добавить();
					НовыйРеквизит.Значение = ЗначениеСвойства;
					НовыйРеквизит.Свойство = ИнформацияОСтатусах.СвойствоЗаказа;
				Иначе
					НайденноеСвойствоТЧ.Значение = ЗначениеСвойства;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
#КонецОбласти	
		
#Область ЗаполнениеТоваров	
		тзнТоваровАрх = Отгрузка.Запасы.Выгрузить();
		Отгрузка.Запасы.Очистить();
		
		Для Каждого ТоварОтгрузки из ЭлементыКорзины Цикл
			
			ИдПозицииСтрокой	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТоварОтгрузки.Получить("basketId"),"ЧГ=0"));
			ИдПозиции 			= Число(ИдПозицииСтрокой); 
			КлючСвязиПозиции 	= Число(Прав(ИдПозицииСтрокой, 5)); 
			
			ПозицияЗаказа = ДокументОснование.Запасы.Найти(КлючСвязиПозиции, "КлючСвязи");
			
			Если ПозицияЗаказа = Неопределено тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не найдена информация позиции номенклатуры отгрузки по данным заказа. Ключ связи : " + Строка(КлючСвязиПозиции) + " . Возможно потерялись ключи связи в заказе из за удаления позиций товаров в заказе или изменении ключей связи.");
				ЕстьКритическиеОшибки = Истина;
				Продолжить;	
			КонецЕсли;
			
			ПозицияОтгрузки = тзнТоваровАрх.Найти(КлючСвязиПозиции, "КлючСвязи");
			
			Если ПозицияОтгрузки <> Неопределено тогда
				ИнформацияОПозицииТовара = ПозицияОтгрузки;	
			ИначеЕсли ПозицияЗаказа <> Неопределено тогда 
				ИнформацияОПозицииТовара = ПозицияЗаказа;	
			Иначе
				Продолжить;
			КонецЕсли;
				
			Номенклатура				= ИнформацияОПозицииТовара.Номенклатура;
			Характеристика     			= ИнформацияОПозицииТовара.Характеристика;
			Содержание 					= ИнформацияОПозицииТовара.Содержание;
			ЕдиницаИзмерения  			= ИнформацияОПозицииТовара.ЕдиницаИзмерения;
			СтавкаНДС          			= ИнформацияОПозицииТовара.СтавкаНДС;
			Партия          			= ИнформацияОПозицииТовара.Партия;
			СтавкаНСтранаПроисхожденияДС= ИнформацияОПозицииТовара.СтранаПроисхождения;
			НомерГТД          			= ИнформацияОПозицииТовара.НомерГТД;
			
			Количество	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварОтгрузки.Получить("quantity"),"ЧРД=.; ЧГ=0"));
			Резерв		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТоварОтгрузки.Получить("reservedQuantity"),"ЧРД=.; ЧГ=0"));
			
			Цена 			= ИнформацияОПозицииТовара.Цена;	
			СуммаНДС 		= ИнформацияОПозицииТовара.СуммаНДС/ИнформацияОПозицииТовара.Количество;	
			Сумма 			= ИнформацияОПозицииТовара.Сумма/ИнформацияОПозицииТовара.Количество;
			Всего 			= ИнформацияОПозицииТовара.Всего/ИнформацияОПозицииТовара.Количество;
			
			ПроцентСкидкиНаценки 	= ИнформацияОПозицииТовара.ПроцентСкидкиНаценки;	
			СуммаСкидкиНаценки 		= ИнформацияОПозицииТовара.СуммаСкидкиНаценки/ИнформацияОПозицииТовара.Количество;	
			
			ПроцентАвтоматическойСкидки 	= ИнформацияОПозицииТовара.ПроцентАвтоматическойСкидки;	
			СуммаАвтоматическойСкидки 		= ИнформацияОПозицииТовара.СуммаАвтоматическойСкидки/ИнформацияОПозицииТовара.Количество;	
			
			
			НоваяЗаписьТовара = Отгрузка.Запасы.Добавить();
			НоваяЗаписьТовара.КлючСвязи = КлючСвязиПозиции;
			НоваяЗаписьТовара.Заказ 	= ДокументОснование;
				
			НоваяЗаписьТовара.Номенклатура 		= Номенклатура;
			НоваяЗаписьТовара.Характеристика 	= Характеристика;
			НоваяЗаписьТовара.ТипНоменклатурыЗапас = ?(Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас, Истина, Ложь);
				
			Если НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Содержание) И 
				(Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(Номенклатура)) тогда
				НоваяЗаписьТовара.Содержание = Содержание;
			КонецЕсли;
				
			НоваяЗаписьТовара.ЕдиницаИзмерения	= ЕдиницаИзмерения;
			НоваяЗаписьТовара.Количество		= Количество;
			НоваяЗаписьТовара.СтавкаНДС			= СтавкаНДС;
			НоваяЗаписьТовара.Цена				= Цена;
				
				
			НоваяЗаписьТовара.ПроцентАвтоматическойСкидки 	= ПроцентАвтоматическойСкидки;
			НоваяЗаписьТовара.СуммаАвтоматическойСкидки		= СуммаАвтоматическойСкидки*НоваяЗаписьТовара.Количество;
			НоваяЗаписьТовара.СуммаСкидкиНаценки 			= СуммаСкидкиНаценки*НоваяЗаписьТовара.Количество;
			НоваяЗаписьТовара.Сумма 						= НоваяЗаписьТовара.Цена*НоваяЗаписьТовара.Количество-НоваяЗаписьТовара.СуммаСкидкиНаценки; 
				
			//ПересчитатьСтрокуДокумента(Отгрузка, НоваяЗаписьТовара);
			
		КонецЦикла;

#Область ЗаполнениеСуммыДоставки	

		Если СуммаДоставки > 0 тогда
			                            
			НоменклатураДоставки = ОбщиеНастройки.НастройкиСинхронизацииЗаказов.НоменклатураДоставка;
			СтавкаНДС 			 = Отгрузка.НоменклатураДоставки.СтавкаНДС;
			СтавкаНалога 		 = СтавкаНДС.Ставка;
			Если Отгрузка.НоменклатураДоставки = НоменклатураДоставки тогда
				Отгрузка.СтоимостьДоставки	= СуммаДоставки;
				Отгрузка.СтавкаНДСДоставки = СтавкаНДС;
				Отгрузка.СуммаНДСДоставки	= ?(Отгрузка.СуммаВключаетНДС, Отгрузка.СтоимостьДоставки/(СтавкаНалога+100)*СтавкаНалога, Отгрузка.СтоимостьДоставки * СтавкаНалога/100);
			Иначе
				
				НоваяЗаписьТовара = Отгрузка.Запасы.Добавить();
#Область ЗаполнениеСтрокиСтарымиДанными	
				НайденныеСтроки = тзнТоваровАрх.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", НоменклатураДоставки, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
				Если НайденныеСтроки.Количество() > 0 тогда
					ЗаполнитьЗначенияСвойств(НоваяЗаписьТовара, НайденныеСтроки[0]);
				КонецЕсли;
#КонецОбласти	
				НоваяЗаписьТовара.КлючСвязи = 9999;
				НоваяЗаписьТовара.Заказ 			= ДокументОснование;
				
				НоваяЗаписьТовара.Номенклатура 		= НоменклатураДоставки;
				НоваяЗаписьТовара.Характеристика 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				НоваяЗаписьТовара.ТипНоменклатурыЗапас = ?(НоменклатураДоставки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас, Истина, Ложь);
				
				Если НЕ ЗначениеЗаполнено(НоваяЗаписьТовара.Содержание) И 
					(НоменклатураДоставки.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга ИЛИ НЕ ЗначениеЗаполнено(НоменклатураДоставки)) тогда
					НоваяЗаписьТовара.Содержание = Строка(НоменклатураДоставки);
				КонецЕсли;
				
				НоваяЗаписьТовара.ЕдиницаИзмерения	= НоменклатураДоставки.ЕдиницаИзмерения;
				НоваяЗаписьТовара.Количество		= 1;
				НоваяЗаписьТовара.СтавкаНДС			= СтавкаНДС;
				НоваяЗаписьТовара.Цена				= СуммаДоставки;
				
				НоваяЗаписьТовара.ПроцентАвтоматическойСкидки 	= 0;
				НоваяЗаписьТовара.СуммаАвтоматическойСкидки		= 0;
				
				НоваяЗаписьТовара.ПроцентСкидкиНаценки 	= 0;
				НоваяЗаписьТовара.СуммаСкидкиНаценки 	= 0;
				
				НоваяЗаписьТовара.Сумма = СуммаДоставки; 
				
				Если Отгрузка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
					
					НоваяЗаписьТовара.СуммаНДС = ?(Отгрузка.СуммаВключаетНДС,
					НоваяЗаписьТовара.Сумма - (СуммаДоставки) / ((СтавкаНалога + 100) / 100),
					НоваяЗаписьТовара.Сумма * СтавкаНалога / 100);
				Иначе
					НоваяЗаписьТовара.СуммаНДС = 0;
				КонецЕсли;
				
				НоваяЗаписьТовара.Всего = НоваяЗаписьТовара.Сумма + ?(Отгрузка.СуммаВключаетНДС, 0, НоваяЗаписьТовара.СуммаНДС);
				
			КонецЕсли;
			
		КонецЕсли;
		
#КонецОбласти	
		
		
#КонецОбласти	
		
		ЭтоНовыйОбъект = Отгрузка.Ссылка.Пустая()=Истина;
		
#Область ПроведениеДокумента
		ОтменаПроведенияСОшибкой = Ложь;
		Отгрузка.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);

		Если НЕ Отменен тогда
			
			Если (ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить закрытые" И Закрыт)
				ИЛИ ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить" тогда
				
				Попытка
					Отгрузка.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Проведен документ: " + Строка(Отгрузка));
				Исключение
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время проведения документа: " + Строка(Отгрузка) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
					
					ЕстьКритическиеОшибки = Истина;
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Попытка записи документа: " + Строка(Отгрузка));
					
					Попытка
						Отгрузка.Записать(РежимЗаписиДокумента.Запись);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан документ: " + Строка(Отгрузка));
					Исключение
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Отгрузка) + " возникли ошибки.");
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				
						ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
		
					КонецПопытки;
					
				КонецПопытки;
				
			Иначе
				Попытка
					Если ЭтоНовыйОбъект ИЛИ НЕ Отгрузка.Проведен тогда
						Отгрузка.Записать(РежимЗаписиДокумента.Запись); 
					Иначе
						Отгрузка.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
					КонецЕсли;
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан: " + Строка(Отгрузка));
				Исключение
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Отгрузка) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
					ОтменаПроведенияСОшибкой = Истина;
					ЕстьКритическиеОшибки 	 = Истина;
				
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
		
				КонецПопытки;
			КонецЕсли;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.КогдаОтменен = "Помечать на удаление" тогда
				Если НЕ Отгрузка.ПометкаУдаления Тогда
					Отгрузка.ПометкаУдаления = Истина;
					Попытка
						Отгрузка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Помечен на удаление документ: " + Строка(Отгрузка));
					Исключение
					
						ЕстьКритическиеОшибки = Истина;
					
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Ошибка при установке пометки на удаление документа: " + Строка(Отгрузка) + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
				
			ИначеЕсли ОбщиеНастройки.НастройкиСинхронизацииЗаказов.КогдаОтменен = "Отменять проведение" тогда
				
				Если Отгрузка.Проведен Тогда
					Попытка
						Отгрузка.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Отменено проведение у документа: " + Строка(Отгрузка));
					Исключение
					
						ЕстьКритическиеОшибки 	 = Истина;
						ОтменаПроведенияСОшибкой = Истина;
						
						Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Ошибка при отмене проведения документа: " + Строка(Отгрузка) + Символы.ПС + ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе 
				
	     	КонецЕсли;
		КонецЕсли;
		
		РезультатЕстьКритическиеОшибки = ?(ЕстьКритическиеОшибки, ЕстьКритическиеОшибки, РезультатЕстьКритическиеОшибки);
		
#КонецОбласти		

		Если ЗначениеЗаполнено(Отгрузка.Ссылка) тогда
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка, Отгрузка.Ссылка, ИдБитрикс24);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатЕстьКритическиеОшибки;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ЗагрузитьОбновитьОплатыЗаказов(ОбщиеНастройки, Оплаты, Заказ, МенеджерВременныхТаблиц)
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	РезультатЕстьКритическиеОшибки = Ложь;
	
	ЗагруженныеОбъекты = Новый Массив;
	
	Для каждого ТекЭлемент из Оплаты Цикл	
		
		ИдБитрикс24	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("id"),"ЧГ=0"));
		
		Если ЗагруженныеОбъекты.Найти(ИдБитрикс24) <> Неопределено тогда
			Продолжить;	
		КонецЕсли;
		ЗагруженныеОбъекты.Добавить(ИдБитрикс24);
		
		ЕстьКритическиеОшибки = Ложь;
		
		НомерОплатыБ24 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("accountNumber"),"ЧГ=0"));
		НомерОплатыБ24	= ?(ЗначениеЗаполнено(НомерОплатыБ24), НомерОплатыБ24, ИдБитрикс24);
		
		ДатаДокумента  	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("dateBill"));
		ДатаОплаты  	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Дата"),   ТекЭлемент.Получить("datePaid"));
		
		ВнешнийИдентификатор = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("xmlId"));
		Комментарий 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("comments"));
		
		ИдЗаказа		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("orderId"),"ЧГ=0"));
		
		СуммаДокумента 	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Число"), Формат(ТекЭлемент.Получить("sum"),"ЧРД=.; ЧГ=0"));
		
		Оплачен 		= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("paid"))= "Y";
		
		ПлатежнаяСистема= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ТекЭлемент.Получить("paySystemId"),"ЧГ=0"));
		ИнформацияОПлатежнойСистеме = Неопределено; 
		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОПлатежныхСистемах") тогда
			
			Для Каждого ТекПлатежнаяСистема из ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИнформацияОПлатежныхСистемах.СоответствияПлатежныхСистем Цикл
				
				Если ТекПлатежнаяСистема.ПлатежнаяСистема.НайтиПоЗначению(ПлатежнаяСистема)<> Неопределено тогда
					ИнформацияОПлатежнойСистеме = ТекПлатежнаяСистема;	
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ВидОплаты = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), ТекЭлемент.Получить("paySystemIsCash"));  //"Y" - наличные, "A" -эквайринг, "N" -безнал
		
#Область ПоискСозданиеОплаты		
		ЭтоНоваяОплата = Ложь;
		
		Оплата = ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, "ВремИдентификаторыОплат", ИдБитрикс24);	
		Если ЗначениеЗаполнено(ВнешнийИдентификатор) И НЕ ЗначениеЗаполнено(Заказ) тогда
			
			Если ВидОплаты = "Y" тогда
				Оплата = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), ВнешнийИдентификатор);
			ИначеЕсли ВидОплаты = "N" тогда
				Оплата = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"), ВнешнийИдентификатор);
			Иначе
				Оплата = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"), ВнешнийИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Оплата) тогда 
			
			Если ВидОплаты = "Y" тогда
				Оплата = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ИначеЕсли ВидОплаты = "N" тогда
				Оплата = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
			Иначе
				Оплата = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
			КонецЕсли;
			
			ЭтоНоваяОплата = Истина;
		Иначе
			
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ОбновлятьДокументы тогда
				Оплата = Оплата.ПолучитьОбъект();
			Иначе
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "В настройках указано, что заказы и подчиненные данные не обновляются. Заказ: " + Строка(Заказ) + " не будет обновлен.");
				Продолжить;  				
			КонецЕсли;
		КонецЕсли;
#КонецОбласти	

		Если ЭтоНоваяОплата тогда
			Оплата.Дата 					 = ТекущаяДата();
			Оплата.Организация 				 = Заказ.Организация;  
			
			Если ВидОплаты = "Y" тогда
				Оплата.Подразделение = Заказ.СтруктурнаяЕдиницаПродажи;  
			КонецЕсли;
			
		КонецЕсли;

		Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникДатыДокумента = "По данным с Битрикс24" тогда
			Оплата.Дата = ДатаДокумента;	
		КонецЕсли;
		
		Если ЭтоНоваяОплата тогда
			Если ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ИсточникНомераДокумента = "По данным с Битрикс24" тогда
				Оплата.Номер = НомерОплатыБ24;	
			Иначе
				Оплата.УстановитьНовыйНомер();
				//ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Заказ, Истина, "");					
			КонецЕсли;
		КонецЕсли;
		
		Оплата.ДокументОснование 		= Заказ; 	
		Оплата.Контрагент 				= Заказ.Контрагент; 	
		
		Оплата.НалогообложениеНДС 		= Заказ.НалогообложениеНДС;
		Оплата.ВалютаДенежныхСредств 	= Заказ.ВалютаДокумента;
		Оплата.Курс 					= Заказ.Курс;
		Оплата.Кратность 				= Заказ.Кратность;
		Оплата.СуммаДокумента 			= СуммаДокумента; 	
		
		
		Если ВидОплаты = "Y" И ТипЗнч(Оплата) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") тогда
			Оплата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента; 
			
			Если ИнформацияОПлатежнойСистеме <> Неопределено тогда
				Оплата.Касса = ИнформацияОПлатежнойСистеме.Касса; 
			КонецЕсли;
			
		ИначеЕсли ВидОплаты = "N" И ТипЗнч(Оплата) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") тогда
			Оплата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;  
			
			Если ИнформацияОПлатежнойСистеме <> Неопределено тогда
				Оплата.БанковскийСчет = ИнформацияОПлатежнойСистеме.РасчетныйСчет; 
			КонецЕсли;
			
			Оплата.БанковскийСчет 		= ?(ЗначениеЗаполнено(Оплата.БанковскийСчет), Оплата.БанковскийСчет, Заказ.БанковскийСчетКонтрагента); 	
			
		ИначеЕсли ВидОплаты = "A" И ТипЗнч(Оплата) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") тогда
			
			Оплата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;  
			
			Если ИнформацияОПлатежнойСистеме <> Неопределено тогда
				Оплата.ЭквайринговыйТерминал 	= ИнформацияОПлатежнойСистеме.Терминал; 
			КонецЕсли;
			
		КонецЕсли;
		
		Оплата.СтатьяДвиженияДенежныхСредств = ?(ЗначениеЗаполнено(Оплата.Статья), Оплата.Статья, ОбщиеНастройки.НастройкиСинхронизацииЗаказов.СтатьяДДС); 	
		
		
		Оплата.РасшифровкаПлатежа.Очистить();
		НоваяСтрокаРасшифровки = Оплата.РасшифровкаПлатежа.Добавить();
		
		НоваяСтрокаРасшифровки.Заказ		 = Заказ;
		НоваяСтрокаРасшифровки.Партнер		 = Заказ.Партнер;
		
		НоваяСтрокаРасшифровки.СтатьяДвиженияДенежныхСредств 	= Оплата.СтатьяДвиженияДенежныхСредств;
		НоваяСтрокаРасшифровки.Сумма 							= Оплата.СуммаДокумента;
		НоваяСтрокаРасшифровки.СуммаВзаиморасчетов	 			= Оплата.СуммаДокумента;
		НоваяСтрокаРасшифровки.СтавкаНДС	 					= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.СтавкаНДСРасшифровки;
		
#Область ПроведениеДокумента
		ОтменаПроведенияСОшибкой = Ложь;
		Оплата.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
		
		Если (ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить закрытые" И Оплачен)
			ИЛИ (ОбщиеНастройки.НастройкиСинхронизацииЗаказов.ПроводитьЕслиОплачен И Оплачен)
			ИЛИ ОбщиеНастройки.НастройкиСинхронизацииЗаказов.РежимЗаписиДокумента = "Проводить" тогда
			
			Попытка
				Оплата.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Проведен документ: " + Строка(Оплата));
			Исключение
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время проведения документа: " + Строка(Оплата) + " возникли ошибки.");
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				
				ЕстьКритическиеОшибки = Истина;
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Попытка записи документа: " + Строка(Оплата));
				
				Попытка
					Оплата.Записать(РежимЗаписиДокумента.Запись);
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан документ: " + Строка(Оплата));
				Исключение
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Оплата) + " возникли ошибки.");
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
			
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
				КонецПопытки;
				
			КонецПопытки;
			
		Иначе
			Попытка
				Если ЭтоНоваяОплата ИЛИ НЕ Оплата.Проведен тогда
					Оплата.Записать(РежимЗаписиДокумента.Запись); 
				Иначе
					Оплата.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
				КонецЕсли;
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Записан: " + Строка(Оплата));
			Исключение
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Во время записи документа: " + Строка(Оплата) + " возникли ошибки.");
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, ОписаниеОшибки());
				ОтменаПроведенияСОшибкой = Истина;
				ЕстьКритическиеОшибки 	 = Истина;
			
				ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
	
			КонецПопытки;
		КонецЕсли;
		
		РезультатЗагрузкиОплат = ?(ЕстьКритическиеОшибки, ЕстьКритическиеОшибки, РезультатЕстьКритическиеОшибки);
		
#КонецОбласти		
		
		Если ЗначениеЗаполнено(Оплата.Ссылка) тогда
			
			Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Оплата, Оплата.Ссылка, ИдБитрикс24);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатЕстьКритическиеОшибки;
	
КонецФункции

#КонецОбласти


#Область ОбщиеПроцедурыИФункции

Процедура ЗаписатьКонтактДокумента(Документ, КонтактноеЛицо)
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
		НоваяЗапись = РегистрыСведений.Б24_УстановленныеКонтактыВДокументах.СоздатьМенеджерЗаписи();
		НоваяЗапись.Документ 	= Документ;
		НоваяЗапись.Контакт 	= КонтактноеЛицо;
		НоваяЗапись.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДоговор(ОбщиеНастройки, Организация, Контрагент, ВалютаВзаиморасчетов)
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	НаименованиеДоговора = "Договор WEB - Битрикс24";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация"			, Организация);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);
	Запрос.УстановитьПараметр("Партнер"				, Контрагент.Партнер);
	//Запрос.УстановитьПараметр("Наименование"		, НаименованиеДоговора);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Партнер = &Партнер
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)";
	
	ВыполненныйЗапрос = Запрос.Выполнить();
	
	Если НЕ ВыполненныйЗапрос.Пустой() тогда
		
		тзнДоговоров = ВыполненныйЗапрос.Выгрузить();
		
		Если тзнДоговоров.Количество() = 1 тогда 
			Договор = тзнДоговоров[0].Ссылка;
		Иначе
			Для каждого ТекДоговор из тзнДоговоров Цикл	
				Если ТекДоговор.Наименование = НаименованиеДоговора тогда
					Договор = ТекДоговор.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) тогда
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Наименование 			= НаименованиеДоговора;
		НовыйДоговор.Партнер	 			= Контрагент.Партнер;
		НовыйДоговор.Контрагент	 			= Контрагент;
		НовыйДоговор.Организация  			= Организация;
		НовыйДоговор.ТипДоговора            = Перечисления.ТипыДоговоров.СПокупателем;
		НовыйДоговор.Статус					= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		
		НовыйДоговор.ВалютаВзаиморасчетов	= ВалютаВзаиморасчетов;
		НовыйДоговор.ПорядокРасчетов		= Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		НовыйДоговор.ПорядокОплаты			= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		
		НовыйДоговор.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
		НовыйДоговор.Записать();
		Договор = НовыйДоговор.Ссылка;
		
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

Функция ПолучитьКомпаниюКонтактПоКритерию(ОбщиеНастройки, Критерий, МенеджерВременныхТаблиц, ИнформацияОКонтрагенте, НаименованиеКомпанииКонтакта, Телефоны, Почта, ИНН, КПП)
	
	Результат = Справочники.Контрагенты.ПустаяСсылка();
	
	Если Критерий = "Внешний идентификатор" тогда
		
		лИд = Формат(ИнформацияОКонтрагенте.Получить("ID"),"ЧГ=0");
		
		Запрос = новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Идентификатор", лИд);
		Запрос.УстановитьПараметр("Портал"		 , ОбщиеНастройки.Портал);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВремКомпанииКонтакты.КомпанияКонтакт КАК КомпанияКонтакт
		|ИЗ
		|	ВремКомпанииКонтакты КАК ВремКомпанииКонтакты
		|ГДЕ
		|	ВремКомпанииКонтакты.Идентификатор = &Идентификатор";
		
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если НЕ ВыполненныйЗапрос.Пустой() тогда
			
			тзнВрем = ВыполненныйЗапрос.Выгрузить();
			
			КоличествоНайденных =  тзнВрем.Количество();
			
			Если КоличествоНайденных > 1 тогда
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Найдено несколько контрагентов по идентификатору: " + лИд + ". Контрагент будет пропущен.");
				Результат = Неопределено;
				
			ИначеЕсли КоличествоНайденных = 1 тогда
				Результат = тзнВрем[0].КомпанияКонтакт; 	   
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Критерий = "Не использовать" тогда
		Возврат Результат;
	ИначеЕсли Критерий = "БИН / ИИН" тогда
		
		Если НЕ ЗначениеЗаполнено(ИНН) тогда
			Возврат Результат;
		КонецЕсли;
		
		Запрос = новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ИНН", ИНН);
		//Запрос.УстановитьПараметр("КПП", КПП);
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ВремИННКомпанииКонтакты.КомпанияКонтакт КАК КомпанияКонтакт
		|ИЗ
		|	ВремИННКомпанииКонтакты КАК ВремИННКомпанииКонтакты
		|ГДЕ
		|	ВремИННКомпанииКонтакты.ИНН = &ИНН";
		
		//Если ЗначениеЗаполнено(КПП) тогда
		//	ТекстЗапроса = ТекстЗапроса + "
		//	| И ВремИННКомпанииКонтакты.КПП = &КПП";
		//КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если НЕ ВыполненныйЗапрос.Пустой() тогда
			
			тзнВрем = ВыполненныйЗапрос.Выгрузить();
			
			КоличествоНайденных =  тзнВрем.Количество();
			
			Если КоличествоНайденных > 1 тогда
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Найдено несколько партнеров по ИНН: " + ИНН + ". Контрагент будет пропущен.");
				Результат = Неопределено;
				
			ИначеЕсли КоличествоНайденных = 1 тогда
				Результат = тзнВрем[0].КомпанияКонтакт; 	   
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Критерий = "Наименование" тогда
		
		Запрос = новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Наименование", НаименованиеКомпанииКонтакта);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВремКомпанииКонтакты.Идентификатор КАК Идентификатор,
		|	ВремКомпанииКонтакты.КомпанияКонтакт КАК КомпанияКонтакт
		|ИЗ
		|	ВремКомпанииКонтакты КАК ВремКомпанииКонтакты
		|ГДЕ
		|	ВремКомпанииКонтакты.Идентификатор ЕСТЬ NULL
		|	И ВремКомпанииКонтакты.Наименование = &Наименование";
		
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если НЕ ВыполненныйЗапрос.Пустой() тогда
			
			тзнВрем = ВыполненныйЗапрос.Выгрузить();
			
			КоличествоНайденных =  тзнВрем.Количество();
			
			Если КоличествоНайденных > 1 тогда
				
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Найдено несколько контрагентов по заголовку: " + НаименованиеКомпанииКонтакта + ". Контрагент будет пропущен.");
				Результат = Неопределено;
				
			ИначеЕсли КоличествоНайденных = 1 тогда
				Результат = тзнВрем[0].КомпанияКонтакт; 	   
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Критерий = "Email" тогда 
		
		Если Почта <> Неопределено тогда
			
			МассивАдресов = Новый Массив;
			Для Каждого ТекАдрес из Почта Цикл
				МассивАдресов.Добавить(ТекАдрес.Получить("VALUE"));
			КонецЦикла;
			
			Запрос = новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("МассивАдресов", МассивАдресов);
			Запрос.УстановитьПараметр("Тип"			 , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВремКИ.КомпанияКонтакт КАК КомпанияКонтакт
			|ИЗ
			|	ВремКИ КАК ВремКИ
			|ГДЕ
			|	ВремКИ.АдресЭП В (&МассивАдресов)
			|	И ВремКИ.Тип = &Тип";
			
			ВыполненныйЗапрос = Запрос.Выполнить();
			
			Если НЕ ВыполненныйЗапрос.Пустой() тогда
				
				тзнВрем = ВыполненныйЗапрос.Выгрузить();
				
				КоличествоНайденных =  тзнВрем.Количество();
				
				Если КоличествоНайденных > 1 тогда
					
					ПочтыДляОшибки = "";
					Для каждого ТекЭлемент из МассивАдресов Цикл
						ПочтыДляОшибки = ПочтыДляОшибки + Строка(ТекЭлемент) + ", ";	
					КонецЦикла;
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Найдено несколько контрагентов по однй из электронных почт:"+ПочтыДляОшибки+". Контрагент будет пропущен.");
					Результат = Неопределено;
					
				ИначеЕсли КоличествоНайденных = 1 тогда
					Результат = тзнВрем[0].КомпанияКонтакт; 	   
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Критерий = "Телефон" тогда
		
		Если Телефоны <> Неопределено тогда
			
			МассивТелефонов = Новый Массив;
			Для Каждого ТекТелефон из Телефоны Цикл
				МассивТелефонов.Добавить(ТекТелефон.Получить("VALUE"));
			КонецЦикла;
			
			Запрос = новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("МассивТелефонов", МассивТелефонов);
			Запрос.УстановитьПараметр("Тип"			 , Перечисления.ТипыКонтактнойИнформации.Телефон);
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВремКИ.КомпанияКонтакт КАК КомпанияКонтакт
			|ИЗ
			|	ВремКИ КАК ВремКИ
			|ГДЕ
			|	ВремКИ.НомерТелефона В(&МассивТелефонов)
			|	И ВремКИ.Тип = &Тип";
			
			ВыполненныйЗапрос = Запрос.Выполнить();
			
			Если НЕ ВыполненныйЗапрос.Пустой() тогда
				
				тзнВрем = ВыполненныйЗапрос.Выгрузить();
				
				КоличествоНайденных =  тзнВрем.Количество();
				
				Если КоличествоНайденных > 1 тогда
					
					ТелефоныДляОшибки = "";
					Для каждого ТекЭлемент из МассивТелефонов Цикл
						ТелефоныДляОшибки = ТелефоныДляОшибки + Строка(ТекЭлемент) + ", ";	
					КонецЦикла;
					
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Найдено несколько контрагентов по одному из телефону:"+ТелефоныДляОшибки+". Контрагент будет пропущен.");
					Результат = Неопределено;
					
				ИначеЕсли КоличествоНайденных = 1 тогда
					Результат = тзнВрем[0].КомпанияКонтакт; 	   
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция СформироватьПростуюСтруктуруСИд(Ключ, Значение)
	
	Результат = Новый Структура("Ид_" + Ключ, Значение);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуИзСтрокиJSON(ДатаСтрокой)
	
	Если НЕ ЗначениеЗаполнено(ДатаСтрокой) тогда
		Возврат "";
	КонецЕсли;
	
	Результат = Неопределено;
	
	Попытка
		
		лГоды 		= Число(Лев(ДатаСтрокой, 4));
		лМесяцы 	= Число(Сред(ДатаСтрокой,6,2));
		лДни 		= Число(Сред(ДатаСтрокой,9,2));
		лЧасы 		= Число(Сред(ДатаСтрокой,12,2));
		лМинуты		= Число(Сред(ДатаСтрокой,15,2));
		лСекунды 	= Число(Сред(ДатаСтрокой,18,2));
		
		Результат = Дата(лГоды, лМесяцы, лДни, лЧасы, лМинуты, лСекунды);
	Исключение
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьОбъектПоИдентификаторуИзВременнойТаблицы(МенеджерВременныхТаблиц, НазваниеВременнойТаблицы, ИдЭлемента)
	
	Результат = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Идентификатор", ИдЭлемента);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВремИдентификаторы.Объект КАК Объект
	|ИЗ
	|	"+НазваниеВременнойТаблицы+" КАК ВремИдентификаторы
	|ГДЕ
	|	ВремИдентификаторы.Идентификатор = &Идентификатор";
	
	ВыполненныйЗапрос = Запрос.Выполнить();
	
	Если НЕ ВыполненныйЗапрос.Пустой() тогда
		Выборка = ВыполненныйЗапрос.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат = Выборка.Объект;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьСтавкуНДСПоСтавке(ОбщиеНастройки, Ставка)
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	
	Выборка = Справочники.СтавкиНДС.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ставка = Ставка тогда
			СтавкаНДС = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтавкаНДС;
	
КонецФункции

#КонецОбласти


#Область ЗагрузкаДанныхПоИд

Функция СформироватьКомпаниюКонтактПоИд(пОбщиеНастройки, ТипВладельца, Ид) 
	
	Результат = Справочники.Контрагенты.ПустаяСсылка();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Клиент"	, Новый Массив);
	СтруктураДанных.Вставить("Реквизит"	, Новый Массив);
	СтруктураДанных.Вставить("Адреса"	, Новый Массив);
	СтруктураДанных.Вставить("БанкСчета", Новый Массив);
	
	Если ТипВладельца = "Компания" тогда
		МетодКлиента = "crm.company.get?id=" + Ид; 	
		МетодРеквизита = "crm.requisite.list?filter[ENTITY_ID]=" + Ид + "&filter[ENTITY_TYPE_ID]=4"; 	
	Иначе
		МетодКлиента = "crm.contact.get?id=" + Ид; 
		МетодРеквизита = "crm.requisite.list?filter[ENTITY_ID]=" + Ид + "&filter[ENTITY_TYPE_ID]=3"; 	
	КонецЕсли;
	
	ТелоHTTPЗапроса = "";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[K]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодКлиента);
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[R]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодРеквизита);
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Результат;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда 	
			
			ДанныеКлиента 		= result2.Получить("K"); 
			ДанныеРеквизита 	= result2.Получить("R"); 
			
			Если ДанныеКлиента <> Неопределено тогда
				СтруктураДанных.Клиент.Добавить(ДанныеКлиента);	
			КонецЕсли;
			
			Если ДанныеРеквизита <> Неопределено тогда
				СтруктураДанных.Реквизит = ДанныеРеквизита;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПодробныеДанные = Новый Структура;
	ПодробныеДанные.Вставить("ИнформацияОРеквизитах", СтруктураДанных.Реквизит);
	
	Если ТипВладельца = "Компания" тогда
		ПодробныеДанные.Вставить("ИнформацияОКомпаниях", СтруктураДанных.Клиент);
		ЗагрузитьОбновитьКомпании(пОбщиеНастройки, ПодробныеДанные);
		
		ИнформацияОКлиенте = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.Компания, Ид);
	Иначе
		ПодробныеДанные.Вставить("ИнформацияОКонтактах", СтруктураДанных.Клиент);
		ЗагрузитьОбновитьКонтакты(пОбщиеНастройки, ПодробныеДанные);	
		
		ИнформацияОКлиенте = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.Контакт, Ид);
	КонецЕсли;
	
	Если ИнформацияОКлиенте = Неопределено тогда
		Возврат Результат;	
	Иначе
		Результат = ИнформацияОКлиенте.Объект; 	
	КонецЕсли;
	
	//предполагаем, что запросов будет менее 51   т.е. меньше 25 реквизитов(на каждый 2 запроса) и у каждого меньше 50 банк. счетов.
	КоличествоЗапросов = 0;
	ТелоHTTPЗапроса = "";
	
	Для каждого ТекРеквизит из СтруктураДанных.Реквизит Цикл 

		Если КоличествоЗапросов = 50 тогда
			Прервать;
		КонецЕсли;
		
		ИдРеквизита 	= Формат(ТекРеквизит.Получить("ID"), "ЧГ=0");  
		
		МетодАдреса 	= "crm.address.list?filter[ENTITY_ID]=" + ИдРеквизита + "&filter[ENTITY_TYPE_ID]=8"; 	
		МетодБанкСчета 	= "crm.requisite.bankdetail.list?filter[ENTITY_ID]=" + ИдРеквизита; 	
		
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[A]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодАдреса);
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[B]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодБанкСчета);

		КоличествоЗапросов = КоличествоЗапросов + 1;

	КонецЦикла;
	
	Если ТелоHTTPЗапроса <> "" тогда
	
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
		
		result = СтруктураОтвета.Получить("result");                                             
		Если result <> Неопределено тогда                                                         
			result2 = result.Получить("result");
			Если result2 <> Неопределено тогда 			
				
				ДанныеАдресов		= result2.Получить("A"); 
				ДанныеБанкСчетов 	= result2.Получить("B"); 
				
				Если ДанныеАдресов <> Неопределено тогда
					СтруктураДанных.Адреса = ДанныеАдресов;	
				КонецЕсли;
				
				Если ДанныеБанкСчетов <> Неопределено тогда
					СтруктураДанных.БанкСчета = ДанныеБанкСчетов;	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьОбновитьРеквизиты(пОбщиеНастройки, СтруктураДанных.Реквизит); 
	ЗагрузитьОбновитьАдресаРеквизитов(пОбщиеНастройки, СтруктураДанных.Адреса);
	ЗагрузитьОбновитьБанковскиеСчетаКомпанийКонтактов(пОбщиеНастройки, СтруктураДанных.БанкСчета);
	
	Возврат Результат;	

КонецФункции

Функция СформироватьБанковскийСчетПоИд(пОбщиеНастройки, Ид) 
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("БанкСчета", Новый Массив);
	
	МетодБанкСчета 	= "crm.requisite.bankdetail.get?id=" + Ид; 	

	ТелоHTTPЗапроса = "";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодБанкСчета);
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда 			
			Если result2.Количество() > 0 тогда
				СтруктураДанных.БанкСчета.добавить(result2[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьОбновитьБанковскиеСчетаКомпанийКонтактов(пОбщиеНастройки, СтруктураДанных.БанкСчета);
	ИнформацияОБанкСчете = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита, Ид);
	
	Если ИнформацияОБанкСчете = Неопределено тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	Иначе
		Возврат ИнформацияОБанкСчете.Объект; 	
	КонецЕсли;
	
КонецФункции

Функция СформироватьНоменклатуруПоИд(пОбщиеНастройки, Ид) 
	
	//пОбщиеНастройки = Б24_СинхронизацияКлиентСервер.СформироватьНастройкиСинхронизации(НастройкаСинхронизации, Ложь, 1);
	//
	//Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(пОбщиеНастройки);
	
	Результат = Неопределено;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Товары", Новый Массив);
	
	МетодБанкСчета 	= "crm.product.get?id=" + Ид; 	

	ТелоHTTPЗапроса = "";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодБанкСчета);
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Результат;
	КонецЕсли;
	
	Result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда 			
			Если result2.Количество() > 0 тогда
				СтруктураДанных.Товары.Добавить(result2[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьОбновитьНоменклатуру(пОбщиеНастройки, СтруктураДанных.Товары);
	ИнформацияОТоваре = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.Товар, Ид);
	
	Если ИнформацияОТоваре = Неопределено тогда
		Возврат Результат;	
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("Объект"				, ИнформацияОТоваре.Объект);	
		Результат.Вставить("ПодчиненныйОбъект"	, ИнформацияОТоваре.ПодчиненныйОбъект);	
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьЕдиницуИзмеренияПоИд(пОбщиеНастройки, Ид) 
	
	//пОбщиеНастройки = Б24_СинхронизацияКлиентСервер.СформироватьНастройкиСинхронизации(НастройкаСинхронизации, Ложь, 1);
	//
	//Б24_СинхронизацияВызовСервера.ДобавитьСложныеНастройкиОбменаВСтруктуру(пОбщиеНастройки);
	
	Результат = Неопределено;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЕдиницыИзмерения", Новый Массив);
	
	МетодБанкСчета 	= "crm.measure.get?id=" + Ид; 	
	
	
	ТелоHTTPЗапроса = "";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодБанкСчета);
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Результат;
	КонецЕсли;
	
	Result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда 			
			Если result2.Количество() > 0 тогда
				СтруктураДанных.ЕдиницыИзмерения.Добавить(result2[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьОбновитьНоменклатуру(пОбщиеНастройки, СтруктураДанных.ЕдиницыИзмерения);
	ИнформацияОЕдиницеИзмерения = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения, Ид);
	
	Если ИнформацияОЕдиницеИзмерения = Неопределено тогда
		Возврат Результат;	
	Иначе
		
		Возврат ИнформацияОЕдиницеИзмерения.Объект;
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьСделкуПоИд(пОбщиеНастройки, Ид) Экспорт 
	
	Результат = Документы.ЗаказКлиента.ПустаяСсылка();
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();	
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИнформацияОСделках"			, Новый Массив);
	СтруктураДанных.Вставить("ИнформацияОРеквизитахСделок"	, Новый Массив);
	СтруктураДанных.Вставить("ИнформацияОТоварахСделок"		, Новый Массив);
	
	МетодСделки				= "crm.deal.get?id=" + Ид; 	
	МетодРеквизитовСделки 	= "crm.requisite.link.get?entityId=" + Ид + "&entityTypeId=2"; 	
	МетодТоваровСделки 		= "crm.deal.productrows.get?id=" + Ид; 	
	
	мЗапросы = Новый Массив;
	мЗапросы.Добавить(МетодСделки);
	мЗапросы.Добавить(МетодРеквизитовСделки);
	мЗапросы.Добавить(МетодТоваровСделки);
	
	ТелоHTTPЗапроса = "";
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[S]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодСделки);
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[RS]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодРеквизитовСделки);
	ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[TS]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(МетодТоваровСделки);
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(пОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат Результат;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда 		
			
			ДанныеСделок 			= result2.Получить("S"); 
			ДанныеРеквизитовСделок 	= result2.Получить("RS"); 
			ДанныеТоваровСделок 	= result2.Получить("TS"); 
			
			Если ДанныеСделок <> Неопределено тогда
				СтруктураДанных.ИнформацияОСделках.Добавить(ДанныеСделок);	
			КонецЕсли;
			
			Если ДанныеРеквизитовСделок <> Неопределено тогда
				СтруктураДанных.ИнформацияОРеквизитахСделок.Добавить(ДанныеРеквизитовСделок);	
			КонецЕсли;
			
			Если ДанныеТоваровСделок <> Неопределено тогда
				СтруктураДанных.ИнформацияОТоварахСделок = ДанныеТоваровСделок;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьСделки(пОбщиеНастройки, СтруктураДанных);
	
	ИнформацияОСделке = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(пОбщиеНастройки.Портал, пОбщиеНастройки.ТипыОбъектовОбмена.Сделка, ПреффиксыВнешнихКодовБитрикс24.Сделки + Ид);
	
	Если ИнформацияОСделке = Неопределено тогда
		Возврат Результат;	
	Иначе
		Возврат ИнформацияОСделке.Объект; 	
	КонецЕсли;

КонецФункции

#КонецОбласти



