


#Область ДвижениеДокументаов

&НаСервере
Процедура ДвиженияБонусовПоПартиямПриход(ДокументОбъект, Товары, Отказ = Ложь) Экспорт ///+++
	
	///Проверяем на наличие Товара
	Если Товары.Количество() = 0 Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Движение = РегистрыНакопления.bon_ПартииБонусовНаСчетах.СоздатьНаборЗаписей();
	Движение.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записывать = Истина;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Очистить();
	
	#Область Начисление_Бонусов
	ДатаРаб = ДокументОбъект.bon_ДатаПроведенияПервДляБон;		         
	
	
	///Начисляем Бонусы по Товару если они есть 
	Если ДокументОбъект.bon_БонусПартНачис.Количество() > 0 Тогда
		Для Каждого ДанБон Из ДокументОбъект.bon_БонусПартНачис Цикл
			Для Каждого СтрТов Из ДокументОбъект.Товары Цикл 
				Если СтрТов.КлючСтроки =  ДанБон.КлючПримВыдано и СтрТов.Номенклатура =  ДанБон.Номенклатура  Тогда
					ДвижениеПриход = ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Добавить();
					ДвижениеПриход.ВидДвижения				= ВидДвиженияНакопления.Приход;
					ДвижениеПриход.Активность				= Истина;
					ДвижениеПриход.Период					= ДатаРаб;
					ДвижениеПриход.НоминальныйОбъект		= ДанБон.bon_НоминальныйОбъект;
					ДвижениеПриход.Номенклатура				= ДанБон.Номенклатура;	
					ДвижениеПриход.КлючПримВыдано 			= ДанБон.КлючПримВыдано;		
					ДвижениеПриход.ХарактеристикаБонуса		= ДанБон.ХарактеристикаБонуса;
					ДвижениеПриход.Буфер					= ДанБон.Буфер;
					ДвижениеПриход.Остаток					= ДанБон.Остаток;	
					ДвижениеПриход.Партия					= ДокументОбъект.Ссылка;
					ДвижениеПриход.Содержание				= ДанБон.Содержание;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	///Конец Начисляем Бонусы по Товару если они есть
		
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записать();
	#КонецОбласти
	
	
КонецПроцедуры

&НаСервере
Процедура ДвиженияБонусовПоПартиямВозврат(ДокументОбъект, Товары, Отказ = Ложь) Экспорт 
	
	Движение = РегистрыНакопления.bon_ПартииБонусовНаСчетах.СоздатьНаборЗаписей();
	Движение.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записывать = Истина;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Очистить();
	
	ДокОсн = УстановитьДокументОснования(ДокументОбъект);
	Если ДокОсн = Неопределено тогда
		Возврат;
	КонецЕсли;
	ДатаОс = УстановкаДатыПервпров(ДокОсн, ДокументОбъект);
	
	Дата   		= ДокументОбъект.bon_ДатаПроведенияПервДляБон;
	
	////
	ТзДанных = Новый ТаблицаЗначений;	
	ТзДанных.Колонки.Добавить("НоминальныйОбъект",,"НоминальныйОбъект");
	ТзДанных.Колонки.Добавить("Партия",,"Партия");
	ТзДанных.Колонки.Добавить("Буфер",,"Буфер");
	ТзДанных.Колонки.Добавить("Остаток",,"Остаток");
	ТзДанных.Колонки.Добавить("ХарактеристикаБонуса",,"ХарактеристикаБонуса");
	ТзДанных.Колонки.Добавить("Номенклатура",,"Номенклатура");
	ТзДанных.Колонки.Добавить("КлючПримВыдано",,"КлючПримВыдано");
	ТзДанных.Колонки.Добавить("Содержание",,"Содержание");
	///
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.bon_НоминальныйОбъект КАК bon_НоминальныйОбъект
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.bon_БонусПартНачис КАК ВозвратТоваровОтКлиентаbon_БонусПартНачис
	|ГДЕ
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.Ссылка = &СсылкаВоз
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.bon_НоминальныйОбъект";
	Запрос.УстановитьПараметр("СсылкаВоз", ДокументОбъект.Ссылка);	
	РезДан = Запрос.Выполнить().Выгрузить();
	
	Если РезДан.Количество() = 0 Тогда
		НомОбъект 	= ДокументОбъект.bon_БонусныйСчет;
		ОстаткиПоПартии(ДокОсн, Дата, НомОбъект, ТзДанных);	
	Иначе 
		Для Каждого СтрДан Из РезДан Цикл 
			НомОбъект = СтрДан.bon_НоминальныйОбъект;
			ОстаткиПоПартии(ДокОсн, Дата, НомОбъект, ТзДанных);
		КонецЦикла;
	КонецЕсли;
	
	Если ТзДанных.Количество() > 0 Тогда 
		ТабРез = ТзДанных;
	Иначе 
		ТабРез = Неопределено;	
	КонецЕсли;
	
	///Получил остатки по партиивозврата+++
	//ТабРез = ОстаткиПоПартии(ДокОсн, Дата, НомОбъект);
	///Получил остатки по партиивозврата---
	
	///Расчеты возврата
	ТаблицаДвижений = ТабДвиженийВозврат(ТабРез, ДокОсн, ДокументОбъект, ДатаОс);
	
	
	///Передаем Таблицу движения в документ
	Если ТаблицаДвижений <> Неопределено Тогда
		ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Загрузить(ТаблицаДвижений);
		ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записать();
	Иначе 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОстаткиПоПартии(Партия, Дата, НомОбъект, ТзДанных)
		
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	bon_ПартииБонусовНаСчетахОстатки.НоминальныйОбъект КАК НоминальныйОбъект,
	|	bon_ПартииБонусовНаСчетахОстатки.Партия КАК Партия,
	|	ТИПЗНАЧЕНИЯ(bon_ПартииБонусовНаСчетахОстатки.Партия) КАК ТипПарт,
	|	bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса КАК ХарактеристикаБонуса,
	|	bon_ПартииБонусовНаСчетахОстатки.КлючПримВыдано КАК КлючПримВыдано,
	|	bon_ПартииБонусовНаСчетахОстатки.Номенклатура КАК Номенклатура,
	|	bon_ПартииБонусовНаСчетахОстатки.ОстатокОстаток КАК ОстатокОстаток,
	|	bon_ПартииБонусовНаСчетахОстатки.БуферОстаток КАК БуферОстаток
	|ИЗ
	|	РегистрНакопления.bon_ПартииБонусовНаСчетах.Остатки(&ДатаФорм, НоминальныйОбъект = &НомОбъект) КАК bon_ПартииБонусовНаСчетахОстатки
	|ГДЕ
	|	bon_ПартииБонусовНаСчетахОстатки.Партия = &Партия");
	Запрос.УстановитьПараметр("НомОбъект", 	НомОбъект);
	Запрос.УстановитьПараметр("ДатаФорм", 	Дата);
	Запрос.УстановитьПараметр("Партия", 	Партия);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() > 0 Тогда
		Для Каждого ТабЗнач Из Рез Цикл 
			НовСтр = ТзДанных.Добавить();
			НовСтр.НоминальныйОбъект 	= ТабЗнач.НоминальныйОбъект; 
			НовСтр.Партия 				= ТабЗнач.Партия;
			НовСтр.Буфер 				= ТабЗнач.БуферОстаток;
			НовСтр.Остаток 				= ТабЗнач.ОстатокОстаток;
			НовСтр.ХарактеристикаБонуса = ТабЗнач.ХарактеристикаБонуса;
			НовСтр.Номенклатура 		= ТабЗнач.Номенклатура;
			НовСтр.КлючПримВыдано 		= ТабЗнач.КлючПримВыдано;
			НовСтр.Содержание 			= "Бонусы в Остатке";
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ТзДанных;	
	
КонецФункции

&НаСервере
Функция ТабДвиженийВозврат(ТабОстатка, ДокОсн, ВозДок, ДатаБон)
	
	СсылкаНаВозврат = ВозДок.Ссылка;
	Номенальный 	= ВозДок.bon_БонусныйСчет;	
	
	Если ВозДок.bon_ДатаПроведенияПервДляБон > '00010101' Тогда
		ДатаВоз = ВозДок.bon_ДатаПроведенияПервДляБон;	
	Иначе 
		ДатаВоз = ВозДок.Дата;	
	КонецЕсли;
	
	#Область Создаем_ТаблицаЗначений	
	///Таблица значений для соединения Бонусов
	ТаблицаДвижений = Новый ТаблицаЗначений;	
	ТаблицаДвижений.Колонки.Добавить("Активность",,"Активность");
	ТаблицаДвижений.Колонки.Добавить("Период",,"Период");
	ТаблицаДвижений.Колонки.Добавить("ВидДвижения",,"ВидДвижения");
	ТаблицаДвижений.Колонки.Добавить("НоминальныйОбъект",,"НоминальныйОбъект");
	ТаблицаДвижений.Колонки.Добавить("ДатаНачисления",,"ДатаНачисления");
	ТаблицаДвижений.Колонки.Добавить("Номенклатура",,"Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("КлючПримВыдано",,"КлючПримВыдано");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаБонуса",,"ХарактеристикаБонуса");
	ТаблицаДвижений.Колонки.Добавить("Партия",,"Партия");
	ТаблицаДвижений.Колонки.Добавить("Остаток",,"Остаток");
	ТаблицаДвижений.Колонки.Добавить("Содержание",,"Содержание");
	ТаблицаДвижений.Колонки.Добавить("Буфер",,"Буфер");
	ТаблицаДвижений.Колонки.Добавить("Корректировка",,"Корректировка");
	
	///Таблица Выданных Бонусов в момент продажи
	ТабВыдон = Новый ТаблицаЗначений;	
	ТабВыдон.Колонки.Добавить("Партия",,"Партия");
	ТабВыдон.Колонки.Добавить("ХарактеристикаБонуса",,"ХарактеристикаБонуса");
	ТабВыдон.Колонки.Добавить("Номенклатура",,"Номенклатура");
	ТабВыдон.Колонки.Добавить("КлючПримВыдано",,"КлючПримВыдано");
	ТабВыдон.Колонки.Добавить("Остаток",,"Остаток");
	ТабВыдон.Колонки.Добавить("Буфер",,"Буфер");
	ТабВыдон.Колонки.Добавить("Содержание",,"Содержание");	
	ТабВыдон.Колонки.Добавить("НоминальныйОбъект",,"НоминальныйОбъект");	
	#КонецОбласти
	
	#Область Запрос_выданые_Бонусы_из_таблицы_Товаров
	Запрос = Новый Запрос;    
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка КАК СсылкаВозврата,
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.КлючСтроки КАК КлючСтроки,
	|	ВозвратТоваровОтКлиентаТовары.Ссылка.ДокументРеализации КАК ДокументОснование,
	|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ Док
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|ГДЕ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка = &СсылкаВоз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.bon_НоминальныйОбъект КАК bon_НоминальныйОбъект,
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.Партия КАК Партия,
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.ХарактеристикаБонуса КАК ХарактеристикаБонуса,
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.Номенклатура КАК Номенклатура,
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.КлючПримВыдано КАК КлючПримВыдано,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.КоличествоПрод, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.Буфер, 0) / ВозвратТоваровОтКлиентаbon_БонусПартНачис.КоличествоПрод * Док.Количество КАК ЧИСЛО(10, 0))
	|		ИНАЧЕ ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.Буфер, 0)
	|	КОНЕЦ КАК Буфер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.КоличествоПрод, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.Остаток, 0) / ВозвратТоваровОтКлиентаbon_БонусПартНачис.КоличествоПрод * Док.Количество КАК ЧИСЛО(10, 0))
	|		ИНАЧЕ ЕСТЬNULL(ВозвратТоваровОтКлиентаbon_БонусПартНачис.Остаток, 0)
	|	КОНЕЦ КАК Остаток,
	|	""Возврат товара в магазине с зачислением активных бонусов"" КАК Содержание
	|ИЗ
	|	Док КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.bon_БонусПартНачис КАК ВозвратТоваровОтКлиентаbon_БонусПартНачис
	|		ПО Док.Номенклатура = ВозвратТоваровОтКлиентаbon_БонусПартНачис.Номенклатура
	|			И Док.КлючСтроки = ВозвратТоваровОтКлиентаbon_БонусПартНачис.КлючПримВыдано
	|ГДЕ
	|	ВозвратТоваровОтКлиентаbon_БонусПартНачис.Ссылка = &СсылкаВоз";
	Запрос.УстановитьПараметр("СсылкаВоз", СсылкаНаВозврат);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();			
	Для Каждого Товар Из РезультатЗапроса Цикл 
		СтрЗапр = ТабВыдон.Добавить();
		СтрЗапр.Партия					= Товар.Партия;
		СтрЗапр.НоминальныйОбъект		= Товар.bon_НоминальныйОбъект;
		СтрЗапр.ХарактеристикаБонуса 	= Товар.ХарактеристикаБонуса;
		СтрЗапр.Номенклатура 			= Товар.Номенклатура;
		СтрЗапр.КлючПримВыдано 			= Товар.КлючПримВыдано;
		СтрЗапр.Остаток 				= Товар.Остаток;	
		СтрЗапр.Буфер 					= Товар.Буфер;
		СтрЗапр.Содержание 				= Товар.Содержание;
	КонецЦикла;	
	#КонецОбласти
			
	Для Каждого ВыдПриПокупки Из ТабВыдон Цикл 
		///Число Выдали
		БуфВыдано = ВыдПриПокупки.Буфер;
		ОстВыдано = ВыдПриПокупки.Остаток;
		
		Если ТабОстатка <> Неопределено и ТабОстатка.Количество() > 0 Тогда
			Для Каждого СтрОст Из ТабОстатка Цикл 
				Если СтрОст.КлючПримВыдано =  ВыдПриПокупки.КлючПримВыдано и 
					СтрОст.Номенклатура =  ВыдПриПокупки.Номенклатура и 
					СтрОст.НоминальныйОбъект =  ВыдПриПокупки.НоминальныйОбъект  Тогда
					Если СтрОст.Буфер > БуфВыдано Тогда
						СтрОст.Буфер = БуфВыдано;
					КонецЕсли;
					
					Если СтрОст.Остаток > ОстВыдано Тогда
						СтрОст.Остаток = ОстВыдано;
					КонецЕсли;								
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	#Область Списываем_остатки_и_делаем_Корректировку_во_избежание_минусовых_остатков
	/////+++++++++++++++++++Сопоставляем Выданное и Остати по Выданному++++++++++++++++++++++++++++++++++++++
	//До Включения Учета по Номенклатуре
	ВозДок.bon_ВозвратыБонусов.Очистить();
	Если ВозДок.bon_ВозвратыБонусов.Количество() = 0 Тогда
		//Учета по Номенклатуре
		Если ТабОстатка <> Неопределено и ТабОстатка.Количество() > 0 Тогда
			
			Для Каждого ВыдПриПокупки Из ТабВыдон Цикл 
				///Число Выдали
				БуфВыдано = ВыдПриПокупки.Буфер;
				ОстВыдано = ВыдПриПокупки.Остаток;
				
				///Расчитываем была ли конвертация или нет!
				БуферРез 	= Ложь;
				ОстатокРез	= Ложь;
				ПроверкаСЧемРаботатьБуфилиОстаток(БуферРез, ОстатокРез, ВыдПриПокупки, ДатаБон, ВозДок);
				
				Повтор = Число(0);
				Для Каждого ОстатокБону Из ТабОстатка Цикл 
					Если БуфВыдано > 0 или ОстВыдано > 0 Тогда	
						
						///Число Осталось
						БуфОсталось = ОстатокБону.Буфер;
						ОстОсталось = ОстатокБону.Остаток;
						
						Если БуфОсталось > 0 или ОстОсталось > 0 Тогда
							Если ВыдПриПокупки.ХарактеристикаБонуса = ОстатокБону.ХарактеристикаБонуса и 
								ВыдПриПокупки.Номенклатура = ОстатокБону.Номенклатура и 
								ВыдПриПокупки.КлючПримВыдано = ОстатокБону.КлючПримВыдано Тогда
								
								БуфСписываем = БуфОсталось;
								ОстСписываем = ОстОсталось;
								
								Если БуфСписываем > 0 или ОстСписываем > 0 Тогда
									///Заполняем таблицу
									Строка = ВозДок.bon_ВозвратыБонусов.Добавить();	
									Строка.Период 					= ДатаВоз; 
									Строка.ВидДвижения 				= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
									Строка.ДатаНачисления 			= ДатаВоз;
									Строка.Партия 					= ОстатокБону.Партия;
									Строка.Номенклатура 			= ОстатокБону.Номенклатура; 
									Строка.КлючПримВыдано 			= ОстатокБону.КлючПримВыдано;
									Строка.ХарактеристикаБонуса 	= ОстатокБону.ХарактеристикаБонуса;
									Строка.Содержание 				= ВыдПриПокупки.Содержание;
									Строка.НоминальныйОбъект		= ВыдПриПокупки.НоминальныйОбъект;
									Строка.Буфер 					= БуфСписываем;
									Строка.Остаток 					= ОстСписываем;
								КонецЕсли;
								
								ОстатокБону.Буфер 	= ОстатокБону.Буфер   - БуфСписываем;
								ОстатокБону.Остаток = ОстатокБону.Остаток - ОстСписываем;
								БуфРазница = БуфВыдано - БуфСписываем;									
								ОстРазница = ОстВыдано - ОстСписываем;									
								СуммаБон = Макс(0,БуфРазница + ОстРазница);
								ВыдПриПокупки.Буфер		= ВыдПриПокупки.Буфер - БуфВыдано;
								ВыдПриПокупки.Остаток	= ВыдПриПокупки.Остаток - ОстВыдано;
								
								Если СуммаБон > 0 Тогда
									Если БуферРез = Истина Тогда
										//Движение Потраченных Загоняем в минус
										Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
										Строка.Период 				= ДатаВоз; 
										Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
										Строка.ДатаНачисления 		= ДатаВоз; 
										Строка.Партия 				= ОстатокБону.Партия;
										Строка.Номенклатура 		= ОстатокБону.Номенклатура; 
										Строка.КлючПримВыдано 		= ОстатокБону.КлючПримВыдано;
										Строка.ХарактеристикаБонуса = ОстатокБону.ХарактеристикаБонуса;
										Строка.Содержание			= ВыдПриПокупки.Содержание;	
										Строка.НоминальныйОбъект	= ВыдПриПокупки.НоминальныйОбъект;
										Строка.Остаток 				= Число(0);
										Строка.Буфер 				= СуммаБон;
										
										//Создаем Корректировку на минус (Плюсовую)
										НовСт = ВозДок.bon_ВозвратыБонусов.Добавить();
										НовСт.Период				= ДатаВоз;
										НовСт.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Приход;
										НовСт.ДатаНачисления        = ДатаВоз;
										НовСт.Партия                = ОстатокБону.Партия;
										НовСт.Номенклатура          = ОстатокБону.Номенклатура;
										НовСт.КлючПримВыдано        = ОстатокБону.КлючПримВыдано;
										НовСт.ХарактеристикаБонуса  = ОстатокБону.ХарактеристикаБонуса;
										НовСт.НоминальныйОбъект		= ВыдПриПокупки.НоминальныйОбъект;
										НовСт.Буфер                 = СуммаБон;
										НовСт.Остаток               = Число(0);
										НовСт.Корректировка         = Истина;
										НовСт.Содержание            = Строка("Корректировка Возврата Плюсом");										
									ИначеЕсли  ОстатокРез = Истина Тогда
										//Движение Потраченных Загоняем в минус
										Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
										Строка.Период 				= ДатаВоз; 
										Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
										Строка.ДатаНачисления 		= ДатаВоз; 
										Строка.Партия 				= ОстатокБону.Партия;
										Строка.Номенклатура 		= ОстатокБону.Номенклатура; 
										Строка.КлючПримВыдано 		= ОстатокБону.КлючПримВыдано;
										Строка.ХарактеристикаБонуса = ОстатокБону.ХарактеристикаБонуса;
										Строка.Содержание			= ВыдПриПокупки.Содержание;	
										Строка.НоминальныйОбъект	= ВыдПриПокупки.НоминальныйОбъект;
										Строка.Остаток 				= СуммаБон;
										Строка.Буфер 				= Число(0);
										
										//Создаем Корректировку на минус (Плюсовую)
										НовСт = ВозДок.bon_ВозвратыБонусов.Добавить();
										НовСт.Период				= ДатаВоз;
										НовСт.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Приход;
										НовСт.ДатаНачисления        = ДатаВоз;
										НовСт.Партия                = ОстатокБону.Партия;
										НовСт.Номенклатура          = ОстатокБону.Номенклатура;
										НовСт.КлючПримВыдано        = ОстатокБону.КлючПримВыдано;
										НовСт.ХарактеристикаБонуса  = ОстатокБону.ХарактеристикаБонуса;
										НовСт.НоминальныйОбъект		= ВыдПриПокупки.НоминальныйОбъект;
										НовСт.Буфер                 = Число(0);
										НовСт.Остаток               = СуммаБон;
										НовСт.Корректировка         = Истина;
										НовСт.Содержание            = Строка("Корректировка Возврата Плюсом");		
									КонецЕсли;
								КонецЕсли;
								
								///Отработтано
								Повтор = Повтор + Число(1);
								
								Если ОстатокБону.Буфер > 0 или ОстатокБону.Остаток > 0 Тогда	
									//Движение Неожедали тут плюс
									Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
									Строка.Период 				= ДатаВоз; 
									Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
									Строка.ДатаНачисления 		= ДатаВоз; 
									Строка.Партия 				= ОстатокБону.Партия;
									Строка.Номенклатура 		= ОстатокБону.Номенклатура; 
									Строка.КлючПримВыдано 		= ОстатокБону.КлючПримВыдано;
									Строка.ХарактеристикаБонуса = ОстатокБону.ХарактеристикаБонуса;
									Строка.Содержание			= ВыдПриПокупки.Содержание;
									Строка.НоминальныйОбъект	= ВыдПриПокупки.НоминальныйОбъект;
									Строка.Остаток 				= ОстатокБону.Остаток;
									Строка.Буфер 				= ОстатокБону.Буфер;
									
									ОстатокБону.Буфер 	= ОстатокБону.Буфер   - Строка.Буфер;
									ОстатокБону.Остаток = ОстатокБону.Остаток - Строка.Остаток;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Повтор = Число(0) Тогда	
					СуммаБон = Макс(0,БуфВыдано + ОстВыдано);
					ВыдПриПокупки.Буфер		= ВыдПриПокупки.Буфер - БуфВыдано;
					ВыдПриПокупки.Остаток	= ВыдПриПокупки.Остаток - ОстВыдано;
					
					Если БуферРез = Истина Тогда
						//Движение Потраченных Загоняем в минус
						Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
						Строка.Период 				= ДатаВоз; 
						Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
						Строка.ДатаНачисления 		= ДатаВоз; 
						Строка.Партия 				= ВыдПриПокупки.Партия;
						Строка.Номенклатура 		= ВыдПриПокупки.Номенклатура; 
						Строка.КлючПримВыдано 		= ВыдПриПокупки.КлючПримВыдано;
						Строка.ХарактеристикаБонуса = ВыдПриПокупки.ХарактеристикаБонуса;
						Строка.Содержание			= ВыдПриПокупки.Содержание;	
						Строка.НоминальныйОбъект	= ВыдПриПокупки.НоминальныйОбъект;
						Строка.Остаток 				= Число(0);
						Строка.Буфер 				= СуммаБон;
						
						//Создаем Корректировку на минус (Плюсовую)
						НовСт = ВозДок.bon_ВозвратыБонусов.Добавить();
						НовСт.Период				= ДатаВоз;
						НовСт.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Приход;
						НовСт.ДатаНачисления        = ДатаВоз;
						НовСт.Партия                = ВыдПриПокупки.Партия;
						НовСт.Номенклатура          = ВыдПриПокупки.Номенклатура;
						НовСт.КлючПримВыдано        = ВыдПриПокупки.КлючПримВыдано;
						НовСт.ХарактеристикаБонуса  = ВыдПриПокупки.ХарактеристикаБонуса;
						НовСт.НоминальныйОбъект		= ВыдПриПокупки.НоминальныйОбъект;
						НовСт.Буфер                 = СуммаБон;
						НовСт.Остаток               = Число(0);
						НовСт.Корректировка         = Истина;
						НовСт.Содержание            = Строка("Корректировка Возврата Плюсом");
					ИначеЕсли  ОстатокРез = Истина Тогда
						//Движение Потраченных Загоняем в минус
						Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
						Строка.Период 				= ДатаВоз; 
						Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
						Строка.ДатаНачисления 		= ДатаВоз; 
						Строка.Партия 				= ВыдПриПокупки.Партия;
						Строка.Номенклатура 		= ВыдПриПокупки.Номенклатура; 
						Строка.КлючПримВыдано 		= ВыдПриПокупки.КлючПримВыдано;
						Строка.ХарактеристикаБонуса = ВыдПриПокупки.ХарактеристикаБонуса;
						Строка.Содержание			= ВыдПриПокупки.Содержание;
						Строка.НоминальныйОбъект	= ВыдПриПокупки.НоминальныйОбъект;
						Строка.Остаток 				= СуммаБон;
						Строка.Буфер 				= Число(0);
						
						//Создаем Корректировку на минус (Плюсовую)
						НовСт = ВозДок.bon_ВозвратыБонусов.Добавить();
						НовСт.Период				= ДатаВоз;
						НовСт.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Приход;
						НовСт.ДатаНачисления        = ДатаВоз;
						НовСт.Партия                = ВыдПриПокупки.Партия;
						НовСт.Номенклатура          = ВыдПриПокупки.Номенклатура;
						НовСт.КлючПримВыдано        = ВыдПриПокупки.КлючПримВыдано;
						НовСт.ХарактеристикаБонуса  = ВыдПриПокупки.ХарактеристикаБонуса;
						НовСт.НоминальныйОбъект		= ВыдПриПокупки.НоминальныйОбъект;
						НовСт.Буфер                 = Число(0);
						НовСт.Остаток               = СуммаБон;
						НовСт.Корректировка         = Истина;
						НовСт.Содержание            = Строка("Корректировка Возврата Плюсом");	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
		//Док.Записать(РежимЗаписиДокумента.Запись);	
		/////-------------------Сопоставляем Выданное и Остати по Выданному--------------------------------------
		
		// Удаление строк согласно условию
		НулевыеСтроки = ТабВыдон.НайтиСтроки(Новый Структура("Остаток, Буфер",0,0));
		Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
			ТабВыдон.Удалить(СтрокаТаблицы)
		КонецЦикла;
		
		Если ТабВыдон.Количество() > 0 Тогда 
			Для Каждого ТаблицаВыдано Из ТабВыдон Цикл
				//Движение Потраченных Загоняем в минус
				Строка = ВозДок.bon_ВозвратыБонусов.Добавить();
				Строка.Период 				= ДатаВоз; 
				Строка.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Расход;
				Строка.ДатаНачисления 		= ДатаВоз; 
				Строка.Партия 				= ТаблицаВыдано.Партия;
				Строка.Номенклатура 		= ТаблицаВыдано.Номенклатура; 
				Строка.КлючПримВыдано 		= ТаблицаВыдано.КлючПримВыдано;
				Строка.ХарактеристикаБонуса = ТаблицаВыдано.ХарактеристикаБонуса;
				Строка.Содержание			= ТаблицаВыдано.Содержание;	
				Строка.Остаток 				= ТаблицаВыдано.Остаток;
				Строка.НоминальныйОбъект 	= ТаблицаВыдано.НоминальныйОбъект;
				Строка.Буфер 				= ТаблицаВыдано.Буфер;
				
				//Создаем Корректировку на минус (Плюсовую)
				НовСт = ВозДок.bon_ВозвратыБонусов.Добавить();
				НовСт.Период				= ДатаВоз;
				НовСт.ВидДвижения 			= Перечисления.bon_ВидыДвиженийПриходРасход.Приход;
				НовСт.ДатаНачисления        = ДатаВоз;
				НовСт.Партия                = ТаблицаВыдано.Партия;
				НовСт.Номенклатура          = ТаблицаВыдано.Номенклатура;
				НовСт.КлючПримВыдано        = ТаблицаВыдано.КлючПримВыдано;
				НовСт.ХарактеристикаБонуса  = ТаблицаВыдано.ХарактеристикаБонуса;
				НовСт.Буфер                 = ТаблицаВыдано.Буфер;
				НовСт.Остаток               = ТаблицаВыдано.Остаток;
				НовСт.НоминальныйОбъект 	= ТаблицаВыдано.НоминальныйОбъект;
				НовСт.Корректировка         = Истина;
				НовСт.Содержание            = Строка("Корректировка Возврата Плюсом");		
			КонецЦикла;
		КонецЕсли;
		ВозДок.Записать();	
	КонецЕсли;
	#КонецОбласти
	
	Для Каждого ТабВДвиж Из ВозДок.bon_ВозвратыБонусов Цикл 
		Строка = ТаблицаДвижений.Добавить();
		Строка.Активность 			= Истина;	
		Строка.Период 				= ТабВДвиж.Период; 
		Если ТабВДвиж.ВидДвижения = Перечисления.bon_ВидыДвиженийПриходРасход.Расход Тогда
			Строка.ВидДвижения 		= ВидДвиженияНакопления.Расход;
		Иначе 
			Строка.ВидДвижения 		= ВидДвиженияНакопления.Приход;
		КонецЕсли;
		Строка.НоминальныйОбъект 	= ТабВДвиж.НоминальныйОбъект;
		Строка.ДатаНачисления 		= ТабВДвиж.ДатаНачисления; 
		Строка.Партия 				= ТабВДвиж.Партия;
		Строка.Номенклатура 		= ТабВДвиж.Номенклатура; 
		Строка.КлючПримВыдано 		= ТабВДвиж.КлючПримВыдано;
		Строка.ХарактеристикаБонуса = ТабВДвиж.ХарактеристикаБонуса;
		Строка.Буфер 				= ТабВДвиж.Буфер;
		Строка.Остаток 				= ТабВДвиж.Остаток;
		Строка.Содержание 			= ТабВДвиж.Содержание;
		Строка.Корректировка 		= ТабВДвиж.Корректировка;
	КонецЦикла;
	
	#Область Возвращаем_что_Потратили_при_Покупки
	
	Если СсылкаНаВозврат.bon_ПартииБонусовИст.Количество() > 0 Тогда
		Для Каждого ТоварВоз Из СсылкаНаВозврат.Товары Цикл	
			Для Каждого Товар Из СсылкаНаВозврат.bon_ПартииБонусовИст  Цикл 
				Если ТоварВоз.КлючСтроки =  Товар.КлючСвязи Тогда
					Строка = ТаблицаДвижений.Добавить();
					Строка.Активность 				= Истина;	
					Строка.Период 					= СсылкаНаВозврат.Дата; 
					Строка.ВидДвижения 				= ВидДвиженияНакопления.Приход;
					Строка.НоминальныйОбъект 		= Номенальный;
					Строка.ДатаНачисления 			= СсылкаНаВозврат.Дата; 
					Строка.Партия 					= Товар.Партия;
					Строка.КлючПримВыдано 			= Товар.КлючПримВыдано; 
					Строка.Номенклатура 			= Товар.НомПартии; 
					Строка.ХарактеристикаБонуса 	= Товар.ХарактеристикиБонусов; 
					Если Товар.КоличествоПрод <> 0 Тогда
						Строка.Остаток				= Окр((Товар.Сумма / Товар.КоличествоПрод)* ТоварВоз.Количество,0); //Товар.Сумма; 
					Иначе 
					 	Строка.Остаток				= Товар.Сумма;
					КонецЕсли;
					Строка.Содержание 				= "Возврат на Остатк по Реализ + Заказ";
					Строка.Буфер 					= Число(0);	
				КонецЕсли;					
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ТаблицаДвижений;
	
КонецФункции

&НаСервере
Функция ПроверкаСЧемРаботатьБуфилиОстаток(БуферРез, ОстатокРез, ВыдПриПокупки, ДатаБон, ВозДок)
	
	Характеристика = ВыдПриПокупки.ХарактеристикаБонуса;
	
	Если ВозДок.bon_ДатаПроведенияПервДляБон <> '00010101' тогда
		ДатаДокВоз = ВозДок.bon_ДатаПроведенияПервДляБон;	
	Иначе
		ДатаДокВоз = ВозДок.Дата;
	КонецЕсли;
	
	Если Характеристика.ВозвратНаОстаток = Ложь Тогда
		Если Характеристика.ПоДате = Ложь Тогда
			Если Характеристика.ВремяЖизниБуфера = Число(0) Тогда
				ОстатокРез = Истина;
			Иначе 
				ДатаКонвВОстаток = ДатаБон + (Характеристика.ВремяЖизниБуфера*86400); 
				Если ДатаДокВоз > ДатаКонвВОстаток Тогда
					ОстатокРез = Истина;	
				Иначе 
					БуферРез= Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Характеристика.ДатаПереводаИзБуферавОстаток = '00010101' Тогда
				ОстатокРез = Истина;
			Иначе 			
				ДатаКонвВОстаток = ДатаБон + (Характеристика.ВремяЖизниБуфера*86400); 
				Если ДатаДокВоз > ДатаКонвВОстаток Тогда
					ОстатокРез = Истина;	
				Иначе 
					БуферРез= Истина;
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
	Иначе 
		ОстатокРез = Истина;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьДокументОснования(ВозДок)
	
	ДокВозОсн = ВозДок.ДокументРеализации.Ссылка; 
	
	Если ТИПЗНЧ(ДокВозОсн.Ссылка) = ТИП("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(ДокВозОсн.ЗаказКлиента) и ТИПЗНЧ(ДокВозОсн.ЗаказКлиента) = ТИП("ДокументСсылка.ЗаказКлиента") Тогда
			ДокОсн = ДокВозОсн;
		Иначе 
			ДокОсн = Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ДокОсн;	
	
КонецФункции

&НаСервере
Функция УстановкаДатыПервпров(ДокОсн, ВозДок)
	
	ДатаБон = '00010101';
	
	Если ТИПЗНЧ(ДокОсн.Ссылка) = ТИП("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ЗначениеЗаполнено(ДокОсн.ЗаказКлиента) и ТИПЗНЧ(ДокОсн.ЗаказКлиента) = ТИП("ДокументСсылка.ЗаказКлиента") Тогда  
			Если ДокОсн.bon_ДатаПроведенияПервДляБон <> '00010101' Тогда
				ДатаБон = ДокОсн.bon_ДатаПроведенияПервДляБон;	
			Иначе
				ДатаБон = ДокОсн.Дата;	
			КонецЕсли;				
		КонецЕсли;	
	Иначе 
		ДатаБон = ДокОсн.Дата;	
	КонецЕсли;
	
	Возврат ДатаБон;
	
КонецФункции


#КонецОбласти

#Область Сертификаты

///Вывод из оборота Сертификатов
&НаСервере
Процедура ВыводИзОборотовСертификатов(ДокументОбъект, ТабЧасть) Экспорт  ///+++

	Если ТабЧасть.Количество() =  0 Тогда 
		Возврат
	КонецЕсли;
	
	Движение = РегистрыНакопления.мчт_ПартииСертификатыНаСчетах.СоздатьНаборЗаписей();
	Движение.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	
	ДокументОбъект.Движения.мчт_ПартииСертификатыНаСчетах.Записывать = Истина;
	ДокументОбъект.Движения.мчт_ПартииСертификатыНаСчетах.Очистить();

	Если ДокументОбъект.ВидНоминальныхОбъектов.Наименование = Строка("Подарочный сертификат") Тогда
		Для Каждого ПЕребТаб Из ТабЧасть Цикл 
			ДвижениеПриход = ДокументОбъект.Движения.мчт_ПартииСертификатыНаСчетах.Добавить();
			ДвижениеПриход.ВидДвижения				= ВидДвиженияНакопления.Приход;
			ДвижениеПриход.Активность				= Истина;
			ДвижениеПриход.Период					= ДокументОбъект.Дата;
			ДвижениеПриход.Сертификат				= ПЕребТаб.НоминальныйОбъект;
			ДвижениеПриход.ХарактеристикаБонуса		= ПЕребТаб.Характеристика;
			ДвижениеПриход.Остаток					= ПЕребТаб.Номинал;
			ДвижениеПриход.Партия					= ДокументОбъект.Ссылка;
			ДвижениеПриход.Содержание				= "Начисление и Ввод в оборот Сертификата";
		КонецЦикла;
		ДокументОбъект.Движения.мчт_ПартииСертификатыНаСчетах.Записать();
	ИначеЕсли ДокументОбъект.ВидНоминальныхОбъектов.Наименование = Строка("Акционные Сертификаты") Тогда
		Для Каждого ПЕребТаб Из ТабЧасть Цикл 
			Зпрос = Новый Запрос;
			Зпрос.Текст = 
			"ВЫБРАТЬ
			|	мчт_ПартииСертификатыНаСчетахОстатки.ОстатокОстаток
			|ИЗ
			|	РегистрНакопления.мчт_ПартииСертификатыНаСчетах.Остатки(&ТекДата, ) КАК мчт_ПартииСертификатыНаСчетахОстатки
			|ГДЕ
			|	мчт_ПартииСертификатыНаСчетахОстатки.Сертификат = &Сертификат";
			Зпрос.УстановитьПараметр("Сертификат", ПЕребТаб.НоминальныйОбъект);
			Зпрос.УстановитьПараметр("ТекДата", ТекущаяДата());
			Результат = Зпрос.Выполнить().Выгрузить();
			Если Результат.Количество() > 0 Тогда
				ДвижениеПриход = ДокументОбъект.Движения.мчт_ПартииСертификатыНаСчетах.Добавить();
				ДвижениеПриход.ВидДвижения				= ВидДвиженияНакопления.Приход;
				ДвижениеПриход.Активность				= Истина;
				ДвижениеПриход.Период					= ДокументОбъект.Дата;
				ДвижениеПриход.Сертификат				= ПЕребТаб.НоминальныйОбъект;
				ДвижениеПриход.ХарактеристикаБонуса		= ПЕребТаб.Характеристика;
				ДвижениеПриход.Остаток					= Результат[0].ОстатокОстаток;
				ДвижениеПриход.Партия					= ДокументОбъект.Ссылка;
				ДвижениеПриход.Содержание				= "Начисление и Ввод в оборот Акционных Сертификатов";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


///Создаем Сертификат и вводим в остаток
&НаСервере
Процедура ПоступлениеСертификатовВрем(ДокументОбъект, ТабЧасть) Экспорт ///---Врем
	
	Если ТабЧасть.Количество() =  0 Тогда 
		Возврат
	КонецЕсли;
	
	Движение = РегистрыНакопления.bon_ПартииБонусовНаСчетах.СоздатьНаборЗаписей();
	Движение.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записывать = Истина;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Очистить();
	
	Для Каждого ПЕребТаб Из ТабЧасть Цикл 
		Если ПЕребТаб.Номинал > 0 Тогда
			ДвижениеПриход = ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Добавить();
			ДвижениеПриход.ВидДвижения				= ВидДвиженияНакопления.Приход;
			ДвижениеПриход.Активность				= Истина;
			ДвижениеПриход.Период					= ДокументОбъект.Дата;
			ДвижениеПриход.НоминальныйОбъект		= ПЕребТаб.НоминальныйОбъект;
			Если ПЕребТаб.Характеристика = "" Тогда
				Возврат
			Иначе 
				ДвижениеПриход.ХарактеристикаБонуса		= ПЕребТаб.Характеристика;
			КонецЕсли;
			ДвижениеПриход.Остаток					= ПЕребТаб.Номинал;
			ДвижениеПриход.Партия					= ДокументОбъект.Ссылка;
			Если ДокументОбъект.ВидНоминальныхОбъектов.Наименование = Строка("Подарочный сертификат")Тогда
				ДвижениеПриход.Содержание				= "Начисление и Ввод в оборот Сертификата";
			ИначеЕсли ДокументОбъект.ВидНоминальныхОбъектов.Наименование = Строка("Акционные Сертификаты") Тогда
				ДвижениеПриход.Содержание				= "Начисление и Ввод в оборот Акционных Сертификатов";	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Списания_Бонусов
Процедура ДвиженияБонусовПоПартиямРасходОстаток(ДокументОбъект, Отказ = Ложь) Экспорт
	
	///Проверяем Был ли расчет применения
	Для Каждого ТабВДвиж Из ДокументОбъект.bon_ПартииБонусовИст Цикл 
		Для Каждого СтрТав Из ДокументОбъект.Товары Цикл
			Если СтрТав.КлючСтроки = ТабВДвиж.КлючСвязи и СтрТав.Номенклатура = ТабВДвиж.Номенклатура Тогда 
				ДвижениеПровед = ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Добавить();
				ДвижениеПровед.ВидДвижения				= ВидДвиженияНакопления.Расход;
				ДвижениеПровед.Активность				= Истина;
				ДвижениеПровед.Период					= ДокументОбъект.bon_ДатаПроведенияПервДляБон;
				ДвижениеПровед.НоминальныйОбъект		= ТабВДвиж.НакопительнаяПрограмма;
				ДвижениеПровед.Номенклатура				= ТабВДвиж.НомПартии;
				ДвижениеПровед.КлючПримВыдано			= ТабВДвиж.КлючПримВыдано;
				ДвижениеПровед.Буфер					= 0;
				ДвижениеПровед.ХарактеристикаБонуса		= ТабВДвиж.ХарактеристикиБонусов; 
				ДвижениеПровед.Остаток					= ТабВДвиж.Сумма;
				ДвижениеПровед.Партия					= ТабВДвиж.Партия;
				ДвижениеПровед.Содержание				= "Списание бонусов за покупку в магазине";
				ДвижениеПровед.НоменклатураПрименения = СтрТав.Номенклатура;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записать();
	
	
КонецПроцедуры

#КонецОбласти

Процедура ДвиженияПоВыданнымПодаркам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.Таблицаbon_ВыданныеПодарки;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.bon_ВыданныеПодарки.Записывать = Истина;
	Движения.bon_ВыданныеПодарки.Загрузить(Таблица);
	
КонецПроцедуры



///Ввод в оборот сохранение движений
&НаСервере
Процедура ВводВОборотБонусныйСчетСНоменалом(ДокументОбъект, ТабЧасть) Экспорт 
	
	Если ТабЧасть.Количество() =  0 Тогда 
		Возврат
	КонецЕсли;
	
	Движение = РегистрыНакопления.bon_ПартииБонусовНаСчетах.СоздатьНаборЗаписей();
	Движение.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записывать = Истина;
	ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Очистить();
	
	Для Каждого ПЕребТаб Из ТабЧасть Цикл 
		Если ПЕребТаб.Номинал > 0 Тогда
			ДвижениеПриход = ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Добавить();
			ДвижениеПриход.ВидДвижения				= ВидДвиженияНакопления.Приход;
			ДвижениеПриход.Активность				= Истина;
			ДвижениеПриход.Период					= ДокументОбъект.Дата;
			ДвижениеПриход.НоминальныйОбъект		= ПЕребТаб.НоминальныйОбъект;
			ДвижениеПриход.Остаток					= ПЕребТаб.Номинал;
			ДвижениеПриход.Партия					= ДокументОбъект.Ссылка;
			ДвижениеПриход.Содержание				= "Начисление при Вводе в Оборот";	
			Если ПЕребТаб.Характеристика = "" Тогда
				Возврат
			Иначе 
				ДвижениеПриход.ХарактеристикаБонуса		= ПЕребТаб.Характеристика;
			КонецЕсли;
			ДокументОбъект.Движения.bon_ПартииБонусовНаСчетах.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОНоминальномОбъекте(НомерОбъекта, Период = Неопределено) Экспорт
	
	Результат = Новый Структура("НоминальныйОбъект, ПериодДействияНачало, ПериодДействияКонец, Держатель, НакопительнаяПрограмма");
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.НоминальныйОбъект,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.ПериодДействияНачало,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.ПериодДействияКонец,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.Держатель
				   |ИЗ
	               |	РегистрСведений.bon_СведенияОНоминальныхОбъектах.СрезПоследних(&Период, Номер = &НомерОбъекта) КАК bon_СведенияОНоминальныхОбъектахСрезПоследних";

	Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
	Запрос.УстановитьПараметр("Период"		, Период);

	ВыборкаСведения = Запрос.Выполнить().Выбрать();

	Пока ВыборкаСведения.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаСведения);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработкаВводаНоминальногоОбъекта(ДокументОбъект, НоминальныйОбъект, ВидНоминальногоОбъекта, РезультатОбработки = "") Экспорт
	///Сергей 19.02.2019 +++
	Перем ТзПарт;
	
	ЭтоНакопительнаяКарта = Ложь;
	буфНоминал = 0;
	
	Если ВидНоминальногоОбъекта.НакапливаемыйНоминал Тогда
		ЭтоНакопительнаяКарта = Истина;		
		// проверим, не введена ли уже другая карта
		Если ЗначениеЗаполнено(ДокументОбъект.ма_НакопительнаяКарта) Тогда
			РезультатОбработки = "Накопительная карта уже введена!";
			Возврат;			
		КонецЕсли;
	КонецЕсли;
		
	// проверим состояние	
	НомерОбъекта = НоминальныйОбъект;
	Статус = ПолучитьСостояниеНоминальногоОбъекта(НомерОбъекта);
	Если Статус = Перечисления.bon_СтатусыНоминальныхОбъектов.ВыведенИзОборота Тогда
		РезультатОбработки = "Данный объект выведен из оборота!";
		Возврат;
	КонецЕсли;
	
	// определим возможность применения номинала скидки
	//Если НЕ ЭтоНакопительнаяКарта Тогда
	//	///Сергей 19.02.2019 ++++
	//	Стар = Константы.мчт_СтараяБонуснаяСистема.Получить();
	//	///Сергей 19.02.2019 ---
	//	
	//	///Сергей ++12.12.2018++
	//	///Получаем онлайн Сертификат
	//	Связь = Ложь;
	//	Если НоминальныйОбъект.Владелец = Справочники.ма_ВидыНоминальныхОбъектов.НайтиПоКоду("57") Тогда
	//		ТабВрем = Новый ТаблицаЗначений;
	//		ТабВрем.Колонки.Добавить("НоминальныйОбъект",,"НоминальныйОбъект");
	//		ТабВрем.Колонки.Добавить("Партия",,"Партия");
	//		ТабВрем.Колонки.Добавить("Остаток",,"Остаток");
	//		ТабВрем.Колонки.Добавить("ОстатокНеизм",,"ОстатокНеизм");
	//		ТабВрем.Колонки.Добавить("ХарактеристикиБонусов",,"ХарактеристикиБонусов");
	//		ТабВрем.Колонки.Добавить("Номенклатура",,"Номенклатура");
	//		ТабВрем.Колонки.Добавить("ВремяЖизниОстатков",,"ВремяЖизниОстатков");	
	//		ТабВрем.Колонки.Добавить("ДнейДоСписания",,"ДнейДоСписания");
	//		ТабВрем.Колонки.Добавить("КлючПримВыдано",,"КлючПримВыдано");
	//		
	//		Если Стар = Ложь Тогда  
	//			ДоступныйНоминал = ма_МаркетинговыеОбъекты.ПолучитьДоступныйНоминалОбъектаВэб(НоминальныйОбъект, Связь);
	//		ИначеЕсли Стар = Истина Тогда 
	//			ТзПарт1 = ма_МаркетинговыеОбъекты.ПолучитьДоступныйНоминалОбъектаВэбПарт(НоминальныйОбъект, ТзПарт, Связь);
	//			
	//			Если ТзПарт1<> Неопределено Тогда
	//				Если ТзПарт1.DataPartPoNomObj.Количество() > 0 Тогда
	//					Итого = Число(0);
	//					Для Каждого ПеребДан Из ТзПарт1.DataPartPoNomObj Цикл 	
	//						НоваяЗапись = ТабВрем.Добавить();
	//						///Номенальный Объект
	//						УникальныйИдентификатор = Новый УникальныйИдентификатор(ПеребДан.Guid_NomObj);
	//						НоминальныйОбъект = Справочники.ма_НоминальныеОбъекты.ПолучитьСсылку(УникальныйИдентификатор);
	//						НоваяЗапись.НоминальныйОбъект = НоминальныйОбъект; 
	//						///
	//						
	//						///Тип Докума
	//						ТипДок = Строка(ПеребДан.Tip_Part);
	//						Если ТипДок ="Корректировка номинальных объектов" тогда
	//							ТипДок1 = "МА: Корректировка номинальных объектов";
	//						ИначеЕсли ТипДок ="Управление бонусами на счетах по партиям" тогда
	//							ТипДок1 = "МЕЧТА: Управление бонусами на счетах по партиям";
	//						ИначеЕсли ТипДок ="Ввод в оборот номинальных объектов" тогда                         
	//							ТипДок1 = "МА: Ввод в оборот номинальных объектов";
	//						ИначеЕсли ТипДок ="Вывод из оборота номинальных объектов" тогда
	//							ТипДок1 = "МА: Вывод из оборота номинальных объектов";
	//						ИначеЕсли ТипДок ="Конвертация буферного номинала" тогда
	//							ТипДок1 = "МА: Конвертация буферного номинала";
	//						Иначе 
	//							ТипДок1 = ТипДок;
	//						КонецЕсли;
	//						
	//						///Партия
	//						УникальныйИдентификатор = Новый УникальныйИдентификатор(ПеребДан.Guid_Part);
	//						Док = "";
	//						Для Каждого Документ Из Документы Цикл 
	//							Разделитель = "Документ менеджер: ";
	//							Строки = СтрЗаменить(Строка(Тип(Документ)), Разделитель, Символы.ПС);
	//							Для Индекс = 1 По СтрЧислоСтрок(Строки) Цикл
	//								Если Индекс = 2 Тогда
	//									Док = СтрПолучитьСтроку(Строки, Индекс);
	//								КонецЕсли;
	//							КонецЦикла;	
	//							
	//							Если Док  = ТипДок1 Тогда	
	//								НужныйДок = Документ.ПолучитьСсылку(УникальныйИдентификатор);
	//								Если НужныйДок.ПолучитьОбъект() <> Неопределено Тогда	
	//									НоваяЗапись.Партия = НужныйДок.Ссылка;
	//								Иначе 
	//									НоваяЗапись.Партия = НужныйДок;
	//								КонецЕсли;
	//							КонецЕсли;
	//						КонецЦикла;
	//						///
	//						
	//						///Остаток
	//						Остаток = Число(ПеребДан.Ostatok);
	//						НоваяЗапись.Остаток = Остаток;	
	//						НоваяЗапись.ОстатокНеизм = Остаток;
	//						Итого = Итого + Остаток;
	//						///
	//						
	//						///Характеристика Бонусов
	//						УникальныйИдентификатор = Новый УникальныйИдентификатор(ПеребДан.Guid_Xarakteristika);
	//						ХарактеристикиБонусов = Справочники.мчт_ХарактеристикиБонусов.ПолучитьСсылку(УникальныйИдентификатор);
	//						НоваяЗапись.ХарактеристикиБонусов = ХарактеристикиБонусов;
	//						///
	//						
	//						///Номенклатура
	//						Если ПеребДан.Guid_Nomenklatyra = "" Тогда 
	//							Номенклатура = "";
	//						Иначе 
	//							УникальныйИдентификатор = Новый УникальныйИдентификатор(ПеребДан.Guid_Nomenklatyra);
	//							Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(УникальныйИдентификатор);
	//						КонецЕсли;
	//						НоваяЗапись.Номенклатура = Номенклатура;
	//						///
	//						
	//						/// Время Жизни
	//						ВремяЖизниОстатков = Число(ПеребДан.VremiaChizni);
	//						НоваяЗапись.ВремяЖизниОстатков = ВремяЖизниОстатков;
	//						///
	//						
	//						///Дней досписания
	//						ДнейДоСписания = Число(ПеребДан.DoSpisania);
	//						НоваяЗапись.ДнейДоСписания = ДнейДоСписания; 
	//						///		
	//					КонецЦикла;	
	//					ИтогоСум = Число(0);
	//					
	//					мчт_БонуснаяПрограммаСервер.РаспределениеПрименениеСертификата(ТабВрем, ДокументОбъект, ИтогоСум);
	//					
	//					ДоступныйНоминал = ИтогоСум;
	//				Иначе 
	//					ДоступныйНоминал = 0;	
	//				КонецЕсли;	
	//			Иначе
	//				Сообщить("Ошибка запроса! Обратитесь в Службу IT", СтатусСообщения.Внимание);	///Сергей "24.04.2019" +++
	//				ДоступныйНоминал = 0;
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//	Иначе 
	//		ДоступныйНоминал = ма_МаркетинговыеОбъекты.ПолучитьДоступныйНоминалОбъекта(НоминальныйОбъект);
	//	КонецЕсли;
	//	
	//	Если ДоступныйНоминал = Неопределено Тогда 
	//		ДоступныйНоминал = 0;
	//	КонецЕсли;
	//	
	//	Если Связь = Ложь Тогда 
	//		Если ДоступныйНоминал <= 0 Тогда
	//			Сообщить("Нет связи с ЦБД! Обратитесь в Службу IT", СтатусСообщения.Внимание);
	//			Возврат;
	//		КонецЕсли;
	//	Иначе 
	//		Если ДоступныйНоминал <= 0 Тогда	
	//			РезультатОбработки = "Нет доступной скидки!";
	//			Возврат;	
	//		КонецЕсли;
	//	КонецЕсли;
	//	///Сергей --12.12.2018--
	//	
	//	Если ДоступныйНоминал >= ДокументОбъект.Товары.Итог("Сумма") Тогда
	//		
	//		//Лисевцев 17.03.17 -->
	//		//Разрешить продавать по сертификатам
	//		Если (НЕ НоминальныйОбъект.Владелец.Код = "57") И (НЕ НоминальныйОбъект.Владелец.Код = "02") Тогда //Разрешить продавать по сертификатам		
	//			Если НЕ НоминальныйОбъект.Владелец.СтороннийСертификат Тогда 
	//				РезультатОбработки = "Сумма скидки больше суммы чека!";
	//				Возврат;
	//			КонецЕсли;
	//		КонецЕсли;
	//		//Лисевцев 17.03.17 <--
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//	
	//Если ЭтоНакопительнаяКарта Тогда
	//	
	//	ДокументОбъект.ма_НакопительнаяКарта = НоминальныйОбъект;
	//	
	//	// проверим нужно ли ее автоматом подставить в выдачу
	//	Для каждого стрТЧ Из ДокументОбъект.ма_МаркетинговыеОбъектыВыданные Цикл
	//		
	//		Если  (НЕ ЗначениеЗаполнено(стрТЧ.МаркетинговыйОбъект))
	//			И (ТипЗнч(стрТЧ.ВидМаркетинговогоОбъекта) = Тип("СправочникСсылка.ма_ВидыНоминальныхОбъектов"))
	//			И стрТЧ.ВидМаркетинговогоОбъекта.НакапливаемыйНоминал Тогда
	//			
	//			стрТЧ.МаркетинговыйОбъект = НоминальныйОбъект;
	//			
	//		КонецЕсли; 
	//	КонецЦикла; 
	//	
	//Иначе
	//	
	//	НайденнаяСтрока = ДокументОбъект.ма_МаркетинговыеОбъектыПринятые.Найти(НоминальныйОбъект, "МаркетинговыйОбъект");
	//	
	//	Если НайденнаяСтрока = Неопределено ТОгда
	//		
	//		Если НоминальныйОбъект.Владелец.СтороннийСертификат Тогда
	//			Владел = НоминальныйОбъект.Владелец;///Сергей 13.06.2019 ++++
	//			Если НЕ ПроверитьСтороннийСертификатНаВозможностьиспользования(ДокументОбъект.Товары.ВыгрузитьКолонку("Номенклатура"), Владел) Тогда 
	//				Возврат;
	//			КонецЕсли;				
	//		КонецЕсли;
	//		
	//		///Сергей 16.03.2020 +++ Нов Марк
	//		Если ВидНоминальногоОбъекта.Код <> Строка("57") Тогда
	//			стрТЧ = ДокументОбъект.ма_МаркетинговыеОбъектыПринятые.Добавить();
	//			стрТЧ.МаркетинговыйОбъект = НоминальныйОбъект;
	//			стрТЧ.ВидМаркетинговогоОбъекта = ВидНоминальногоОбъекта;
	//			стрТЧ.Номинал = ДоступныйНоминал;		
	//		Иначе 
	//			СуппаПрим = ДоступныйНоминал;
	//			мчт_БонуснаяПрограммаСервер.ПрименениеСертификата(ДокументОбъект, СуппаПрим);
	//		КонецЕсли;
	//		///Сергей 16.03.2020 --- Нов Марк
	//	Иначе
	//		Сообщить(""+НоминальныйОбъект+" уже введен в табличную часть");
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
	
КонецПроцедуры // ОбработкаВводаНоминальногоОбъекта()

&НаСервере
Функция ПолучитьСостояниеНоминальногоОбъекта(НомерОбъекта, Период = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bon_СостоянияНоминальныхОбъектовСрезПоследних.Статус
		|ИЗ
		|	РегистрСведений.bon_СостоянияНоминальныхОбъектов.СрезПоследних(&Период, НоминальныйОбъект = &НомерОбъекта) КАК bon_СостоянияНоминальныхОбъектовСрезПоследних";

	Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
	Запрос.УстановитьПараметр("Период"		, Период);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Статус;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьБонусныйСчет(СписокСозданных, Объект, ПартнерВыбор, СозданиеВыполнено, ТелефонПартнераФизЛицо, ТелефонПартнераФизЛицоЗначенияПолей) Экспорт    
	
	//Создаем Партнера
	ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
	ОбъектПартнер.Наименование                          = ФИО_ОднойСтрокой(Объект.Фамилия, Объект.Имя, Объект.Отчество); 
	ОбъектПартнер.Родитель                              = Справочники.Партнеры.ПустаяСсылка();
	ОбъектПартнер.БизнесРегион                          = Справочники.БизнесРегионы.ПустаяСсылка();
	ОбъектПартнер.ГруппаДоступа                         = Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	ОбъектПартнер.ДатаРегистрации                       = ТекущаяДатаСеанса();
	ОбъектПартнер.Клиент                                = Истина;
	ОбъектПартнер.Конкурент                             = Ложь;
	ОбъектПартнер.Поставщик                             = Ложь;
	ОбъектПартнер.ОбслуживаетсяТорговымиПредставителями = Ложь;
	ОбъектПартнер.ПрочиеОтношения                       = Ложь;
	//ОбъектПартнер.ОсновнойМенеджер                      = ОсновнойМенеджер; ///Текущий пользователь
	ОбъектПартнер.НаименованиеПолное                    = ФИО_ОднойСтрокой(Объект.Фамилия, Объект.Имя, Объект.Отчество); 
	ОбъектПартнер.ЮрФизЛицо                             = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	ОбъектПартнер.Пол                                   = Объект.Пол;
	ОбъектПартнер.ДатаРождения                          = Объект.ДатаРождения; 
	ОбъектПартнер.Перевозчик                            = Ложь;
	ОбъектПартнер.ВариантОтправкиЭлектронногоЧека       = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	
	Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
		НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип               	= Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрокаКИ.Вид               	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		НоваяСтрокаКИ.Представление     	= ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.НомерТелефона 		= ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.НомерТелефонаБезКодов = ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.ЗначенияПолей     	= ТелефонПартнераФизЛицоЗначенияПолей;
	КонецЕсли;
	
	///Сергей 06.11.2020г +++  (Указываем Город)
	Если ЗначениеЗаполнено(Объект.Значение) Тогда
		НоваяСтрокаКИ = ОбъектПартнер.ДополнительныеРеквизиты.Добавить();
		НоваяСтрокаКИ.Свойство               	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Город (Общие)");
		НоваяСтрокаКИ.Значение               	= Объект.Значение;		
	КонецЕсли;
	///Сергей 06.11.2020г ---  (Указываем Город)
	
	//Попытка
		ОбъектПартнер.Записать();
	//Исключение
	//	ТекстОшибки = ОписаниеОшибки();
	//КонецПопытки;
	ПартнерВыбор = ОбъектПартнер.Ссылка;
	СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ПартнерВыбор), ОбъектПартнер.Наименование);
	
	
	//Контрагент
	ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ОбъектКонтрагент.Наименование          = ФИО_ОднойСтрокой(Объект.Фамилия, Объект.Имя, Объект.Отчество);
	ОбъектКонтрагент.ЮрФизЛицо             = Перечисления.ЮрФизЛицо.ФизЛицо;
	ОбъектКонтрагент.НДСпоСтавкам4и2       = Ложь;
	//ОбъектКонтрагент.ИНН                   = ИНН;
	ОбъектКонтрагент.Партнер               = ПартнерВыбор;
	ОбъектКонтрагент.НаименованиеПолное    = ФИО_ОднойСтрокой(Объект.Фамилия, Объект.Имя, Объект.Отчество);
	ОбъектКонтрагент.СтранаРегистрации     = Справочники.СтраныМира.Казахстан;
	
	///Телефон Контрагента добавляем
	Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
		НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		НоваяСтрокаКИ.Представление = ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.НомерТелефона = ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.НомерТелефонаБезКодов = ТелефонПартнераФизЛицо;
		НоваяСтрокаКИ.ЗначенияПолей = ТелефонПартнераФизЛицоЗначенияПолей;
		УбратьЗначениевДоопИнформацииКонтрагента(ОбъектКонтрагент);
	КонецЕсли;
	ОбъектКонтрагент.Записать();
	КонтрагентВыбор = ОбъектКонтрагент.Ссылка;
	СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(КонтрагентВыбор), ОбъектКонтрагент.Наименование);	
	
	СозданиеВыполнено = Истина;
	СегментыСервер.ПроверитьВхождениеПартнераВСегментыПриСоздании(ПартнерВыбор);
	
	///Регистрируем	
	ДокументРегистрация = Документы.bon_РегистрацияНоминальныхОбъектов.СоздатьДокумент();
	ДокументРегистрация.Дата 							= НачалоДня(ТекущаяДата())+10;
	ДокументРегистрация.Автор 							= Справочники.Пользователи.НайтиПоКоду(ИмяПользователя());
	//ДокументРегистрация.Подразделение 					= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ДокументРегистрация.Автор, "ОсновноеПодразделениеОрганизации"); //Лисевцев 15.05.2018
	//ДокументРегистрация.КраткоеОписаниеТабличнойЧасти 	= Объект.НомерКарты;
	
	Строка = ДокументРегистрация.НоминальныеОбъекты.Добавить();
	Строка.Номер 				= Объект.НомерКарты;
	Строка.НоминальныйОбъект 	= Объект.НоменальныйОбъект;
	Строка.Держатель 			= КонтрагентВыбор;
	ДокументРегистрация.Записать(РежимЗаписиДокумента.Проведение);
	
	
	НоминальныйОбъектОбъект = Объект.НоменальныйОбъект.ПолучитьОбъект();
	НоминальныйОбъектОбъект.Держатель 	 = КонтрагентВыбор;
	НоминальныйОбъектОбъект.Наименование = КонтрагентВыбор.Наименование;
	НоминальныйОбъектОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УбратьЗначениевДоопИнформацииКонтрагента(ОбъектКонтрагент) Экспорт 
	
	КолТел = Число(0);
	Для Каждого СтрЧ Из ОбъектКонтрагент.КонтактнаяИнформация Цикл
		Если СтрЧ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			КолТел = КолТел + Число(1);	
		КонецЕсли;
	КонецЦикла;	
	
	Если КолТел > 1  Тогда
		Для Каждого Стр Из ОбъектКонтрагент.КонтактнаяИнформация Цикл 
			Если Стр.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента и 
				Стр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента и 
				СтрДлина(Стр.Представление) = 10 Тогда
				Стр.ВидДляСписка =  Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФИО_ОднойСтрокой(Фамилия,Имя,Отчество)
	
	Возврат СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
	
КонецФункции



//////
&НаСервере
Функция ПолучитьДоступныйНоминалОбъекта(НоминальныйОбъект, Период = Неопределено) Экспорт
	
	Результат = 0;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();	
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	bon_ПартииБонусовНаСчетахОстатки.НоминальныйОбъект КАК НоминальныйОбъект,
	|	bon_ПартииБонусовНаСчетахОстатки.Партия КАК Партия,
	|	bon_ПартииБонусовНаСчетахОстатки.Номенклатура,
	|	bon_ПартииБонусовНаСчетахОстатки.КлючПримВыдано,
	|	bon_ПартииБонусовНаСчетахОстатки.ОстатокОстаток КАК ОстатокОстаток,
	|	bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса,
	|	ВЫБОР
	|		КОГДА bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ПоДате = ИСТИНА
	|			ТОГДА РАЗНОСТЬДАТ(bon_ПартииБонусовНаСчетахОстатки.Партия.Дата, bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ДатаСписанияОстаток, ДЕНЬ)
	|		ИНАЧЕ bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ВремяЖизниОстатков
	|	КОНЕЦ КАК ВремяЖизниОстатков,
	|	ВЫБОР
	|		КОГДА bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ПоДате = ИСТИНА
	|			ТОГДА РАЗНОСТЬДАТ(&Период, bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ДатаСписанияОстаток, ДЕНЬ)
	|		ИНАЧЕ bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ВремяЖизниОстатков - (РАЗНОСТЬДАТ(bon_ПартииБонусовНаСчетахОстатки.Партия.Дата, &Период, ДЕНЬ) + bon_ПартииБонусовНаСчетахОстатки.ХарактеристикаБонуса.ВремяЖизниБуфера)
	|	КОНЕЦ КАК ДнейДоСписания
	|ИЗ
	|	РегистрНакопления.bon_ПартииБонусовНаСчетах.Остатки(&Период, НоминальныйОбъект = &НоминальныйОбъект) КАК bon_ПартииБонусовНаСчетахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДнейДоСписания,
	|	bon_ПартииБонусовНаСчетахОстатки.Партия.Дата");		
	Запрос.УстановитьПараметр("НоминальныйОбъект"	, НоминальныйОбъект);
	Запрос.УстановитьПараметр("Период"				, Период);
	
	ВыборкаНоминал = Запрос.Выполнить().Выгрузить();
	ТазПар = Новый ТаблицаЗначений;
	ТазПар.Колонки.Добавить("НоминальныйОбъект");
	ТазПар.Колонки.Добавить("Партия");
	ТазПар.Колонки.Добавить("ТипПарт");
	ТазПар.Колонки.Добавить("Остаток");
	ТазПар.Колонки.Добавить("ХарактеристикиБонусов");
	ТазПар.Колонки.Добавить("Номенклатура");
	ТазПар.Колонки.Добавить("КлючПримВыдано");
	ТазПар.Колонки.Добавить("ВремяЖизниОстатков");
	ТазПар.Колонки.Добавить("ДнейДоСписания");
	Для Каждого ЗаТаб1 Из ВыборкаНоминал Цикл 
		ЗаТаб = ТазПар.Добавить();	
		ЗаТаб.НоминальныйОбъект = ЗаТаб1.НоминальныйОбъект;
		ЗаТаб.Партия = ЗаТаб1.Партия;
		ЗаТаб.ТипПарт = ТипЗнч(ЗаТаб1.Партия);
		ЗаТаб.Остаток =  ЗаТаб1.ОстатокОстаток;
		ЗаТаб.ХарактеристикиБонусов =  ЗаТаб1.ХарактеристикаБонуса;
		ЗаТаб.Номенклатура = ЗаТаб1.Номенклатура;
		ЗаТаб.КлючПримВыдано = ЗаТаб1.КлючПримВыдано;
		Если Строка(ТипЗнч(ЗаТаб1.ВремяЖизниОстатков)) = "Null"  Тогда
			ЗаТаб.ВремяЖизниОстатков = Число(0);
		Иначе 
			ЗаТаб.ВремяЖизниОстатков =  ЗаТаб1.ВремяЖизниОстатков;
		КонецЕсли;
		
		Если Строка(ТипЗнч(ЗаТаб1.ДнейДоСписания)) = "Null"  Тогда
			ЗаТаб.ДнейДоСписания = Число(0);
		Иначе 
			ЗаТаб.ДнейДоСписания =  ЗаТаб1.ДнейДоСписания;
		КонецЕсли;
		
	КонецЦикла;
	///С(отбираем остаток свободный  за минусом минусов)
	Результат = ТаблицаРезультата(ТазПар);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаРезультата (Результат)
	
	ТазПарМин = Новый ТаблицаЗначений;
	ТазПарМин.Колонки.Добавить("НоминальныйОбъект");
	ТазПарМин.Колонки.Добавить("Партия");
	ТазПарМин.Колонки.Добавить("ТипПарт");
	ТазПарМин.Колонки.Добавить("Остаток");
	ТазПарМин.Колонки.Добавить("ХарактеристикиБонусов");
	ТазПарМин.Колонки.Добавить("Номенклатура");
	ТазПарМин.Колонки.Добавить("КлючПримВыдано");
	ТазПарМин.Колонки.Добавить("ВремяЖизниОстатков");
	ТазПарМин.Колонки.Добавить("ДнейДоСписания");
	
	ТазПарПлюс = Новый ТаблицаЗначений;
	ТазПарПлюс.Колонки.Добавить("НоминальныйОбъект", 	Новый ОписаниеТипов("СправочникСсылка.bon_НоминальныеОбъекты"));
	ТазПарПлюс.Колонки.Добавить("Партия",				Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	ТазПарПлюс.Колонки.Добавить("ТипПарт", 				Новый ОписаниеТипов("Строка"));
	ТазПарПлюс.Колонки.Добавить("Остаток",				Новый ОписаниеТипов("Число"));                                           
	ТазПарПлюс.Колонки.Добавить("ХарактеристикиБонусов",Новый ОписаниеТипов("СправочникСсылка.bon_ХарактеристикиБонусов"));
	ТазПарПлюс.Колонки.Добавить("Номенклатура", 		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТазПарПлюс.Колонки.Добавить("КлючПримВыдано",		Новый ОписаниеТипов("Число"));
	ТазПарПлюс.Колонки.Добавить("ВремяЖизниОстатков",	Новый ОписаниеТипов("Число"));
	ТазПарПлюс.Колонки.Добавить("ДнейДоСписания",		Новый ОписаниеТипов("Число"));
	
	Для Каждого Перебор Из Результат Цикл
		Если Перебор.Остаток > 0 Тогда
			///+ значения
			ЗаТабПлю = ТазПарПлюс.Добавить();	
			ЗаТабПлю.НоминальныйОбъект 	= Перебор.НоминальныйОбъект;
			ЗаТабПлю.Партия 				= Перебор.Партия;
			ЗаТабПлю.ТипПарт 				= Перебор.ТипПарт;
			ЗаТабПлю.Остаток 				= Перебор.Остаток;
			ЗаТабПлю.ХарактеристикиБонусов 	= Перебор.ХарактеристикиБонусов;
			ЗаТабПлю.Номенклатура			= Перебор.Номенклатура;
			ЗаТабПлю.КлючПримВыдано 		= Перебор.КлючПримВыдано;
			ЗаТабПлю.ВремяЖизниОстатков 	= Перебор.ВремяЖизниОстатков;
			ЗаТабПлю.ДнейДоСписания 		= Перебор.ДнейДоСписания;
		ИначеЕсли Перебор.Остаток < 0 Тогда 
			///- значения
			ЗаТабМин = ТазПарМин.Добавить();	
			ЗаТабМин.НоминальныйОбъект 		= Перебор.НоминальныйОбъект;
			ЗаТабМин.Партия 				= Перебор.Партия;
			ЗаТабМин.ТипПарт 				= Перебор.ТипПарт;
			ЗаТабМин.Остаток 				= Перебор.Остаток;
			ЗаТабМин.ХарактеристикиБонусов 	= Перебор.ХарактеристикиБонусов;
			ЗаТабМин.Номенклатура			= Перебор.Номенклатура;
			ЗаТабМин.КлючПримВыдано 		= Перебор.КлючПримВыдано;
			ЗаТабМин.ВремяЖизниОстатков 	= Перебор.ВремяЖизниОстатков;
			ЗаТабМин.ДнейДоСписания 		= Перебор.ДнейДоСписания;	
		КонецЕсли;	
	КонецЦикла;
	
	Если ТазПарМин.Количество() > 0 Тогда
		Для Каждого СтрМин Из ТазПарМин Цикл 
			СумСпис = СтрМин.Остаток*-1;
			Запрос = новый запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТзТаб.НоминальныйОбъект,
			|	ТзТаб.Партия,
			|	ТзТаб.ТипПарт,
			|	ТзТаб.Остаток,
			|	ТзТаб.ХарактеристикиБонусов,
			|	ТзТаб.Номенклатура,
			|	ТзТаб.КлючПримВыдано,
			|	ТзТаб.ВремяЖизниОстатков,
			|	ТзТаб.ДнейДоСписания
			|ПОМЕСТИТЬ Таб
			|ИЗ
			|	&ТзТаб КАК ТзТаб
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таб.НоминальныйОбъект КАК НоминальныйОбъект,
			|	Таб.Партия,
			|	Таб.ТипПарт,
			|	Таб.Остаток КАК Остаток,
			|	Таб.ХарактеристикиБонусов,
			|	Таб.Номенклатура,
			|	Таб.КлючПримВыдано,
			|	Таб.ВремяЖизниОстатков,
			|	Таб.ДнейДоСписания
			|ИЗ
			|	Таб КАК Таб
			|ИТОГИ
			|	СУММА(Остаток)
			|ПО
			|	НоминальныйОбъект";
			Запрос.УстановитьПараметр("ТзТаб",ТазПарПлюс);
			РезультатИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если РезультатИтоги.Следующий() тогда
				НужноСписать = СумСпис; 
				Если РезультатИтоги.Остаток >= СумСпис Тогда
					РезултатТовар = РезультатИтоги.Выбрать();
					Пока РезултатТовар.Следующий() цикл 
						Если НужноСписать > 0 Тогда
							Если РезултатТовар.Остаток > 0 Тогда	
								Списываем = Мин(РезултатТовар.Остаток,НужноСписать);	
								Если Списываем >0 Тогда
									СтрМин.Остаток = СтрМин.Остаток + Списываем;
									НужноСписать = НужноСписать - Списываем; 
									Для Каждого ИзменяемЗначен Из ТазПарПлюс Цикл 
										Если ИзменяемЗначен.Партия = РезултатТовар.Партия и 
											ИзменяемЗначен.ТипПарт = РезултатТовар.ТипПарт и 
											ИзменяемЗначен.ХарактеристикиБонусов = РезултатТовар.ХарактеристикиБонусов и 
											ИзменяемЗначен.Номенклатура = РезултатТовар.Номенклатура и
											ИзменяемЗначен.КлючПримВыдано = РезултатТовар.КлючПримВыдано и 
											ИзменяемЗначен.ВремяЖизниОстатков = РезултатТовар.ВремяЖизниОстатков и 
											ИзменяемЗначен.ДнейДоСписания = РезултатТовар.ДнейДоСписания Тогда 
											ИзменяемЗначен.Остаток = ИзменяемЗначен.Остаток - Списываем;
										КонецЕсли;		
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе 
					Возврат Неопределено;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		НулевыеСтроки = ТазПарПлюс.НайтиСтроки(Новый Структура("Остаток",0));
		Для каждого СтрокаТаблицы Из НулевыеСтроки Цикл
			ТазПарПлюс.Удалить(СтрокаТаблицы)
		КонецЦикла;
		РезультатЗнач = ТазПарПлюс;
	Иначе 
		РезультатЗнач = ТазПарПлюс;	
	КонецЕсли;
	
	Возврат РезультатЗнач;
	
КонецФункции



// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
&НаСервере
Функция ПолучитьНовыйКлючСтроки(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Если ДокументОбъект[ИмяТЧ].Количество() = 0 Тогда
		МаксКлюч = 1;
	Иначе
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей=ДокументОбъект.Товары.ВыгрузитьКолонку("КлючСтроки").//[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки");
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи()

// Устанавливает ключ в строках табличной части
//
// Параметры:
//  Объект							 - ДокументОбъект.* - Изменяемый документ
//  ИмяТабличнойЧасти				 - Строка - Название табличной части
//  РеквизитМаксимальныйКодСтроки	 - Строка - Имя реквизита максимального кода строки объекта
//  ИмяРеквизитаТЧ					 - Строка - Имя реквизита кода строки в ТЧ объекта
//
&НаСервере
Процедура УстановитьКлючВСтрокахТабличнойЧасти(Объект,
											ИмяТабличнойЧасти,
											РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки",
											ИмяРеквизитаТЧ = "КлючСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары[ИмяРеквизитаТЧ] = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецПроцедуры


#Область Регламентные_задания

&НаСервере
Процедура bon_КонвертацияБонусовПоПартиям() Экспорт
	Док					= Документы.bon_УправлениеБонусамиНаСчетах.СоздатьДокумент();
	
	Док.ВидОперации		= Перечисления.bon_ВидыОперацийУправленияБонусами.ЗачислениеБонусныхБалловИзБуфера;
	Док.ДатаОперации	= НачалоДня(ТекущаяДата());	
	Попытка
		Док.Автор		= Справочники.Пользователи.НайтиПоНаименованию("Рудобаба Сергей");
	Исключение
	КонецПопытки;
	Док.Комментарий		= "Автоформирование списка конвертации из буфера на остатк "+"("+ТекущаяДата()+")";
	Док.Автозаполнение();
	
	Если Док.ПартииБонусовДляКонвертации.Количество() > 0 Тогда 
		Док.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура bon_Отправка_СМС_о_Начислении() Экспорт
	
	ДатаПер = ТекущаяДата();
	ВидОпер = Перечисления.bon_ВидыОперацийУправленияБонусами.Отправка_СМС_о_Начислении;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_УправлениеБонусамиНаСчетах.Ссылка,
	|	bon_УправлениеБонусамиНаСчетах.Номер,
	|	bon_УправлениеБонусамиНаСчетах.Дата
	|ИЗ
	|	Документ.bon_УправлениеБонусамиНаСчетах КАК bon_УправлениеБонусамиНаСчетах
	|ГДЕ
	|	bon_УправлениеБонусамиНаСчетах.ПометкаУдаления = ЛОЖЬ
	|	И bon_УправлениеБонусамиНаСчетах.Проведен = ИСТИНА
	|	И bon_УправлениеБонусамиНаСчетах.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И bon_УправлениеБонусамиНаСчетах.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаПер)); 
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаПер)); 
	Запрос.УстановитьПараметр("ВидОперации", ВидОпер); 
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество()>0 Тогда
		Для Каждого ПровДок Из Рез Цикл 
			ЗапросД = Новый Запрос;
			ЗапросД.Текст = 
			"ВЫБРАТЬ
			|	bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.Ссылка.Ссылка
			|ИЗ
			|	Документ.bon_УправлениеБонусамиНаСчетах.ПартииБонусовДляСМС КАК bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС
			|ГДЕ
			|	bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.Ссылка.Ссылка = &Ссылка
			|	И bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.ОтправленоСМС = ЛОЖЬ";
			ЗапросД.УстановитьПараметр("Ссылка", ПровДок.Ссылка);
			Резул = ЗапросД.Выполнить().Выгрузить();
			Если Резул.Количество() > 0 Тогда
				Док = ПровДок.Ссылка.ПолучитьОбъект();
				Док.ОтправитьСМС = Истина;
				Док.ОтправитьСМСОНачисл();
				Поиск = Строка(Док.Комментарий);
				Позиция = Найти(Поиск, "Отправлены");
				Если Позиция = 0 Тогда
					Док.Комментарий = Строка(Док.Комментарий)+Строка(" -(СМС Отправлены)");
				КонецЕсли;
				Док.Записать(РежимЗаписиДокумента.Запись);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура bon_Списание_Бонусов_по_сроку_жини() Экспорт 
		
	Док					= Документы.bon_УправлениеБонусамиНаСчетах.СоздатьДокумент();
	
	Док.ВидОперации		= Перечисления.bon_ВидыОперацийУправленияБонусами.СписаниеБонусныхБаллов;
	Док.ДатаОперации	= НачалоДня(ТекущаяДата()) + 1;
	Док.Остаток 		= Строка(0);
	
	Попытка
		Док.Автор		= Справочники.Пользователи.НайтиПоНаименованию("Рудобаба Сергей");
	Исключение
	КонецПопытки;
	Док.Комментарий		= "Автоформирование списка о Списание Бонусных Баллов по сроку жизни " +"("+ТекущаяДата()+")";
	Док.Автозаполнение();
	
	Если Док.ПартииБонусовДляКонвертации.Количество() > 0 Тогда 
		Док.Записать(РежимЗаписиДокумента.Проведение);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура bon_Формирования_Документа_о_предстоящем_Списании() Экспорт 
		
	Док					= Документы.bon_УправлениеБонусамиНаСчетах.СоздатьДокумент();
	
	Док.ВидОперации		= Перечисления.bon_ВидыОперацийУправленияБонусами.ОтправкаСМСоПредстоящемСписание;
	Док.ДатаОперации	= НачалоДня(ТекущаяДата());
	Док.СуммаУвед       = Число(500); 
	Попытка
		Док.Автор		= Справочники.Пользователи.НайтиПоНаименованию("Рудобаба Сергей");
	Исключение
	КонецПопытки;
	Док.Комментарий		= "Автоформирование списка рассылки СМС о списание через 14-дней " +"("+ ТекущаяДата()+")";
	Док.Автозаполнение();
	Док.ОтправитьСМС = Истина;
	
	Если Док.ПартииБонусовДляСМС.Количество() > 0 тогда 
		Док.Записать(РежимЗаписиДокумента.Проведение);	
		
		Если Док.Проведен = Истина Тогда
			Док.ОтправитьСМС();
			Док.Комментарий = Строка(Док.Комментарий)+Строка(" -(СМС Отправлены)");
			Док.Записать(РежимЗаписиДокумента.Запись);
		Иначе 
			Док.Комментарий = Строка(Док.Комментарий)+Строка(" -(СМС не отправлены)");
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура bon_ДоОправкаСМС_о_СкоромСгаранииБонусов() Экспорт 
	
	ДатаПер = ТекущаяДата();
	ВидОпер = Перечисления.bon_ВидыОперацийУправленияБонусами.ОтправкаСМСоПредстоящемСписание;
	
	Запрос = Новый Запрос;
	Запрос.Текст =                    
	"ВЫБРАТЬ                       
	|	bon_УправлениеБонусамиНаСчетах.Ссылка,
	|	bon_УправлениеБонусамиНаСчетах.Номер,
	|	bon_УправлениеБонусамиНаСчетах.Дата
	|ИЗ
	|	Документ.bon_УправлениеБонусамиНаСчетах КАК bon_УправлениеБонусамиНаСчетах
	|ГДЕ
	|	bon_УправлениеБонусамиНаСчетах.ПометкаУдаления = ЛОЖЬ
	|	И bon_УправлениеБонусамиНаСчетах.Проведен = ИСТИНА
	|	И bon_УправлениеБонусамиНаСчетах.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И bon_УправлениеБонусамиНаСчетах.ВидОперации = &ВидОперации";
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ДатаПер)); 
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ДатаПер)); 
	Запрос.УстановитьПараметр("ВидОперации", ВидОпер); 
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	
	
	Для Каждого ПровДок Из Рез Цикл 
		ЗапросД = Новый Запрос;
		ЗапросД.Текст = 
		"ВЫБРАТЬ
		|	bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.Ссылка.Ссылка
		|ИЗ
		|	Документ.bon_УправлениеБонусамиНаСчетах.ПартииБонусовДляСМС КАК bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС
		|ГДЕ
		|	bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.Ссылка.Ссылка = &Ссылка
		|	И bon_УправлениеБонусамиНаСчетахПартииБонусовДляСМС.ОтправленоСМС = ЛОЖЬ";
		ЗапросД.УстановитьПараметр("Ссылка", ПровДок.Ссылка);
		Резул = ЗапросД.Выполнить().Выгрузить();
		Если Резул.Количество() > 0 Тогда
			Док = ПровДок.Ссылка.ПолучитьОбъект();
			Если Найти(Док.Комментарий, "(СМС Отправлены)") = 0 Тогда
				Док.ОтправитьСМС = Истина;
				Док.ОтправитьСМС();
				Док.Комментарий = Строка(Док.Комментарий)+Строка(" -(СМС Отправлены)");
				Док.Записать(РежимЗаписиДокумента.Запись);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область Расчет_Процента_Бонуса_Выдать

&НаСервере
Функция ПроверкаНаРазрешенияВыдочиБонусов(Подразделение) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_ПодразделенияУчаствующиеВБонуснойСистеме.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.bon_ПодразделенияУчаствующиеВБонуснойСистеме КАК bon_ПодразделенияУчаствующиеВБонуснойСистеме
	|ГДЕ
	|	bon_ПодразделенияУчаствующиеВБонуснойСистеме.Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Резул = Запрос.Выполнить().Выгрузить();
	
	Если Резул.Количество() > 0 тогда
		Возврат Истина;			
	Иначе 
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммуКНакоплению(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти) Экспорт
	
	
	//поменять и сделать условие на константу в 3-х местах где она вызывается
	
	ПорядокОкругления 	= 1;
	МетодОкругления 	= "Всегда в меньшую сторону";	
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	
	Если ЕстьРеквизитДокумента("bon_БонусныйСчет", МетаданныеДокумента) Тогда	
		НакопительнаяКарта = ДокументОбъект.bon_БонусныйСчет;
		Если НЕ ЕстьРеквизитТабЧастиДокумента("bon_СуммаБонусовВыдано", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Возврат;	
		КонецЕсли;                                     
		
		СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано = 0;
		
		Если НЕ ЗначениеЗаполнено(НакопительнаяКарта) Тогда
			Возврат;
		КонецЕсли;
		
		// проверим что не услуга
		Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			Возврат;	
		КонецЕсли;
				
		//// проверим на маркетинг выдачу МО
		//Если ЕстьТабЧастьДокумента("bon_ПодаркиВыданные", МетаданныеДокумента) Тогда
		//	
		//	Если ПолучитьМОПоКлючуСтрокиТовара(ДокументОбъект, СтрокаТабличнойЧасти.КлючСтроки, ИмяТабличнойЧасти).Количество() <> 0 Тогда
		//		Возврат;	
		//	КонецЕсли;
		//	
		//КонецЕсли; 

		// проверим на маркетинг подарки
		ЕстьПодарки = Ложь;
		
		Если ЕстьТабЧастьДокумента("bon_ПодаркиВыданные", МетаданныеДокумента) Тогда	
			мСтроки = ПолучитьПодаркиПоКлючуСтрокиТовара(ДокументОбъект, СтрокаТабличнойЧасти.КлючСтроки, ИмяТабличнойЧасти, Истина);
			Если мСтроки.Количество() <> 0 Тогда
				Для Каждого СтрокаПодарка Из мСтроки Цикл	
					ЕстьПодарки = НЕ СтрокаПодарка.МаркетинговаяПрограмма.ИгнорироватьАкцииДляНакопительнойСистемы;
					Если ЕстьПодарки Тогда
						Прервать;	
					КонецЕсли;
				КонецЦикла; 	
			КонецЕсли;		
		КонецЕсли;
						
		// определим кредит
		//добавил во все запросы
		ЕстьКредитнаяПрограмма 	= Ложь; //ОбщегоНазначения.ЕстьРеквизитДокумента("мчт_КредитнаяПрограмма", МетаданныеДокумента);
		ЕстьКредит 				= Ложь; //ЕстьКредитнаяПрограмма И ЗначениеЗаполнено(ДокументОбъект.мчт_КредитнаяПрограмма);
		
		// определим розница или ИМ
		ЭтоРозница = (ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента"));
		
		// получим параметры расчета
		СведенияНО = ПолучитьСведенияОНоминальномОбъектеНач(НакопительнаяКарта);
		
		Если ЗначениеЗаполнено(СведенияНО.НакопительнаяПрограмма) Тогда
			НакопительнаяПрограмма	= СведенияНО.НакопительнаяПрограмма;
		ИначеЕсли ЭтоРозница ТОгда
			НакопительнаяПрограмма	= Справочники.bon_НакопительныеПрограммы.Базовая
		Иначе
			НакопительнаяПрограмма	= Справочники.bon_НакопительныеПрограммы.ИнтернетМагазин
		КонецЕсли;   

		ЕстьАкция = Ложь;
		СтрукутраПроцентаНакопления = ПолучитьПроцентНакопления(НакопительнаяПрограмма, ЕстьКредит, , ЕстьАкция, НакопительнаяКарта); 			
		
		//добавим строки табличной части
		//Если СтрукутраПроцентаНакопления.ПроцентНакопления > 0 тогда
			
			текПроцент 			= СтрукутраПроцентаНакопления.ПроцентНакопления;
			ХарактБонусов		= Справочники.bon_ХарактеристикиБонусов.Стандартные;
			
			Если ДокументОбъект.Ссылка.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Параметр3=ДокументОбъект.Подразделение;	
			Иначе 
				Параметр3 = "";
			КонецЕсли;
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
				Если ДокументОбъект.bon_ДатаПроведенияПервДляБон <> '00010101' Тогда
					ИспользДата = ДокументОбъект.bon_ДатаПроведенияПервДляБон;
				Иначе 
					ИспользДата = ДокументОбъект.Дата;	
				КонецЕсли;
			Иначе 
				ИспользДата = ДокументОбъект.Дата;	
			КонецЕсли;
			
			Если ИспользДата = '00010101' или Формат(ИспользДата, "ДЛФ=В") = Строка("0:00:00") Тогда
				ИспользДата = ТекущаяДата();	
			КонецЕсли;
			
			ДокДляРасчет = ДокументОбъект;
			ВидОплатыДок = "";	
			
			Если Параметр3 <> "" Тогда	
				НачТокСтанд = Ложь;
				///+++ Проверка на Каскад
				КаскадХар = Справочники.bon_ХарактеристикиБонусов.Стандартные;
				//Загатовка для ограничения
				//КаскадХар = ПроверкаНаКаскад(Параметр3, ДокДляРасчет, ИспользДата, ВидОплатыДок, ХарактБонусов);
				///--- Проверка на Каскад
				
				Если КаскадХар <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда
					НачТокСтанд = ПроверкаСтрочкиНаискВКаскаде(СтрокаТабличнойЧасти);	
				КонецЕсли;
				
				Если НачТокСтанд = Ложь Тогда
					///За Наличку
					Если ЕстьКредит = Ложь Тогда					
						///Убрать --ПроверкаХарактДляЗаказа---  --ПроцентНачДляЗаказа--  --ПроцентНачЗаНаличку-- 
						///Убрать --ПроверкаХарактКредДляЗаказа--   --ПроцентНачВКредДляЗаказа--  --ПроцентНачВКред--
						ВидНастройки = Перечисления.bon_Выды_Настроек.Кэшбэк;
						МасивРезультата = ПроверкаХаракт(ХарактБонусов, СтрокаТабличнойЧасти, Параметр3, ДокДляРасчет, ИспользДата, ВидОплатыДок, КаскадХар, ВидНастройки);
						
						ХарактБонусовНов = МасивРезультата[0];
						Если ХарактБонусовНов <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда 
							ХарактБонусов = МасивРезультата[0];
							текПроцент 	  =	МасивРезультата[1]; 
						КонецЕсли;
					КонецЕсли;
					///В Кредит
					Если ЕстьКредит = Истина Тогда					
						МасивРезультата	 =	ПроверкаХарактКред(ХарактБонусов, СтрокаТабличнойЧасти, Параметр3, ДокДляРасчет, ИспользДата, ВидОплатыДок, КаскадХар);
						
						ХарактБонусов = МасивРезультата[0];
						Если ХарактБонусов <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда 
							текПроцент 	  =	МасивРезультата[1]; 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СуммаСтандартная 	= ОкруглитьЧисло((СтрокаТабличнойЧасти.Сумма / 100 * текПроцент), ПорядокОкругления, МетодОкругления);		
			СуммаНаДР 			= ОкруглитьЧисло(СуммаСтандартная * СтрукутраПроцентаНакопления.КоэффициентНакопленияНаДеньРождения, ПорядокОкругления, МетодОкругления);
			//СуммаУвеличенный 	= ОкруглитьЧисло(СуммаСтандартная * СтрукутраПроцентаНакопления.КоэффициентНакопленияУвеличенный, ПорядокОкругления, МетодОкругления); //Константинов АА 09 11 17
						
			СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано = СуммаСтандартная + СуммаНаДР;// + СуммаУвеличенный;
			
			///Сергей 16.03.2020 +++ Записываем значение по бонусам
			Если СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано > 0 Тогда
				Если ДокументОбъект.bon_БонусПартНачис.Количество() = 0 Тогда
					ДобДвижВТаб(ДокументОбъект, СтрокаТабличнойЧасти, ХарактБонусов, ИспользДата); 	
				Иначе
					Если СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано = Число(0) Тогда
						СтрКУд = Новый Массив;
						Для каждого СтрокаБонуса Из ДокументОбъект.bon_БонусПартНачис Цикл	
							Если СтрокаТабличнойЧасти.Номенклатура = СтрокаБонуса.Номенклатура и 
								СтрокаТабличнойЧасти.КлючСтроки = СтрокаБонуса.КлючПримВыдано и 
								ХарактБонусов = СтрокаБонуса.ХарактеристикаБонуса Тогда
								СтрКУд.Добавить(СтрокаБонуса);	
							КонецЕсли; 	
						КонецЦикла;	
						Для каждого СтрокаБонуса Из СтрКУд Цикл
							ДокументОбъект.bon_БонусПартНачис.Удалить(СтрокаБонуса);		
						КонецЦикла; 
					Иначе 
						НетДан = Истина;
						СовПад = Число(0);
						Для Каждого НачБон Из ДокументОбъект.bon_БонусПартНачис Цикл 
							Если СтрокаТабличнойЧасти.Номенклатура = НачБон.Номенклатура и 
								СтрокаТабличнойЧасти.КлючСтроки = НачБон.КлючПримВыдано и 
								ХарактБонусов = НачБон.ХарактеристикаБонуса тогда
								///Куда зачисляем 
								Если ХарактБонусов.ПоДате = Ложь Тогда 
									Если ХарактБонусов.ВремяЖизниБуфера >0 Тогда
										НачБон.Буфер					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
										НачБон.Остаток					= 0;
									ИначеЕсли ХарактБонусов.ВремяЖизниБуфера = 0 Тогда
										НачБон.Буфер					= 0;
										НачБон.Остаток					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
									КонецЕсли;
								Иначе
									Если ХарактБонусов.ДатаПереводаИзБуферавОстаток >= ИспользДата Тогда
										НачБон.Буфер					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
										НачБон.Остаток					= 0;
									ИначеЕсли ХарактБонусов.ДатаПереводаИзБуферавОстаток <= ИспользДата Тогда
										НачБон.Буфер					= 0;
										НачБон.Остаток					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
									КонецЕсли;	
								КонецЕсли;
								///Зачислили
								СовПад = СовПад + Число(1);
							Иначе
								НетДан = Ложь;						 
							КонецЕсли;
						КонецЦикла;
						Если НетДан = Ложь и СовПад = Число(0) Тогда 	 
							ДобДвижВТаб(ДокументОбъект, СтрокаТабличнойЧасти, ХарактБонусов, ИспользДата);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			///Сергей 16.03.2020 --- Записываем значение по бонусам
			
		//КонецЕсли;		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобДвижВТаб(ДокументОбъект, СтрокаТабличнойЧасти, ХарактБонусов, ИспользДата)
	
	ДвижБонус						= ДокументОбъект.bon_БонусПартНачис.Добавить();
	//ДвижБонус.Дата 					= ДокументОбъект.Дата;
	ДвижБонус.bon_НоминальныйОбъект	= ДокументОбъект.bon_БонусныйСчет;
	ДвижБонус.Номенклатура 			= СтрокаТабличнойЧасти.Номенклатура;
	ДвижБонус.КлючПримВыдано		= СтрокаТабличнойЧасти.КлючСтроки;
	ДвижБонус.КоличествоПрод		= СтрокаТабличнойЧасти.Количество;
	ДвижБонус.ХарактеристикаБонуса 	= ХарактБонусов;
	///Куда зачисляем
	Если ХарактБонусов.ПоДате = Ложь Тогда 
		Если ХарактБонусов.ВремяЖизниБуфера >0 Тогда
			ДвижБонус.Буфер					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
			ДвижБонус.Остаток					= 0;
		ИначеЕсли ХарактБонусов.ВремяЖизниБуфера = 0 Тогда
			ДвижБонус.Буфер					= 0;
			ДвижБонус.Остаток					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
		КонецЕсли;
	Иначе
		Если ХарактБонусов.ДатаПереводаИзБуферавОстаток >= ИспользДата Тогда
			ДвижБонус.Буфер					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
			ДвижБонус.Остаток					= 0;
		ИначеЕсли ХарактБонусов.ДатаПереводаИзБуферавОстаток <= ИспользДата Тогда
			ДвижБонус.Буфер					= 0;
			ДвижБонус.Остаток					= СтрокаТабличнойЧасти.bon_СуммаБонусовВыдано;
		КонецЕсли;	
	КонецЕсли;
	///Зачислили	
	ДвижБонус.Содержание		    = "Начисление бонусных баллов при покупке";
	
КонецПроцедуры

&НаСервере
Функция ПроверкаХаракт(ХарактБонусов, СтрокаТабличнойЧасти, Параметр3, ДокументОбъект, ИспользДата, ВидОплатыДок, КаскадХар, ВидНастройки)
	
	Запрос = Новый Запрос;	
	ТекстЗап = "ВЫБРАТЬ
	|	bon_НастройкаБонусов.ХарактеристикаБонусов,
	|	bon_НастройкаБонусов.ПроцентБонусов,
	|	bon_НастройкаБонусов.ВыдаватьВКредит,
	|	bon_НастройкаБонусов.ОгранПоНомЗаНал,
	|	bon_НастройкаБонусов.ОгранПоНомГруппЗаНал,
	|	bon_НастройкаБонусов.ОгранПоЦенГрупЗаНал,
	|	bon_НастройкаБонусов.ВидНастройки
	|ИЗ
	|	РегистрСведений.bon_НастройкаБонусов КАК bon_НастройкаБонусов
	|ГДЕ
	|	bon_НастройкаБонусов.Подразделение = &Подразделение
	|	И bon_НастройкаБонусов.ДатаНач <= &ДатаНач
	|	И bon_НастройкаБонусов.ДатаКон >= &ДатаКон
	|	И bon_НастройкаБонусов.Активен = ИСТИНА
	|	И bon_НастройкаБонусов.НастройкаЗаНаличку = ИСТИНА
	|	И bon_НастройкаБонусов.ВидНастройки = &ВидНастройки";
	Если КаскадХар <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда 
		ТекстЗап = ТекстЗап +"
		|	И bon_НастройкаБонусов.ХарактеристикаБонусов = &ХарактеристикаБонусов";
	КонецЕсли;
	ТекстЗап = ТекстЗап +"
	|
	|УПОРЯДОЧИТЬ ПО
	|	bon_НастройкаБонусов.Приоритет УБЫВ,
	|	bon_НастройкаБонусов.ДатаНач УБЫВ,
	|	bon_НастройкаБонусов.ДокументЗап.Дата УБЫВ";
	
	Запрос.Текст = ТекстЗап;
	Запрос.УстановитьПараметр("Подразделение", Параметр3);	
	Запрос.УстановитьПараметр("ДатаНач", ИспользДата);
	Запрос.УстановитьПараметр("ДатаКон", ИспользДата);
	Если КаскадХар <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда
		Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);	
		Запрос.УстановитьПараметр("ХарактеристикаБонусов", КаскадХар);
	Иначе 
		Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);
	КонецЕсли;


	РезультатДан = Запрос.Выполнить().Выгрузить();
	Если РезультатДан.Количество() > 0 тогда       ///Нужно решить брать первую или обрабатывать каждую
		Для Каждого Результат Из РезультатДан Цикл 
			ХарактБонусовРез 	= Результат.ХарактеристикаБонусов;	
			Если Результат.ОгранПоНомЗаНал = Истина Тогда
				///По Номенклотуре
				МассивДанных = ОграничениеПоНоменклотуре(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
				
				Если МассивДанных[1] = Истина Тогда
					ИсклХар = ПроверкаНаИсключение(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
					Если Не ИсклХар Тогда
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = МассивДанных[0];
						МасивРезульт[1] = Результат.ПроцентБонусов;
						Возврат МасивРезульт;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
						Возврат МасивРезульт;
					КонецЕсли;
				Иначе 
					ХарактБонусов = ХарактБонусов;					
				КонецЕсли;
				///Конец По Номенклотуре	
			ИначеЕсли Результат.ОгранПоНомГруппЗаНал = Истина и Результат.ОгранПоЦенГрупЗаНал = Ложь Тогда
				///По Номенклотурной Группе	
				МассивДанных = ОграничениеПоНоменклотурнойГруппе(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
				
				Если МассивДанных[1] = Истина Тогда
					ИсклХар = ПроверкаНаИсключение(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
					Если Не ИсклХар Тогда
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = МассивДанных[0];
						МасивРезульт[1] = Результат.ПроцентБонусов;
						Возврат МасивРезульт;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
						Возврат МасивРезульт;
					КонецЕсли;
				Иначе 
					ХарактБонусов = ХарактБонусов;					
				КонецЕсли;
				///Конец По Номенклотурной Группе
			ИначеЕсли Результат.ОгранПоНомГруппЗаНал = Истина и Результат.ОгранПоЦенГрупЗаНал = Истина Тогда
				///По Номенклотурной Группе и ценовой группе		
				МассивДанных = ОграничениеПоНоменклотурнойГруппеИЦеновойГруппе(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
				
				Если МассивДанных[1] = Истина Тогда
					ИсклХар = ПроверкаНаИсключение(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
					Если Не ИсклХар Тогда
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = МассивДанных[0];
						МасивРезульт[1] = Результат.ПроцентБонусов;
						Возврат МасивРезульт;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
						Возврат МасивРезульт;
					КонецЕсли;	
				Иначе 
					ХарактБонусов = ХарактБонусов;					
				КонецЕсли;
				///Конец По Номенклотурной Группе и ценовой группе
			ИначеЕсли Результат.ОгранПоНомГруппЗаНал = Ложь и Результат.ОгранПоЦенГрупЗаНал = Истина Тогда
				///По Ценовой группе
				МассивДанных = ОграничениеПоЦеновойГруппе(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
				
				Если МассивДанных[1] = Истина Тогда
					ИсклХар = ПроверкаНаИсключение(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
					Если Не ИсклХар Тогда
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = МассивДанных[0];
						МасивРезульт[1] = Результат.ПроцентБонусов;
						Возврат МасивРезульт;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
						Возврат МасивРезульт;
					КонецЕсли;	
				Иначе 
					ХарактБонусов = ХарактБонусов;					
				КонецЕсли;			
				///Конец По Ценовой группе
			Иначе 
				ИсклХар = ПроверкаНаИсключение(ХарактБонусовРез, СтрокаТабличнойЧасти.Номенклатура);
				Если Не ИсклХар Тогда
					МасивРезульт = Новый Массив(2);
					МасивРезульт[0] = ХарактБонусовРез;
					МасивРезульт[1] = Результат.ПроцентБонусов;
					Возврат МасивРезульт;
				Иначе 
					МасивРезульт = Новый Массив(2);
					МасивРезульт[0] = ХарактБонусов;
					МасивРезульт[1] = Число(0);
					Возврат МасивРезульт;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МасивРезульт = Новый Массив(2);
	МасивРезульт[0] = ХарактБонусов;
	МасивРезульт[1] = Число(0);
	Возврат МасивРезульт;
		
КонецФункции

&НаСервере
Функция ПроверкаХарактКред(ХарактБонусов, СтрокаТабличнойЧасти, Параметр3, ДокументОбъект, ИспользДата, ВидОплатыДок, КаскадХар)
	
	Запрос = Новый Запрос;
	ТекЗап = 
	"ВЫБРАТЬ
	|	мчт_НастройкаБонусов.ХарактеристикаБонусов,
	|	мчт_НастройкаБонусов.ПроцентБонусовВКредит,
	|	мчт_НастройкаБонусов.НаКонкретнуюПРограммуКред,
	|	мчт_НастройкаБонусов.КредитнаяПрограмма,
	|	мчт_НастройкаБонусов.ОгранПоНомВКред,
	|	мчт_НастройкаБонусов.ОгранПоНомГруппВКред,
	|	мчт_НастройкаБонусов.ОгранПоЦенГрупВКред
	|ИЗ
	|	РегистрСведений.мчт_НастройкаБонусов КАК мчт_НастройкаБонусов
	|ГДЕ
	|	мчт_НастройкаБонусов.мчт_Подразделение = &мчт_Подразделение
	|	И мчт_НастройкаБонусов.ДатаНач <= &ДатаНач
	|	И мчт_НастройкаБонусов.ДатаКон >= &ДатаКон
	|	И мчт_НастройкаБонусов.Активен = ИСТИНА
	|	И мчт_НастройкаБонусов.НастройкаВКредит = ИСТИНА
	|	И мчт_НастройкаБонусов.ВидНастройки = &ВидНастройки";
	Если КаскадХар <> Справочники.мчт_ХарактеристикиБонусов.Стандартные Тогда 
		ТекЗап = ТекЗап +"
		|	И мчт_НастройкаБонусов.ХарактеристикаБонусов = &ХарактеристикаБонусов";
	КонецЕсли;
	ТекЗап = ТекЗап +"
	|
	|УПОРЯДОЧИТЬ ПО
	|	мчт_НастройкаБонусов.Приоритет УБЫВ,
	|	мчт_НастройкаБонусов.ДатаНач УБЫВ,
	|	мчт_НастройкаБонусов.ДокументЗап.Дата УБЫВ";
	Запрос.Текст = ТекЗап;
	Запрос.УстановитьПараметр("мчт_Подразделение", Параметр3);	
	Запрос.УстановитьПараметр("ДатаНач", ИспользДата);
	Запрос.УстановитьПараметр("ДатаКон", ИспользДата);
	Если КаскадХар <> Справочники.мчт_ХарактеристикиБонусов.Стандартные Тогда
		Запрос.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);	
		Запрос.УстановитьПараметр("ХарактеристикаБонусов", КаскадХар);
	Иначе 
		Запрос.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Кэшбэк);
	КонецЕсли;
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 тогда		
		Для Каждого Обход Из Результат Цикл 
			ХарактБонусовПол 	= Обход.ХарактеристикаБонусов;
			
			Если Обход.НаКонкретнуюПРограммуКред = Истина Тогда
				///ПоКредПрограмме
				Если Обход.КредитнаяПрограмма = ДокументОбъект.мчт_КредитнаяПрограмма Тогда 
					ЕстьНом = ОгранПоНомВКредХар(Обход, ХарактБонусовПол, СтрокаТабличнойЧасти);
					Если ЕстьНом = Истина Тогда 
						ИсклХар = ПроверкаНаИсключениеВКред(ХарактБонусовПол, СтрокаТабличнойЧасти.Номенклатура);
						Если Не ИсклХар Тогда
							МасивРезульт = Новый Массив(2);
							МасивРезульт[0] = ХарактБонусовПол;
							МасивРезульт[1] = Обход.ПроцентБонусовВКредит;
							Возврат МасивРезульт;
						Иначе 
							МасивРезульт = Новый Массив(2);
							МасивРезульт[0] = ХарактБонусов;
							МасивРезульт[1] = Число(0);
							Возврат МасивРезульт;
						КонецЕсли;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
					КонецЕсли;	
				КонецЕсли;
			Иначе
				ЕстьНом = ОгранПоНомВКредХар(Обход, ХарактБонусовПол, СтрокаТабличнойЧасти);
				Если ЕстьНом = Истина Тогда 
					ИсклХар = ПроверкаНаИсключениеВКред(ХарактБонусовПол, СтрокаТабличнойЧасти.Номенклатура);
					Если Не ИсклХар Тогда
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусовПол;
						МасивРезульт[1] = Обход.ПроцентБонусовВКредит;
						Возврат МасивРезульт;
					Иначе 
						МасивРезульт = Новый Массив(2);
						МасивРезульт[0] = ХарактБонусов;
						МасивРезульт[1] = Число(0);
						Возврат МасивРезульт;
					КонецЕсли;
				Иначе 
					МасивРезульт = Новый Массив(2);
					МасивРезульт[0] = ХарактБонусов;
					МасивРезульт[1] = Число(0);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе 
		МасивРезульт = Новый Массив(2);
		МасивРезульт[0] = ХарактБонусов;
		МасивРезульт[1] = Число(0);
		Возврат МасивРезульт;		
	КонецЕсли;
	
	
	МасивРезульт = Новый Массив(2);
	МасивРезульт[0] = ХарактБонусов;
	МасивРезульт[1] = Число(0);
	Возврат МасивРезульт;
	
КонецФункции

&НаСервере
Функция УдалитьДанныеИзСвязаннойТаблицы(СвязаннаяТаблица, Отбор) Экспорт
	
	ЕстьУдаленныеСтроки = Ложь;
	МассивСтрок = СвязаннаяТаблица.НайтиСтроки(Отбор);
	для каждого СтрокаМассивСтрок из МассивСтрок Цикл
		СвязаннаяТаблица.Удалить(СтрокаМассивСтрок);
		ЕстьУдаленныеСтроки = Истина;
	КонецЦикла;
	
	Возврат ЕстьУдаленныеСтроки
	
КонецФункции

&НаСервере
Функция ПолучитьМОПоКлючуСтрокиТовара(ДокументОбъект, КлючСтроки, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Результат = Новый Массив;
	
	КлючСтрокиПрименения = ИмяТабличнойЧасти + "_" + КлючСтроки;
	
	Результат = ДокументОбъект.ма_МаркетинговыеОбъектыВыданные.НайтиСтроки(Новый Структура("КлючСтрокиПрименения", КлючСтрокиПрименения));

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПодаркиПоКлючуСтрокиТовара(ДокументОбъект, КлючСтроки, ИмяТабличнойЧасти = "Товары", ИспользоватьРеквизитМА = Ложь) Экспорт
	
	Результат = Новый Массив;  
    Если ИспользоватьРеквизитМА Тогда     
        КлючСтрокиПрименения = ИмяТабличнойЧасти + "_" + КлючСтроки; 
        Для каждого стрПодарок Из ДокументОбъект.bon_ПодаркиВыданные Цикл   
            Если Найти(стрПодарок.КлючСтрокиПрименения, КлючСтрокиПрименения) > 0 Тогда
                Результат.Добавить(стрПодарок);	
            КонецЕсли; 
        КонецЦикла;          
    Иначе   	
	    Результат = ДокументОбъект.bon_ПодаркиВыданные.НайтиСтроки(Новый Структура("КлючСтроки", КлючСтроки));
    КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОгранПоНомВКредХар(Результат, ХарактБонусовПол, СтрокаТабличнойЧасти)
	
	ЕстьНом = Ложь;
	Если Результат.ОгранПоНомВКред = Истина Тогда
		///По Номенклотуре
		ЗапПоНом = Новый Запрос;
		ЗапПоНом.Текст ="ВЫБРАТЬ
		                |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Номенклотура
		                |ИЗ
		                |	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		                |ГДЕ
		                |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		                |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоНоменклотуре = ИСТИНА
		                |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		                |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Кредит = ИСТИНА";
		ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовПол);
		РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
		Если РезПоНом.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНом Цикл
				Если СтрокаТабличнойЧасти.Номенклатура = ПерНом.Номенклотура Тогда
					ЕстьНом = Истина;
				КонецЕсли;					
			КонецЦикла;
		КонецЕсли; 
		///Конец По Номенклотуре
	ИначеЕсли Результат.ОгранПоНомГруппВКред = Истина и Результат.ОгранПоЦенГрупВКред = Ложь Тогда
		///По Номенклотурной Группе	
		ЗапПоНомГруп = Новый Запрос;
		ЗапПоНомГруп.Текст ="ВЫБРАТЬ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа
		                    |ИЗ
		                    |	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		                    |ГДЕ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ЛОЖЬ
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Кредит = ИСТИНА";
		ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовПол);
		РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
		Если РезПоНомГруп.Количество() > 0 тогда	
			Для Каждого ПерНом Из РезПоНомГруп Цикл 
				Если СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
					ЕстьНом = Истина;	
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		///Конец По Номенклотурной Группе
	ИначеЕсли Результат.ОгранПоНомГруппВКред = Истина и Результат.ОгранПоЦенГрупВКред = Истина Тогда
		///По Номенклотурной Группе	 и ценовой
		ЗапПоНомГруп = Новый Запрос;
		ЗапПоНомГруп.Текст ="ВЫБРАТЬ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа,
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
		                    |ИЗ
		                    |	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		                    |ГДЕ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Кредит = ИСТИНА";
		ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовПол);                                          
		РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
		Если РезПоНомГруп.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
				Если СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа = ПерНом.НомГруппа и СтрокаТабличнойЧасти.Номенклатура.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
					ЕстьНом = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Результат.ОгранПоНомГруппВКред = Ложь и Результат.ОгранПоЦенГрупВКред = Истина Тогда
		///ценовой
		ЗапПоНомГруп = Новый Запрос;
		ЗапПоНомГруп.Текст ="ВЫБРАТЬ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа,
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
		                    |ИЗ
		                    |	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		                    |ГДЕ
		                    |	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ЛОЖЬ
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ИСТИНА
		                    |	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Кредит = ИСТИНА";
		ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовПол);                                          
		РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
		Если РезПоНомГруп.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
				Если СтрокаТабличнойЧасти.Номенклатура.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
					ЕстьНом = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Результат.ОгранПоНомВКред = Ложь и  Результат.ОгранПоНомГруппВКред = Ложь и Результат.ОгранПоЦенГрупВКред = Ложь Тогда
		ЕстьНом = Истина;	
	КонецЕсли;
	
	Возврат  ЕстьНом;
	
КонецФункции

&НаСервере
Функция ПолучитьСведенияОНоминальномОбъектеНач(НомерОбъекта, Период = Неопределено) Экспорт
	
	Результат = Новый Структура("НоминальныйОбъект, ПериодДействияНачало, ПериодДействияКонец, Держатель, НакопительнаяПрограмма");
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.НоминальныйОбъект КАК НоминальныйОбъект,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.ПериодДействияНачало КАК ПериодДействияНачало,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.ПериодДействияКонец КАК ПериодДействияКонец,
	               |	bon_СведенияОНоминальныхОбъектахСрезПоследних.Держатель КАК Держатель
	               |ИЗ
	               |	РегистрСведений.bon_СведенияОНоминальныхОбъектах.СрезПоследних(&Период, НоминальныйОбъект = &НомерОбъекта) КАК bon_СведенияОНоминальныхОбъектахСрезПоследних";

	Запрос.УстановитьПараметр("НомерОбъекта", НомерОбъекта);
	Запрос.УстановитьПараметр("Период"		, Период);

	ВыборкаСведения = Запрос.Выполнить().Выбрать();

	Пока ВыборкаСведения.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаСведения);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьПроцентНакопления(НакопительнаяПрограмма, ЕстьКредит, Период = Неопределено, ЕстьАкция = Ложь, НакопительнаяКарта)

	Период = ?(Период = Неопределено, ТекущаяДата(), Период);
	СтруктураОтвета = ПолучитьПроцентНакопленияПоВидам(НакопительнаяПрограмма, ЕстьКредит, Период , ЕстьАкция, НакопительнаяКарта); 
		
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция ПолучитьПроцентНакопленияПоВидам(НакопительнаяПрограмма, ЕстьКредит, Период, ЕстьАкция = Ложь, НакопительнаяКарта) Экспорт
	
	СтруктураОтвета = Новый Структура("ПроцентНакопления, КоэффициентНакопленияНаДеньРождения, КоэффициентНакопленияУвеличенный", 0, 0);  //Константинов АА 09 11 17

	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.ПроцентНакопленияНаличные КАК ПроцентНакопленияНаличные,
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.ПроцентНакопленияКредит КАК ПроцентНакопленияКредит,
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.ПроцентНакопленияАкции КАК ПроцентНакопленияАкции,
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.КоэффициентНакопленияНаДеньРождения КАК КоэффициентНакопленияНаДеньРождения,
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.ПериодПроцентаНакопленияНаДеньРождения КАК ПериодПроцентаНакопленияНаДеньРождения,
	                      |	bon_ПараметрыНакопительныхПрограммСрезПоследних.КоэффициентНакопленияУвеличенный КАК КоэффициентНакопленияУвеличенный
	                      |ИЗ
	                      |	РегистрСведений.bon_ПараметрыНакопительныхПрограмм.СрезПоследних(&Период, НакопительнаяПрограмма = &НакопительнаяПрограмма) КАК bon_ПараметрыНакопительныхПрограммСрезПоследних");

	Запрос.УстановитьПараметр("Период"					, Период);
	Запрос.УстановитьПараметр("НакопительнаяПрограмма"	, НакопительнаяПрограмма);

	ВыборкаПроцент = Запрос.Выполнить().Выбрать();

	Если ВыборкаПроцент.Следующий() Тогда
		
		Результат = 0;
		Если ЕстьАкция ТОгда
			Если ЕстьКредит Тогда
				Результат = Мин(ВыборкаПроцент.ПроцентНакопленияКредит, ВыборкаПроцент.ПроцентНакопленияАкции);
			Иначе
				Результат = ВыборкаПроцент.ПроцентНакопленияАкции;
			КонецЕсли;
		Иначе
			Если ЕстьКредит Тогда
				Результат = ВыборкаПроцент.ПроцентНакопленияКредит;
			Иначе
				Результат = ВыборкаПроцент.ПроцентНакопленияНаличные;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОтвета.ПроцентНакопления = Результат;
		
		Если СтруктураОтвета.ПроцентНакопления <> 0 Тогда
			//ДР_Покупателя = ма_НакопительнаяСистемаПоПартиямСерверВызовСервера.ПроверитьДеньРожденияДержателяНакопительнойКарты(Период, ВыборкаПроцент.ПериодПроцентаНакопленияНаДеньРождения, НакопительнаяКарта);
			//
			//Если ДР_Покупателя Тогда
			//	СтруктураОтвета.КоэффициентНакопленияНаДеньРождения	= ВыборкаПроцент.КоэффициентНакопленияНаДеньРождения;
			//КонецЕсли;
			
			   СтруктураОтвета.КоэффициентНакопленияУвеличенный	= ВыборкаПроцент.КоэффициентНакопленияУвеличенный;  //Константинов АА 09 11 17
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураОтвета
	
КонецФункции

/// Процент на время
&НаСервере
Функция ПроверкаНаКаскад(Параметр3, ДокументОбъект, ИспользДата, ВидОплатыДок, СтандХар) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	мчт_НастройкаБонусов.ХарактеристикаБонусов,
	|	мчт_НастройкаБонусов.ПроцентБонусов,
	|	мчт_НастройкаБонусов.ВыдаватьВКредит,
	|	мчт_НастройкаБонусов.ОгранПоНомЗаНал,
	|	мчт_НастройкаБонусов.ОгранПоНомГруппЗаНал,
	|	мчт_НастройкаБонусов.ОгранПоЦенГрупЗаНал,
	|	мчт_НастройкаБонусов.ВидНастройки,
	|	мчт_НастройкаБонусов.Каскад_СуммаС,
	|	мчт_НастройкаБонусов.Каскад_СуммаДо
	|ИЗ
	|	РегистрСведений.мчт_НастройкаБонусов КАК мчт_НастройкаБонусов
	|ГДЕ
	|	мчт_НастройкаБонусов.мчт_Подразделение = &мчт_Подразделение
	|	И мчт_НастройкаБонусов.ДатаНач <= &ДатаНач
	|	И мчт_НастройкаБонусов.ДатаКон >= &ДатаКон
	|	И мчт_НастройкаБонусов.Активен = ИСТИНА
	|	И мчт_НастройкаБонусов.НастройкаЗаНаличку = ИСТИНА
	|	И мчт_НастройкаБонусов.ВидНастройки = &ВидНастройки
	|
	|УПОРЯДОЧИТЬ ПО
	|	мчт_НастройкаБонусов.Приоритет УБЫВ,
	|	мчт_НастройкаБонусов.ДатаНач УБЫВ,
	|	мчт_НастройкаБонусов.ДокументЗап.Дата УБЫВ";
	Запрос.УстановитьПараметр("мчт_Подразделение", Параметр3);	
	Запрос.УстановитьПараметр("ДатаНач", ИспользДата);
	Запрос.УстановитьПараметр("ДатаКон", ИспользДата);
	Запрос.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
	РезДан = Запрос.Выполнить().Выгрузить();
	
	Если РезДан.Количество() > 0 тогда 
		Для Каждого Результат Из РезДан Цикл 
			ХарактБонусовРез 	= Результат.ХарактеристикаБонусов;	
			Сумма = Число(0);
			Сумма = ПроверкаЕслилиОграничениеКаскад(ХарактБонусовРез, ДокументОбъект);
			
			Если  Сумма >= Результат.Каскад_СуммаС и Сумма <= Результат.Каскад_СуммаДо Тогда
				Возврат ХарактБонусовРез;	
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СтандХар;
	
	
	
КонецФункции

&НаСервере
Функция  ПроверкаЕслилиОграничениеКаскад(ХарактБонусовРез, Док)
	
	Сумма = Число(0);
	
	Для Каждого Строка Из Док.Товары Цикл 
		
		
		Если ПроверкаСтрочкиНаискВКаскаде(Строка) Тогда
			Продолжить;	
		КонецЕсли;
		
		///+++Проверка По Номенклотуре
		ЗапПоНом = Новый Запрос;
		ЗапПоНом.Текст ="ВЫБРАТЬ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Номенклотура
		|ИЗ
		|	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		|ГДЕ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоНоменклотуре = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ВидНастройки = &ВидНастройки";
		ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
		ЗапПоНом.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
		РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
		СуммаНом = Число(0);
		Если РезПоНом.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНом Цикл
				Если Строка.Номенклотура = ПерНом.Номенклотура Тогда
					СуммаНом = СуммаНом + Строка.Сумма;	
				КонецЕсли;					
			КонецЦикла;
		Иначе 
			СуммаНом = СуммаНом + Строка.Сумма;
		КонецЕсли;
		///---Проверили по номенклотуре
		
		///+++Проверка По Номенклотурной Группе
		ЗапПоНом = Новый Запрос;
		ЗапПоНом.Текст ="ВЫБРАТЬ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа
		|ИЗ
		|	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		|ГДЕ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ВидНастройки = &ВидНастройки
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппеВПоГруппе = ЛОЖЬ";
		ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
		ЗапПоНом.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
		РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
		СуммаГруп = Число(0);
		Если РезПоНом.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНом Цикл
				Если Строка.Номенклотура.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
					СуммаГруп = СуммаГруп + Строка.Сумма;	
				КонецЕсли;					
			КонецЦикла;
		Иначе 
			СуммаГруп = СуммаГруп + Строка.Сумма;
		КонецЕсли;
		///---Проверили по Номенклотурной Группе
		
		///+++Проверка По Номенклотурной Группе И Ценовой Группе
		ЗапПоНом = Новый Запрос;
		ЗапПоНом.Текст ="ВЫБРАТЬ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа,
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппаВПоГруппа
		|ИЗ
		|	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		|ГДЕ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ВидНастройки = &ВидНастройки
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппеВПоГруппе = ИСТИНА";
		ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
		ЗапПоНом.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
		РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
		СуммаГрупИЦенГруп = Число(0);
		Если РезПоНом.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНом Цикл	
				Если Строка.Номенклотура.НоменклатурнаяГруппа = ПерНом.НомГруппа и Строка.Номенклотура.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
					СуммаГрупИЦенГруп = СуммаГрупИЦенГруп + Строка.Сумма;	
				КонецЕсли;					
			КонецЦикла;
		Иначе 
			СуммаГрупИЦенГруп = СуммаГрупИЦенГруп + Строка.Сумма;
		КонецЕсли;
		///---Проверили по Номенклотурной Группе И Ценовой Группе
		
		///+++Проверка По Ценновой Группе
		ЗапПоНом = Новый Запрос;
		ЗапПоНом.Текст ="ВЫБРАТЬ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
		|ИЗ
		|	РегистрСведений.мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
		|ГДЕ
		|	мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ВидНастройки = &ВидНастройки
		|	И мчт_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ИСТИНА";
		ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
		ЗапПоНом.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
		РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
		СуммаЦенГруп = Число(0);
		Если РезПоНом.Количество() > 0 тогда
			Для Каждого ПерНом Из РезПоНом Цикл
				Если Строка.Номенклотура.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
					СуммаЦенГруп = СуммаЦенГруп + Строка.Сумма;	
				КонецЕсли;					
			КонецЦикла;
		Иначе 
			СуммаЦенГруп = СуммаЦенГруп + Строка.Сумма;
		КонецЕсли;
		///---Проверили по Ценновой Группе		
		
		///+++Проверка На Исключения
		Исключ = Ложь;
		
		Исключ = ПроверкаНаИсключениеКаскад(ХарактБонусовРез, Строка.Номенклатура);
		///---Проверка На Исключения

		Если Исключ = Ложь Тогда
			Если СуммаНом > Число(0) Тогда
				Сумма = Сумма + СуммаНом;
			ИначеЕсли СуммаГруп > Число(0) Тогда
				Сумма = Сумма + СуммаГруп;
			ИначеЕсли СуммаГрупИЦенГруп > Число(0) Тогда
				Сумма = Сумма + СуммаГрупИЦенГруп;
			ИначеЕсли СуммаЦенГруп > Число(0) Тогда
				Сумма = Сумма + СуммаЦенГруп;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Сумма;
	
	
КонецФункции
///Конец

///+++Каскад
&НаСервере
Функция ПроверкаСтрочкиНаискВКаскаде(Строка)
	
	ИскКаскад = Ложь;
	Если ТипЗнч(Строка.ЗначениеУсловияАвтоматическойСкидки) = Тип("СправочникСсылка.ИнформационныеКарты") Тогда
		Если Строка.ЗначениеУсловияАвтоматическойСкидки.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.Сервисная или
			Строка.ЗначениеУсловияАвтоматическойСкидки.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.Директорская или
			Строка.ЗначениеУсловияАвтоматическойСкидки.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.Оптовая или
			Строка.ЗначениеУсловияАвтоматическойСкидки.ВидДисконтнойКарты = Справочники.ВидыДисконтныхКарт.Акционная Тогда 
			ИскКаскад = Истина;	
		КонецЕсли;
	КонецЕсли;	
	
	Если Строка.ма_ГНЦ Тогда
		ИскКаскад = Истина;			
	КонецЕсли;
	
	Если Строка.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ма_ОтменаАкции Тогда
		ИскКаскад = Истина;		
	КонецЕсли;
	
	
	Возврат ИскКаскад;
	
КонецФункции
///---Каскад


#Область Механизмы_Каскадного_Кэшбека

///////Ограничение при расчете суммы документа
	
////////////////////////////////////////////////////

///////Исключение При Начислдении Каскад
&НаСервере
Функция ПроверкаНаИсключениеКаскад(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Исключ = Ложь;
	
	Исключ = ИсключПоНоменклотуреКаскад(ХарактБонусовРез, НомВТаб);
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеКаскад(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеИЦеновойГруппеКаскад(ХарактБонусовРез, НомВТаб);
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоЦеновойГруппеКаскад(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Возврат Исключ;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотуреКаскад(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНом = Новый Запрос;
	ЗапПоНом.Текст ="ВЫБРАТЬ
	                |	bon_Исключение_Бонусов.Номенклотура
	                |ИЗ
	                |	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	                |ГДЕ
	                |	bon_Исключение_Бонусов.Характеристика = &Характеристика
	                |	И bon_Исключение_Бонусов.ПоНоменклотуре = ИСТИНА
	                |	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	                |	И bon_Исключение_Бонусов.ВидНастройки = &ВидНастройки
	                |	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ИСТИНА";
	ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	ЗапПоНом.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
	РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
	Если РезПоНом.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНом Цикл
			Если НомВТаб = ПерНом.Номенклотура Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеКаскад(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.ВидНастройки = &ВидНастройки
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	ЗапПоНомГруп.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНомГруп Цикл 
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеИЦеновойГруппеКаскад(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа,
	|	bon_Исключение_Бонусов.ПоЦенГруппаВПоГруппа КАК ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ВидНастройки = &ВидНастройки
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	ЗапПоНомГруп.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа и НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоЦеновойГруппеКаскад(ХарактБонусовРез, НомВТаб) Экспорт
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ВидНастройки = &ВидНастройки
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	ЗапПоНомГруп.УстановитьПараметр("ВидНастройки", Перечисления.New_Bonys_Выды_Настроек.Каскадные);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

////////////////////////////////////////////////////

#КонецОбласти

#Область Механизмы_Для_Начисления_и_Списания_Бонусов

#Область Механизмы_Для_Начисления_Бонусов
///При начислении есть ограничение по "Номенклотуре"
&НаСервере
Функция ОграничениеПоНоменклотуре(ХарактБонусовРез, НомВТаб) Экспорт 
	
	ЗапПоНом = Новый Запрос;
	ЗапПоНом.Текст ="ВЫБРАТЬ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Номенклотура
	|ИЗ
	|	РегистрСведений.bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
	|ГДЕ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоНоменклотуре = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Наличка = ИСТИНА";
	ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
	Если РезПоНом.Количество() > 0 тогда
		ЕстьНом = Ложь;
		Для Каждого ПерНом Из РезПоНом Цикл
			Если НомВТаб = ПерНом.Номенклотура Тогда
				МасивДанных = Новый Массив(2);
				МасивДанных[0] = ХарактБонусовРез;
				МасивДанных[1] = Истина;
				Возврат МасивДанных;
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли; 
	
	МасивДанных = Новый Массив(2);
	МасивДанных[1] = Ложь;
	
	Возврат МасивДанных;
	
КонецФункции

///При начисление есть ограничение по "Номенклотурной Группе"
&НаСервере
Функция ОграничениеПоНоменклотурнойГруппе(ХарактБонусовРез, НомВТаб) Экспорт 
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа
	|ИЗ
	|	РегистрСведений.bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
	|ГДЕ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ЛОЖЬ
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Наличка = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();                                      
	Если РезПоНомГруп.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНомГруп Цикл 
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
				МасивДанных = Новый Массив(2);
				МасивДанных[0] = ХарактБонусовРез;
				МасивДанных[1] = Истина;
				Возврат МасивДанных;
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;
	
	МасивДанных = Новый Массив(2);
	МасивДанных[1] = Ложь;
	
	Возврат МасивДанных;

КонецФункции

///При начисление есть ограничение по "Номенклотурной Группе и Ценовой Группе"
&НаСервере
Функция ОграничениеПоНоменклотурнойГруппеИЦеновойГруппе(ХарактБонусовРез, НомВТаб) Экспорт 
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
	|ГДЕ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Наличка = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа и НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				МасивДанных = Новый Массив(2);
				МасивДанных[0] = ХарактБонусовРез;
				МасивДанных[1] = Истина;
				Возврат МасивДанных;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МасивДанных = Новый Массив(2);
	МасивДанных[1] = Ложь;
	
	Возврат МасивДанных;
	
КонецФункции

///При начислении есть ограничение по "Ценновой Группе"
&НаСервере
Функция ОграничениеПоЦеновойГруппе(ХарактБонусовРез, НомВТаб) Экспорт 
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
	|ГДЕ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Начислять = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе = ЛОЖЬ
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Наличка = ИСТИНА";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				МасивДанных = Новый Массив(2);
				МасивДанных[0] = ХарактБонусовРез;
				МасивДанных[1] = Истина;
				Возврат МасивДанных;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МасивДанных = Новый Массив(2);
	МасивДанных[1] = Ложь;
	
	Возврат МасивДанных;
	
КонецФункции

///////Исключение При Начислдении Наличка
&НаСервере
Функция ПроверкаНаИсключение(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Исключ = Ложь;
	
	Исключ = ИсключПоНоменклотуреНачис(ХарактБонусовРез, НомВТаб);
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппе(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеИЦеновойГруппе(ХарактБонусовРез, НомВТаб);
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоЦеновойГруппе(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Возврат Исключ;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотуреНачис(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНом = Новый Запрос;
	ЗапПоНом.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.Номенклотура
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.ПоНоменклотуре = ИСТИНА
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
	Если РезПоНом.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНом Цикл
			Если НомВТаб = ПерНом.Номенклотура Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппе(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНомГруп Цикл 
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеИЦеновойГруппе(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа,
	|	bon_Исключение_Бонусов.ПоЦенГруппаВПоГруппа КАК ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа и НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоЦеновойГруппе(ХарактБонусовРез, НомВТаб) Экспорт
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

////////////////////////////////////////////////////
#КонецОбласти


///////Исключение При Начислдении Кредит
&НаСервере
Функция ПроверкаНаИсключениеВКред(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Исключ = Ложь;
	
	Исключ = ИсключПоНоменклотуреНачисКред(ХарактБонусовРез, НомВТаб);
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеКред(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеИЦеновойГруппеКред(ХарактБонусовРез, НомВТаб);
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоЦеновойГруппеКред(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Возврат Исключ;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотуреНачисКред(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНом = Новый Запрос;
	ЗапПоНом.Текст ="ВЫБРАТЬ
	                |	bon_Исключение_Бонусов.Номенклотура
	                |ИЗ
	                |	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	                |ГДЕ
	                |	bon_Исключение_Бонусов.Характеристика = &Характеристика
	                |	И bon_Исключение_Бонусов.ПоНоменклотуре = ИСТИНА
	                |	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	                |	И bon_Исключение_Бонусов.Кредит = ИСТИНА
					|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
	Если РезПоНом.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНом Цикл
			Если НомВТаб = ПерНом.Номенклотура Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеКред(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	                    |	bon_Исключение_Бонусов.НомГруппа
	                    |ИЗ
	                    |	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	                    |ГДЕ
	                    |	bon_Исключение_Бонусов.Характеристика = &Характеристика
	                    |	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	                    |	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	                    |	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ЛОЖЬ
	                    |	И bon_Исключение_Бонусов.Кредит = ИСТИНА
						|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНомГруп Цикл 
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеИЦеновойГруппеКред(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	                    |	bon_Исключение_Бонусов.НомГруппа,
	                    |	bon_Исключение_Бонусов.ПоЦенГруппаВПоГруппа КАК ЦенГруппа
	                    |ИЗ
	                    |	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	                    |ГДЕ
	                    |	bon_Исключение_Бонусов.Характеристика = &Характеристика
	                    |	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	                    |	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	                    |	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ИСТИНА
	                    |	И bon_Исключение_Бонусов.Кредит = ИСТИНА
						|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа и НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоЦеновойГруппеКред(ХарактБонусовРез, НомВТаб) Экспорт
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Начислять = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.Кредит = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

////////////////////////////////////////////////////

#Область Механизмы_Для_Списания_Бонусов
///////Исключение При Списании Наличка
&НаСервере
Функция ПроверкаНаИсключениеСпис(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Исключ = Ложь;
	
	Исключ = ИсключПоНоменклотуреСпис(ХарактБонусовРез, НомВТаб);
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеСпис(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоНоменклотурнойГруппеИЦеновойГруппеСпис(ХарактБонусовРез, НомВТаб);
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Если Не Исключ Тогда
		Исключ = ИсключПоЦеновойГруппеСпис(ХарактБонусовРез, НомВТаб);	
	Иначе
		Возврат Исключ;	
	КонецЕсли;
	
	Возврат Исключ;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотуреСпис(ХарактБонусовРез, НомВТаб) Экспорт           
	
	Искл = Ложь;
	
	ЗапПоНом = Новый Запрос;
	ЗапПоНом.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.Номенклотура
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.ПоНоменклотуре = ИСТИНА
	|	И bon_Исключение_Бонусов.Списывать = ИСТИНА
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНом.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНом = ЗапПоНом.Выполнить().Выгрузить();
	Если РезПоНом.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНом Цикл
			Если НомВТаб = ПерНом.Номенклотура Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли; 
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеСпис(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Списывать = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		Для Каждого ПерНом Из РезПоНомГруп Цикл 
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоНоменклотурнойГруппеИЦеновойГруппеСпис(ХарактБонусовРез, НомВТаб) Экспорт 
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.НомГруппа,
	|	bon_Исключение_Бонусов.ПоЦенГруппаВПоГруппа КАК ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Списывать = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппеВПоГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.НоменклатурнаяГруппа = ПерНом.НомГруппа и НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

&НаСервере
Функция ИсключПоЦеновойГруппеСпис(ХарактБонусовРез, НомВТаб) Экспорт
	
	Искл = Ложь;
	
	ЗапПоНомГруп = Новый Запрос;
	ЗапПоНомГруп.Текст ="ВЫБРАТЬ
	|	bon_Исключение_Бонусов.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Исключение_Бонусов КАК bon_Исключение_Бонусов
	|ГДЕ
	|	bon_Исключение_Бонусов.Характеристика = &Характеристика
	|	И bon_Исключение_Бонусов.Списывать = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоЦенГруппе = ИСТИНА
	|	И bon_Исключение_Бонусов.ПоГруппе = ЛОЖЬ
	|	И bon_Исключение_Бонусов.Наличка = ИСТИНА
	|	И bon_Исключение_Бонусов.ИсключИзСуммыДок = ЛОЖЬ";
	ЗапПоНомГруп.УстановитьПараметр("Характеристика", ХарактБонусовРез);
	РезПоНомГруп = ЗапПоНомГруп.Выполнить().Выгрузить();
	Если РезПоНомГруп.Количество() > 0 тогда
		ЕстьСовпад = Число(0);
		Для Каждого ПерНом Из РезПоНомГруп Цикл                                                
			Если НомВТаб.ЦеноваяГруппа = ПерНом.ЦенГруппа Тогда
				Искл = Истина;
				Возврат Искл;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Искл;
	
КонецФункции

////////////////////////////////////////////////////
#КонецОбласти


#КонецОбласти

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
&НаСервере
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат НЕ (МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

КонецФункции // ЕстьРеквизитДокумента()

// Позволяет определить есть ли среди реквизитов табличной части документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//  ИмяТабЧасти  - строковое имя табличной части документа, среди реквизитов которого производится поиск
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
&НаСервере
Функция ЕстьРеквизитТабЧастиДокумента(ИмяРеквизита, МетаданныеДокумента, ИмяТабЧасти) Экспорт

	ТабЧасть = МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти);

	Если ТабЧасть = Неопределено Тогда // Нет такой таб. части в документе
		Возврат Ложь;

	Иначе
		Возврат НЕ (ТабЧасть.Реквизиты.Найти(ИмяРеквизита) = Неопределено);

	КонецЕсли;

КонецФункции // ЕстьРеквизитТабЧастиДокумента()

// Позволяет определить есть ли табличная часть документа с переданным именем.
//
// Параметры: 
//  ИмяТабЧасти - строковое имя искомой табличной части,
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
&НаСервере
Функция ЕстьТабЧастьДокумента(ИмяТабЧасти, МетаданныеДокумента) Экспорт

	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧасти) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЕстьТабЧастьДокумента()

// Округляет число по заданному порядку. Если задан метод "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки окгугления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//	МетодОкругления			 - значение перечисления МетодыОкругления или булево (Истина = ВсегдаВБольшуюСторону, Ложь = ПоАрифметическимПравилам)
//  						   если Истина, то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
&НаСервере
Функция ОкруглитьЧисло(ЧислоДляОкругления, Знач ПорядокОкругления, Знач МетодОкругления) Экспорт
	
	Перем Результат;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		ПорядокОкругления = 1; 
	КонецЕсли;
	
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал = ЧислоДляОкругления / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если Метаданные.Перечисления.Найти("МетодыОкругления")<>Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(МетодОкругления) Тогда
			МетодОкругления = Перечисления["МетодыОкругления"].ПоАрифметическимПравилам;
		КонецЕсли;
		
		Если ТипЗнч(МетодОкругления) = Тип("Булево") Тогда
			// в типах цен метод округления задается как булево (Истина - в большую сторону, Ложь - по арифметрическим правилам)
			Если МетодОкругления Тогда
				МетодОкругления = Перечисления["МетодыОкругления"].ВсегдаВБольшуюСторону;
			Иначе
				МетодОкругления = Перечисления["МетодыОкругления"].ПоАрифметическимПравилам;
			КонецЕсли;
		КонецЕсли;   		
		
		Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
			
			// Числа поделились нацело. Округлять не нужно.
			Результат = ЧислоДляОкругления;
		Иначе
			Если МетодОкругления = Перечисления["МетодыОкругления"].ВсегдаВБольшуюСторону Тогда
				
				// При порядке округления "0.05" 0.371 должно округлитья до 0.4
				Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
				
			ИначеЕсли МетодОкругления = Перечисления["МетодыОкругления"].ВсегдаВМеньшуюСторону Тогда
				
				// При порядке округления "0.05" 0.371 и 0.376 должно округлиться до 0.35
				Результат = Порядок * КоличествоЦелыхИнтервалов;
				
			Иначе
				
				// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
				// а 0.376 до 0.4
				Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
			КонецЕсли;
			
		КонецЕсли;
	Иначе   //если нет спец. перчисления "Методы окргуления" тогда 15Как20
		
		// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
		// а 0.376 до 0.4
		Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции // ОкруглитьЧисло()


#КонецОбласти

#Область Расчет_Процента_Бонуса_Выдать_Рефирально

&НаСервере
Процедура РассчитатьСуммуКНакоплениюРеф(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти) Экспорт
	
	ПорядокОкругления 	= 1;
	МетодОкругления 	= "Всегда в меньшую сторону";	
	
	// проверим что не услуга
	Если СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		Возврат;	
	КонецЕсли;
	
	текПроцент 			= Число(0);
	ХарактБонусов		= Справочники.bon_ХарактеристикиБонусов.Стандартные;
	
	#Область Подразделение_и_Дата	
	Если ДокументОбъект.Ссылка.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		Параметр3=ДокументОбъект.Подразделение;	
	Иначе 
		Сообщить("Не указано Подразделение!!!");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		Если ДокументОбъект.bon_ДатаПроведенияПервДляБон <> '00010101' Тогда
			ИспользДата = ДокументОбъект.bon_ДатаПроведенияПервДляБон;
		Иначе 
			ИспользДата = ДокументОбъект.Дата;	
		КонецЕсли;
	Иначе 
		ИспользДата = ДокументОбъект.Дата;	
	КонецЕсли;
	
	Если ИспользДата = '00010101' или Формат(ИспользДата, "ДЛФ=В") = Строка("0:00:00") Тогда
		ИспользДата = ТекущаяДата();	
	КонецЕсли;
	#КонецОбласти
	
	ДокДляРасчет = ДокументОбъект;
	ВидОплатыДок = "";	
	
	КаскадХар = Справочники.bon_ХарактеристикиБонусов.Стандартные;
	ВидНастройки = Перечисления.bon_Выды_Настроек.Реферальная;
	МасивРезультата = ПроверкаХаракт(ХарактБонусов, СтрокаТабличнойЧасти, Параметр3, ДокДляРасчет, ИспользДата, ВидОплатыДок, КаскадХар, ВидНастройки);
	
	ХарактБонусовНов = МасивРезультата[0];
	Если ХарактБонусовНов <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда 
		ХарактБонусов = МасивРезультата[0];
		текПроцент 	  =	МасивРезультата[1]; 
	КонецЕсли;
	
	СуммаСтандартная 	= ОкруглитьЧисло((СтрокаТабличнойЧасти.Сумма / 100 * текПроцент), ПорядокОкругления, МетодОкругления);		
	
	#Область Запись_Результата
	Если СуммаСтандартная > 0 Тогда
		Если ДокументОбъект.bon_БонусПартНачисРеф.Количество() = 0 Тогда
			ДобДвижВТабРеф(ДокументОбъект, СтрокаТабличнойЧасти, СуммаСтандартная, ХарактБонусов, ИспользДата); 	
		Иначе
			Если СуммаСтандартная = Число(0) Тогда
				СтрКУд = Новый Массив;
				Для каждого СтрокаБонуса Из ДокументОбъект.bon_БонусПартНачисРеф Цикл	
					Если СтрокаТабличнойЧасти.Номенклатура = СтрокаБонуса.Номенклатура и 
						СтрокаТабличнойЧасти.КлючСтроки = СтрокаБонуса.КлючПримВыдано и 
						ХарактБонусов = СтрокаБонуса.ХарактеристикаБонуса Тогда
						СтрКУд.Добавить(СтрокаБонуса);	
					КонецЕсли; 	
				КонецЦикла;	
				Для каждого СтрокаБонуса Из СтрКУд Цикл
					ДокументОбъект.bon_БонусПартНачисРеф.Удалить(СтрокаБонуса);		
				КонецЦикла; 
			Иначе 
				НетДан = Истина;
				СовПад = Число(0);
				Для Каждого НачБон Из ДокументОбъект.bon_БонусПартНачисРеф Цикл 
					Если СтрокаТабличнойЧасти.Номенклатура = НачБон.Номенклатура и 
						СтрокаТабличнойЧасти.КлючСтроки = НачБон.КлючПримВыдано и 
						ХарактБонусов = НачБон.ХарактеристикаБонуса тогда
						///Куда зачисляем 
						Если ХарактБонусов.ПоДате = Ложь Тогда 
							Если ХарактБонусов.ВремяЖизниБуфера >0 Тогда
								НачБон.Буфер					= СуммаСтандартная;
								НачБон.Остаток					= 0;
							ИначеЕсли ХарактБонусов.ВремяЖизниБуфера = 0 Тогда
								НачБон.Буфер					= 0;
								НачБон.Остаток					= СуммаСтандартная;
							КонецЕсли;
						Иначе
							Если ХарактБонусов.ДатаПереводаИзБуферавОстаток >= ИспользДата Тогда
								НачБон.Буфер					= СуммаСтандартная;
								НачБон.Остаток					= 0;
							ИначеЕсли ХарактБонусов.ДатаПереводаИзБуферавОстаток <= ИспользДата Тогда
								НачБон.Буфер					= 0;
								НачБон.Остаток					= СуммаСтандартная;
							КонецЕсли;	
						КонецЕсли;
						///Зачислили
						СовПад = СовПад + Число(1);
					Иначе
						НетДан = Ложь;						 
					КонецЕсли;
				КонецЦикла;
				Если НетДан = Ложь и СовПад = Число(0) Тогда 	 
					ДобДвижВТабРеф(ДокументОбъект, СтрокаТабличнойЧасти, СуммаСтандартная, ХарактБонусов, ИспользДата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ДобДвижВТабРеф(ДокументОбъект, СтрокаТабличнойЧасти, СуммаСтандартная, ХарактБонусов, ИспользДата)
	
	ДвижБонус						= ДокументОбъект.bon_БонусПартНачисРеф.Добавить();
	ДвижБонус.bon_НоминальныйОбъект	= ДокументОбъект.bon_БонусныйСчетРеф;
	ДвижБонус.Номенклатура 			= СтрокаТабличнойЧасти.Номенклатура;
	ДвижБонус.КлючПримВыдано		= СтрокаТабличнойЧасти.КлючСтроки;
	ДвижБонус.ХарактеристикаБонуса 	= ХарактБонусов;
	///Куда зачисляем
	Если ХарактБонусов.ПоДате = Ложь Тогда 
		Если ХарактБонусов.ВремяЖизниБуфера >0 Тогда
			ДвижБонус.Буфер					= СуммаСтандартная;
			ДвижБонус.Остаток				= 0;
		ИначеЕсли ХарактБонусов.ВремяЖизниБуфера = 0 Тогда
			ДвижБонус.Буфер					= 0;
			ДвижБонус.Остаток				= СуммаСтандартная;
		КонецЕсли;
	Иначе
		Если ХарактБонусов.ДатаПереводаИзБуферавОстаток >= ИспользДата Тогда
			ДвижБонус.Буфер					= СуммаСтандартная;
			ДвижБонус.Остаток				= 0;
		ИначеЕсли ХарактБонусов.ДатаПереводаИзБуферавОстаток <= ИспользДата Тогда
			ДвижБонус.Буфер					= 0;
			ДвижБонус.Остаток				= СуммаСтандартная;
		КонецЕсли;	
	КонецЕсли;
	///Зачислили	
	ДвижБонус.Содержание		    = "Начисление бонусных баллов при покупке 'Рефирально'";
	
КонецПроцедуры

#КонецОбласти


#Область Проверка_доступов_по_бонусной

&НаСервере
Функция ПроверкаДоступа(ПользТек, РольПров) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	1 КАК Поле1
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	               |		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Пользователь = &Пользователь
	               |	И ПрофилиГруппДоступаРоли.Роль.Наименование = &Роль";
	Запрос.УстановитьПараметр("Пользователь", ПользТек);
	Запрос.УстановитьПараметр("Роль", РольПров);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти










