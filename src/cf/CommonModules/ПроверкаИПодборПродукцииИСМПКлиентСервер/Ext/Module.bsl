#Область ПрограмныйИнтерфейс

// Возвращает строковое значение ссылки, по которой происходит переход при нажатии на гиперссылку открытия
// формы проверки и подбора обуви из прикладных документов конфигураци - потребителя библиотеки ГосИС.
// 
// Возвращаемое значение:
// 	Строка - значение ссылки для перехода при нажатии на гиперссылку открытия формы проверки.
//
Функция НавигационнаяСсылкаОткрытьФормуПроверкиОбувнойПродукции() Экспорт
	
	Возврат "ОткрытьФормуПроверкиИПодбораОбувнойПродукции";
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(
		ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для всех родительских строк
// переданной строки дерева маркируемой продукции.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(
		СтрокаДерева, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
// 	СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// 	ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные) Экспорт
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	СтрокаДерева.КоличествоПодчиненнойПродукции     = 0;
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
			Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
		
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненнойПродукции = СтрокаДерева.КоличествоПодчиненнойПродукции + 1;
			
		Иначе
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненнойПродукции     = СтрокаДерева.КоличествоПодчиненнойПродукции     + ПодчиненнаяСтрока.КоличествоПодчиненнойПродукции;
		СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненнойПродукции;

	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

// Определяет типы всех упаковок в дереве маркируемой продукции
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ОпределитьТипыВсехУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ОпределитьТипУпаковки(СтрокаДерева, Истина);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки статуса проверки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.НедопустимыйКодМаркировки Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 5;
		
	Иначе
		
		ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;
		
КонецПроцедуры

// Определяет индекс картинки типа упаковки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт

	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

// Определяет индекс картинки состояния подбора кода маркировки для строки таблицы подобранной маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка табличного поля, содержащая данные маркируемой продукции.
///
Процедура УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(ТекущаяСтрока) Экспорт
		
	Если ТекущаяСтрока.Количество = 0
		И ТекущаяСтрока.КоличествоИС = 0
		И ТекущаяСтрока.КоличествоПодобрано = 0 Тогда
			
		ТекущаяСтрока.ИндексКодаМаркировки = 0;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.Количество
		И ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.КоличествоИС Тогда
			
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
		
	Иначе
		
		ТекущаяСтрока.ИндексКодаМаркировки = 2;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>';
																|en = '<не является упаковкой>'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки")
		Или ТекущаяСтрока.НеСодержитсяВДанныхДокумента Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>';
																|en = '<не применимо>'");
	
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>';
																|en = '<пустая упаковка>'");
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		И ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 
		И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2';
																		|en = 'Проверено %1 из %2'"),
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВНаличии,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3';
																		|en = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3';
																		|en = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3';
																		|en = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4';
																		|en = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4';
																		|en = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4';
																		|en = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5';
																		|en = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>';
																|en = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>';
																|en = '<состав недоступен>'");
		Иначе
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>';
																|en = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = "";
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'коробов - %1';
																			|en = 'коробов - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок);
		КонецЕсли;
			
		Если ТекущаяСтрока.КоличествоПодчиненнойПродукции > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.ПредставлениеСодержимоеУпаковки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеСодержимоеУпаковки), "", ", ")
				+ СтрШаблон(НСтр("ru = 'пар обуви - %1';
								|en = 'пар обуви - %1'"), ТекущаяСтрока.КоличествоПодчиненнойПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ТребуетсяПеремаркировка Тогда
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1';
				|en = '(требуется разборка) %1'"),
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;

КонецПроцедуры

// Формирует признак допустимости и представление проверки данных ИСМП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// ПараметрыПроверкиКодовМаркировки - Структура со свойствами
// 		ДопустимыеСтатусыКодовМаркировки - Массив значений типа ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - допустимые статусы кода маркировки для текущей хоз.операции
// 		КонтролироватьВладельца - Булево - необходимость контроля кода маркировки по владельцу
// 		ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС ИСМП
//
Процедура ПроверитьДопустимостьКодаМаркировки(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли НЕ ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Статус неопределен';
																|en = 'Статус неопределен'");
		
	Иначе
		
		Если ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыКодовМаркировки.Найти(ТекущаяСтрока.СтатусКодаМаркировки) = Неопределено Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1';
																				|en = 'Статус: %1'"), ТекущаяСтрока.СтатусКодаМаркировки);
		Иначе
			ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока) Экспорт

	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Пачки без блока';
											|en = 'Пачки без блока'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Блоки без коробки';
											|en = 'Блоки без коробки'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Продукция без упаковки';
											|en = 'Продукция без упаковки'");
		
	Иначе
		
		ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущаяСтрока) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма,
		ТекущаяСтрока, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	

КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

// Определяет тип упаковки(монотоварная или мультитоварная) при изменении строки дерева.
// Действие выполняется для текущей строки и всех ее родительских строк.
//
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево маркируемой продукции.
// 	ИдентификаторИзмененойСтроки - Число - идентификатор изменившейся строки.
//
Процедура ОпределитьТипУпаковкиПриИзмененииСтроки(ДеревоМаркированнойПродукции, ИдентификаторИзмененойСтроки) Экспорт

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ОпределитьТипУпаковки(ИзмененнаяСтрока, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ОпределитьТипУпаковки(РодительИзмененнойСтроки, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Функция ТребуетсяУказаниеСерий(ТаблицаПродукции) Экспорт
	
	СтатусыСерийСерияНеУказана = СтатусыСерийСерияНеУказана();
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		Если СтрокаПродукции.Количество = 0 И СтрокаПродукции.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Статусы серий (не указано)
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СтатусыСерийСерияНеУказана() Экспорт
		
	СтатусыСерияНеУказана = Новый Массив();
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.СтатусыСерийСерияНеУказана(СтатусыСерияНеУказана);
	
	Возврат СтатусыСерияНеУказана;
	
КонецФункции

#КонецОбласти

#Область Перемаркировка

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_ОтобразитьИнформациюОНеобходимостиПеремаркировки(
		Форма, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_ПроверитьНеобходимостьПеремаркировки(
		Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(
		СтрокаДерева, СоответствуетОтбору, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Функция ЗаголовокТребуетсяПеремаркировка(Форма) Экспорт
	
	ТекстТребуется = СтрШаблон(НСтр("ru = 'Требуется разборка упаковок - %1.';
									|en = 'Требуется разборка упаковок - %1.'"), Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать);
	СтрокаТребуется = Новый ФорматированнаяСтрока(ТекстТребуется,, Форма.ЦветТекстаТребуетВнимания);
	
	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		ТекстОтбор = НСтр("ru = '(снять отбор)';
							|en = '(снять отбор)'");
	Иначе
		ТекстОтбор = НСтр("ru = '(отобрать)';
							|en = '(отобрать)'");
	КонецЕсли;
	
	СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборТребуетсяПеремаркировка");
	
	Возврат Новый ФорматированнаяСтрока(СтрокаТребуется, " ", СтрокаОтбор);
	
КонецФункции

#КонецОбласти

// Формирует и отображает на форме информационную надпись о наличии недопустимых кодов маркировки.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма) Экспорт
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		
		ТекстНедопустимыхКодов = СтрШаблон(НСтр("ru = 'Недопустимых кодов маркировки - %1.';
												|en = 'Недопустимых кодов маркировки - %1.'"), Форма.КоличествоНедопустимыхКодовМаркировки);
		СтрокаНедопустимыхКодов = Новый ФорматированнаяСтрока(ТекстНедопустимыхКодов,, Форма.ЦветТекстаТребуетВнимания);
		
		Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
			ТекстОтбор = НСтр("ru = '(снять отбор)';
								|en = '(снять отбор)'");
		Иначе
			ТекстОтбор = НСтр("ru = '(отобрать)';
								|en = '(отобрать)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборНедопустимыеКодыМаркировки");
		
		Форма.Элементы.ДекорацияНедопустимыеКодыМаркировки.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаНедопустимыхКодов, " ", СтрокаОтбор);
			
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Ложь;
	
КонецПроцедуры

Функция ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода) Экспорт
	
	ЧастиТекстаОшибки = Новый Массив;
	
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Не удалось сопоставить данным документа следующие данные:';
									|en = 'Не удалось сопоставить данным документа следующие данные:'"));
	ЧастиТекстаОшибки.Добавить(" ");
	ЧастиТекстаОшибки.Добавить(
		СтрШаблон(НСтр("ru = 'номенклатура - %1';
						|en = 'номенклатура - %1'"),
			?(ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
				ДанныеШтрихкода.Номенклатура,
				НСтр("ru = 'Не определена';
					|en = 'Не определена'"))));
				
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Характеристика) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Характеристика - %1';
							|en = 'Характеристика - %1'"), ДанныеШтрихкода.Характеристика));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Серия - %1';
							|en = 'Серия - %1'"), ДанныеШтрихкода.Серия));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиТекстаОшибки);
	
КонецФункции

Процедура УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока, ДоступныеДляПроверкиУпаковки) Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока,
		ДоступныеДляПроверкиУпаковки, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПродукцияБезУпаковки(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки");
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

// Заполняет реквизит "НомерСтроки" в коллекции
//
// Параметры:
//  КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить НомерСтроки
Процедура ПересчитатьНомераСтрок(КоллекцияДанных) Экспорт
	
	НомерСтроки = 1;
	
	Для Каждого ТекущаяСтрока Из КоллекцияДанных Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ОпределениеХозяйственнойОперации

Функция ЭтоДокументПриобретения(Контекст) Экспорт
	
	ЭтоПриобретение = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоДокументПриобретения(Контекст, ЭтоПриобретение);
	
	Возврат ЭтоПриобретение;
	
КонецФункции

Функция ЭтоЧекККМ(Контекст) Экспорт
	
	ЭтоЧек = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМ(Контекст, ЭтоЧек);
	
	Возврат ЭтоЧек;
	
КонецФункции

Функция ЭтоЧекККМВозврат(Контекст) Экспорт
	
	ЭтоЧекВозврат = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМВозврат(Контекст, ЭтоЧекВозврат);
	
	Возврат ЭтоЧекВозврат;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОпределениеТипаУпаковки

Процедура ОпределитьТипУпаковки(СтрокаДерева, ВключаяПодчиненные)
	
	НоменклатураУпаковки   = Новый Соответствие;
	ХарактеристикаУпаковки = Новый Соответствие;
	СерияУпаковки          = Новый Соответствие;
	GTINУпаковки           = Новый Соответствие;
	
	ВУпаковкеРазнаяНоменклатура   = Ложь;
	ВУпаковкеРазныеХарактеристики = Ложь;
	ВУпаковкеРазныеСерии          = Ложь;
	ВУпаковкеРазныйGTIN           = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				
				ОпределитьТипУпаковки(ПодчиненнаяСтрока, ВключаяПодчиненные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяНоменклатура Тогда
			ВУпаковкеРазнаяНоменклатура = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеХарактеристики Тогда
			ВУпаковкеРазныеХарактеристики = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСерии Тогда
			ВУпаковкеРазныеСерии = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныйGTIN Тогда
			ВУпаковкеРазныйGTIN = Истина;
		КонецЕсли;
		
		НоменклатураУпаковки.Вставить(ПодчиненнаяСтрока.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(ПодчиненнаяСтрока.Характеристика, Истина);
		СерияУпаковки.Вставить(ПодчиненнаяСтрока.Серия, Истина);
		GTINУпаковки.Вставить(ПодчиненнаяСтрока.GTIN, Истина);
		
	КонецЦикла;
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Номенклатура", "ВУпаковкеРазнаяНоменклатура", 
		НоменклатураУпаковки, ВУпаковкеРазнаяНоменклатура);
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Характеристика", "ВУпаковкеРазныеХарактеристики", 
		ХарактеристикаУпаковки, ВУпаковкеРазныеХарактеристики);
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Серия", "ВУпаковкеРазныеСерии", 
		СерияУпаковки, ВУпаковкеРазныеСерии);
	
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"GTIN", "ВУпаковкеРазныйGTIN", 
		GTINУпаковки, ВУпаковкеРазныйGTIN);
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Если НЕ СтрокаДерева.ВУпаковкеРазныеХарактеристики Тогда
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
		Иначе
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
		КонецЕсли;
	ИначеЕсли НЕ СтрокаДерева.ВУпаковкеРазныйGTIN Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	Иначе
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

