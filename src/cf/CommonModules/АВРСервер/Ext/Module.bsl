
#Область ОтправкаАВР

// Создает коллекцию XML строк Invoice и коллекцию XML строк SignedContent на основе документов ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Входящий - Массив ЭСФ, на основе которых необходимо создать 
//   коллекцию XML строк Invoice и коллекцию XML строк SignedContent. 
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  КоллекцияInvoiceXML - Соответствие - Возвращаемый - Созданная коллекция XML строк Invoice.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка Invoce.
//   |- Значение - Стркоа - Созданная XML строка Invoce.
//  КоллекцияSignedContentXML - Соответствие - Возвращаемый - Созданная коллекция XML строк SignedContent.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка SignedContent.
//   |- Значение - Стркоа - Созданная XML строка SignedContent.
//
Процедура СоздатьИсходящиеAwp(Знач МассивАВР, Знач УстанавливатьПодпись, Знач ТипПодписиАВР, КоллекцияAwpXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьИсходящиеAwp(МассивАВР, УстанавливатьПодпись, ТипПодписиАВР, КоллекцияAwpXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
	
КонецПроцедуры

// Возвращает строку XML, созданную на основе XDTO объекта.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект на основе которого будет создана строка.
//  ИмяЭлемента - Строка - Имя корневого элемента создаваемой XML строки.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться при создании XML строки.
//
// Возвращаемое значение:
//  Строка - Строка, содержащая сериализованный XDTO объект.
//
// Пример:
//  InvoiceXML = СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "Invoice", ФабрикаЭСФ);
//
Функция СтрокаXMLИзОбъектаXDTO(Знач ОбъектXDTO, Знач ИмяЭлемента, Знач Фабрика) Экспорт
	
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь, Ложь); 
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписиXML); 
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяЭлемента); 	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ОбъектXDTOИзСтрокиXML(Знач СтрокаXML, Знач Фабрика) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);	
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция СписокXDTOИзОбъектXDTO(Знач ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		СписокXDTO = ОбъектXDTO;
	Иначе
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку("<parent><list></list><list></list></parent>");	
		СписокXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML).list;
		СписокXDTO.Очистить();
		СписокXDTO.Добавить(ОбъектXDTO);	
	КонецЕсли;
	
	Возврат СписокXDTO;
	
КонецФункции

// Выполняет метод syncAwp() API ИС ЭСФ.
// Записывает результаты отправки в отправляемые документы ЭСФ: идентификатор, ошибки ФЛК и т.д. 
//
// Параметры:
//  КоллекцияInvoiceXML - Соответствие - Коллекция XML строк отправляемых ЭСФ.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, на основе которого была создана XML строка.
//   |- Значение - Стркоа - XML строка Invoce.
//  КоллекцияПодписей - Соответствие - Коллекция электронных подписей, которые будут вставлены в КоллекцияInvoiceXML.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, на основе которого была создана электронная подпись.
//   |- Значение - Стркоа - Электронная подпись.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Соответствие - Результат отправки ЭСФ.
//   |- Ключ - ДокументСсылка.ЭСФ - Ссылка на отправляемый ЭСФ.
//   |- Значение - Структура - Результат отправки ЭСФ.
//       |- Номер - Строка - Номер отправленного ЭСФ.
//       |- Дата - Дата - Дата отправленного ЭСФ.
//       |- ПринятИСЭСФ - Булево - Признак того, что ЭСФ прошел первичный ФЛК и получил идентификационный номер.
//       |- Идентификатор - Строка - Идентификтаор ЭСФ, присвоенный ИС ЭСФ.
//       |- Ошибки - Массив - Массив ошибок первичного ФЛК.
//
// Примечание:
//  Если ИдентификаторСессии = Неопределено, то сессия будет автоматически открыта и закрыта в процессе выполнения функции, 
//  Если ИдентификаторСессии <> Неопределено, то будет использоваться переданный ИдентификаторСессии и сессия не будет закрыта.
//
Функция ОтправитьИсходящиеAwp(ВерсияИСЭСФ, Знач КоллекцияAwpXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОтправитьИсходящиеAwp(ВерсияИСЭСФ, КоллекцияAwpXML, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
	
КонецФункции

Функция ПроверитьВозможностьОтправкиДокументовАВР(МассивИсходящихАВР, ДополнительныеПараметры) Экспорт

	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
	
	МассивИсключаемыхАВР = Новый Массив;

	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихАВР", МассивИсходящихАВР);
	Запрос.УстановитьПараметр("УполномоченныйСотрудник", ЭСФКлиентСерверПереопределяемый.ТекущийПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументАВР.Ссылка КАК АВР,
		|	ДокументАВР.Состояние КАК СостояниеАВР,
		|	&УполномоченныйСотрудник КАК УполномоченныйСотрудник
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот КАК ДокументАВР
		|ГДЕ
		|	ДокументАВР.Ссылка В (&МассивИсходящихАВР)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		// Проверить Состояние документа ЭСФ.
		Если НЕ (ВыборкаДетальныеЗаписи.СостояниеАВР = Перечисления.СостоянияАВР.Сформирован
			ИЛИ ВыборкаДетальныеЗаписи.СостояниеАВР = Перечисления.СостоянияАВР.ОтклоненСервером) Тогда
			
			МассивИсключаемыхАВР.Добавить(ВыборкаДетальныеЗаписи.АВР);
			
			ТекстСообщения = НСтр("ru = 'Документ %1 исключен из пакета отправки, так как является отправленным'");	
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.АВР);
						
			СообщениеПользователю.Текст = ТекстСообщения;
			СообщениеПользователю.Сообщить();
						
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаАВР Из МассивИсключаемыхАВР Цикл
		
		ИндексСтроки = МассивИсходящихАВР.Найти(СтрокаАВР);
		
		Если НЕ ИндексСтроки = Неопределено Тогда
			
			МассивИсходящихАВР.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИсходящихАВР.Количество() > 0;
	
КонецФункции

// Заполняет документ ЭСФ на основании документа СчетФактураВыданный.
//
// Параметры:
//  СсылкаДокументОснование - ОпределяемыйТип.ПервичныеДокументыАВР -
//   Документ, на основании которого необходимо заполнить ЭАВР.
//  ОбъектАВР - ДокументОбъект.ЭлектронныйАктВыполненныхРабот - ЭАВР, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийАВР(Знач СсылкаДокументОснование, ОбъектАВР) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьИсходящийАВР(СсылкаДокументОснование, ОбъектАВР);
	
КонецПроцедуры


#КонецОбласти 

#Область ПолучениеАВР

// Выполняет метод queryUpdate API ИС ЭСФ.
// Обновляет существующие и создает новые документы АВР, заполняет ссылочные реквизиты.
// Сохраняет lastEventId и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление получаемых ЭСФ.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭСФ будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭСФ, создаст новые ЭСФ, создаст и обновит присоединенные файлы ЭСФ.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых ЭСФ.
//
Функция ПолучитьНовыеАВР(ПараметрыВыгрузки) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьНовыеАВР(ПараметрыВыгрузки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет новый элемент в СписокXDTO и возвращает его.
//
// Параметры:
//  СписокXDTO - СписокXDTO - Список, в который необходимо добавить новый элемент.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания нового элемента списка.
//  Значение - Произвольный - Значение которое будет установлено для добавленного элемента.
//                            Если не задано, то будет добавлен пустой элемент.
//
// Возвращаемое значение:
//  ЗначениеXDTO, ОбъектXDTO - Добавленный элемент.
//
// Пример:
//  seller = НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
//
Функция НовыйЭлементСпискаXDTO(Знач СписокXDTO, Знач Фабрика, Знач Значение = Неопределено) Экспорт
	
	ТипЭлемент = СписокXDTO.ВладеющееСвойство.Тип;
	Элемент = Фабрика.Создать(ТипЭлемент);
	
	Если Значение <> Неопределено Тогда
		Элемент = Значение;
	КонецЕсли;
	
	Возврат СписокXDTO.Добавить(Элемент);
	
КонецФункции

// Создает новый ОбъектXDTO, устанавливает его как свойство Владельца, возвращает созданный ОбъектXDTO.
//
// Параметры:
//  Владелец - ОбъектXDTO - Объект, для которого будет установлено свойство.
//  ИмяСвойства - Строка - Имя свойства, в которое необходимо записать созданный ОбъектXDTO.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания нового ОбъектXDTO.
//
// Возвращаемое значение:
//  ОбъектXDTO - Новый ОбъектXDTO, установленный как свойство Вледельца.
//
// Пример:
//  sellers = НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
//
Функция НовоеСвойствоОбъектаXDTO(Знач Владелец, Знач ИмяСвойства, Знач Фабрика) Экспорт
	
	ТипСвойство = Владелец.Тип().Свойства.Получить(ИмяСвойства).Тип;
	Свойство = Фабрика.Создать(ТипСвойство);
	
	Владелец.Установить(ИмяСвойства, Свойство); 
	
	Возврат Свойство;
	
КонецФункции

Функция СостояниеАВР(АВР) Экспорт
	
	Если АВР.Статус = Перечисления.СтатусыАВР.ПустаяСсылка()
		И ЗначениеЗаполнено(АВР.Идентификатор)
		И АВР.Ошибки.Количество() = 0 Тогда
		
		Состояние = Перечисления.СостоянияАВР.ОбрабатываетсяСервером;
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.ПустаяСсылка()
		ИЛИ АВР.Статус = Перечисления.СтатусыАВР.Черновик
		ИЛИ АВР.Статус = Перечисления.СтатусыАВР.Импортированный Тогда
		
		Состояние = Перечисления.СостоянияАВР.Сформирован;
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.Ошибочный
		ИЛИ АВР.Ошибки.Количество() <> 0 Тогда
		
		Состояние = Перечисления.СостоянияАВР.ОтклоненСервером;
		
	ИначеЕсли АВР.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И АВР.Статус = Перечисления.СтатусыАВР.Непросмотренный Тогда
		
		Состояние = Перечисления.СостоянияАВР.ПринятСервером;
		
	ИначеЕсли АВР.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И АВР.Статус = Перечисления.СтатусыАВР.Доставленный Тогда
		
		Состояние = Перечисления.СостоянияАВР.ДоставленПолучателю;
		
	ИначеЕсли АВР.Направление = Перечисления.НаправленияЭСФ.Входящий
		И (АВР.Статус = Перечисления.СтатусыАВР.Непросмотренный 
		ИЛИ АВР.Статус = Перечисления.СтатусыАВР.Доставленный) Тогда
		
			Состояние = Перечисления.СостоянияАВР.ПринятОтПоставщика;
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.Отозванный Тогда
		
		Состояние = Перечисления.СостоянияАВР.Отозван;
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.Отклоненный Тогда
		
		Состояние = Перечисления.СостоянияАВР.ОтклоненПолучателем;		
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.НаСтадииРасторжения Тогда
		
		Состояние = Перечисления.СостоянияАВР.НаходитсяНаСтадииРасторжения;		
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.Расторженный Тогда
		
		Состояние = Перечисления.СостоянияАВР.Расторжен;
		
	ИначеЕсли АВР.Статус = Перечисления.СтатусыАВР.Подтвержденный Тогда
		
		Состояние = Перечисления.СостоянияАВР.ПодтвержденПолучателем;
	
	Иначе
		
		Состояние = Перечисления.СостоянияАВР.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция РазрешенныеДействияПоСтатусамАВР(Знач Направление) Экспорт
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда	
		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонить
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		
		//Расторжение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеРасторжение(), СоответствиеДоступностиДействия);	
		
		//Подтверждение расторжения
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеПодтверждениеРасторжения(), СоответствиеДоступностиДействия);	
		
		//Отклонение расторжения
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтклонениеРасторжения(), СоответствиеДоступностиДействия);	
		
	//Для входящих	
Иначе
	
	//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонить
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	
		
		//расторжение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеРасторжение(), СоответствиеДоступностиДействия);	
		
		
		//Подтверждение расторжения
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеПодтверждениеРасторжения(), СоответствиеДоступностиДействия);	
		
		//Отклонение расторжения
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Непросмотренный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Доставленный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Подтвержденный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отклоненный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Отозванный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.НаСтадииРасторжения, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Расторженный		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Черновик			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Созданный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Импортированный	, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Ошибочный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.Удаленный			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыАВР.ПустаяСсылка()		, Ложь);
		
		РазрешенныеДействия.Вставить(АВРКлиентСервер.ДействиеОтклонениеРасторжения(), СоответствиеДоступностиДействия);	
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

#КонецОбласти

#Область ИзменениеСтатусаАВР

// Выполняет методы ИС ЭСФ для изменения статусов, например: declineInvoiceById, revokeInvoiceById и т.д..
// Обновляет документы ЭСФ. Возвращает результат работы выполненного метода.
//
// Параметры:
//  Действие - Строка - Определяет, какой метод ИС ЭСФ будет выполняться.
//   Должно быть ЭСФКлиентСервер.ДействиеОтзыв() или ЭСФКлиентСервер.ДействиеОтклонение().
//  ТекстЗапроса - Строка - Текст XML запроса на изменение статусов, 
//   формируется функцией ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов().
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ - Профиль для установки сессии с ИС ЭСФ.
//  ИдентификаторСессии - Строка - Идентификатор сессии, для выполения запроса к ИС ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Результат выполнения метода ИС ЭСФ. Содержит данные по всем идентификаторам из ТекстЗапроса.
//   |- Ключ - Строка - Идентификатор ЭСФ, для которого изменялся статус.
//   |- Значение - Структура - Результат изменения статуса.
//       |- СтатусИзменился - Булево - Признак того, что выполненный запрос изменил статус ЭСФ.
//       |- ТекущийСтатус - Структура, Неопределено - Текущий статус ЭСФ. См. Обработки.ОбменЭСФ.ДанныеСтатусаInvoice(). 
//           Если в ИС ЭСФ нет ЭСФ с идентификатором из поля Ключ, то имеет значение Неопределено. 
//
Функция ВыполнитьЗапросНаИзменениеСтатусов(Знач Действие, Знач ТекстЗапроса, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено, Знач СоответствиеПодписейАВР = Неопределено) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ВыполнитьЗапросНаИзменениеСтатусовАВР(Действие, ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии, СоответствиеПодписейАВР);
	
КонецФункции

// Возвращает текст XML запроса для изменения статуса ЭСФ,
// а также текст для формирования подписи запроса.
//
// Параметры:
//  Действие - Строка - Определяет, какой запрос будет создан.
//   Должно быть ЭСФКлиентСервер.ДействиеОтзыв() или ЭСФКлиентСервер.ДействиеОтклонение().
//  КоллецияДляИзмененияСтатусов - Соответствие - Данные для формирования запроса:
//   |- Ключ - Строка - Идентификатор ЭСФ, у которого будет изменен статус.
//   |- Значение - Строка - Причина изменения статуса.
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//
// Возвращаемое значение:
//  Структура - Сформированный запрос на изменение статуса.
//   |- ТекстЗапроса - Строка - Текст запроса на изменение статуса.
//   |- СтрокаДляПодписи - Строка - Строка, на основе которой будет сформирована ЭЦП запроса.
//
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеКлючаЭЦП, ТипПодписиЭСФ) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьЗапросНаИзменениеСтатусовАВР(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ТипПодписиЭСФ);
	
КонецФункции

#КонецОбласти

#Область ДанныеДляЗаполненияАВР

Функция ПолучитьСтруктуруДанныхЗаполнения() Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Реквизиты", ПолучитьСтруктуруДанныхРеквизитов());
	ДанныеЗаполнения.Вставить("СтруктураДанныхПоставщики", ПолучитьСтруктуруДанныхПоставщикиПолучатели());
	ДанныеЗаполнения.Вставить("СтруктураДанныхПолучатели", ПолучитьСтруктуруДанныхПоставщикиПолучатели("Получатель"));
	ДанныеЗаполнения.Вставить("Услуги", ПолучитьСтруктуруТаблицыУслуги());
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхРеквизитов()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Организация");
	Реквизиты.Вставить("ДатаВыполненияРабот");
	Реквизиты.Вставить("Номер");
	Реквизиты.Вставить("Контрагент");
	Реквизиты.Вставить("Договор");
	Реквизиты.Вставить("НомерДоговора");
	Реквизиты.Вставить("ДатаДоговора");
	Реквизиты.Вставить("Валюта");
	Реквизиты.Вставить("КодВалюты");
	Реквизиты.Вставить("КурсВалюты");
	Реквизиты.Вставить("Направление");
	Реквизиты.Вставить("БанковскийСчетОрганизации");
	Реквизиты.Вставить("БанковскийСчетКонтрагента");
	Реквизиты.Вставить("СтруктурноеПодразделение");
	Реквизиты.Вставить("Поставщик");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПолучитьСтруктуруДанныхПоставщикиПолучатели(ПоставщикПолучатель = "Поставщик")
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить(ПоставщикПолучатель);
	СтруктураДанных.Вставить(ПоставщикПолучатель + "Наименование");
	СтруктураДанных.Вставить(ПоставщикПолучатель + "Идентификатор");
	СтруктураДанных.Вставить("Адрес");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС");
	СтруктураДанных.Вставить("КБе");
	СтруктураДанных.Вставить("БанковскийСчет");
	СтруктураДанных.Вставить("ИИК");
	СтруктураДанных.Вставить("НаименованиеБанка");
	СтруктураДанных.Вставить("БИК");
	СтруктураДанных.Вставить("ТипРегистрации");
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьСтруктуруТаблицыУслуги()
	
	Услуги = Новый ТаблицаЗначений;
	
	Услуги.Колонки.Добавить("Номенклатура",                       Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.НоменклатураЭСФ.Тип));
	Услуги.Колонки.Добавить("УслугаНаименование",                 Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(400)));
	Услуги.Колонки.Добавить("ЕдиницаИзмерения",                   Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ЕдиницаИзмеренияЭСФ.Тип));
	Услуги.Колонки.Добавить("ЕдиницаИзмеренияКод",                Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	Услуги.Колонки.Добавить("ЕдиницаИзмеренияНаименование",       Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	Услуги.Колонки.Добавить("Количество",                         Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	Услуги.Колонки.Добавить("Цена",                               Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Услуги.Колонки.Добавить("СтоимостьБезУчетаКосвенныхНалогов",  Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Услуги.Колонки.Добавить("РазмерОборота",                      Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Услуги.Колонки.Добавить("СтавкаНДС",                          Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СтавкаНДСЭСФ.Тип));
	Услуги.Колонки.Добавить("СуммаНДС",                           Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Услуги.Колонки.Добавить("СтоимостьСУчетомКосвенныхНалогов",   Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	Услуги.Колонки.Добавить("СтавкаНДСЧисло",                     Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	Услуги.Колонки.Добавить("БезНДС",                             Новый ОписаниеТипов("Булево"));
	
	Возврат Услуги;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляЗаполненияПервичныхДокументовИзАВР

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументовИзАВР(ОбъектАВР) Экспорт
	
	МетаданныеОпределяемыеТипы = Метаданные.ОпределяемыеТипы;
	
	Реквизиты = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	//Массив.Добавить(Тип("СправочникСсылка.Организации"));	
	//ОписаниеТиповОрганизация = Новый ОписаниеТипов(Массив);
	ОписаниеТиповОрганизация = МетаданныеОпределяемыеТипы.ОрганизацияЭСФ.Тип;
	ОписаниеТиповДоговор     = МетаданныеОпределяемыеТипы.ДоговорКонтрагентаЭСФ.Тип;
	ОписаниеТиповВалюта      = МетаданныеОпределяемыеТипы.ВалютаЭСФ.Тип;
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));	
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));	
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));	
	ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();

	Реквизиты.Колонки.Добавить("Организация" , ОписаниеТиповОрганизация);
	Реквизиты.Колонки.Добавить("Договор"     , ОписаниеТиповДоговор);
	Реквизиты.Колонки.Добавить("Дата"        , ОписаниеТиповДата);
	Реквизиты.Колонки.Добавить("Валюта"      , ОписаниеТиповВалюта);
	Реквизиты.Колонки.Добавить("КурсВалюты"  , ОписаниеТиповЧисло);
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = ОбъектАВР.Организация;
	НоваяСтрока.Договор     = ОбъектАВР.Договор;
	НоваяСтрока.Дата        = ОбъектАВР.Дата;
	НоваяСтрока.Валюта      = ОбъектАВР.Валюта;
	НоваяСтрока.КурсВалюты  = ОбъектАВР.КурсВалюты;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОбъектАВР.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйАктВыполненныхРаботУслуги.Номенклатура,
	|	ЭлектронныйАктВыполненныхРаботУслуги.УслугаНаименование,
	|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмерения,
	|	ЭлектронныйАктВыполненныхРаботУслуги.Количество,
	|	ЭлектронныйАктВыполненныхРаботУслуги.Цена,
	|	ЭлектронныйАктВыполненныхРаботУслуги.РазмерОборота,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СтоимостьБезУчетаКосвенныхНалогов,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СтавкаНДС,
	|	ЭлектронныйАктВыполненныхРаботУслуги.СуммаНДС
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот.Услуги КАК ЭлектронныйАктВыполненныхРаботУслуги
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка = &Ссылка";

	ТаблицаУслуги = Запрос.Выполнить().Выгрузить();	
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектАВР.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйАктВыполненныхРаботПоставщики.Поставщик
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот.Поставщики КАК ЭлектронныйАктВыполненныхРаботПоставщики
	|ГДЕ
	|	ЭлектронныйАктВыполненныхРаботПоставщики.Ссылка = &Ссылка
	|	И ЭлектронныйАктВыполненныхРаботПоставщики.Поставщик ССЫЛКА Справочник.Контрагенты";

	ТаблицаПоставщики = Запрос.Выполнить().Выгрузить();	

	ДанныеДляЗаполнения = Новый Структура;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаРеквизиты" , Реквизиты);
	ДанныеДляЗаполнения.Вставить("ТаблицаУслуги"    , ТаблицаУслуги);
	ДанныеДляЗаполнения.Вставить("ТаблицаПоставщики", ТаблицаПоставщики);

	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область РаботаСПервичнымиДокументами

Процедура ОбновитьСвязанныеДокументы(ОбъектАВР) Экспорт
	
	Если ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И ОбъектАВР.Статус = Перечисления.СтатусыАВР.Подтвержденный
		И ЗначениеЗаполнено(ОбъектАВР.ДокументОснование)
		И ЗначениеЗаполнено(ОбъектАВР.ДатаПринятияСтатуса) Тогда
		
		АВРСерверПереопределяемый.ОбновлениеДанныхПервичныхДокументов(ОбъектАВР);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗавершениеОбновления = Ложь;
	АВРСерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления);
	Если ЗавершениеОбновления Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.0.9";
	Обработчик.Процедура           = "АВРСервер.ЗаполнитьАвтораИКонтрагента";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
		
КонецПроцедуры

Процедура ЗаполнитьАвтораИКонтрагента(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	Если Параметры.Свойство("МассивОбработанныхАВР") Тогда
		МассивОбработанныхАВР = Параметры.МассивОбработанныхАВР;
	Иначе
		МассивОбработанныхАВР = Новый Массив;
		Параметры.Вставить("МассивОбработанныхАВР", МассивОбработанныхАВР);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЭАВР.Ссылка
	|ИЗ
	|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭАВР
	|ГДЕ
	|	НЕ ЭАВР.Ссылка В (&МассивОбработанныхАВР)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭАВР.Дата
	|";
	
	Запрос.УстановитьПараметр("МассивОбработанныхАВР", МассивОбработанныхАВР);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	ОбъектовОбработано = 0;
	Пока Выборка.Следующий() Цикл
		
		МассивОбработанныхАВР.Добавить(Выборка.Ссылка);
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			//при записи автоматом заполнятся Автор и Контрагент
			ДокументОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='При записи документа %1 произошла ошибка: %2'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументОбъект, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
	КонецЦикла;
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + Выборка.Количество();;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаСоздатьЭлектронныйДокументАВР

Функция ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(ПараметрКоманды) Экспорт

	//Проверить на наличие ранее созданных ЭАВР
	ПараметрыДляВыполненияКоманды = Новый Структура;
	ПараметрыДляВыполненияКоманды.Вставить("МассивыОбрабатываемыхДокументов", АВРСерверПереопределяемый.ПроверитьНаличиеРанееВведеныхЭАВР(ПараметрКоманды));
	ПараметрыДляВыполненияКоманды.Вставить("ПараметрКоманды" , ПараметрКоманды);
	
	Возврат ПараметрыДляВыполненияКоманды;
	
КонецФункции

#КонецОбласти
