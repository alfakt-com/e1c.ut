
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверяет корректность заполнения ЭСФ и показывает сообщения.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПроверитьИсходящиеЭСФ(МассивИсходящихЭСФ);
		
КонецПроцедуры

// Выполняет методы syncInvoice() API ИС ЭСФ.
// Если отправляются исправленные ЭСФ, то дополнительно выполняет метод еrevokeInvoiceById() API ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  См. ЭСФСервер.ОтправитьИсходящиеInvoice().
//
Процедура ОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет Выгрузку данных ЭСФ в XML-файл
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо выгрузить в XML файл.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
Процедура ВыгрузитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыгрузитьИсходящиеЭСФ(МассивИсходящихЭСФ);
		
КонецПроцедуры

Процедура ОбновитьИОтправитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьИОтправитьИсходящиеЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// См. ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам()
Процедура ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивЭСФ, Знач НаправлениеЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьСтатусыЭСФПоИдентификаторам(МассивЭСФ, НаправлениеЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыЭСФИзИСЭСФ(МассивЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФПоНомеруИДате(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(МассивЭСФ, ДополнительныеПараметры);
	
КонецПроцедуры

// Устанавливает надпись "Электронно" или "Бумажно" в колонках "Отправлен" или "Получен".
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформление строк табличного поля.
//
Процедура УстановитьПредставлениеСпособаОбменаПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок)
	
	ЭСФКлиентПереопределяемый.УстановитьПредставлениеСпособаОбменаПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);

КонецПроцедуры

// Заполняет колонку "Состояние ЭСФ" текущим состоянием связанного ЭСФ.
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформление строк табличного поля.
//
Процедура ЗаполнитьКолонкуСостояниеЭСФПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок)
	
	Если НЕ СписокСчетовФактур.Колонки.СостояниеЭСФ.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиСпособОбмена = ?(ЭтоСчетФактураВыданный, "СпособВыставления", "СпособПолучения");
	ВидимостьКолонкиСпособОбмена = СписокСчетовФактур.Колонки[ИмяКолонкиСпособОбмена].Видимость;
	
	// Заполнить массив данных счетов-фактур.
	МассивДанныхСчетовФактур = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("СчетФактура", ОформлениеСтроки.ДанныеСтроки.Ссылка);
		Если ВидимостьКолонкиСпособОбмена Тогда
			ДанныеСчетаФактуры.Вставить("СпособОтправкиПолучения", ОформлениеСтроки.ДанныеСтроки[ИмяКолонкиСпособОбмена]);
		Иначе
			ДанныеСчетаФактуры.Вставить("СпособОтправкиПолучения", ОформлениеСтроки.ДанныеСтроки.Ссылка[ИмяКолонкиСпособОбмена]);	
		КонецЕсли;
		МассивДанныхСчетовФактур.Добавить(ДанныеСчетаФактуры);
	КонецЦикла;
	
	// Получить состояния связанных документов ЭСФ.
	КоллекцияСостоянийЭСФ = ЭСФВызовСервера.НоваяКоллекцияСостоянийЭСФ(МассивДанныхСчетовФактур);
	
	// Заполнить колонку "Состояние ЭСФ".
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.СостояниеЭСФ.ОтображатьТекст = Истина;
		СостояниеЭСФ = КоллекцияСостоянийЭСФ.Получить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
		Если СостояниеЭСФ <> Неопределено Тогда 
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.Текст = СостояниеЭСФ.Представление;
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветСостоянияЭСФ(СостояниеЭСФ.Состояние); 
		Иначе
			ОформлениеСтроки.Ячейки.СостояниеЭСФ.Текст = "";	
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихЭСФ() Экспорт
	СписокЭСФ(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий"));	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихЭСФ() Экспорт
	СписокЭСФ(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));	
КонецПроцедуры

// Заполняет массив профилей и паролей доступа к ИС ЭСФ в разрезе организаций
// если не хватает данных, то будем отображать форму ввода данных пользователю
Функция ПолучитьНастройкиПараметровИСЭСФ(Знач КоллекцияСгруппированныхЭСФ) Экспорт
	
	// Использовать текущего пользователя ИБ, если он не задан явно.
	ПользовательИБ = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();	
	
	НеобходимоВводДанныхПользователем = Ложь;

	СоответствиеОрганизацийИНастроек = Новый Соответствие;
	
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		МассивПрофилейИСЭСФ = ЭСФВызовСервераПовтИсп.ПрофилиИСЭСФ(СтруктурнаяЕдиница, Неопределено, ПользовательИБ);
		ПрофильИСЭСФ = Неопределено;

		Если МассивПрофилейИСЭСФ.Количество() > 1 Тогда
			НеобходимоВводДанныхПользователем = Истина;
		ИначеЕсли МассивПрофилейИСЭСФ.Количество() = 1 Тогда
			ПрофильИСЭСФ = МассивПрофилейИСЭСФ[0];
			ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);
			Если НЕ ЗначениеЗаполнено(ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации) Тогда
				ПарольИСЭСФСеанса = ЭСФКлиент.ПолучитьСеансовыеДанные(ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ(), ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.ПользовательИСЭСФ, "");
				Если ЗначениеЗаполнено(ПарольИСЭСФСеанса) Тогда
					НеобходимоВводДанныхПользователем = Ложь;	
					СоответствиеОрганизацийИНастроек.Вставить(СтруктурнаяЕдиница, Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, ПарольИСЭСФСеанса));
				Иначе
					НеобходимоВводДанныхПользователем = Истина;	
				КонецЕсли;
			Иначе
				СоответствиеОрганизацийИНастроек.Вставить(СтруктурнаяЕдиница, Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации));
			КонецЕсли;
		Иначе
			
			// если не назначен профиль ЭСФ для отправки, то необходимо очистить очередь, тк далее вызываем исключение
			Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
				ЭСФВызовСервера.ОчиститьОчередьОтправкиЭСФ(СгруппированныеЭСФ.Значение);
				ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), СгруппированныеЭСФ.Значение);
			КонецЦикла;
			
			Текст = НСтр("ru = 'Невозможно выполнить действие, т.к. для пользователя ""%ПользовательИБ%"" не задан профиль ИС ЭСФ для работы с предприятием ""%СтруктурнаяЕдиница%"".'");
			Текст = СтрЗаменить(Текст, "%ПользовательИБ%", 		ПользовательИБ);
			Текст = СтрЗаменить(Текст, "%СтруктурнаяЕдиница%", 	СтруктурнаяЕдиница);
			ВызватьИсключение Текст;
		КонецЕсли;
		
	КонецЦикла;

	Если НеобходимоВводДанныхПользователем Тогда
		СоответствиеОрганизацийИНастроек = Неопределено;
	КонецЕсли;
	
	Возврат СоответствиеОрганизацийИНастроек;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Обработчики команд подменю ЭСФ в формах счетов-фактур

// Открывает формы создания новых ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СоздатьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьЭСФ(Параметр);
	
КонецПроцедуры

// Перезаполняет актуальные ЭСФ, связанные со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ПерезаполнитьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПерезаполнитьЭСФ(Параметр);
	
КонецПроцедуры

Процедура ОбновитьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму отзыва актуальных ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ОтозватьЭСФ(Знач Параметр, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтозватьЭСФ(Параметр, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовЭСФ(Знач Действие, Знач МассивЭСФ, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовЭСФ(Действие, МассивЭСФ, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Процедура ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ВводДанныхИСЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФормуМодально(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ВводДанныхИСЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьФормуОчередиЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ОчередьОтправкиЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФорму(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ОчередьОтправкиЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

// Открывает формы актуальных ЭСФ, связанных со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура ОткрытьЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму, в которой отображаются ЭСФ, связанные со счетами-фактурами.
//
// Параметры:
//  Параметр - См. ЭСФКлиент.МассивСчетовФактур().
//
Процедура СвязанныеЭСФ(Знач Параметр) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СвязанныеЭСФ(Параметр);
	
КонецПроцедуры

// Открывает форму списка документов ЭСФ.
//
// Параметры:
//  Направление - ПеречислениеСсылка.НаправленияЭСФ, Неопределено - 
//   Влияет на то, какая страница будет видима в форме списка.
//   Если не задан, то будут видимы обе страницы.
//
Процедура СписокЭСФ(Знач Направление = Неопределено) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокЭСФ(Направление);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий, в формах счетов-фактур

// Обработчик события ПередЗаписью формы счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма документа счета-фактуры.
//
Процедура ФормаСчетаФактурыПередЗаписью(Форма, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Ложь;
	
	Если Ссылка.Пустая() И ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
		
		ЭСФ_СчетФактура = ЭСФВызовСервера.ПолучитьЗначениеРеквизита(Форма.РеквизитыЭСФ.СсылкаЭСФ, "СчетФактура");
		
		Если НЕ ЗначениеЗаполнено(ЭСФ_СчетФактура) Тогда
			
			Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Истина;
			
		ИначеЕсли ЭСФ_СчетФактура <> Ссылка Тогда
			
			Форма.РеквизитыЭСФ.ЗаписатьЭСФ = Истина;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПослеЗаписи формы счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма документа счета-фактуры.
//
Процедура ФормаСчетаФактурыПослеЗаписи(Форма) Экспорт
	
	Если Форма.РеквизитыЭСФ.ЗаписатьЭСФ Тогда
		ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ(), Форма.РеквизитыЭСФ.СсылкаЭСФ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку ЭСФ в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой была нажата гиперссылка ЭСФ.
//
Процедура ПредставлениеЭСФНажатие(Форма) Экспорт
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
		
		ПоказатьЗначение(, Форма.РеквизитыЭСФ.СсылкаЭСФ);
		
	ИначеЕсли ТипЗнч(Ссылка) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный() Тогда
		
		СоздатьЭСФ(Форма); 
		
	ИначеЕсли ТипЗнч(Ссылка) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный() Тогда
		
		Если ДокументЗаписан(Форма) Тогда
			
			//++ НЕ ЭСФ
			НайденныеДокументыЭДВС = ЭСФВызовСервера.НаличиеЭДВС(Ссылка);

			Если НайденныеДокументыЭДВС.Количество() > 0 Тогда	
				
				Для Каждого НайденныйДокумент Из НайденныедокументыЭДВС Цикл
					ТекстОшибки = НСтр("ru='На основании учетного документа уже введен %1. Рекомендуем отвязать ЭДВС от документа ""%2"", в противном случае образуются некорректные остатки!'");
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НайденныйДокумент, ЭСФКлиентПереопределяемый.ИмяДокументаПоступленияТоваровУслуг());
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
				КонецЦикла;
			Иначе
			//-- НЕ ЭСФ	
				ПараметрыФормы = Новый Структура;
				
				СтруктураОтборов = ЭСФВызовСервера.НовыйОтборФормыВыбораЭСФ(Ссылка);
				ПараметрыФормы.Вставить("Отбор", СтруктураОтборов.Отбор);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", СтруктураОтборов.ПользовательскиеНастройки);
				ОткрытьФорму("Документ.ЭСФ.ФормаВыбора", ПараметрыФормы, Форма);
			//++ НЕ ЭСФ	
			КонецЕсли;			
			//-- НЕ ЭСФ
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой обрабатывается выбор.
//
Процедура ПредставлениеЭСФОбработкаВыбора(Форма, ЗначениеВыбора, Источник) Экспорт
	
	ЭСФ = ЗначениеВыбора;
	
	Если ТипЗнч(ЭСФ) <> Тип("ДокументСсылка.ЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если ЭСФКлиентСерверПереопределяемый.ЭтоДокументСсылкаСчетФактураПолученный(ТипЗнч(СчетФактура)) Тогда	
		ЭСФВызовСервера.СвязатьЭСФСоСчетомФактурой(СчетФактура, ЭСФ);
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку "Сторно" в форме счета-фактуры.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой была нажата гиперссылка "Сторно".
//
Процедура ПредставлениеСторноНажатие(Форма) Экспорт
	
	СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Форма.РеквизитыЭСФ.МассивСторнирований.Количество() = 0 Тогда
		ЭСФКлиентПереопределяемый.ОткрытьФормуНовогоСторнирующегоДокумента(СчетФактура);
	ИначеЕсли Форма.РеквизитыЭСФ.МассивСторнирований.Количество() = 1 Тогда
		ПоказатьЗначение(, Форма.РеквизитыЭСФ.МассивСторнирований[0]);
	ИначеЕсли Форма.РеквизитыЭСФ.МассивСторнирований.Количество() > 1 Тогда
		ОткрытьФормуСпискаСторнирований(СчетФактура);	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения в формах списков и выбора счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма списка или выбора счета-фактуры, в которой обрабатывается оповещение.
//  ИмяТаблицы - Строка - Имя элемента управления, в котором необходимо обновить строки.
//
Процедура СписокСчетовФактурОбработкаОповещения(Форма, ИмяТаблицы, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ() Тогда
		
		Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
			Форма.ЭлементыФормы[ИмяТаблицы].ОбновитьСтроки();
		Иначе
			Форма.Элементы[ИмяТаблицы].Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриПолученииДанных списка счетов-фактур.
// Заполняет колонки Способ<Выставления/Получения> и СостояниеЭСФ.
//
// Параметры:
//  ЭтоСчетФактураВыданный - Булево - Истина - Выданный, Ложь - Полученный.
//  СписокСчетовФактур - ТабличноеПоле - Табличное поле счетов-фактур.
//  ОформленияСтрок - ОформленияСтрок - Оформления строк, которые будут заполнены.
//
Процедура СписокСчетовФактурПриПолученииДанных(Знач ЭтоСчетФактураВыданный, Знач СписокСчетовФактур, ОформленияСтрок) Экспорт
	
	УстановитьПредставлениеСпособаОбменаПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);	
	ЗаполнитьКолонкуСостояниеЭСФПриПолученииДанных(ЭтоСчетФактураВыданный, СписокСчетовФактур, ОформленияСтрок);
	
КонецПроцедуры

Процедура ПослеЗаписиСторнирующегоДокумента(Форма) Экспорт
	
	Оповестить(ЭСФКлиентСервер.ИмяСобытияЗаписьСторно());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов()
Функция ИзменитьСтатусыЭСФ(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыЭСФ(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с паролями

// Возврашает пароль аутентификации ИС ЭСФ.
//
// Если пароль указан в элементе справочника, то возвращает его.
//
// Если пароль сохранен в сеансовых данных и в форме ввода пароля,   
// для этого пользователя, был установлен флажок НеПоказыватьНаВремяСеанса,
// тогда пароль будет получен из сеасновых данных.
//
// Если пароля нет в сеансовых данных или он есть, но в форме ввода пароля,
// для этого пользователя, снят флажок НеПоказыватьНаВремяСеанса,
// то будет открыта форма ввода пароля.
//
// Параметры:
//  ОбработчикОповщенияВыбораДанных
//  ПользователиИСЭСФ - Массив - Пользователи ИС ЭСФ, для которого необходимо получить пароль.
//
// Возвращаемое значение:
//  Строка, Неопределено - Пароль аутентификации ИС ЭСФ.
//   Если пароль найден или введен пользователем, то Строка.
//   Если пользователь отказался от ввода пароля, закрыв форму ввода пароля, то Неопределено. 
//
Процедура ПаролиАутентификации(ОбработчикОповщенияВыбораДанных, ПользователиИСЭСФ, ВызвавшийМодуль = Неопределено) Экспорт
	
	ПользователиПарольИСЭСФ = Новый Соответствие;
	
	МассивПользователейБезПаролей = Новый Массив;
	
	Для Каждого ПользовательИСЭСФ Из ПользователиИСЭСФ Цикл
		
		Пароль = ЭСФВызовСервераПовтИсп.ПарольАутентификации(ПользовательИСЭСФ);
		
		Если ПустаяСтрока(Пароль) Тогда
			
			ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ();
			Пароль = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ПользовательИСЭСФ, "");
			
			ИмяСеансовыхДанных = ЭСФКлиент.ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации();
			ПоказыватьФормуВводаПароляАутентификации = ЭСФКлиент.ПолучитьСеансовыеДанные(ИмяСеансовыхДанных, ПользовательИСЭСФ, Истина);
			
			Если ПустаяСтрока(Пароль) ИЛИ ПоказыватьФормуВводаПароляАутентификации Тогда
				МассивПользователейБезПаролей.Добавить(ПользовательИСЭСФ);	
			КонецЕсли;
			
		КонецЕсли;
		
		ПользователиПарольИСЭСФ.Вставить(ПользовательИСЭСФ, Пароль);
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	// передаем все данные учетных записей
	ПараметрыФормы.Вставить("СписокПользователейИСЭСФ", ПользователиИСЭСФ);
	ПараметрыФормы.Вставить("ВызвавшийМодуль", ВызвавшийМодуль);	
	
	Если МассивПользователейБезПаролей.Количество() > 0 Тогда
		
		ЭСФКлиент.ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповщенияВыбораДанных, ПараметрыФормы);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработчикОповщенияВыбораДанных, ПользователиПарольИСЭСФ);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с данными подсистемы, сохраняемыми на время текущего сеанса

Процедура СохранитьСеансовыеДанные(Знач Имя, Знач Параметр, Знач Значение) Экспорт
	
	ИнициализироватьСеансовыеДанные();	
	СеансовыеДанныеЭСФ[Имя].Вставить(Параметр, Значение);
	
КонецПроцедуры

Процедура УдалитьСеансовыеДанные(Знач Имя, Знач Параметр) Экспорт
	
	ИнициализироватьСеансовыеДанные();
	СеансовыеДанныеЭСФ[Имя].Удалить(Параметр);
	
КонецПроцедуры

Функция ПолучитьСеансовыеДанные(Знач Имя, Знач Параметр, Знач ПустоеЗначение = Неопределено) Экспорт
	
	ИнициализироватьСеансовыеДанные();
	
	Значение = СеансовыеДанныеЭСФ[Имя][Параметр];
	
	Если Значение = Неопределено Тогда
		Значение = ПустоеЗначение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП() Экспорт 
	Возврат "ПарольКлючевогоКонтейнераЭЦП";
КонецФункции

Функция ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ() Экспорт
	Возврат "ПарольАутентификацииИСЭСФ";	
КонецФункции

Функция ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации() Экспорт
	Возврат "ПоказыватьФормуВводаПароляАутентификации";	
КонецФункции

Функция ИмяСеансовыхДанныхКлючBase64() Экспорт
	Возврат "КлючBase64"; // Ключ ЭЦП в формате Base64.	
КонецФункции

Функция ИнициализироватьСеансовыеДанные()
	
	Если СеансовыеДанныеЭСФ = Неопределено Тогда
		СеансовыеДанныеЭСФ = Новый Структура;
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПарольКлючевогоКонтейнераЭЦП(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПарольАутентификацииИСЭСФ(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхПоказыватьФормуВводаПароляАутентификации(), Новый Соответствие);
		СеансовыеДанныеЭСФ.Вставить(ИмяСеансовыхДанныхКлючBase64(), Новый Соответствие);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события, ЭСФКлиентСервер.ИмяСобытия<Имя>().
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемыЭСФ() Экспорт
	
	Попытка
		
		Параметры = ЭСФВызовСервера.ПараметрыПриНачалеРаботыСистемы();
		
		Если Параметры[ЭСФКлиентСервер.ИмяПараметраСинхронизацияСИСЭСФПриЗапуске()] Тогда
			ОткрытьФорму("Обработка.ОбменЭСФ.Форма.СинхронизацияСИСЭСФ");	
		КонецЕсли;
		
	Исключение
		
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Внимание);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДокументЗаписан(Форма) Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо записать документ.
		|Записать документ?'");	
	
	Возврат ОбъектЗаписан(Форма);
	
КонецФункции

Функция ЭлементСправочникаЗаписан(Форма) Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо записать элемент.
		|Записать элемент?'");
	
	Возврат ОбъектЗаписан(Форма);
	
КонецФункции

Процедура ВопросЗаписатьОбъектПередВыполнением(ОписаниеОповещенияЗавершения, ВидОбъекта = "документ", ИмяСобытия = "Записать") Экспорт
	
	ТекстВопроса = НСтр(
		"ru = 'Перед выполнением необходимо %1 %2.
		|%3 документ?'");	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", НРег(ИмяСобытия));	
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%2", ВидОбъекта);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%3", ИмяСобытия);
	
	ПоказатьВопрос(ОписаниеОповещенияЗавершения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

Функция ОбъектЗаписан(Форма) Экспорт
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		
		Форма.Записать();	
		
	КонецЕсли;
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	ОбъектЗаписан = (НЕ Ссылка.Пустая()) И (НЕ Форма.Модифицированность);	
	
	Возврат ОбъектЗаписан;
	
КонецФункции

// Возвращает массив счетов-фактур, полученный из формы документа или списка.
//
// Параметры:
//  Параметр - УправляемаяФорма, Форма, Массив, ВыделенныеСтрокиТабличногоПоля - 
//   Форма документа счета-фактуры или выделенные строки списка счетов-фактур.
//
// Возвращаемое значение:
//  Массив, Неопределено - Массив ссылок на счета-фактуры.
//   Если форма документа модифицирована и пользователь отказался от записи, то Неопределено.
//
Функция МассивСчетовФактур(Знач Параметр) Экспорт
	
	ЭтоФорма = Ложь;
	ЭтоКоллекция = Ложь;
	
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Параметр) = Тип("УправляемаяФорма") ИЛИ ТипЗнч(Параметр) = Тип("Форма") Тогда
			ЭтоФорма = Истина;
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") ИЛИ ТипЗнч(Параметр) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Параметр) = Тип("УправляемаяФорма") Тогда
			ЭтоФорма = Истина;	
		ИначеЕсли ТипЗнч(Параметр) = Тип("Массив") Тогда
			ЭтоКоллекция = Истина;	
		КонецЕсли;
	#КонецЕсли
	
	Если ЭтоФорма Тогда
		Форма = Параметр;
		// производим запись без вопроса
		Если ЭСФКлиент.ОбъектЗаписан(Форма) Тогда
			СсылкаСчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
			МассивСчетовФактур = Новый Массив;
			МассивСчетовФактур.Добавить(СсылкаСчетФактура);
		Иначе
			МассивСчетовФактур = Неопределено;
		КонецЕсли;	
	ИначеЕсли ЭтоКоллекция Тогда
		КоллекцияСчетовФактур = Параметр;
		МассивСчетовФактур = Новый Массив;
		Для Каждого СсылкаСчетФактура Из КоллекцияСчетовФактур Цикл
			МассивСчетовФактур.Добавить(СсылкаСчетФактура);
		КонецЦикла;			
	КонецЕсли;
	
	Возврат МассивСчетовФактур;
	
КонецФункции

Процедура ОткрытьФормуСпискаСторнирований(Знач СчетФактура = Неопределено) Экспорт
	
	ИмяФормыСписка = "Документ." + ЭСФКлиентСерверПереопределяемый.ИмяСторнирующегоДокумента() + ".ФормаСписка";
	ИмяРеквизита = ЭСФКлиентСерверПереопределяемый.ИмяРеквизитаСчетФактураСторнирующегоДокумента();
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		ФормаСписка = ПолучитьФорму(ИмяФормыСписка);
		Если СчетФактура <> Неопределено Тогда
			ФормаСписка.Отбор[ИмяРеквизита].Установить(СчетФактура);
		КонецЕсли;
		ФормаСписка.Открыть();
		
	#Иначе
		
		Если СчетФактура <> Неопределено Тогда
			Отбор = Новый Структура;
			Отбор.Вставить(ИмяРеквизита, СчетФактура);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы);
		Иначе
			ОткрытьФорму(ИмяФормыСписка);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Проверяет даты отправляемых ЭСФ, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов ЭСФ и связанных счетов-фактур.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  Действие - Строка - ЭСФКлиентСервер.ДействиеОтправка(), ЭСФКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляЭСФИСчетовФакутурВопрос(Знач МассивЭСФ, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ТекущаяДата());	
	ИзмененГод  = Ложь;
	МассивЭСФДругаяДата = ЭСФВызовСервера.МассивЭСФДругаяДата(МассивЭСФ, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
		
	Если МассивЭСФДругаяДата.Количество() = 1 Тогда
		
		Если МассивЭСФДругаяДата[0].ПризнакВыписки И МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
			ТекстВопроса = НСтр(
			"ru = 'Дата ""%ЭСФ%"" отличается от текущей (%ТекущаяДата%).
			|%ОтправляемыйВыгружаемый% электронный счет-фактура должен иметь текущую дату.
			|Изменить дату электронного счета-фактуры на текущую (%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ЭСФ%",  ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(МассивЭСФДругаяДата[0].ЭСФ));
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Иначе
			ТекстДокументов = "";
			ТекстВопроса = НСтр(
			"ru = '%ТекстДокументов%
			|%ВопросЗаменыДаты% %ИзменениеНомеровДокументов%'");
			ТекстСФЭСФОтличаетсяДата = "Дата ""%Документ%"" отличается от текущей (%ТекущаяДата%).";
				
			Если МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
				ТекстЭСФ = СтрЗаменить(ТекстСФЭСФОтличаетсяДата, "%Документ%", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(МассивЭСФДругаяДата[0].ЭСФ));
				ТекстЭСФ = СтрЗаменить(ТекстЭСФ, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
				ТекстДокументов = ТекстДокументов + ТекстЭСФ + Символы.ПС +
				"%ОтправляемыйВыгружаемый% электронный счет-фактура должен иметь текущую дату." + Символы.ПС;
			КонецЕсли;
			
			Если МассивЭСФДругаяДата[0].ДатаСФОтличнаОтТекущей Тогда
				ТекстСФ = СтрЗаменить(ТекстСФЭСФОтличаетсяДата, "%Документ%", МассивЭСФДругаяДата[0].СФ);
				ТекстСФ = СтрЗаменить(ТекстСФ, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
				ТекстДокументов = ТекстДокументов + ТекстСФ;
			КонецЕсли;

			Если МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей и МассивЭСФДругаяДата[0].ДатаСФОтличнаОтТекущей Тогда
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВопросЗаменыДаты%", "Изменить дату электронного счета-фактуры и связанного счета-фактуры на текущую (%ТекущаяДата%)?");
			ИначеЕсли МассивЭСФДругаяДата[0].ДатаЭСФОтличнаОтТекущей Тогда
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВопросЗаменыДаты%", "Изменить дату электронного счета-фактуры на текущую (%ТекущаяДата%)?");				
			Иначе
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВопросЗаменыДаты%", "Изменить дату связанного счета-фактуры на текущую (%ТекущаяДата%)?");
			КонецЕсли;
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекстДокументов%",  ТекстДокументов);

			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
	
		Если Действие = ЭСФКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Отправляемый'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Выгружаемый'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
				
	ИначеЕсли МассивЭСФДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Даты %КоличествоЭСФ% связанных счетов-фактур / электронных счетов-фактур отличаются от текущей (%ТекущаяДата%):
			|%ОтправляемыеВыгружаемые% электронные счета-фактуры должны иметь текущую дату.
			|Изменить даты электронных счетов-фактур и связанных счетов-фактур на текущую (%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Если Действие = ЭСФКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Отправляемые'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Выгружаемые'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);

		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КоличествоЭСФ%", МассивЭСФДругаяДата.Количество());
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет XML строку, содержащую пакет ЭСФ, в файл.
//
// Параметры:
//  XML - Строка - Пакет ЭСФ для импорта в ИС ЭСФ.
//
Процедура СохранитьXMLДляИмпортаВИСЭСФ(XML) Экспорт
	
	ИмяФайла = НСтр("ru = '%ДатаФормирования% Пакет счетов-фактур'");
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ДатаФормирования%", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));
	
	#Если ВебКлиент Тогда
		
		ПолучитьФайл(ЭСФВызовСервера.ПоместитьДанныеВоВременноеХранилище(XML), ИмяФайла + ".xml");
		
		Сообщить(НСтр("ru = 'Выгруженные счета-фактуры можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;	
		ДиалогВыбораФайла.Расширение = "xml";
		ДиалогВыбораФайла.Фильтр = "Пакет электронных счетов-фактур (*.xml)|*.xml";
		
		ДополнительныеПараметры = Новый Структура("XML", XML);
		СохранитьXMLДляИмпортаВИСЭСФЗав = Новый ОписаниеОповещения("СохранитьXMLДляИмпортаВИСЭСФЗавершение", ЭСФКлиент, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(СохранитьXMLДляИмпортаВИСЭСФЗав);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СохранитьXMLДляИмпортаВИСЭСФЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 1 Тогда

		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ВыбранныеФайлы[0], "UTF-8");			
		ЗаписьТекста.Записать(ДополнительныеПараметры.XML);
		ЗаписьТекста.Закрыть();	
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр(
			"ru = 'Выгрузка электронных счетов-фактур успешно завершена.
			|Выгруженные счета-фактуры можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	КонецЕсли;
	
КонецПроцедуры
