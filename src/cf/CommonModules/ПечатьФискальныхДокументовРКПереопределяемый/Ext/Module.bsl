
// Описание: Получает оборудование по организации
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияБПО - Организация.
// 
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * Терминал - СправочникСсылка.ПодключаемоеОборудование - Терминал.
//   * ФискальныеУстройства - СправочникСсылка.ПодключаемоеОборудование - ФискальныеУстройства.
//
Функция ПодключаемоеОборудованиеОрганизации(Организация) Экспорт
	
	Оборудование = Новый Структура;
	Оборудование.Вставить("Терминал");
	Оборудование.Вставить("ФискальныеУстройства");
	
	ПодключенноеОборудование =  ПодключаемоеОборудованиеУТВызовСервера.ОборудованиеПодключенноеПоОрганизации(Организация);
	
	Оборудование.Терминал = ПодключенноеОборудование.Терминал;
	Оборудование.ФискальныеУстройства = ПодключенноеОборудование.ККТ;
		
	Возврат Оборудование;
	
КонецФункции //ПодключаемоеОборудованиеОрганизации

// Описание: Сравнивает валюту документа с валютой рег. учета
//
// Параметры:
//  ДокументСсылка - Ссылка на документ
// 
// Возвращаемое значение:
//  Булево - результат сравнения (Истина - валюты равны, Ложь - не равны). 
//
Функция СравнитьВалюты(ДокументСсылка) Экспорт
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Валюта, ВалютаВзаиморасчетов");
		
		Если Реквизиты.Валюта <> ВалютаРегл
			Или Реквизиты.ВалютаВзаиморасчетов <> ВалютаРегл Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Валюта");
		
		Если Реквизиты.Валюта <> ВалютаРегл Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //СравнитьВалюты

// Описание: Заполняет контактную информацию партнера (адрес электронной почты и телефон) на форме
//
// Параметры:
// 	Форма - Форма в которой необходимо заполнить списки выбора email и телефон
//
Процедура ЗаполнитьКонтактнуюИнформациюПоПартнеру(Форма) Экспорт
	
	// заполнить на форме список выбора для email и телефона
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Форма.Партнер) Тогда
		
		ИсточникиКонтактнойИнформации = Новый Массив;
		ИсточникиКонтактнойИнформации.Добавить(Форма.Партнер);
		
		ВидыКонтактнойИнформации = Новый Массив;
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
		
		Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
				Форма.Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
				Форма.Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Форма.Телефон10Знаков);
				Форма.Элементы.Телефон.СписокВыбора.Добавить(Форма.Телефон);
			КонецЕсли;
			
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
				Форма.Email = ЭлементКонтактнойИнформации.Представление;
				Форма.Элементы.Email.СписокВыбора.Добавить(Форма.Email);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Форма.Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Email.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьКонтактнуюИнформациюПоПартнеру

// Описание: Заполняет структуру информации о кассире
//
// Параметры:
// 	ПараметрыФормы - Параметры при открытии формы
// Возвращаемое значение:
//  Структура - Структура по свойствами:
//   * ИНН - ИИН кассира
//   * Наименование - ФИО кассира
//
Функция ПолучитьРеквизитыКассира(ПараметрыФормы) Экспорт
	
	Возврат РозничныеПродажи.РеквизитыКассира(Пользователи.ТекущийПользователь());
	
КонецФункции

// Описание: Возвращает ставку НДС по переданному значению.
//
//
Функция ЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	
	Возврат Справочники.СтавкиНДС.СтавкаНДСПоЗначению(СтавкаНДС);
	
КонецФункции

// Описание: Возвращает единицу измерения по коду
//
//
Функция ЕдиницаИзмеренияПоКоду(КодЕдиницыИзмерения) Экспорт
	
	Возврат Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодЕдиницыИзмерения);
	
КонецФункции //ЕдиницыИзмеренияПоКоду

// Описание: Значение реквизита объекта
//
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
 
	Возврат ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции
  
// Описание: Получение параметров фискализации чека
//
// Параметры:
//  ДокументСсылка - Ссылка на документ
//  НомерСекции - Номер секции
//  ВерсияФФД - Версия формата фискальных данных (по умолчанию 1.0)
//
// Возвращаемое значение: 
//  Структура - параметры фискализации чека
//
Функция ПараметрыОперацииФискализацииЧека(ДокументСсылка, НомерСекции, ВерсияФФД) Экспорт
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Результат = МенеджерОбъекта.ПараметрыОперацииФискализацииЧека(
		ДокументСсылка,
		Неопределено,
		ВерсияФФД);
	
	Возврат Результат;
	
КонецФункции //ПараметрыОперацииФискализацииЧека
 
// Описание: Получение прав доступа РМК для пользователя
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
Функция ПолучитьПраваДоступа(Пользователь) Экспорт
	
	 Возврат НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
КонецФункции
 