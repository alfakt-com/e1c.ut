
#Область ПроверкаИПодборПродукцииИСКлиентСервер

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущаяСтрока, Контекст) Экспорт

	Элементы = Форма.Элементы;
	
	Если ТекущаяСтрока = Неопределено
		Или Не ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = "";
		Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
		
	Иначе
		
		Форма.ВыводимоеПредставлениеПроверкиСодержимого = ТекущаяСтрока.ПредставлениеПроверкиПодчиненных;
		
		Если ТекущаяСтрока.КоличествоПодчиненныхОтсутствует > 0 Тогда
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхКрасный;
			
		ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено > 0 Тогда
		
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхЖелтый;
			
		Иначе
			
			Элементы.СтраницыПредставлениеПроверкиПодчиненных.ТекущаяСтраница = Элементы.СтраницаПредставлениеПроверкиПодчиненныхАвто;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока, ДоступныеДляПроверкиУпаковки, Контекст) Экспорт

	Если НЕ ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = ДоступныеДляПроверкиУпаковки.НайтиПоЗначению(ТекущаяСтрока.Штрихкод);
	
	Если ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии")
		Или ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена")
		Или ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		
		Если ЭлементСписка = Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Добавить(ТекущаяСтрока.Штрихкод);
		КонецЕсли;
		
	Иначе
		
		Если ЭлементСписка <> Неопределено Тогда
			ДоступныеДляПроверкиУпаковки.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьЗначениеДляУпаковки(СтрокаДерева,
	ИмяКолонкиЗначения, ИмяКолонкиЕстьРазличные,
	МассивЗначений, ЕстьРазличныеБезусловно) Экспорт
	
	Если ЕстьРазличныеБезусловно Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	ИначеЕсли МассивЗначений.Количество() = 0 Тогда
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	ИначеЕсли МассивЗначений.Количество() = 1 Тогда
		
		Значение = Неопределено;
		Для Каждого КлючИЗначение Из МассивЗначений Цикл
			Значение = КлючИЗначение.Ключ;
		КонецЦикла;
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Значение;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Ложь;
		
	Иначе
		
		СтрокаДерева[ИмяКолонкиЗначения]      = Неопределено;
		СтрокаДерева[ИмяКолонкиЕстьРазличные] = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока, Контекст) Экспорт
	
	Если ПустаяСтрока(ТекущаяСтрока.Штрихкод)
		И ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = '<не маркирована>';
											|en = '<не маркирована>'");
		
	Иначе
		
		ТекущаяСтрока.Представление = ТекущаяСтрока.Штрихкод;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции, Контекст) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Контекст.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, Контекст) Экспорт
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	
	Пока РодительскаяСтрока <> Неопределено Цикл
		Контекст.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительскаяСтрока, Ложь);
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока, Контекст) Экспорт
	
	Если ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.ВНаличии") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 0;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует") Тогда

		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеПроверялась") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 2;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отложена") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 3;
		
	ИначеЕсли ТекущаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.НеЧислилась") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 4;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма, Контекст) Экспорт
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		Форма.Элементы.ДекорацияИнформацияТребуетсяПеремаркировка.Заголовок = Контекст.ЗаголовокТребуетсяПеремаркировка(Форма);
		Форма.Элементы.ГруппаТребуетсяПеремаркировка.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаТребуетсяПеремаркировка.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Ложь;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, Контекст) Экспорт
	
	Если ТаблицаПеремаркировки.Количество() = 0 Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		Контекст.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоВыборочнаяПроверка Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
	КонецЕсли;
	
	Для Каждого СтрокаПеремаркировки Из ТаблицаПеремаркировки Цикл
		СтрокаДерева = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(СтрокаПеремаркировки.ИдентификаторВДереве);
		
		Если СтрокаДерева <> Неопределено Тогда
			ТребуетсяПеремаркировка = СтрокаПеремаркировки.ТребуетсяПеремаркировка 
				И Не СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует");
				
			Если ЭтоВыборочнаяПроверка Тогда
				Если СтрокаДерева.ТребуетсяПеремаркировка И Не ТребуетсяПеремаркировка Тогда
					Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать - 1; 
				ИначеЕсли Не СтрокаДерева.ТребуетсяПеремаркировка И ТребуетсяПеремаркировка Тогда
					Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать + 1;
				КонецЕсли;
			ИначеЕсли ТребуетсяПеремаркировка Тогда
				Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать + 1;
			КонецЕсли;
			
			СтрокаДерева.ТребуетсяПеремаркировка = ТребуетсяПеремаркировка;
			Контекст.СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
			
			Если ЭтоВыборочнаяПроверка И Форма.УстановленОтборТребуетсяПеремаркировать Тогда
				ПроверкаИПодборПродукцииИСКлиентСервер_ПроверитьСоответствиеОтборуТребуетсяПеремаркировка(СтрокаДерева, Контекст);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Контекст.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору, Контекст) Экспорт
	
	ТекущаяСтрокаСоответствуетОтбору = Ложь;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СоответствуетОтбору = Ложь;
		
		ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору, Контекст);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоответствуетОтбору = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ТекущаяСтрокаСоответствуетОтбору Тогда
		ТекущаяСтрокаСоответствуетОтбору = СтрокаДерева.ТребуетсяПеремаркировка;
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоответствуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиентСервер_ПроверитьСоответствиеОтборуТребуетсяПеремаркировка(СтрокаДерева, Контекст) Экспорт
	
	СоответствуетОтбору = Ложь;
	ПроверкаИПодборПродукцииИСКлиентСервер_УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору, Контекст);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	
	Пока РодительскаяСтрока <> Неопределено Цикл
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;

			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИСКлиентСервер_ЭтоДокументПриобретения(Контекст) Экспорт
	
	ЭтоПриобретение = Ложь;
	
	Возврат ЭтоПриобретение;
	
КонецФункции

Функция ПроверкаИПодборПродукцииИСКлиентСервер_ЭтоЧекККМ(Контекст) Экспорт
	
	ЭтоЧек = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМ(Контекст, ЭтоЧек);
	
	Возврат ЭтоЧек;
	
КонецФункции

Функция ПроверкаИПодборПродукцииИСКлиентСервер_ЭтоЧекККМВозврат(Контекст) Экспорт
	
	ЭтоЧекВозврат = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМВозврат(Контекст, ЭтоЧекВозврат);
	
	Возврат ЭтоЧекВозврат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСКлиентСервер

//Определяет является ли тип упаковки логистической или групповой товарной упаковкой.
//
//Параметры:
//  ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - тип упаковки
//Возвращаемое значение:
//   Булево - Истина, если тип упаковки относится к логистической или товарной.
Функция ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТипУпаковки) Экспорт
	
	Возврат ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")
		Или ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	
КонецФункции

// Конвертирует двоичные данные в Base64
// 
// Параметры:
// 	ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
// Возвращаемое значение:
// 	Строка - Строка в Base64
Функция ИнтеграцияИСКлиентСервер_ДвоичныеДанныеBase64(ДвоичныеДанные) Экспорт
	
	Base64 = Base64Строка(ДвоичныеДанные);
	Base64 = СтрЗаменить(Base64, Символы.ПС, "");
	Base64 = СтрЗаменить(Base64, Символы.ВК, "");
	
	Возврат Base64;
	
КонецФункции

//Возвращает массив типов упаковок, которые соответствуют коробкам.
//
//Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыУпаковок- Коллекция типов упаковок.
Функция ИнтеграцияИСКлиентСервер_ТипыУпаковокДляКоробок() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка"));
	
	Возврат МассивТипов;
	
КонецФункции

Функция ИнтеграцияИСКлиентСервер_ПредставлениеНаименования(Наименование, ОкружатьКавычками = Истина, МаксимальнаяДлина = 30) Экспорт

	Результат = Наименование;
	
	Если СтрДлина(Результат) > МаксимальнаяДлина Тогда
		Результат = Лев(Результат, МаксимальнаяДлина) + "...";
	КонецЕсли;
	
	Если ОкружатьКавычками Тогда
		Если Лев(Результат, 1) <> """" Тогда
			Результат = """" + Результат;
		КонецЕсли;
		Если Прав(Результат, 1) <> """" Тогда
			Результат = Результат + """";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтеграцияИСУТКлиентСервер

//Определяет соответствие переданного документа проверяемому типу.
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка - Контекст для определения типа документа.
//  Имя      - Строка - имя объекта метаданного документа.
//
// Возвращаемое значение:
// 	Булево - это документ.
Функция ИнтеграцияИСУТКлиентСервер_ЭтоДокументПоНаименованию(Контекст, Имя) Экспорт

	Результат = Ложь;

	ТипКонтекста = ТипЗнч(Контекст);
	ТипДокумента = Тип(СтрШаблон("ДокументСсылка.%1", Имя));

	Если ТипКонтекста = Тип("УправляемаяФорма") Тогда
		Если СтрНачинаетсяС(Контекст.ИмяФормы, СтрШаблон("Документ.%1", Имя)) Тогда
			Результат = Истина;
		ИначеЕсли СтрНачинаетсяС(Контекст.ИмяФормы, "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда
			Если ТипЗнч(Контекст.Ссылка) = ТипДокумента Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипКонтекста = ТипДокумента Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ИнтеграцияИСУТКлиентСервер_ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМ") Тогда
		
		ИнтеграцияИСУТКлиентСервер_ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
		
	ИначеЕсли ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекККМВозврат") Тогда
		
		ИнтеграцияИСУТКлиентСервер_ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, Ложь);
	
	КонецЕсли;
	
	ИнтеграцияИСУТКлиентСервер_ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	
КонецПроцедуры

Процедура ИнтеграцияИСУТКлиентСервер_ЗаполнитьПараметрыСканированияЧекККМ(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
	
	#Область ПоддержкаТабачнойПродукции
	
	Если ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборот"));
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВведенВОборотВозвращен"));
		
		КонтрольСтатусов = ИнтеграцияМОТПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		ПараметрыСканирования.ЗапрашиватьСтатусыМОТП                     = КонтрольСтатусов;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП   = КонтрольСтатусов;
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
				ПараметрыСканирования.Организация = ИсточникДанных.Организация;
			КонецЕсли;
			ПараметрыСканирования.Склад = ИсточникДанных.Склад;
			
		КонецЕсли;
		
		Если Не КонтрольСтатусов Тогда
			ПараметрыСканирования.ВариантПолученияМРЦ = "Вычисление";
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ИнтеграцияИСУТКлиентСервер_ЗаполнитьПараметрыСканированияЧекККМВозврат(ПараметрыСканирования, Контекст, ВидПродукции, ПроверкаКоличества = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	Иначе
		ИсточникДанных = Контекст;
	КонецЕсли;
	
	ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат";
	
	Если ШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Продан"));
		
		КонтрольСтатусов = ИнтеграцияМОТПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		ПараметрыСканирования.ЗапрашиватьСтатусыМОТП                     = КонтрольСтатусов;
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП   = КонтрольСтатусов;
		
	КонецЕсли;

КонецПроцедуры

Процедура ИнтеграцияИСУТКлиентСервер_ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст)
	
	Если ШтрихкодированиеИСКлиентСервер_ДопустимВидПродукции(ПараметрыСканирования, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")) Тогда
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Объект.Организация;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Организация;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИСМПУТКлиентСервер

//Подготовливает структуру, массив которых в дальнейшем будет передан в процедуру генерации серий.
//   Дополняется необходимыми полями, специфичными конкретному виду продукции.
//
//Параметры:
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции генерации серии
//Возвращаемое значение:
//   Структура - источник данных генерации серий с обязательными полями:
//    * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура, для которой будет генерироваться серия.
//    * Серия        - ОпределяемыйТип.СерияНоменклатуры   - В данное значение будет записана сгенерированная серия.
//    * ЕстьОшибка   - Булево - Будет установлено в Истина, если по каким то причинам серия сгенерирована не будет.
//    * ТекстОшибки  - Строка - причина, по которой серия не генерировалась.
//
Функция ИнтеграцияИСМПУТКлиентСервер_СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции) Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура", Неопределено);
	СтруктураДанных.Вставить("Серия",        Неопределено);
	СтруктураДанных.Вставить("ЕстьОшибка",   Ложь);
	СтруктураДанных.Вставить("ТекстОшибки",  "");
	
	ИнтеграцияИСМПУТКлиентСервер_ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции);
	
	Возврат СтруктураДанных;

КонецФункции

Процедура ИнтеграцияИСМПУТКлиентСервер_ДополнитьДанныеДляГенерацииСерииПоВидуПродукции(СтруктураДанных, ВидМаркируемойПродукции)

	Если ВидМаркируемойПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		СтруктураДанных.Вставить("МРЦ", 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсАвторизацииИСМПКлиентСервер

// Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Организация          - ОпределяемыйТип.Организация - Организация от имени которой необходимо авторизоваться.
// * ПредставлениеСервиса - Строка                      - Представление сервиса, например: ИС МОТП.
// * Сервер               - Строка                      - Адрес сервера, например: stable.ismotp.crpt.ru
// * Порт                 - Число                       - Например: 443.
// * АдресЗапросаКлючаСессии           - Строка - Например: api/v3/auth/cert/
// * АдресЗапросаПараметровАвторизации - Строка - Например: api/v3/auth/cert/key
//
Функция ИнтерфейсАвторизацииИСМПКлиентСервер_ПараметрыЗапросаКлючаСессии() Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ПредставлениеСервиса",            "");
	ПараметрыЗапроса.Вставить("Организация",                     Неопределено);
	
	ПараметрыЗапроса.Вставить("Сервер",                           "");
	ПараметрыЗапроса.Вставить("Порт",                             443);
	ПараметрыЗапроса.Вставить("Таймаут",                          60);
	ПараметрыЗапроса.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	ПараметрыЗапроса.Вставить("ИмяПараметраСеанса",                "");
	ПараметрыЗапроса.Вставить("АдресЗапросаПараметровАвторизации", "api/v3/auth/cert/key");
	ПараметрыЗапроса.Вставить("АдресЗапросаКлючаСессии",           "api/v3/auth/cert/");
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсИСМПКлиентСервер

// Возвращает параметры для отправки HTTP запросов ИС МП.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ИспользоватьЗащищенноеСоединение - Булево - Признак использования SSL.
// * Таймаут - Число - Таймаут соединения.
// * Порт - Число - Порт соединения.
// * Сервер - Строка - Адрес сервера.
// * ПредставлениеСервиса - Строка - Представления сервиса.
//
Функция ИнтерфейсИСМПКлиентСервер_ПараметрыОтправкиHTTPЗапросов() Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = Новый Структура;
	ПараметрыОтправкиHTTPЗапросов.Вставить("ПредставлениеСервиса",             НСтр("ru = 'ИС МП';
																					|en = 'ИС МП'"));
	ПараметрыОтправкиHTTPЗапросов.Вставить("Сервер",                           ИнтерфейсИСМПКлиентСервер_АдресСервера());
	ПараметрыОтправкиHTTPЗапросов.Вставить("Порт",                             443);
	ПараметрыОтправкиHTTPЗапросов.Вставить("Таймаут",                          60);
	ПараметрыОтправкиHTTPЗапросов.Вставить("ИспользоватьЗащищенноеСоединение", Истина);
	
	Возврат ПараметрыОтправкиHTTPЗапросов;
	
КонецФункции

// Возвращает адрес сервера ИС МП.
// 
// Возвращаемое значение:
// 	Строка - адрес сервера ИС МП.
//
Функция ИнтерфейсИСМПКлиентСервер_АдресСервера() Экспорт
	
	Возврат "ismp.crpt.ru";
	
КонецФункции

// Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.Организация - Организация.
// Возвращаемое значение:
// 	(См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ИнтерфейсИСМПКлиентСервер_ПараметрыЗапросаКлючаСессии(Организация = Неопределено) Экспорт
	
	ПараметрыОтправкиHTTPЗапросов = ИнтерфейсИСМПКлиентСервер_ПараметрыОтправкиHTTPЗапросов();
	
	ПараметрыЗапроса = ИнтерфейсАвторизацииИСМПКлиентСервер_ПараметрыЗапросаКлючаСессии();
	ПараметрыЗапроса.Организация = Организация;
	
	ПараметрыЗапроса.ПредставлениеСервиса             = ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса;
	ПараметрыЗапроса.Сервер                           = ПараметрыОтправкиHTTPЗапросов.Сервер;
	ПараметрыЗапроса.Порт                             = ПараметрыОтправкиHTTPЗапросов.Порт;
	ПараметрыЗапроса.Таймаут                          = ПараметрыОтправкиHTTPЗапросов.Таймаут;
	ПараметрыЗапроса.ИспользоватьЗащищенноеСоединение = ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение;
	
	ПараметрыЗапроса.ИмяПараметраСеанса                = "ДанныеКлючаСессииИСМП";
	ПараметрыЗапроса.АдресЗапросаПараметровАвторизации = "api/v3/auth/cert/key";
	ПараметрыЗапроса.АдресЗапросаКлючаСессии           = "api/v3/auth/cert/";
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодированиеИСКлиентСервер

// Получает значение перечисления типа штрихкода по строке 
// 
// Параметры:
// 	ТипШтрихкодаСтрокой - Строка - тип штрихкода (например, Code128Формат1, GS1128, GS1DataBarExpandedStacked)
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - тип шаблона
Функция ШтрихкодированиеИСКлиентСервер_ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрокой) Экспорт
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
				Или ТипШтрихкодаСтрокой = "Code128Формат2" 
				Или ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128");	
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1_DataBarExpandedStacked" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked");
	ИначеЕсли ТипШтрихкодаСтрокой = "PDF417" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
	ИначеЕсли ТипШтрихкодаСтрокой = "DataMatrix" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.EAN13");
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128");
	Иначе
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

// Выполняет проверку на соответствие алфавиту кода маркировки.
//
// Параметры:
//  Код - Строка - Код маркировки.
//  Алфавит - Строка - перечень допустимых символов.
// Возвращаемое значение:
//  Булево - Истина, если код соответствует алфавиту.
Функция ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс < ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол, НаправлениеПоиска.СНачала) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяКолонкиШтрихкодУпаковки - Строка -
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок.
// * Склад - ОпределяемыйТип.Склад - Место хранения.
// * ПараметрыУказанияСерий - Структура -
// * ОперацияКонтроляАкцизныхМарок - Строка -
// * ДополнительныеПараметры - Структура -
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево -
// * ДанныеВыбораПоМаркируемойПродукции - Неопределено -
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево -
// * АдресДанныхДокументаОснования - Неопределено -
// * КонтрольРасхожденийСДокументомОснованием - Булево -
// * КэшированныеЗначения - Неопределено -
// * ТолькоМаркируемаяПродукция - Булево -
// * ВозможнаЗагрузкаТСД - Булево -
// * ДокументОснование - Неопределено -
// * СоздаватьШтрихкодУпаковки - Булево -
// * АдресСоответствияАкцизныхМарок - Неопределено -
// * ДопустимыеВидыПродукции - Массив -
Функция ШтрихкодированиеИСКлиентСервер_БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                        Новый Массив);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                        Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                      Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                              Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                            Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                     Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                           Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                  Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",  Ложь);
	БазовыеПараметры.Вставить("ДанныеВыбораПоМаркируемойПродукции",             Неопределено);
	БазовыеПараметры.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции", Ложь);
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                        Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                  "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                         Неопределено);
	БазовыеПараметры.Вставить("Склад",                                          Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",             "АкцизныеМарки");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                     "АкцизнаяМарка");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",       Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",             Истина);
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок",                         Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                       Истина);
	БазовыеПараметры.Вставить("Организация",                                    Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                         Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                   Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                             Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                       Неопределено);
	БазовыеПараметры.Вставить("СтатусКодаМаркировкиПоУмолчанию",                Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                  Ложь);
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                            Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                 Неопределено);
	
	Возврат БазовыеПараметры;
	
КонецФункции

// Выполняет заполнение базовых параметров сканирования на основании данных контекста.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - УправляемаяФорма, СсылкаНаОбъект - контекст, данные которого будут использованы для заполнения параметров сканирования.
Процедура ШтрихкодированиеИСКлиентСервер_ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КэшМаркируемойПродукции") Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = Контекст.КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
		ИсточникДанных = Контекст;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
			ИсточникДанных = Контекст.Объект;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Склад") Тогда
			ПараметрыСканирования.Склад = ИсточникДанных.Склад;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
			ПараметрыСканирования.Владелец = ИсточникДанных.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования)
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ШтрихкодированиеИСКлиентСервер_ДопустимВидПродукции(ПараметрыСканирования, ВидПродукцииИС) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
КонецФункции

//Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
//Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.Характеристика - Характеристика номенклатуры.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая.
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода.
// * Документ - Произвольный - .
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки.
//
Функция ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ПараметрыОткрытияФормы.Вставить("Номенклатура",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("Характеристика",                  Неопределено);
	ПараметрыОткрытияФормы.Вставить("ВидПродукции",                    Неопределено);
	ПараметрыОткрытияФормы.Вставить("МаркируемаяПродукция",            Истина);
	ПараметрыОткрытияФормы.Вставить("ПараметрыСканирования",           Неопределено);
	ПараметрыОткрытияФормы.Вставить("ДанныеШтрихкода",                 Неопределено);
	ПараметрыОткрытияФормы.Вставить("Документ",                        Неопределено);
	ПараметрыОткрытияФормы.Вставить("РазрешатьДобавлениеБезКодаМарки", Истина);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ШтрихкодированиеИСКлиентСервер_ЭтоШтрихкодВводаОстатков(Штрихкод) Экспорт
	
	НачалоGTIN = "029";
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		Возврат Сред(Штрихкод,5,3) = НачалоGTIN; //Код маркировки со скобками
	КонецЕсли;
	
	Возврат Лев(Штрихкод, 2) = "29"       // Штрихкод EAN.
		Или Лев(Штрихкод, 3) = НачалоGTIN // Штрихкод GTIN.
		Или Лев(Штрихкод, 5) = "01029";   // Код маркировки без скобок.
	
КонецФункции
	
// Формирует представление сохраненного выбора маркируемой продукции после уточнения информации в диалоговом окне.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма для отображения настроек
Процедура ШтрихкодированиеИСКлиентСервер_ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма) Экспорт

	Элементы     = Форма.Элементы;
	ДанныеВыбора = Форма.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Сохранен выбор:';
									|en = 'Сохранен выбор:'"));
		МассивСтрок.Добавить(" ");
		
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер_ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер_ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Серия") И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер_ПредставлениеНаименования(Строка(ДанныеВыбора.Серия), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьСерию"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ПричинаПеремаркировки")
			И ЗначениеЗаполнено(ДанныеВыбора.ПричинаПеремаркировки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("причина: %1", ДанныеВыбора.ПричинаПеремаркировки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПредставления,,));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ДобавлятьНовуюУпаковку") И ДанныеВыбора.ДобавлятьНовуюУпаковку Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'добавлять пустые упаковки';
																	|en = 'добавлять пустые упаковки'"),,));
		КонецЕсли;
				
		Если ДанныеВыбора.Свойство("ШаблонЭтикетки") И ЗначениеЗаполнено(ДанныеВыбора.ШаблонЭтикетки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			ТекстПредставления = СтрШаблон("шаблон этикетки: %1", ДанныеВыбора.ШаблонЭтикетки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ТекстПредставления,, Форма.ЦветТекстаПоля,, "ОткрытьШаблонЭтикетки"));
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("СразуНаПринтер") И ДанныеВыбора.СразуНаПринтер Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'сразу на принтер';
					|en = 'сразу на принтер'"),,));
		КонецЕсли;
		
		МассивСтрок.Добавить(". (");
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Сбросить';
						|en = 'Сбросить'"),
					Новый Шрифт(,,,,Истина),
					Форма.ЦветГиперссылки,,
					"СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеСохраненногоВыбора = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка, СправчникСсылка, Обработка - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ЭтоСсылка   = Ложь;
	ЭтоФорма    = Ложь;
	Разделитель = ".";
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ЭтоСсылка         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ЭтоСсылка И ТипЗнч(Контекст) = Тип(ИмяОбъекта);

КонецФункции

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатура - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш кода маркировки.
Функция ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Операция",                               Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыСканирования",                  Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыУказанияСерий",                 Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеДляУточненияСведенийПользователя", Неопределено);
	
	ПараметрыОткрытия.Вставить("КодМаркировки",             Неопределено);
	ПараметрыОткрытия.Вставить("ТипШтрихкода",              Неопределено);
	ПараметрыОткрытия.Вставить("Номенклатура",              Неопределено);
	ПараметрыОткрытия.Вставить("Характеристика",            Неопределено);
	ПараметрыОткрытия.Вставить("ШтрихкодEAN",               Неопределено);
	ПараметрыОткрытия.Вставить("Склад",                     Неопределено);
	ПараметрыОткрытия.Вставить("Серия",                     Неопределено);
	ПараметрыОткрытия.Вставить("РежимПечатиЭтикеток",       Ложь);
	ПараметрыОткрытия.Вставить("ВозвращатьШаблонПриПечати", Ложь);
	ПараметрыОткрытия.Вставить("ШаблонКодаМаркировки",      Неопределено);
	ПараметрыОткрытия.Вставить("ШаблонЭтикетки",            Неопределено);
	ПараметрыОткрытия.Вставить("СразуНаПринтер",            Ложь);
	ПараметрыОткрытия.Вставить("Шаблоны",                   Неопределено);
	ПараметрыОткрытия.Вставить("Документ",                  Неопределено);
	ПараметрыОткрытия.Вставить("ХешСуммаКодаМаркировки",    Неопределено);

	Возврат ПараметрыОткрытия;
	
КонецФункции

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодированиеИСКлиентСервер_ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
//
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(GTIN) Экспорт

	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция ШтрихкодированиеИСКлиентСервер_GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт

	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;

	Возврат GTIN;

КонецФункции

// Вычисляет штрихкод GTIN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод GTIN не удалось.
Функция ШтрихкодированиеИСКлиентСервер_GTINПоКодуМаркировки(Знач КодМаркировки) Экспорт

	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);

	Если Не РезультатРазбора.Разобран Тогда
		Возврат Неопределено
	КонецЕсли;

	ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода.Получить("01");
	Если ДанныеШтрихкода01 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	GTIN = ДанныеШтрихкода01.Значение;

	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат GTIN;

КонецФункции

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция ШтрихкодированиеИСКлиентСервер_Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если ДвоичныеДанные = Неопределено Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодированиеИСКлиентСервер_ШтрихкодВBase64(Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = ИнтеграцияИСКлиентСервер_ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
//  Штрихкод - Строка - Штрихкод.
// Возвращаемое значение:
//  Строка - Краткое представление штрихкода маркируемой продукции.
Функция ШтрихкодированиеИСКлиентСервер_ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 40 Тогда
		Если СтрНайти(Штрихкод, "(") = 1 Тогда
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 37) + "...";
		Иначе
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "....." + Прав(ПредставлениеШтрихкода, 8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодированиеИСМПКлиентСервер

// Убирает разделители идентификаторов "(", ")" из кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Код маркировки без разделителей.
Функция ШтрихкодированиеИСМПКлиентСервер_КодМаркировкиБезСкобок(КодМаркировки) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(КодМаркировки);
	Если ЧтениеШтрихкода.Результат <> Неопределено Тогда
		Возврат ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Ложь, "");
	КонецЕсли;
	
КонецФункции

// Возвращает допустимые символы кода маркировки.
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Алфавит серийного номера.
Функция ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки() Экспорт
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!”""%&’'()*+,-./_:;=<>?";
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону потребительской упаковки
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует коробке обуви.
Функция ШтрихкодированиеИСМПКлиентСервер_ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки, EAN = Неопределено, СерийныйНомер = Неопределено, КодТНВЭД = Неопределено) Экспорт
	
	Если Не СтрНачинаетсяС(СокрЛП(КодМаркировки), "(") Тогда
		
		ЭтоКМ38 = (СтрДлина(КодМаркировки) = 38);
		ЭтоКМ32 = (СтрДлина(КодМаркировки) = 31);
		
		Если ЭтоКМ38 Или ЭтоКМ32 Тогда
			
			ОсновнойАлфавит = "0123456789";
			
			ИдентификаторПрименения = Сред(КодМаркировки, 1, 2);
			Если ИдентификаторПрименения <> "01" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "01" + 14 знаков GTIN
			ЗначениеEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(Сред(КодМаркировки, 3, 14));
			Если ЗначениеEAN = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ИдентификаторПрименения = Сред(КодМаркировки, 17, 2);
			Если ИдентификаторПрименения <> "21" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "21" + 13 знаков Серийный номер
			ЗначениеСерийныйНомер = Сред(КодМаркировки, 19, 13);
			Если Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(ЗначениеСерийныйНомер, ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ЭтоКМ38 Тогда
				
				ИдентификаторПрименения = Сред(КодМаркировки, 32, 3);
				Если ИдентификаторПрименения <> "240" Тогда
					Возврат Ложь;
				КонецЕсли;
				
				ЗначениеКодТНВЭД = Сред(КодМаркировки, 35, 4);
				
				// "240" + 4 знака Код ТН ВЭД
				Если Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(ЗначениеКодТНВЭД, ОсновнойАлфавит) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			EAN           = ЗначениеEAN;
			СерийныйНомер = ЗначениеСерийныйНомер;
			КодТНВЭД      = ЗначениеКодТНВЭД;
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		Если Не РезультатРазбора.Разобран Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки.
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗначениеEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(Идентификатор01.Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки.
		Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
		Если Идентификатор21 = Неопределено
				Или СтрДлина(Идентификатор21.Значение) <> 13
				Или Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(
					Идентификатор21.Значение, ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки()) Тогда // Серийный номер
			Возврат Ложь;
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор240 = РезультатРазбора.ДанныеШтрихкода["240"];
		Если Идентификатор240 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор240.Значение) <> 4
				Или Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор240.Значение, "0123456789") Тогда // Код ТН ВЭД
				Возврат Ложь;
			КонецЕсли;
			
			ЗначениеКодТНВЭД = Идентификатор240.Значение;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор91 = РезультатРазбора.ДанныеШтрихкода["91"];
		Если Идентификатор91 <> Неопределено Тогда // Ключ проверки
			
			Если СтрДлина(Идентификатор91.Значение) <> 4
				Или Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор91.Значение, "abcdefghijklmnopqrstuvwxyz0123456789") Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки.
		Идентификатор92 = РезультатРазбора.ДанныеШтрихкода["92"];
		Если Идентификатор92 <> Неопределено Тогда // Подпись
			
			Если СтрДлина(Идентификатор92.Значение) <> 88
				Или Не ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор92.Значение, ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		EAN           = ЗначениеEAN;
		СерийныйНомер = Идентификатор21.Значение;
		КодТНВЭД      = ЗначениеКодТНВЭД;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Возвращает состав кода маркировки обувной продукции.
// 
// Параметры:
//  КодМаркировки - Строка - код маркировки обувной продукции.
// Возвращаемое значение:
//  Неопределено, Структура - Описание:
// * GTIN - Строка - GTIN табачной продукции.
// * СерийныйНомер - Строка - серийный номер.
Функция ШтрихкодированиеИСМПКлиентСервер_СоставКодаМаркировки(КодМаркировки) Экспорт
	
	СоставКодаМаркировки = Новый Структура("GTIN, СерийныйНомер");
	
	Если ШтрихкодированиеИСМПКлиентСервер_ЭтоКодМаркировкиПотребительскойУпаковки(КодМаркировки) Тогда
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода["01"];
		ДанныеШтрихкода21 = РезультатРазбора.ДанныеШтрихкода["21"];
		
		Если ДанныеШтрихкода01 <> Неопределено Тогда
			СоставКодаМаркировки.GTIN = ДанныеШтрихкода01.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода21 <> Неопределено Тогда
			СоставКодаМаркировки.СерийныйНомер = ДанныеШтрихкода21.Значение;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

// Выполняет обработку сохраненного выбора пользователем.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма документа.
//  ДанныеШтрихкода - Структура - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ШтрихкодированиеИСМПКлиентСервер_ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода) Экспорт

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеШтрихкода.ДополнительныеПараметры;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапомнитьВыбор")
		И ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		Если ДополнительныеПараметры.Свойство("ДанныеВыбора")
			И ТипЗнч(ДополнительныеПараметры.ДанныеВыбора) = Тип("Структура") Тогда
			
			Если Форма.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
				Форма.ДанныеВыбораПоМаркируемойПродукции = ДополнительныеПараметры.ДанныеВыбора;
			Иначе
				ЗаполнитьЗначенияСвойств(
					Форма.ДанныеВыбораПоМаркируемойПродукции,
					ДополнительныеПараметры.ДанныеВыбора);
			КонецЕсли;
			
			Форма.СохраненВыборПоМаркируемойПродукции = Истина;
			ШтрихкодированиеИСКлиентСервер_ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСКлиентСерверПереопределяемый

// В процедуре нужно реализовать возможность работы с видами продукции, с которыми предполагается работа объектов.
// (См. ШтрихкодированиеИСКлиентСервер.ВключитьПоддержкуВидовПродукцииИС).
Процедура ШтрихкодированиеИСКлиентСерверПереопределяемый_ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТКлиентСервер_ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область МенеджерОборудованияМаркировкаКлиентСерверПовтИсп

Функция МенеджерОборудованияМаркировкаКлиентСерверПовтИсп_КодыGS1() Экспорт;
	
	Возврат МенеджерОборудованияМаркировкаКлиентСервер_КодыGS1Служебный();
	
КонецФункции

#КонецОбласти

#Область МенеджерОборудованияМаркировкаКлиентСервер

Функция ОписаниеКода(Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ЕстьРазделитель = Неопределено);
	
	ОписаниеКода = Новый Структура;
	ОписаниеКода.Вставить("Код", Код);
	ОписаниеКода.Вставить("Имя", Имя);
	ОписаниеКода.Вставить("ФиксированнаяДлина", ФиксированнаяДлина);
	Если ФиксированнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипФиксированногоЗначения", ?(ТипФиксированногоЗначения = Неопределено, МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число(), ТипФиксированногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ПеременнаяДлина", ПеременнаяДлина);
	Если ПеременнаяДлина > 0 Тогда
		ОписаниеКода.Вставить("ТипПеременногоЗначения", ?(ТипПеременногоЗначения = Неопределено, МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число(), ТипПеременногоЗначения));
	КонецЕсли;
	ОписаниеКода.Вставить("ЕстьРазделитель", ?(ПеременнаяДлина > 0, Истина, ЗначениеЗаполнено(ЕстьРазделитель)));
	ОписаниеКода.Вставить("ЕстьПоложениеДесятичнойТочки", Ложь);
	
	Возврат ОписаниеКода;
	
КонецФункции

Процедура МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, Код, Имя, ФиксированнаяДлина = 0, ПеременнаяДлина = 0, ТипФиксированногоЗначения = Неопределено, ТипПеременногоЗначения = Неопределено, ЕстьРазделитель = Неопределено);
	
	ВставляемыеКоды = Новый Массив;
	ПоследнийСимволКода = Прав(Код, 1);
	Если СтрНайти("0123456789", ПоследнийСимволКода) = 0 Тогда
		КодБезПоследнегоСимвола = Лев(Код, СтрДлина(Код) - 1);
		Если ПоследнийСимволКода = "n" Тогда
			Описание = ОписаниеКода(КодБезПоследнегоСимвола, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель);
			Описание.ЕстьПоложениеДесятичнойТочки = Истина;
			Коды.Вставить(КодБезПоследнегоСимвола, Описание);
		Иначе
			Для Индекс = 0 По 9 Цикл
				НовыйКод = КодБезПоследнегоСимвола + Строка(Индекс);
				Коды.Вставить(НовыйКод, ОписаниеКода(НовыйКод, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель));
			КонецЦикла;
		КонецЕсли;
	Иначе
		Коды.Вставить(Код, ОписаниеКода(Код, Имя, ФиксированнаяДлина, ПеременнаяДлина, ТипФиксированногоЗначения, ТипПеременногоЗначения, ЕстьРазделитель));
	КонецЕсли;
	
КонецПроцедуры

Функция МенеджерОборудованияМаркировкаКлиентСервер_КодыGS1Служебный() Экспорт;
	
	Коды = Новый Соответствие;
	
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "00"  , "SSCC"                      , 18);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "01"  , "GTIN"                      , 14);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "02"  , "CONTENT"                   , 14);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "10"  , "BATCH_LOT"                 ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "11"  , "PROD_DATE"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "12"  , "DUE_DATE"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "13"  , "PACK_DATE"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "15"  , "BEST_BEFORE"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "16"  , "SELL_BY"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "17"  , "EXPIRE"                    ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "20"  , "VARIANT"                   ,  2);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "21"  , "SERIAL"                    ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "22"  , "CPV"                       ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "240" , "ADDITIONAL_ID"             ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "241" , "CUSTOMER_PART_NO"          ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "242" , "MTO_VARIANT"               ,   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "243" , "PCN"                       ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "250" , "SECONDARY_SERIAL"          ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "251" , "REF_TO_SOURCE"             ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "253" , "GDTI"                      , 13, 17,  МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число(), МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "254" , "GLN_EXTENSION_COMPONENT"   ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "255" , "GСТ"                       , 13, 12);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "30"  , "VAR_COUNT"                 ,   , 8);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "310n", "NET_WEIGHT_kg"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "311n", "LENGTH_m"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "312n", "WIDTH_m"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "313n", "HEIGHT_m"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "314n", "AREA_m2"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "315n", "NET_VOLUME_l"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "316n", "NET_VOLUME_m3"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "320n", "NET_WEIGHT_lb"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "321n", "LENGTH_i"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "322n", "LENGTH_f"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "323n", "LENGTH_y"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "324n", "WIDTH_i"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "325n", "WIDTH_f"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "326n", "WIDTH_y"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "327n", "HEIGHT_i"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "328n", "HEIGHT_f"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "329n", "HEIGHT_y"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "330n", "GROSS_WEIGHT_kg"           ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "331n", "LENGTH_m_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "332n", "WIDTH_m_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "333n", "HEIGHT_m_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "334n", "AREA_m2_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "335n", "VOLUME_l_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "336n", "VOLUME_m3_log"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "337n", "KG_PER_m2"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "340n", "GROSS_WEIGHT_lb"           ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "341n", "LENGTH_i_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "342n", "LENGTH_f_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "343n", "LENGTH_y_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "344n", "WIDTH_i_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "345n", "WIDTH_f_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "346n", "WIDTH_y_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "347n", "HEIGHT_i_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "348n", "HEIGHT_f_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "349n", "HEIGHT_y_log"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "350n", "AREA_i2"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "351n", "AREA_f2"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "352n", "AREA_y2"                   ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "353n", "AREA_i2_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "354n", "AREA_f2_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "355n", "AREA_y2_log"               ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "356n", "NET_WEIGHT_t"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "357n", "NET_VOLUME_oz"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "360n", "NET_VOLUME_q"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "361n", "NET_VOLUME_g"              ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "362n", "VOLUME_q"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "363n", "VOLUME_g"                  ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "364n", "VOLUME_i3"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "365n", "VOLUME_f3"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "366n", "VOLUME_y3"                 ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "367n", "VOLUME_i3_log"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "368n", "VOLUME_f3_log"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "369n", "VOLUME_y3_log"             ,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "37"  , "COUNT"                     ,   ,  8);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "390n", "AMOUNT"                    ,   , 15);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "391n", "AMOUNT_ISO"                ,  3, 15);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "392n", "PRICE"                     ,   , 15);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "393n", "PRICE_ISO"                 ,  3, 15);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "394n", "PRCNT_OFF"                 ,  4,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "400" , "ORDER_NUMBER"              ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "401" , "GINC"                      ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "402" , "GSIN"                      , 17,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "403" , "ROUTE"                     ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "410" , "SHIP_TO_LOC"               , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "411" , "BILL_TO"                   , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "412" , "PURCHASE_FROM"             , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "413" , "SHIP_FOR_LOC"              , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "414" , "LOC_No"                    , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "415" , "PAY_TO"                    , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "416" , "PROD_SERV_LOC"             , 13);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "420" , "SHIP_TO_POST"              ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "421" , "SHIP_TO_POST_ISO"          ,  3,  9,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "422" , "ORIGIN"                    ,  3,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "423" , "CONTRY_INITIAL_PROCESS"    ,  3, 12);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "424" , "CONTRY_PROCESS"            ,  3,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "425" , "CONTRY_DISASSEMBLY"        ,  3, 12);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "426" , "CONTRY_FULL_PROCESS"       ,  3,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "427" , "ORIGIN_SUBDIVISION"        ,   ,  3,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7001", "NSN"                       , 13,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7002", "MEAT_CUT"                  ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7003", "EXPIRY_TIME"               , 10,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7004", "ACTIVE_POTENCY"            ,   ,  4);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7005", "CATCH_AREA"                ,   , 12,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7006", "FIRST_FREEZE_DATE"         ,  6,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7007", "HARVEST_DATE"              ,  6,  6);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7008", "AQUATIC_SPECIES"           ,   ,  3,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7009", "FISHING_GEAR_TYPE"         ,   , 10,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7010", "PROD_METHOD"               ,   ,  2,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7020", "REFURB_LOT"                ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7021", "FUNC_STAT"                 ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7022", "REV_STAT"                  ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "7023", "GIAI_ASSEMBLY"             ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "703s", "PROCESSOR_s"               ,  3, 27,  МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число(), МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "710" , "NHRN_PZN"                  ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "711" , "NHRN_CIP"                  ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "712" , "NHRN_CN"                   ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "713" , "NHRN_DRN"                  ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8001", "DIMENSIONS"                , 14,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8002", "CMT_No"                    ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8003", "GRAI"                      , 14, 16,  МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число(), МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8004", "GIAI"                      ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8005", "PRICE_PER_UNIT"            ,  6,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8006", "ITIP_or_GCTIN"             , 18,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8007", "IBAN"                      ,   , 34,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8008", "PROD_TIME"                 ,  8, 4,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8010", "CPID"                      ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8011", "CPID_SERIAL"               ,   , 12);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8012", "VERSION"                   ,   , 20,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8017", "GSRN_PROVIDER"             , 18,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8018", "GSRN_RECIPIENT"            , 18,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8019", "SRIN"                      ,   , 10);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8020", "REF_No"                    ,   , 25,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8110", "COUPON_CODE_ID"            ,   , 70,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8111", "POINTS"                    ,  4,   ,               ,               , Истина);
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8112", "PAPPERLESS_COUPON_CODE_ID" ,   , 70,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "8200", "PRODUCT_URL"               ,   , 70,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "90"  , "INTERNAL"                  ,   , 30,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "91"  , "INTERNAL1"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "92"  , "INTERNAL2"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "93"  , "INTERNAL3"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "94"  , "INTERNAL4"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "95"  , "INTERNAL5"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "96"  , "INTERNAL6"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "97"  , "INTERNAL7"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "98"  , "INTERNAL8"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	МенеджерОборудованияМаркировкаКлиентСервер_ДобавитьКодGS1(Коды, "99"  , "INTERNAL9"                 ,   , 90,               , МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка());
	
	Возврат Коды
	
КонецФункции

// Разобрать строку штрихкода в соответствии со стандартом GS1.
//
Функция МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(Знач Штрихкод) Экспорт;
	
	РезультатРазбора = Новый Структура;
	РезультатРазбора.Вставить("Разобран"      , Ложь);
	РезультатРазбора.Вставить("ОписаниеОшибки");
	РезультатРазбора.Вставить("ПредставлениеШтрихкода", "");
	РезультатРазбора.Вставить("ДанныеШтрихкода", Новый Соответствие);
	
	КодыGS1 = МенеджерОборудованияМаркировкаКлиентСерверПовтИсп_КодыGS1();
	
	Если СтрНачинаетсяС(Штрихкод, "(") Тогда
		МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1СоСкобками(Штрихкод, РезультатРазбора, КодыGS1);
	Иначе
		Разделитель = МенеджерОборудованияМаркировкаКлиентСервер_РазделительGS1();
		ЧастиШтрихкода = СтрРазделить(Штрихкод, Разделитель, Ложь);
		Для Каждого ЧастьБезРазделителей Из ЧастиШтрихкода Цикл
			МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1Служебный(ЧастьБезРазделителей, РезультатРазбора, КодыGS1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатРазбора;
	
КонецФункции

Процедура МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1СоСкобками(Штрихкод, РезультатРазбора, КодыGS1);
	
	РезультатРазбора.ПредставлениеШтрихкода = Штрихкод;
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	МинимальнаяДлинаИдентификатораПрименения  = 2;
	МаксимальнаяДлинаИдентификатораПрименения = 4;
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		Если Сред(Штрихкод, НомерСимвола, 1) <> "(" Тогда
			РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1%. Отсутствует ""("".';
					|en = 'Symbol number %1%. Missing ""("".'"), НомерСимвола);
			Возврат;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + 1;
		
		Позиция = СтрНайти(Штрихкод, ")",, НомерСимвола);
		Если Позиция = 0 Тогда
			РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Отсутствует "")"".';
					|en = 'Symbol number %1. Missing "")"".'"), НомерСимвола);
			Возврат;
		КонецЕсли;
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, Позиция - НомерСимвола);
		ДлинаИдентификатора = СтрДлина(ИдентификаторПрименения);
		Если ДлинаИдентификатора < МинимальнаяДлинаИдентификатораПрименения Или ДлинаИдентификатора > МаксимальнаяДлинаИдентификатораПрименения Тогда
			РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.';
					|en = 'Symbol number %1. Unknown usage ID (AI) %2.'"), НомерСимвола, ИдентификаторПрименения);
			Возврат;
		КонецЕсли;
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			Если ДлинаИдентификатора = МаксимальнаяДлинаИдентификатораПрименения Тогда
				ОписаниеКода = КодыGS1[Лев(ИдентификаторПрименения, МаксимальнаяДлинаИдентификатораПрименения - 1)];
				ПоложениеДесятичнойТочкиСтрокой = Прав(ИдентификаторПрименения, 1);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеКода = Неопределено Тогда
			РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номер символа %1. Неизвестный идентификатор применения(AI) %2.';
					|en = 'Symbol number %1. Unknown usage ID (AI) %2.'"), НомерСимвола, ИдентификаторПрименения);
			Возврат;
		КонецЕсли;
		
		НомерСимвола = Позиция + 1;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номер символа %5. Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)';
						|en = 'Symbol number %5. Value length (%3) for usage ID (AI) ""%1 %2"" is less than required (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина, НомерСимвола);
				Возврат;
			КонецЕсли;
			
			Если ОписаниеКода.ТипФиксированногоЗначения = МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число() Тогда
				Если Не МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры';
							|en = 'Symbol number %4. Value (%3) for usage ID (AI) ""%1 %2"" must contain only digits'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), НомерСимвола);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		
		Если ОписаниеКода.ПеременнаяДлина > 0 И Позиция < ДлинаШтрихкода Тогда
			ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, НомерСимвола);
			
			ПравильныйИдентификатор = Ложь;
			Пока ПозицияСледующегоИдентификатора > 0 И Не ПравильныйИдентификатор Цикл
				ПозицияЗакрывающегоИдентификатора = СтрНайти(Штрихкод, ")", , ПозицияСледующегоИдентификатора);
				ПредполагаемыйИдентификатор = Сред(Штрихкод, ПозицияСледующегоИдентификатора + 1,ПозицияЗакрывающегоИдентификатора - ПозицияСледующегоИдентификатора - 1);
				ПравильныйИдентификатор = СтрДлина(ПредполагаемыйИдентификатор) > 1 И СтрДлина(ПредполагаемыйИдентификатор) < 5 И МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(ПредполагаемыйИдентификатор);
				Если ПозицияСледующегоИдентификатора >= ДлинаШтрихкода Тогда
					ПозицияСледующегоИдентификатора = 0
				ИначеЕсли Не ПравильныйИдентификатор Тогда
					ПозицияСледующегоИдентификатора = СтрНайти(Штрихкод, "(",, ПозицияСледующегоИдентификатора  + 1);
				КонецЕсли;
			КонецЦикла;
			
			Если ПозицияСледующегоИдентификатора > 0 Тогда
				ЗначениеПеременное = Сред(Штрихкод, НомерСимвола, ПозицияСледующегоИдентификатора - НомерСимвола);
			Иначе
				ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			КонецЕсли;
			
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номер символа %5. Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)';
						|en = 'Symbol number %5. Value length (%3) of the variable part for usage ID (AI) ""%1 %2"" is more than required (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина, НомерСимвола);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипПеременногоЗначения = МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число() Тогда
				Если Не МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Номер символа %4. Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры';
							|en = 'Symbol number %4. Value (%3) for usage ID (AI) ""%1 %2"" must contain only digits'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), НомерСимвола);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
	КонецЦикла;
	
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

Процедура МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1Служебный(Штрихкод, РезультатРазбора, КодыGS1);
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	ПредставлениеШтрихкода = "";
	
	НомерСимвола = 1;
	Пока НомерСимвола <= ДлинаШтрихкода Цикл
		
		ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 2);
		ОписаниеКода = КодыGS1[ИдентификаторПрименения];
		Если ОписаниеКода = Неопределено Тогда
			ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 3);
			ОписаниеКода = КодыGS1[ИдентификаторПрименения];
			Если ОписаниеКода = Неопределено Тогда
				ИдентификаторПрименения = Сред(Штрихкод, НомерСимвола, 4);
				ОписаниеКода = КодыGS1[ИдентификаторПрименения];
				Если ОписаниеКода = Неопределено Тогда
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неизвестный идентификатор применения(AI) %1.';
							|en = 'Unknown usage ID (AI) %1.'"), ИдентификаторПрименения);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НомерСимвола = НомерСимвола + СтрДлина(ИдентификаторПрименения);
		
		ПоложениеДесятичнойТочкиСтрокой = "";
		Если ОписаниеКода.ЕстьПоложениеДесятичнойТочки Тогда
			ПоложениеДесятичнойТочкиСтрокой = Сред(Штрихкод, НомерСимвола, 1);
			НомерСимвола = НомерСимвола + 1;
		КонецЕсли;
		
		Значение = "";
		Если ОписаниеКода.ФиксированнаяДлина > 0 Тогда
			Значение = Сред(ШтрихКод, НомерСимвола, ОписаниеКода.ФиксированнаяДлина);
			Если СтрДлина(Значение) <> ОписаниеКода.ФиксированнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) для идентификатора применения(AI) ""%1 %2"" меньше требуемой (%4)';
						|en = 'Value length (%3) for usage ID (AI) ""%1 %2"" is less than required (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение), ОписаниеКода.ФиксированнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипФиксированногоЗначения = МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число() Тогда
				Если Не МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(Значение) Тогда
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры';
							|en = 'Value (%3) for usage ID (AI) ""%1 %2"" must contain only digits'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(Значение));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + ОписаниеКода.ФиксированнаяДлина;
		КонецЕсли;
		Если ОписаниеКода.ПеременнаяДлина > 0 Тогда
			ЗначениеПеременное = Сред(Штрихкод, НомерСимвола);
			Если СтрДлина(ЗначениеПеременное) > ОписаниеКода.ПеременнаяДлина Тогда
				РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина значения (%3) переменной части для идентификатора применения(AI) ""%1 %2"" больше требуемой (%4)';
						|en = 'Value length (%3) of the variable part for usage ID (AI) ""%1 %2"" is more than required (%4)'"),
						ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное), ОписаниеКода.ПеременнаяДлина);
				Возврат;
			КонецЕсли;
			Если ОписаниеКода.ТипПеременногоЗначения = МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число() Тогда
				Если Не МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(ЗначениеПеременное) Тогда
					РезультатРазбора.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение (%3) для идентификатора применения(AI) ""%1 %2"" должно содержать только цифры';
							|en = 'Value (%3) for usage ID (AI) ""%1 %2"" must contain only digits'"),
							ИдентификаторПрименения, ОписаниеКода.Имя, СтрДлина(ЗначениеПеременное));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			НомерСимвола = НомерСимвола + СтрДлина(ЗначениеПеременное);
			Значение = Значение + ЗначениеПеременное;
		КонецЕсли;
		
		ПредставлениеШтрихкода = ПредставлениеШтрихкода + "(" + ИдентификаторПрименения + ПоложениеДесятичнойТочкиСтрокой + ")" + Значение;
		
		ПоложениеДесятичнойТочки = 0;
		Если Не ПустаяСтрока(ПоложениеДесятичнойТочкиСтрокой) Тогда
			ПоложениеДесятичнойТочки = Число(ПоложениеДесятичнойТочкиСтрокой);
			Если ПоложениеДесятичнойТочки > 0 Тогда
				Для Индекс = 0 По ПоложениеДесятичнойТочки - СтрДлина(Значение) Цикл
					Значение = "0" + Значение;
				КонецЦикла;
				Значение = Лев(Значение, СтрДлина(Значение) - ПоложениеДесятичнойТочки) + "." + Прав(Значение, ПоложениеДесятичнойТочки);
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеДанных = Новый Структура;
		ОписаниеДанных.Вставить("ПоложениеДесятичнойТочки", ПоложениеДесятичнойТочки);
		ОписаниеДанных.Вставить("Значение", Значение);
		РезультатРазбора.ДанныеШтрихкода.Вставить(ОписаниеКода.Код, ОписаниеДанных);
		
	КонецЦикла;
	
	РезультатРазбора.ПредставлениеШтрихкода = РезультатРазбора.ПредставлениеШтрихкода + ПредставлениеШтрихкода;
	РезультатРазбора.Разобран = Истина;
	
КонецПроцедуры

// Функция возвращает разделитель GS1.
//
Функция МенеджерОборудованияМаркировкаКлиентСервер_РазделительGS1() Экспорт;
	
	Возврат Символ(29); // Dec 29
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки - Строка - проверяемая строка.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция МенеджерОборудованияМаркировкаКлиентСервер_ТолькоЦифрыВСтроке(Знач СтрокаПроверки)
	
	Если СтрДлина(СтрокаПроверки) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		Если (КодСимвола < 48) Или (КодСимвола > 57) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Число();
	
	Возврат "N";
	
КонецФункции

Функция МенеджерОборудованияМаркировкаКлиентСервер_ТипGS1Строка();
	
	Возврат "X";
	
КонецФункции

#КонецОбласти

#Область ОбработкаТабличнойЧастиКлиентСерверЛокализация

Процедура ОбработкаТабличнойЧастиКлиентСерверЛокализация_ДополнитьСтруктуруДействийПриИзмененииЭлемента(Форма, Элемент, СтруктураДействий) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	//Если Форма.ИмяФормы = "ОбщаяФорма.ПроверкаЗаполненияДокументов" Тогда
	//	Если Элемент = "Номенклатура" Тогда
	//		Если Форма.ИспользоватьАкцизныеМарки Тогда
	//			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция");
	//			СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки", Новый Структура("ИмяКолонкиКоличество", "КоличествоФакт"));
	//			ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
	//			ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Истина);
	//			ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагМаркируемаяПродукция", Истина);
	//			СтруктураДействий.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
	//		КонецЕсли;
	//	ИначеЕсли Элемент = "НоменклатураПризнаки" Тогда
	//		Если Форма.ИспользоватьАкцизныеМарки Тогда
	//			СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
	//			СтруктураДействий.Вставить("ЗаполнитьВидПродукцииИС", Новый Структура("Номенклатура", "ВидПродукцииИС"));
	//		КонецЕсли;
	//	ИначеЕсли Элемент = "НоменклатураИзменение" Тогда
	//		Если Форма.ИспользоватьАкцизныеМарки Тогда
	//			СтруктураДействий.Вставить("ЗаполнитьИндексАкцизнойМарки", Новый Структура("ИмяКолонкиКоличество", "КоличествоФакт"));
	//		КонецЕсли;
	//	ИначеЕсли Элемент = "ОбработатьШтрихкоды" Тогда
	//		СтруктураДействий.МаркируемаяАлкогольнаяПродукцияВТЧ = Форма.ИспользоватьАкцизныеМарки;
	//	КонецЕсли;
	//Иначе
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		Если Элемент = "Номенклатура" Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
				СтруктураДействий.Вставить("ЗаполнитьВидПродукцииИС", Новый Структура("Номенклатура", "ВидПродукцииИС"));
			КонецЕсли;
		ИначеЕсли Элемент = "НоменклатураПризнаки" Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция", Новый Структура("Номенклатура", "МаркируемаяПродукция"));
				СтруктураДействий.Вставить("ЗаполнитьВидПродукцииИС", Новый Структура("Номенклатура", "ВидПродукцииИС"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти