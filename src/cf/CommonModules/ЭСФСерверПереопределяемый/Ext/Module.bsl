
// См. ЭСФСервер.СинхронизацияСИСЭСФПриЗапуске()
Функция СинхронизацияСИСЭСФПриЗапуске() Экспорт
	
	СинхронизацияСИСЭСФПриЗапуске = Ложь;
	
	Возврат СинхронизацияСИСЭСФПриЗапуске;
	
КонецФункции

// Возвращает номер документа на печать.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.<Имя> - Ссылка на документ, для которого необходимо получить номер на печать.
//
// Возвращаемое значение:
//  Строка - Номер документа, который может использоваться для печати.
//
Функция ПолучитьНомерНаПечать(ДокументСсылка) Экспорт
	
	Возврат СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументСсылка.Номер, Истина, Истина));
	
КонецФункции

// См. ЭСФСервер.СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ()
Функция СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ() Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("СтруктурнаяЕдиница");
	ТаблицаРезультат.Колонки.Добавить("Представление");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.Представление КАК Представление,
	|	"""" КАК ПредставлениеГоловнойОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.Представление,
	|	Организации.ГоловнаяОрганизация.Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		
		НоваяСтрока.СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
		
		Если ПустаяСтрока(Выборка.ПредставлениеГоловнойОрганизация) Тогда
			НоваяСтрока.Представление = Выборка.Представление;
		Иначе
			Представление = "%СтруктурнаяЕдиница% (%ГоловнаяОрганизация%)";
			Представление = СтрЗаменить(Представление, "%СтруктурнаяЕдиница%",  Выборка.Представление);
			Представление = СтрЗаменить(Представление, "%ГоловнаяОрганизация%", Выборка.ПредставлениеГоловнойОрганизация);
			НоваяСтрока.Представление = Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьОрганизациюпоУмолчанию() Экспорт
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
КонецФункции

Функция ИнформационнаяБазаФайловая() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

// См. ЭСФСерверПовтИсп.СписокПрефиксовУзлов()
Функция СписокПрефиксовУзлов() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// См. ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы()
Функция НовоеСоответствиеАкцизы() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

// Обработчик события ПриСозданииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФПриСозданииНаСервере(Форма) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ЭСФ добавляем в группу ТоварыГруппа2
	ЭтоВходящееЭСФ = Форма.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
	
	Если ЭтоВходящееЭСФ Тогда
		ИнициализироватьЕдиницыИзмерения(Форма, "Товары", "ТоварыГруппа11", "ТоварыЕдиницаИзмерения",,,"Ед. изм.", ЭтоВходящееЭСФ);
		ИнициализироватьЕдиницыИзмерения(Форма, "Товары", "ТоварыГруппа11", "ТоварыЕдиницаИзмеренияХраненияОстатков",, "ХраненияОстатков", "Ед. изм. остатков", ЭтоВходящееЭСФ);
	Иначе
		ИнициализироватьЕдиницыИзмерения(Форма, "Товары", "ТоварыГруппа2", "ТоварыЕдиницаИзмерения");
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФФормаСпискаИВыбораПриСозданииНаСервере(Форма) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере в форме документа ЭСФ.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа ЭСФ.
//
Процедура ЭСФПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма) Экспорт
	
	//++ НЕ ЭСФ
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	//-- НЕ ЭСФ
КонецПроцедуры

Процедура УстановитьСпособОбменаСчетаФактуры(СсылкаСчетФактура, СпособВыставленияПолучения = "Электронно") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипСчетФактураВыданный 	 = ТипЗнч(СсылкаСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный");
	ТипСчетФактураПолученный = ТипЗнч(СсылкаСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный");
	ТипЗаписьКнигиПокупок 	 = ТипЗнч(СсылкаСчетФактура) = Тип("ДокументСсылка.ЗаписьКнигиПокупок");
	
	ВЭлектронномВиде = Неопределено;
	
	Если ТипСчетФактураВыданный Тогда 
		ВЭлектронномВиде = СсылкаСчетФактура.ВыставленВЭлектронномВиде;
	ИначеЕсли ТипСчетФактураПолученный Тогда
		ВЭлектронномВиде = СсылкаСчетФактура.ПолученВЭлектронномВиде;
	КонецЕсли;
		
	Если ВЭлектронномВиде = Истина ИЛИ ТипЗаписьКнигиПокупок Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСчетФактура = СсылкаСчетФактура.ПолучитьОбъект();
	Если ТипЗнч(ОбъектСчетФактура) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		// ++ УПК
		ОбъектСчетФактура.ВыставленВЭлектронномВиде = (ВРег(СпособВыставленияПолучения) = "ЭЛЕКТРОННО");
		// -- УПК
	ИначеЕсли ТипЗнч(ОбъектСчетФактура) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		// ++ УПК
		ОбъектСчетФактура.ПолученВЭлектронномВиде = (ВРег(СпособВыставленияПолучения) = "ЭЛЕКТРОННО");
		// -- УПК
	КонецЕсли;
	
	Если ОбъектСчетФактура.Проведен Тогда
		ОбъектСчетФактура.Записать(РежимЗаписиДокумента.Запись);
		ЭСФСерверУТ.ОбновитьДвиженияДокументаПоРегиструЖурналУчетаСчетовФактур(ОбъектСчетФактура.Ссылка);
	Иначе
		ОбъектСчетФактура.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если СЕ является ИП, иначе возвращает Ложь.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Справочники.ПрофилиИСЭСФ.СтруктурнаяЕдиница.
//
// Возвращаемое значение:
//  Булево - Истина, если структурная единица является индивидуальным предпринимателем, иначе Ложь.
//
Функция ЭтоИндивидуальныйПредприниматель(Знач СтруктурнаяЕдиница) Экспорт
	
	ЭтоИП = Ложь;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		
		Если СтруктурнаяЕдиница.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
			ЭтоИП = Истина;
			
		Иначе
			
			ЭтоИП = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ЭтоИП = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоИП;
	
КонецФункции

Функция ВалютаРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	Возврат ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ПараметрыВыполнения.ИдентификаторФормы,
		ИмяЭкспортнойПроцедуры, 
		ПараметрыПроцедуры, 
		ПараметрыВыполнения.НаименованиеФоновогоЗадания, 
		Ложь);
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с файлами

Функция ДобавитьФайл(
	Знач ВладелецФайла,
	Знач ИмяБезРасширения,
	Знач РасширениеБезТочки = Неопределено,
	Знач ВремяИзменения = Неопределено,
	Знач ВремяИзмененияУниверсальное = Неопределено,
	Знач АдресФайлаВоВременномХранилище,
	Знач АдресВременногоХранилищаТекста = "",
	Знач Описание = "") Экспорт
					 
	Возврат ПрисоединенныеФайлы.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		РасширениеБезТочки,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		АдресФайлаВоВременномХранилище,
		АдресВременногоХранилищаТекста,
		Описание);
	
КонецФункции

Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",") Экспорт
	
	Возврат Новый Массив;	
	
КонецФункции

// Обработчик подписки владельца присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Или Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
		
	УстановитьПривилегированныйРежим(Истина);
		
	Если Источник.ПометкаУдаления = Источник.Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФПрисоединенныеФайлы.Ссылка,
	|	ЭСФПрисоединенныеФайлы.Редактирует
	|ИЗ
	|	Справочник.ЭСФПрисоединенныеФайлы КАК ЭСФПрисоединенныеФайлы
	|ГДЕ
	|	ЭСФПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если Источник.ПометкаУдаления И Не РезультатЗапроса.Редактирует.Пустая() Тогда
						
			ТекстИсключения = НСтр(
				"ru = '""%Источник%"" не может быть удален,
				|т.к. содержит присоединенный файл ""%ИмяФайла%"",
				|занятый для редактирования.'"); 
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Источник%", Строка(Источник.Ссылка));
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяФайла%", Строка(РезультатЗапроса.Ссылка));
			
			ВызватьИсключение ТекстИсключения; 
			
		КонецЕсли;
		
		ФайлОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		
	КонецЦикла; 
		
КонецПроцедуры      

////////////////////////////////////////////////////////////////////////////////
// Получение внешней или встроенной обработки "ОбменЭСФ"

Функция ИспользоватьВнешнююОбработку() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными)
		И ПравоДоступа("Чтение", Метаданные.Константы.ЭСФВнешнийМодульОбменаДанными)
		И Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Получить();
	
КонецФункции

Функция ПодключитьВнешнююОбработку() Экспорт
	
	ДвоичныеДанныеОбработки = Константы.ЭСФВнешнийМодульОбменаДанными.Получить().Получить();
	ИмяОбработки_ОбменЭСФ = Неопределено;
	Если ДвоичныеДанныеОбработки <> Неопределено Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
		Попытка
			ИмяОбработки_ОбменЭСФ = ВнешниеОбработки.Подключить(Адрес, ЭСФКлиентСервер.ИмяВнешнейОбработкиОбменЭСФ(), Ложь);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось загрузить внешний модуль для документооборота с ИС ЭСФ:
				|" + ИнформацияОбОшибке().Описание + "
				|Будет использован модуль, встроенный в конфигурацию.");
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяОбработки_ОбменЭСФ;
	
КонецФункции

Функция СоздатьВнешнююОбработкуИзФайла() Экспорт

	Возврат Неопределено;
	
КонецФункции

// См. ЭСФСерверПовтИсп.ОбработкаОбменЭСФ()
Функция ОбработкаОбменЭСФ() Экспорт
	
	Если ИспользоватьВнешнююОбработку() Тогда
		Возврат НовыйЭкземплярВнешнейОбработкиОбменЭСФ();	
	Иначе
		Возврат Обработки.ОбменЭСФ.Создать();	
	КонецЕсли;
	
КонецФункции


// См. ЭСФСерверПовтИсп.НовыйЭкземплярВнешнейОбработкиОбменЭСФ()
Функция НовыйЭкземплярВнешнейОбработкиОбменЭСФ() Экспорт 
	
	ИмяВнешнейОбработки = ПодключитьВнешнююОбработку();
	ВнешняяОбработкаОбменЭСФ = Неопределено;
	Если ИмяВнешнейОбработки <> Неопределено Тогда
		ВнешняяОбработкаОбменЭСФ = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
	КонецЕсли;
	
	Возврат ВнешняяОбработкаОбменЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Запрет изменения реквизитов счетов-фактур для которых есть ЭСФ

// Задает какие реквизиты, табличные части, реквизиты табличных частей, счета-фактуры могут изменяться.
//
// Если на основании счета-фактуры создан и отправлен ЭСФ, 
// то изменяться могут не все данные счета-фактуры, 
// чтобы не произошло рассинхронизации между счетом-фактурой и ЭСФ.
//
// Параметры:
//  МассивИзменяемыхРеквизитов - Массив - Массив имен объектов, которые можно изменять.
//                                       
Процедура ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураВыданный(МассивИзменяемыхРеквизитов) Экспорт
	
	// // Например:
	// 
	// // Значение реквизита Комментарий может изменяться.
	// МассивИзменяемыхРеквизитов.Добавить("Комментарий");  
	// 
	// // Все параметры табличной части Товары могут изменяться,
	// // например: количество строк, порядок строк, значения реквизитов строк.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.*");  
	//
	// // В табличной части Товары могут изменяться только реквизиты Наименование и Количество.
	// // Порядок строк, количество строк и остальные реквизиты должны остаться неизменными.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Наименование");
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Количество");
	
	МассивИзменяемыхРеквизитов.Добавить("ДокументОснование");
	МассивИзменяемыхРеквизитов.Добавить("БанковскийСчетОрганизации");
	МассивИзменяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	МассивИзменяемыхРеквизитов.Добавить("ИдентификаторПлатежа");
	МассивИзменяемыхРеквизитов.Добавить("Комментарий");
	МассивИзменяемыхРеквизитов.Добавить("СтранаНазначения");
	МассивИзменяемыхРеквизитов.Добавить("ВыставленВЭлектронномВиде");
	
КонецПроцедуры

// Задает какие реквизиты, табличные части, реквизиты табличных частей, счета-фактуры могут изменяться.
//
// Если счет-фактура создан на основании ЭСФ, 
// то изменяться могут не все данные счета-фактуры, 
// чтобы не произошло рассинхронизации между счетом-фактурой и ЭСФ.
//
// Параметры:
//  МассивИзменяемыхРеквизитов - Массив - Массив имен объектов, которые можно изменять.
//                                       
Процедура ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураПолученный(МассивИзменяемыхРеквизитов) Экспорт
	
	// // Например:
	// 
	// // Значение реквизита Комментарий может изменяться.
	// МассивИзменяемыхРеквизитов.Добавить("Комментарий");  
	// 
	// // Все параметры табличной части Товары могут изменяться,
	// // например: количество строк, порядок строк, значения реквизитов строк.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.*");  
	//
	// // В табличной части Товары могут изменяться только реквизиты Наименование и Количество.
	// // Порядок строк, количество строк и остальные реквизиты должны остаться неизменными.
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Наименование");
	// МассивИзменяемыхРеквизитов.Добавить("Товары.Количество");
	
	МассивИзменяемыхРеквизитов.Добавить("ДокументОснование");
	МассивИзменяемыхРеквизитов.Добавить("Комментарий");
	МассивИзменяемыхРеквизитов.Добавить("ПолученВЭлектронномВиде");
	МассивИзменяемыхРеквизитов.Добавить("ДатаЗаписиКнигиПокупок");
	МассивИзменяемыхРеквизитов.Добавить("ОтнестиКПредыдущемуОтчетномуКварталу");
	МассивИзменяемыхРеквизитов.Добавить("ДокументыОснования.*");
	
КонецПроцедуры



///////////////////////////////////////////////////////////////////////////////
// Сторнирование счетов-фактур

// Возвращает данные документов, сторнирующих счет-фактуру.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - 
//   Счет-фактура, для которого необходимо получить данные сторнирующих документов.
//
// Возвращаемое значение:
//  Массив - Данные сторнирующих документов. Каждый элемент массива:
//   Структура - Данные сторнирующего документа.
//    |- Ссылка - Ссылка на сторнирующий документ.
//  Если сторниурующие документы не найдены, то возвращает пустой массив.
//
Функция ДокументыСторнирующиеСчетФактуру(Знач СчетФактура) Экспорт
	
	МассивСторнирований = Новый Массив;
	
	Возврат МассивСторнирований;
	
КонецФункции

// Синхронизирует сторнирующий документ со счетом-фактурой.
//
// Параметры:
//  СчетФактураОбъект - ДокументОбъект.СчетФактураВыданный, ДокументОбъект.СчетФактураПолученный -
//   Счет-фактура, на основании которого необходимо обновить сторнирующий документ.
//  ОбъектСторно - ДокументОбъект.<ИмяСторно> - Сторнирующий документ, который необходимо обновить.
//
Процедура ОбновитьСторнирующийДокумент(Знач СчетФактураОбъект, ОбъектСторно) Экспорт
	
КонецПроцедуры

// Обновляет движения сторнирующего документа на основании движений счета-фактуры.
//
// Параметры:
//  ДвиженияСчетаФактуры - КоллекцияДвижений - Коллекция движений счета-фактуры полученного или выданного.
//  ОбъектСторно - ДокументОбъект.<ИмяСторно> - Сторнирующий документ, 
//   движения которого необходимо обновить на основании движений счета-фактуры.
// 
Процедура ОбновитьДвиженияСторнирующегоДокумента(Знач ДвиженияСчетаФактуры, ОбъектСторно) Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие

// Возвращает сокращенный уникальный идентификатор текущей конфигурации
//
Функция ИДКонфигурации() Экспорт
	МетаданныеИмя = Метаданные.Имя;
		
	Если МетаданныеИмя = "БухгалтерияДляКазахстана" ИЛИ МетаданныеИмя = "БухгалтерияДляКазахстанаБазовая" Тогда
		Возврат "БухгалтерияДляКазахстана";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомДляКазахстана" Тогда
		Возврат "ЗарплатаИУправлениеПерсоналомДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеТорговлейДляКазахстана" ИЛИ МетаданныеИмя = "УправлениеТорговлейДляКазахстанаБазовая" Тогда
		Возврат "УправлениеТорговлейДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеТорговымПредприятиемДляКазахстана" Тогда
		Возврат "УправлениеТорговымПредприятиемДляКазахстана";
	ИначеЕсли МетаданныеИмя = "УправлениеПроизводственнымПредприятиемДляКазахстана" Тогда
		Возврат "УправлениеПроизводственнымПредприятиемДляКазахстана";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыПользователя(Пользователь) Экспорт
	
	РеквизитыПользователя = Новый Структура("ФИО, ИдентификационныйНомер, Фамилия, Имя, Отчество, Должность");
	Если ЗначениеЗаполнено(Пользователь.ФизическоеЛицо) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Наименование КАК ФИО,
		|	ФизическиеЛица.ИНН КАК ИдентификационныйНомер
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизическоеЛицо";
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", Пользователь.ФизическоеЛицо);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(РеквизитыПользователя, Выборка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПользователя.ФИО) И НЕ ЗначениеЗаполнено(РеквизитыПользователя.Фамилия) Тогда
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(РеквизитыПользователя.ФИО);
			ЗаполнитьЗначенияСвойств(РеквизитыПользователя, СтруктураФИО);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеквизитыПользователя;
	
КонецФункции

Функция РеквизитыОрганизации(Организация) Экспорт
	
	РеквизитыОрганизации = Новый Структура("ИдентификационныйНомер, Наименование, Адрес, Телефон");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Ссылка,
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ ВТКонтактнаяИнформация
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
	|	И ОрганизацииКонтактнаяИнформация.Вид В(
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации),
	|		ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Наименование,
	|	Организации.ИНН КАК ИдентификационныйНомер,
	|	ЕСТЬNULL(Адрес.Представление, """") КАК Адрес,
	|	ЕСТЬNULL(Телефон.Представление, """") КАК Телефон
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВТКонтактнаяИнформация.Ссылка КАК Ссылка,
	|			ВТКонтактнаяИнформация.Представление КАК Представление
	|		ИЗ
	|			ВТКонтактнаяИнформация КАК ВТКонтактнаяИнформация
	|		ГДЕ
	|			ВТКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)) КАК Адрес
	|		ПО Организации.Ссылка = Адрес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ВТКонтактнаяИнформация.Ссылка КАК Ссылка,
	|			ВТКонтактнаяИнформация.Представление КАК Представление
	|		ИЗ
	|			ВТКонтактнаяИнформация КАК ВТКонтактнаяИнформация
	|		ГДЕ
	|			ВТКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)) КАК Телефон
	|		ПО Организации.Ссылка = Телефон.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РеквизитыОрганизации, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

// Возвращает роль, с помощью которой пользователь при открытии программы может видеть
// проблемные ЭСФ других пользователей
Функция ДоступнаРольБезусловногоРедактированияЭСФ() Экспорт
	Возврат РольДоступна("ПолныеПрава");
КонецФункции

// Возвращает роль, для которой доступно открытие формы очереди
Функция ДоступнаРольРедактированияОчередиОтправкиЭСФ() Экспорт
	Возврат РольДоступна("ПолныеПрава")
			ИЛИ РольДоступна("ДобавлениеИзменениеЭСФ");
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Булево: Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента) Экспорт

	Возврат ОбщегоНазначенияБП.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеДокумента);

КонецФункции // ЕстьРеквизитДокумента()

Процедура ЗаполнитьКодыЭСФЕдиницИзмерения() Экспорт
		
	КомментарийОтсутствияКодаЭСФ	= НСтр("ru='Не удалось определить ""Код по классификатору ИС ЭСФ"" для единицы измерения с кодом %Код%'");
	КомментарийОтсутствияКода 		= НСтр("ru='Не заполнен Код единицы измерения ""%Наименование%""'");
	
	Запрос = Новый Запрос;                    
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассификаторЕдиницИзмерения.Ссылка,
		|	КлассификаторЕдиницИзмерения.Код
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК КлассификаторЕдиницИзмерения
		|ГДЕ
		|	НЕ КлассификаторЕдиницИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|	И КлассификаторЕдиницИзмерения.КодЭСФ = """"";
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСправочник = РезультатЗапроса.Выбрать();

	Дерево = Справочники.УпаковкиЕдиницыИзмерения.ПолучитьДанныеКлассификатора();
	
	Пока ВыборкаСправочник.Следующий() цикл
		
		Код = СокрЛП(ВыборкаСправочник.Код);
		
		Если ЗначениеЗаполнено(Код) Тогда
			
			СтруктураПоиска = Новый Структура("КодЧисловой", Код);
			СтрокаДерева = Дерево.Строки.НайтиСтроки(СтруктураПоиска, Истина);

			Если СтрокаДерева.Количество() > 0 И ЗначениеЗаполнено(СтрокаДерева[0].КодЭСФ) Тогда
					
				СправочникОбъект = ВыборкаСправочник.Ссылка.ПолучитьОбъект();
				СправочникОбъект.КодЭСФ = СтрокаДерева[0].КодЭСФ;
				
				Попытка
					СправочникОбъект.Записать();
				Исключение
					ТекстСообщения = НСтр("ru='Операция не выполнена'");
					ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
					
			Иначе
				
				ТекстОшибки = СтрЗаменить(КомментарийОтсутствияКодаЭСФ,"%Код%", Код);
				ЗаписьЖурналаРегистрации("ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения", УровеньЖурналаРегистрации.Предупреждение,, ВыборкаСправочник, ТекстОшибки);

			КонецЕсли;
			
		Иначе
			
			ТекстОшибки = СтрЗаменить(КомментарийОтсутствияКода,"%Наименование%", ВыборкаСправочник.Ссылка); 
			ЗаписьЖурналаРегистрации("ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения", УровеньЖурналаРегистрации.Предупреждение,,ВыборкаСправочник, ТекстОшибки + Код);	
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

Функция ЭтоУслуга(Номенклатура) Экспорт
	
	Услуга = Ложь;
	
	Если ЗначениеЗаполнено(Номенклатура) И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Услуга = Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Возврат Услуга;	
	
КонецФункции

Процедура ПолучательРозничныйПокупатель(ПолучателиСтрока, ВерсияЭСФ) Экспорт 
	
КонецПроцедуры

Функция ЭтоЭСФПоРознице(ОбъектЭСФ) Экспорт 
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьБИНФилиалаПокупателя(ПолучателиСтрока, ВыборкаРеквизитыПолучателя) Экспорт
	
	Если ВыборкаРеквизитыПолучателя.Грузополучатель <> ВыборкаРеквизитыПолучателя.Контрагент Тогда
		РеквизитыГрузополучателя = ЗначенияРеквизитовОбъекта(ВыборкаРеквизитыПолучателя.Грузополучатель, "ОбособленноеПодразделение, ИНН, ГоловнойКонтрагент");
		Если РеквизитыГрузополучателя.ОбособленноеПодразделение <> Неопределено
			И РеквизитыГрузополучателя.ОбособленноеПодразделение
			И ВыборкаРеквизитыПолучателя.Контрагент = РеквизитыГрузополучателя.ГоловнойКонтрагент Тогда
			ПолучателиСтрока.БИНФилиала = РеквизитыГрузополучателя.ИНН;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(ПоставщикОрганизация) Экспорт
	
	ЯвляетсяСтруктурнымПодразделениемНерезидента = Ложь;
	
	Если ПоставщикОрганизация.ОбособленноеПодразделение Тогда
			
		Если Лев(ПоставщикОрганизация.ГоловнаяОрганизация.КБЕ, 1) = "2" Тогда
			ЯвляетсяСтруктурнымПодразделениемНерезидента = Истина;
		КонецЕсли;

	КонецЕсли;
		
	Возврат ЯвляетсяСтруктурнымПодразделениемНерезидента;
	
КонецФункции

// Получает данные о единице измерения для заполнения ТЧ в ЭСФ.
//
Функция ПолучитьДанныеЕдиницыИзмерения(Ссылка) Экспорт
	
	ЕдиницаИзмерения = "";
	Код = "";
	
	Если Не Ссылка.Пустая() Тогда
		ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения), Ссылка.ЕдиницаИзмерения.Наименование, Ссылка.Наименование);
		Код = ?(ЗначениеЗаполнено(Ссылка.ЕдиницаИзмерения), Ссылка.ЕдиницаИзмерения.КодЭСФ, Ссылка.КодЭСФ);
	КонецЕсли;
	
	ДанныеЕдиницы = Новый Структура("Наименование, Код", ЕдиницаИзмерения, Код);
	
	Возврат ДанныеЕдиницы;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Фоновые задания

Функция СообщенияФоновогоЗадания(ИдентификаторЗадания) Экспорт

	// не переопределять на серверный модуль, тк возникает ошибка передачи мутабельного значения
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции
 
Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область РегламентноеЗадание

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина, для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Пример:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	//Настройки регламентных заданий определены в процедуре РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
	
КонецПроцедуры

Процедура ПриНачалеВыполненияРегламентногоЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СинхронизацияСИСЭСФ);
	
КонецПроцедуры	

// Проверяет наличие текущего пользователя при выполнении рег.задания по синхронизации ЭСФ
Функция ПроверитьНаличиеТекущегоПользователя(ТекущийПользователь) Экспорт
	
	СсылкаНеуказанногоПользователя = Пользователи.СсылкаНеуказанногоПользователя();
	Если ТекущийПользователь = СсылкаНеуказанногоПользователя Тогда
		// Если текущий пользователь это неуказанный пользователь, значит задание выполняется на сервере
		Возврат Истина;
	Иначе	
		// В этом случае для задания берем активного пользователя
		Возврат Ложь;
	КонецЕсли;
	
	
	// Содержание функции для БК 2:
	//
	//Если ТекущийПользователь.Пустая() Тогда
	//	Возврат Истина;
	//Иначе	
	//	Возврат Ложь;
	//КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПроведения

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ДокументЭСФ_ОбработкаПроверкиЗаполнения(ОбъектЭСФ, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	//++ НЕ ЭСФ
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ОбъектЭСФ.Дата);
	ЕстьТовары = Ложь;
	ЕстьТоварыВС = Ложь;

	Если ВедетсяУчетПоТоварамНаВС Тогда
		ДокументЭСФ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ОбъектЭСФ, ОбъектЭСФ.Товары, "Товары", Отказ, ЕстьТовары, ЕстьТоварыВС);
	КонецЕсли;
	
	Если Не ВедетсяУчетПоТоварамНаВС ИЛИ НЕ ЕстьТовары Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;
	//-- НЕ ЭСФ
КонецПроцедуры

Процедура ДокументЭСФ_ПроверитьЗаполнениеТабличнойЧастиПострочно(ОбъектЭСФ, ПроверяемаяТабличнаячасть, ИмяТабличнойЧасти, Отказ, ЕстьТовары = Ложь, ЕстьТоварыВС = Ложь)
	//++ НЕ ЭСФ	
	Для Каждого СтрокаТабличнойЧасти Из ПроверяемаяТабличнаячасть Цикл
		
		Если СтрокаТабличнойЧасти.ПризнакПроисхождения <> Строка(6) Тогда
			                                                                
			ЕстьТовары = Истина;
			ТекстСообщенияШаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар) Тогда
				//Товар
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, 
				"Товар", 
				Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), 
				ИмяТабличнойЧасти);

				Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].Товар";
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектЭСФ, Поле, "Объект", Отказ);
			КонецЕсли;	
			
			//Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			//	//ЕдиницаИзмерения
			//	ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщенияШаблон, 
			//	"ЕдиницаИзмерения", 
			//	Формат(СтрокаТабличнойЧасти.НомерСтроки, "ЧН=0; ЧГ="), 
			//	ИмяТабличнойЧасти);

			//	Поле = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки-1, "ЧН=0; ЧГ=") + "].ЕдиницаИзмерения";
			//	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, ОбъектЭСФ, Поле, "Объект", Отказ);
			//КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.ПризнакУчетаНаВиртуальномСкладе Тогда
			ЕстьТоварыВС = Истина;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ЭСФ
КонецПроцедуры

Функция ПроверитьВозможностьЗаписиСчетаФактуры(Знач Объект, МассивСообщений) Экспорт
	
	РазрешитьЗапись = Истина;
	
	Возврат РазрешитьЗапись;
	
КонецФункции

#КонецОбласти

#Область ДлительныеОперации

Функция ОперацияВыполнена(Знач ИдентификаторЗадания, Знач ИсключениеПриОшибке = Ложь, Знач ВыводитьПрогрессВыполнения = Ложь, 
	Знач ВыводитьСообщения = Ложь) Экспорт
	
	Возврат ДлительныеОперации.ОперацияВыполнена(ИдентификаторЗадания, ИсключениеПриОшибке, ВыводитьПрогрессВыполнения, ВыводитьСообщения);
	
КонецФункции

// Отменяет выполнение фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
// 
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти 

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ НЕ ЭСФ
	
	// Электронный счет-фактура
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭСФ";
	КомандаПечати.Представление = НСтр("ru = 'Электронный счет-фактура'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 50;
	
	// Настраиваемый комплект документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭСФ";
	КомандаПечати.Представление = НСтр("ru = 'Настраиваемый комплект документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Настраиваемый комплект'");
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	КомандаПечати.Порядок = 75;
	//-- НЕ ЭСФ
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура ПечатьЭСФ(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ НЕ ЭСФ
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	// Печать электронного счета-фактуры.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСФ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭСФ",
			НСтр("ru = 'Электронный счет-фактура'"),
			Документы.ЭСФ.ПечатьЭСФ(МассивОбъектов, ОбъектыПечати),
			,
			"Обработка.ОбменЭСФ.ПФ_MXL_ЭСФ");
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	//-- НЕ ЭСФ	
КонецПроцедуры

#КонецОбласти 

#Область НомераГТД

Функция ВедетсяУчетПоТоварамОрганизаций(ДатаДокумента) Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	
КонецФункции

#КонецОбласти 

#Область ОбщегоНазначения

Функция ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент = Ложь) Экспорт
	
	Возврат Организация;//ОбщегоНазначенияБК.ПолучитьСтруктурнуюЕдиницу(Организация, СтруктурноеПодразделение, КадровыйДокумент);
		
КонецФункции // ПолучитьСтруктурнуюЕдиницу()

Функция ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент) Экспорт
	
	Возврат ОрганизацияКонтрагент; //УчетНДСИАкциза.ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент);
	
КонецФункции // ПолучитьПлательщикаНДСВСчетеФактуре(ОрганизацияКонтрагент)

// Функция предназначена для заполнения табличных частей документов "Участники совместной деятельности".
// Возвращает измененную табличную часть.
//
// Параметры:
//  ДоговорКонтрагента  - договор с контрагентом, по которому должна быть заполнена таб часть,
//  ТабЧастьУчастникиСовместнойДеятельности - табличная часть документа
//
Функция ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(ДоговорКонтрагента, ТабЧастьУчастникиСовместнойДеятельности) Экспорт

	Возврат Неопределено;//ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(ДоговорКонтрагента, ТабЧастьУчастникиСовместнойДеятельности);
							
КонецФункции

//++ НЕ ЭСФ
Процедура ЗаполнитьЕдиницыИзмеренияХраненияОстатков(МассивЭСФ) Экспорт
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		Для Каждого СтрокаТаблицыТоваров Из ЭСФ.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицыТоваров.Товар) И ТипЗнч(СтрокаТаблицыТоваров.Товар)= Тип("СправочникСсылка.Номенклатура") Тогда
				СтрокаТаблицыТоваров.ЕдиницаИзмеренияХраненияОстатков = СтрокаТаблицыТоваров.Товар.ЕдиницаИзмерения;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПустуюСсылкуЕдиницыИзмерения() Экспорт
	
	Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
КонецФункции	
	
//-- НЕ ЭСФ

Процедура ЗаполнитьНаименованияЕдиницИзмерений(ТаблицаСоответствий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент КАК Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаСоответствий.Товар КАК Товар,
	|	ТаблицаСоответствий.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	&ТаблицаСоответствий КАК ТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.Контрагент КАК Контрагент,
	|	ТаблицаСоответствий.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаСоответствий.ТоварНаименование КАК ТоварНаименование,
	|	ТаблицаСоответствий.Товар КАК Товар,
	|	ТаблицаСоответствий.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаСоответствий.КоэффициентПересчета КАК КоэффициентПересчета,
	|	ВЫБОР
	|		КОГДА КлассификаторЕдиницИзмерения.Ссылка ЕСТЬ NULL
	|			ТОГДА ТаблицаСоответствий.ЕдиницаИзмерения
	|		КОГДА КлассификаторЕдиницИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			ТОГДА КлассификаторЕдиницИзмерения.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ КлассификаторЕдиницИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК КлассификаторЕдиницИзмерения
	|		ПО ТаблицаСоответствий.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка";
	
	Запрос.Параметры.Вставить("ТаблицаСоответствий", ТаблицаСоответствий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСоответствий = РезультатЗапроса.Выгрузить();
		
КонецПроцедуры

Функция ПроверитьВозможностьСозданияДокументовЭСФ(Знач МассивСчетовФактур, Знач ПоказыватьСообщения = Истина, ТекстыСообщений = Неопределено) Экспорт
	
	ВозможноСоздатьВсеЭСФ = Истина;
	
	Возврат ВозможноСоздатьВсеЭСФ;
	
КонецФункции

Функция ДокументВыписанНаБумажномНосителе(Форма, ИмяРеквизитаСпособОбмена) Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция НоваяПечатнаяФормаЭСФ(Знач СчетФактура) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%СчетФактураДата" Тогда
			Значение = "ДатаВыставления";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляУслуга" Тогда
			Значение = "Товары.Номенклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга) КАК Услуга";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляУслугаСпрНоменклатура" Тогда
			Значение = "СпрНоменклатура.ТипНоменклатуры = Значение(Перечисление.ТипыНоменклатуры.Услуга) КАК Услуга";
		
		
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ТекстПоляТипИзмеряемойВеличины" Тогда	
			Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
								"Ссылка",
								"ТаблицаТовары.ЕдиницаИзмерения",
								"ТаблицаТовары.Номенклатура");
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДанныеДокументаЕдиницаИзмерения" Тогда	
			Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
								"Ссылка",
								"вт_ДанныеДокумента.ЕдиницаИзмерения",
								"вт_ДанныеДокумента.Товар");
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФТекстПоляТипИзмеряемойВеличины" Тогда	
			Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Ссылка",
						"ЭСФТовары.ЕдиницаИзмерения",
						"ЭСФТовары.Товар");
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭДВСТекстПоляЕдиницаИзмеренияИсходныеТовары" Тогда	
			Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Ссылка",
						"ЭДВСИсходныеТовары.ЕдиницаИзмерения",
						"ЭДВСИсходныеТовары.Товар");
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭДВСТекстПоляЕдиницаИзмеренияТовары" Тогда	
			Значение = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
						"Ссылка",
						"ЭДВСТовары.ЕдиницаИзмерения",
						"ЭДВСТовары.Товар");
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%СтруктурнаяЕдиницаИдентификационныйНомер"	Тогда	
			Значение = "ИНН";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КонтрагентИНН"	Тогда	
			Значение = "ИНН";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ОрганизацияИНН"	Тогда	
			Значение = "ИНН";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%БуквенныйКодВалюты"	Тогда	
			Значение = "Наименование";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаВладелецДоговора"	Тогда	
			Значение = "Контрагент";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ИмяРеквизитаОрганизацияДоговора"	Тогда	
			Значение = "Организация";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорНомер"	Тогда	
			Значение = "Номер";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ДоговорДата"	Тогда	
			Значение = "Дата";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФДоговорПоставкиУчастникСРП"	Тогда	
			Значение = "Ложь ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%УсловиеДоговорыКонтрагентовУчастникСРП"	Тогда	
			Значение = "";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%Получатель_УчастникСРП"	Тогда	
			Значение = "ЛОЖЬ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФДоговорКонтрагентаУчастникСРП"	Тогда	
			Значение = "ЛОЖЬ";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйОператор"	Тогда	
			Значение = "Значение(Справочник.Контрагенты.ПустаяСсылка)";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйПокупателяБИН"	Тогда	
			Значение = "";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФПоверенныйПокупателяНаименование"	Тогда	
			Значение = "";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЭСФТоварыКоэффициент"	Тогда
			Значение = "1";
			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%ЕдиницаИзмерения"	Тогда
			Значение = "ЕдиницаИзмерения";			
		ИначеЕсли ЭлементСоответсвия.Ключ = "%КодТНВЭД"	Тогда
			Значение = "ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).КодТНВЭД.Код"
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредопределенноеЗначениеСтавкиНДС(СтавкаБезНДС) Экспорт
	Если СтавкаБезНДС Тогда
		Возврат ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;	
		
КонецФункции

Функция ЗначениеИзСтрокиXML(СтрокаXML) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
	
КонецФункции

Функция ИспользуетсяРазделениеДанных() Экспорт
	
	ИспользуетсяРазделениеДанных = Ложь;
	
	Возврат ИспользуетсяРазделениеДанных;
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления = Ложь) Экспорт
	

	
КонецПроцедуры

#КонецОбласти

#Область СверкаДанныхЭСФ
//Сравнивает суммовые значения между СФ и ЭСФ
Процедура СверитьЧисловыеДанныеСФиЭСФ(ОбъектЭСФ, РезультатПроверки) Экспорт
	
	//в ЕРП данная сверка не реализована. Т.к. Счет-фактура выданный не хранит в себе суммовые данные, соответственно
	// нечего сверять
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРаботыВАвтономномРабочемМесте
Функция ПроверкаПоддержкиМеханизмаВАвтономномРабочемМесте() Экспорт
	
	Возврат Истина;
	
КонецФункции  
#КонецОбласти

#Область ЗаполнениеЭСФпоСнт

Процедура ЗаполнитьИсходящийЭСФИзСНТ(ДанныеЗаполнения, ОбъектЭСФ) Экспорт
	СНТСервер.ЗаполнитьИсходящийЭСФИзСНТ(ДанныеЗаполнения, ОбъектЭСФ);
КонецПроцедуры

#КонецОбласти

Функция ЗаполнитьГСВС(СписокТНВЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	               	|	ГСВС.Ссылка КАК Ссылка,
	               	|	ЕСТЬNULL(ГСВС.КодГСВС, """") КАК КодТНВЭД,
	               	|	СведенияОНоменклатуре.ПризнакПеречняИзьятий КАК Признак
	               	|ИЗ
	               	|	РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&ДатаСреза, ПризнакАктивности = ИСТИНА) КАК СведенияОНоменклатуре
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	               	|		ПО СведенияОНоменклатуре.НоменклатураГСВС = ГСВС.Ссылка
	               	|ГДЕ
	               	|	ГСВС.КодГСВС В(&СписокТНВЭД)
	               	|	И ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)";
	
	Запрос.УстановитьПараметр("СписокТНВЭД", СписокТНВЭД);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивГСВС = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		ДанныеГСВС = Новый Структура();
		ДанныеГСВС.Вставить("НоменклатураГСВС", Выборка.Ссылка);
		ДанныеГСВС.Вставить("ПризнакВхожденияВПеречень", Выборка.Признак);
		
		МассивГСВС.Добавить(ДанныеГСВС);
		
	КонецЦикла;
					
	Возврат МассивГСВС;
	
КонецФункции

Процедура ПроверитьНаличиеЭСФ(Ссылка, Организация, ЕстьЭСФ) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	ЕстьЭСФ = Ложь;
	
	ПараметрыОтбора = Новый Структура("Организация", Организация);
	ТаблицаСчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Ссылка, ПараметрыОтбора, РеквизитыСчетаФактуры);
	Если ТаблицаСчетаФактуры.Колонки.Найти("Ссылка") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СчетаФактуры = ТаблицаСчетаФактуры.ВыгрузитьКолонку("Ссылка");
	
	АктуальныеЭСФ = ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам(СчетаФактуры);
	Для каждого ТекСчетФактура Из АктуальныеЭСФ Цикл
		
		Если ТекСчетФактура.Значение = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭСФ = ТекСчетФактура.Значение.ЭСФ;
		Если НЕ ЭСФ.ПометкаУдаления И НЕ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Отклоненный
			И НЕ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный 
			И НЕ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный Тогда
			ЕстьЭСФ = Истина;
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ИнициализироватьЕдиницыИзмерения(Форма, ТабличнаяЧасть, ГруппаРазмещения, ИмяЕдиницыИзмерения, ДополнительныйСуффиксЭлемента = "", ДополнительныйСуффиксРеквизита = "", Заголовок = "", ЭтоВходящееЭСФ = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭлементГруппаРазмещения = Элементы[ГруппаРазмещения];
	
	ЭлементТоварыГруппаУпаковка = Элементы.Добавить(ТабличнаяЧасть + "ГруппаУпаковка" + ДополнительныйСуффиксЭлемента + ДополнительныйСуффиксРеквизита, Тип("ГруппаФормы"), ЭлементГруппаРазмещения);
	ЭлементТоварыГруппаУпаковка.Вид = ВидГруппыФормы.ГруппаКолонок;
	ЭлементТоварыГруппаУпаковка.Заголовок = "ТоварыГруппаУпаковка";
	ЭлементТоварыГруппаУпаковка.Группировка = ГруппировкаКолонок.ВЯчейке;
	ЭлементТоварыГруппаУпаковка.ОтображатьЗаголовок = Ложь;
	ЭлементТоварыГруппаУпаковка.Ширина = 10;
	
	Если ЭтоВходящееЭСФ Тогда
		Элементы.Переместить(ЭлементТоварыГруппаУпаковка, ЭлементГруппаРазмещения, Элементы["ТоварыГруппа10"]);	
	КонецЕсли;
	
	ТоварыЕдиницаИзмерения = Элементы[ИмяЕдиницыИзмерения];
	ТоварыЕдиницаИзмерения.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ТоварыЕдиницаИзмерения.КнопкаВыпадающегоСписка = Ложь;
	ТоварыЕдиницаИзмерения.КнопкаВыбора = Истина;
	ТоварыЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	ТоварыЕдиницаИзмерения.АвтоОтметкаНезаполненного = Ложь;
	ТоварыЕдиницаИзмерения.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ТабличнаяЧасть + ДополнительныйСуффиксЭлемента + ".ТекущиеДанные.Товар", РежимИзмененияСвязанногоЗначения.НеИзменять));
	ТоварыЕдиницаИзмерения.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.Переместить(ТоварыЕдиницаИзмерения, ЭлементТоварыГруппаУпаковка);
	
	ЭлементТоварыТоварЕдиницаИзмерения = Форма.Элементы.Добавить(ТабличнаяЧасть + "ТоварЕдиницаИзмерения" + ДополнительныйСуффиксЭлемента + ДополнительныйСуффиксРеквизита, Тип("ПолеФормы"), ЭлементТоварыГруппаУпаковка);
	ЭлементТоварыТоварЕдиницаИзмерения.Вид = ВидПоляФормы.ПолеНадписи;
	ЭлементТоварыТоварЕдиницаИзмерения.ПутьКДанным = "Объект." + ТабличнаяЧасть + ".Товар.ЕдиницаИзмерения";
	
	Если Заголовок <> "" Тогда
		ЭлементТоварыТоварЕдиницаИзмерения.Заголовок = Заголовок;
	КонецЕсли;	
	
	Если Форма.ИмяФормы = "Документ.ЭСФ.Форма.ФормаДокументаУТ"
		ИЛИ Форма.ИмяФормы = "Документ.ЭлектронныйДокументВС.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.СНТ.Форма.ФормаДокумента" Тогда
		НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ТабличнаяЧасть + "ТоварЕдиницаИзмерения" + ДополнительныйСуффиксРеквизита , "Объект." + ТабличнаяЧасть + ".ЕдиницаИзмерения" + ДополнительныйСуффиксРеквизита);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с источниками происхождения

Процедура ЗаполнитьПустыеПризнакиПроисхождения(Объект, ИмяТЧ, ЗаполнятьВсе) Экспорт
	
	Если ИмяТЧ = "Товары" Тогда
		ИмяСтолбца = "Номенклатура";
	Иначе
		Возврат;
	КонецЕсли;
	
	//собираем все товары с пустыми признаками
	СписокТоваров = Новый Массив();
	НомераСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяСтолбца]) И 
				(ЗаполнятьВсе ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПризнакПроисхождения)) Тогда
			СписокТоваров.Добавить(ТекСтрока[ИмяСтолбца]);
			НомераСтрок.Добавить(ТекСтрока.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если НомераСтрок.Количество() = 0 И НЕ ЗаполнятьВсе Тогда
		Возврат;
	КонецЕсли;
	
	//делаем запрос к регсвед
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ПереченьИзъятий", ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий());
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Товар
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	               |		ПО Номенклатура.КодТНВЭД = КлассификаторТНВЭД.Ссылка
	               |ГДЕ
	               |	КлассификаторТНВЭД.Код В(&ПереченьИзъятий)
	               |	И Номенклатура.Ссылка В(&СписокТоваров)";
	
	Запрос.Текст = ТекстЗапроса;
	ПереченьТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ЗаполнятьВсе Тогда
		Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
			Если ПереченьТоваров.Найти(ТекСтрока[ИмяСтолбца], "Товар") <> Неопределено Тогда
				ТекСтрока.ПризнакПроисхождения = "1";
			Иначе
				ТекСтрока.ПризнакПроисхождения = "2";
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого НомерСтроки Из НомераСтрок Цикл
			ТекСтрока = Объект[ИмяТЧ][НомерСтроки-1];
			Если ПереченьТоваров.Найти(ТекСтрока[ИмяСтолбца], "Товар") <> Неопределено Тогда
				ТекСтрока.ПризнакПроисхождения = "1";
			Иначе
				ТекСтрока.ПризнакПроисхождения = "2";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИсточникиИзНомераГТД(НомерГТД) Экспорт
	
	СтруктураИсточника = Новый Структура("НомерПозицииВДекларацииИлиЗаявлении, НомерЗаявленияВРамкахТС, КодТНВЭД, ТоварНаименованиеВРамкахТС, ПризнакПроисхождения");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсточникиПроисхождения.НомерСтрокиГТД КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ИсточникиПроисхождения.Код КАК НомерЗаявленияВРамкахТС,
	|	ИсточникиПроисхождения.КодТНВЭД КАК КодТНВЭД,
	|	ИсточникиПроисхождения.НаименованиеТовара КАК ТоварНаименованиеВРамкахТС,
	|	ИсточникиПроисхождения.ПризнакПроисхождения КАК ПризнакПроисхождения
	|ИЗ
	|	Справочник.НомераГТД КАК ИсточникиПроисхождения
	|ГДЕ
	|	ИсточникиПроисхождения.Ссылка = &ИсточникПроисхождения";
	
	Запрос.Текст = ТекстЗапроса;	
	Запрос.УстановитьПараметр("ИсточникПроисхождения", НомерГТД);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураИсточника, ВыборкаДетальныеЗаписи);
				
	КонецЕсли;
	
	Возврат СтруктураИсточника;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание документов "ЭСФ" на основе документов "СчетФактураВыданный"

// См. ЭСФСервер.ЗаполнитьИсходящийЭСФ()
Процедура ЗаполнитьИсходящийЭСФ(Знач СсылкаСчетФактура, ОбъектЭСФ) Экспорт
	
	ЭСФСерверУТ.ЗаполнитьИсходящийЭСФ(СсылкаСчетФактура, ОбъектЭСФ);
	
КонецПроцедуры

// Функция создает несколько ЭСФ на основании нескольких счетов-фактур.
//
Функция СоздатьСписокИсходящихЭСФ(МассивСчетовФактур) Экспорт
	
	Возврат ЭСФСерверУТ.СоздатьСписокИсходящихЭСФ(МассивСчетовФактур);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание счетов-фактур

// См. ЭСФСервер.ЗаполнитьСчетФактуруПолученный()
Процедура ЗаполнитьСчетФактуруПолученный(Знач СсылкаЭСФ, ОбъектСчетФактура) Экспорт
	
	ЭСФСерверУТ.ЗаполнитьСчетФактуруПолученный(СсылкаЭСФ, ОбъектСчетФактура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных реквизитов ЭСФ

Процедура ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	ЭСФСерверУТ.ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаТовары(Знач НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	ЭСФСерверУТ.ЗаполнитьСсылкиНаТовары(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// Заполняет реквизит ДоговорПоставки в документах ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, в которых необходимо заполнить реквизит ДоговорПоставки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
// 
Процедура ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ) Экспорт
	
	ЭСФСерверУТ.ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Соответствия наименований и ссылок товаров и единиц измерения

// Сохраняет соответствия "Единица измерения наименование - Единица измерения ссылка".
// Соответствия сохраняются в разрезе контрагентов.
// Если ЭСФ содержит несколько контрагентов, то соответствия сохраняются для каждого из них.  
// Для сохранения соответствия ссылка на контрагента должна быть заполнена, иначе оно не сохранится.
// Соответствие сохраняется только если заполнена ссылка на единицу измерения.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив объектов ДокументСсылка.ЭСФ,    
//   для которых необходимо сохранить соответствия "Единица измерения наименование - Единица измерения ссылка".
//
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверУТ.СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// См. ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров()
Процедура СохранитьСоответствияНаименованийИСсылокТоваров(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверУТ.СохранитьСоответствияНаименованийИСсылокТоваров(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Процедура ЗаполнитьРеквизитыКонтрагента(Знач ОбъектЭСФ, Знач ПоставщикиСтрока) Экспорт
	
КонецПроцедуры

Функция НайтиДоговорыПоставкиПоДаннымЭСФ(Знач ОбъектЭСФ, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	Возврат ЭСФСерверУТ.НайтиДоговорыПоставкиПоДаннымЭСФ(ОбъектЭСФ, СтрокаКонтрагент, ИмяТаблицыКонтрагента);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЭСФ ПО ТОВАРАМ ИЗ ПЕРЕЧНЯ

Функция ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, Знач СсылкаСчетФактура, Знач Заполнить) Экспорт
	
	Возврат ЭСФСерверУТ.ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, СсылкаСчетФактура, Заполнить);
	
КонецФункции

Функция ПолучитьКодТНВЭДСервер(СтрокаКодТНВЭД) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаКодТНВЭД) Тогда
		КодТНВЭД = Справочники.КлассификаторТНВЭД.НайтиПоКоду(СтрокаКодТНВЭД);
	КонецЕсли;
	
	Если КодТНВЭД = Неопределено Тогда
		КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
	КонецЕсли;

	Возврат КодТНВЭД;
	
КонецФункции

