
&НаСервере
Процедура ПересчетАвтоматическихСкидокСервер(ДокЗаказ) Экспорт
	
	Для Каждого СтрТов Из ДокЗаказ.Товары Цикл 
		СтрТов.ПроцентАвтоматическойСкидки = Число(0);		
	КонецЦикла;
	
	ДатаРаб = ДокЗаказ.Дата;
	Если ДатаРаб = '00010101' или Формат(ДатаРаб, "ДЛФ=В") = Строка("0:00:00") Тогда
		ДатаРаб = ТекущаяДата();	
	КонецЕсли;

	Для Каждого СтрТов Из ДокЗаказ.Товары Цикл 
		
		Если НЕ СтрТов.new_ЭтоСпецЦена Тогда 
			ТабРез = ПолучитьДействующиеСкидки(ДокЗаказ, ДатаРаб, СтрТов);
			Если ТабРез <> Неопределено Тогда
				СтрТов.ПроцентАвтоматическойСкидки = ТабРез[0].Процент;	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТзКас = ПолучитьДействующиеКаскадныеСкидки(ДокЗаказ, ДатаРаб);
		
	РасчетКаскаднойСкидки(ТзКас, ДокЗаказ, ДатаРаб);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДействующиеСкидки(ДокЗаказ, ДатаРаб, СтрТов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_СкидкиНаТовар.Приоритет КАК Приоритет,
	|	bon_СкидкиНаТовар.Подразделение КАК Подразделение,
	|	bon_СкидкиНаТовар.ДатаНач КАК ДатаНач,
	|	bon_СкидкиНаТовар.ДатаКон КАК ДатаКон,
	|	bon_СкидкиНаТовар.Номенклотура КАК Номенклотура,
	|	bon_СкидкиНаТовар.ВидЦены КАК ВидЦены,
	|	bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара КАК ВидСкидкиНаценкиТовара,
	|	bon_СкидкиНаТовар.Процент КАК Процент,
	|	bon_СкидкиНаТовар.СпецЦена КАК СпецЦена
	|ИЗ
	|	РегистрСведений.bon_СкидкиНаТовар КАК bon_СкидкиНаТовар
	|ГДЕ
	|	bon_СкидкиНаТовар.Подразделение = &Подразделение
	|	И bon_СкидкиНаТовар.ДатаНач <= &ДатаНач
	|	И bon_СкидкиНаТовар.ДатаКон >= &ДатаКон
	|	И bon_СкидкиНаТовар.ВидЦены = &ВидЦены
	|	И bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара = &ВидСкидкиНаценкиТовара
	|	И ВЫБОР
	|			КОГДА bon_СкидкиНаТовар.ЭтоНомГруппа <> ИСТИНА
	|				ТОГДА bon_СкидкиНаТовар.Номенклотура В (&СписокРодителей)
	|			ИНАЧЕ bon_СкидкиНаТовар.НомГруппа В (&СписокРодителейСтрока)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Подразделение", 			ДокЗаказ.Подразделение);
	Запрос.УстановитьПараметр("ДатаНач", 				ДатаРаб);
	Запрос.УстановитьПараметр("ДатаКон",				ДатаРаб);
	//Получаем всех родителей
	СписокРодителей = Новый СписокЗначений;
	ТекТовар = СтрТов.Номенклатура;
	Пока НЕ ТекТовар.Родитель.Пустая() Цикл
		СписокРодителей.Добавить(ТекТовар.Родитель);
		ТекТовар = ТекТовар.Родитель;
	КонецЦикла;
	СписокРодителей.Добавить(СтрТов.Номенклатура);
	Запрос.УстановитьПараметр("СписокРодителей", 		СписокРодителей);
	
	//Получаем всех родителей
	СписокРодителейСтр = Новый СписокЗначений;
	ТекТовар = СтрТов.Номенклатура;
	Пока НЕ ТекТовар.Родитель.Пустая() Цикл
		СписокРодителейСтр.Добавить(Строка(ТекТовар.Родитель));
		ТекТовар = ТекТовар.Родитель;
	КонецЦикла;
	СписокРодителейСтр.Добавить(Строка(СтрТов.Номенклатура));
	Запрос.УстановитьПараметр("СписокРодителейСтрока", 		СписокРодителейСтр);

	
	Запрос.УстановитьПараметр("ВидЦены", 				СтрТов.ВидЦены);
	Запрос.УстановитьПараметр("ВидСкидкиНаценкиТовара", Перечисления.bon_ВидСкидкиНаценкиТовара.Процент);

	РезЗап = Запрос.Выполнить().Выгрузить();
	
	Если РезЗап.Количество() > 0 тогда
		Возврат РезЗап;	
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьДействующиеСпецЦену(СтрОтбора, Подразд) Экспорт 
							///ДокЗаказ, ДатаРаб, СтрТов
	
	Если СтрОтбора.Дата = '00010101' или Формат(СтрОтбора.Дата, "ДЛФ=В") = Строка("0:00:00") Тогда
		СтрОтбора.Дата = ТекущаяДата();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_СкидкиНаТовар.Приоритет КАК Приоритет,
	|	bon_СкидкиНаТовар.Подразделение КАК Подразделение,
	|	bon_СкидкиНаТовар.ДатаНач КАК ДатаНач,
	|	bon_СкидкиНаТовар.ДатаКон КАК ДатаКон,
	|	bon_СкидкиНаТовар.Номенклотура КАК Номенклотура,
	|	bon_СкидкиНаТовар.ВидЦены КАК ВидЦены,
	|	bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара КАК ВидСкидкиНаценкиТовара,
	|	bon_СкидкиНаТовар.Процент КАК Процент,
	|	bon_СкидкиНаТовар.СпецЦена КАК СпецЦена
	|ИЗ
	|	РегистрСведений.bon_СкидкиНаТовар КАК bon_СкидкиНаТовар
	|ГДЕ
	|	bon_СкидкиНаТовар.Подразделение = &Подразделение
	|	И bon_СкидкиНаТовар.ДатаНач <= &ДатаНач
	|	И bon_СкидкиНаТовар.ДатаКон >= &ДатаКон
	|	И bon_СкидкиНаТовар.Номенклотура = &Номенклотура
	|	И bon_СкидкиНаТовар.ВидЦены = &ВидЦены
	|	И bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара = &ВидСкидкиНаценкиТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Подразделение", 			Подразд);
	Запрос.УстановитьПараметр("ДатаНач", 				СтрОтбора.Дата);
	Запрос.УстановитьПараметр("ДатаКон",				СтрОтбора.Дата);
	Запрос.УстановитьПараметр("Номенклотура", 			СтрОтбора.Номенклатура);
	Запрос.УстановитьПараметр("ВидЦены", 				СтрОтбора.ВидЦены);
	Запрос.УстановитьПараметр("ВидСкидкиНаценкиТовара", Перечисления.bon_ВидСкидкиНаценкиТовара.Сумма);

	РезЗап = Запрос.Выполнить().Выгрузить();
	
	Если РезЗап.Количество() > 0 тогда
		Возврат РезЗап[0].СпецЦена;	
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьДействующиеКаскадныеСкидки(ДокЗаказ, ДатаРаб)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_КаскадныеСкидки.Приоритет КАК Приоритет,
	|	bon_КаскадныеСкидки.Подразделение КАК Подразделение,
	|	bon_КаскадныеСкидки.ДатаНач КАК ДатаНач,
	|	bon_КаскадныеСкидки.ДатаКон КАК ДатаКон,
	|	bon_КаскадныеСкидки.ПозицияВЗаказе КАК ПозицияВЗаказе,
	|	bon_КаскадныеСкидки.Процент КАК Процент,
	|	bon_КаскадныеСкидки.НомПоз КАК НомПоз
	|ИЗ
	|	РегистрСведений.bon_КаскадныеСкидки КАК bon_КаскадныеСкидки
	|ГДЕ
	|	bon_КаскадныеСкидки.Подразделение = &Подразделение
	|	И bon_КаскадныеСкидки.ДатаНач <= &ДатаНач
	|	И bon_КаскадныеСкидки.ДатаКон >= &ДатаКон
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ,
	|	НомПоз";
	Запрос.УстановитьПараметр("Подразделение", 			ДокЗаказ.Подразделение);
	Запрос.УстановитьПараметр("ДатаНач", 				ДатаРаб);
	Запрос.УстановитьПараметр("ДатаКон",				ДатаРаб);

	РезЗап = Запрос.Выполнить().Выгрузить();
	
	Если РезЗап.Количество() > 0 тогда
		Возврат РезЗап;	
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура РасчетКаскаднойСкидки(ТзКас, ДокЗаказ, ДатаРаб)
	
	Если ТзКас <> Неопределено Тогда 
		ТабТовар = ПолучитьДанныеПоТовару(ДокЗаказ);
		
		Если ТабТовар.Количество() > 1 и ТабТовар.Количество() < 5 Тогда
			Кол = ТабТовар.Количество();
			
			НужСтр = Кол - Число(1);
			Строка = ТабТовар[НужСтр];
			
			Если Строка(Строка.ВидЦены) <> Строка("Розничная") Тогда
				Если ТабТовар.Количество() >= 3 Тогда
					НужСтр = НужСтр - Число(1);
					Строка = ТабТовар[НужСтр];	
				КонецЕсли;			
			КонецЕсли;
			
			Если Строка(Строка.ВидЦены) <> Строка("Розничная") Тогда
				Если ТабТовар.Количество() >= 3 Тогда
					НужСтр= НужСтр - Число(1);
					Строка = ТабТовар[НужСтр];	
				КонецЕсли;			
			КонецЕсли;
			
			Если Строка(Строка.ВидЦены) <> Строка("Розничная") Тогда
				///Не подходит по каскадам
				Строка = Неопределено;
			КонецЕсли;
			
			
			Если Строка <> Неопределено Тогда
				СтрокаСкид = ТзКас[НужСтр];	
				Строка.ПроцентСкидки = СтрокаСкид.Процент;	
				
				///Устанавливаем Скидку
				Для Каждого СтрТов Из ДокЗаказ.Товары Цикл 
					Если Строка.КлючСтроки = СтрТов.КлючСтроки и Строка.Номенклатура = СтрТов.Номенклатура Тогда
						СтрТов.ПроцентАвтоматическойСкидки = Строка.ПроцентСкидки;	
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоТовару(ДокЗаказ)
	
	ТЗТаб = Новый ТаблицаЗначений;
	ТЗТаб.Колонки.Добавить("Номенклатура");
	ТЗТаб.Колонки.Добавить("ВидЦены");
	ТЗТаб.Колонки.Добавить("Цена");
	ТЗТаб.Колонки.Добавить("Сумма");
	ТЗТаб.Колонки.Добавить("КлючСтроки");
	ТЗТаб.Колонки.Добавить("ПроцентСкидки");
	
	
	Для Каждого СтрТов Из ДокЗаказ.Товары Цикл 
		ЗапТаб = ТЗТаб.Добавить();
		Если Не СтрТов.new_ЭтоСпецЦена Тогда
			ЗапТаб.Номенклатура 		= СтрТов.Номенклатура;
			ЗапТаб.ВидЦены 				= СтрТов.ВидЦены;
			ЗапТаб.Цена 				= СтрТов.Цена;
			ЗапТаб.Сумма 				= СтрТов.Сумма;
			ЗапТаб.КлючСтроки 			= СтрТов.КлючСтроки;
			ЗапТаб.ПроцентСкидки		= Число(0);
		КонецЕсли;	
	КонецЦикла; 
	
	ТЗТаб.Сортировать("Сумма убыв");
	
	Возврат ТЗТаб;	
	
КонецФункции


///Для печати ценников
&НаСервере
Функция ПолучитьСпецЦенуДляЦеников(ДатаРасчета, Подразд, Ном, ВыбрВидЦен) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_СкидкиНаТовар.Приоритет КАК Приоритет,
	|	bon_СкидкиНаТовар.Подразделение КАК Подразделение,
	|	bon_СкидкиНаТовар.ДатаНач КАК ДатаНач,
	|	bon_СкидкиНаТовар.ДатаКон КАК ДатаКон,
	|	bon_СкидкиНаТовар.Номенклотура КАК Номенклотура,
	|	bon_СкидкиНаТовар.ВидЦены КАК ВидЦены,
	|	bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара КАК ВидСкидкиНаценкиТовара,
	|	bon_СкидкиНаТовар.Процент КАК Процент,
	|	bon_СкидкиНаТовар.СпецЦена КАК СпецЦена
	|ИЗ
	|	РегистрСведений.bon_СкидкиНаТовар КАК bon_СкидкиНаТовар
	|ГДЕ
	|	bon_СкидкиНаТовар.Подразделение = &Подразделение
	|	И bon_СкидкиНаТовар.ДатаНач <= &ДатаНач
	|	И bon_СкидкиНаТовар.ДатаКон >= &ДатаКон
	|	И bon_СкидкиНаТовар.Номенклотура = &Номенклотура
	|	И bon_СкидкиНаТовар.ВидЦены = &ВидЦены
	|	И bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара = &ВидСкидкиНаценкиТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Подразделение", 			Подразд);
	Запрос.УстановитьПараметр("ДатаНач", 				ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаКон",				ДатаРасчета);
	Запрос.УстановитьПараметр("Номенклотура", 			Ном);
	Запрос.УстановитьПараметр("ВидЦены", 				ВыбрВидЦен);
	Запрос.УстановитьПараметр("ВидСкидкиНаценкиТовара", Перечисления.bon_ВидСкидкиНаценкиТовара.Сумма);

	РезЗап = Запрос.Выполнить().Выгрузить();
	
	Если РезЗап.Количество() > 0 тогда
		Возврат РезЗап[0].СпецЦена;	
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция ПолучитьДействующиеСкидкиДляЦенников(Подразд, ДатаРасчета, Ном, ВыбрВидЦен) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_СкидкиНаТовар.Приоритет КАК Приоритет,
	|	bon_СкидкиНаТовар.Подразделение КАК Подразделение,
	|	bon_СкидкиНаТовар.ДатаНач КАК ДатаНач,
	|	bon_СкидкиНаТовар.ДатаКон КАК ДатаКон,
	|	bon_СкидкиНаТовар.Номенклотура КАК Номенклотура,
	|	bon_СкидкиНаТовар.ВидЦены КАК ВидЦены,
	|	bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара КАК ВидСкидкиНаценкиТовара,
	|	bon_СкидкиНаТовар.Процент КАК Процент,
	|	bon_СкидкиНаТовар.СпецЦена КАК СпецЦена
	|ИЗ
	|	РегистрСведений.bon_СкидкиНаТовар КАК bon_СкидкиНаТовар
	|ГДЕ
	|	bon_СкидкиНаТовар.Подразделение = &Подразделение
	|	И bon_СкидкиНаТовар.ДатаНач <= &ДатаНач
	|	И bon_СкидкиНаТовар.ДатаКон >= &ДатаКон
	|	И bon_СкидкиНаТовар.Номенклотура  в (&СписокРодителей)
	|	И bon_СкидкиНаТовар.ВидЦены = &ВидЦены
	|	И bon_СкидкиНаТовар.ВидСкидкиНаценкиТовара = &ВидСкидкиНаценкиТовара
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("Подразделение", 			Подразд);
	Запрос.УстановитьПараметр("ДатаНач", 				ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаКон",				ДатаРасчета);
	//Получаем всех родителей
	СписокРодителей = Новый СписокЗначений;
	ТекТовар = Ном;
	Пока НЕ ТекТовар.Родитель.Пустая() Цикл
		СписокРодителей.Добавить(ТекТовар.Родитель);
		ТекТовар = ТекТовар.Родитель;
	КонецЦикла;
	СписокРодителей.Добавить(Ном);
	Запрос.УстановитьПараметр("СписокРодителей", 		СписокРодителей);
	Запрос.УстановитьПараметр("ВидЦены", 				ВыбрВидЦен);
	Запрос.УстановитьПараметр("ВидСкидкиНаценкиТовара", Перечисления.bon_ВидСкидкиНаценкиТовара.Процент);

	РезЗап = Запрос.Выполнить().Выгрузить();
	
	Если РезЗап.Количество() > 0 тогда
		Возврат РезЗап[0].Процент;	
	Иначе 
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

