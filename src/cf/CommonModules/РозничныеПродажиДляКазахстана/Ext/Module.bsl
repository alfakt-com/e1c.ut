
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//  СтандартнаяОбработка - Булево - Начальное значение Ложь
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, содержащая массив ссылок на отчеты, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки = "", СтандартнаяОбработка = Ложь) Экспорт
	
	Если НЕ Константы.ВыписыватьСчетаФактурыПоРезультатамРозничныхПродаж.Получить() Тогда
		СтандартнаяОбработка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалитьОтчетыОРозничныхПродажах(КассоваяСмена);
	
	Возврат ЗаполнитьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки);
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажахОбъект - ДокументОбъект.ОтчетОРозничныхПродажах - Заполняемый документ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Кассовая смена
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, содержащая массив ссылок на отчеты, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажах(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазделятьТоварыПоИсточникамПроисхождения = Константы.РазделятьТоварыПоИсточникамПроисхождения.Получить();
	
	// Получаем данные документа-шаблона
	НачатьТранзакцию();
	
	ОтчетОРозничныхПродажахШаблон = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	
	РозничныеПродажи.ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахШаблон, КассоваяСмена);
	
	// ТЧ ВидыЗапасов заполняется при проведении документа
	ОтчетОРозничныхПродажахШаблон.Записать(РежимЗаписиДокумента.Проведение);
	
	Товары 					 = ОтчетОРозничныхПродажахШаблон.Товары.Выгрузить();
	ОплатаПлатежнымиКартами  = ОтчетОРозничныхПродажахШаблон.ОплатаПлатежнымиКартами.Выгрузить();
	ВидыЗапасов 			 = ОтчетОРозничныхПродажахШаблон.ВидыЗапасов.Выгрузить();
	Серии 					 = ОтчетОРозничныхПродажахШаблон.Серии.Выгрузить();
	ПодарочныеСертификаты 	 = ОтчетОРозничныхПродажахШаблон.ПодарочныеСертификаты.Выгрузить();
	НачислениеБонусныхБаллов = ОтчетОРозничныхПродажахШаблон.НачислениеБонусныхБаллов.Выгрузить();
	ОплатаБонуснымиБаллами 	 = ОтчетОРозничныхПродажахШаблон.ОплатаБонуснымиБаллами.Выгрузить();
	
	// Удаляем документ-шаблон
	ОтменитьТранзакцию();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ОтчетыОРозничныхПродажах = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасов);
	Запрос.УстановитьПараметр("Товары", 	 Товары);
	Запрос.УстановитьПараметр("Серии", 		 Серии);
	Запрос.УстановитьПараметр("Организация", ОтчетОРозничныхПродажахШаблон.Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация
		|ПОМЕСТИТЬ ТаблицаДанныхДокумента
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.НомерСтроки,
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
		|	ВидыЗапасов.ВидЗапасов,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СуммаСНДС,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.Партнер,
		|	ВидыЗапасов.ИдентификаторСтроки,
		|	ВидыЗапасов.Продавец,
		|	ВидыЗапасов.СуммаРучнойСкидки,
		|	ВидыЗапасов.АналитикаУчетаНаборов
		|ПОМЕСТИТЬ ТаблицаВидыЗапасов
		|ИЗ
		|	&ВидыЗапасов КАК ВидыЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	Товары.ПроцентРучнойСкидки,
		|	Товары.СуммаРучнойСкидки,
		|	Товары.КоличествоУпаковокФакт,
		|	Товары.КоличествоУпаковокУчет,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Партнер,
		|	Товары.ИдентификаторСтроки,
		|	Товары.Продавец,
		|	Товары.Помещение,
		|	Товары.Серия,
		|	Товары.АналитикаУчетаНоменклатуры,
		|	Товары.НоменклатураНабора,
		|	Товары.ХарактеристикаНабора,
		|	Товары.АналитикаУчетаНаборов
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.НомерСтроки,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.Количество,
		|	Серии.Помещение,
		|	Серии.Серия
		|ПОМЕСТИТЬ ТаблицаСерии
		|ИЗ
		|	&Серии КАК Серии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
		|	ВидыЗапасов.ВидЗапасов,
		|	ВидыЗапасов.НомерГТД,
		|	ВидыЗапасов.Количество,
		|	ВидыЗапасов.СуммаСНДС,
		|	ВидыЗапасов.СтавкаНДС,
		|	ВидыЗапасов.СуммаНДС,
		|	ВидыЗапасов.Партнер,
		|	ВидыЗапасов.Продавец,
		|	ВидыЗапасов.СуммаРучнойСкидки,
		|	ВидыЗапасов.АналитикаУчетаНаборов,
		|	НомераГТД.СпособПроисхождения КАК СпособПроисхождения
		|ИЗ
		|	ТаблицаВидыЗапасов КАК ВидыЗапасов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
		|		ПО ВидыЗапасов.НомерГТД = НомераГТД.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗапасов.НомерСтроки
		|" + ?(РазделятьТоварыПоИсточникамПроисхождения, "ИТОГИ ПО
		|	СпособПроисхождения", "") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.Цена,
		|	Товары.Сумма,
		|	Товары.СтавкаНДС,
		|	Товары.СуммаНДС,
		|	Товары.ПроцентРучнойСкидки,
		|	Товары.СуммаРучнойСкидки,
		|	Товары.КоличествоУпаковокФакт,
		|	Товары.КоличествоУпаковокУчет,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Партнер,
		|	Товары.Продавец,
		|	Товары.Помещение,
		|	Товары.Серия,
		|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Товары.НоменклатураНабора,
		|	Товары.ХарактеристикаНабора,
		|	Товары.АналитикаУчетаНаборов
		|ИЗ
		|	ТаблицаТоваров КАК Товары
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	Серии.Количество,
		|	Серии.Помещение,
		|	Серии.Серия
		|ИЗ
		|	ТаблицаСерии КАК Серии
		|
		|УПОРЯДОЧИТЬ ПО
		|	Серии.НомерСтроки
		|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РазделятьТоварыПоИсточникамПроисхождения Тогда
		ВыборкаСпособыПроисхождения = РезультатЗапроса[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаСпособыПроисхождения = РезультатЗапроса[4].Выбрать();
	КонецЕсли;
	
	ДеревоТовары = РезультатЗапроса[5].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоСерии  = РезультатЗапроса[6].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МаксимальноеКоличествоСтрок = Константы.МаксимальноеКоличествоРазличныхВидовЗапасовВОтчетеОРозничныхПродажах.Получить();
	
	// Если значение константы не установлено, то берем максимальное допустимое количество строк в ЭСФ 200.
	Если МаксимальноеКоличествоСтрок = 0 Тогда
		МаксимальноеКоличествоСтрок = 200;
	КонецЕсли;
	
	Если ВыборкаСпособыПроисхождения.Количество() > 0 Тогда
		
		// Блокировка товаров организаций может происходить только в управляемом режиме управления блокировкой данных.
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		// Заблокируем товары организаций от изменения.
		//ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВТ);
		
		ТаблицаОтчетовОРозничныхПродажах = Новый ТаблицаЗначений;
		ТаблицаОтчетовОРозничныхПродажах.Колонки.Добавить("Ссылка",         Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
		ТаблицаОтчетовОРозничныхПродажах.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"));
		
		ТаблицаОтчетовОРозничныхПродажах.Индексы.Добавить("Ссылка");
		
		Если РазделятьТоварыПоИсточникамПроисхождения Тогда
			
			СчетчикИсточников = 0;
			
			Пока ВыборкаСпособыПроисхождения.Следующий() Цикл
				
				СчетчикИсточников = СчетчикИсточников + 1;
				
				ВыборкаВидыЗапасов = ВыборкаСпособыПроисхождения.Выбрать();
				
				РаспределитьТоварыПоВидамЗапаса(ВыборкаВидыЗапасов, ДеревоТовары, ДеревоСерии, ТаблицаОтчетовОРозничныхПродажах, ОтчетОРозничныхПродажахШаблон, МаксимальноеКоличествоСтрок, СчетчикИсточников = ВыборкаСпособыПроисхождения.Количество());
				
			КонецЦикла;
			
		Иначе
			
			РаспределитьТоварыПоВидамЗапаса(ВыборкаСпособыПроисхождения, ДеревоТовары, ДеревоСерии, ТаблицаОтчетовОРозничныхПродажах, ОтчетОРозничныхПродажахШаблон, МаксимальноеКоличествоСтрок);
			
		КонецЕсли;
		
		СуммаДокументаШаблон = ОтчетОРозничныхПродажахШаблон.СуммаДокумента;
		
		// Для списания полной суммы остаток.
		ОбщийКоэффициент = 0;
		
		// Получаем коэффициенты распределения сумм табличных частей ОплатаПлатежнымиКартами, ПодарочныеСертификаты, НачислениеБонусныхБаллов, ОплатаБонуснымиБаллами.
		КоличествоСтрок = ТаблицаОтчетовОРозничныхПродажах.Количество();
		СчетчикСтрок = 1;
		МассивДокументовОРП        = Новый Массив;
		КоэффициентыКРаспределению = Новый Массив;
		
		Для Каждого ОтчетОРозничныхПродажах Из ТаблицаОтчетовОРозничныхПродажах Цикл
			
			ДокументОРП    = ОтчетОРозничныхПродажах.Ссылка;
			СуммаДокумента = ОтчетОРозничныхПродажах.СуммаДокумента;
			
			ЭтоПоследнийДокументКРаспределению = (СчетчикСтрок = КоличествоСтрок);
			
			Если ЭтоПоследнийДокументКРаспределению Тогда
				Коэффициент = 1 - ОбщийКоэффициент;
			Иначе
				Коэффициент = СуммаДокумента / СуммаДокументаШаблон;
				ОбщийКоэффициент = ОбщийКоэффициент + Коэффициент;
			КонецЕсли;
			
			МассивДокументовОРП.Добавить(ДокументОРП);
			КоэффициентыКРаспределению.Добавить(Коэффициент);
			
			СчетчикСтрок = СчетчикСтрок + 1;
			
		КонецЦикла;
		
		РаспределенныеСуммыОплатаПлатежнымиКартами  = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОплатаПлатежнымиКартами.Итог("Сумма"), КоэффициентыКРаспределению);
		РаспределенныеСуммыПодарочныеСертификаты    = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ПодарочныеСертификаты.Итог("Сумма"), КоэффициентыКРаспределению);
		РаспределенныеСуммыНачислениеБонусныхБаллов = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(НачислениеБонусныхБаллов.Итог("СуммаБонусныхБаллов"), КоэффициентыКРаспределению);
		РаспределенныеСуммыОплатаБонуснымиБаллами   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОплатаБонуснымиБаллами.Итог("СуммаБонусныхБаллов"), КоэффициентыКРаспределению);
		
		Если НЕ РаспределенныеСуммыОплатаПлатежнымиКартами = Неопределено Тогда
			ОплатаПлатежнымиКартами = РаспределитьТабличнуюЧастьПропорциональноСуммам(МассивДокументовОРП, ОплатаПлатежнымиКартами, РаспределенныеСуммыОплатаПлатежнымиКартами, "ОплатаПлатежнымиКартами");
		КонецЕсли;
		
		Если НЕ РаспределенныеСуммыПодарочныеСертификаты = Неопределено Тогда
			ПодарочныеСертификаты = РаспределитьТабличнуюЧастьПропорциональноСуммам(МассивДокументовОРП, ПодарочныеСертификаты, РаспределенныеСуммыПодарочныеСертификаты, "ПодарочныеСертификаты");
		КонецЕсли;
		
		Если НЕ РаспределенныеСуммыНачислениеБонусныхБаллов = Неопределено Тогда
			НачислениеБонусныхБаллов = РаспределитьТабличнуюЧастьПропорциональноСуммам(МассивДокументовОРП, НачислениеБонусныхБаллов, РаспределенныеСуммыНачислениеБонусныхБаллов, "НачислениеБонусныхБаллов");
		КонецЕсли;
		
		Если НЕ РаспределенныеСуммыОплатаБонуснымиБаллами = Неопределено Тогда
			ОплатаБонуснымиБаллами = РаспределитьТабличнуюЧастьПропорциональноСуммам(МассивДокументовОРП, ОплатаБонуснымиБаллами, РаспределенныеСуммыОплатаБонуснымиБаллами, "ОплатаБонуснымиБаллами");
		КонецЕсли;
		
		Для Каждого ОтчетОРозничныхПродажах Из ТаблицаОтчетовОРозничныхПродажах Цикл
			
			ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.Ссылка.ПолучитьОбъект();
			
			Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
				Если РаспределенныеСуммыОплатаПлатежнымиКартами = Неопределено Тогда
					ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Загрузить(ОплатаПлатежнымиКартами);
				Иначе
					ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Загрузить(ОплатаПлатежнымиКартами.Скопировать(ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("Ссылка", ОтчетОРозничныхПродажах.Ссылка)),));
				КонецЕсли;
			КонецЕсли;
			
			Если ПодарочныеСертификаты.Количество() > 0 Тогда
				Если РаспределенныеСуммыПодарочныеСертификаты = Неопределено Тогда
					ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификаты);
				Иначе
					ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификаты.Скопировать(ПодарочныеСертификаты.НайтиСтроки(Новый Структура("Ссылка", ОтчетОРозничныхПродажах.Ссылка)),));
				КонецЕсли;
			КонецЕсли;
			
			Если НачислениеБонусныхБаллов.Количество() > 0 Тогда
				Если РаспределенныеСуммыНачислениеБонусныхБаллов = Неопределено Тогда
					ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Загрузить(НачислениеБонусныхБаллов);
				Иначе
					ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Загрузить(НачислениеБонусныхБаллов.Скопировать(НачислениеБонусныхБаллов.НайтиСтроки(Новый Структура("Ссылка", ОтчетОРозничныхПродажах.Ссылка)),));
				КонецЕсли;
			КонецЕсли;
			
			Если ОплатаБонуснымиБаллами.Количество() > 0 Тогда
				Если РаспределенныеСуммыОплатаБонуснымиБаллами = Неопределено Тогда
					ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Загрузить(ОплатаБонуснымиБаллами);
				Иначе
					ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Загрузить(ОплатаБонуснымиБаллами.Скопировать(ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("Ссылка", ОтчетОРозничныхПродажах.Ссылка)),));
				КонецЕсли;
			КонецЕсли;
			
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
		Если Товары.Количество() > 0 И ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		Возврат ТаблицаОтчетовОРозничныхПродажах;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция выполняет поиск отчета о розничных продажах по кассовой смене.
//
Процедура УдалитьОтчетыОРозничныхПродажах(КассоваяСмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьТоварыПоВидамЗапаса(ВыборкаВидыЗапасов, ДеревоТовары, ДеревоСерии, ТаблицаОтчетовОРозничныхПродажах, ОтчетОРозничныхПродажахШаблон, МаксимальноеКоличествоСтрок, ПоследняяИтерация = Истина)
	
	СчетчикСтрок = 1;
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	Пока ВыборкаВидыЗапасов.Следующий() Цикл
		
		Если СчетчикСтрок = 1 Тогда
			
			Если НЕ ОтчетОРозничныхПродажах = Неопределено Тогда
				
				СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажах.Товары, ОтчетОРозничныхПродажах.ЦенаВключаетНДС);
				
				ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
				
				СтрокаТаблицы = ТаблицаОтчетовОРозничныхПродажах.Добавить();
				СтрокаТаблицы.Ссылка = ОтчетОРозничныхПродажах.Ссылка;
				СтрокаТаблицы.СуммаДокумента = СуммаДокумента;
				
			КонецЕсли;
			
			ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажах, ОтчетОРозничныхПродажахШаблон,,"Номер, СуммаДокумента");
			
		КонецЕсли;
		
		ПоискТоваров = Новый Структура(
			"АналитикаУчетаНоменклатуры, Продавец, Партнер, АналитикаУчетаНаборов",
			ВыборкаВидыЗапасов.АналитикаУчетаНоменклатуры,
			ВыборкаВидыЗапасов.Продавец,
			ВыборкаВидыЗапасов.Партнер,
			ВыборкаВидыЗапасов.АналитикаУчетаНаборов);
		
		СтрокиТоварыВидаЗапаса = ДеревоТовары.Строки.НайтиСтроки(ПоискТоваров);
		
		КоличествоКСписанию = ВыборкаВидыЗапасов.Количество;
		
		Для Каждого СтрокаТоварыВидаЗапаса Из СтрокиТоварыВидаЗапаса Цикл
			
			Списано = 0;
			
			Если КоличествоКСписанию = 0 ИЛИ СтрокаТоварыВидаЗапаса.Количество = 0 Тогда
				
				Продолжить;
				
			ИначеЕсли КоличествоКСписанию >= СтрокаТоварыВидаЗапаса.Количество Тогда
				
				СтрокаТовары = ОтчетОРозничныхПродажах.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыВидаЗапаса);
				
				Списано = СтрокаТовары.Количество;
				
				СтрокаТоварыВидаЗапаса.Количество = 0;
				
			Иначе
				
				СтрокаТовары = ОтчетОРозничныхПродажах.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыВидаЗапаса,, "КоличествоУпаковок, Количество, Сумма, СуммаНДС, СуммаРучнойСкидки, КоличествоУпаковокФакт, КоличествоУпаковокУчет");
				
				КоэффициентСписания = КоличествоКСписанию / СтрокаТоварыВидаЗапаса.Количество;
				
				СтрокаТовары.Количество = КоличествоКСписанию;
				СтрокаТовары.Сумма = СтрокаТоварыВидаЗапаса.Сумма * КоэффициентСписания;
				СтрокаТовары.КоличествоУпаковок = СтрокаТоварыВидаЗапаса.КоличествоУпаковок * КоэффициентСписания;
				СтрокаТовары.СуммаНДС = СтрокаТоварыВидаЗапаса.СуммаНДС * КоэффициентСписания;
				СтрокаТовары.СуммаРучнойСкидки = СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки * КоэффициентСписания;
				СтрокаТовары.КоличествоУпаковокФакт = СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт * КоэффициентСписания;
				СтрокаТовары.КоличествоУпаковокУчет = СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет * КоэффициентСписания;
				
				СтрокаТоварыВидаЗапаса.Количество = СтрокаТоварыВидаЗапаса.Количество - СтрокаТовары.Количество;
				СтрокаТоварыВидаЗапаса.Сумма = СтрокаТоварыВидаЗапаса.Сумма - СтрокаТовары.Сумма;
				СтрокаТоварыВидаЗапаса.КоличествоУпаковок = СтрокаТоварыВидаЗапаса.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				СтрокаТоварыВидаЗапаса.СуммаНДС = СтрокаТоварыВидаЗапаса.СуммаНДС - СтрокаТовары.СуммаНДС;
				СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки = СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки - СтрокаТовары.СуммаРучнойСкидки;
				СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт = СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт - СтрокаТовары.КоличествоУпаковокФакт;
				СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет = СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет - СтрокаТовары.КоличествоУпаковокУчет;
				
				Списано = КоличествоКСписанию;
				
			КонецЕсли;
			
			Если Списано <> 0 Тогда
				
				КСписаниюСерии = Списано;
				
				ПоискСерий = Новый Структура("Номенклатура, Характеристика, Помещение",
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Характеристика,
					СтрокаТовары.Помещение);
				
				СтрокиСерии = ДеревоСерии.Строки.НайтиСтроки(ПоискСерий);
				
				Для Каждого СтрокаСерии Из СтрокиСерии Цикл
					
					// Ситуация, когда серия списана целиком.
					Если СтрокаСерии.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Ситуация, когда списали по товару нужное количество из серии.
					Если КСписаниюСерии = 0 Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаСерииТЧ = ОтчетОРозничныхПродажах.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСерииТЧ, СтрокаСерии,, "Количество");
					СтрокаСерииТЧ.Количество = Мин(СтрокаСерии.Количество, КСписаниюСерии);
					СтрокаСерии.Количество = СтрокаСерии.Количество - СтрокаСерииТЧ.Количество;
					
					КСписаниюСерии = КСписаниюСерии - СтрокаСерииТЧ.Количество;
					
				КонецЦикла;
				
			КонецЕсли;
			
			КоличествоКСписанию = КоличествоКСписанию - Списано;
			
		КонецЦикла;
		
		Если СчетчикСтрок = МаксимальноеКоличествоСтрок Тогда
			СчетчикСтрок = 1;
		Иначе
			СчетчикСтрок = СчетчикСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	//Добавим информацию по не перенесённым услугам
	Если ПоследняяИтерация Тогда 
		Для Каждого СтрокаТоварыВидаЗапаса Из ДеревоТовары.Строки Цикл
			
			Если СтрокаТоварыВидаЗапаса.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СчетчикСтрок = 1 Тогда
				
				Если НЕ ОтчетОРозничныхПродажах = Неопределено Тогда
					
					СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажах.Товары, ОтчетОРозничныхПродажах.ЦенаВключаетНДС);
					
					ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
					
					СтрокаТаблицы = ТаблицаОтчетовОРозничныхПродажах.Добавить();
					СтрокаТаблицы.Ссылка = ОтчетОРозничныхПродажах.Ссылка;
					СтрокаТаблицы.СуммаДокумента = СуммаДокумента;
					
				КонецЕсли;
				
				ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажах, ОтчетОРозничныхПродажахШаблон,,"Номер, СуммаДокумента");
				
			КонецЕсли;
			
			СтрокаТовары = ОтчетОРозничныхПродажах.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТоварыВидаЗапаса,, "КоличествоУпаковок, Количество, Сумма, СуммаНДС, СуммаРучнойСкидки, КоличествоУпаковокФакт, КоличествоУпаковокУчет");
			
			СтрокаТовары.Количество = СтрокаТоварыВидаЗапаса.Количество;
			СтрокаТовары.Сумма = СтрокаТоварыВидаЗапаса.Сумма;
			СтрокаТовары.КоличествоУпаковок = СтрокаТоварыВидаЗапаса.КоличествоУпаковок;
			СтрокаТовары.СуммаНДС = СтрокаТоварыВидаЗапаса.СуммаНДС;
			СтрокаТовары.СуммаРучнойСкидки = СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки;
			СтрокаТовары.КоличествоУпаковокФакт = СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт ;
			СтрокаТовары.КоличествоУпаковокУчет = СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет;
			
			СтрокаТоварыВидаЗапаса.Количество = СтрокаТоварыВидаЗапаса.Количество - СтрокаТовары.Количество;
			СтрокаТоварыВидаЗапаса.Сумма = СтрокаТоварыВидаЗапаса.Сумма - СтрокаТовары.Сумма;
			СтрокаТоварыВидаЗапаса.КоличествоУпаковок = СтрокаТоварыВидаЗапаса.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
			СтрокаТоварыВидаЗапаса.СуммаНДС = СтрокаТоварыВидаЗапаса.СуммаНДС - СтрокаТовары.СуммаНДС;
			СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки = СтрокаТоварыВидаЗапаса.СуммаРучнойСкидки - СтрокаТовары.СуммаРучнойСкидки;
			СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт = СтрокаТоварыВидаЗапаса.КоличествоУпаковокФакт - СтрокаТовары.КоличествоУпаковокФакт;
			СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет = СтрокаТоварыВидаЗапаса.КоличествоУпаковокУчет - СтрокаТовары.КоличествоУпаковокУчет;
			
			Если СчетчикСтрок = МаксимальноеКоличествоСтрок Тогда
				СчетчикСтрок = 1;
			Иначе
				СчетчикСтрок = СчетчикСтрок + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОтчетОРозничныхПродажах = Неопределено И ОтчетОРозничныхПродажах.Ссылка.Пустая() Тогда
		
		СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажах.Товары, ОтчетОРозничныхПродажах.ЦенаВключаетНДС);
		
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		
		СтрокаТаблицы = ТаблицаОтчетовОРозничныхПродажах.Добавить();
		СтрокаТаблицы.Ссылка = ОтчетОРозничныхПродажах.Ссылка;
		СтрокаТаблицы.СуммаДокумента = СуммаДокумента;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РаспределитьТабличнуюЧастьПропорциональноСуммам(СписокОтчетовОРозничныхПродажах, ТаблицаКРаспределению, РаспределенныеСуммыДокументов, ИмяТабличнойЧасти)
	
	РаспределеннаяТаблица = ТаблицаКРаспределению.СкопироватьКолонки();
	РаспределеннаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	Если ИмяТабличнойЧасти = "ОплатаБонуснымиБаллами"
		ИЛИ ИмяТабличнойЧасти = "НачислениеБонусныхБаллов" Тогда
		РеквизитСуммы = "СуммаБонусныхБаллов";
	Иначе
		РеквизитСуммы = "Сумма";
	КонецЕсли;
	
	ИндексМассива       = 0;
	ДокументОРП         = СписокОтчетовОРозничныхПродажах[ИндексМассива];
	СуммаКРаспределению = РаспределенныеСуммыДокументов[ИндексМассива];
	
	Для Каждого СтрокаТаблицыКРаспределению Из ТаблицаКРаспределению Цикл
		
		Если СтрокаТаблицыКРаспределению[РеквизитСуммы] <= СуммаКРаспределению Тогда 
			
			СтрокаТЧ = РаспределеннаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицыКРаспределению);
			СтрокаТЧ.Ссылка = ДокументОРП;
			
			Если ИмяТабличнойЧасти = "ПодарочныеСертификаты" Тогда
				СтрокаТЧ.СуммаВВалютеСертификата = СтрокаТаблицыКРаспределению.СуммаВВалютеСертификата;
				СуммаВалютнаяОстатокПоСтрокеКРаспределению = 0;
			КонецЕсли;
			
		Иначе
			
			СуммаОстатокПоСтрокеКРаспределению = СтрокаТаблицыКРаспределению[РеквизитСуммы];
			
			Если ИмяТабличнойЧасти = "ПодарочныеСертификаты" Тогда
				СуммаВалютнаяОстатокПоСтрокеКРаспределению = СтрокаТаблицыКРаспределению.СуммаВВалютеСертификата;
			КонецЕсли;
			
			Пока СуммаОстатокПоСтрокеКРаспределению <> 0 Цикл
				
				Если СуммаОстатокПоСтрокеКРаспределению <= СуммаКРаспределению
					ИЛИ ИндексМассива = РаспределенныеСуммыДокументов.Количество() - 1 Тогда 
					
					СтрокаТЧ = РаспределеннаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицыКРаспределению);
					СтрокаТЧ.Ссылка = ДокументОРП;
					СтрокаТЧ[РеквизитСуммы] = СуммаОстатокПоСтрокеКРаспределению;
					
					Если ИмяТабличнойЧасти = "ПодарочныеСертификаты" Тогда
						СтрокаТЧ.СуммаВВалютеСертификата = СуммаВалютнаяОстатокПоСтрокеКРаспределению;
					КонецЕсли;
					
					СуммаКРаспределению = СуммаКРаспределению - СтрокаТЧ[РеквизитСуммы];
					
					СуммаОстатокПоСтрокеКРаспределению = 0;
					
					Если ИмяТабличнойЧасти = "ПодарочныеСертификаты" Тогда
						СтрокаТЧ.СуммаВВалютеСертификата = СуммаВалютнаяОстатокПоСтрокеКРаспределению;
						СуммаВалютнаяОстатокПоСтрокеКРаспределению = 0;
					КонецЕсли;
					
				Иначе
					
					СтрокаТЧ = РаспределеннаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицыКРаспределению, , РеквизитСуммы + ?(ИмяТабличнойЧасти = "ПодарочныеСертификаты", ",СуммаВВалютеСертификата", ""));
					СтрокаТЧ.Ссылка = ДокументОРП;
					СтрокаТЧ[РеквизитСуммы] = Мин(СуммаКРаспределению, СуммаОстатокПоСтрокеКРаспределению);
					
					Если ИмяТабличнойЧасти = "ПодарочныеСертификаты" Тогда
						СтрокаТЧ.СуммаВВалютеСертификата = СтрокаТаблицыКРаспределению.СуммаВВалютеСертификата * (СтрокаТЧ[РеквизитСуммы] / СтрокаТаблицыКРаспределению[РеквизитСуммы]);
						СуммаВалютнаяОстатокПоСтрокеКРаспределению = СуммаВалютнаяОстатокПоСтрокеКРаспределению - СтрокаТЧ.СуммаВВалютеСертификата;
					КонецЕсли;
					
					СуммаОстатокПоСтрокеКРаспределению = СуммаОстатокПоСтрокеКРаспределению - СтрокаТЧ[РеквизитСуммы];
					
					ИндексМассива       = ИндексМассива + 1;
					ДокументОРП         = СписокОтчетовОРозничныхПродажах[ИндексМассива];
					СуммаКРаспределению = РаспределенныеСуммыДокументов[ИндексМассива];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РаспределеннаяТаблица;
	
КонецФункции

#КонецОбласти

#КонецОбласти
