
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с номенклатурой".
// ОбщийМодуль.РаботаСНоменклатуройПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область АвтоподборНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования.
Процедура ЗаполнитьМассивПолейСобытияИзменениеТекстаРедактирования(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьМассивПолейСобытияПриИзменении.
Процедура ЗаполнитьМассивПолейСобытияПриИзменении(МассивПолей) Экспорт
	
	МассивПолей.Добавить("Наименование");
	МассивПолей.Добавить("Штрихкод");
	МассивПолей.Добавить("ЕдиницаИзмерения");
	МассивПолей.Добавить("Артикул");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаПодсистемы
	
// Функция определяет доступность подсистемы.
// 
// Возвращаемое значение:
//  Булево - признак доступности подсистемы.
//
Функция ДоступнаФункциональностьПодсистемы() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой") 
		И ПравоЧтенияДанных(); 
	
КонецФункции

// Настройки подсистемы
// 
// Возвращаемое значение:
//  Структура - настройки подсистемы, см. РаботаСНоменклатуройПереопределяемый.ПриОпределенииНастроек
//
Функция НастройкиПодсистемы() Экспорт
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ИспользоватьВидыНоменклатуры",                    Ложь);
	Настройки.Вставить("ИспользоватьХарактеристики",                      Ложь);
	Настройки.Вставить("ИспользоватьПакетноеСозданиеНоменклатуры",        Ложь);
	Настройки.Вставить("ИспользоватьПоискПоШтрихкодуВСервисе",            Ложь);
	Настройки.Вставить("СохранятьИерархиюКатегорийПриЗагрузке",           Ложь);
	Настройки.Вставить("РежимПредставленияНоменклатурыСХарактеристиками", "Настраиваемый");
	Настройки.Вставить("ИспользоватьДополнительныеРеквизиты",             ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства"));
	Настройки.Вставить("ИспользоватьВыгрузкуВКаталог1С",                  Истина); // использовать выгрузку в 1С:Номенклатуру
	Настройки.Вставить("ИспользоватьВыгрузкуВНациональныйКаталог",        Истина); // использовать выгрузку в "Национальный каталог"
	
	ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ПраваДоступа

// Проверка права чтения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоЧтенияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверка права изменения объектов подсистемы.
//
// Параметры:
//  ВыводитьСообщение	 - Булево - выводить сообщение в случае отказа.
// 
// Возвращаемое значение:
//  Булево - Истина, если право доступно.
//
Функция ПравоИзмененияДанных(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СоответствиеВидовНоменклатурыРаботаСНоменклатурой);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверка права изменения настроек подсистемы.
//
Функция ПравоИзмененияНастроек() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

#КонецОбласти


#Область СозданиеВидаНоменклатуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьВидНоменклатуры.
Процедура СоздатьВидНоменклатуры(ДанныеЗаполнения, ВидНоменклатурыСсылка) Экспорт
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеЗаполнения.Тип, ТипНоменклатуры);
	
	Родитель = Справочники.Номенклатура.ПустаяСсылка();
	
	СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ДанныеЗаполнения);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") Тогда
		СтруктураДанных.Вставить("ГруппаДоступа", Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить());
	КонецЕсли;
	
	СтруктураДанных.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	СтруктураДанных.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанных.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	СтруктураДанных.Вставить("Родитель", Родитель);
	СтруктураДанных.Вставить("ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураДанных.Вставить("ЕдиницаДляОтчетов", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры") и 
			НЕ ЗначениеЗаполнено(СтруктураДанных.ГруппаДоступа) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнена группа доступа для вида номенклатуры.
				|Необходимо в настройках создания номенклатуры выбрать группу доступа по умолчанию.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ВызватьИсключение НСтр("ru = 'Ошибка создания вида номенклатуры.'");;
	КонецЕсли;
	
	Справочники.ВидыНоменклатуры.СоздатьВидНоменклатуры(СтруктураДанных, ВидНоменклатурыСсылка);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьЗначениеРеквизита.
Процедура СоздатьЗначениеРеквизита(ДополнительныйРеквизит, СтрокаДанных, ЗначениеРеквизитаСсылка) Экспорт
	
	ЗначениеВБазе = ЗначениеПоИдентификатору(ДополнительныйРеквизит, СтрокаДанных.Идентификатор);
	
	Если ЗначениеВБазе <> Неопределено Тогда
		ЗначениеРеквизитаСсылка = ЗначениеВБазе;
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
	
	НовоеЗначение.Владелец = ДополнительныйРеквизит;
	НовоеЗначение.Наименование = СтрокаДанных.Наименование;
	НовоеЗначение.ПолноеНаименование = СтрокаДанных.Наименование;
	НовоеЗначение.Записать();
	
	ЗначениеРеквизитаСсылка = НовоеЗначение.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПрисвоитьРеквизитыОбъекту.
Процедура ПрисвоитьРеквизитыОбъекту(ВидНоменклатуры, ДополнительныеРеквизиты, ЯвляетсяРеквизитомХарактеристики) Экспорт
	
	Если ЯвляетсяРеквизитомХарактеристики Тогда
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойствХарактеристик.ПолучитьОбъект();	
	Иначе
		НаборСвойствОбъект = ВидНоменклатуры.НаборСвойств.ПолучитьОбъект();
	КонецЕсли;
	
	Для каждого ДополнительныйРеквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрокаРеквизита = НаборСвойствОбъект.ДополнительныеРеквизиты.Добавить();	
		
		НоваяСтрокаРеквизита.Свойство = ДополнительныйРеквизит;
		
	КонецЦикла;
	
	НаборСвойствОбъект.Записать();
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьДополнительныйРеквизит.
Процедура СоздатьДополнительныйРеквизит(ВидНоменклатуры, СтрокаДанных, РеквизитСсылка) Экспорт
	
	РеквизитВБазе = РеквизитПоИдентификатору(СтрокаДанных.Идентификатор);
	
	Если РеквизитВБазе <> Неопределено Тогда
		РеквизитСсылка = РеквизитВБазе;
		Возврат;
	КонецЕсли;
	
	НаборСвойств = ВидНоменклатуры.НаборСвойств;
	
	УИД = Новый УникальныйИдентификатор();
	СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
	ИмяРеквизита = СтрокаДанных.Наименование + "_" + СтрокаУИД;
	
	НаименованиеНабора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Наименование");
	Наименование = СтрокаДанных.Наименование + " (" + НаименованиеНабора + ")";
	
	ОписаниеТипа = РаботаСНоменклатурой.ОписаниеТипаНаОснованииТипаСервиса(СтрокаДанных.Тип);
	
	НовыйРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	
	НовыйРеквизит.Наименование = Наименование;
	НовыйРеквизит.Имя          = ИмяРеквизита;
	НовыйРеквизит.Заголовок    = СтрокаДанных.Наименование;
	НовыйРеквизит.ТипЗначения = ОписаниеТипа;
	НовыйРеквизит.Доступен = Истина;
	
	НовыйРеквизит.Записать();
	
	РеквизитСсылка = НовыйРеквизит.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаписатьШтрихкоды.
Процедура ЗаписатьШтрихкоды(ДанныеПоШтрихкодам) Экспорт 
	
	ЕдиницыИзмерения = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ДанныеПоШтрихкодам Цикл
		
		Если ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура) = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(ЭлементКоллекции.Номенклатура, 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.Номенклатура, "ЕдиницаИзмерения"));
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Штрихкод.Установить(ЭлементКоллекции.Штрихкод);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура         = ЭлементКоллекции.Номенклатура;
		НоваяЗапись.Характеристика   = ЭлементКоллекции.Характеристика;
		НоваяЗапись.Штрихкод         = ЭлементКоллекции.Штрихкод;
		НоваяЗапись.Упаковка = ЕдиницыИзмерения.Получить(ЭлементКоллекции.Номенклатура);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияВидаНоменклатурыИКатегории.
Процедура ПолучитьОтличияВидаНоменклатурыИКатегории(ДанныеКатегории, ДанныеВидаНоменклатуры, ТаблицаОтличийРеквизитов) Экспорт
	
	// Проверка наименования
	
	Если ДанныеВидаНоменклатуры.Наименование <> ДанныеКатегории.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"Наименование", ДанныеКатегории.Наименование, ДанныеВидаНоменклатуры.Наименование);
	КонецЕсли; 
	
	// Проверка ставки НДС
	
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеКатегории.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеВидаНоменклатуры.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеВидаНоменклатуры.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));
	КонецЕсли; 
	
	// Проверка типа номенклатуры
	
	ТипНоменклатурыСервиса = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	ПреобразоватьТипНоменклатурыСервиса(ДанныеКатегории.Тип, ТипНоменклатурыСервиса);
	
	Если ДанныеВидаНоменклатуры.ТипНоменклатуры <> ТипНоменклатурыСервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ТипНоменклатуры", ТипНоменклатурыСервиса, ДанныеВидаНоменклатуры.ТипНоменклатуры, 
			НСтр("ru = 'Тип номенклатуры'"),,НЕ ЗначениеЗаполнено(ДанныеВидаНоменклатуры.ТипНоменклатуры));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНоменклатуры

#Область ОсновныеРеквизиты

// См. РаботаСНоменклатуройПереопределяемый.СоздатьНоменклатуру.
Процедура СоздатьНоменклатуру(ДанныеЗаполнения, НоменклатураСсылка) Экспорт
	
	// Подготовка данных
	
	СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеЗаполнения.СтавкаНДС, СтавкаНДС);
	
	СсылкаНаЕдиницуИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	ЕдиницаИзмеренияПоДаннымСервиса(ДанныеЗаполнения.ЕдиницаИзмерения, СсылкаНаЕдиницуИзмерения);
	
	// Заполнение объекта
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.Заполнить(Неопределено);
	
	НоменклатураОбъект.УстановитьНовыйКод();
	
	НаименованиеПолное = ?(ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеДляПечати), 
		ДанныеЗаполнения.НаименованиеДляПечати, 
		ДанныеЗаполнения.Наименование);
		
	НоменклатураОбъект.Наименование = ДанныеЗаполнения.Наименование;
	НоменклатураОбъект.Артикул = ДанныеЗаполнения.Артикул;
	НоменклатураОбъект.НаименованиеПолное = НаименованиеПолное;
	НоменклатураОбъект.ЕдиницаИзмерения = СсылкаНаЕдиницуИзмерения;
	НоменклатураОбъект.СтавкаНДС = СтавкаНДС;
	НоменклатураОбъект.Описание = ДанныеЗаполнения.Описание;
	НоменклатураОбъект.ВидНоменклатуры = ДанныеЗаполнения.ВидНоменклатурыПоУмолчанию.ВидНоменклатуры;
	НоменклатураОбъект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
	НоменклатураОбъект.ИспользованиеХарактеристик = НоменклатураОбъект.ВидНоменклатуры.ИспользованиеХарактеристик;
	
	Если НЕ ЗначениеЗаполнено(НоменклатураОбъект.ВидНоменклатуры) Тогда
		ТекстОшибки = НСтр("ru = 'Для номенклатуры <%1> не удалось подобрать вид номенклатуры.
		|В базе ни один вид номенклатуры не сопоставлен с категорией <%2> из сервиса 1С:Номенклатура.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЗаполнения.Наименование, ДанныеЗаполнения.Категория.Наименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка создания номенклатуры.'");;
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	
	НоменклатураСсылка = НоменклатураОбъект.Ссылка;
	
	// Сохранение изображения
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Изображения) Тогда
		ПрикрепитьИзображения(НоменклатураСсылка, ДанныеЗаполнения.Изображения.ВыгрузитьКолонку("ИзображениеURL"));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Характеристики

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристику.
Процедура СоздатьХарактеристику(Характеристика, Владелец, ХарактеристикаСсылка) Экспорт
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	
	НоваяХарактеристика.Владелец = Владелец;
	НоваяХарактеристика.Наименование = Характеристика.Наименование;
	
	НоваяХарактеристика.Записать();
	
	ХарактеристикаСсылка = НоваяХарактеристика.Ссылка;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СоздатьХарактеристикуСДополнительнымиРеквизитами.
Процедура СоздатьХарактеристикуСДополнительнымиРеквизитами(Характеристика, Владелец, ХарактеристикаСсылка) Экспорт
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	ЗаполнитьЗначенияРеквизитовХарактеристики(
		ЗначенияДополнительныхРеквизитов, 
		Характеристика);
	
	Если ЗначенияДополнительныхРеквизитов.Количество() <> 0 Тогда
		ХарактеристикаСсылка = Неопределено;
		СоздатьХарактеристику(Характеристика, Владелец, ХарактеристикаСсылка);
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ХарактеристикаСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияДополнительныхРеквизитов.
Процедура ЗаполнитьЗначенияДополнительныхРеквизитов(ДанныеЗаполнения, НоменклатураСсылка) Экспорт 
		
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого ДополнительныйРеквизит Из ДанныеЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ДополнительныйРеквизит.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = ДополнительныйРеквизит.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(ДополнительныйРеквизит);
		
	КонецЦикла;
	
	Если ЗначенияДополнительныхРеквизитов.Количество() > 0 Тогда
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьОтличияНоменклатуры.
Процедура ПолучитьОтличияНоменклатуры(ДанныеНоменклатурыСервиса, ДанныеНоменклатурыБазы, ТаблицаОтличийРеквизитов) Экспорт
	
	СоответствиеПолей = Новый Структура();
	
	СоответствиеПолей.Вставить("Наименование", "Наименование");
	СоответствиеПолей.Вставить("Артикул",      "Артикул");
	
	Для каждого ЭлементКоллекции Из СоответствиеПолей Цикл
		Если ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение] <> ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ] Тогда
			РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
				ЭлементКоллекции.Значение, ДанныеНоменклатурыСервиса[ЭлементКоллекции.Ключ], ДанныеНоменклатурыБазы[ЭлементКоллекции.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеНоменклатурыБазы.НаименованиеПолное <> ДанныеНоменклатурыСервиса.Наименование Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"НаименованиеПолное", ДанныеНоменклатурыСервиса.Наименование, ДанныеНоменклатурыБазы.НаименованиеПолное, НСтр("ru = 'Полное наименование'"));
	КонецЕсли;
	
	СтавкаНДССервиса = Справочники.СтавкиНДС.ПустаяСсылка();
	ПреобразоватьСтавкуНДССервиса(ДанныеНоменклатурыСервиса.СтавкаНДС, СтавкаНДССервиса);
	
	Если ДанныеНоменклатурыБазы.СтавкаНДС <> СтавкаНДССервиса Тогда
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"СтавкаНДС", СтавкаНДССервиса, ДанныеНоменклатурыБазы.СтавкаНДС, НСтр("ru = 'Ставка НДС'"));		
	КонецЕсли; 
	
	ЕдиницаИзмеренияСервиса = ДанныеНоменклатурыСервиса.ЕдиницаИзмерения;
	
	Если Строка(ДанныеНоменклатурыБазы.ЕдиницаИзмерения) <> ЕдиницаИзмеренияСервиса.Наименование Тогда
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(ЕдиницаИзмеренияСервиса.ОКЕИ);
		ЕдиницаИзмеренияВБазе = СоответствиеКодовОКЕИ[ЕдиницаИзмеренияСервиса.ОКЕИ];
		
		РаботаСНоменклатурой.ДобавитьСтрокуВТаблицуОтличий(ТаблицаОтличийРеквизитов, 
			"ЕдиницаИзмерения",  ЕдиницаИзмеренияВБазе, ДанныеНоменклатурыБазы.ЕдиницаИзмерения, НСтр("ru = 'Единица измерения'"), ЕдиницаИзмеренияСервиса.Наименование);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФункциональностьСистемы

// См. РаботаСНоменклатуройПереопределяемый.РазрешеноПакетноеСозданиеНоменклатуры.
Процедура РазрешеноПакетноеСозданиеНоменклатуры(РазрешеноПакетноеСоздание) Экспорт
	
	РазрешеноПакетноеСоздание = Ложь;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ВедетсяУчетПоХарактеристикам.
Процедура ВедетсяУчетПоХарактеристикам(ИспользоватьХарактеристикиНоменклатуры) Экспорт
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ВедетсяУчетВидовНоменклатуры.
Процедура ВедетсяУчетВидовНоменклатуры(Результат) Экспорт
	
	Результат = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхИнформационнойБазы

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры.
Процедура ЗаполнитьТаблицуХарактеристикПоВидуНоменклатуры(ВидНоменклатуры, ЗначенияХарактеристикТекущейБазы) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК ХарактеристикаБазы,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|	И НЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ЗначенияХарактеристикТекущейБазы = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ИспользуютсяИндивидуальныеХарактеристики.
Процедура ИспользуютсяИндивидуальныеХарактеристики(ВидНоменклатуры, Результат) Экспорт
	
	Вид = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ИспользованиеХарактеристик");
	
	Результат = Вид = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьДополнительныеРеквизитыВидаНоменклатуры.
Процедура ПолучитьДополнительныеРеквизитыВидаНоменклатуры(ВидНоменклатуры, ТаблицаРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство КАК РеквизитВидаНоменклатуры,
	|	ЛОЖЬ КАК ЯвляетсяХарактеристикой,
	|	ДополнительныеРеквизиты.Свойство.Заголовок КАК РеквизитВидаНоменклатурыПредставление
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойств КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.Свойство,
	|	ИСТИНА,
	|	ДополнительныеРеквизиты.Свойство.Заголовок
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				ВидыНоменклатуры.НаборСвойствХарактеристик КАК НаборСвойств
	|			ИЗ
	|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ГДЕ
	|				ВидыНоменклатуры.Ссылка = &ВидНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовВидовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовВидовНоменклатуры(Знач ВидыНоменклатуры, Результат) Экспорт
	
	Если ТипЗнч(ВидыНоменклатуры) <> Тип("Массив") Тогда
		ВидыНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидыНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ВидыНоменклатуры.Наименование КАК Наименование,
	|	ВидыНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВидыНоменклатуры.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка В(&ВидыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатуры.
Процедура ПолучитьЗначенияРеквизитовНоменклатуры(Знач Номенклатура, Результат) Экспорт
	
	Если ТипЗнч(Номенклатура) <> Тип("Массив") Тогда
		Номенклатура = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.Описание КАК Описание,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	Номенклатура.КодОКПД2 КАК КодОКПД2
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатуры.
Процедура ПолучитьВидНоменклатуры(НоменклатураСсылка, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ВидНоменклатуры");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьВидНоменклатурыИзФормы.
Процедура ПолучитьВидНоменклатурыИзФормы(Форма, ВидНоменклатуры) Экспорт
	
	ВидНоменклатуры = Форма.Объект.ВидНоменклатуры;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияРеквизитовНоменклатурыИзФормы.
Процедура ПолучитьЗначенияРеквизитовНоменклатурыИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	ЗначенияРеквизитов.Вставить("Наименование");
	ЗначенияРеквизитов.Вставить("СтавкаНДС");
	ЗначенияРеквизитов.Вставить("Описание");
	ЗначенияРеквизитов.Вставить("Артикул");
	ЗначенияРеквизитов.Вставить("ЕдиницаИзмерения");
	ЗначенияРеквизитов.Вставить("НаименованиеПолное");
	ЗначенияРеквизитов.Вставить("КодТНВЭД");
	ЗначенияРеквизитов.Вставить("КодОКПД2");
	
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[ЭлементКоллекции.Ключ] = Форма.Объект[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитовИзФормы.
Процедура ПолучитьЗначенияДополнительныхРеквизитовИзФормы(Форма, ЗначенияРеквизитов) Экспорт
	
	УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма,Форма.Объект);
	
	ЗначенияРеквизитов = Форма.Объект.ДополнительныеРеквизиты.Выгрузить(, "Свойство, Значение");
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере.
Процедура ПоискНоменклатурыПоШтрихкодуПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Связь характеристики и номенклатуры
	
	СвязиПараметровВыбора = Новый Массив();
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Номенклатура", 
			"Элементы.ШтрихкодыНоменклатуры.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Элементы.ШтрихкодыНоменклатурыХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	// Добавление реквизитов
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"), "ШтрихкодыНоменклатуры"));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьАлкогольнаяПродукция", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИспользоватьПодключаемоеОборудование", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПоддерживаемыеТипыПодключаемогоОборудования", Новый ОписаниеТипов("Строка")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "ШтрихкодыНоменклатуры"));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавление элементов
	
	НовыйЭлемент             = Форма.Элементы.Вставить("АлкогольнаяПродукция", Тип("ПолеФормы"), Элементы.ШтрихкодыНоменклатуры, Элементы.ШтрихкодыНоменклатурыНоменклатураСервиса);
	НовыйЭлемент.Вид         = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ШтрихкодыНоменклатуры.АлкогольнаяПродукция";
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Алкогольная продукция';
									|en = 'Alcoholic products'");
	НовыйЭлемент.Видимость   = Ложь;
	
	НовыйЭлемент             = Форма.Элементы.Вставить("ГруппаУпаковкаЕдиницаИзмерения", Тип("ГруппаФормы"), Элементы.ШтрихкодыНоменклатуры, Элементы.ШтрихкодыНоменклатурыКоличество);
	НовыйЭлемент.Вид         = ВидГруппыФормы.ГруппаКолонок;
	НовыйЭлемент.Заголовок   = НСтр("ru = 'Упаковка, единица измерения';
									|en = 'Packaging, unit of measure'");
	НовыйЭлемент.Группировка = ГруппировкаКолонок.ВЯчейке;
	НовыйЭлемент.Видимость   = Истина;
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("Упаковка", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ОтображатьВШапке 		= Ложь;
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Упаковка";
	НовыйЭлемент.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	НовыйЭлемент.Видимость   	  		= Истина;
	
	Элемент = Форма.Элементы.Найти("ШтрихкодыНоменклатурыЕдиницаИзмерения");
	Элемент.ОтображатьВШапке 			= Ложь;
	Элемент.Видимость 					= Ложь;
	Форма.Элементы.Переместить(Элемент, Элементы.ГруппаУпаковкаЕдиницаИзмерения);	
	
	НовыйЭлемент            	  		= Форма.Элементы.Вставить("ЕдиницаИзмерения", Тип("ПолеФормы"), Элементы.ГруппаУпаковкаЕдиницаИзмерения);
	НовыйЭлемент.Вид         	  		= ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок 				= НСтр("ru = 'Ед. изм.';
													|en = 'UOM'");
	НовыйЭлемент.ПутьКДанным 	  		= "ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения";
	НовыйЭлемент.Видимость   	  		= Истина;
	
	// Настройка видимости колонки алкогольной продукции
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	
	Для каждого ЭлементКоллекции Из Форма.Параметры.НеизвестныеШтрихкоды Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭлементКоллекции);
		Если ЗначениеЗаполнено(ДанныеСтроки.АлкогольнаяПродукция) Тогда
			Форма.ЕстьАлкогольнаяПродукция = Истина;
			НовыйЭлемент.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьНоменклатуруПоШтрихкодам.
Процедура ПолучитьНоменклатуруПоШтрихкодам(Штрихкоды, ДанныеПоШтрихкодам) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Упаковка КАК ЕдиницаИзмерения,
	|	Штрихкоды.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|ГДЕ
	|	Штрихкоды.Штрихкод В(&ШтрихКоды)";
	
	Запрос.УстановитьПараметр("ШтрихКоды", ШтрихКоды);
	
	ДанныеПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения.
Процедура ПоискНоменклатурыПоШтрихкодуОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ШтрихкодыНоменклатуры = Форма.ШтрихкодыНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыНоменклатуры.Штрихкод                      КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура                  КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика                КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка                      КАК ЕдиницаИзмерения,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование     КАК НоменклатураПредставление,
	|	ШтрихкодыНоменклатуры.Характеристика.Наименование   КАК ХарактеристикаПредставление,
	|	ШтрихкодыНоменклатуры.Упаковка.Наименование         КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)";
	
	Запрос.УстановитьПараметр("Штрихкоды", ШтрихкодыНоменклатуры.Выгрузить(Новый Структура("Зарегистрирован", Ложь),"Штрихкод").ВыгрузитьКолонку("Штрихкод"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Штрихкод уже записан в БД
		
		СтрокаТЧ = ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", Выборка.Штрихкод))[0];
		
		ОписаниеОшибки = НСтр("ru = 'Такой штрихкод уже назначен для номенклатуры %Номенклатура%';
								|en = 'Such barcode is already specified  for products %Номенклатура%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + Выборка.НоменклатураПредставление + """"
			+ ?(ЗначениеЗаполнено(Выборка.Характеристика), " " + НСтр("ru = 'с характеристикой';
																		|en = 'with characteristic'") + " """ + Выборка.ХарактеристикаПредставление + """", "")
			+ ?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения), " """ + НСтр("ru = 'с единицей измерения';
																			|en = 'with UOM'") + " " + Выборка.ЕдиницаИзмеренияПредставление + """", ""));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки,,"ШтрихкодыНоменклатуры["+ШтрихкодыНоменклатуры.Индекс(СтрокаТЧ)+"].Штрихкод",,Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПослеЗагрузкиНоменклатурыСервиса.
Процедура ПоискНоменклатурыПоШтрихкодуПослеЗагрузкиНоменклатуры(СтрокаТаблицыШтрихкодов, НоменклатураСсылка) Экспорт
		
	СтрокаТаблицыШтрихкодов.Упаковка 
		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураСсылка, "ЕдиницаИзмерения");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанных

// См. РаботаСНоменклатуройПереопределяемый.ЗарегистрироватьШтрихкоды.
Процедура ЗарегистрироватьШтрихкоды(ШтрихкодыНоменклатуры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаШтрихкода Из ШтрихкодыНоменклатуры Цикл
					
			МенеджерЗаписи                  = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Штрихкод         = СтрокаШтрихкода.Штрихкод;
			МенеджерЗаписи.Номенклатура     = СтрокаШтрихкода.Номенклатура;
			МенеджерЗаписи.Характеристика   = СтрокаШтрихкода.Характеристика;
			МенеджерЗаписи.Упаковка 		= СтрокаШтрихкода.Упаковка;
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
				
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьВидНоменклатуры.
Процедура ЗаполнитьВидНоменклатуры(ВидНоменклатурыСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ВидНоменклатурыОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		ВидНоменклатурыОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаНоменклатуры")
		и НЕ ЗначениеЗаполнено(ВидНоменклатурыОбъект.ГруппаДоступа) Тогда
		ВидНоменклатурыОбъект.ГруппаДоступа = Константы.ГруппаДоступаНоменклатурыИзСервиса.Получить();
	КонецЕсли;
	
	ВидНоменклатурыОбъект.Записать();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуру.
Процедура ЗаполнитьНоменклатуру(НоменклатураСсылка, ТаблицаИзменений) Экспорт
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(НоменклатураОбъект.Ссылка);
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		НоменклатураОбъект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
	НоменклатураОбъект.Записать();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатуры.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатуры(НоменклатураСсылка, ДополнительныеРеквизиты) Экспорт
	
	Если ДополнительныеРеквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияДополнительныхРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Свойство");
	ЗначенияДополнительныхРеквизитов.Колонки.Добавить("Значение");
	
	Для каждого Реквизит Из ДополнительныеРеквизиты Цикл
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Реквизит.РеквизитОбъекта;
		НоваяСтрока.Значение = Реквизит.НовоеЗначение;
		
	КонецЦикла;
	
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(НоменклатураСсылка, ЗначенияДополнительныхРеквизитов);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ПолучитьЗначенияДополнительныхРеквизитов.
Процедура ПолучитьЗначенияДополнительныхРеквизитов(Номенклатура, ЗначенияРеквизитов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК ВладелецСвойств,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ЗначенияРеквизитов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьНоменклатуруВФорме.
Процедура ЗаполнитьНоменклатуруВФорме(Форма, ТаблицаИзменений) Экспорт
		
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		Форма.Объект[ЭлементКоллекции.РеквизитОбъекта] = ЭлементКоллекции.НовоеЗначение;
	КонецЦикла;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме.
Процедура ЗаполнитьДополнительныеРеквизитыНоменклатурыВФорме(Форма, ТаблицаИзменений) Экспорт
	
	Объект = Форма.Объект;
	
	Для каждого ЭлементКоллекции Из ТаблицаИзменений Цикл
		
		СтрокиРеквизита = Объект.ДополнительныеРеквизиты.
			НайтиСтроки(Новый Структура("Свойство", ЭлементКоллекции.РеквизитОбъекта));
		
		Если СтрокиРеквизита.Количество() = 0 Тогда
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = ЭлементКоллекции.РеквизитОбъекта;
			НоваяСтрока.Значение = ЭлементКоллекции.НовоеЗначение;	
		Иначе
			СтрокиРеквизита[0].Значение = ЭлементКоллекции.НовоеЗначение; 
		КонецЕсли;
		
	КонецЦикла;	

	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.СформироватьНаименованиеПоХарактеристике.
Процедура СформироватьНаименованиеПоХарактеристике(НаименованиеНоменклатуры, ПредставлениеХарактеристики, НаименованиеХарактеристики) Экспорт
	
	НаименованиеХарактеристики = СтрШаблон("%1 ,%2", НаименованиеНоменклатуры, ПредставлениеХарактеристики);
	
КонецПроцедуры

#КонецОбласти

#Область Разное

// См. РаботаСНоменклатуройКлиентПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Прикрепление изображений к номенклатуре по массиву адресов.
//
// Параметры:
//  НоменклатураСсылка	 - Ссылка - владелец изображений.
//  СсылкиНаИзображения	 - Массив (Строка) - ссылки на изображения.
//
Процедура ПрикрепитьИзображения(НоменклатураСсылка, СсылкиНаИзображения) Экспорт
	
	ЭтоСсылка = ТипЗнч(НоменклатураСсылка) = Тип("СправочникСсылка.Номенклатура");
	
	СозданныеИзображения = Новый Массив;
	
	Для каждого ИзображениеURL Из СсылкиНаИзображения Цикл
		
		ДанныеИзображения = ДвоичныеДанныеПоАдресуURL(ИзображениеURL);
		
		ИмяИзображения = "";
		РасширениеИзображения = "";
		
		ПодстрокиАдреса = СтрРазделить(ИзображениеURL, "/");
		
		Если ПодстрокиАдреса.Количество() > 0  Тогда
			ИмяИзображения = ПодстрокиАдреса[ПодстрокиАдреса.ВГраница()];
			
			ПодстрокиИмени = СтрРазделить(ИмяИзображения, ".");
			
			Если ПодстрокиИмени.Количество() = 2 Тогда
				ИмяИзображения = ПодстрокиИмени[0];	
				РасширениеИзображения = ПодстрокиИмени[1];	
			КонецЕсли;	
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ?(ЭтоСсылка,НоменклатураСсылка,НоменклатураСсылка.Ссылка));
		ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяИзображения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеИзображения);
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		СозданныеИзображения.Добавить(
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДанныеИзображения)));
		
	КонецЦикла;
	
	Если СозданныеИзображения.Количество() > 0 Тогда
		НоменклатураОбъект = ?(ЭтоСсылка, НоменклатураСсылка.ПолучитьОбъект(), НоменклатураСсылка);
		НоменклатураОбъект.ФайлКартинки = СозданныеИзображения[0];
		НоменклатураОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Получение значения ставки НДС по идентификатору.
//
// Параметры:
//  Значение - Строка - значение ставки НДС (-, 10, 18).
//  Ссылка	 - СправочникСсылка, ПеречислениеСсылка - ссылка на значение ставки НДС прикладного решения.
//
Процедура ПреобразоватьСтавкуНДССервиса(Знач Значение, Ссылка) Экспорт
	
	СтандартнаяСтавкаНДС = Справочники.СтавкиНДС.НДС12;
	
	Ссылка = СтандартнаяСтавкаНДС;
	
	Если Значение = "10" Или Значение = "18" Или Значение = "20" Тогда
		Ссылка = СтандартнаяСтавкаНДС;
	Иначе
		Ссылка = Справочники.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

// Преобразование типа объекта сервиса в объект прикладного решения.
//
// Параметры:
//  Значение	 - Строка - тип объекта сервиса.
//  Результат	 - Произвольный - преобразованный тип.
//
Процедура ПреобразоватьТипНоменклатурыСервиса(Знач Значение, Результат)

	Если Значение = "Услуга" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Услуга;
	ИначеЕсли Значение = "Товар" Тогда 
		Результат = Перечисления.ТипыНоменклатуры.Товар;
	Иначе 
		Результат = Перечисления.ТипыНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
КонецПроцедуры

// Поиск и создание единицы измерения, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияПоДаннымСервиса(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка) Экспорт 
	
	ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка);
	
	Если ЕдиницуИзмеренияСсылка <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницуИзмеренияСсылка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
	
	ЕдиницуИзмеренияСсылка.Наименование = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	ЕдиницуИзмеренияСсылка.Записать();
	
КонецПроцедуры

// Поиск единицы измерения в информационной базе, на основании данных сервиса
//
// Параметры:
//  ЕдиницаИзмеренияСервиса	 - Структура - см. РаботаСНоменклатурой.ДанныеНоменклатурыСервиса, колонка ЕдиницаИзмерения.
//  ЕдиницуИзмеренияСсылка	 - Справочник.Ссылка - ссылка на созданную единицу измерения.
//
Процедура ЕдиницаИзмеренияВБазе(ЕдиницаИзмеренияСервиса, ЕдиницуИзмеренияСсылка)
	
	КодОКЕИ = "";
	СсылкаНаЕдиницуИзмерения = Неопределено;
	
	Если ЕдиницаИзмеренияСервиса.Свойство("ОКЕИ", КодОКЕИ) Тогда
		СоответствиеКодовОКЕИ = Справочники.УпаковкиЕдиницыИзмерения.ЗаполнитьЕдиницыИзмеренияИзКлассификатора(КодОКЕИ);
		СсылкаНаЕдиницуИзмерения = СоответствиеКодовОКЕИ[КодОКЕИ];
	КонецЕсли;
	
	Если СсылкаНаЕдиницуИзмерения <> Неопределено Тогда
		ЕдиницуИзмеренияСсылка = СсылкаНаЕдиницуИзмерения;
		Возврат ;
	КонецЕсли;
	
	НаименованиеЕдиницыИзмерения = СокрЛП(ЕдиницаИзмеренияСервиса.Наименование);
	
	Если НЕ ЗначениеЗаполнено(НаименованиеЕдиницыИзмерения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Наименование = &Наименование
	|	И ЕдиницыИзмерения.Код = """"";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеЕдиницыИзмерения);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		ЕдиницуИзмеренияСсылка = Выгрузка[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСНоменклатуройПереопределяемый.ЗаполнитьЗначенияРеквизитовХарактеристики.
Процедура ЗаполнитьЗначенияРеквизитовХарактеристики(ЗначенияДополнительныхРеквизитов, Характеристика)
	
	ЗначенияДополнительныхРеквизитов.Очистить();
	
	Для каждого Свойство Из Характеристика.ДополнительныеРеквизиты Цикл
		
		Если Не ЗначениеЗаполнено(Свойство.РеквизитИнформационнойБазы) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЗначенияДополнительныхРеквизитов.Добавить();
		
		НоваяСтрока.Свойство = Свойство.РеквизитИнформационнойБазы;
		НоваяСтрока.Значение = РаботаСНоменклатурой.ЗначениеДополнительногоРеквизита(Свойство);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//  АдресURL - Строка - адрес хранения данных.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - полученные данные.
//
Функция ДвоичныеДанныеПоАдресуURL(АдресURL)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресURL);
	
	ПараметрыСоединения = Новый Структура("Протокол, ИмяСервера, АдресРесурса, Порт, Таймаут, ЗащищенноеСоединение, Прокси");
	ПараметрыСоединения.Протокол     = СтруктураURI.Схема;
	ПараметрыСоединения.ИмяСервера   = СтруктураURI.Хост;
	ПараметрыСоединения.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыСоединения.Порт         = СтруктураURI.Порт;
	ПараметрыСоединения.Таймаут      = 30;
	ПараметрыСоединения.ЗащищенноеСоединение = ПараметрыСоединения.Протокол = "https";
	ПараметрыСоединения.Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(ПараметрыСоединения.Протокол);
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда
		СертификатыУдостоверяющихЦентров = Неопределено;
		Если Не ОбщегоНазначения.ЭтоLinuxСервер() И Не ОбщегоНазначения.РазделениеВключено() Тогда
			// Ошибка фреша при работе с веб сервисами. Не работает проверка доверенных сертификатов при установке соединения.
			СертификатыУдостоверяющихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, СертификатыУдостоверяющихЦентров);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.ИмяСервера,
			ПараметрыСоединения.Порт,,,,ПараметрыСоединения.Таймаут, ЗащищенноеСоединение);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка установки соединения при получении изображения'");
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(ПараметрыСоединения.АдресРесурса);
	
	Попытка
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ВызватьИсключение НСтр("ru = 'Ошибка получения изображения'");
	КонецПопытки;
	
	Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

Функция РеквизитПоИдентификатору(Идентификатор)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта КАК РеквизитОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеРеквизитовРаботаСНоменклатурой КАК СоответствиеРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеРеквизитовРаботаСНоменклатурой.ИдентификаторРеквизитаКатегории = &ИдентификаторРеквизитаКатегории
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеРеквизитовРаботаСНоменклатурой.РеквизитОбъекта";
	
	Запрос.УстановитьПараметр("ИдентификаторРеквизитаКатегории", Идентификатор);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.РеквизитОбъекта;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

Функция ЗначениеПоИдентификатору(ДополнительныйРеквизит, Идентификатор)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.СоответствиеЗначенийРеквизитовРаботаСНоменклатурой КАК СоответствиеЗначенийРеквизитовРаботаСНоменклатурой
	|ГДЕ
	|	СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.РеквизитОбъекта = &РеквизитОбъекта
	|	И СоответствиеЗначенийРеквизитовРаботаСНоменклатурой.ИдентификаторЗначенияРеквизитаКатегории = &ИдентификаторЗначенияРеквизитаКатегории";
	
	Запрос.УстановитьПараметр("ИдентификаторЗначенияРеквизитаКатегории", Идентификатор);
	Запрос.УстановитьПараметр("РеквизитОбъекта", ДополнительныйРеквизит);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Значение;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеШтрихкода(Штрихкод) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеШтрихкода = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Выборка);
		Возврат ДанныеШтрихкода;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруПоШтрихкоду(Форма, Номенклатура) Экспорт
	
	ШтрихКоды = РегистрыСведений.ШтрихкодыНоменклатуры.ШтрихкодыНоменклатуры(Номенклатура, 
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Номенклатура.ЕдиницаИзмерения);
	
	Если ШтрихКоды.Количество() > 0 Тогда
		НайденныеСтроки = Форма.ШтрихкодыНоменклатуры.НайтиСтроки(Новый Структура("Штрихкод", ШтрихКоды[0]));
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			ТекСтрока.Зарегистрирован = Истина;
			ТекСтрока.Номенклатура = Номенклатура;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПользователюОНарушенииПравДоступа()
	
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры


#КонецОбласти