
Процедура ЦС_СтатусПеремещенияОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ПолучитьОбъектОснования = Источник.Распоряжение.ПолучитьОбъект();
	Если ТипЗнч(ПолучитьОбъектОснования) = Тип("ДокументОбъект.ПеремещениеТоваров") тогда
		ПолучитьОбъектОснования.ОбменДанными.Загрузка = Истина;
		ПолучитьОбъектОснования.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		ПолучитьОбъектОснования.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);	
КонецПроцедуры


Процедура swПроверитьЗадолженностьКонтрагента(Отказ, ДокументСсылка) Экспорт
	СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетовПоТЧ(ДокументСсылка);
	НастройкиКонтроляЗадолженности = swОбщегоНазначения.ПолучитьНастройкиКонтроляЗадолженности(ДокументСсылка.Партнер, ДокументСсылка.Валюта, ДокументСсылка.Дата);
	Если НастройкиКонтроляЗадолженности.НеКонтролироватьЗадолженность Тогда
		Возврат;
	КонецЕсли;
	СуммаДолга = 0;
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ЕСТЬNULL(СУММА(Данные.Приход), 0) КАК Приход,
	        |	ЕСТЬNULL(СУММА(Данные.Расход), 0) КАК Расход
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		Данные.СуммаПриход КАК Приход,
	        |		Данные.СуммаРасход КАК Расход
	        |	ИЗ
	        |		РегистрНакопления.РасчетыСКлиентами.Обороты(
	        |				,
	        |				,
	        |				Регистратор,
	        |				АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	        |					И Валюта = &ВалютаВзаиморасчетов) КАК Данные
	        |	ГДЕ
	        |		НЕ Данные.Регистратор = &Ссылка
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		Данные.СуммаПриход,
	        |		Данные.СуммаРасход
	        |	ИЗ
	        |		РегистрНакопления.РасчетыСПоставщиками.Обороты(
	        |				,
	        |				,
	        |				Регистратор,
	        |				АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	        |					И Валюта = &ВалютаВзаиморасчетов) КАК Данные
	        |	ГДЕ
	        |		НЕ Данные.Регистратор = &Ссылка) КАК Данные";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументСсылка.Валюта);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаДолга = СуммаДолга + Выборка.Приход - Выборка.Расход;
	КонецЦикла;
	Если СуммаДолга + СуммаВзаиморасчетов > НастройкиКонтроляЗадолженности.РазрешеннаяСуммаЗадолженности Тогда
		ТекстОшибки = НСтр("ru='Долг клиента в валюте " + ДокументСсылка.Валюта + " составляет " + Формат(СуммаДолга, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + ", по текущему документу он увеличится на " + Формат(СуммаВзаиморасчетов, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + ", в сумме это больше, чем разрешенная задолженность " + Формат(НастройкиКонтроляЗадолженности.РазрешеннаяСуммаЗадолженности, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + "'");
		//Начало: МК Баубериков А - 28.10.2020 - закомментировал доступ по роли		
		//Если Не РольДоступна("swРазрешитьПродажуТоваровВДолг") Тогда
		//	ТекстОшибки = ТекстОшибки + НСтр("ru=', документ не может быть проведен'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		//Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//КонецЕсли;
		//Конец: МК Баубериков А - 28.10.2020

	КонецЕсли;
КонецПроцедуры // sw end

Функция ПолучитьСуммуВзаиморасчетовПоТЧ(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Сумма КАК Сумма
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.Сумма),0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ НЕ &ВернутьМногооборотнуюТару
	|	ИЛИ &ТребуетсяЗалогЗаТару
	|");
	
	Запрос.УстановитьПараметр("Товары", ДокументСсылка.Товары.Выгрузить(,"Номенклатура,Сумма"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ДокументСсылка.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ДокументСсылка.ТребуетсяЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаИтого = Выгрузка[0].СуммаВзаиморасчетов;
	Возврат СуммаИтого;
	
КонецФункции

//Начало: МК Баубериков А - 11.05.2020
&НаСервере
Функция ВыгруженВВМС(Ссылка) Экспорт
	
	Выгружен = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Infor_ИсторияСтатусовВМС.Объект КАК Объект,
	|	Infor_ИсторияСтатусовВМС.СтатусОбъекта КАК СтатусОбъекта
	|ИЗ
	|	РегистрСведений.Infor_ИсторияСтатусовВМС КАК Infor_ИсторияСтатусовВМС
	|ГДЕ
	|	Infor_ИсторияСтатусовВМС.Объект = &Объект
	|	И Infor_ИсторияСтатусовВМС.СтатусОбъекта = &СтатусОбъекта";
	Запрос.УстановитьПараметр("Объект",Ссылка);
	Запрос.УстановитьПараметр("СтатусОбъекта","Создано внешне");
	тзРез = Запрос.Выполнить().Выгрузить();
	
	Если тзРез.Количество()>0 тогда
		Выгружен = Истина;
	КонецЕсли;
	
	Возврат Выгружен;
	
КонецФункции
//Окончание: МК Баубериков А - 11.05.2020


//ТТ
//Ссылка. Тип: Любая ссылка. Ссылка на искомый объект;
//Свойство. Тип: План видов характеристик ДополнительныеРеквизитыИСведения. Дополнительное свойство;
//Значение. Тип: заданный для данного свойства.
Функция ЗаписатьЗначениеДопРеквизита(Ссылка, Свойство, Значение, ЭтоСсылка = Истина) Экспорт
	
	Попытка
		Если ЭтоСсылка Тогда
			ОбъектСсылки = Ссылка.ПолучитьОбъект();
		Иначе
			ОбъектСсылки = Ссылка;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Свойство",Свойство);
		Массив = ОбъектСсылки.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
		
		Если Массив.Количество() = 0 Тогда
			НовоеСвойство = ОбъектСсылки.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = Свойство;
			НовоеСвойство.Значение = Значение;
		Иначе
			Массив[0].Значение = Значение;
		КонецЕсли;	
		
		Если ЭтоСсылка Тогда
			ОбъектСсылки.Записать();
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки
	
КонецФункции

//Ссылка. Тип: Любая ссылка. Ссылка на искомый объект;
//Свойство. Тип: План видов характеристик ДополнительныеРеквизитыИСведения. Дополнительное свойство.
Функция ПолучитьЗначениеДопРеквизита(Ссылка, Свойство) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Свойство",Свойство);
	Массив = Ссылка.ДополнительныеРеквизиты.НайтиСтроки(ПараметрыОтбора);
	
	Если Массив.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Массив[0].Значение;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьДатуЗапрета(ТекСклад,ТекДата) Экспорт
	Нашел = ТекСклад.ЗапретОтгрузки.Найти(ТекДата);
	Возврат Нашел = Неопределено;
КонецФункции
