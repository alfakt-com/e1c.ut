
// Данный модуль содержит процедуры и функции, предназначенные
// для формирования движений по альтернативному учету товаров.

/////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
/////////////////////////////////////////////////////////////////////

// Данная функция формирует движения по товарам для переданного документа.
//
// Параметры:
//   Ссылка - ссылка на документ
//   Отказ - признак ошибки формирования движений
//   Заголовок - заголовок для вывода ошибок
//
Функция СформироватьДвижениеТоваров(Ссылка, Отказ, Заголовок) Экспорт
	Результат = Истина;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		Результат = СформироватьДвиженияВводаОстатковТоваров(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Результат = СформироватьДвиженияВозвратаОтКлиента(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Результат = СформироватьДвиженияВозвратаПоставщику(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		ТаблицаПоступлений = Ссылка.Товары.Выгрузить();
		ТаблицаПоступлений.Свернуть("ДокументПоступления");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.ДокументПоступления;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.ДокументПоступления, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Результат = СформироватьДвиженияОприходованияИзлишковТоваров(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Результат = СформироватьДвиженияПеремещения(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Результат = СформироватьДвиженияПересортицы(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПорчаТоваров") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Результат = СформироватьДвиженияПоступленияТоваровУслуг(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ТаблицаПоступлений = Ссылка.Расходы.Выгрузить();
		ТаблицаПоступлений.Свернуть("АналитикаРасходов");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.АналитикаРасходов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.АналитикаРасходов;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.АналитикаРасходов, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Результат = СформироватьДвиженияРеализации(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		// Формирование проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		Результат = СформироватьДвиженияСписанияНедостач(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		ТаблицаПоступлений = Ссылка.Товары.Выгрузить();
		ТаблицаПоступлений.Свернуть("ДокументПоступления");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.ДокументПоступления;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.ДокументПоступления, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не Отказ И Не Результат Тогда
		Отказ = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Данная функция отменяет движения по товарам для переданного документа.
//
// Параметры:
//   Ссылка - ссылка на документ
//   Отказ - признак ошибки формирования движений
//   Заголовок - заголовок для вывода ошибок
//
Функция ОтменитьДвижениеТоваров(Ссылка, Отказ, Заголовок) Экспорт
	Результат = Истина;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
		ПродажиПартий = РегистрыНакопления.swПродажиПартийТоваровОрганизаций.СоздатьНаборЗаписей();
		ПродажиПартий.Отбор.Регистратор.Значение = Ссылка;
		ПродажиПартий.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		ТаблицаПоступлений = Ссылка.Товары.Выгрузить();
		ТаблицаПоступлений.Свернуть("ДокументПоступления");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.ДокументПоступления;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.ДокументПоступления, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПорчаТоваров") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		ТаблицаПоступлений = Ссылка.Расходы.Выгрузить();
		ТаблицаПоступлений.Свернуть("АналитикаРасходов");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.АналитикаРасходов) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.АналитикаРасходов;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.АналитикаРасходов, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
		ПродажиПартий = РегистрыНакопления.swПродажиПартийТоваровОрганизаций.СоздатьНаборЗаписей();
		ПродажиПартий.Отбор.Регистратор.Значение = Ссылка;
		ПродажиПартий.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		// Отмену проводок создать в будущем (если будет необходимо)
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПартий.Записать();
		ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
		ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
		ДвиженияПоВидамОпераций.Записать();
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		ТаблицаПоступлений = Ссылка.Товары.Выгрузить();
		ТаблицаПоступлений.Свернуть("ДокументПоступления");
		Для Каждого СтрокаПоступлений Из ТаблицаПоступлений Цикл
			Если ТипЗнч(СтрокаПоступлений.ДокументПоступления) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
				ЗаголовокТекущий = Заголовок + Символы.ВК + "Переформирование движений по " + СтрокаПоступлений.ДокументПоступления;
				Результат = СформироватьДвиженияПоступленияТоваровУслуг(СтрокаПоступлений.ДокументПоступления, ЗаголовокТекущий);
			КонецЕсли;
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не Отказ И Не Результат Тогда
		Отказ = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Данная функция помечает на удаление партии документа.
//
// Параметры:
//   Ссылка - ссылка на документ
//   Отказ - признак ошибки формирования движений
//   Заголовок - заголовок для вывода ошибок
//
Функция ПометитьНаУдалениеПартииТоваров(Ссылка, Отказ, Заголовок) Экспорт
	Результат = Истина;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		Результат = ПометитьНаУдалениеПартии(Ссылка, Заголовок);
	КонецЕсли;
	Если Не Отказ И Не Результат Тогда
		Отказ = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

/////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ПОСЛЕДОВАТЕЛЬНОСТЬЮ "swПартииТоваровОрганизаций"
/////////////////////////////////////////////////////////////////////

// Данная функция регистрирует документ в последовательности (или
// отменяет его регистрацию в последовательности). Так же она, в
// случае необходимости, сдвигает границу последовательности на
// этот документ. Функция возвращает "Истина", если граница
// последовательности была смещена назад или вперед, и возвращает
// "Ложь", если граница находится до документа и не может быть
// смещена.
//
// Параметры:
//   Регистратор - документ, регистрируемый в последовательности
//   Дата - период регистрации
//   Организация - организация регистрации
//   ОчиститьРегистрацию - признак удаления из последовательности
//
Функция ЗарегистрироватьДвиженияВПоследовательности(Регистратор, Дата, Организация, ОчиститьРегистрацию) Экспорт
	Результат = Истина;
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(Организация) И Метаданные.Последовательности.swПартииТоваровОрганизаций.Документы.Содержит(Регистратор.Метаданные()) Тогда
		НаборЗаписейПоследовательности = Последовательности.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Регистратор);
		Если Не ОчиститьРегистрацию Тогда
			Запись = НаборЗаписейПоследовательности.Добавить();
			Запись.Период = Дата;
			Запись.Организация = Организация;
			Запись.Регистратор = Регистратор;
		КонецЕсли;
		НаборЗаписейПоследовательности.Записать();
	КонецЕсли;
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(Организация) Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Организация);
		ГраницаПоследовательности = Последовательности.swПартииТоваровОрганизаций.ПолучитьГраницу(Отбор);
		МоментВремениДокумента = Новый МоментВремени(Дата, Регистратор);
		Если ГраницаПоследовательности.Сравнить(МоментВремениДокумента) = 1 Тогда
			Последовательности.swПартииТоваровОрганизаций.УстановитьГраницу(МоментВремениДокумента, Отбор);
		ИначеЕсли ГраницаПоследовательности.Сравнить(МоментВремениДокумента) = - 1 Тогда
			Запрос = Новый Запрос;
			Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			        |	Последовательность.Регистратор
			        |ИЗ
			        |	Последовательность.swПартииТоваровОрганизаций КАК Последовательность
			        |ГДЕ
			        |	Последовательность.МоментВремени > &ГраницаПоследовательности
			        |	И Последовательность.Организация = &Организация
			        |	И Последовательность.МоментВремени < &МоментВремениДокумента
			        |	И (НЕ Последовательность.Регистратор = &Регистратор)";
			Запрос.Текст = Текст;
			Запрос.УстановитьПараметр("ГраницаПоследовательности", ГраницаПоследовательности);
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("МоментВремениДокумента", МоментВремениДокумента);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Если Запрос.Выполнить().Пустой() Тогда
				Последовательности.swПартииТоваровОрганизаций.УстановитьГраницу(МоментВремениДокумента, Отбор);
			Иначе
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

/////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ПАРТИЯМИ ТОВАРОВ ОРГАНИЗАЦИЙ
/////////////////////////////////////////////////////////////////////

// Данная функция возвращает партию, соответствующую документу и
// строке товаров в документе.
//
// Параметры:
//   Ссылка - ссылка на документ
//   Ошибки - структура информации об ошибках
//
Функция ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ) Экспорт
	Партия = Справочники.swПартииТоваровОрганизаций.СоздатьЭлемент();
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.swПартия
	        |ИЗ
	        |	РегистрСведений.swСвязьПартийИДокументов КАК Данные
	        |ГДЕ
	        |	Данные.Документ = &Документ
	        |	И Данные.swПартия.Владелец = &Владелец
	        |	И Данные.swПартия.НомерСтроки = &НомерСтроки";
	Запрос.Текст = Текст;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("Владелец", СтрокаТМЦ.Номенклатура);
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаТМЦ.НомерСтроки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("Владелец", СтрокаТМЦ.Номенклатура);
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаТМЦ.НомерСтроки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("Владелец", СтрокаТМЦ.Номенклатура);
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаТМЦ.НомерСтроки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("Владелец", СтрокаТМЦ.НоменклатураОприходование);
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаТМЦ.НомерСтроки);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("Владелец", СтрокаТМЦ.Номенклатура);
		Запрос.УстановитьПараметр("НомерСтроки", СтрокаТМЦ.НомерСтроки);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Партия = Выборка.swПартия.ПолучитьОбъект();
	КонецЕсли;
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		Партия.Наименование = "" + Ссылка + ", строка " + СтрокаТМЦ.НомерСтроки;
		Партия.ПометкаУдаления = Ложь;
		Партия.Владелец = СтрокаТМЦ.Номенклатура;
		Партия.Поставщик = СтрокаТМЦ.Поставщик;
		Партия.НомерСтроки = СтрокаТМЦ.НомерСтроки;
		Партия.ДатаПрихода = СтрокаТМЦ.ДатаПрихода;
		Партия.СтатусПартии = Перечисления.swСтатусыПартийТоваров.Купленный;
		Партия.ВалютаЗакупочнойЦены = СтрокаТМЦ.ВалютаЗакупочнойЦены;
		Партия.ЗакупочнаяЦенаВВалюте = СтрокаТМЦ.ЗакупочнаяЦенаВВалюте;
		Партия.ЗакупочнаяЦена = СтрокаТМЦ.ЗакупочнаяЦена;
		Партия.ПриходнаяЦена = СтрокаТМЦ.ЗакупочнаяЦена;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Партия.Наименование = "" + Ссылка + ", строка " + СтрокаТМЦ.НомерСтроки;
		Партия.ПометкаУдаления = Ложь;
		Партия.Владелец = СтрокаТМЦ.Номенклатура;
		Партия.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
		Партия.НомерСтроки = СтрокаТМЦ.НомерСтроки;
		Партия.ДатаПрихода = Ссылка.Дата;
		Партия.СтатусПартии = Перечисления.swСтатусыПартийТоваров.Возвращенный;
		Партия.ВалютаЗакупочнойЦены = СтрокаТМЦ.ВалютаЦеныПоступления;
		Партия.ЗакупочнаяЦенаВВалюте = СтрокаТМЦ.ЦенаПоступленияВВалюте;
		Партия.ЗакупочнаяЦена = СтрокаТМЦ.ЦенаПоступления;
		Партия.ПриходнаяЦена = СтрокаТМЦ.ЦенаПоступления;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
		Партия.Наименование = "" + Ссылка + ", строка " + СтрокаТМЦ.НомерСтроки;
		Партия.ПометкаУдаления = Ложь;
		Партия.Владелец = СтрокаТМЦ.Номенклатура;
		Партия.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
		Партия.НомерСтроки = СтрокаТМЦ.НомерСтроки;
		Партия.ДатаПрихода = Ссылка.Дата;
		Партия.СтатусПартии = Перечисления.swСтатусыПартийТоваров.Оприходованный;
		Партия.ВалютаЗакупочнойЦены = СтрокаТМЦ.ВалютаЦены;
		Партия.ЗакупочнаяЦенаВВалюте = СтрокаТМЦ.Цена;
		Партия.ЗакупочнаяЦена = СтрокаТМЦ.Цена;
		Партия.ПриходнаяЦена = СтрокаТМЦ.Цена;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПересортицаТоваров") Тогда
		Партия.Наименование = "" + Ссылка + ", строка " + СтрокаТМЦ.НомерСтроки;
		Партия.ПометкаУдаления = Ложь;
		Партия.Владелец = СтрокаТМЦ.НоменклатураОприходование;
		Партия.Поставщик = Справочники.Контрагенты.ПустаяСсылка();
		Партия.НомерСтроки = СтрокаТМЦ.НомерСтроки;
		Партия.ДатаПрихода = Ссылка.Дата;
		Партия.СтатусПартии = Перечисления.swСтатусыПартийТоваров.Пересортица;
		Партия.ВалютаЗакупочнойЦены = СтрокаТМЦ.ВалютаЦены;
		Партия.ЗакупочнаяЦенаВВалюте = СтрокаТМЦ.Цена;
		Партия.ЗакупочнаяЦена = СтрокаТМЦ.Цена;
		Партия.ПриходнаяЦена = СтрокаТМЦ.Цена;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Партия.Наименование = "" + Ссылка + ", строка " + СтрокаТМЦ.НомерСтроки;
		Партия.ПометкаУдаления = Ложь;
		Партия.Владелец = СтрокаТМЦ.Номенклатура;
		Партия.Поставщик = Ссылка.Контрагент;
		Партия.НомерСтроки = СтрокаТМЦ.НомерСтроки;
		Партия.ДатаПрихода = Ссылка.Дата;
		Партия.СтатусПартии = Перечисления.swСтатусыПартийТоваров.Купленный;
		Партия.ВалютаЗакупочнойЦены = Ссылка.Валюта;
		Партия.ЗакупочнаяЦенаВВалюте = СтрокаТМЦ.ЗакупочнаяЦенаВВалюте;
		Партия.ЗакупочнаяЦена = СтрокаТМЦ.ЗакупочнаяЦена;
		Партия.ПриходнаяЦена = СтрокаТМЦ.ПриходнаяЦена;
	КонецЕсли;
	Партия.Записать();
	МенеджерЗаписи = РегистрыСведений.swСвязьПартийИДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Ссылка.Организация;
	МенеджерЗаписи.Документ = Ссылка;
	МенеджерЗаписи.swПартия = Партия.Ссылка;
	МенеджерЗаписи.Записать();
	Возврат Партия.Ссылка;
КонецФункции

// Данная функция помечает на удаление партии товара, соответствующие
// переданной в процедуру ссылке на документ.
//
// Параметры:
//   Ссылка - ссылка на документ
//
Функция ПометитьНаУдалениеПартии(Ссылка, Заголовок) Экспорт
	Результат = Истина;
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.swПартия
	        |ИЗ
	        |	РегистрСведений.swСвязьПартийИДокументов КАК Данные
	        |ГДЕ
	        |	Данные.Документ = &Документ";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.swПартия.ПометкаУдаления Тогда
			Партия = Выборка.swПартия.ПолучитьОбъект();
			Партия.ПометкаУдаления = Истина;
			Попытка
				Партия.Записать();
			Исключение
				Результат = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

/////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО ПАРТИЯМ ТОВАРОВ ОРГАНИЗАЦИЙ
/////////////////////////////////////////////////////////////////////

Функция СформироватьДвиженияВводаОстатковТоваров(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	ДанныеВалютыДокумента = swОбщегоНазначения.ПолучитьДанныеВалюты(Ссылка.Валюта, Ссылка.Дата);
	ВидПриходнойЦены = Константы.swВидПриходнойЦены.Получить();
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияЦен = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ДвиженияЦен.Отбор.Регистратор.Значение = Ссылка;
	
	ТаблицаПриходныхЦен = Новый ТаблицаЗначений;
	ТаблицаПриходныхЦен.Колонки.Добавить("Номенклатура");
	ТаблицаПриходныхЦен.Колонки.Добавить("Цена");
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Товары.НомерСтроки,
		        |	Товары.Номенклатура,
		        |	Товары.Склад,
		        |	Товары.ДатаПрихода,
		        |	Товары.Поставщик,
		        |	Товары.Количество,
		        |	Товары.ЗакупочнаяЦенаВВалюте,
		        |	Товары.ВалютаЗакупочнойЦены,
		        |	ВЫРАЗИТЬ(ВЫБОР
		        |			КОГДА &КратностьВалютыДокумента = 0
		        |					ИЛИ &КурсВалютыУУ = 0
		        |				ТОГДА 0
		        |			ИНАЧЕ Товары.ЗакупочнаяЦенаВВалюте * &КурсВалютыДокумента / &КратностьВалютыДокумента * &КратностьВалютыУУ / &КурсВалютыУУ
		        |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЗакупочнаяЦена,
		        |	Товары.Сумма,
		        |	Товары.СуммаБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		Товары.НомерСтроки КАК НомерСтроки,
		        |		Товары.Номенклатура КАК Номенклатура,
		        |		Товары.Ссылка.Склад КАК Склад,
		        |		Товары.Ссылка.Дата КАК ДатаПрихода,
		        |		Товары.Ссылка.Контрагент КАК Поставщик,
		        |		Товары.Количество КАК Количество,
		        |		ВЫРАЗИТЬ(ВЫБОР
		        |				КОГДА Товары.Количество = 0
		        |					ТОГДА 0
		        |				ИНАЧЕ Товары.Цена * (Товары.КоличествоУпаковок / Товары.Количество)
		        |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЗакупочнаяЦенаВВалюте,
		        |		Товары.Ссылка.Валюта КАК ВалютаЗакупочнойЦены,
		        |		ВЫРАЗИТЬ(ВЫБОР
		        |				КОГДА &КратностьВалютыДокумента = 0
		        |						ИЛИ &КурсВалютыУУ = 0
		        |					ТОГДА 0
		        |				ИНАЧЕ Товары.Сумма * &КурсВалютыДокумента / &КратностьВалютыДокумента * &КратностьВалютыУУ / &КурсВалютыУУ
		        |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
		        |		ВЫРАЗИТЬ(ВЫБОР
		        |				КОГДА &КратностьВалютыДокумента = 0
		        |						ИЛИ &КурсВалютыУУ = 0
		        |					ТОГДА 0
		        |				ИНАЧЕ Товары.СуммаБезНДС * &КурсВалютыДокумента / &КратностьВалютыДокумента * &КратностьВалютыУУ / &КурсВалютыУУ
		        |			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС
		        |	ИЗ
		        |		Документ.ВводОстатков.Товары КАК Товары
		        |	ГДЕ
		        |		Товары.Ссылка = &Документ
		        |		И Товары.Ссылка.Проведен) КАК Товары";
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("КурсВалютыУУ", ДанныеВалютыУУ.Курс);
		Запрос.УстановитьПараметр("КратностьВалютыУУ", ДанныеВалютыУУ.Кратность);
		Запрос.УстановитьПараметр("КурсВалютыДокумента", ДанныеВалютыДокумента.Курс);
		Запрос.УстановитьПараметр("КратностьВалютыДокумента", ДанныеВалютыДокумента.Кратность);
		ТаблицаТМЦ = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = ТаблицаТМЦ.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			Индекс = КоличествоСтрок - Сч;
			СтрокаТМЦ = ТаблицаТМЦ[Индекс];
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				ТаблицаТМЦ.Удалить(СтрокаТМЦ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			ПартияТовара = ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ);
			
			Движение = ДвиженияПартий.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Склад = СтрокаТМЦ.Склад;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.Количество = СтрокаТМЦ.Количество;
			Движение.Стоимость = СтрокаТМЦ.Сумма;
			Движение.СтоимостьБезНДС = СтрокаТМЦ.СуммаБезНДС;
			
			Движение = ДвиженияПоВидамОпераций.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.ОстатокКоличество = СтрокаТМЦ.Количество;
			Движение.ОстатокСтоимость = СтрокаТМЦ.Сумма;
			Движение.ОстатокСтоимостьБезНДС = СтрокаТМЦ.СуммаБезНДС;
			Движение.ОприходованиеКоличество = Движение.ОстатокКоличество;
			Движение.ОприходованиеСтоимость = Движение.ОстатокСтоимость;
			Движение.ОприходованиеСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
			
			СтрокаТаблицыПриходныхЦен = ТаблицаПриходныхЦен.Найти(СтрокаТМЦ.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыПриходныхЦен = Неопределено Тогда
				СтрокаТаблицыПриходныхЦен = ТаблицаПриходныхЦен.Добавить();
				СтрокаТаблицыПриходныхЦен.Номенклатура = СтрокаТМЦ.Номенклатура;
				СтрокаТаблицыПриходныхЦен.Цена = СтрокаТМЦ.ЗакупочнаяЦена;
			Иначе
				Если СтрокаТаблицыПриходныхЦен.Цена < СтрокаТМЦ.ЗакупочнаяЦена Тогда
					СтрокаТаблицыПриходныхЦен.Цена = СтрокаТМЦ.ЗакупочнаяЦена;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВидПриходнойЦены) Тогда
			ОбработаннаяНоменклатура = Новый Массив;
			Запрос = Новый Запрос;
			Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			        |	ЦеныНоменклатуры.Номенклатура
			        |ИЗ
			        |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			        |ГДЕ
			        |	ЦеныНоменклатуры.Период = &Период
			        |	И ЦеныНоменклатуры.Номенклатура В(&СписокНоменклатуры)
			        |	И ЦеныНоменклатуры.ВидЦены = &ВидЦены
			        |	И ЦеныНоменклатуры.Характеристика = &ПустаяХарактеристикаНоменклатуры
			        |	И НЕ ЦеныНоменклатуры.Регистратор = &ЭтотДокумент";
			Запрос.Текст = Текст;
			Запрос.УстановитьПараметр("Период", Ссылка.Дата);
			Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
			Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаПриходныхЦен.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ВидЦены", ВидПриходнойЦены);
			Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ТаблицаУжеУстановленныхЦен = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТаблицыУжеУстановленныхЦен Из ТаблицаУжеУстановленныхЦен Цикл
				ОбработаннаяНоменклатура.Добавить(СтрокаТаблицыУжеУстановленныхЦен.Номенклатура);
			КонецЦикла;
			Для Каждого СтрокаТаблицыПриходныхЦен Из ТаблицаПриходныхЦен Цикл
				Если Не ОбработаннаяНоменклатура.Найти(СтрокаТаблицыПриходныхЦен.Номенклатура) = Неопределено Тогда
					Продолжить;
				Иначе
					ОбработаннаяНоменклатура.Добавить(СтрокаТаблицыПриходныхЦен.Номенклатура);
				КонецЕсли;
				Движение = ДвиженияЦен.Добавить();
				Движение.Период = Ссылка.Дата;
				Движение.Номенклатура = СтрокаТаблицыПриходныхЦен.Номенклатура;
				Движение.ВидЦены = ВидПриходнойЦены;
				Движение.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движение.Валюта = ДанныеВалютыУУ.Валюта;
				Движение.Цена = СтрокаТаблицыПриходныхЦен.Цена;
				Движение.Упаковка = Движение.Номенклатура.ЕдиницаИзмерения;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	ДвиженияЦен.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияВозвратаОтКлиента(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	ДанныеВалютыДокумента = swОбщегоНазначения.ПолучитьДанныеВалюты(Ссылка.Валюта, Ссылка.Дата);
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	ПродажиПартий = РегистрыНакопления.swПродажиПартийТоваровОрганизаций.СоздатьНаборЗаписей();
	ПродажиПартий.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоТоварам = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.НомерСтроки КАК НомерСтроки,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Количество КАК Количество,
		        |	ВЫРАЗИТЬ(Данные.Цена * Данные.КоличествоУпаковок КАК ЧИСЛО(15, 2)) КАК СуммаДоПримененияСкидок,
		        |	Данные.СуммаСНДС КАК Сумма,
		        |	Данные.СуммаНДС КАК СуммаНДС,
		        |	Данные.Ссылка.Склад КАК Склад,
		        |	Данные.ДокументРеализации КАК ДокументПартии,
		        |	Данные.Ссылка.Менеджер КАК Продавец,
		        |	Данные.Ссылка.Валюта КАК ВалютаЦеныПоступления,
		        |	0 КАК ЦенаПоступленияВВалюте,
		        |	0 КАК ЦенаПоступления
		        |ИЗ
		        |	Документ.ВозвратТоваровОтКлиента.Товары КАК Данные
		        |ГДЕ
		        |	Данные.Ссылка = &Ссылка
		        |	И НЕ Данные.Количество = 0
		        |	И Данные.Номенклатура.ТипНоменклатуры В(&ТребуемыеТипыНоменклатуры)";
		ЗапросПоТоварам.Текст = Текст;
		ЗапросПоТоварам.УстановитьПараметр("Ссылка", Ссылка);
		ТребуемыеТипыНоменклатуры = Новый Массив;
		ТребуемыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		ЗапросПоТоварам.УстановитьПараметр("ТребуемыеТипыНоменклатуры", ТребуемыеТипыНоменклатуры);
		ТаблицаТМЦ = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	ПроданныеПартии.ДокументПартии КАК ДокументПартии,
		        |	ПроданныеПартии.Номенклатура КАК Номенклатура,
		        |	ПроданныеПартии.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	ПроданныеПартии.Партия.Наименование КАК НаименованиеПартии,
		        |	ПроданныеПартии.Партия.НомерСтроки КАК НомерСтроки,
		        |	ПроданныеПартии.Партия КАК Партия,
		        |	ПроданныеПартии.Количество - ЕСТЬNULL(ВозвращенныеПартии.Количество, 0) КАК Количество,
		        |	ПроданныеПартии.Стоимость - ЕСТЬNULL(ВозвращенныеПартии.Стоимость, 0) КАК Стоимость,
		        |	ПроданныеПартии.СтоимостьБезНДС - ЕСТЬNULL(ВозвращенныеПартии.СтоимостьБезНДС, 0) КАК СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПроданныеПартии.Регистратор КАК ДокументПартии,
		        |		ПроданныеПартии.Номенклатура КАК Номенклатура,
		        |		ПроданныеПартии.swПартия КАК Партия,
		        |		СУММА(ПроданныеПартии.Количество) КАК Количество,
		        |		СУММА(ПроданныеПартии.Стоимость) КАК Стоимость,
		        |		СУММА(ПроданныеПартии.СтоимостьБезНДС) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций КАК ПроданныеПартии
		        |	ГДЕ
		        |		ПроданныеПартии.Организация = &Организация
		        |		И ПроданныеПартии.Регистратор В(&СписокДокументовПартий)
		        |		И ПроданныеПартии.Номенклатура В(&СписокНоменклатуры)
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПроданныеПартии.Регистратор,
		        |		ПроданныеПартии.Номенклатура,
		        |		ПроданныеПартии.swПартия) КАК ПроданныеПартии
		        |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |			ВозвращенныеПартии.ДокументПартииПриВозврате КАК ДокументПартии,
		        |			ВозвращенныеПартии.Номенклатура КАК Номенклатура,
		        |			ВозвращенныеПартии.swПартия КАК Партия,
		        |			СУММА(ВозвращенныеПартии.Количество) КАК Количество,
		        |			СУММА(ВозвращенныеПартии.Стоимость) КАК Стоимость,
		        |			СУММА(ВозвращенныеПартии.СтоимостьБезНДС) КАК СтоимостьБезНДС
		        |		ИЗ
		        |			РегистрНакопления.swПартииТоваровОрганизаций КАК ВозвращенныеПартии
		        |		ГДЕ
		        |			ВозвращенныеПартии.Организация = &Организация
		        |			И НЕ ВозвращенныеПартии.Регистратор = &ТекущийВозврат
		        |			И ВозвращенныеПартии.Номенклатура В(&СписокНоменклатуры)
		        |			И ВозвращенныеПартии.ДокументПартииПриВозврате В(&СписокДокументовПартий)
		        |		
		        |		СГРУППИРОВАТЬ ПО
		        |			ВозвращенныеПартии.ДокументПартииПриВозврате,
		        |			ВозвращенныеПартии.Номенклатура,
		        |			ВозвращенныеПартии.swПартия) КАК ВозвращенныеПартии
		        |		ПО ПроданныеПартии.ДокументПартии = ВозвращенныеПартии.ДокументПартии
		        |			И ПроданныеПартии.Номенклатура = ВозвращенныеПартии.Номенклатура
		        |			И ПроданныеПартии.Партия = ВозвращенныеПартии.Партия
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	ДокументПартии,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("ТекущийВозврат", Ссылка);
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", ТаблицаТМЦ.ВыгрузитьКолонку("Номенклатура"));
		СписокДокументовПартий = Новый Массив;
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			Если ТипЗнч(СтрокаТМЦ.ДокументПартии) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Или ТипЗнч(СтрокаТМЦ.ДокументПартии) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
				Если ЗначениеЗаполнено(СтрокаТМЦ.ДокументПартии) И СписокДокументовПартий.Найти(СтрокаТМЦ.ДокументПартии) = Неопределено Тогда
					СписокДокументовПартий.Добавить(СтрокаТМЦ.ДокументПартии);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗапросПоПартиям.УстановитьПараметр("СписокДокументовПартий", СписокДокументовПартий);
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		НомерСтрокиКОбработкеПоПродажам = 0;
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
			СтруктураПоиска.Вставить("ДокументПартии", СтрокаТМЦ.ДокументПартии);
			СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
				
				Если СтрокаПоПартиям.Количество > КоличествоПоДокументу Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = СтрокаТМЦ.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = КоличествоПоДокументу;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					Движение.ДокументПартииПриВозврате = СтрокаТМЦ.ДокументПартии;
					
					СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - Движение.Количество;
					СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - Движение.Стоимость;
					СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - Движение.СтоимостьБезНДС;
					
					КоличествоПоДокументу = 0;
					
				ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = СтрокаТМЦ.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = СтрокаПоПартиям.Количество;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
					Движение.ДокументПартииПриВозврате = СтрокаТМЦ.ДокументПартии;
					
					КоличествоПоДокументу = КоличествоПоДокументу - Движение.Количество;
					
					СтрокаПоПартиям.Количество = 0;
					СтрокаПоПартиям.Стоимость = 0;
					СтрокаПоПартиям.СтоимостьБезНДС = 0;
					
				КонецЕсли;
				
				Если КоличествоПоДокументу = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПоДокументу > 0 Тогда
				
				ПартияТовара = ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ);
				
				Движение = ДвиженияПартий.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = СтрокаТМЦ.Склад;
				Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
				Движение.swПартия = ПартияТовара;
				Движение.Количество = КоличествоПоДокументу;
				Движение.Стоимость = 0;
				Движение.СтоимостьБезНДС = 0;
				
			КонецЕсли;
			
			РаспределеннаяСумма = 0;
			РаспределеннаяСуммаБезНДС = 0;
			РаспределеннаяСуммаДоПримененияСкидок = 0;
			РаспределеннаяСуммаСкидки = 0;
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			Если ДанныеВалютыДокумента.Кратность = 0 Или ДанныеВалютыУУ.Курс = 0 Тогда
				СуммаКРаспределению = 0;
				СуммаБезНДСКРаспределению = 0;
				СуммаДоПримененияСкидокКРаспределению = 0;
				СуммаСкидкиКРаспределению = 0;
			Иначе
				СуммаКРаспределению = Окр(СтрокаТМЦ.Сумма * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаБезНДСКРаспределению = Окр((СтрокаТМЦ.Сумма - СтрокаТМЦ.СуммаНДС) * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаДоПримененияСкидокКРаспределению = Окр(СтрокаТМЦ.СуммаДоПримененияСкидок * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаСкидкиКРаспределению = Окр((СтрокаТМЦ.СуммаДоПримененияСкидок - СтрокаТМЦ.Сумма) * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
			КонецЕсли;
			
			Пока НомерСтрокиКОбработкеПоПродажам < ДвиженияПартий.Количество() Цикл
				ДвижениеПартий = ДвиженияПартий[НомерСтрокиКОбработкеПоПродажам];
				Движение = ПродажиПартий.Добавить();
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = СтрокаТМЦ.Склад;
				Движение.Покупатель = Ссылка.Контрагент;
				Движение.ДоговорПокупателя = Ссылка.Договор;
				Движение.Номенклатура = ДвижениеПартий.Номенклатура;
				Движение.swПартия = ДвижениеПартий.swПартия;
				Движение.swПродавец = СтрокаТМЦ.Продавец;
				Движение.Количество = - ДвижениеПартий.Количество;
				Движение.Сумма = - СуммаКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.СуммаБезНДС = - СуммаБезНДСКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.Себестоимость = - ДвижениеПартий.Стоимость;
				Движение.СебестоимостьБезНДС = - ДвижениеПартий.СтоимостьБезНДС;
				Движение.СуммаДоПримененияСкидки = - СуммаДоПримененияСкидокКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.СуммаСкидки = - СуммаСкидкиКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				НомерСтрокиКОбработкеПоПродажам = НомерСтрокиКОбработкеПоПродажам + 1;
				РаспределеннаяСумма = РаспределеннаяСумма + Движение.Сумма;
				РаспределеннаяСуммаБезНДС = РаспределеннаяСуммаБезНДС + Движение.СуммаБезНДС;
				РаспределеннаяСуммаДоПримененияСкидок = РаспределеннаяСуммаДоПримененияСкидок + Движение.СуммаДоПримененияСкидки;
				РаспределеннаяСуммаСкидки = РаспределеннаяСуммаСкидки + Движение.СуммаСкидки;
			КонецЦикла;
			
			Если Не -СуммаКРаспределению = РаспределеннаяСумма И Не РаспределеннаяСумма = 0 Тогда
				Движение.Сумма = Движение.Сумма - СуммаКРаспределению - РаспределеннаяСумма;
			КонецЕсли;
			
			Если Не -СуммаБезНДСКРаспределению = РаспределеннаяСуммаБезНДС И Не РаспределеннаяСуммаБезНДС = 0 Тогда
				Движение.СуммаБезНДС = Движение.СуммаБезНДС - СуммаБезНДСКРаспределению - РаспределеннаяСуммаБезНДС;
			КонецЕсли;
			
			Если Не -СуммаДоПримененияСкидокКРаспределению = РаспределеннаяСуммаДоПримененияСкидок И Не РаспределеннаяСуммаДоПримененияСкидок = 0 Тогда
				Движение.СуммаДоПримененияСкидки = Движение.СуммаДоПримененияСкидки - СуммаДоПримененияСкидокКРаспределению - РаспределеннаяСуммаДоПримененияСкидок;
			КонецЕсли;
			
			Если Не -СуммаСкидкиКРаспределению = РаспределеннаяСуммаСкидки И Не РаспределеннаяСуммаСкидки = 0 Тогда
				Движение.СуммаСкидки = Движение.СуммаСкидки - СуммаСкидкиКРаспределению - РаспределеннаяСуммаСкидки;
			КонецЕсли;
			 
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаПродажПартий = ПродажиПартий.Выгрузить();
	ТаблицаПродажПартий.Свернуть("Номенклатура,swПартия", "Количество,Себестоимость,СебестоимостьБезНДС,Сумма,СуммаБезНДС");
	Для Каждого ДвижениеПартий Из ТаблицаПродажПартий Цикл
		Движение = ДвиженияПоВидамОпераций.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Ссылка.Дата;
		Движение.Организация = Ссылка.Организация;
		Движение.Номенклатура = ДвижениеПартий.Номенклатура;
		Движение.swПартия = ДвижениеПартий.swПартия;
		Движение.ОстатокКоличество = - ДвижениеПартий.Количество;
		Движение.ОстатокСтоимость = - ДвижениеПартий.Себестоимость;
		Движение.ОстатокСтоимостьБезНДС = - ДвижениеПартий.СебестоимостьБезНДС;
		Движение.ПродажаКоличество = Движение.ОстатокКоличество;
		Движение.ПродажаСтоимость = Движение.ОстатокСтоимость;
		Движение.ПродажаСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
		Движение.ПродажаСумма = - ДвижениеПартий.Сумма;
		Движение.ПродажаСуммаБезНДС = - ДвижениеПартий.СуммаБезНДС;
	КонецЦикла;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	ПродажиПартий.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияВозвратаПоставщику(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.Склад КАК Склад,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	Данные.Партия.Наименование КАК НаименованиеПартии,
		        |	Данные.Партия.НомерСтроки КАК НомерСтроки,
		        |	Данные.Партия.Поставщик КАК Поставщик,
		        |	Данные.Партия.ЗакупочнаяЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Партия.ВалютаЗакупочнойЦены КАК ВалютаЗакупочнойЦены,
		        |	Данные.Партия КАК Партия,
		        |	Данные.Количество,
		        |	Данные.Стоимость,
		        |	Данные.СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПартииТоваровНаСкладах.Склад КАК Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия КАК Партия,
		        |		СУММА(ПартииТоваровНаСкладах.КоличествоОстаток) КАК Количество,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК Стоимость,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций.Остатки(
		        |				&Граница,
		        |				Организация = &Организация
		        |					И Склад = &Склад
		        |					И Номенклатура В (&СписокНоменклатуры)) КАК ПартииТоваровНаСкладах
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПартииТоваровНаСкладах.Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия) КАК Данные
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Склад,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("Склад", Ссылка.Склад);
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", Ссылка.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		Для Каждого СтрокаТМЦ Из Ссылка.Товары Цикл
			
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
			СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
				
				Если СтрокаПоПартиям.Количество > КоличествоПоДокументу Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = Ссылка.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = КоличествоПоДокументу;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					
					СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - Движение.Количество;
					СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - Движение.Стоимость;
					СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - Движение.СтоимостьБезНДС;
					
					КоличествоПоДокументу = 0;
					
				ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = Ссылка.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = СтрокаПоПартиям.Количество;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
					
					КоличествоПоДокументу = КоличествоПоДокументу - Движение.Количество;
					
					СтрокаПоПартиям.Количество = 0;
					СтрокаПоПартиям.Стоимость = 0;
					СтрокаПоПартиям.СтоимостьБезНДС = 0;
					
				КонецЕсли;
				
				Если КоличествоПоДокументу = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПоДокументу > 0 Тогда
				Движение = ДвиженияПартий.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = Ссылка.Склад;
				Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
				Движение.swПартия = Справочники.swПартииТоваровОрганизаций.ПустаяСсылка();
				Движение.Количество = КоличествоПоДокументу;
				Движение.Стоимость = 0;
				Движение.СтоимостьБезНДС = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДвижениеПартий Из ДвиженияПартий Цикл
		Движение = ДвиженияПоВидамОпераций.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Ссылка.Дата;
		Движение.Организация = Ссылка.Организация;
		Движение.Номенклатура = ДвижениеПартий.Номенклатура;
		Движение.swПартия = ДвижениеПартий.swПартия;
		Движение.ОстатокКоличество = ДвижениеПартий.Количество;
		Движение.ОстатокСтоимость = ДвижениеПартий.Стоимость;
		Движение.ОстатокСтоимостьБезНДС = ДвижениеПартий.СтоимостьБезНДС;
		Движение.ПоступлениеКоличество = Движение.ОстатокКоличество;
		Движение.ПоступлениеСтоимость = Движение.ОстатокСтоимость;
		Движение.ПоступлениеСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
	КонецЦикла;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияОприходованияИзлишковТоваров(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Товары.НомерСтроки КАК НомерСтроки,
		        |	Товары.Номенклатура КАК Номенклатура,
		        |	Товары.Ссылка.Склад КАК Склад,
		        |	Товары.Количество КАК Количество,
		        |	Товары.Цена КАК Цена,
		        |	&ВалютаУУ КАК ВалютаЦены,
		        |	Товары.Сумма КАК Сумма
		        |ИЗ
		        |	Документ.ОприходованиеИзлишковТоваров.Товары КАК Товары
		        |ГДЕ
		        |	Товары.Ссылка = &Документ
		        |	И Товары.Ссылка.Проведен";
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("Документ", Ссылка);
		Запрос.УстановитьПараметр("ВалютаУУ", ДанныеВалютыУУ.Валюта);
		ТаблицаТМЦ = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = ТаблицаТМЦ.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			Индекс = КоличествоСтрок - Сч;
			СтрокаТМЦ = ТаблицаТМЦ[Индекс];
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				ТаблицаТМЦ.Удалить(СтрокаТМЦ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			ПартияТовара = ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ);
			
			Движение = ДвиженияПартий.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Склад = СтрокаТМЦ.Склад;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.Количество = СтрокаТМЦ.Количество;
			Движение.Стоимость = СтрокаТМЦ.Сумма;
			Движение.СтоимостьБезНДС = СтрокаТМЦ.Сумма;
			
			Движение = ДвиженияПоВидамОпераций.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.ОстатокКоличество = СтрокаТМЦ.Количество;
			Движение.ОстатокСтоимость = СтрокаТМЦ.Сумма;
			Движение.ОстатокСтоимостьБезНДС = СтрокаТМЦ.Сумма;
			Движение.ОприходованиеКоличество = Движение.ОстатокКоличество;
			Движение.ОприходованиеСтоимость = Движение.ОстатокСтоимость;
			Движение.ОприходованиеСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияПеремещения(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.Склад КАК Склад,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	Данные.Партия.Наименование КАК НаименованиеПартии,
		        |	Данные.Партия.НомерСтроки КАК НомерСтроки,
		        |	Данные.Партия.Поставщик КАК Поставщик,
		        |	Данные.Партия.ЗакупочнаяЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Партия.ВалютаЗакупочнойЦены КАК ВалютаЗакупочнойЦены,
		        |	Данные.Партия КАК Партия,
		        |	Данные.Количество,
		        |	Данные.Стоимость,
		        |	Данные.СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПартииТоваровНаСкладах.Склад КАК Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия КАК Партия,
		        |		СУММА(ПартииТоваровНаСкладах.КоличествоОстаток) КАК Количество,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК Стоимость,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций.Остатки(
		        |				&Граница,
		        |				Организация = &Организация
		        |					И Склад = &Склад
		        |					И Номенклатура В (&СписокНоменклатуры)) КАК ПартииТоваровНаСкладах
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПартииТоваровНаСкладах.Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия) КАК Данные
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Склад,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("Склад", Ссылка.СкладОтправитель);
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", Ссылка.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		Для Каждого СтрокаТМЦ Из Ссылка.Товары Цикл
			
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
			СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
				
				Если СтрокаПоПартиям.Количество > КоличествоПоДокументу Тогда
					
					ДвижениеРасход = ДвиженияПартий.Добавить();
					ДвижениеРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					ДвижениеРасход.Период = Ссылка.Дата;
					ДвижениеРасход.Организация = Ссылка.Организация;
					ДвижениеРасход.Склад = Ссылка.СкладОтправитель;
					ДвижениеРасход.Номенклатура = СтрокаТМЦ.Номенклатура;
					ДвижениеРасход.swПартия = СтрокаПоПартиям.Партия;
					ДвижениеРасход.Количество = КоличествоПоДокументу;
					ДвижениеРасход.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					ДвижениеРасход.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					
					СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - ДвижениеРасход.Количество;
					СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - ДвижениеРасход.Стоимость;
					СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - ДвижениеРасход.СтоимостьБезНДС;
					
					КоличествоПоДокументу = 0;
					
					ДвижениеПриход = ДвиженияПартий.Добавить();
					ДвижениеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					ДвижениеПриход.Период = Ссылка.Дата;
					ДвижениеПриход.Организация = Ссылка.Организация;
					ДвижениеПриход.Склад = Ссылка.СкладПолучатель;
					ДвижениеПриход.Номенклатура = ДвижениеРасход.Номенклатура;
					ДвижениеПриход.swПартия = ДвижениеРасход.swПартия;
					ДвижениеПриход.Количество = ДвижениеРасход.Количество;
					ДвижениеПриход.Стоимость = ДвижениеРасход.Стоимость;
					ДвижениеПриход.СтоимостьБезНДС = ДвижениеРасход.СтоимостьБезНДС;
					
				ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
					
					ДвижениеРасход = ДвиженияПартий.Добавить();
					ДвижениеРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
					ДвижениеРасход.Период = Ссылка.Дата;
					ДвижениеРасход.Организация = Ссылка.Организация;
					ДвижениеРасход.Склад = Ссылка.СкладОтправитель;
					ДвижениеРасход.Номенклатура = СтрокаТМЦ.Номенклатура;
					ДвижениеРасход.swПартия = СтрокаПоПартиям.Партия;
					ДвижениеРасход.Количество = СтрокаПоПартиям.Количество;
					ДвижениеРасход.Стоимость = СтрокаПоПартиям.Стоимость;
					ДвижениеРасход.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
					
					КоличествоПоДокументу = КоличествоПоДокументу - ДвижениеРасход.Количество;
					
					СтрокаПоПартиям.Количество = 0;
					СтрокаПоПартиям.Стоимость = 0;
					СтрокаПоПартиям.СтоимостьБезНДС = 0;
					
					ДвижениеПриход = ДвиженияПартий.Добавить();
					ДвижениеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
					ДвижениеПриход.Период = Ссылка.Дата;
					ДвижениеПриход.Организация = Ссылка.Организация;
					ДвижениеПриход.Склад = Ссылка.СкладПолучатель;
					ДвижениеПриход.Номенклатура = ДвижениеРасход.Номенклатура;
					ДвижениеПриход.swПартия = ДвижениеРасход.swПартия;
					ДвижениеПриход.Количество = ДвижениеРасход.Количество;
					ДвижениеПриход.Стоимость = ДвижениеРасход.Стоимость;
					ДвижениеПриход.СтоимостьБезНДС = ДвижениеРасход.СтоимостьБезНДС;
					
				КонецЕсли;
				
				Если КоличествоПоДокументу = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПоДокументу > 0 Тогда
				
				ДвижениеРасход = ДвиженияПартий.Добавить();
				ДвижениеРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
				ДвижениеРасход.Период = Ссылка.Дата;
				ДвижениеРасход.Организация = Ссылка.Организация;
				ДвижениеРасход.Склад = Ссылка.СкладОтправитель;
				ДвижениеРасход.Номенклатура = СтрокаТМЦ.Номенклатура;
				ДвижениеРасход.swПартия = Справочники.swПартииТоваровОрганизаций.ПустаяСсылка();
				ДвижениеРасход.Количество = КоличествоПоДокументу;
				ДвижениеРасход.Стоимость = 0;
				ДвижениеРасход.СтоимостьБезНДС = 0;
				
				ДвижениеПриход = ДвиженияПартий.Добавить();
				ДвижениеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
				ДвижениеПриход.Период = Ссылка.Дата;
				ДвижениеПриход.Организация = Ссылка.Организация;
				ДвижениеПриход.Склад = Ссылка.СкладПолучатель;
				ДвижениеПриход.Номенклатура = ДвижениеРасход.Номенклатура;
				ДвижениеПриход.swПартия = ДвижениеРасход.swПартия;
				ДвижениеПриход.Количество = ДвижениеРасход.Количество;
				ДвижениеПриход.Стоимость = ДвижениеРасход.Стоимость;
				ДвижениеПриход.СтоимостьБезНДС = ДвижениеРасход.СтоимостьБезНДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДвиженияПартий.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияПересортицы(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.Склад КАК Склад,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	Данные.Партия.Наименование КАК НаименованиеПартии,
		        |	Данные.Партия.НомерСтроки КАК НомерСтроки,
		        |	Данные.Партия.Поставщик КАК Поставщик,
		        |	Данные.Партия.ЗакупочнаяЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Партия.ВалютаЗакупочнойЦены КАК ВалютаЗакупочнойЦены,
		        |	Данные.Партия КАК Партия,
		        |	Данные.Количество,
		        |	Данные.Стоимость,
		        |	Данные.СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПартииТоваровНаСкладах.Склад КАК Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия КАК Партия,
		        |		СУММА(ПартииТоваровНаСкладах.КоличествоОстаток) КАК Количество,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК Стоимость,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций.Остатки(
		        |				&Граница,
		        |				Организация = &Организация
		        |					И Склад = &Склад
		        |					И Номенклатура В (&СписокНоменклатуры)) КАК ПартииТоваровНаСкладах
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПартииТоваровНаСкладах.Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия) КАК Данные
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Склад,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("Склад", Ссылка.Склад);
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", Ссылка.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		ТаблицаТМЦ = Ссылка.Товары.Выгрузить();
		ТаблицаТМЦ.Колонки.Добавить("ВалютаЦены");
		//ТаблицаТМЦ.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			Если СтрокаТМЦ.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоРасхода = СтрокаТМЦ.Количество;
			
			КоличествоПрихода = СтрокаТМЦ.Количество;
			СтоимостьПрихода = 0;
			СтоимостьПриходаБезНДС = 0;
			
			Если СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
				СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
					
					Если СтрокаПоПартиям.Количество > КоличествоРасхода Тогда
						
						Движение = ДвиженияПартий.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Ссылка.Дата;
						Движение.Организация = Ссылка.Организация;
						Движение.Склад = Ссылка.Склад;
						Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
						Движение.swПартия = СтрокаПоПартиям.Партия;
						Движение.Количество = КоличествоРасхода;
						Движение.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоРасхода;
						Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоРасхода;
						
						СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - Движение.Количество;
						СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - Движение.Стоимость;
						СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - Движение.СтоимостьБезНДС;
						
						КоличествоРасхода = 0;
						
						СтоимостьПрихода = СтоимостьПрихода + Движение.Стоимость;
						СтоимостьПриходаБезНДС = СтоимостьПриходаБезНДС + Движение.СтоимостьБезНДС;
						
					ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
						
						Движение = ДвиженияПартий.Добавить();
						Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
						Движение.Период = Ссылка.Дата;
						Движение.Организация = Ссылка.Организация;
						Движение.Склад = Ссылка.Склад;
						Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
						Движение.swПартия = СтрокаПоПартиям.Партия;
						Движение.Количество = СтрокаПоПартиям.Количество;
						Движение.Стоимость = СтрокаПоПартиям.Стоимость;
						Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
						
						КоличествоРасхода = КоличествоРасхода - Движение.Количество;
						
						СтрокаПоПартиям.Количество = 0;
						СтрокаПоПартиям.Стоимость = 0;
						СтрокаПоПартиям.СтоимостьБезНДС = 0;
						
						СтоимостьПрихода = СтоимостьПрихода + Движение.Стоимость;
						СтоимостьПриходаБезНДС = СтоимостьПриходаБезНДС + Движение.СтоимостьБезНДС;
						
					КонецЕсли;
					
					Если КоличествоРасхода = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если КоличествоРасхода > 0 Тогда
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = Ссылка.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = Справочники.swПартииТоваровОрганизаций.ПустаяСсылка();
					Движение.Количество = КоличествоРасхода;
					Движение.Стоимость = 0;
					Движение.СтоимостьБезНДС = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТМЦ.НоменклатураОприходование.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				
				СтрокаТМЦ.ВалютаЦены = ДанныеВалютыУУ.Валюта;
				СтрокаТМЦ.Цена = ?(КоличествоПрихода = 0, 0, СтоимостьПрихода / КоличествоПрихода);
				
				ПартияТовара = ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ);
				
				Движение = ДвиженияПартий.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = Ссылка.Склад;
				Движение.Номенклатура = СтрокаТМЦ.НоменклатураОприходование;
				Движение.swПартия = ПартияТовара;
				Движение.Количество = КоличествоПрихода;
				Движение.Стоимость = СтоимостьПрихода;
				Движение.СтоимостьБезНДС = СтоимостьПриходаБезНДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДвижениеПартий Из ДвиженияПартий Цикл
		Движение = ДвиженияПоВидамОпераций.Добавить();
		Движение.ВидДвижения = ДвижениеПартий.ВидДвижения;
		Движение.Период = Ссылка.Дата;
		Движение.Организация = Ссылка.Организация;
		Движение.Номенклатура = ДвижениеПартий.Номенклатура;
		Движение.swПартия = ДвижениеПартий.swПартия;
		Движение.ОстатокКоличество = ДвижениеПартий.Количество;
		Движение.ОстатокСтоимость = ДвижениеПартий.Стоимость;
		Движение.ОстатокСтоимостьБезНДС = ДвижениеПартий.СтоимостьБезНДС;
		Если ДвижениеПартий.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			Движение.ПрочийРасходКоличество = Движение.ОстатокКоличество;
			Движение.ПрочийРасходСтоимость = Движение.ОстатокСтоимость;
			Движение.ПрочийРасходСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
		Иначе
			Движение.ПрочийПриходКоличество = Движение.ОстатокКоличество;
			Движение.ПрочийПриходСтоимость = Движение.ОстатокСтоимость;
			Движение.ПрочийПриходСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
		КонецЕсли;
	КонецЦикла;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияПоступленияТоваровУслуг(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	ВидПриходнойЦены = Константы.swВидПриходнойЦены.Получить();
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияЦен = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ДвиженияЦен.Отбор.Регистратор.Значение = Ссылка;
	
	ТаблицаПриходныхЦен = Новый ТаблицаЗначений;
	ТаблицаПриходныхЦен.Колонки.Добавить("Номенклатура");
	ТаблицаПриходныхЦен.Колонки.Добавить("Цена");
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.НомерСтроки КАК НомерСтроки,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Склад КАК Склад,
		        |	Данные.Количество КАК Количество,
		        |	Данные.ЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Цена КАК ЗакупочнаяЦена,
		        |	ВЫРАЗИТЬ(ВЫБОР
		        |			КОГДА Данные.Количество = 0
		        |				ТОГДА 0
		        |			ИНАЧЕ (Данные.СуммаБезНДС + Данные.НДС) / Данные.Количество
		        |		КОНЕЦ КАК ЧИСЛО(18, 2)) КАК ПриходнаяЦена,
		        |	Данные.ЧистаяСуммаБезНДСВВалюте КАК ЧистаяСуммаБезНДСВВалюте,
		        |	Данные.ЧистыйНДСВВалюте КАК ЧистыйНДСВВалюте,
		        |	Данные.ЧистаяСуммаБезНДС КАК ЧистаяСуммаБезНДС,
		        |	Данные.ЧистыйНДС КАК ЧистыйНДС,
		        |	Данные.СуммаБезНДС КАК СуммаБезНДС,
		        |	Данные.НДС КАК НДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		Данные.НомерСтроки КАК НомерСтроки,
		        |		Данные.Номенклатура КАК Номенклатура,
		        |		Данные.Склад КАК Склад,
		        |		СУММА(Данные.Количество) КАК Количество,
		        |		СУММА(Данные.ЦенаВВалюте) КАК ЦенаВВалюте,
		        |		СУММА(Данные.Цена) КАК Цена,
		        |		СУММА(Данные.ЧистаяСуммаБезНДСВВалюте) КАК ЧистаяСуммаБезНДСВВалюте,
		        |		СУММА(Данные.ЧистыйНДСВВалюте) КАК ЧистыйНДСВВалюте,
		        |		СУММА(Данные.ЧистаяСуммаБезНДС) КАК ЧистаяСуммаБезНДС,
		        |		СУММА(Данные.ЧистыйНДС) КАК ЧистыйНДС,
		        |		СУММА(Данные.СуммаБезНДС) КАК СуммаБезНДС,
		        |		СУММА(Данные.НДС) КАК НДС
		        |	ИЗ
		        |		(ВЫБРАТЬ
		        |			Товары.НомерСтроки КАК НомерСтроки,
		        |			Товары.Номенклатура КАК Номенклатура,
		        |			Товары.Склад КАК Склад,
		        |			Товары.Количество КАК Количество,
		        |			Товары.ЦенаВВалюте КАК ЦенаВВалюте,
		        |			Товары.Цена КАК Цена,
		        |			Товары.ЧистаяСуммаБезНДСВВалюте КАК ЧистаяСуммаБезНДСВВалюте,
		        |			Товары.ЧистыйНДСВВалюте КАК ЧистыйНДСВВалюте,
		        |			Товары.ЧистаяСуммаБезНДС КАК ЧистаяСуммаБезНДС,
		        |			Товары.ЧистыйНДС КАК ЧистыйНДС,
		        |			Товары.ЧистаяСуммаБезНДС КАК СуммаБезНДС,
		        |			Товары.ЧистыйНДС КАК НДС
		        |		ИЗ
		        |			(ВЫБРАТЬ
		        |				Товары.НомерСтроки КАК НомерСтроки,
		        |				Товары.Номенклатура КАК Номенклатура,
		        |				Товары.Склад КАК Склад,
		        |				Товары.Количество КАК Количество,
		        |				Товары.ЦенаВВалюте КАК ЦенаВВалюте,
		        |				ВЫРАЗИТЬ(ВЫБОР
		        |						КОГДА Товары.КратностьДокумента = 0
		        |								ИЛИ Товары.КурсВалютыУУ = 0
		        |							ТОГДА 0
		        |						ИНАЧЕ Товары.ЦенаВВалюте * Товары.КурсДокумента / Товары.КратностьДокумента * Товары.КратностьВалютыУУ / Товары.КурсВалютыУУ
		        |					КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		        |				Товары.ЧистаяСуммаБезНДСВВалюте КАК ЧистаяСуммаБезНДСВВалюте,
		        |				Товары.ЧистыйНДСВВалюте КАК ЧистыйНДСВВалюте,
		        |				ВЫРАЗИТЬ(ВЫБОР
		        |						КОГДА Товары.КратностьДокумента = 0
		        |								ИЛИ Товары.КурсВалютыУУ = 0
		        |							ТОГДА 0
		        |						ИНАЧЕ Товары.ЧистаяСуммаБезНДСВВалюте * Товары.КурсДокумента / Товары.КратностьДокумента * Товары.КратностьВалютыУУ / Товары.КурсВалютыУУ
		        |					КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЧистаяСуммаБезНДС,
		        |				ВЫРАЗИТЬ(ВЫБОР
		        |						КОГДА Товары.КратностьДокумента = 0
		        |								ИЛИ Товары.КурсВалютыУУ = 0
		        |							ТОГДА 0
		        |						ИНАЧЕ Товары.ЧистыйНДСВВалюте * Товары.КурсДокумента / Товары.КратностьДокумента * Товары.КратностьВалютыУУ / Товары.КурсВалютыУУ
		        |					КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЧистыйНДС
		        |			ИЗ
		        |				(ВЫБРАТЬ
		        |					Товары.НомерСтроки КАК НомерСтроки,
		        |					Товары.Номенклатура КАК Номенклатура,
		        |					Товары.Склад КАК Склад,
		        |					Товары.Количество КАК Количество,
		        |					ВЫРАЗИТЬ(ВЫБОР
		        |							КОГДА Товары.Количество = 0
		        |								ТОГДА 0
		        |							ИНАЧЕ Товары.СуммаСНДС / Товары.Количество
		        |						КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаВВалюте,
		        |					Товары.СуммаСНДС - Товары.СуммаНДС КАК ЧистаяСуммаБезНДСВВалюте,
		        |					Товары.СуммаНДС КАК ЧистыйНДСВВалюте,
		        |					ЕСТЬNULL(КурсыДокументов.Курс, 0) КАК КурсДокумента,
		        |					ЕСТЬNULL(КурсыДокументов.Кратность, 0) КАК КратностьДокумента,
		        |					ЕСТЬNULL(КурсыВалютыУУ.Курс, 0) КАК КурсВалютыУУ,
		        |					ЕСТЬNULL(КурсыВалютыУУ.Кратность, 0) КАК КратностьВалютыУУ
		        |				ИЗ
		        |					Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |							ДатыКурсовДокументов.Документ КАК Документ,
		        |							КурсыВалют.Курс КАК Курс,
		        |							КурсыВалют.Кратность КАК Кратность
		        |						ИЗ
		        |							РегистрСведений.КурсыВалют КАК КурсыВалют
		        |								ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									Документы.Документ КАК Документ,
		        |									Документы.Валюта КАК Валюта,
		        |									МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |								ИЗ
		        |									(ВЫБРАТЬ
		        |										Документы.Дата КАК Дата,
		        |										Документы.Ссылка КАК Документ,
		        |										Документы.Валюта КАК Валюта
		        |									ИЗ
		        |										Документ.ПриобретениеТоваровУслуг КАК Документы
		        |									ГДЕ
		        |										Документы.Ссылка = &ПриходнаяНакладная
		        |										И Документы.Проведен) КАК Документы
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ПО Документы.Валюта = КурсыВалют.Валюта
		        |											И Документы.Дата >= КурсыВалют.Период
		        |								
		        |								СГРУППИРОВАТЬ ПО
		        |									Документы.Документ,
		        |									Документы.Валюта) КАК ДатыКурсовДокументов
		        |								ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |									И КурсыВалют.Валюта = ДатыКурсовДокументов.Валюта) КАК КурсыДокументов
		        |						ПО Товары.Ссылка = КурсыДокументов.Документ
		        |						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |							ДатыКурсовДокументов.Документ КАК Документ,
		        |							КурсыВалют.Курс КАК Курс,
		        |							КурсыВалют.Кратность КАК Кратность
		        |						ИЗ
		        |							РегистрСведений.КурсыВалют КАК КурсыВалют
		        |								ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									Документы.Документ КАК Документ,
		        |									МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |								ИЗ
		        |									(ВЫБРАТЬ
		        |										Документы.Дата КАК Дата,
		        |										Документы.Ссылка КАК Документ
		        |									ИЗ
		        |										Документ.ПриобретениеТоваровУслуг КАК Документы
		        |									ГДЕ
		        |										Документы.Ссылка = &ПриходнаяНакладная
		        |										И Документы.Проведен) КАК Документы
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ПО Документы.Дата >= КурсыВалют.Период
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаУправленческогоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)
		        |								
		        |								СГРУППИРОВАТЬ ПО
		        |									Документы.Документ) КАК ДатыКурсовДокументов
		        |								ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |						ГДЕ
		        |							КурсыВалют.Валюта В
		        |									(ВЫБРАТЬ
		        |										ВалютаУправленческогоУчета.Значение
		        |									ИЗ
		        |										Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)) КАК КурсыВалютыУУ
		        |						ПО Товары.Ссылка = КурсыВалютыУУ.Документ
		        |				ГДЕ
		        |					Товары.Ссылка = &ПриходнаяНакладная
		        |					И Товары.Ссылка.Проведен) КАК Товары) КАК Товары
		        |		
		        |		ОБЪЕДИНИТЬ ВСЕ
		        |		
		        |		ВЫБРАТЬ
		        |			ТоварыВПоступлении.НомерСтроки,
		        |			ТоварыВПоступлении.Номенклатура,
		        |			ТоварыВПоступлении.Склад,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			ВЫРАЗИТЬ(ВЫБОР
		        |					КОГДА ТоварыВПоступлении.СуммаПоДокументу = 0
		        |						ТОГДА 0
		        |					ИНАЧЕ ДополнительныеРасходы.СуммаБезНДС / ТоварыВПоступлении.СуммаПоДокументу * ТоварыВПоступлении.СуммаПоСтроке
		        |				КОНЕЦ КАК ЧИСЛО(15, 2)),
		        |			ВЫРАЗИТЬ(ВЫБОР
		        |					КОГДА ТоварыВПоступлении.СуммаПоДокументу = 0
		        |						ТОГДА 0
		        |					ИНАЧЕ ДополнительныеРасходы.НДС / ТоварыВПоступлении.СуммаПоДокументу * ТоварыВПоступлении.СуммаПоСтроке
		        |				КОНЕЦ КАК ЧИСЛО(15, 2))
		        |		ИЗ
		        |			(ВЫБРАТЬ
		        |				Товары.НомерСтроки КАК НомерСтроки,
		        |				Товары.Номенклатура КАК Номенклатура,
		        |				Товары.Склад КАК Склад,
		        |				Товары.СуммаСНДС КАК СуммаПоСтроке,
		        |				ПоДокументу.СуммаПоДокументу КАК СуммаПоДокументу
		        |			ИЗ
		        |				Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |						СУММА(Товары.СуммаСНДС) КАК СуммаПоДокументу
		        |					ИЗ
		        |						Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ГДЕ
		        |						Товары.Ссылка = &ПриходнаяНакладная
		        |						И Товары.Ссылка.Проведен) КАК ПоДокументу
		        |					ПО (ИСТИНА)
		        |			ГДЕ
		        |				Товары.Ссылка = &ПриходнаяНакладная
		        |				И Товары.Ссылка.Проведен) КАК ТоварыВПоступлении
		        |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |					СУММА(ДополнительныеРасходы.СуммаБезНДС) КАК СуммаБезНДС,
		        |					СУММА(ДополнительныеРасходы.НДС) КАК НДС
		        |				ИЗ
		        |					(ВЫБРАТЬ
		        |						ВЫРАЗИТЬ(ВЫБОР
		        |								КОГДА ДополнительныеРасходы.КратностьДокумента = 0
		        |										ИЛИ ДополнительныеРасходы.КурсВалютыУУ = 0
		        |									ТОГДА 0
		        |								ИНАЧЕ ДополнительныеРасходы.СуммаБезНДС * ДополнительныеРасходы.КурсДокумента / ДополнительныеРасходы.КратностьДокумента * ДополнительныеРасходы.КратностьВалютыУУ / ДополнительныеРасходы.КурсВалютыУУ
		        |							КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
		        |						ВЫРАЗИТЬ(ВЫБОР
		        |								КОГДА ДополнительныеРасходы.КратностьДокумента = 0
		        |										ИЛИ ДополнительныеРасходы.КурсВалютыУУ = 0
		        |									ТОГДА 0
		        |								ИНАЧЕ ДополнительныеРасходы.НДС * ДополнительныеРасходы.КурсДокумента / ДополнительныеРасходы.КратностьДокумента * ДополнительныеРасходы.КратностьВалютыУУ / ДополнительныеРасходы.КурсВалютыУУ
		        |							КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НДС
		        |					ИЗ
		        |						(ВЫБРАТЬ
		        |							Расходы.СуммаСНДС - Расходы.СуммаНДС КАК СуммаБезНДС,
		        |							Расходы.СуммаНДС КАК НДС,
		        |							ЕСТЬNULL(КурсыДокументов.Курс, 0) КАК КурсДокумента,
		        |							ЕСТЬNULL(КурсыДокументов.Кратность, 0) КАК КратностьДокумента,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Курс, 0) КАК КурсВалютыУУ,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Кратность, 0) КАК КратностьВалютыУУ
		        |						ИЗ
		        |							Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Расходы
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											Документы.Валюта КАК Валюта,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ,
		        |												Документы.Ссылка.Валюта КАК Валюта
		        |											ИЗ
		        |												Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Документы
		        |											ГДЕ
		        |												Документы.АналитикаРасходов = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Валюта = КурсыВалют.Валюта
		        |													И Документы.Дата >= КурсыВалют.Период
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ,
		        |											Документы.Валюта) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |											И КурсыВалют.Валюта = ДатыКурсовДокументов.Валюта) КАК КурсыДокументов
		        |								ПО Расходы.Ссылка = КурсыДокументов.Документ
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ
		        |											ИЗ
		        |												Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Документы
		        |											ГДЕ
		        |												Документы.АналитикаРасходов = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Дата >= КурсыВалют.Период
		        |										ГДЕ
		        |											КурсыВалют.Валюта В
		        |													(ВЫБРАТЬ
		        |														ВалютаУправленческогоУчета.Значение
		        |													ИЗ
		        |														Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаУправленческогоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)) КАК КурсыВалютыУУ
		        |								ПО Расходы.Ссылка = КурсыВалютыУУ.Документ
		        |						ГДЕ
		        |							Расходы.АналитикаРасходов = &ПриходнаяНакладная
		        |							И Расходы.Ссылка.Проведен) КАК ДополнительныеРасходы) КАК ДополнительныеРасходы) КАК ДополнительныеРасходы
		        |				ПО (ИСТИНА)
		        |		
		        |		ОБЪЕДИНИТЬ ВСЕ
		        |		
		        |		ВЫБРАТЬ
		        |			ТоварыВПоступлении.НомерСтроки,
		        |			ТоварыВПоступлении.Номенклатура,
		        |			ТоварыВПоступлении.Склад,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			ВЫРАЗИТЬ(ВЫБОР
		        |					КОГДА ТоварыВПоступлении.СуммаПоНоменклатуре = 0
		        |						ТОГДА 0
		        |					ИНАЧЕ ТД.СуммаБезНДС / ТоварыВПоступлении.СуммаПоНоменклатуре * ТоварыВПоступлении.СуммаПоСтроке
		        |				КОНЕЦ КАК ЧИСЛО(15, 2)),
		        |			ВЫРАЗИТЬ(ВЫБОР
		        |					КОГДА ТоварыВПоступлении.СуммаПоНоменклатуре = 0
		        |						ТОГДА 0
		        |					ИНАЧЕ ТД.НДС / ТоварыВПоступлении.СуммаПоНоменклатуре * ТоварыВПоступлении.СуммаПоСтроке
		        |				КОНЕЦ КАК ЧИСЛО(15, 2))
		        |		ИЗ
		        |			(ВЫБРАТЬ
		        |				Товары.НомерСтроки КАК НомерСтроки,
		        |				Товары.Номенклатура КАК Номенклатура,
		        |				Товары.Склад КАК Склад,
		        |				Товары.СуммаСНДС КАК СуммаПоСтроке,
		        |				ПоНоменклатуре.СуммаПоНоменклатуре КАК СуммаПоНоменклатуре
		        |			ИЗ
		        |				Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |						Товары.Номенклатура КАК Номенклатура,
		        |						СУММА(Товары.СуммаСНДС) КАК СуммаПоНоменклатуре
		        |					ИЗ
		        |						Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ГДЕ
		        |						Товары.Ссылка = &ПриходнаяНакладная
		        |						И Товары.Ссылка.Проведен
		        |					
		        |					СГРУППИРОВАТЬ ПО
		        |						Товары.Номенклатура) КАК ПоНоменклатуре
		        |					ПО Товары.Номенклатура = ПоНоменклатуре.Номенклатура
		        |			ГДЕ
		        |				Товары.Ссылка = &ПриходнаяНакладная
		        |				И Товары.Ссылка.Проведен) КАК ТоварыВПоступлении
		        |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |					ТД.Номенклатура КАК Номенклатура,
		        |					СУММА(ТД.СуммаБезНДС) КАК СуммаБезНДС,
		        |					СУММА(ТД.НДС) КАК НДС
		        |				ИЗ
		        |					(ВЫБРАТЬ
		        |						ТД.Номенклатура КАК Номенклатура,
		        |						ВЫРАЗИТЬ(ВЫБОР
		        |								КОГДА ТД.КратностьВалютыБУ = 0
		        |										ИЛИ ТД.КурсВалютыУУ = 0
		        |									ТОГДА 0
		        |								ИНАЧЕ ТД.СуммаБезНДС * ТД.КурсВалютыБУ / ТД.КратностьВалютыБУ * ТД.КратностьВалютыУУ / ТД.КурсВалютыУУ
		        |							КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
		        |						ВЫРАЗИТЬ(ВЫБОР
		        |								КОГДА ТД.КратностьВалютыБУ = 0
		        |										ИЛИ ТД.КурсВалютыУУ = 0
		        |									ТОГДА 0
		        |								ИНАЧЕ ТД.НДС * ТД.КурсВалютыБУ / ТД.КратностьВалютыБУ * ТД.КратностьВалютыУУ / ТД.КурсВалютыУУ
		        |							КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НДС
		        |					ИЗ
		        |						(ВЫБРАТЬ
		        |							ТД.Номенклатура КАК Номенклатура,
		        |							ТД.СуммаПошлины + ТД.ТаможенныйСбор КАК СуммаБезНДС,
		        |							ТД.СуммаНДС КАК НДС,
		        |							ЕСТЬNULL(КурсыВалютыБУ.Курс, 0) КАК КурсВалютыБУ,
		        |							ЕСТЬNULL(КурсыВалютыБУ.Кратность, 0) КАК КратностьВалютыБУ,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Курс, 0) КАК КурсВалютыУУ,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Кратность, 0) КАК КратностьВалютыУУ
		        |						ИЗ
		        |							Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТД
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ
		        |											ИЗ
		        |												Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Документы
		        |											ГДЕ
		        |												Документы.ДокументПоступления = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Дата >= КурсыВалют.Период
		        |										ГДЕ
		        |											КурсыВалют.Валюта В
		        |													(ВЫБРАТЬ
		        |														ВалютаРегламентированногоУчета.Значение
		        |													ИЗ
		        |														Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета)
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаРегламентированногоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета)) КАК КурсыВалютыБУ
		        |								ПО ТД.Ссылка = КурсыВалютыБУ.Документ
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ
		        |											ИЗ
		        |												Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Документы
		        |											ГДЕ
		        |												Документы.ДокументПоступления = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Дата >= КурсыВалют.Период
		        |										ГДЕ
		        |											КурсыВалют.Валюта В
		        |													(ВЫБРАТЬ
		        |														ВалютаУправленческогоУчета.Значение
		        |													ИЗ
		        |														Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаУправленческогоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)) КАК КурсыВалютыУУ
		        |								ПО ТД.Ссылка = КурсыВалютыУУ.Документ
		        |						ГДЕ
		        |							ТД.ДокументПоступления = &ПриходнаяНакладная
		        |							И ТД.Ссылка.Проведен) КАК ТД) КАК ТД
		        |				
		        |				СГРУППИРОВАТЬ ПО
		        |					ТД.Номенклатура) КАК ТД
		        |				ПО ТоварыВПоступлении.Номенклатура = ТД.Номенклатура
		        |		
		        |		ОБЪЕДИНИТЬ ВСЕ
		        |		
		        |		ВЫБРАТЬ
		        |			ТоварыВПоступлении.НомерСтроки,
		        |			ТоварыВПоступлении.Номенклатура,
		        |			ТоварыВПоступлении.Склад,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			0,
		        |			ВЫРАЗИТЬ(ВЫБОР
		        |					КОГДА ТоварыВПоступлении.СуммаПоНоменклатуре = 0
		        |						ТОГДА 0
		        |					ИНАЧЕ ЗоВТ.НДС / ТоварыВПоступлении.СуммаПоНоменклатуре * ТоварыВПоступлении.СуммаПоСтроке
		        |				КОНЕЦ КАК ЧИСЛО(15, 2))
		        |		ИЗ
		        |			(ВЫБРАТЬ
		        |				Товары.НомерСтроки КАК НомерСтроки,
		        |				Товары.Номенклатура КАК Номенклатура,
		        |				Товары.Склад КАК Склад,
		        |				Товары.СуммаСНДС КАК СуммаПоСтроке,
		        |				ПоНоменклатуре.СуммаПоНоменклатуре КАК СуммаПоНоменклатуре
		        |			ИЗ
		        |				Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |						Товары.Номенклатура КАК Номенклатура,
		        |						СУММА(Товары.СуммаСНДС) КАК СуммаПоНоменклатуре
		        |					ИЗ
		        |						Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
		        |					ГДЕ
		        |						Товары.Ссылка = &ПриходнаяНакладная
		        |						И Товары.Ссылка.Проведен
		        |					
		        |					СГРУППИРОВАТЬ ПО
		        |						Товары.Номенклатура) КАК ПоНоменклатуре
		        |					ПО Товары.Номенклатура = ПоНоменклатуре.Номенклатура
		        |			ГДЕ
		        |				Товары.Ссылка = &ПриходнаяНакладная
		        |				И Товары.Ссылка.Проведен) КАК ТоварыВПоступлении
		        |				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |					ЗоВТ.Номенклатура КАК Номенклатура,
		        |					СУММА(ЗоВТ.НДС) КАК НДС
		        |				ИЗ
		        |					(ВЫБРАТЬ
		        |						ЗоВТ.Номенклатура КАК Номенклатура,
		        |						ВЫРАЗИТЬ(ВЫБОР
		        |								КОГДА ЗоВТ.КратностьВалютыБУ = 0
		        |										ИЛИ ЗоВТ.КурсВалютыУУ = 0
		        |									ТОГДА 0
		        |								ИНАЧЕ ЗоВТ.НДС * ЗоВТ.КурсВалютыБУ / ЗоВТ.КратностьВалютыБУ * ЗоВТ.КратностьВалютыУУ / ЗоВТ.КурсВалютыУУ
		        |							КОНЕЦ КАК ЧИСЛО(15, 2)) КАК НДС
		        |					ИЗ
		        |						(ВЫБРАТЬ
		        |							ЗоВТ.Номенклатура КАК Номенклатура,
		        |							ЗоВТ.СуммаНДС КАК НДС,
		        |							ЕСТЬNULL(КурсыВалютыБУ.Курс, 0) КАК КурсВалютыБУ,
		        |							ЕСТЬNULL(КурсыВалютыБУ.Кратность, 0) КАК КратностьВалютыБУ,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Курс, 0) КАК КурсВалютыУУ,
		        |							ЕСТЬNULL(КурсыВалютыУУ.Кратность, 0) КАК КратностьВалютыУУ
		        |						ИЗ
		        |							Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗоВТ
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ
		        |											ИЗ
		        |												Документ.ЗаявлениеОВвозеТоваров.Товары КАК Документы
		        |											ГДЕ
		        |												Документы.ДокументПоступления = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Дата >= КурсыВалют.Период
		        |										ГДЕ
		        |											КурсыВалют.Валюта В
		        |													(ВЫБРАТЬ
		        |														ВалютаРегламентированногоУчета.Значение
		        |													ИЗ
		        |														Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета)
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаРегламентированногоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета)) КАК КурсыВалютыБУ
		        |								ПО ЗоВТ.Ссылка = КурсыВалютыБУ.Документ
		        |								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |									ДатыКурсовДокументов.Документ КАК Документ,
		        |									КурсыВалют.Курс КАК Курс,
		        |									КурсыВалют.Кратность КАК Кратность
		        |								ИЗ
		        |									РегистрСведений.КурсыВалют КАК КурсыВалют
		        |										ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		        |											Документы.Документ КАК Документ,
		        |											МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурса
		        |										ИЗ
		        |											(ВЫБРАТЬ РАЗЛИЧНЫЕ
		        |												Документы.Ссылка.Дата КАК Дата,
		        |												Документы.Ссылка КАК Документ
		        |											ИЗ
		        |												Документ.ЗаявлениеОВвозеТоваров.Товары КАК Документы
		        |											ГДЕ
		        |												Документы.ДокументПоступления = &ПриходнаяНакладная
		        |												И Документы.Ссылка.Проведен) КАК Документы
		        |												ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		        |												ПО Документы.Дата >= КурсыВалют.Период
		        |										ГДЕ
		        |											КурсыВалют.Валюта В
		        |													(ВЫБРАТЬ
		        |														ВалютаУправленческогоУчета.Значение
		        |													ИЗ
		        |														Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)
		        |										
		        |										СГРУППИРОВАТЬ ПО
		        |											Документы.Документ) КАК ДатыКурсовДокументов
		        |										ПО КурсыВалют.Период = ДатыКурсовДокументов.ДатаКурса
		        |								ГДЕ
		        |									КурсыВалют.Валюта В
		        |											(ВЫБРАТЬ
		        |												ВалютаУправленческогоУчета.Значение
		        |											ИЗ
		        |												Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета)) КАК КурсыВалютыУУ
		        |								ПО ЗоВТ.Ссылка = КурсыВалютыУУ.Документ
		        |						ГДЕ
		        |							ЗоВТ.ДокументПоступления = &ПриходнаяНакладная
		        |							И ЗоВТ.Ссылка.Проведен) КАК ЗоВТ) КАК ЗоВТ
		        |				
		        |				СГРУППИРОВАТЬ ПО
		        |					ЗоВТ.Номенклатура) КАК ЗоВТ
		        |				ПО ТоварыВПоступлении.Номенклатура = ЗоВТ.Номенклатура) КАК Данные
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		Данные.НомерСтроки,
		        |		Данные.Номенклатура,
		        |		Данные.Склад) КАК Данные";
		Запрос.Текст = Текст;
		Запрос.УстановитьПараметр("ПриходнаяНакладная", Ссылка);
		ТаблицаТМЦ = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = ТаблицаТМЦ.Количество();
		Для Сч = 1 По КоличествоСтрок Цикл
			Индекс = КоличествоСтрок - Сч;
			СтрокаТМЦ = ТаблицаТМЦ[Индекс];
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				ТаблицаТМЦ.Удалить(СтрокаТМЦ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			ПартияТовара = ПолучитьПартиюТовара(Ссылка, СтрокаТМЦ);
			
			Движение = ДвиженияПартий.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Склад = СтрокаТМЦ.Склад;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.Количество = СтрокаТМЦ.Количество;
			Движение.Стоимость = СтрокаТМЦ.СуммаБезНДС + СтрокаТМЦ.НДС;
			Движение.СтоимостьБезНДС = СтрокаТМЦ.СуммаБезНДС;
			
			Движение = ДвиженияПоВидамОпераций.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Ссылка.Дата;
			Движение.Организация = Ссылка.Организация;
			Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
			Движение.swПартия = ПартияТовара;
			Движение.ОстатокКоличество = СтрокаТМЦ.Количество;
			Движение.ОстатокСтоимость = СтрокаТМЦ.СуммаБезНДС + СтрокаТМЦ.НДС;
			Движение.ОстатокСтоимостьБезНДС = СтрокаТМЦ.СуммаБезНДС;
			Движение.ПоступлениеКоличество = Движение.ОстатокКоличество;
			Движение.ПоступлениеСтоимость = Движение.ОстатокСтоимость;
			Движение.ПоступлениеСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
			
			СтрокаТаблицыПриходныхЦен = ТаблицаПриходныхЦен.Найти(СтрокаТМЦ.Номенклатура, "Номенклатура");
			Если СтрокаТаблицыПриходныхЦен = Неопределено Тогда
				СтрокаТаблицыПриходныхЦен = ТаблицаПриходныхЦен.Добавить();
				СтрокаТаблицыПриходныхЦен.Номенклатура = СтрокаТМЦ.Номенклатура;
				СтрокаТаблицыПриходныхЦен.Цена = СтрокаТМЦ.ПриходнаяЦена;
			Иначе
				Если СтрокаТаблицыПриходныхЦен.Цена < СтрокаТМЦ.ПриходнаяЦена Тогда
					СтрокаТаблицыПриходныхЦен.Цена = СтрокаТМЦ.ПриходнаяЦена;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВидПриходнойЦены) Тогда
			ОбработаннаяНоменклатура = Новый Массив;
			Запрос = Новый Запрос;
			Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			        |	ЦеныНоменклатуры.Номенклатура
			        |ИЗ
			        |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
			        |ГДЕ
			        |	ЦеныНоменклатуры.Период = &Период
			        |	И ЦеныНоменклатуры.Номенклатура В(&СписокНоменклатуры)
			        |	И ЦеныНоменклатуры.ВидЦены = &ВидЦены
			        |	И ЦеныНоменклатуры.Характеристика = &ПустаяХарактеристикаНоменклатуры
			        |	И НЕ ЦеныНоменклатуры.Регистратор = &ЭтотДокумент";
			Запрос.Текст = Текст;
			Запрос.УстановитьПараметр("Период", Ссылка.Дата);
			Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
			Запрос.УстановитьПараметр("СписокНоменклатуры", ТаблицаПриходныхЦен.ВыгрузитьКолонку("Номенклатура"));
			Запрос.УстановитьПараметр("ВидЦены", ВидПриходнойЦены);
			Запрос.УстановитьПараметр("ПустаяХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
			ТаблицаУжеУстановленныхЦен = Запрос.Выполнить().Выгрузить();
			Для Каждого СтрокаТаблицыУжеУстановленныхЦен Из ТаблицаУжеУстановленныхЦен Цикл
				ОбработаннаяНоменклатура.Добавить(СтрокаТаблицыУжеУстановленныхЦен.Номенклатура);
			КонецЦикла;
			Для Каждого СтрокаТаблицыПриходныхЦен Из ТаблицаПриходныхЦен Цикл
				Если Не ОбработаннаяНоменклатура.Найти(СтрокаТаблицыПриходныхЦен.Номенклатура) = Неопределено Тогда
					Продолжить;
				Иначе
					ОбработаннаяНоменклатура.Добавить(СтрокаТаблицыПриходныхЦен.Номенклатура);
				КонецЕсли;
				Движение = ДвиженияЦен.Добавить();
				Движение.Период = Ссылка.Дата;
				Движение.Номенклатура = СтрокаТаблицыПриходныхЦен.Номенклатура;
				Движение.ВидЦены = ВидПриходнойЦены;
				Движение.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				Движение.Валюта = ДанныеВалютыУУ.Валюта;
				Движение.Цена = СтрокаТаблицыПриходныхЦен.Цена;
				Движение.Упаковка = Движение.Номенклатура.ЕдиницаИзмерения;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	ДвиженияЦен.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияРеализации(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДанныеВалютыУУ = swОбщегоНазначения.ПолучитьДанныеВалютыУУ(Ссылка.Дата);
	ДанныеВалютыДокумента = swОбщегоНазначения.ПолучитьДанныеВалюты(Ссылка.Валюта, Ссылка.Дата);
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	ПродажиПартий = РегистрыНакопления.swПродажиПартийТоваровОрганизаций.СоздатьНаборЗаписей();
	ПродажиПартий.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоТоварам = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.НомерСтроки КАК НомерСтроки,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Количество КАК Количество,
		        |	ВЫРАЗИТЬ(Данные.Цена * Данные.КоличествоУпаковок КАК ЧИСЛО(15, 2)) КАК СуммаДоПримененияСкидок,
		        |	Данные.СуммаСНДС КАК Сумма,
		        |	Данные.СуммаНДС КАК СуммаНДС,
		        |	Данные.Склад КАК Склад,
		        |	ВЫБОР
		        |		КОГДА Данные.ЗаказКлиента.Номер ЕСТЬ NULL
		        |			ТОГДА Данные.Ссылка.Менеджер
		        |		ИНАЧЕ Данные.ЗаказКлиента.Менеджер
		        |	КОНЕЦ КАК Продавец
		        |ИЗ
		        |	Документ.РеализацияТоваровУслуг.Товары КАК Данные
		        |ГДЕ
		        |	Данные.Ссылка = &Ссылка
		        |	И НЕ Данные.Количество = 0
		        |	И Данные.Номенклатура.ТипНоменклатуры В(&ТребуемыеТипыНоменклатуры)";
		ЗапросПоТоварам.Текст = Текст;
		ЗапросПоТоварам.УстановитьПараметр("Ссылка", Ссылка);
		ТребуемыеТипыНоменклатуры = Новый Массив;
		ТребуемыеТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
		ЗапросПоТоварам.УстановитьПараметр("ТребуемыеТипыНоменклатуры", ТребуемыеТипыНоменклатуры);
		ТаблицаТМЦ = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.Склад КАК Склад,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	Данные.Партия.Наименование КАК НаименованиеПартии,
		        |	Данные.Партия.НомерСтроки КАК НомерСтроки,
		        |	Данные.Партия.Поставщик КАК Поставщик,
		        |	Данные.Партия.ЗакупочнаяЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Партия.ВалютаЗакупочнойЦены КАК ВалютаЗакупочнойЦены,
		        |	Данные.Партия КАК Партия,
		        |	Данные.Количество,
		        |	Данные.Стоимость,
		        |	Данные.СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПартииТоваровНаСкладах.Склад КАК Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия КАК Партия,
		        |		СУММА(ПартииТоваровНаСкладах.КоличествоОстаток) КАК Количество,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК Стоимость,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций.Остатки(
		        |				&Граница,
		        |				Организация = &Организация
		        |					И Склад В (&СписокСкладов)
		        |					И Номенклатура В (&СписокНоменклатуры)) КАК ПартииТоваровНаСкладах
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПартииТоваровНаСкладах.Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия) КАК Данные
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Склад,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("СписокСкладов", ТаблицаТМЦ.ВыгрузитьКолонку("Склад"));
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", ТаблицаТМЦ.ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		НомерСтрокиКОбработкеПоПродажам = 0;
		
		Для Каждого СтрокаТМЦ Из ТаблицаТМЦ Цикл
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Склад", СтрокаТМЦ.Склад);
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
			СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
				
				Если СтрокаПоПартиям.Количество > КоличествоПоДокументу Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = СтрокаТМЦ.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = КоличествоПоДокументу;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					
					СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - Движение.Количество;
					СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - Движение.Стоимость;
					СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - Движение.СтоимостьБезНДС;
					
					КоличествоПоДокументу = 0;
					
				ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = СтрокаТМЦ.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = СтрокаПоПартиям.Количество;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
					
					КоличествоПоДокументу = КоличествоПоДокументу - Движение.Количество;
					
					СтрокаПоПартиям.Количество = 0;
					СтрокаПоПартиям.Стоимость = 0;
					СтрокаПоПартиям.СтоимостьБезНДС = 0;
					
				КонецЕсли;
				
				Если КоличествоПоДокументу = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПоДокументу > 0 Тогда
				Движение = ДвиженияПартий.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = СтрокаТМЦ.Склад;
				Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
				Движение.swПартия = Справочники.swПартииТоваровОрганизаций.ПустаяСсылка();
				Движение.Количество = КоличествоПоДокументу;
				Движение.Стоимость = 0;
				Движение.СтоимостьБезНДС = 0;
			КонецЕсли;
			
			РаспределеннаяСумма = 0;
			РаспределеннаяСуммаБезНДС = 0;
			РаспределеннаяСуммаДоПримененияСкидок = 0;
			РаспределеннаяСуммаСкидки = 0;
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			Если ДанныеВалютыДокумента.Кратность = 0 Или ДанныеВалютыУУ.Курс = 0 Тогда
				СуммаКРаспределению = 0;
				СуммаБезНДСКРаспределению = 0;
				СуммаДоПримененияСкидокКРаспределению = 0;
				СуммаСкидкиКРаспределению = 0;
			Иначе
				СуммаКРаспределению = Окр(СтрокаТМЦ.Сумма * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаБезНДСКРаспределению = Окр((СтрокаТМЦ.Сумма - СтрокаТМЦ.СуммаНДС) * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаДоПримененияСкидокКРаспределению = Окр(СтрокаТМЦ.СуммаДоПримененияСкидок * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
				СуммаСкидкиКРаспределению = Окр((СтрокаТМЦ.СуммаДоПримененияСкидок - СтрокаТМЦ.Сумма) * ДанныеВалютыДокумента.Курс / ДанныеВалютыДокумента.Кратность * ДанныеВалютыУУ.Кратность / ДанныеВалютыУУ.Курс, 2);
			КонецЕсли;
			
			Пока НомерСтрокиКОбработкеПоПродажам < ДвиженияПартий.Количество() Цикл
				ДвижениеПартий = ДвиженияПартий[НомерСтрокиКОбработкеПоПродажам];
				Движение = ПродажиПартий.Добавить();
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = СтрокаТМЦ.Склад;
				Движение.Покупатель = Ссылка.Контрагент;
				Движение.ДоговорПокупателя = Ссылка.Договор;
				Движение.Номенклатура = ДвижениеПартий.Номенклатура;
				Движение.swПартия = ДвижениеПартий.swПартия;
				Движение.swПродавец = СтрокаТМЦ.Продавец;
				Движение.Количество = ДвижениеПартий.Количество;
				Движение.Сумма = СуммаКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.СуммаБезНДС = СуммаБезНДСКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.Себестоимость = ДвижениеПартий.Стоимость;
				Движение.СебестоимостьБезНДС = ДвижениеПартий.СтоимостьБезНДС;
				Движение.СуммаДоПримененияСкидки = СуммаДоПримененияСкидокКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				Движение.СуммаСкидки = СуммаСкидкиКРаспределению / КоличествоПоДокументу * ДвижениеПартий.Количество;
				НомерСтрокиКОбработкеПоПродажам = НомерСтрокиКОбработкеПоПродажам + 1;
				РаспределеннаяСумма = РаспределеннаяСумма + Движение.Сумма;
				РаспределеннаяСуммаБезНДС = РаспределеннаяСуммаБезНДС + Движение.СуммаБезНДС;
				РаспределеннаяСуммаДоПримененияСкидок = РаспределеннаяСуммаДоПримененияСкидок + Движение.СуммаДоПримененияСкидки;
				РаспределеннаяСуммаСкидки = РаспределеннаяСуммаСкидки + Движение.СуммаСкидки;
			КонецЦикла;
			
			Если Не СуммаКРаспределению = РаспределеннаяСумма И Не РаспределеннаяСумма = 0 Тогда
				Движение.Сумма = Движение.Сумма + СуммаКРаспределению - РаспределеннаяСумма;
			КонецЕсли;
			
			Если Не СуммаБезНДСКРаспределению = РаспределеннаяСуммаБезНДС И Не РаспределеннаяСуммаБезНДС = 0 Тогда
				Движение.СуммаБезНДС = Движение.СуммаБезНДС + СуммаБезНДСКРаспределению - РаспределеннаяСуммаБезНДС;
			КонецЕсли;
			
			Если Не СуммаДоПримененияСкидокКРаспределению = РаспределеннаяСуммаДоПримененияСкидок И Не РаспределеннаяСуммаДоПримененияСкидок = 0 Тогда
				Движение.СуммаДоПримененияСкидки = Движение.СуммаДоПримененияСкидки - СуммаДоПримененияСкидокКРаспределению + РаспределеннаяСуммаДоПримененияСкидок;
			КонецЕсли;
			
			Если Не СуммаСкидкиКРаспределению = РаспределеннаяСуммаСкидки И Не РаспределеннаяСуммаСкидки = 0 Тогда
				Движение.СуммаСкидки = Движение.СуммаСкидки - СуммаСкидкиКРаспределению + РаспределеннаяСуммаСкидки;
			КонецЕсли;
			 
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаПродажПартий = ПродажиПартий.Выгрузить();
	ТаблицаПродажПартий.Свернуть("Номенклатура,swПартия", "Количество,Себестоимость,СебестоимостьБезНДС,Сумма,СуммаБезНДС");
	Для Каждого ДвижениеПартий Из ТаблицаПродажПартий Цикл
		Движение = ДвиженияПоВидамОпераций.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Ссылка.Дата;
		Движение.Организация = Ссылка.Организация;
		Движение.Номенклатура = ДвижениеПартий.Номенклатура;
		Движение.swПартия = ДвижениеПартий.swПартия;
		Движение.ОстатокКоличество = ДвижениеПартий.Количество;
		Движение.ОстатокСтоимость = ДвижениеПартий.Себестоимость;
		Движение.ОстатокСтоимостьБезНДС = ДвижениеПартий.СебестоимостьБезНДС;
		Движение.ПродажаКоличество = Движение.ОстатокКоличество;
		Движение.ПродажаСтоимость = Движение.ОстатокСтоимость;
		Движение.ПродажаСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
		Движение.ПродажаСумма = ДвижениеПартий.Сумма;
		Движение.ПродажаСуммаБезНДС = ДвижениеПартий.СуммаБезНДС;
	КонецЦикла;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	ПродажиПартий.Записать();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьДвиженияСписанияНедостач(Ссылка, Заголовок)
	
	Результат = Истина;
	
	ДвиженияПартий = РегистрыНакопления.swПартииТоваровОрганизаций.СоздатьНаборЗаписей();
	ДвиженияПартий.Отбор.Регистратор.Значение = Ссылка;
	
	ДвиженияПоВидамОпераций = РегистрыНакопления.swДвижениеПартийТоваровОрганизацийПоВидамОпераций.СоздатьНаборЗаписей();
	ДвиженияПоВидамОпераций.Отбор.Регистратор.Значение = Ссылка;
	
	Если Ссылка.Товары.Количество() > 0 Тогда
		
		ЗапросПоПартиям = Новый Запрос;
		Текст = "ВЫБРАТЬ
		        |	Данные.Склад КАК Склад,
		        |	Данные.Номенклатура КАК Номенклатура,
		        |	Данные.Партия.ДатаПрихода КАК ДатаПрихода,
		        |	Данные.Партия.Наименование КАК НаименованиеПартии,
		        |	Данные.Партия.НомерСтроки КАК НомерСтроки,
		        |	Данные.Партия.Поставщик КАК Поставщик,
		        |	Данные.Партия.ЗакупочнаяЦенаВВалюте КАК ЗакупочнаяЦенаВВалюте,
		        |	Данные.Партия.ВалютаЗакупочнойЦены КАК ВалютаЗакупочнойЦены,
		        |	Данные.Партия КАК Партия,
		        |	Данные.Количество,
		        |	Данные.Стоимость,
		        |	Данные.СтоимостьБезНДС
		        |ИЗ
		        |	(ВЫБРАТЬ
		        |		ПартииТоваровНаСкладах.Склад КАК Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия КАК Партия,
		        |		СУММА(ПартииТоваровНаСкладах.КоличествоОстаток) КАК Количество,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьОстаток) КАК Стоимость,
		        |		СУММА(ПартииТоваровНаСкладах.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДС
		        |	ИЗ
		        |		РегистрНакопления.swПартииТоваровОрганизаций.Остатки(
		        |				&Граница,
		        |				Организация = &Организация
		        |					И Склад = &Склад
		        |					И Номенклатура В (&СписокНоменклатуры)) КАК ПартииТоваровНаСкладах
		        |	
		        |	СГРУППИРОВАТЬ ПО
		        |		ПартииТоваровНаСкладах.Склад,
		        |		ПартииТоваровНаСкладах.Номенклатура,
		        |		ПартииТоваровНаСкладах.swПартия) КАК Данные
		        |
		        |УПОРЯДОЧИТЬ ПО
		        |	Склад,
		        |	Номенклатура,
		        |	ДатаПрихода,
		        |	НаименованиеПартии,
		        |	НомерСтроки";
		ЗапросПоПартиям.Текст = Текст;
		ЗапросПоПартиям.УстановитьПараметр("Граница", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
		ЗапросПоПартиям.УстановитьПараметр("Организация", Ссылка.Организация);
		ЗапросПоПартиям.УстановитьПараметр("Склад", Ссылка.Склад);
		ЗапросПоПартиям.УстановитьПараметр("СписокНоменклатуры", Ссылка.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		ТаблицаПоПартиям = ЗапросПоПартиям.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
		Для Каждого СтрокаТМЦ Из Ссылка.Товары Цикл
			
			Если СтрокаТМЦ.Количество = 0 Или Не СтрокаТМЦ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоДокументу = СтрокаТМЦ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТМЦ.Номенклатура);
			СтрокиПоПартиямТовара = ТаблицаПоПартиям.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаПоПартиям Из СтрокиПоПартиямТовара Цикл
				
				Если СтрокаПоПартиям.Количество > КоличествоПоДокументу Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = Ссылка.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = КоличествоПоДокументу;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС / СтрокаПоПартиям.Количество * КоличествоПоДокументу;
					
					СтрокаПоПартиям.Количество = СтрокаПоПартиям.Количество - Движение.Количество;
					СтрокаПоПартиям.Стоимость = СтрокаПоПартиям.Стоимость - Движение.Стоимость;
					СтрокаПоПартиям.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС - Движение.СтоимостьБезНДС;
					
					КоличествоПоДокументу = 0;
					
				ИначеЕсли СтрокаПоПартиям.Количество > 0 Тогда
					
					Движение = ДвиженияПартий.Добавить();
					Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
					Движение.Период = Ссылка.Дата;
					Движение.Организация = Ссылка.Организация;
					Движение.Склад = Ссылка.Склад;
					Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
					Движение.swПартия = СтрокаПоПартиям.Партия;
					Движение.Количество = СтрокаПоПартиям.Количество;
					Движение.Стоимость = СтрокаПоПартиям.Стоимость;
					Движение.СтоимостьБезНДС = СтрокаПоПартиям.СтоимостьБезНДС;
					
					КоличествоПоДокументу = КоличествоПоДокументу - Движение.Количество;
					
					СтрокаПоПартиям.Количество = 0;
					СтрокаПоПартиям.Стоимость = 0;
					СтрокаПоПартиям.СтоимостьБезНДС = 0;
					
				КонецЕсли;
				
				Если КоличествоПоДокументу = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПоДокументу > 0 Тогда
				Движение = ДвиженияПартий.Добавить();
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
				Движение.Период = Ссылка.Дата;
				Движение.Организация = Ссылка.Организация;
				Движение.Склад = Ссылка.Склад;
				Движение.Номенклатура = СтрокаТМЦ.Номенклатура;
				Движение.swПартия = Справочники.swПартииТоваровОрганизаций.ПустаяСсылка();
				Движение.Количество = КоличествоПоДокументу;
				Движение.Стоимость = 0;
				Движение.СтоимостьБезНДС = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ДвижениеПартий Из ДвиженияПартий Цикл
		Движение = ДвиженияПоВидамОпераций.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Ссылка.Дата;
		Движение.Организация = Ссылка.Организация;
		Движение.Номенклатура = ДвижениеПартий.Номенклатура;
		Движение.swПартия = ДвижениеПартий.swПартия;
		Движение.ОстатокКоличество = ДвижениеПартий.Количество;
		Движение.ОстатокСтоимость = ДвижениеПартий.Стоимость;
		Движение.ОстатокСтоимостьБезНДС = ДвижениеПартий.СтоимостьБезНДС;
		Движение.СписаниеКоличество = Движение.ОстатокКоличество;
		Движение.СписаниеСтоимость = Движение.ОстатокСтоимость;
		Движение.СписаниеСтоимостьБезНДС = Движение.ОстатокСтоимостьБезНДС;
	КонецЦикла;
	
	ДвиженияПартий.Записать();
	ДвиженияПоВидамОпераций.Записать();
	
	Возврат Результат;
	
КонецФункции
