Процедура ПровестиВыгрузкуПоУзлам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПланОбменаKaspi.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.Kaspi_ПланОбмена КАК ПланОбменаKaspi
	               |ГДЕ
	               |	ПланОбменаKaspi.Ссылка <> &ТекущийУзел";
	
	Запрос.УстановитьПараметр("ТекущийУзел", ПланыОбмена.Kaspi_ПланОбмена.ЭтотУзел());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыгрузитьНаСайтНаСервере(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьНаСайтНаСервере(Узел) Экспорт
	
	ИмяЛога = "" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd") + "_.log";
	
	Отказ = Ложь;
	
	вЛог(Строка(ТекущаяДата()) + Символы.Таб + "Начало выгрузки. ", ИмяЛога);
	
	FTPConnection = ПолучитьСоединениеСFTP(Узел.АдресСервера, Узел.НомерПорта, Узел.Пользователь, Узел.Пароль, Узел.ПапкаДляLogФайлов);
	FTPПапка = Узел.FTPПапкаДляФайлов;
	
	Если FTPConnection = Null Тогда
		вЛог(Строка(ТекущаяДата()) + Символы.Таб + "Соединение с FTP не установлено!", Узел.ПапкаДляLogФайлов + ИмяЛога);
		Отказ = Истина;
	КонецЕсли;
	
	ЗагрузитьФайлНаFTPСервер(Узел.Организация, Узел.КатегорияЦен, Узел.СписокСкладов.Выгрузить(, "Склад").ВыгрузитьКолонку("Склад"), FTPConnection, FTPПапка, Узел.ИмяФайла, Узел.СписокНоменклатуры, Узел.ПапкаДляLogФайлов, Узел);
	
	вЛог(Строка(ТекущаяДата()) + Символы.Таб + "Выгрузка завершена. ", "" + Узел.ПапкаДляLogФайлов + ИмяЛога);
	
КонецПроцедуры

Процедура ЗагрузитьФайлНаFTPСервер(Организация, КатегорияЦен, СписокСкладов, FTPConnection, FTPПапка, ИмяФайла, СписокНоменклатуры, ПапкаДляLogФайлов, Узел) Экспорт
	
	Товары = ПолучитьДанныеДляЗаписиВXML(КатегорияЦен, Узел);

	ЗаписьXML = Новый ЗаписьXML;

	ВременыйФайл = ПолучитьИмяВременногоФайла("xml");

	ЗаписьXML.ОткрытьФайл(ВременыйФайл);

	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("kaspi_catalog");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьАтрибут("xmlns", "kaspiShopping");
	ЗаписьXML.ЗаписатьАтрибут("date", Формат(ТекущаяДата(), "дд.мм.гггг чч:мм:сс"));
	ЗаписьXML.ЗаписатьАтрибут("xsi:schemaLocation", "kaspiShopping http://kaspi.kz/kaspishopping.xsd");

	ЗаписьXML.ЗаписатьНачалоЭлемента("company");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(Организация.Наименование));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("merchantid");
	ЗаписьXML.ЗаписатьТекст(СокрЛП(Узел.merchant_id));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("offers");

	Для Каждого ТекСтрока Из Товары Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("offer");
		ЗаписьXML.ЗаписатьАтрибут("sku", СокрЛП(ЗаменитьСимволы(ТекСтрока.Артикул)));

		ЗаписьXML.ЗаписатьНачалоЭлемента("model");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(ЗаменитьСимволы(ТекСтрока.Наименование)));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("brand");
		ЗаписьXML.ЗаписатьТекст(СокрЛП(ЗаменитьСимволы(ТекСтрока.Бренд)));
		ЗаписьXML.ЗаписатьКонецЭлемента();

		ЗаписьXML.ЗаписатьНачалоЭлемента("availabilities");
		
		Для Каждого СтрСклад Из Узел.СписокСкладов Цикл
			
			СтруктураПоПредзаказу = ТоварПоПредзаказу(ТекСтрока.Номенклатура, СтрСклад.Склад);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("availability");
			ЗаписьXML.ЗаписатьАтрибут("available", Строка(ПолучитьОстаток(СтрСклад.Склад, ТекСтрока.Номенклатура, ТекСтрока.Порог)));
			ЗаписьXML.ЗаписатьАтрибут("storeId", СокрЛП(СтрСклад.store_id));
			
			Если СтруктураПоПредзаказу.Предзаказ Тогда
				ЗаписьXML.ЗаписатьАтрибут("preOrder", Строка(СтруктураПоПредзаказу.КолДней));
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();

		СписокЦен = ПолучитьЦены(ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Узел.СписокСкладов.Выгрузить(, "ВидЦены").ВыгрузитьКолонку("ВидЦены"), Узел);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("cityprices");
		
		Для Каждого СтрЦена Из СписокЦен Цикл
			
			Цена = Строка(СтрЗаменить(СтрЦена.Цена, Символы.НПП, ""));
			Цена = ?(Цена = "", "0", Цена);
			ЗаписьXML.ЗаписатьНачалоЭлемента("cityprice");
			ЗаписьXML.ЗаписатьАтрибут("cityId", СокрЛП(СтрЦена.IdГорода));
			ЗаписьXML.ЗаписатьТекст(Цена);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	FTPConnection.Записать(ВременыйФайл, FTPПапка + ИмяФайла);
	
	УдалитьФайлы(ВременыйФайл);
	
КонецПроцедуры

Функция ТоварПоПредзаказу(Номенклатура, Склад)
	
	РезСтруктура = Новый Структура;
	РезСтруктура.Вставить("Номенклатура", Номенклатура);
	РезСтруктура.Вставить("Предзаказ", Ложь);
	РезСтруктура.Вставить("КолДней", 0);

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыПоПредзаказуНаСкладах.Номенклатура КАК Номенклатура,
	               |	ТоварыПоПредзаказуНаСкладах.Предзаказ КАК Предзаказ,
	               |	ТоварыПоПредзаказуНаСкладах.КолДней КАК КолДней
	               |ИЗ
	               |	РегистрСведений.ТоварыПоПредзаказуНаСкладах КАК ТоварыПоПредзаказуНаСкладах
	               |ГДЕ
	               |	ТоварыПоПредзаказуНаСкладах.Номенклатура = &Номенклатура
	               |	И ТоварыПоПредзаказуНаСкладах.Склад = &Склад
	               |	И ТоварыПоПредзаказуНаСкладах.Предзаказ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		РезСтруктура.Предзаказ = Выборка.Предзаказ;
		РезСтруктура.КолДней = Выборка.КолДней;
	КонецЕсли;

	Возврат РезСтруктура;
	
КонецФункции

Процедура вЛог(Стр1, стр2) Экспорт
	
	Попытка
		Текст = Новый ЗаписьТекста(стр2, КодировкаТекста.ANSI, Неопределено, Истина);
		Текст.ЗаписатьСтроку(Стр1);
		Текст.Закрыть();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСоединениеСFTP(АдресСервера, НомерПорта, Пользователь, Пароль, ПапкаДляLogФайлов) Экспорт
	
	Попытка
		ИмяЛога = "temp.log";
		вЛог("FTP: " + АдресСервера, ПапкаДляLogФайлов + ИмяЛога);
		вЛог("FTP: " + НомерПорта, ПапкаДляLogФайлов + ИмяЛога);
		вЛог("FTP: " + Пользователь, ПапкаДляLogФайлов + ИмяЛога);
		вЛог("FTP: " + Пароль, ПапкаДляLogФайлов + ИмяЛога);
		Соединение = Новый FTPСоединение(АдресСервера, Число(НомерПорта), Пользователь, Пароль, Неопределено, Неопределено, Неопределено, Новый ЗащищенноеСоединениеOpenSSl);
	Исключение
		Сообщить("Соедиенние с FTP не установлено!" + ОписаниеОшибки());
		Возврат Null;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ТестСоединенияНаСервере(Узел) Экспорт
	
	Соединение = ПолучитьСоединениеСFTP(Узел.АдресСервера, Узел.НомерПорта, Узел.Пользователь, Узел.Пароль, Узел.ПапкаДляLogФайлов);
	
	Если Соединение = Null Тогда
		Ответ = "Соедиенние с сервером FTP не установлено!";
	Иначе
		Соединение = "";
		Ответ = "Соедиенние с сервером FTP успешно!";
	КонецЕсли;

	Возврат Ответ;
	
КонецФункции

Функция ЗаменитьСимволы(Текст) Экспорт
	
	Текст = СтрЗаменить(Текст, """", "&quot;");
	Текст = СтрЗаменить(Текст, "&", "&amp;");
	Текст = СтрЗаменить(Текст, ">", "&gt;");
	Текст = СтрЗаменить(Текст, "<", "&lt;");
	Текст = СтрЗаменить(Текст, "'", "&apos;");
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьОстаток(Склад, Товар, Порог) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК Количество
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаСкладах.Остатки(
	               |			&Дата,
	               |			Номенклатура = &Товар
	               |				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТоварыНаСкладахОстатки.Номенклатура,
	               |	ТоварыНаСкладахОстатки.Характеристика";
	
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.Количество > 0 И Выборка.Количество > Порог, "Yes", "No");
	Иначе
		Возврат "No";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДляЗаписиВXML(КатегорияЦен, Узел) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	               |	СписокНоменклатуры.Порог КАК Порог
	               |ПОМЕСТИТЬ СписокНоменклатуры
	               |ИЗ
	               |	ПланОбмена.Kaspi_ПланОбмена.СписокНоменклатуры КАК СписокНоменклатуры
	               |ГДЕ
	               |	СписокНоменклатуры.Ссылка = &Узел
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Номенклатура.Ссылка КАК Группа,
	               |	Номенклатура.Родитель КАК Родитель
	               |ПОМЕСТИТЬ СписокИерархии
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.ЭтоГруппа
	               |	И Номенклатура.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				СписокНоменклатуры.Номенклатура
	               |			ИЗ
	               |				СписокНоменклатуры КАК СписокНоменклатуры
	               |			ГДЕ
	               |				СписокНоменклатуры.Номенклатура.ЭтоГруппа)
	               |	И НЕ Номенклатура.ПометкаУдаления
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Группа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокИерархии.Группа КАК Группа,
	               |	ВЫБОР
	               |		КОГДА СписокИерархии.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА СписокИерархии.Группа
	               |		ИНАЧЕ СписокИерархии.Родитель
	               |	КОНЕЦ КАК Родитель,
	               |	ЕСТЬNULL(СписокНоменклатуры.Порог, 0) КАК Порог
	               |ИЗ
	               |	СписокИерархии КАК СписокИерархии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокНоменклатуры КАК СписокНоменклатуры
	               |		ПО СписокИерархии.Группа = СписокНоменклатуры.Номенклатура
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СписокИерархии.Группа.ЭтоГруппа ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	ДанныеГруппы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаГруппы Из ДанныеГруппы Цикл		
		Если СтрокаГруппы.Порог = 0 Тогда 
			НайденыеСтроки = ДанныеГруппы.Найти(СтрокаГруппы.Родитель, "Группа");
			Если НайденыеСтроки <> Неопределено 
				И СтрокаГруппы.Группа.ПринадлежитЭлементу(НайденыеСтроки.Родитель) Тогда 
				СтрокаГруппы.Порог = НайденыеСтроки.Порог;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = ("ВЫБРАТЬ
	                |	СписокНоменклатуры.Номенклатура КАК Номенклатура,
	                |	СписокНоменклатуры.Порог КАК Порог
	                |ПОМЕСТИТЬ СписокНоменклатуры
	                |ИЗ
	                |	ПланОбмена.Kaspi_ПланОбмена.СписокНоменклатуры КАК СписокНоменклатуры
	                |ГДЕ
	                |	СписокНоменклатуры.Ссылка = &Узел
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеГруппы.Группа КАК Группа,
	                |	ДанныеГруппы.Порог КАК Порог
	                |ПОМЕСТИТЬ СписокГрупп
	                |ИЗ
	                |	&ДанныеГруппы КАК ДанныеГруппы
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Группа
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	Номенклатура.Ссылка КАК Номенклатура,
	                |	Номенклатура.Родитель КАК Родитель
	                |ПОМЕСТИТЬ СписокРодителей
	                |ИЗ
	                |	Справочник.Номенклатура КАК Номенклатура
	                |ГДЕ
	                |	НЕ Номенклатура.ПометкаУдаления
	                |	И Номенклатура.Ссылка В ИЕРАРХИИ
	                |			(ВЫБРАТЬ
	                |				СписокГрупп.Группа КАК Группа
	                |			ИЗ
	                |				СписокГрупп КАК СписокГрупп
	                |			ГДЕ
	                |				СписокГрупп.Порог >= 0)
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура.Родитель
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВЫБОР
	                |		КОГДА СписокРодителей.Номенклатура ЕСТЬ NULL
	                |			ТОГДА СписокНоменклатуры.Номенклатура
	                |		ИНАЧЕ СписокРодителей.Номенклатура
	                |	КОНЕЦ КАК Номенклатура,
	                |	ВЫБОР
	                |		КОГДА СписокНоменклатуры.Порог ЕСТЬ NULL
	                |			ТОГДА СписокГрупп.Порог
	                |		ИНАЧЕ СписокНоменклатуры.Порог
	                |	КОНЕЦ КАК Порог
	                |ПОМЕСТИТЬ ОсновныеДанные
	                |ИЗ
	                |	СписокНоменклатуры КАК СписокНоменклатуры
	                |		ПОЛНОЕ СОЕДИНЕНИЕ СписокРодителей КАК СписокРодителей
	                |			ЛЕВОЕ СОЕДИНЕНИЕ СписокГрупп КАК СписокГрупп
	                |			ПО СписокРодителей.Родитель = СписокГрупп.Группа
	                |		ПО СписокНоменклатуры.Номенклатура = СписокРодителей.Номенклатура
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	                |	ЦеныНоменклатуры.Номенклатура.Наименование КАК Наименование,
	                |	ЦеныНоменклатуры.Номенклатура.Код КАК Артикул,
	                |	ЦеныНоменклатуры.Номенклатура.Родитель.Наименование КАК Бренд,
	                |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	                |	ЦеныНоменклатуры.Характеристика КАК Характеристика
	                |ПОМЕСТИТЬ СрезЦен
	                |ИЗ
	                |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                |			&Дата,
	                |			ВидЦены = &КатегорияЦен
	                |				И Номенклатура В
	                |					(ВЫБРАТЬ
	                |						ОсновныеДанные.Номенклатура
	                |					ИЗ
	                |						ОсновныеДанные КАК ОсновныеДанные)) КАК ЦеныНоменклатуры
	                |ГДЕ
	                |	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) <> 0
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Номенклатура
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	СрезЦен.Номенклатура КАК Номенклатура,
	                |	СрезЦен.Наименование КАК Наименование,
	                |	ОсновныеДанные.Порог КАК Порог,
	                |	СрезЦен.Цена КАК Цена,
	                |	СрезЦен.Артикул КАК Артикул,
	                |	СрезЦен.Бренд КАК Бренд,
	                |	СрезЦен.Характеристика КАК Характеристика
	                |ИЗ
	                |	ОсновныеДанные КАК ОсновныеДанные
	                |		ЛЕВОЕ СОЕДИНЕНИЕ СрезЦен КАК СрезЦен
	                |		ПО ОсновныеДанные.Номенклатура = СрезЦен.Номенклатура
	                |ГДЕ 
					|	ОсновныеДанные.Порог >= 0
	                |	И НЕ ОсновныеДанные.Номенклатура.ЭтоГруппа
	                |	И НЕ СрезЦен.Цена ЕСТЬ NULL
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Наименование");
	
	Запрос.УстановитьПараметр("КатегорияЦен", КатегорияЦен);
	Запрос.УстановитьПараметр("Дата",         ТекущаяДата());
	Запрос.УстановитьПараметр("ДанныеГруппы", ДанныеГруппы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьЦены(Номенклатура, Характеристика, МассивЦен, Узел)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(КурсыВалютСрезПоследних.Курс * ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	               |	Kaspi_ПланОбменаСписокСкладов.idГорода КАК idГорода
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			ВидЦены В (&СписокТиповЦен)
	               |				И Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	               |		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.Kaspi_ПланОбмена.СписокСкладов КАК Kaspi_ПланОбменаСписокСкладов
	               |		ПО ЦеныНоменклатурыСрезПоследних.ВидЦены = Kaspi_ПланОбменаСписокСкладов.ВидЦены";
	
	Запрос.УстановитьПараметр("Период",         ТекущаяДата());
	Запрос.УстановитьПараметр("СписокТиповЦен", МассивЦен);
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Узел",           Узел);
	
	Цены = Запрос.Выполнить().Выгрузить();

	Возврат Цены;
	
КонецФункции

Функция ПолучитьМассивУправляющихСимволов(ДляИмениФайла = Ложь) Экспорт
	
	МассивУправляющихСимволов = Новый Массив;
	
	Если Не ДляИмениФайла Тогда
		МассивУправляющихСимволов.Добавить(" ");
		МассивУправляющихСимволов.Добавить("-");
	КонецЕсли;
	
	МассивУправляющихСимволов.Добавить(".");
	МассивУправляющихСимволов.Добавить(",");
	МассивУправляющихСимволов.Добавить("(");
	МассивУправляющихСимволов.Добавить(")");
	МассивУправляющихСимволов.Добавить("[");
	МассивУправляющихСимволов.Добавить("]");
	МассивУправляющихСимволов.Добавить("{");
	МассивУправляющихСимволов.Добавить("}");
	МассивУправляющихСимволов.Добавить("`");
	МассивУправляющихСимволов.Добавить("~");
	МассивУправляющихСимволов.Добавить("!");
	МассивУправляющихСимволов.Добавить("@");
	МассивУправляющихСимволов.Добавить("#");
	МассивУправляющихСимволов.Добавить("$");
	МассивУправляющихСимволов.Добавить("%");
	МассивУправляющихСимволов.Добавить("^");
	МассивУправляющихСимволов.Добавить("&");
	МассивУправляющихСимволов.Добавить("*");
	МассивУправляющихСимволов.Добавить("=");
	МассивУправляющихСимволов.Добавить("+");
	МассивУправляющихСимволов.Добавить("|");
	МассивУправляющихСимволов.Добавить("\");
	МассивУправляющихСимволов.Добавить("/");
	МассивУправляющихСимволов.Добавить("<");
	МассивУправляющихСимволов.Добавить(">");
	МассивУправляющихСимволов.Добавить("?");
	МассивУправляющихСимволов.Добавить(";");
	МассивУправляющихСимволов.Добавить(":");
	МассивУправляющихСимволов.Добавить("№");
	МассивУправляющихСимволов.Добавить("""");
	МассивУправляющихСимволов.Добавить("'");
	МассивУправляющихСимволов.Добавить(Символы.НПП);
	МассивУправляющихСимволов.Добавить(Символы.ВК);
	МассивУправляющихСимволов.Добавить(Символы.ВТаб);
	МассивУправляющихСимволов.Добавить(Символы.ПС);
	МассивУправляющихСимволов.Добавить(Символы.ПФ);
	МассивУправляющихСимволов.Добавить(Символы.Таб);
	МассивУправляющихСимволов.Добавить(Символ(- 1));
	
	Возврат МассивУправляющихСимволов;
	
КонецФункции

Функция УдалитьУправляющиеСимволы(Стр) Экспорт
	
	МассивУправляющихСимволов = ПолучитьМассивУправляющихСимволов(Истина);
	СтрокаРезультат = "";
	
	Для i = 1 По СтрДлина(Стр) Цикл
		Буква = Символ(КодСимвола(Стр, i));
		Для каждого УправляющийСимвол Из МассивУправляющихСимволов Цикл
			Если Буква = УправляющийСимвол Тогда
				Буква = "_";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаРезультат = СтрокаРезультат + Буква;
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

