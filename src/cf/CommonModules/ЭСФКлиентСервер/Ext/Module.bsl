////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает номер версии библиотеки ЭСФ и ВС.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.0.6.15";
	
КонецФункции

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;	
	ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		// Если база клиент-серверная, то это точно только клиент.
		// Если база файловая, то это может быть как клиент, так и сервер.		
		
		// Если выполняется препроцессоре ТолстыйКлиентОбычноеПриложение, 
		// то код ВнешниеОбработки.Подключить() вызовет ошибку,
		// поэтому внешняя обработка для данного режима подлкючается через файл.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработка = ЭСФСерверПереопределяемый.СоздатьВнешнююОбработкуИзФайла();
			Контейнер = ВнешняяОбработка.ПолучитьФорму("КлиентОбычная");
		Иначе
			Контейнер = Обработки.ОбменЭСФ.ПолучитьФорму("КлиентОбычная");
		КонецЕсли;
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.КлиентУправляемая"); 	
		Иначе
			Контейнер = ПолучитьФорму("Обработка.ОбменЭСФ.Форма.КлиентУправляемая");
		КонецЕсли;
		
	#Иначе // Сервер ИЛИ ВнешнееСоединение
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
				
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
		Иначе
			Контейнер = Обработки.ОбменЭСФ.Создать();
		КонецЕсли;	

	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКИИ

///////////////////////////////////////////////////////////////////////////////
// Преобразование значений для обмена с ИС ЭСФ

Функция ПользовательскийСтатусИСЭСФ(Знач ПользовательскийСтатусИБ) Экспорт
	
	Если ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят") Тогда
		ПользовательскийСтатус = "ACCEPTED";
		
	ИначеЕсли ПользовательскийСтатусИБ = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен") Тогда
		ПользовательскийСтатус = "DECLINED";
		
	Иначе
		ПользовательскийСтатус = "";
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция ПользовательскийСтатусИБ(Знач ПользовательскийСтатусИСЭСФ) Экспорт
	
	ВРегПользовательскийСтатусИСЭСФ = ВРег(ПользовательскийСтатусИСЭСФ);
	
	Если ВРегПользовательскийСтатусИСЭСФ = "ACCEPTED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Принят");
		
	ИначеЕсли ВРегПользовательскийСтатусИСЭСФ = "DECLINED" Тогда
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.Отклонен");
		
	Иначе
		ПользовательскийСтатус = ПредопределенноеЗначение("Перечисление.ПользовательскиеСтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПользовательскийСтатус;
	
КонецФункции

Функция СтатусИСЭСФ(Знач СтатусИБ) Экспорт
	
	Если СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный") Тогда
		Статус = "CREATED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный") Тогда
		Статус = "DELIVERED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный") Тогда
		Статус = "CANCELED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") Тогда
		Статус = "REVOKED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный") Тогда
		Статус = "IMPORTED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик") Тогда
		Статус = "DRAFT";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный") Тогда
		Статус = "FAILED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный") Тогда
		Статус = "DELETED";

	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный") Тогда
		Статус = "DECLINED";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты") Тогда
		Статус = "CANCELED_BY_OGD";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ") Тогда
		Статус = "CANCELED_BY_SNT_DECLINE";
		
	ИначеЕсли СтатусИБ = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ") Тогда
		Статус = "CANCELED_BY_SNT_REVOKE";
		
	Иначе
		Статус = "";	
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусИБ(Знач СтатусИСЭСФ) Экспорт
	
	ВРегСтатусИСЭСФ = ВРег(СтатусИСЭСФ);
	
	Если ВРегСтатусИСЭСФ = "CREATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Созданный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELIVERED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Доставленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Аннулированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "REVOKED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IMPORTED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Импортированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DRAFT" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Черновик");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "FAILED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Ошибочный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELETED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Удаленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DECLINED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отклоненный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_OGD" Тогда	
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_DECLINE" Тогда	
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтклоненииСНТ");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CANCELED_BY_SNT_REVOKE" Тогда	
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.АннулированПриОтзывеСНТ");
		
	Иначе		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция НаправлениеИСЭСФ(Знач НаправлениеИБ) Экспорт
	
	Если НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		Направление =  "INBOUND";
		
	ИначеЕсли НаправлениеИБ = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		Направление = "OUTBOUND";
		
	Иначе
		Направление = "";
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция НаправлениеИБ(Знач НаправлениеИСЭСФ) Экспорт
	
	ВРегНаправлениеИСЭСФ = ВРег(НаправлениеИСЭСФ);
	
	Если ВРегНаправлениеИСЭСФ = "INBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий");
		
	ИначеЕсли ВРегНаправлениеИСЭСФ = "OUTBOUND" Тогда
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий");
		
	Иначе
		Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Направление;
	
КонецФункции

Функция ВидИСЭСФ(Знач ВидИБ) Экспорт
	
	Если ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный") Тогда
		Вид = "ORDINARY_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный") Тогда
		Вид = "FIXED_INVOICE";
		
	ИначеЕсли ВидИБ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		Вид = "ADDITIONAL_INVOICE";
		
	Иначе
		Вид = "";
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ВидИБ(Знач ВидИСЭСФ) Экспорт
	
	ВРегВидИСЭСФ = ВРег(ВидИСЭСФ);
	
	Если ВРегВидИСЭСФ = "ORDINARY_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный");
		
	ИначеЕсли ВРегВидИСЭСФ = "FIXED_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный");
		
	ИначеЕсли ВРегВидИСЭСФ = "ADDITIONAL_INVOICE" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный");
		
	Иначе
		Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ТипПодписиИСЭСФ(Знач ТипПодписиИБ) Экспорт
	
	Если ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо") Тогда
		ТипПодписи = "COMPANY";
		
	ИначеЕсли ТипПодписиИБ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо") Тогда
		ТипПодписи = "OPERATOR";
		
	Иначе	
		ТипПодписи = "";
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция ТипПодписиИБ(Знач ТипПодписиИСЭСФ) Экспорт
	
	ВРегТипПодписиИСЭСФ = ВРег(ТипПодписиИСЭСФ);
	
	Если ВРегТипПодписиИСЭСФ = "COMPANY" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ВРегТипПодписиИСЭСФ = "OPERATOR" Тогда
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		
	Иначе	
		ТипПодписи = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписи;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИСЭСФ(Знач СпособыПроисхожденияТоваровИБ) Экспорт
	
	Если СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ВТО";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС") Тогда		
		СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "СТ-1";
		
	ИначеЕсли СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС") Тогда
		СпособыПроисхожденияТоваровИСЭСФ = "ТС";
		
	Иначе		
		СпособыПроисхожденияТоваровИСЭСФ = "";
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИСЭСФ;
	
КонецФункции

Функция СпособыПроисхожденияТоваровИБ(Знач СпособыПроисхожденияТоваровИСЭСФ) Экспорт
	
	СпособыПроисхожденияТоваровИСЭСФ = ВРег(СпособыПроисхожденияТоваровИСЭСФ);
	
	Если СпособыПроисхожденияТоваровИСЭСФ = "ВТО" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ВТО");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ЕТТ" Тогда		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "СТ-1" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.СТ1");
		
	ИначеЕсли СпособыПроисхожденияТоваровИСЭСФ = "ТС" Тогда
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ТС");
		
	Иначе		
		СпособыПроисхожденияТоваровИБ = ПредопределенноеЗначение("Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат СпособыПроисхожденияТоваровИБ;
	
КонецФункции

Функция ПричинаВыпискиНаБумагеИБ(Знач ПричинаВыпискиИСЭСФ) Экспорт
	
	ПричинаВыпискиИСЭСФ = ВРег(ПричинаВыпискиИСЭСФ);
	
	Если ПричинаВыпискиИСЭСФ = "UNLAWFUL_REMOVAL_REGISTRATION" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "DOWN_TIME" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы");
		
	ИначеЕсли ПричинаВыпискиИСЭСФ = "MISSING_REQUIREMENT" Тогда		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке");
			
	Иначе		
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ПричинаВыпискиИБ;
	
КонецФункции

Функция МестоРеализацииНеРКИБ(Знач ТипНДСИСЭСФ) Экспорт
	
	ТипНДСИСЭСФ = ВРег(ТипНДСИСЭСФ);
	
	Если ТипНДСИСЭСФ = "WITHOUT_NDS_NOT_KZ" Тогда		
		МестоРеализацииНеРК = Истина;
		
	Иначе		
		МестоРеализацииНеРК = Ложь;
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция МестоРеализацииНеРКИСЭСФ(Знач ТипНДСИСЭСФ) Экспорт
		
	Если ТипНДСИСЭСФ Тогда		
		МестоРеализацииНеРК = "WITHOUT_NDS_NOT_KZ";
		
	Иначе		
		МестоРеализацииНеРК = "";
		
	КонецЕсли;
	
	Возврат МестоРеализацииНеРК;	
	
КонецФункции

Функция ТипПрофиляИСЭСФ(ТипПрофиля) Экспорт
	
	Если ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Адвокат") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ИндивидуальныйПредприниматель") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR"; 		
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Медиатор") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.Нотариус") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "ADMIN_ENTERPRISE";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.РуководительЮЛПроект") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_ADMIN";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникИП") Тогда		
		
		ТипПрофиляИСЭСФ = "ENTREPRENEUR_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникАдвоката") Тогда		
		
		ТипПрофиляИСЭСФ = "LAWYER_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникНотариуса") Тогда		
		
		ТипПрофиляИСЭСФ = "NOTARY_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникПроекта") Тогда		
		
		ТипПрофиляИСЭСФ = "PROJECT_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникСудебногоИсполнителя") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF_USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникМедиатора") Тогда		
		
		ТипПрофиляИСЭСФ = "MEDIATOR_USER";
	
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СотрудникЮЛ") Тогда		
		
		ТипПрофиляИСЭСФ = "USER";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.СудебныйИсполнитель") Тогда		
		
		ТипПрофиляИСЭСФ = "BAILIFF";
		
	ИначеЕсли ТипПрофиля = ПредопределенноеЗначение("Перечисление.ТипыПрофилейИСЭСФ.ФизическоеЛицо") Тогда		
		
		ТипПрофиляИСЭСФ = "INDIVIDUAL";	
		
	КонецЕсли;
	
	Возврат ТипПрофиляИСЭСФ;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Возврат строковых констант

Функция АдресВебПриложенияИСЭСФ() Экспорт
	Возврат "https://esf.gov.kz:8443/esf-web/";
КонецФункции

Функция ИмяСервисаInvoiceService() Экспорт
	Возврат "invoiceService";	
КонецФункции

Функция ИмяСервисаClientSession() Экспорт
	Возврат "clientSession";	
КонецФункции

Функция ИмяСервисаUploadInvoiceService() Экспорт
	Возврат "uploadInvoiceService";	
КонецФункции

Функция ИмяСервисаVersionService() Экспорт
	Возврат "versionService";	
КонецФункции

Функция ИмяСобытияЗаписьЭСФ() Экспорт 
	Возврат "Запись_ЭСФ";	
КонецФункции

Функция ИмяСобытияЗаписьСчетаФактуры() Экспорт 
	Возврат "Запись_СчетФактура";	
КонецФункции

Функция ИмяСобытияЗаписьСторно() Экспорт 	
	Возврат "Запись_Сторно";
КонецФункции

Функция ИмяПараметраСинхронизацияСИСЭСФПриЗапуске() Экспорт 
	Возврат "СинхронизацияСИСЭСФПриЗапуске";
КонецФункции

Функция СделатьАктуальным() Экспорт
	Возврат "СделатьАктуальным";	
КонецФункции

Функция ДействиеОтправка() Экспорт
	Возврат "Отправка";
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	Возврат "Выгрузка";
КонецФункции

Функция ДействиеОтзыв() Экспорт
	Возврат "Отзыв";	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	Возврат "Отклонение";	
КонецФункции

Функция ДействиеОтклонениеДополнительногоИлиИсправленного() Экспорт	
	Возврат "ОтклонениеДополнительногоИлиИсправленного";	
КонецФункции

Функция ДействиеОтклонениеОтзыва() Экспорт	
	Возврат "ОтклонениеОтзыва";	
КонецФункции

Функция ИмяВнешнейОбработкиОбменЭСФ() Экспорт
	
	Возврат "ОбменЭСФ";
	
КонецФункции

Функция ТипПроверкиРеквизит() Экспорт
	Возврат "Реквизит";
КонецФункции

Функция ТипПроверкиТабличнаяЧасть() Экспорт
	Возврат "ТабличнаяЧасть";
КонецФункции

Функция ТипПроверкиРеквизитТабличнойЧасти() Экспорт
	Возврат "РеквизитТабличнойЧасти";
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Варианты настроек прокси-сервера для обмена с ИС ЭСФ

Функция ПроксиНеИспользовать() Экспорт
	Возврат "НеИспользовать";	
КонецФункции

Функция ПроксиСистемныеНастройки() Экспорт
	Возврат "СистемныеНастройки";
КонецФункции

Функция ПроксиДругиеНастройки() Экспорт
	Возврат "ДругиеНастройки";
КонецФункции

Функция НовыйПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

Функция ЦветЗеленый() Экспорт 
	Возврат WebЦвета.ТемноЗеленый;	
КонецФункции

Функция ЦветКрасный() Экспорт
	Возврат WebЦвета.Кирпичный;	
КонецФункции

Функция ЦветСиний() Экспорт
	Синий = Новый Цвет(25, 85, 174);
	Возврат Синий;	
КонецФункции

Функция ЦветЧерный() Экспорт
	Возврат WebЦвета.Черный;	
КонецФункции

Функция ЦветСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован")
	 ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером")
	      ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю")
		  ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветЗеленый();
		
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером")
	      ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван")
		  ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован")
		  ИЛИ СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем") Тогда
		  
		Цвет = ЭСФКлиентСервер.ЦветКрасный();
		
	Иначе
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Тексты сообщений

Функция ТекстСообщенияНеУстановленОбменЧерезAPI() Экспорт 
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать прямой обмен с ИС ЭСФ"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленОбменЧерезXML() Экспорт
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

Функция ТекстСообщенияНеУстановленыОбеКонстанты() Экспорт
	
	Возврат НСтр("ru = 'Не установлена ни одна из констант ""Использовать прямой обмен с ИС ЭСФ"", ""Использовать обмен с ИС ЭСФ через выгрузку/загрузку XML файлов"".'");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с реквизитом формы РеквизитыЭСФ

Функция РеквизитыЭСФ(Форма) Экспорт
	
	РеквизитыЭСФ = Неопределено;
	
	Если Форма.РеквизитыЭСФ = Неопределено Тогда
		Форма.РеквизитыЭСФ = НовыеРеквизитыЭСФ();
	КонецЕсли;
	
	Возврат Форма.РеквизитыЭСФ;
	
КонецФункции

Функция НовыеРеквизитыЭСФ() Экспорт
	
	РеквизитыЭСФ = Новый Структура;
	
	РеквизитыЭСФ.Вставить("МассивСторнирований", Новый Массив);
	РеквизитыЭСФ.Вставить("СсылкаЭСФ", ПредопределенноеЗначение("Документ.ЭСФ.ПустаяСсылка"));
	РеквизитыЭСФ.Вставить("ЗаписатьЭСФ", Ложь);
	                                
	Возврат РеквизитыЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Криптография

// Возвращает коллекцию ЭЦП, сформированную на основе КоллекцияSignedContent с помощью ДанныеКлючаЭЦП.
//
// Параметры:
//  КоллекцияSignedContent - Соответствие - Коллекция строк для формирования ЭЦП.
//  ДанныеКлючаЭЦП - Структура - См. Обработки.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//
// Возвращаемое значение:
//  Соответствие - Коллекция сформированных ЭЦП.
//   |- Ключ - Произвольный - Ключ из КоллекцияSignedContent.
//   |- Значение - Строка - ЭЦП.
//
Функция НоваяКоллекцияПодписейЭСФ(Знач КоллекцияSignedContent, Знач ДанныеКлючаЭЦП) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	Криптопровайдер = КриптографияКлиентСервер.НовыйКриптопровайдер();
	Криптопровайдер.ИнициализироватьХранилищеКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль, Контейнер.ИнициализироватьХранилищеКлюча_ТипДанных_СтрокаBase64());	
	
	КоллекцияПодписейЭСФ = Новый Соответствие;
	Для Каждого Элемент Из КоллекцияSignedContent Цикл
		Подпись = Контейнер.СоздатьЭЦПДляПакета(Криптопровайдер, Элемент.Значение);
		КоллекцияПодписейЭСФ.Вставить(Элемент.Ключ, Подпись);
	КонецЦикла;
		
	Возврат КоллекцияПодписейЭСФ;
	
КонецФункции

// Определяет тип подписи - Подпись ЮЛ или Подпись ФЛ.
//
// Параметры:
//  ДанныеКлючаЭЦП - См. Обработка.ОбменЭСФ.ВводДанныхКлючаЭЦП.
//  ДанныеПрофиляИСЭСФ - См. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыПодписиЭСФ - Тип подписи, определенный по данным ключа ЭЦП.
//   Если не удалось определить тип подписи, то возвращает пустую ссылку.
//
Функция ТипПодписиЭСФ(Знач ДанныеКлючаЭЦП, Знач ДанныеПрофиляИСЭСФ) Экспорт
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	ТипКлюча = Контейнер.ТипКлюча(ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
	ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
	
	Если ТипКлюча = Контейнер.КлючGOST() Тогда
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		
	ИначеЕсли ТипКлюча = Контейнер.КлючRSA() Тогда
		
		Если ДанныеПрофиляИСЭСФ.СтруктурнаяЕдиница.ЭтоИндивидуальныйПредприниматель Тогда
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ЮридическоеЛицо");
		Иначе
			ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.УполномоченноеЛицо");
		КонецЕсли;
		
	Иначе
		
		ТипПодписиЭСФ = ПредопределенноеЗначение("Перечисление.ТипыПодписиЭСФ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ТипПодписиЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Функция КраткоеПредставлениеЭСФ(Знач СсылкаЭСФ) Экспорт
	
	СтрокаЭСФ = Строка(СсылкаЭСФ);
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = 'Электронный счет-фактура'"), НСтр("ru = 'ЭСФ'"));	
	СтрокаЭСФ = СтрЗаменить(СтрокаЭСФ, НСтр("ru = ' 0:00:00'"), "");
	Возврат СтрокаЭСФ;
	
КонецФункции

Функция ПреобразованноеНаименование(Знач ИсходноеНаименование) Экспорт
	
	Возврат ВРег(СокрЛП(ИсходноеНаименование));
	
КонецФункции

// Возвращает имя для аутентификации в ИС ЭСФ, полученное из ИИН.
//
// Параметры:
//  ИИН - Строка - ИИН, для формаирования имени для аутентификации в ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка - Имя для аутентификации в ИСФ ЭСФ.
//
Функция ИмяАутентификации(ИИН) Экспорт
	
	Попытка
		Число = Число(ИИН);
		ИмяАутентификации = ИИН;
	Исключение
		ИмяАутентификации = "";
	КонецПопытки;
	
	Если ПустаяСтрока(ИмяАутентификации) Тогда 
		Попытка
			ИИН = СтрЗаменить(ИИН, "IIN", "");
			Число = Число(ИИН);
			ИмяАутентификации = ИИН;
		Исключение
			ИмяАутентификации = "";	
		КонецПопытки;
	КонецЕсли;
	
	Возврат ИмяАутентификации;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

Процедура ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ИмяФайла, ИнформацияОбОшибке)
	
	Комментарий = НСтр(
		"ru = 'Не удалось удалить файл %ИмяФайла% по причине:
		|
		|%ПодробноеПредставлениеОшибки%'");
		
	Комментарий = СтрЗаменить(Комментарий, "%ИмяФайла%", ИмяФайла);
	Комментарий = СтрЗаменить(Комментарий, "%ПодробноеПредставлениеОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации("ЭСФКлиентСервер.УдалитьВременныеФайлы", "Ошибка", , , Комментарий);
	
КонецПроцедуры

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьВременныеФайлы(ПутьКФайлам) Экспорт
	
	Попытка
		УдалитьФайлы(ПутьКФайлам);
	Исключение
		ЗаписьЖурналаРегистрацииОшибкаУдаленияФайла(ПутьКФайлам, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ЭтоОповещениеПодсистемыЭСФ(Знач ИмяСобытия) Экспорт
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ()
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСторно() 
	 ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры() Тогда
		
		ОповещениеЭСФ = Истина;
		
	Иначе
		
		ОповещениеЭСФ = Ложь;
		
	КонецЕсли;
	
	Возврат ОповещениеЭСФ;
	
КонецФункции

Функция ПриоритетСостоянияЭСФ(Знач СостояниеЭСФ) Экспорт
	
	Приоритет = 0;
	
	Если СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПустаяСсылка") Тогда
		Приоритет = 0;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован") Тогда
		Приоритет = 1;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненСервером") Тогда
		Приоритет = 2;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Отозван") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Аннулирован") Тогда
		Приоритет = 3;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда
		Приоритет = 4;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятСервером") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ДоставленПолучателю") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ПринятОтПоставщика") Тогда
		Приоритет = 5;
	ИначеЕсли СостояниеЭСФ = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОтклоненПолучателем") Тогда
		Приоритет = 6;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//     СтрокаURI - Строка - ссылка на ресурс в формате: <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//
// Возвращаемое значение:
//     Структура - составные части URI согласно формату:
//         * Схема         - Строка
//         * Логин         - Строка
//         * Пароль        - Строка
//         * ИмяСервера    - Строка - часть <хост>:<порт> входного параметра
//         * Хост          - Строка
//         * Порт          - Строка
//         * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> входного параметра
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ПустыеПараметрыФормыИзменениеСтатусовЭСФ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивЭСФ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция НаименованиеДоговора(Знач ОбъектЭСФ) Экспорт
	
	НаименованиеДоговора = "";
	
	ВалютаРегламентированногоУчета = ЭСФВызовСервера.ВалютаРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер)
		И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата]'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата] в [Валюта]'");
		КонецЕсли;		
		
	Иначе
		
		Если ОбъектЭСФ.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Без договора'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор в [Валюта]'");
		КонецЕсли;		
		
	КонецЕсли;
		
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Номер]", ОбъектЭСФ.ДоговорПоставкиНомер);	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Дата]", Формат(ОбъектЭСФ.ДоговорПоставкиДата, "ДФ=dd.MM.yyyy"));	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Валюта]", ОбъектЭСФ.Валюта);	
	
	Возврат НаименованиеДоговора;
	
КонецФункции

Функция ТекстКомментарияСозданПоДаннымЭСФ(СсылкаЭСФ) Экспорт
	
	КраткоеПредставлениеЭСФ = ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(СсылкаЭСФ);
	
	ТекстКомментария = НСтр("ru = 'Создан по данным документа ""[ЭСФ]"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[ЭСФ]", КраткоеПредставлениеЭСФ);

	Возврат ТекстКомментария;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы() Экспорт
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Функция РазобратьСтрокуВМассивПоРазделителю(Знач Стр, СтрРазделитель = ".") Экспорт
	
	Результат = Новый Массив;
	
	ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	Пока ВхождениеРазделителя <> 0 Цикл
		ЧастьДоРазделителя = СокрЛП(Лев(Стр, ВхождениеРазделителя - 1));
		Результат.Добавить(ЧастьДоРазделителя);
		Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
		ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Результат.Добавить(СокрЛП(Стр));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭлементДаты(МассивЭлементов, ИндексЭлемента) 
	
	Если МассивЭлементов.Количество() <= ИндексЭлемента Тогда
		Возврат 0;
	Иначе
		ЭлементДаты = МассивЭлементов[ИндексЭлемента];
		Если ПустаяСтрока(ЭлементДаты) ИЛИ НЕ ЭСФКлиентСерверПереопределяемый.ТолькоЦифрыВСтроке(ЭлементДаты) Тогда
			Возврат 0;
		Иначе
			Возврат Число(ЭлементДаты);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДатаПоСтроке(Знач Стр) Экспорт
	
	Попытка
		Если Найти(Стр, "-") <> 0 Тогда
			Если СтрДлина(Стр) > 10 Тогда
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))),
							Число(СокрЛП(Сред(Стр, 12, 2))),
							Число(СокрЛП(Сред(Стр, 15, 2))),
							Число(СокрЛП(Сред(Стр, 18, 2))));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))));
			КонецЕсли;
		Иначе
			Если Найти(Стр, ":") <> 0 Тогда
				Стр = СтрЗаменить(Стр, " ", ",");
				Стр = СтрЗаменить(Стр, ":", ",");
				Стр = СтрЗаменить(Стр, ".", ",");
				Стр = СтрЗаменить(Стр, ",,", ",");
				МассивЭлементов = Новый Массив;
				ВхождениеРазделителя = Найти(Стр, ",");
				Пока ВхождениеРазделителя <> 0 Цикл
					МассивЭлементов.Добавить(СокрЛП(Лев(Стр, ВхождениеРазделителя - 1)));
					Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
					ВхождениеРазделителя = Найти(Стр, ",");
				КонецЦикла;
				Возврат Дата(ПолучитьЭлементДаты(МассивЭлементов, 2),
							ПолучитьЭлементДаты(МассивЭлементов, 1),
							ПолучитьЭлементДаты(МассивЭлементов, 0),
							ПолучитьЭлементДаты(МассивЭлементов, 3),
							ПолучитьЭлементДаты(МассивЭлементов, 4),
							ПолучитьЭлементДаты(МассивЭлементов, 5));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 7, 4))),
							Число(СокрЛП(Сред(Стр, 4, 2))),
							Число(СокрЛП(Сред(Стр, 1, 2))));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Процедура СообщитьПользователю(Текст, Поле = Неопределено) Экспорт
	Сообщение = Новый СообщениеПользователю;
	
	Сообщение.Текст = Текст; 		
	Если ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;	
	КонецЕсли;	
	
	Сообщение.Сообщить();
КонецПроцедуры

Функция ПроксиСерверИСЭСФ() Экспорт
	
	НастройкиПрокси = ЭСФВызовСервераПовтИсп.ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	Если НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиНеИспользовать() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиСистемныеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Истина);	
		
	ИначеЕсли НастройкиПрокси.ПроксиСервер_ВариантИспользования = ЭСФКлиентСервер.ПроксиДругиеНастройки() Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		ИнтернетПрокси.Установить("http", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Установить("https", НастройкиПрокси.ПроксиСервер_Сервер, НастройкиПрокси.ПроксиСервер_Порт);
		ИнтернетПрокси.Пользователь = НастройкиПрокси.ПроксиСервер_Пользователь;
		ИнтернетПрокси.Пароль = НастройкиПрокси.ПроксиСервер_Пароль;
		
	Иначе
		
		ИнтернетПрокси = Неопределено;
	
	КонецЕсли;
	
	Возврат ИнтернетПрокси;
	
КонецФункции

#Область МетодыОбщегоНазначения

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
//
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт

	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);

	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);

КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт

	Массив = Новый Массив;

	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);

	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;

	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";

	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';

	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;

	Иначе
		Возврат Новый (ЗаданныйТип);

	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Цвета

Функция ЦветСерый() Экспорт
	Возврат WebЦвета.Серый;	
КонецФункции

#КонецОбласти 
