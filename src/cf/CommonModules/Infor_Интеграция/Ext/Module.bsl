//ЗАГРУЗКА

Процедура ДобавитьОшибку(Объект, Причина)
	
	Попытка 
		УИД  = Новый УникальныйИдентификатор;
		Дата = ТекущаяДата();
		
		НаборЗаписей = РегистрыСведений.Infor_Ошибки.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Уникальность.Установить(УИД);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Уникальность  = УИД;
		НоваяЗапись.ДатаОшибки    = Дата;
		НоваяЗапись.ОбъектОшибки  = Объект;
		НоваяЗапись.ПричинаОшибки = Причина;
		
		НаборЗаписей.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ПривестиЗначениеКТипу1С(Значение, ТипЗначение)
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Булево Тогда
		Возврат Булево(Значение);
	КонецЕсли;
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Дата Тогда
		Год 	= Сред(Значение, 7,  4);
		Год		= Число(Год);
		Месяц 	= Сред(Значение, 4,  2);
		Месяц	= Число(Месяц);
		День 	= Сред(Значение, 1,  2);
		День	= Число(День);
		
		Если СтрДлина(Значение) = 12 Тогда
			Час = 0;
			Минута = 0;
			Секунда = 0;
		Иначе
			МасВремя = СтрРазделить(Сред(Значение, 12), ":");
			
			Час 	= МасВремя[0];
			Час		= Число(Час);
			Минута 	= МасВремя[1];
			Минута	= Число(Минута);
			Секунда = МасВремя[2];
			Секунда	= Число(Секунда);
		КонецЕсли;
		Возврат Дата(Год, Месяц, День, Час, Минута, Секунда);
	КонецЕсли;
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Строка Тогда
		Возврат СокрЛП(Строка(Значение));
	КонецЕсли;
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Число Тогда
		Возврат Число(Значение);
	КонецЕсли;
	ДобавитьОшибку(Строка(Значение), "Не возможно преобразовать к типу " + Строка(ТипЗначение));	
	Возврат Неопределено;	
КонецФункции

Функция ПривестиЗначениеКТипуSQL(Значение, ТипЗначение, ДлиннаПоля)	
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Дата Тогда
		Если Значение = Неопределено Тогда
			Возврат "'1900-01-01 00:00:00'";
		КонецЕсли;
		Год 	= Год(Значение);
		Год     = СтрЗаменить(Строка(Год), Символы.НПП, "");
		Месяц 	= Строка(Месяц(Значение));
		Месяц	= Лев("00", 2 - СтрДлина(Месяц)) + Месяц;
		День 	= Строка(День(Значение));
		День	= Лев("00", 2 - СтрДлина(День)) + День;
		Час 	= Строка(Час(Значение));;
		Час		= Лев("00", 2 - СтрДлина(Час)) + Час;
		Минута 	= Строка(Минута(Значение));
		Минута	= Лев("00", 2 - СтрДлина(Минута)) + Минута;
		Секунда = Строка(Секунда(Значение));
		Секунда	= Лев("00", 2 - СтрДлина(Секунда)) + Секунда;
		Возврат "'" + Год + "-" + День + "-" + Месяц + " " + Час + ":" + Минута + ":" + Секунда + "'";
	КонецЕсли;
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Строка Тогда
		Если Значение = Неопределено Тогда
			Возврат "''";
		КонецЕсли;
		СтрВрем = Строка(Значение);                
		СтрВрем = СтрЗаменить(СтрВрем, "&", "");
		СтрВрем = СтрЗаменить(СтрВрем, "<", "");
		СтрВрем = СтрЗаменить(СтрВрем, ">", "");
		СтрВрем = СтрЗаменить(СтрВрем, "'", "");
		СтрВрем = СтрЗаменить(СтрВрем, """", "");
		СтрВрем = СтрЗаменить(СтрВрем, "`", "");
		//СтрВрем = СтрЗаменить(СтрВрем, "|", "");
		СтрВрем = СтрЗаменить(СтрВрем, "%", "");
		//СтрВрем = СтрЗаменить(СтрВрем, "/", "");
		//СтрВрем = СтрЗаменить(СтрВрем, "\", "");
		СтрВрем = СтрЗаменить(СтрВрем, "@", "");
		СтрВрем = СтрЗаменить(СтрВрем, "(", "");
		СтрВрем = СтрЗаменить(СтрВрем, ")", "");
		СтрВрем = СтрЗаменить(СтрВрем, ",", "");
		
		СтрВрем = СокрЛП(СтрВрем);
		Если ДлиннаПоля > 0 Тогда 
			СтрВрем = Лев(СтрВрем, ДлиннаПоля);
		КонецЕсли;
		Возврат "'" + СтрВрем + "'";
	КонецЕсли;
	Если ТипЗначение = Перечисления.Infor_ТипыПолей.Число Тогда
		Если Значение = Неопределено Тогда
			Возврат "0";
		КонецЕсли;
		
		СтрВрем = Строка(Значение);
		СтрВрем = СтрЗаменить(СтрВрем, Символы.НПП, "");
		СтрВрем = СтрЗаменить(СтрВрем, ",", ".");
		
		СтрВрем = СокрЛП(СтрВрем);
		Возврат СтрВрем;
	КонецЕсли;
	Возврат "";	
КонецФункции

Процедура ПолучитьПодключениеБД(Connection) Экспорт
	Если Connection = Неопределено Тогда
		СтрокаПодключения = Константы.infor_СтрокаПодключения.Получить();
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.Open(СокрЛП(СтрокаПодключения));	
	КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьПодключениеБД(Connection)
	Если НЕ Connection = Неопределено Тогда
		Connection.Close();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗапросЧтениеБДССортировкой(ОписаниеТаблицыОбъектов, ФильтрПолейСвязи, СортировкиПолей)
	ТекстЗапрос = "SELECT ";
	Разделитель="";
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеОбъекта.ИмяПоля;
		Разделитель = ", ";
	КонецЦикла;
	ТекстЗапрос = ТекстЗапрос + " FROM " + ОписаниеТаблицыОбъектов.ИмяТаблицы;	
	
	Если НЕ ФильтрПолейСвязи = Неопределено Тогда
		Если ФильтрПолейСвязи.Количество() > 0 Тогда
			ТекстЗапрос = ТекстЗапрос + " WHERE ";
			Разделитель = "";
			Для Каждого ТекПолеСвязи Из ФильтрПолейСвязи Цикл
				ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеСвязи.ИмяПоля + " = " + ПривестиЗначениеКТипуSQL(ТекПолеСвязи.ЗначениеПоля, ТекПолеСвязи.ТипПоля, 0);
				Разделитель = " AND ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СортировкиПолей = Неопределено Тогда
		Если СортировкиПолей.Количество() > 0 Тогда
			ТекстЗапрос = ТекстЗапрос + " ORDER BY ";
			Разделитель = "";
			Для Каждого ТекПолеСортировки Из СортировкиПолей Цикл
				ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеСортировки.ИмяПоля + ?(ТекПолеСортировки.Направление, "", " DESC");
				Разделитель = " , ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗапрос; 
КонецФункции

Функция ПолучитьЗапросЧтениеБД(ОписаниеТаблицыОбъектов, ФильтрПолейСвязи)
	ТекстЗапрос = "SELECT ";
	Разделитель="";
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеОбъекта.ИмяПоля;
		Разделитель = ", ";
	КонецЦикла;
	ТекстЗапрос = ТекстЗапрос + " FROM " + ОписаниеТаблицыОбъектов.ИмяТаблицы;	
	Если НЕ ФильтрПолейСвязи = Неопределено Тогда
		Если ФильтрПолейСвязи.Количество() > 0 Тогда
			ТекстЗапрос = ТекстЗапрос + " WHERE ";
			Разделитель = "";
			Если ТипЗнч(ФильтрПолейСвязи) = Тип("Структура") Тогда
				ТекстЗапрос = ТекстЗапрос + Разделитель + ФильтрПолейСвязи.ИмяПоля + " in " + ФильтрПолейСвязи.ЗначениеПоля;
			Иначе
				Для Каждого ТекПолеСвязи Из ФильтрПолейСвязи Цикл
					ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеСвязи.ИмяПоля + " = " + ПривестиЗначениеКТипуSQL(ТекПолеСвязи.ЗначениеПоля, ТекПолеСвязи.ТипПоля, 0);
					Разделитель = " AND ";
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапрос; 
КонецФункции

Функция ПолучитьЗапросЧтениеБДпо5(ОписаниеТаблицыОбъектов, ФильтрПолейСвязи)
	ТекстЗапрос = "SELECT ";
	Разделитель="";
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеОбъекта.ИмяПоля;
		Разделитель = ", ";
	КонецЦикла;
	ТекстЗапрос = ТекстЗапрос + " FROM " + ОписаниеТаблицыОбъектов.ИмяТаблицы;	
	Если НЕ ФильтрПолейСвязи = Неопределено Тогда
		Если ФильтрПолейСвязи.Количество() > 0 Тогда
			ТекстЗапрос = ТекстЗапрос + " WHERE ";
			Разделитель = "";
			Для Каждого ТекПолеСвязи Из ФильтрПолейСвязи Цикл
				ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеСвязи.ИмяПоля + " = " + ПривестиЗначениеКТипуSQL(ТекПолеСвязи.ЗначениеПоля, ТекПолеСвязи.ТипПоля, 0);
				Разделитель = " AND ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ТекстЗапрос; 
КонецФункции

Процедура ПометитьОбъектКакЗагруженный(Connection, Уникальность, ОписаниеТаблицОбмена)
	ТекстЗапрос = "UPDATE " + ОписаниеТаблицОбмена.ИмяТаблицы + " SET STATUS = " + ОписаниеТаблицОбмена.СтатусПослеЗагрузки + " WHERE RecordId = " + Уникальность;
	
	Command = Новый COMОбъект("ADODB.Command"); 
	Command.ActiveConnection = Connection;
	Command.CommandText = ТекстЗапрос;
	Command.Execute();
	
КонецПроцедуры

Процедура ПометитьОбъектКакОшибочной(Connection, Уникальность, ОписаниеТаблицОбмена, ОписаниеОш)
	ТекстЗапрос = "UPDATE " + ОписаниеТаблицОбмена.ИмяТаблицы + " SET STATUS = " + ОписаниеТаблицОбмена.СтатусПослеОшибки + ", ERROR = '" + _ОчиститьОтЗапрещенныхСимволов(ОписаниеОш, 500) + "' WHERE RecordId = " + Уникальность;
	
	Command = Новый COMОбъект("ADODB.Command"); 
	Command.ActiveConnection = Connection;
	Command.CommandText = ТекстЗапрос;
	Command.Execute();
	
КонецПроцедуры

Функция ИнициализироватьФильтрПолей() Экспорт
	ТаблицаФильтров = Новый ТаблицаЗначений;	
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ТипПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	
	Возврат ТаблицаФильтров;
КонецФункции

Функция ИнициализироватьСортровкуПолей() Экспорт
	ТаблицаФильтров = Новый ТаблицаЗначений;	
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("Направление");
	
	Возврат ТаблицаФильтров;
КонецФункции

Функция ПолучитьФильтрПолей(ОписаниеТаблицОбмена, ПоляСвязки, ЗначениеПолейОбъекта)
	ТаблицаФильтров = ИнициализироватьФильтрПолей();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОписаниеТаблицОбмена", ОписаниеТаблицОбмена);
	НайденныеСтроки = ПоляСвязки.НайтиСтроки(ПараметрыОтбора);

	Для Каждого ТекПоляСвязки Из НайденныеСтроки Цикл
		НС = ТаблицаФильтров.Добавить();
		НС.ИмяПоля = ТекПоляСвязки.ИмяПоляСвязи;
		НС.ТипПоля = ТекПоляСвязки.ТипПоля;
		ЗначениеПоля = Неопределено;
		ЗначениеПолейОбъекта.Свойство(ТекПоляСвязки.ПсевдонимПоля, ЗначениеПоля);
		НС.ЗначениеПоля = ЗначениеПоля;
	КонецЦикла;
	
	Возврат ТаблицаФильтров;
КонецФункции

Функция ВыполнитьКод(Код, ЗначениеПолейОбъекта, ВложенныеТаблицыОбъекта, ДопИнфа)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку("ВыполнитьКод", ОписаниеОшибки());
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодПоле(Код, Значение, Результат)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку("ВыполнитьКодПоле", ОписаниеОшибки());
	КонецПопытки; 
КонецФункции

Функция ВыполнитьКодОбъект(Код, Объект, ДопИнфа, ЗначениеПолейОбъекта, ВложенныеТаблицыОбъекта, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки)
	
	Попытка
		Выполнить(Код);
	Исключение
		ПроизошлаИсключительнаяСитуация = Истина;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТаблицуОбъектовДляЗагрузки(Connection, ОписаниеТаблицыОбъектов)
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Уникальность");
	ТаблицаОбъектов.Колонки.Добавить("ПоляОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("СвязанныеТаблицыОбъекта");
		
	Command = Новый COMОбъект("ADODB.Command"); 
	Command.ActiveConnection = Connection;
	
	ФильтрПолейСвязи = ИнициализироватьФильтрПолей();
	НС = ФильтрПолейСвязи.Добавить();
	НС.ИмяПоля = "STATUS";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Число;
	НС.ЗначениеПоля = ОписаниеТаблицыОбъектов.СтатусДоЗагрузки;
	
	Command.CommandText = ПолучитьЗапросЧтениеБДпо5(ОписаниеТаблицыОбъектов, ФильтрПолейСвязи);
			
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Command.Execute();
	
	Пока RecordSet.EOF() = 0 Цикл	
		НС = ТаблицаОбъектов.Добавить();
		
		ЗначениеПолейОбъекта = Новый Структура;
		ВложенныеТаблицыОбъекта = Новый Структура;
		Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
			Если ТекПолеОбъекта.Активность Тогда
				Значение = ПривестиЗначениеКТипу1С(RecordSet.Fields(ТекПолеОбъекта.ИмяПоля).Value, ТекПолеОбъекта.ТипПоля);
				Результат = Неопределено;
				ВыполнитьКодПоле(ТекПолеОбъекта.ОбработчикПослеЗагрузки, Значение, Результат);
				Если Результат = Неопределено Тогда
					Результат = Значение;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекПолеОбъекта.Псевдоним) Тогда
					ЗначениеПолейОбъекта.Вставить(ТекПолеОбъекта.Псевдоним, Результат);
				Иначе
					ЗначениеПолейОбъекта.Вставить(ТекПолеОбъекта.ИмяПоля, Результат);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		 
		_Уникальность = Строка(RecordSet.Fields(ОписаниеТаблицыОбъектов.ПолеУникальности).Value);
		НС.Уникальность = СтрЗаменить(_Уникальность, Символы.НПП, "");
		НС.ПоляОбъекта = ЗначениеПолейОбъекта;
		
		Для Каждого ТекВложенныеТаблицы Из ОписаниеТаблицыОбъектов.ВложенныеТаблицы Цикл
			Если ТекВложенныеТаблицы.Активность Тогда
				ВложенныеТаблицыОбъекта = Новый Структура;
				ФильтрПолейСвязиВл = ПолучитьФильтрПолей(ТекВложенныеТаблицы.ОписаниеТаблицОбмена, ОписаниеТаблицыОбъектов.ПоляСвязки, ЗначениеПолейОбъекта);
								
				ВложенныеТаблицыОбъекта.Вставить(ТекВложенныеТаблицы.Псевдоним, ПолучитьВложеннуюТаблицуДляЗагрузки(Connection, ТекВложенныеТаблицы.ОписаниеТаблицОбмена, ФильтрПолейСвязиВл));
			КонецЕсли;
		КонецЦикла;
		НС.СвязанныеТаблицыОбъекта = ВложенныеТаблицыОбъекта;
				
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();
		
	Возврат ТаблицаОбъектов;
КонецФункции

Функция ПолучитьВложеннуюТаблицуДляЗагрузки(Connection, ОписаниеТаблицыОбъектов, ФильтрПолейСвязи)
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
		Если ТекПолеОбъекта.Активность Тогда
			ТаблицаОбъектов.Колонки.Добавить(ТекПолеОбъекта.Псевдоним);
		КонецЕсли;
	КонецЦикла;	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	
	НС = ФильтрПолейСвязи.Добавить();
	НС.ИмяПоля = "STATUS";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Число;
	НС.ЗначениеПоля = ОписаниеТаблицыОбъектов.СтатусДоЗагрузки;
	
	Command.CommandText = ПолучитьЗапросЧтениеБД(ОписаниеТаблицыОбъектов, ФильтрПолейСвязи);
			
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Command.Execute();
	
	Пока RecordSet.EOF() = 0 Цикл	
		
		НС = ТаблицаОбъектов.Добавить();
		
		ЗначениеПолейОбъекта = Новый Структура;
		ВложенныеТаблицыОбъекта = Новый Структура;
		Для Каждого ТекПолеОбъекта Из ОписаниеТаблицыОбъектов.Поля Цикл
			Если ТекПолеОбъекта.Активность Тогда
				Значение = ПривестиЗначениеКТипу1С(RecordSet.Fields(ТекПолеОбъекта.ИмяПоля).Value, ТекПолеОбъекта.ТипПоля);
				Результат = Неопределено;
				ВыполнитьКодПоле(ТекПолеОбъекта.ОбработчикПослеЗагрузки, Значение, Результат);
				Если Результат = Неопределено Тогда
					Результат = Значение;
				КонецЕсли;
				НС[ТекПолеОбъекта.Псевдоним] = Результат;
			КонецЕсли;
		КонецЦикла;
		
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();
		
	Возврат ТаблицаОбъектов;
КонецФункции

Процедура ОбработатьПолучениеОбъекта(Схема, ЭлементОчереди, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки)
	
	Объект = Неопределено;
	ДопИнфа = Неопределено;
	
	ВыполнитьКодОбъект(Схема.ОбработчикЗаполнениеОбъекта, Объект, ДопИнфа, ЭлементОчереди.ПоляОбъекта, ЭлементОчереди.СвязанныеТаблицыОбъекта, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки);
	
	Если Не ПроизошлаИсключительнаяСитуация Тогда 
		Если Не ПропуститьЗагрузку Тогда
			ВыполнитьКодОбъект(Схема.ОбработчикПослеЗаполненияОбъекта, Объект, ДопИнфа, ЭлементОчереди.ПоляОбъекта, ЭлементОчереди.СвязанныеТаблицыОбъекта, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроизошлаИсключительнаяСитуация Тогда
		Если Не ПропуститьЗагрузку Тогда
			ВыполнитьКодОбъект(Схема.ОбработчикПослеЗагрузки, Объект, ДопИнфа, ЭлементОчереди.ПоляОбъекта, ЭлементОчереди.СвязанныеТаблицыОбъекта, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОбъектУжеЗагружался(Уникальность)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ЛогЗагрузки.Уникальность
	               |ИЗ
	               |	РегистрСведений.Infor_ЛогЗагрузки КАК Infor_ЛогЗагрузки
	               |ГДЕ
	               |	Infor_ЛогЗагрузки.Уникальность = &Уникальность
	               |	И Infor_ЛогЗагрузки.Загружен = Истина";
	Запрос.УстановитьПараметр("Уникальность", Уникальность);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ПолучитьОбщуюНастройку(ГруппаНастроек, Настроека) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОбщиеНастройки.ЗначениеНастройки
	               |ИЗ
	               |	Справочник.Infor_ОбщиеНастройки КАК Infor_ОбщиеНастройки
	               |ГДЕ
	               |	Infor_ОбщиеНастройки.ГруппаНастроек = &ГруппаНастроек
	               |	И Infor_ОбщиеНастройки.Активность = Истина
	               |	И Infor_ОбщиеНастройки.Настроека = &Настроека";
	Запрос.УстановитьПараметр("ГруппаНастроек", ГруппаНастроек);
	Запрос.УстановитьПараметр("Настроека", Настроека);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ЗначениеНастройки;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции
	
Функция ОбъектУжеЗагружалсяНесколькоРаз(Уникальность)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ЛогЗагрузки.Уникальность
	               |ИЗ
	               |	РегистрСведений.Infor_ЛогЗагрузки КАК Infor_ЛогЗагрузки
	               |ГДЕ
	               |	Infor_ЛогЗагрузки.Уникальность = &Уникальность
	               |	И Infor_ЛогЗагрузки.КоличествоПопытокЗагрузки >= &КоличествоПопытокЗагрузки";
	Запрос.УстановитьПараметр("Уникальность", Уникальность);
	Запрос.УстановитьПараметр("КоличествоПопытокЗагрузки", ПолучитьОбщуюНастройку("ЗАГРУЗКА", "КоличествоПопытокЗагрузки"));
	Возврат НЕ Запрос.Выполнить().Пустой();	
КонецФункции

Процедура СделатьЗаписьОЗагрузкеОбъекта(Уникальность, Ошибка)
	КоличествоПопытокЗагрузки = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ЛогЗагрузки.КоличествоПопытокЗагрузки
	               |ИЗ
	               |	РегистрСведений.Infor_ЛогЗагрузки КАК Infor_ЛогЗагрузки
	               |ГДЕ
	               |	Infor_ЛогЗагрузки.Уникальность = &Уникальность";
	Запрос.УстановитьПараметр("Уникальность", Уникальность);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		КоличествоПопытокЗагрузки = Выборка.КоличествоПопытокЗагрузки + 1;
	КонецЕсли;
		
	НЗ = РегистрыСведений.Infor_ЛогЗагрузки.СоздатьНаборЗаписей();
		
	НЗ.Отбор.Уникальность.Установить(Уникальность);

	НЗ.Прочитать();
	НЗ.Очистить();
		
	НС=НЗ.Добавить();
	НС.Уникальность = Уникальность;
	НС.КоличествоПопытокЗагрузки = КоличествоПопытокЗагрузки;
	НС.Загружен = Не Ошибка;
	НЗ.Записать();
	
КонецПроцедуры

Процедура ПрочитатьТаблицыОбмена() Экспорт	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОписаниеТаблицЗагрузки.Ссылка,
	               |	Infor_ОписаниеТаблицЗагрузки.ИмяТаблицы
	               |ИЗ
	               |	Справочник.Infor_ОписаниеТаблицЗагрузки КАК Infor_ОписаниеТаблицЗагрузки
	               |ГДЕ
	               |	Infor_ОписаниеТаблицЗагрузки.Активность = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Infor_ОписаниеТаблицЗагрузки.Приоритет";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Connection = Неопределено;
		Попытка
			ПолучитьПодключениеБД(Connection);
		Исключение
			ДобавитьОшибку("Подключение", ОписаниеОшибки());
			Сообщить("Подключение");
			Продолжить;
		КонецПопытки;
			
		Попытка
			Сообщить(Выборка.ИмяТаблицы);
			ТаблицаОбъектовДляЗагрузки = ПолучитьТаблицуОбъектовДляЗагрузки(Connection, Выборка.Ссылка);
			Сообщить("Получение объектов обмена");
		Исключение
			ДобавитьОшибку(Выборка.ИмяТаблицы, ОписаниеОшибки());
			Сообщить("Ошибка получение объектов обмена");
			Продолжить;
		КонецПопытки;
		
		Для Каждого ЭлементОчереди Из ТаблицаОбъектовДляЗагрузки Цикл			
			Уникальность = ЭлементОчереди.Уникальность;
			УникальностьЗагрузки = Выборка.Ссылка.ИмяТаблицы + "_" + Уникальность;
			
			Если ОбъектУжеЗагружался(УникальностьЗагрузки) Тогда
				ДобавитьОшибку(УникальностьЗагрузки, "Объект уже загружался");
				Сообщить("Объект уже загружался");
				Попытка
					ПометитьОбъектКакОшибочной(Connection, Уникальность, Выборка.Ссылка, "Объект уже загружался");
				Исключение
					ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
					Сообщить("Ошибка объект уже загружался");
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			ПроизошлаИсключительнаяСитуация = Ложь;
			ПроизошлаИсключительнаяСитуацияСтрока = "";
			
			ПропуститьЗагрузку = Ложь;
				
			Попытка
				ОбработатьПолучениеОбъекта(Выборка.Ссылка, ЭлементОчереди, ПроизошлаИсключительнаяСитуация, ПропуститьЗагрузку, УникальностьЗагрузки);
				Сообщить("Получение объекта");
			Исключение
				ПроизошлаИсключительнаяСитуация = Истина;
				ПроизошлаИсключительнаяСитуацияСтрока = ОписаниеОшибки();
				ДобавитьОшибку(УникальностьЗагрузки, ПроизошлаИсключительнаяСитуацияСтрока);
				Сообщить("Ошибка получение объекта");
			КонецПопытки;
				
			Попытка
				Если ПроизошлаИсключительнаяСитуация Тогда
					ПометитьОбъектКакОшибочной(Connection, Уникальность, Выборка.Ссылка, ПроизошлаИсключительнаяСитуацияСтрока);
					Сообщить("Пометка ошибка");
				Иначе
					Если НЕ ПропуститьЗагрузку Тогда
						ПометитьОбъектКакЗагруженный(Connection, Уникальность, Выборка.Ссылка);
						Сообщить("Пометка ок");
					Иначе
						Сообщить("Пропустить загрузку");
					КонецЕсли;
				КонецЕсли;
			Исключение
		    	ПроизошлаИсключительнаяСитуация = Истина;
				ПроизошлаИсключительнаяСитуацияСтрока = ОписаниеОшибки();
				ДобавитьОшибку(УникальностьЗагрузки, ПроизошлаИсключительнаяСитуацияСтрока);
				Сообщить("Ошибка пометки");
			КонецПопытки;
				
			Попытка
				СделатьЗаписьОЗагрузкеОбъекта(УникальностьЗагрузки, ПроизошлаИсключительнаяСитуация);
			Исключение
				ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
		Попытка
			ЗакрытьПодключениеБД(Connection);
		Исключение
			ДобавитьОшибку("Закрытие подключения", ОписаниеОшибки());
			Сообщить("Закрытие подключения");
			Продолжить;
		КонецПопытки;
	КонецЦикла;	
		
КонецПроцедуры

//ОБЩИЕ

Процедура _ДобавитьРезерв(Заказ, СписокТоваров) Экспорт
	НЗ = РегистрыНакопления.Infor_Резервы.СоздатьНаборЗаписей();	
	НЗ.Отбор.Регистратор.Установить(Заказ);
	НЗ.Прочитать();
	НЗ.Очистить();
	
	Для Каждого СтрСписокТоваров Из СписокТоваров Цикл
		НС = НЗ.Добавить();
		НС.Период = Заказ.Дата;
		НС.Регистратор = Заказ;
		НС.ВидДвижения = ВидДвиженияНакопления.Приход;
		НС.Склад = Заказ.Склад;
		НС.Номенклатура = СтрСписокТоваров.Номенклатура;
		НС.Количество = СтрСписокТоваров.Количество;
	КонецЦикла;
	
	НЗ.Записать();
КонецПроцедуры

Процедура _УдалитьРезерв(Заказ) Экспорт
	НЗ = РегистрыНакопления.Infor_Резервы.СоздатьНаборЗаписей();	
	НЗ.Отбор.Регистратор.Установить(Заказ);
	НЗ.Прочитать();
	НЗ.Очистить();
	НЗ.Записать();
КонецПроцедуры

Функция _ПолучитьРезерв(Склад, СписокТоваров) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(Infor_РезервыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	               |	Infor_РезервыОстатки.Номенклатура
	               |ИЗ
	               |	РегистрНакопления.Infor_Резервы.Остатки КАК Infor_РезервыОстатки
	               |ГДЕ
	               |	Infor_РезервыОстатки.Склад = &Склад
	               |	И Infor_РезервыОстатки.Номенклатура В (&Номенклатура)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Infor_РезервыОстатки.Номенклатура";
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Номенклатура", СписокТоваров);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция _ПолучитьОстаток(Склад, СписокТоваров) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_Остатки.Номенклатура,
	               |	СУММА(Infor_Остатки.КоличествоВМС) КАК КоличествоОстаток,
	               |	СУММА(Infor_Остатки.Количество1С) КАК Количество1С
	               |ИЗ
	               |	РегистрСведений.Infor_Остатки КАК Infor_Остатки
	               |ГДЕ
	               |	Infor_Остатки.Номенклатура В(&Номенклатура)
	               |	И Infor_Остатки.Склад1С = &Склад1С
	               |	И Infor_Остатки.ДатаОстатка = &ДатаОстатка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Infor_Остатки.Номенклатура";
	Запрос.УстановитьПараметр("Склад1С", Склад);
	Запрос.УстановитьПараметр("Номенклатура", СписокТоваров);
	Запрос.УстановитьПараметр("ДатаОстатка", НачалоДня(ТекущаяДата()));
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПроверитьСклад(Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Ссылка
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.Склад1С = &Ссылка
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Функция ПроверитьСкладНовый(СкладВМС, Склад)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Ссылка
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.Склад1С = &Ссылка
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА
	               |	И Infor_СвязкиСкладов.СкладВМС = &СкладВМС";
	Запрос.УстановитьПараметр("Ссылка", Склад);
	Запрос.УстановитьПараметр("СкладВМС", СкладВМС);
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
КонецФункции

Функция ВернутьСклад(Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Склад1С
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	&ЗонаВМС ПОДОБНО Infor_СвязкиСкладов.ЗонаВМС
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА";
	Запрос.УстановитьПараметр("ЗонаВМС", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Склад1С;
	КонецЦикла;
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции

Функция ВернутьСкладВМС(Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.СкладВМС
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.Активность = ИСТИНА
	               |	И Infor_СвязкиСкладов.Склад1С = &Склад1С";
	Запрос.УстановитьПараметр("Склад1С", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СкладВМС;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция ВернутьСкладНовый(СкладВМС, Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Склад1С
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	&ЗонаВМС ПОДОБНО Infor_СвязкиСкладов.ЗонаВМС
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА
	               |	И Infor_СвязкиСкладов.СкладВМС = &СкладВМС";
	Запрос.УстановитьПараметр("ЗонаВМС", Склад);
	Запрос.УстановитьПараметр("СкладВМС", СкладВМС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Склад1С;
	КонецЦикла;
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции

Функция ВернутьСкладНовый1C(Склад1C, Склад) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Склад1С
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	&ЗонаВМС ПОДОБНО Infor_СвязкиСкладов.ЗонаВМС
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА
	               |	И Infor_СвязкиСкладов.Склад1С = &Склад1C";
	Запрос.УстановитьПараметр("ЗонаВМС", Склад);
	Запрос.УстановитьПараметр("Склад1C", Склад1C);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Склад1С;
	КонецЦикла;
	Возврат Справочники.Склады.ПустаяСсылка();
КонецФункции

//ТТ Получаем вид склада WMS
Функция ВернутьВидСкладаWMS(Склад1С) Экспорт
	Вид = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.ЗонаВМС КАК Вид
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.Склад1С = &Склад1С
	               |	И НЕ Infor_СвязкиСкладов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Склад1С",Склад1С);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Вид = Выборка.Вид;
		Вид = СтрЗаменить(Вид,"%","");
		Возврат Вид;	
	КонецЦикла;
КонецФункции

Функция ВернутьСкладПотерянногоТовараНовый(СкладВМС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Склад1С
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.СкладПотерянногоТовара = ИСТИНА
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА
	               |	И Infor_СвязкиСкладов.СкладВМС = &СкладВМС";
	Запрос.УстановитьПараметр("СкладВМС", СкладВМС);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Склад1С;
КонецФункции

Функция ВернутьСкладПотерянногоТовара()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиСкладов.Склад1С
	               |ИЗ
	               |	Справочник.Infor_СвязкиСкладов КАК Infor_СвязкиСкладов
	               |ГДЕ
	               |	Infor_СвязкиСкладов.СкладПотерянногоТовара = ИСТИНА
	               |	И Infor_СвязкиСкладов.Активность = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Склад1С;
КонецФункции

Функция ПолучитьСписокТаблицБазыДанных(ИмяБазы) Экспорт
	СтрокаПодключения = Константы.infor_СтрокаПодключения.Получить();
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open(СтрокаПодключения);	
	
	ТекстЗапроса = "SELECT Name, Id FROM " + ИмяБазы + "..sysobjects WHERE type = 'U' ORDER BY Name";
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandText = ТекстЗапроса;
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Command.Execute();
	
	ТабРезультата = Новый ТаблицаЗначений;
	ТабРезультата.Колонки.Добавить("Имя");
	ТабРезультата.Колонки.Добавить("ID");
	
	Пока RecordSet.EOF() = 0 Цикл
		НС = ТабРезультата.Добавить();
		НС.Имя = RecordSet.Fields(0).Value;
		НС.ID = СтрЗаменить(Строка(RecordSet.Fields(1).Value), Символы.НПП, "");
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();	
	Connection.Close();
	
	Возврат ТабРезультата;
КонецФункции

Функция ПолучитьСписокПолейТаблицы(ИдБазы) Экспорт
	СтрокаПодключения = Константы.infor_СтрокаПодключения.Получить();
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open(СтрокаПодключения);	
	
	ТекстЗапроса = "select name, type_name(xusertype), colstat, isnullable, prec from syscolumns where id = '" + ИдБазы + "' and number = 0 order by colid";
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandText = ТекстЗапроса;
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Command.Execute();
	
	ТабРезультата = Новый ТаблицаЗначений;
	ТабРезультата.Колонки.Добавить("Имя");
	ТабРезультата.Колонки.Добавить("Тип");
	ТабРезультата.Колонки.Добавить("Ключ");
	ТабРезультата.Колонки.Добавить("НеНуль");
	ТабРезультата.Колонки.Добавить("ДлиннаПоля");
	
	Пока RecordSet.EOF() = 0 Цикл
		НС = ТабРезультата.Добавить();
		НС.Имя = RecordSet.Fields(0).Value;
		НС.Тип = RecordSet.Fields(1).Value;
		НС.Ключ = RecordSet.Fields(2).Value;
		НС.НеНуль = RecordSet.Fields(3).Value;
		НС.ДлиннаПоля = RecordSet.Fields(4).Value;
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();	
	Connection.Close();
	
	Возврат ТабРезультата;
КонецФункции

Функция ПолучитьТипПоля(ТипSql) Экспорт
	Если ТипSql = "bigint" ИЛИ ТипSql = "decimal" ИЛИ ТипSql = "int" Тогда
		Возврат Перечисления.Infor_ТипыПолей.Число;
	КонецЕсли;
	Если ТипSql = "datetime" Тогда
		Возврат Перечисления.Infor_ТипыПолей.Дата;
	КонецЕсли;
	Если ТипSql = "nvarchar" ИЛИ ТипSql = "varchar" ИЛИ ТипSql = "nchar" Тогда
		Возврат Перечисления.Infor_ТипыПолей.Строка;
	КонецЕсли;
	Возврат Перечисления.Infor_ТипыПолей.Булево;
КонецФункции

Функция ПолучитьТаблицуИзSqlССортировкой(ОписаниеТаблицы, Фильтры, Сортировки) Экспорт	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицы.Поля Цикл
		ТаблицаОбъектов.Колонки.Добавить(ТекПолеОбъекта.ИмяПоля);
	КонецЦикла;
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open(Константы.infor_СтрокаПодключения.Получить());
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandText = ПолучитьЗапросЧтениеБДССортировкой(ОписаниеТаблицы, Фильтры, Сортировки);
			
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = Command.Execute();
	
	Пока RecordSet.EOF() = 0 Цикл
		НС = ТаблицаОбъектов.Добавить();
		
		Для Каждого ТекПолеОбъекта Из ОписаниеТаблицы.Поля Цикл
			ЗначПоля = ПривестиЗначениеКТипу1С(RecordSet.Fields(ТекПолеОбъекта.ИмяПоля).Value, ТекПолеОбъекта.ТипПоля);
			НС[ТекПолеОбъекта.ИмяПоля] = ЗначПоля;
		КонецЦикла;
		
		RecordSet.MoveNext();
	КонецЦикла;
	
	RecordSet.Close();
	Connection.Close();
	
	Возврат ТаблицаОбъектов;
КонецФункции

Функция ПолучитьТаблицуИзSql(ОписаниеТаблицы, Фильтры)	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	
	Для Каждого ТекПолеОбъекта Из ОписаниеТаблицы.Поля Цикл
		ТаблицаОбъектов.Колонки.Добавить(ТекПолеОбъекта.ИмяПоля);
	КонецЦикла;
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.Open(Константы.infor_СтрокаПодключения.Получить());
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		Command.CommandText = ПолучитьЗапросЧтениеБД(ОписаниеТаблицы, Фильтры);
		
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute();
		
		Пока RecordSet.EOF() = 0 Цикл
			НС = ТаблицаОбъектов.Добавить();
			
			Для Каждого ТекПолеОбъекта Из ОписаниеТаблицы.Поля Цикл
				ЗначПоля = ПривестиЗначениеКТипу1С(RecordSet.Fields(ТекПолеОбъекта.ИмяПоля).Value, ТекПолеОбъекта.ТипПоля);
				НС[ТекПолеОбъекта.ИмяПоля] = ЗначПоля;
			КонецЦикла;
			
			RecordSet.MoveNext();
		КонецЦикла;
		
		RecordSet.Close();
		Connection.Close();
	Исключение
	КонецПопытки;
	
	Возврат ТаблицаОбъектов;
КонецФункции

Функция СоздатьПеремещение(Товары, СкладИсточник, СкладПриемник, НомерНЗН = Неопределено)
	//ТТ
	ОбъектПеремещение = Неопределено;
	
	Если ЗначениеЗаполнено(НомерНЗН) Тогда //Найдем перемещение, если есть передаем его, если нет только тогда создаем
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПеремещениеТоваров.Ссылка КАК ПеремещениеТоваров
		               |ИЗ
		               |	Документ.ПеремещениеТоваров.ДополнительныеРеквизиты КАК ПеремещениеТоваровДополнительныеРеквизиты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		               |		ПО ПеремещениеТоваровДополнительныеРеквизиты.Ссылка = ПеремещениеТоваров.Ссылка
		               |ГДЕ
		               |	ПеремещениеТоваровДополнительныеРеквизиты.Значение = &НомерНЗН
		               |	И НЕ ПеремещениеТоваров.ПометкаУдаления
		               |	И ПеремещениеТоваров.Дата МЕЖДУ &ПериодНачало И &ПериодКонец
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПеремещениеТоваров.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("НомерНЗН", НомерНЗН);
		Запрос.УстановитьПараметр("ПериодНачало", НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("ПериодКонец",  КонецДня(ТекущаяДата()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбъектПеремещение = Выборка.ПеремещениеТоваров.ПолучитьОбъект();
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбъектПеремещение = Неопределено Тогда
		
		ОбъектПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
		ОбъектПеремещение.Дата                  = ТекущаяДата();		
		ОбъектПеремещение.Комментарий           = "Приемка товаров";
		ОбъектПеремещение.Организация           = Константы.infor_Организация.Получить();
		ОбъектПеремещение.ОрганизацияПолучатель = Константы.infor_Организация.Получить();
		ОбъектПеремещение.СкладОтправитель      = СкладИсточник;
		ОбъектПеремещение.СкладПолучатель       = СкладПриемник;
		ОбъектПеремещение.Статус                = Перечисления.СтатусыПеремещенийТоваров.Принято;
		ОбъектПеремещение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		
	КонецЕсли;
	
	Для Каждого Товар Из Товары Цикл
		НоваяСтрока = ОбъектПеремещение.Товары.Добавить();
		
		НоваяСтрока.Номенклатура       = Товар.Номенклатура;
		НоваяСтрока.Упаковка           = Товар.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.КоличествоУпаковок = Товар.Количество;
		НоваяСтрока.Количество         = Товар.Количество;
	КонецЦикла;
	
	ОбъектПеремещение.Товары.Свернуть("Номенклатура, Упаковка", "КоличествоУпаковок, Количество");
	
	Возврат ОбъектПеремещение;
	
КонецФункции

Функция СоздатьПрихОрдер(Сс, ДатаСс, Статус)
	Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	Объект.Заполнить(Сс);
	Объект.Статус = Статус;
	Объект.Дата = ДатаСс;	
	Объект.ЗакрыватьГрафикПоступления = Истина;
	Возврат Объект;
КонецФункции

Функция СоздатьРасхОрдер(Сс, ДатаСс, СкладскаяОперация, Склад, Получатель, Товары)
	Объект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
	Объект.СкладскаяОперация = СкладскаяОперация;
	Объект.Склад = Склад;
	Объект.Получатель = Получатель;
	Объект.Дата = ДатаСс;
	Объект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	Объект.ДатаОтгрузки = ДатаСс;
	Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
	
	Для Каждого СтрТовара Из Товары Цикл
		НСР = Объект.ТоварыПоРаспоряжениям.Добавить();
		НСР.Номенклатура = СтрТовара.Номенклатура;
		НСР.Распоряжение = Сс;
		НСР.Количество = СтрТовара.Количество;
		
		НСО = Объект.ОтгружаемыеТовары.Добавить();
		НСО.Номенклатура = СтрТовара.Номенклатура;
		НСО.Количество = СтрТовара.Количество;
		НСО.Упаковка = СтрТовара.Упаковка;
		НСО.КоличествоУпаковок = СтрТовара.КоличествоУпаковок;
		НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;

	Возврат Объект;
КонецФункции

Функция ВыполнитьОбщуюФункцию(ИмяФункции, СтруктураПараметров, ПроизошлаИсключительнаяСитуация)
	Результат = Неопределено;
	Попытка
		Выполнить(Справочники.Infor_ОбщиеФункции.НайтиПоНаименованию(ИмяФункции).ОбработчикФункции);
	Исключение
		ДобавитьОшибку("ВыполнитьОбщуюФункцию:" + ИмяФункции, ОписаниеОшибки());
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПолучитьПрефиксОбъека(Объект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ПрефиксыОбъектов.Префикс
	               |ИЗ
	               |	Справочник.Infor_ПрефиксыОбъектов КАК Infor_ПрефиксыОбъектов
	               |ГДЕ
	               |	Infor_ПрефиксыОбъектов.ТипОбъекта = &ТипОбъекта
	               |	И Infor_ПрефиксыОбъектов.Активность = ИСТИНА"; 
	Запрос.УстановитьПараметр("ТипОбъекта",ПолучитьПолноеИмяОбъекта(Объект));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат СокрЛП(Выборка.Префикс);
	КонецЦикла;
	
	Возврат "";
		
КонецФункции

Функция ПолучитьПараметрыКлиента(Объект, Код)	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_СвязкиКлиентов.Ссылка
	               |ИЗ
	               |	Справочник.Infor_СвязкиКлиентов КАК Infor_СвязкиКлиентов
	               |ГДЕ
	               |	Infor_СвязкиКлиентов.Активность = ИСТИНА
	               |	И Infor_СвязкиКлиентов.КлиентИлиСклад = &КлиентИлиСклад
	               |	И Infor_СвязкиКлиентов.КодПараметра = &КодПараметра"; 
	Запрос.УстановитьПараметр("КлиентИлиСклад", Объект);
	Запрос.УстановитьПараметр("КодПараметра", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;		
КонецФункции

//ВСПОМОГАТЕЛЬНЫЕ

Процедура СменитьСтатусОбъекта(Объект, Статус)
	НЗ = РегистрыСведений.Infor_СтатусыОбъектов.СоздатьНаборЗаписей();
			
	НЗ.Отбор.Объект.Установить(Объект);
	НЗ.Прочитать();
	НЗ.Очистить();
		
	НС=НЗ.Добавить(); 
	НС.Объект = Объект;
	НС.СтатусОбъекта = Статус;
	НЗ.Записать();
	
	ТД = ТекущаяДата();
	НЗ = РегистрыСведений.Infor_ИсторияСтатусовОбъектов.СоздатьНаборЗаписей();
	НЗ.Отбор.Объект.Установить(Объект);
	НЗ.Отбор.ДатаИзменения.Установить(ТД);
	НЗ.Прочитать();
	НЗ.Очистить();
		
	НС=НЗ.Добавить();
	НС.ДатаИзменения = ТД;
	НС.Объект = Объект;
	НС.СтатусОбъекта = Статус;
	НЗ.Записать();	
КонецПроцедуры

Функция _ОчиститьОтЗапрещенныхСимволов(Стр, Длина) 
	СтрВр = Стр;
	СтрВр = СтрЗаменить(СтрВр, "&", "");
	СтрВр = СтрЗаменить(СтрВр, "<", "");
	СтрВр = СтрЗаменить(СтрВр, ">", "");
	СтрВр = СтрЗаменить(СтрВр, "`", "");
	СтрВр = СтрЗаменить(СтрВр, """", "");
	СтрВр = СтрЗаменить(СтрВр, "'", "");
	//СтрВр = СтрЗаменить(СтрВр, "|", "");
	СтрВр = СтрЗаменить(СтрВр, "%", "");
	//СтрВр = СтрЗаменить(СтрВр, "/", "");
	//СтрВр = СтрЗаменить(СтрВр, "\", "");
	СтрВр = СтрЗаменить(СтрВр, "@", "");
	СтрВр = СтрЗаменить(СтрВр, "(", "");
	СтрВр = СтрЗаменить(СтрВр, ")", "");
	Возврат Лев(СокрЛП(СтрВр), Длина);
КонецФункции

Функция _ПолучитьРанееВыгруженнуюНоменклатуру(Код) 

	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("ИмяПоля");
	ОписаниеПолей.Колонки.Добавить("ТипПоля");
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "ItemId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Name";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "AltSku";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR01";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR02";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR03";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR04";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR05";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "MANUFACTURERSKU";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SKUGROUP";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SKUGROUP2";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Status";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Число;
	
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "dbo.ExpItemToWMS");
	ОписаниеТаблицы.Вставить("Поля", ОписаниеПолей);

	Фильтры = ИнициализироватьФильтрПолей();
	НС = Фильтры.Добавить();
	НС.ИмяПоля = "ItemId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	НС.ЗначениеПоля = СокрЛП(Код);
	
	Возврат ПолучитьТаблицуИзSql(ОписаниеТаблицы, Фильтры);
КонецФункции

Функция _ПолучитьРанееВыгруженнуюНоменклатуруНовый(СкладВМС, Код) 

	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("ИмяПоля");
	ОписаниеПолей.Колонки.Добавить("ТипПоля");
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "ItemId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Name";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "AltSku";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR01";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR02";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR03";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR04";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR05";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "MANUFACTURERSKU";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SKUGROUP";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SKUGROUP2";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Status";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Число;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "WHSEID";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "dbo.ExpItemToWMS");
	ОписаниеТаблицы.Вставить("Поля", ОписаниеПолей);

	Фильтры = ИнициализироватьФильтрПолей();
	НС = Фильтры.Добавить();
	НС.ИмяПоля = "ItemId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	НС.ЗначениеПоля = СокрЛП(Код);
	
	НС = Фильтры.Добавить();
	НС.ИмяПоля = "WHSEID";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	НС.ЗначениеПоля = СокрЛП(СкладВМС);
	
	Возврат ПолучитьТаблицуИзSql(ОписаниеТаблицы, Фильтры);
КонецФункции


Функция _ПолучитьЗначениеСвойстваСправочника(Св, ВидСпр, Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураДополнительныеРеквизиты.Значение
	               |ИЗ
	               |	Справочник." + ВидСпр + ".ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
	               |	И НоменклатураДополнительныеРеквизиты.Свойство.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Ссылка", Ном);
	Запрос.УстановитьПараметр("Наименование", Св);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция _ПолучитьАдрес(Ссылка, Тип, Вид)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыКонтактнаяИнформация.Представление
	               |ИЗ
	               |	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	               |ГДЕ
	               |	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	               |	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
	               |	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("Вид", Вид);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Представление;
	КонецЦикла;
	Возврат "";
КонецФункции

Функция _ПолучитьПодчиненныйДокумент(Сс, ВидДокумента, Поле)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Ссылка
	               |ИЗ
	               |	Документ." + ВидДокумента + " КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Проведен = Истина               
	               |	И РеализацияТоваровУслуг." + Поле + " = &ЗаказКлиента";   
	Запрос.УстановитьПараметр("ЗаказКлиента", Сс);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

//ТТ
Функция ПолучитьНазначение(Сс)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбеспечениеЗаказовОстатки.Назначение КАК Назначение
	               |ИЗ
	               |	РегистрНакопления.ОбеспечениеЗаказов.Остатки КАК ОбеспечениеЗаказовОстатки
	               |ГДЕ
	               |	ОбеспечениеЗаказовОстатки.Назначение.Заказ = &Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбеспечениеЗаказовОстатки.Назначение";
	Запрос.УстановитьПараметр("Заказ",Сс);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;	
	КонецЦикла;
	Возврат Справочники.Назначения.ПустаяСсылка();
КонецФункции

Функция _ПолучитьУжеПринятыеТовары(Сс)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура,
	               |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество
	               |ИЗ
	               |	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	               |ГДЕ
	               |	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен = Истина
	               |	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение";   
	Запрос.УстановитьПараметр("ЗаказКлиента", Сс);
	Результат = Запрос.Выполнить();
	Пока Результат.Пустой() Цикл
		Возврат Результат.Выгрузить().Свернуть("Номенклатура", "Количество");
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция _ПолучитьЗначениеСвойстваДокумента(Св, ВидСпр, Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеализацияТоваровУслугДополнительныеРеквизиты.Значение
	               |ИЗ
	               |	Документ." + ВидСпр + ".ДополнительныеРеквизиты КАК РеализацияТоваровУслугДополнительныеРеквизиты
	               |ГДЕ
	               |	РеализацияТоваровУслугДополнительныеРеквизиты.Ссылка = &Ссылка
	               |	И РеализацияТоваровУслугДополнительныеРеквизиты.Свойство.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Ссылка", Ном);
	Запрос.УстановитьПараметр("Наименование", Св);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Функция _ЧислоВСтроку(Ч)
	СтрВрем = Строка(Ч);
	СтрВрем = СтрЗаменить(СтрВрем, Символы.НПП, "");
	СтрВрем = СтрЗаменить(СтрВрем, ",", ".");
	Возврат СтрВрем;
КонецФункции

Функция _ПересчитатьКоличествоВВМС(Ном, Кол) Экспорт
	ПлощадьЕдиницы = Ном.ПлощадьЕдиницы;
	КолвоВСтандУпаковке = Ном.КолвоВСтандУпаковке;
	Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
		КоличествоВ = Кол;
		КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
		КоличествоЯщ = Цел(Кол / КолвоВСтандУпаковке);
		КоличествоШт = КоличествоВ - КоличествоЯщ * КолвоВСтандУпаковке;
		Результат = КоличествоЯщ * КоличествоВЯщ + Окр(КоличествоШт / ПлощадьЕдиницы);
	Иначе
		Результат = Кол;
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции

Функция _ПересчитатьКоличествоВ1С(Ном, Кол) Экспорт
	ПлощадьЕдиницы = Ном.ПлощадьЕдиницы;
	КолвоВСтандУпаковке = Ном.КолвоВСтандУпаковке;
	Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) и Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы) > 0 Тогда
		Количество = Кол;
		КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
		КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
		КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
		Результат = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
	Иначе
		Результат = Кол;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция _РазбитьСтрокиПоПодстрокам(Стр, КолСим, МаксА)
	МасРез = Новый Массив;
	Сч = 1;
	Для А = 0 По МаксА Цикл
	    МасРез.Добавить(Сред(Стр, Сч, КолСим));
		Сч = Сч + КолСим;
	КонецЦикла;
	Возврат МасРез;
КонецФункции

Функция _ПолучитьМассивНомера(Стр)
	Попытка
		МасРез = Новый Массив;	
		МасРез.Добавить(Лев(Стр, 1));
		МасРез.Добавить(Прав(Стр, 4));
		МасРез.Добавить(Сред(Стр, 3, СтрДлина(Стр) - 7));
		Возврат МасРез;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция _ПолучитьНомерВМС(Преф, Объект) Экспорт
	Возврат Преф + Объект.Номер + "_" + СтрЗаменить(Строка(Год(Объект.Дата)), Символы.НПП, "");
КонецФункции

Функция _ПолучитьСсылку1С(РазНомера, ТипДока)
	Возврат ТипДока.НайтиПоНомеру(РазНомера[2], Дата(РазНомера[1], 1, 1));	
КонецФункции

Функция СоздатьПолучитьРО(Распоряжение)
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	РасходныйОрдер.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдер
		                      |ГДЕ
		                      |	РасходныйОрдер.Распоряжение = &Распоряжение
		                      |	И РасходныйОрдер.Ссылка.Проведен");
		
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Попытка
				Возврат Выборка.Ссылка.ПолучитьОбъект();
			Исключение
				Возврат Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.РасходныйОрдерНаТовары.СоздатьДокумент();	
	
КонецФункции

Функция СоздатьПолучитьПО(Распоряжение)
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		                      |ГДЕ
		                      |	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение
		                      |	И ПриходныйОрдерНаТовары.Проведен
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ПриходныйОрдерНаТовары.Ссылка");
		
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Попытка
				Возврат Выборка.Ссылка.ПолучитьОбъект();
			Исключение
				Возврат Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();	
	
КонецФункции

//РЕГИСТРАЦИЯ

Процедура ВыполнитьРегистрациюОбъекта(Объект) Экспорт
	БуферСхем = Новый Соответствие;
	
	ПолноеИмяОбъекта = ПолучитьПолноеИмяОбъекта(Объект);
		
	СхемыВыгрузки = БуферСхем.Получить(ПолноеИмяОбъекта);
		
	Если СхемыВыгрузки = Неопределено Тогда
		Попытка
			СхемыВыгрузки = ПолучитьСхемыВыгрузки(Объект, ПолноеИмяОбъекта);
		Исключение
			ДобавитьОшибку(Объект, ОписаниеОшибки());
			Возврат;
		КонецПопытки;
			
		БуферСхем.Вставить(ПолноеИмяОбъекта, СхемыВыгрузки);
	КонецЕсли;
		
	Попытка
		Для Каждого СхемаВыгрузки Из СхемыВыгрузки Цикл
			ЗарегистрироватьОбъект(СхемаВыгрузки, Объект);
		КонецЦикла;
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
	КонецПопытки;		 	
КонецПроцедуры

Процедура ЗарегистрироватьОбъект(СхемаВыгрузки, Объект)
	ДопИнфа = Новый Структура;
	ДопИнфа.Вставить("статусОшибки", Ложь);
	ПоляВыгрузки = Новый Структура;
	НеВыгружать = Ложь;
	СписокSQL = Новый СписокЗначений;
	
	ВыполнитьКодФильтр(СхемаВыгрузки.ОбработчикФильтрВыгрузки, Объект, ДопИнфа, НеВыгружать);
	
	Если НеВыгружать Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаписатьОбъектВОчередь(Объект, ?(СхемаВыгрузки.Мастердата, 0, 1));
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьОбъектВОчередь(Объект, Приоритет)
	НЗ = РегистрыСведений.Infor_ОчередьВыгрузки.СоздатьНаборЗаписей();
			
	НЗ.Отбор.Объект.Установить(Объект);
	НЗ.Прочитать();
	НЗ.Очистить();
		
	НС=НЗ.Добавить(); 
	НС.Объект = Объект;
	НС.КоличествоПопытокВыгрузки = 0;
	НС.Приоритет = Приоритет;
	НС.СтатусВыгрузки = Перечисления.Infor_СтатусВыгрузки.ОжидаетВыгрузки;
	НС.Ошибка = "";
	НЗ.Записать();
КонецПроцедуры

//ВЫГРУЗКА

Функция ПолучитьЗапросЗаписи(ПоляВыгрузки, ИмяТаблицы)
	ТекстЗапрос = "INSERT INTO " + ИмяТаблицы + " (";
	Разделитель="";
	Для Каждого ТекПолеОбъекта Из ПоляВыгрузки Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеОбъекта.Ключ;
		Разделитель = ", ";
	КонецЦикла;
	ТекстЗапрос = ТекстЗапрос + ") VALUES (";
	Разделитель="";
	Для Каждого ТекПолеОбъекта Из ПоляВыгрузки Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + ТекПолеОбъекта.Значение;
		Разделитель = ", ";
	КонецЦикла;
	ТекстЗапрос = ТекстЗапрос + ")";
	Возврат ТекстЗапрос;
КонецФункции

Функция ПолучитьЗапросыУдаления(ИмяТаблицы, Фильтры)
	ТекстЗапрос = "DELETE " + ИмяТаблицы + " WHERE ";
	Разделитель = " ";
	Для Каждого СтрПоляФильт Из Фильтры Цикл
		ТекстЗапрос = ТекстЗапрос + Разделитель + СтрПоляФильт.ИмяПоля + " = " + СтрПоляФильт.ЗначениеПоля;
		Разделитель = " AND ";
	КонецЦикла;
	
	Возврат ТекстЗапрос;
КонецФункции

Функция ЗаписатьСтруктуруБД(Списокsql)
	СтрокаПодключения = Константы.infor_СтрокаПодключения.Получить();
	Попытка
		Connection = Новый COMОбъект("ADODB.Connection");
		Connection.Open(СтрокаПодключения);
	Исключение
		ДобавитьОшибку("ADODB.Connection", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
	Попытка
		Connection.BeginTrans();
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
	
		Для Каждого СтрЗапроса Из Списокsql Цикл
			Command.CommandText = СтрЗапроса.Значение;
			Command.Execute();
		КонецЦикла;
		Connection.CommitTrans();
	Исключение
		Connection.RollbackTrans();
		ДобавитьОшибку("ADODB.Command", ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Connection.Close();
	Возврат Истина;
КонецФункции

Процедура ЗаписатьСтруктуруВСтроку(Списокsql, ПоляВыгрузки, ИмяТаблицы)
	ТекстЗапроса = ПолучитьЗапросЗаписи(ПоляВыгрузки, ИмяТаблицы);
	Списокsql.Добавить(ТекстЗапроса);
КонецПроцедуры

Функция ВыполнитьКодТабЧасть(Код, Объект, РезультатТабличнаяЧасть, ДопИнфа)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодТабЧастьСторка(Код, Объект, ТекущаяСтрокаТабличнойЧасти, РезультатТабличнаяЧасть, ДопИнфа);
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодВыгрузка(Код, Объект, ДопИнфа)	
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодВыгрузкаПеред(Код, Объект, ДопИнфа, НеВыгружать, УдалитьРегистрацию)	
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодФильтр(Код, Объект, ДопИнфа, НеВыгружать)	
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодВыгрузкаПоле(Код, Объект, Результат, ДопИнфа)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодТабЧастьВыгрузкаПоле(Код, Объект, ТекущаяСтрокаТабличнойЧасти, РезультатТабличнаяЧасть, Результат, ДопИнфа)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Функция ВыполнитьКодПроверка(Код, Объект, СтатусВыгрузки, ОписаниеОшибки, Status, Error, ДопИнфа, ОбновитьРегистрацию)
	Попытка
		Выполнить(Код);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
КонецФункции

Процедура ВыгрузитьТабЧастьОбъекта(Списокsql, СхемаВыгрузки, Объект, ДопИнфа)
	ПоляВыгрузки = Новый Структура;
	РезультатТабличнаяЧасть = Неопределено;
		
	ВыполнитьКодТабЧасть(СхемаВыгрузки.ОбработчикПолучениеТабличнойЧасти, Объект, РезультатТабличнаяЧасть, ДопИнфа);
		
	Для Каждого ТекущаяСтрокаТабличнойЧасти Из РезультатТабличнаяЧасть Цикл
		Для Каждого ТекПолеВыгрузки Из СхемаВыгрузки.Поля Цикл
			Если НЕ ТекПолеВыгрузки.Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Неопределено;
			
			ВыполнитьКодТабЧастьВыгрузкаПоле(ТекПолеВыгрузки.ОбработчикПередВыгрузкой, Объект, ТекущаяСтрокаТабличнойЧасти, РезультатТабличнаяЧасть, Результат, ДопИнфа);
			
			РезультатSQL = ПривестиЗначениеКТипуSQL(Результат, ТекПолеВыгрузки.ТипПоля, ТекПолеВыгрузки.ДлиннаПоля);
			
			ПоляВыгрузки.Вставить(ТекПолеВыгрузки.ИмяПоля, РезультатSQL);
		КонецЦикла;
		
		Попытка
			ЗаписатьСтруктуруВСтроку(Списокsql, ПоляВыгрузки, СхемаВыгрузки.ИмяТаблицы);
		Исключение
			ДопИнфа.статусОшибки = Истина;
			ДобавитьОшибку(Объект, ОписаниеОшибки());
		КонецПопытки;
		
		ВыполнитьКодТабЧастьСторка(СхемаВыгрузки.ОбработчикПослеВыгрузки, Объект, ТекущаяСтрокаТабличнойЧасти, РезультатТабличнаяЧасть, ДопИнфа);
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьОбъект(СхемаВыгрузки, Объект, ДопИнфа, УдалитьРегистрацию)
	НеВыгружать = Ложь;
	СписокSQL = Новый СписокЗначений;
	ПоляВыгрузки = Новый Структура;
	
	ВыполнитьКодВыгрузкаПеред(СхемаВыгрузки.ОбработчикПередЗаполнением, Объект, ДопИнфа, НеВыгружать, УдалитьРегистрацию);
	
	Если НеВыгружать Тогда
		Возврат;
	КонецЕсли;
	
	Уникальность = "";
	ИмяПоля = "";
	
	Фильтры = ИнициализироватьФильтрПолей();
	Для Каждого ТекПолеВыгрузки Из СхемаВыгрузки.Поля Цикл
		Если НЕ ТекПолеВыгрузки.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ВыполнитьКодВыгрузкаПоле(ТекПолеВыгрузки.ОбработчикПередВыгрузкой, Объект, Результат, ДопИнфа);
		
		РезультатSQL = ПривестиЗначениеКТипуSQL(Результат, ТекПолеВыгрузки.ТипПоля, ТекПолеВыгрузки.ДлиннаПоля);
		
		Если ТекПолеВыгрузки.Уникальность Тогда			
			НС = Фильтры.Добавить();
			НС.ИмяПоля = ТекПолеВыгрузки.ИмяПоля;
			НС.ТипПоля = ТекПолеВыгрузки.ТипПоля;
			НС.ЗначениеПоля = СокрЛП(РезультатSQL);
		КонецЕсли;
		
		ПоляВыгрузки.Вставить(ТекПолеВыгрузки.ИмяПоля, РезультатSQL);
	КонецЦикла;
		
	Для Каждого ТекВложенныеТаблицы Из СхемаВыгрузки.ВложенныеТаблицы Цикл
		Если НЕ ТекВложенныеТаблицы.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		СписокSQL.Добавить(ПолучитьЗапросыУдаления(ТекВложенныеТаблицы.ОписаниеТаблицОбмена.ИмяТаблицы, Фильтры));
	КонецЦикла;
	СписокSQL.Добавить(ПолучитьЗапросыУдаления(СхемаВыгрузки.ИмяТаблицы, Фильтры));
	
	Для Каждого ТекВложенныеТаблицы Из СхемаВыгрузки.ВложенныеТаблицы Цикл
		Если НЕ ТекВложенныеТаблицы.Активность Тогда
			Продолжить;
		КонецЕсли;
			
		ВыгрузитьТабЧастьОбъекта(СписокSQL, ТекВложенныеТаблицы.ОписаниеТаблицОбмена, Объект, ДопИнфа);
	КонецЦикла;
	
	Попытка
		ЗаписатьСтруктуруВСтроку(СписокSQL, ПоляВыгрузки, СхемаВыгрузки.ИмяТаблицы);
	Исключение
		ДобавитьОшибку(Объект, ОписаниеОшибки());
		ДопИнфа.статусОшибки = Истина;
	КонецПопытки;
	
	Если Не ДопИнфа.статусОшибки Тогда
		Если Не ЗаписатьСтруктуруБД(СписокSQL) Тогда
			ДопИнфа.статусОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьКодВыгрузка(СхемаВыгрузки.ОбработчикПослеВыгрузки, Объект, ДопИнфа);
КонецПроцедуры

Функция ПолучитьПолноеИмяОбъекта(Объект)
	ИмяОбъекта = Объект.Метаданные().Имя;
	ПрефиксИмени = "";
	
	Если (Метаданные.Документы.Найти(ИмяОбъекта) <> Неопределено) Тогда
		
		ПрефиксИмени = "Документ.";
		
	ИначеЕсли (Метаданные.Справочники.Найти(ИмяОбъекта) <> Неопределено) Тогда
		
		ПрефиксИмени = "Справочник.";
		
	КонецЕсли; 
	
	ПолноеИмяОбъекта = ПрефиксИмени + ИмяОбъекта;
	
	Возврат ПолноеИмяОбъекта;
КонецФункции

Функция ПолучитьСхемыВыгрузки(Объект, ПолноеИмяОбъекта)
		
	Схемы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОбработкаОбъектовВыгрузки.Ссылка
	               |ИЗ
	               |	Справочник.Infor_ОбработкаОбъектовВыгрузки КАК Infor_ОбработкаОбъектовВыгрузки
	               |ГДЕ
	               |	Infor_ОбработкаОбъектовВыгрузки.ТипОбъекта = &ТипОбъекта
	               |	И Infor_ОбработкаОбъектовВыгрузки.Активность = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Infor_ОбработкаОбъектовВыгрузки.Приоритет"; 
	Запрос.УстановитьПараметр("ТипОбъекта", ПолноеИмяОбъекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Схемы.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Схемы.Количество() = 0 Тогда
		//ВызватьИсключение "Нет схем выгрузки.";
	КонецЕсли;
		
	Возврат Схемы;
		
КонецФункции

Функция ВыбратьИзмененияОбъектов()
	
	Значение = Новый СписокЗначений;
	
	ПриоритетМастердаты = ПолучитьОбщуюНастройку("ВЫГРУЗКА", "ПриоритетМестердаты");
	Если ПриоритетМастердаты = Неопределено Тогда
		ПриоритетМастердаты = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.Объект
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.СтатусВыгрузки = &СтатусВыгрузки
	               |	И Infor_ОчередьВыгрузки.Приоритет = &Приоритет";
				   
	//Выгружаем мастердату
	Запрос.УстановитьПараметр("СтатусВыгрузки", Перечисления.Infor_СтатусВыгрузки.ОжидаетВыгрузки);
	Запрос.УстановитьПараметр("Приоритет", 0);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий () Цикл
			Значение.Добавить(Выборка.Объект);
		КонецЦикла;
		//Ждем выгрузки мастердаты
		Если ПриоритетМастердаты Тогда
		
			Возврат Значение;
			
		КонецЕсли;
	КонецЕсли;
				   
	//Проверка на загрузку мастердаты
	Запрос.УстановитьПараметр("СтатусВыгрузки", Перечисления.Infor_СтатусВыгрузки.ОжидаетЗагрузки);
	Запрос.УстановитьПараметр("Приоритет", 0);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда		
		//Ждем загрузки мастердаты
		Если ПриоритетМастердаты Тогда
		
			Возврат Значение;
			
		КонецЕсли;
	КонецЕсли;
	
	//Проверка на ошибку загрузки мастердаты
	Запрос.УстановитьПараметр("СтатусВыгрузки", Перечисления.Infor_СтатусВыгрузки.ОшибкаЗагрузки);
	Запрос.УстановитьПараметр("Приоритет", 0);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		//Ждем загрузки мастердаты
		Если ПриоритетМастердаты Тогда
		
			Возврат Значение;
			
		КонецЕсли;
	КонецЕсли;	
	
	//Выгружаем все остальное
	Запрос.УстановитьПараметр("СтатусВыгрузки", Перечисления.Infor_СтатусВыгрузки.ОжидаетВыгрузки);
	Запрос.УстановитьПараметр("Приоритет", 1);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий () Цикл
			Значение.Добавить(Выборка.Объект);
		КонецЦикла;
	КонецЕсли;	
	 	
	Возврат Значение;
КонецФункции

Функция ВыбратьОжидающиеОбъекты()
	
	Значение = Новый СписокЗначений;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.Объект
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.СтатусВыгрузки = &СтатусВыгрузки";
				   		
		Запрос.УстановитьПараметр("СтатусВыгрузки", Перечисления.Infor_СтатусВыгрузки.ОжидаетЗагрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий () Цикл
			Значение.Добавить(Выборка.Объект);
		КонецЦикла;
	КонецЕсли;	
	 	
	Возврат Значение;
КонецФункции

Процедура УдалитьРегистрацииСобытий(ОбъектВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.КоличествоПопытокВыгрузки,
	               |	Infor_ОчередьВыгрузки.Приоритет,
	               |	Infor_ОчередьВыгрузки.СтатусВыгрузки,
	               |	Infor_ОчередьВыгрузки.Ошибка
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ОбъектВыгрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		НЗ = РегистрыСведений.Infor_ОчередьВыгрузки.СоздатьНаборЗаписей();
			
		НЗ.Отбор.Объект.Установить(ОбъектВыгрузки);

		НЗ.Прочитать();
		НЗ.Очистить();
			
		НС=НЗ.Добавить();
		НС.Объект = ОбъектВыгрузки;
		НС.КоличествоПопытокВыгрузки = Выборка.КоличествоПопытокВыгрузки + 1;
		НС.Приоритет = Выборка.Приоритет;
		НС.СтатусВыгрузки = Перечисления.Infor_СтатусВыгрузки.ОжидаетЗагрузки;
		НС.Ошибка = Выборка.Ошибка;
		НЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьРегистрацииСобытий(ОбъектВыгрузки, СтатусВыгрузки, ОписаниеОшибки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.КоличествоПопытокВыгрузки,
	               |	Infor_ОчередьВыгрузки.Приоритет,
	               |	Infor_ОчередьВыгрузки.СтатусВыгрузки,
	               |	Infor_ОчередьВыгрузки.Ошибка
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ОбъектВыгрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		
		НЗ = РегистрыСведений.Infor_ОчередьВыгрузки.СоздатьНаборЗаписей();
			
		НЗ.Отбор.Объект.Установить(ОбъектВыгрузки);

		НЗ.Прочитать();
		НЗ.Очистить();
			
		НС=НЗ.Добавить();
		НС.Объект = ОбъектВыгрузки;
		НС.КоличествоПопытокВыгрузки = Выборка.КоличествоПопытокВыгрузки;
		НС.Приоритет = Выборка.Приоритет;
		НС.СтатусВыгрузки = СтатусВыгрузки;
		НС.Ошибка = ОписаниеОшибки;
		НЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗагрузкуОбъекта(ИмяТаблицы, Фильтры) 

	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("ИмяПоля");
	ОписаниеПолей.Колонки.Добавить("ТипПоля");
		
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Error";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;

	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Status";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Число;
	
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы", ИмяТаблицы);
	ОписаниеТаблицы.Вставить("Поля", ОписаниеПолей);
	
	Возврат ПолучитьТаблицуИзSql(ОписаниеТаблицы, Фильтры);
КонецФункции

Процедура ПроверитьЗагрузкуОбъекта(СхемаВыгрузки, Объект, СтатусВыгрузки, ОписаниеОшибки, ДопИнфа, ОбновитьРегистрацию)
	СписокSQL = Новый СписокЗначений;
	ПоляВыгрузки = Новый Структура;
	
	РезультатSQL = "";
	ИмяПоля = "";
	
	Фильтры = ИнициализироватьФильтрПолей();
	Для Каждого ТекПолеВыгрузки Из СхемаВыгрузки.Поля Цикл
		Если НЕ ТекПолеВыгрузки.Уникальность Тогда
			Продолжить;
		КонецЕсли;	
		
		Результат = Неопределено;
		
		ВыполнитьКодВыгрузкаПоле(ТекПолеВыгрузки.ОбработчикПередВыгрузкой, Объект, Результат, ДопИнфа);		
		РезультатSQL = ПривестиЗначениеКТипуSQL(Результат, ТекПолеВыгрузки.ТипПоля, ТекПолеВыгрузки.ДлиннаПоля);
				
		НС = Фильтры.Добавить();
		НС.ИмяПоля = ТекПолеВыгрузки.ИмяПоля;
		НС.ТипПоля = ТекПолеВыгрузки.ТипПоля;
		НС.ЗначениеПоля = СокрЛП(РезультатSQL);
	КонецЦикла;
	
	ТабРез = ПолучитьЗагрузкуОбъекта(СхемаВыгрузки.ИмяТаблицы, Фильтры);
	Если ТабРез.Количество() > 0 Тогда	
		ВыполнитьКодПроверка(СхемаВыгрузки.ОбработчикПроверкаЗагрузки, Объект, СтатусВыгрузки, ОписаниеОшибки, ТабРез[0].Status, ТабРез[0].Error, ДопИнфа, ОбновитьРегистрацию);
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗагрузкуОбъектов() Экспорт
	БуферСхем = Новый Соответствие;
	
	ИзмененныеОбъекты = ВыбратьОжидающиеОбъекты();
	
	Для Каждого Элемент Из ИзмененныеОбъекты Цикл		
		ПолноеИмяОбъекта = ПолучитьПолноеИмяОбъекта(Элемент.Значение);
		
		СхемыВыгрузки = БуферСхем.Получить(ПолноеИмяОбъекта);
		
		Если СхемыВыгрузки = Неопределено Тогда
			Попытка
				СхемыВыгрузки = ПолучитьСхемыВыгрузки(Элемент.Значение, ПолноеИмяОбъекта);
			Исключение
				ДобавитьОшибку(Элемент.Значение, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			БуферСхем.Вставить(ПолноеИмяОбъекта, СхемыВыгрузки);
		КонецЕсли;
		
		Попытка
			ДопИнфа = Новый Структура;
			ДопИнфа.Вставить("статусОшибки", Ложь);
			
			СтатусВыгрузки = Перечисления.Infor_СтатусВыгрузки.ОжидаетЗагрузки;
			ОписаниеОшибки = "";
			
			ОбновитьРегистрацию = Истина;
			
			Для Каждого СхемаВыгрузки Из СхемыВыгрузки Цикл
				ПроверитьЗагрузкуОбъекта(СхемаВыгрузки, Элемент.Значение, СтатусВыгрузки, ОписаниеОшибки, ДопИнфа, ОбновитьРегистрацию);		
			КонецЦикла;
			
			Если Не ДопИнфа.статусОшибки Тогда
				Если ОбновитьРегистрацию Тогда 
					ОбновитьРегистрацииСобытий(Элемент.Значение, СтатусВыгрузки, ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		Исключение
			ДобавитьОшибку(Элемент.Значение, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьВыгрузкуОбъектов() Экспорт
	БуферСхем = Новый Соответствие;
	
	ИзмененныеОбъекты = ВыбратьИзмененияОбъектов();
	
	Для Каждого Элемент Из ИзмененныеОбъекты Цикл		
		ПолноеИмяОбъекта = ПолучитьПолноеИмяОбъекта(Элемент.Значение);
		
		СхемыВыгрузки = БуферСхем.Получить(ПолноеИмяОбъекта);
		
		Если СхемыВыгрузки = Неопределено Тогда
			Попытка
				СхемыВыгрузки = ПолучитьСхемыВыгрузки(Элемент.Значение, ПолноеИмяОбъекта);
			Исключение
				ДобавитьОшибку(Элемент.Значение, ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			БуферСхем.Вставить(ПолноеИмяОбъекта, СхемыВыгрузки);
		КонецЕсли;
		
		Попытка
			ДопИнфа = Новый Структура;
			ДопИнфа.Вставить("статусОшибки", Ложь);
			
			УдалитьРегистрацию = Истина;

			Для Каждого СхемаВыгрузки Из СхемыВыгрузки Цикл
				ВыгрузитьОбъект(СхемаВыгрузки, Элемент.Значение, ДопИнфа, УдалитьРегистрацию);		
			КонецЦикла;
			
			Если Не ДопИнфа.статусОшибки Тогда
				Если УдалитьРегистрацию Тогда
					УдалитьРегистрацииСобытий(Элемент.Значение);
				КонецЕсли;
			КонецЕсли;
		Исключение
			ДобавитьОшибку(Элемент.Значение, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;	 
	
КонецПроцедуры

Процедура infor_ПриЗаписиОбъектовПриЗаписи(Источник, Отказ) Экспорт
	//ВыполнитьРегистрациюОбъекта(Источник.Ссылка);
	Если Источник.ОбменДанными.Загрузка = Ложь тогда 	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "БлокПриЗаписиЗаказаКлиента")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда												
			Попытка 
				ФлагПолныеПрава = РольДоступна("ПолныеПрава");
			Исключение
				ФлагПолныеПрава = Ложь;
			КонецПопытки;
			Если Не ФлагПолныеПрава Тогда
				Если ОбъектЕстьВОчереди(Источник.Ссылка) Тогда
					Если Источник.ДополнительныеСвойства.Свойство("inforLoad") Тогда
						Если Не Источник.ДополнительныеСвойства.inforLoad Тогда
						    Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "БлокПриЗаписиВозвратТоваровОтКлиента")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда												
			Попытка 
				ФлагПолныеПрава = РольДоступна("ПолныеПрава");
			Исключение
				ФлагПолныеПрава = Ложь;
			КонецПопытки;
			Если Не ФлагПолныеПрава Тогда
				Если ОбъектЕстьВОчереди(Источник.Ссылка) Тогда
					Если Источник.ДополнительныеСвойства.Свойство("inforLoad") Тогда
						Если Не Источник.ДополнительныеСвойства.inforLoad Тогда
						    Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "БлокПриЗаписиВозвратТоваровПоставщику")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда												
			Попытка 
				ФлагПолныеПрава = РольДоступна("ПолныеПрава");
			Исключение
				ФлагПолныеПрава = Ложь;
			КонецПопытки;
			Если Не ФлагПолныеПрава Тогда
				Если ОбъектЕстьВОчереди(Источник.Ссылка) Тогда
					Если Источник.ДополнительныеСвойства.Свойство("inforLoad") Тогда
						Если Не Источник.ДополнительныеСвойства.inforLoad Тогда
						    Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "БлокПриЗаписиЗаказПоставщику")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда												
			Попытка 
				ФлагПолныеПрава = РольДоступна("ПолныеПрава");
			Исключение
				ФлагПолныеПрава = Ложь;
			КонецПопытки;
			Если Не ФлагПолныеПрава Тогда
				Если ОбъектЕстьВОчереди(Источник.Ссылка) Тогда
					Если Источник.ДополнительныеСвойства.Свойство("inforLoad") Тогда
						Если Не Источник.ДополнительныеСвойства.inforLoad Тогда
						    Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "БлокПриЗаписиПеремещениеТоваров")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда												
			Попытка 
				ФлагПолныеПрава = РольДоступна("ПолныеПрава");
			Исключение
				ФлагПолныеПрава = Ложь;
			КонецПопытки;
			Если Не ФлагПолныеПрава Тогда
				Если ОбъектЕстьВОчереди(Источник.Ссылка) Тогда
					Если Источник.ДополнительныеСвойства.Свойство("inforLoad") Тогда
						Если Не Источник.ДополнительныеСвойства.inforLoad Тогда
						    Отказ = Истина;
						КонецЕсли;
					Иначе
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьОбщуюНастройку("СОБЫТИЯ", "ВыгрузкаНомераРеализации")=Истина Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
			Если ЗначениеЗаполнено(Источник.ЗаказКлиента) Тогда
				Если ТипЗнч(Источник.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					Если ПроверитьСклад(Источник.ЗаказКлиента.Склад) Тогда
						Если Не Источник.ЗаказКлиента.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
							ПроверитьРеализацию(Источник);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

КонецПроцедуры

Процедура ПроверитьРеализацию(Реал)
	Результат = "R_" + Реал.ЗаказКлиента.Номер + "_" + СтрЗаменить(Строка(Год(Реал.ЗаказКлиента.Дата)), Символы.НПП, "");
	
	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("ИмяПоля");
	ОписаниеПолей.Колонки.Добавить("ТипПоля");
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "RecordId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "dbo.ImpOutputOrdersInspectedFromWMS");
	ОписаниеТаблицы.Вставить("Поля", ОписаниеПолей);

	Фильтры = ИнициализироватьФильтрПолей();
	НС = Фильтры.Добавить();
	НС.ИмяПоля = "Docid";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	НС.ЗначениеПоля = Результат;
	
	НС = Фильтры.Добавить();
	НС.ИмяПоля = "RealizN";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	НС.ЗначениеПоля = "";
	
	Список = ПолучитьТаблицуИзSql(ОписаниеТаблицы, Фильтры);
	Если Список.Количество() > 0 Тогда
		Списокsql = Новый СписокЗначений;
		Для Каждого СтрСписок Из Список Цикл

			Списокsql.Добавить("update dbo.ImpOutputOrdersInspectedFromWMS set RealizN = '" + Реал.Номер + "', status = 7 where RecordId = " + СтрЗаменить(СтрЗаменить(СтрСписок.RecordId, " ", ""), Символы.НПП, ""));
			
		КонецЦикла;
		
		Если Списокsql.Количество() > 0 Тогда
			ЗаписатьСтруктуруБД(Списокsql);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ОбъектЕстьВОчереди(Сс)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.Объект
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Сс);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

//ТЕСТЫ
Процедура ТестЗагрузкиСтатусов(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
	СсылкаНаОбъект = Неопределено;
РазложениеНомераВозврат = _ПолучитьМассивНомера(ЗначениеПолейОбъекта.ДокументСобытия);	
Если РазложениеНомераВозврат[0] = "R" Тогда
	СсылкаНаОбъект = Документы.ЗаказКлиента.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
	Если СсылкаНаОбъект = Неопределено ИЛИ СсылкаНаОбъект = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
		СсылкаНаОбъект = Неопределено;	
	КонецЕсли;
КонецЕсли;
Если РазложениеНомераВозврат[0] = "P" Тогда
	СсылкаНаОбъект = Документы.ЗаказПоставщику.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
	Если СсылкаНаОбъект = Неопределено ИЛИ СсылкаНаОбъект = Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
		СсылкаНаОбъект = Неопределено;	
	КонецЕсли;
КонецЕсли;
Если РазложениеНомераВозврат[0] = "M" Тогда
	СсылкаНаОбъект = Документы.ПеремещениеТоваров.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
	Если СсылкаНаОбъект = Неопределено ИЛИ СсылкаНаОбъект = Документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
		СсылкаНаОбъект = Неопределено;	
	КонецЕсли;
КонецЕсли;
Если РазложениеНомераВозврат[0] = "Q" Тогда
	СсылкаНаОбъект = Документы.ВозвратТоваровОтКлиента.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
	Если СсылкаНаОбъект = Неопределено ИЛИ СсылкаНаОбъект = Документы.ВозвратТоваровОтКлиента.ПустаяСсылка() Тогда
		СсылкаНаОбъект = Неопределено;	
	КонецЕсли;
КонецЕсли;
Если РазложениеНомераВозврат[0] = "V" Тогда
	СсылкаНаОбъект = Документы.ВозвратТоваровПоставщику.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
	Если СсылкаНаОбъект = Неопределено ИЛИ СсылкаНаОбъект = Документы.ВозвратТоваровПоставщику.ПустаяСсылка() Тогда
		СсылкаНаОбъект = Неопределено;	
	КонецЕсли;
КонецЕсли;

Если СсылкаНаОбъект = Неопределено Тогда
	ДобавитьОшибку(ЗначениеПолейОбъекта.ДокументСобытия, "Загрузка статусов: Документ не найден.");
	ПроизошлаИсключительнаяСитуация = Истина;
Иначе	
	СобытияСтрока = Лев(ЗначениеПолейОбъекта.ОписаниеСобытия, 100);
	
	Попытка
		НачатьТранзакцию();
		
		НЗ = РегистрыСведений.Infor_ИсторияСтатусовВМС.СоздатьНаборЗаписей();
		НЗ.Отбор.Объект.Установить(СсылкаНаОбъект);
		НЗ.Отбор.СтатусОбъекта.Установить(СобытияСтрока);
		НЗ.Отбор.ДатаИзменения.Установить(ЗначениеПолейОбъекта.ДатаСобытия);
		
		НЗ.Прочитать();
		НЗ.Очистить();
		
		НС = НЗ.Добавить();
		НС.Объект = СсылкаНаОбъект;
		НС.СтатусОбъекта = СобытияСтрока;
		НС.ДатаИзменения = ЗначениеПолейОбъекта.ДатаСобытия;
		
		НЗ.Записать(Истина);
		
		Если СокрЛП(СобытияСтрока) = "Заказ удалён!" Тогда
			НЗ = РегистрыСведений.Infor_ОчередьВыгрузки.СоздатьНаборЗаписей();
			НЗ.Отбор.Объект.Установить(СсылкаНаОбъект);
			
			НЗ.Прочитать();
			НЗ.Очистить();
			
			НЗ.Записать(Истина);
		КонецЕсли;
		
		
		Склад = ВернутьСкладНовый(ЗначениеПолейОбъекта.СкладВМС, "ZOK");
		//ДобавитьОшибку("TEST" + УникальностьЗагрузки, Склад);

		
		НЗ = РегистрыСведений.Infor_СтатусыВМС.СоздатьНаборЗаписей();
		НЗ.Отбор.Объект.Установить(СсылкаНаОбъект);
		НЗ.Отбор.Склад.Установить(Склад);
		НЗ.Прочитать();
		
		КолВо = 0;
		ФлагПропуститьВсе = ложь;
		
		Если НЗ.Количество() > 0 Тогда
			
			Если НЗ[0].СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ОтгрузкаЗавершена Тогда
				ФлагПропуститьВсе = истина;
			КонецЕсли;
			
			КолВо = НЗ[0].Количество;
		КонецЕсли;
		
		Если не ФлагПропуститьВсе  Тогда
			НЗ.Очистить();
			
			НС = НЗ.Добавить();
			НС.Объект = СсылкаНаОбъект;
			НС.Склад = Склад;
			НС.Количество = КолВо;
			
			Если СокрЛП(СобытияСтрока) = "Заказ удалён!" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЗаказУдалён КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Закрыт с проверкой" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЗакрытСПроверкой КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Закрыто" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Закрыто КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Идет приемка" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ИдетПриемка КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Новый" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Новый КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Отменено" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Отменено КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Получено" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Получено КонецЕсли;
			
			Если СокрЛП(СобытияСтрока) = "Не запущено" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.СозданоВнешне КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Не зарезервировано" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.СозданоВнешне КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Пустой заказ" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.СозданоВнешне КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Создано внешне" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.СозданоВнешне КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Создано внутренне" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.СозданоВнешне КонецЕсли;
			
			Если СокрЛП(СобытияСтрока) = "Выпущено" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Зарезервировано" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Отбор завершен" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Часть выпущена" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Часть зарезервирована" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Часть отобрана" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Упаковывается" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ЧастьОтобрана КонецЕсли;
			
			Если СокрЛП(СобытияСтрока) = "Упаковка завершена" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.УпаковкаЗавершена КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Часть отгружена" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.УпаковкаЗавершена КонецЕсли;
			
			Если СокрЛП(СобытияСтрока) = "Отгрузка завершена" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.ОтгрузкаЗавершена КонецЕсли;
			
			Если СокрЛП(СобытияСтрока) = "В состоянии загрузки" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Загружен КонецЕсли;
			Если СокрЛП(СобытияСтрока) = "Загружен" Тогда НС.СтатусЗаказа = Перечисления.Infor_СтатусыВМС.Загружен КонецЕсли;
			
			НЗ.Записать(Истина);
		КонецЕсли;	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
		ПропуститьЗагрузку = Истина;
	КонецПопытки;	
КонецЕсли;
	
	
КонецПроцедуры

Процедура Заполнить(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
	Попытка
		Если Не ПропуститьЗагрузку Тогда
			Если Не ДопИнфа = Неопределено Тогда
				Если ТипЗнч(ДопИнфа) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ОбъектЗаказ = ДопИнфа.ПолучитьОбъект();
					ОбъектЗаказ.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("inforLoad", Истина);
					ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;

				Если ТипЗнч(ДопИнфа) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
					ОбъектЗаказ = ДопИнфа.ПолучитьОбъект();
					ОбъектЗаказ.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
					ОбъектЗаказ.ДополнительныеСвойства.Вставить("inforLoad", Истина);
					ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
		ПроизошлаИсключительнаяСитуация = Истина;
	КонецПопытки;
КонецПроцедуры

Процедура Заполнить1(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
	РазложениеНомера = _ПолучитьМассивНомера(ЗначениеПолейОбъекта.НомерДокумента);

	Если РазложениеНомера = Неопределено Тогда
		ПроизошлаИсключительнаяСитуация = Истина;
		ДобавитьОшибку(УникальностьЗагрузки, "Ошибка при получении номера документа " + ЗначениеПолейОбъекта.НомерДокумента);
	Иначе
		Если РазложениеНомера[0] = "R" Тогда
			МассивОбъектов = Новый Массив;
			
			СсылкаНаЗаказКлиента	= Документы.ЗаказКлиента.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
			Если СсылкаНаЗаказКлиента = Неопределено ИЛИ СсылкаНаЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
			Иначе
				ДопИнфа = СсылкаНаЗаказКлиента;
				Реал = _ПолучитьПодчиненныйДокумент(СсылкаНаЗаказКлиента, "РеализацияТоваровУслуг", "ЗаказКлиента");
				//ТТ проведение реалки при загрузке РО
				Если ЗначениеЗаполнено(Реал) И НЕ Реал.Проведен Тогда
					ОбРеал = Реал.ПолучитьОбъект();
					ОбРеал.Дата = ТекущаяДата(); 
					ОбРеал.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
				
				Если ВложенныеТаблицыОбъекта.Товары.Количество() > 0 Тогда
					Если Не Реал = Неопределено Тогда
						
						Объект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
						Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
						Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
						Объект.Склад = Реал.Склад;
						Объект.Получатель = Реал.Партнер;
						Объект.Дата = ТекущаяДата();
						Объект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
						Объект.ДатаОтгрузки = Объект.Дата;
						Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
						
						Для Каждого СтрТовара Из Реал.Товары Цикл
							Если Не СтрТовара.Номенклатура.Артикул = "Доставка" Тогда							
								НСР = Объект.ТоварыПоРаспоряжениям.Добавить();
								НСР.Номенклатура = СтрТовара.Номенклатура;
								НСР.Распоряжение = СсылкаНаЗаказКлиента;
								НСР.Количество = СтрТовара.Количество;
								НСР.Назначение = ПолучитьНазначение(СсылкаНаЗаказКлиента);
									
								НСО = Объект.ОтгружаемыеТовары.Добавить();
								НСО.Номенклатура = СтрТовара.Номенклатура;
								НСО.Количество = СтрТовара.Количество;
								НСО.Упаковка = СтрТовара.Упаковка;
								НСО.КоличествоУпаковок = СтрТовара.КоличествоУпаковок;
								НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
							КонецЕсли;
						КонецЦикла;
						
						Попытка
							НачатьТранзакцию();
							Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
							Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
							Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("При создании ""Расходного ордера на товары"" на основании %1 и распоряжения %2, получили ошибку %3. Модуль: %4{%5}.", Реал, СсылкаНаЗаказКлиента, ИнформацияОбОшибке.Причина.Описание, ИнформацияОбОшибке.ИмяМодуля, ИнформацияОбОшибке.НомерСтроки);
							ДобавитьОшибку(УникальностьЗагрузки, ТекстОшибки);
							ПроизошлаИсключительнаяСитуация = Истина;
						КонецПопытки;
					Иначе
						ПропуститьЗагрузку = Истина;
					КонецЕсли;
				Иначе
					ОбъектЗаказ = СсылкаНаЗаказКлиента.ПолучитьОбъект();
					Для Каждого СтрТоваров Из ОбъектЗаказ.Товары Цикл						
						СтрТоваров.Отменено = Истина;
						СтрТоваров.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("Отсутствие товара на складе");					
					КонецЦикла;
					
					ОбъектЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
					
					//ТТ 
					ОбъектЗаказ.ЭтапыГрафикаОплаты.Очистить();
					
					Попытка
						НачатьТранзакцию();
						ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
						ПроизошлаИсключительнаяСитуация = Истина;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли РазложениеНомера[0] = "M" Тогда
			МассивОбъектов = Новый Массив;
			
			СсылкаНаЗаказКлиента = Документы.ПеремещениеТоваров.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
			Если СсылкаНаЗаказКлиента = Неопределено ИЛИ СсылкаНаЗаказКлиента = Документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
			Иначе
				ДопИнфа = СсылкаНаЗаказКлиента;
				
				Попытка
					НачатьТранзакцию();
				
					ОбъектПерем = СсылкаНаЗаказКлиента.ПолучитьОбъект();
					ОбъектПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
					//ОбъектПерем.Товары.Очистить(); //ТТ убрал
					
					КопияТовары = ВложенныеТаблицыОбъекта.Товары.Скопировать();
					КопияТовары.Свернуть("Товар", "Количество");
					
					//ТТ
					ОбТовары = ОбъектПерем.Товары.Выгрузить();
					ОбТовары.Колонки.Добавить("Обработан");
					
					Для Каждого Товар Из КопияТовары Цикл
						НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(Товар.Товар);
						ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
						КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
						Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
							Количество = Товар.Количество;
							//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
							//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
							//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
							//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
							КоличествоВ = Количество * ПлощадьЕдиницы;
						Иначе
							КоличествоВ = Товар.Количество;
						КонецЕсли;
						
						//ТТ закоментил. Логика поменялась в связи с вводом в процесс документов Заказы на перемещения
						//НС = ОбъектПерем.Товары.Добавить();
						//НС.Номенклатура = НоменклатураВ;
						//НС.Упаковка = НС.Номенклатура.ЕдиницаИзмерения;
						//НС.КоличествоУпаковок = КоличествоВ;
						//НС.Количество = КоличествоВ;
						
						//ТТ
						НашелСтроки = ОбТовары.НайтиСтроки(Новый Структура("Номенклатура",НоменклатураВ));
						Если НашелСтроки.Количество() = 1 Тогда
							нСтрока = НашелСтроки.Получить(0);
							нСтрока.Количество = КоличествоВ;
							нСтрока.КоличествоУпаковок = КоличествоВ;
							нСтрока.Обработан = Истина;
						Иначе
							н=0;
							Пока КоличествоВ > 0 и НашелСтроки.Количество() > н Цикл
								нСтрока = НашелСтроки.Получить(н);
								Если нСтрока.Количество > КоличествоВ Тогда
									нСтрока.Количество = КоличествоВ;
									нСтрока.КоличествоУпаковок = КоличествоВ;
								КонецЕсли;
								нСтрока.Обработан = Истина;
								н = н +1;
								КоличествоВ = КоличествоВ - нСтрока.Количество;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					//ТТ
					ОбъектПерем.Товары.Загрузить(ОбТовары.Скопировать(Новый Структура("Обработан",Истина)));
					
					ОбъектПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
					Объект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
					Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
					Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
					Объект.Склад = СсылкаНаЗаказКлиента.СкладОтправитель;
					Объект.Получатель = СсылкаНаЗаказКлиента.СкладПолучатель;
					Объект.Дата = ТекущаяДата();
					Объект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
					Объект.ДатаОтгрузки = Объект.Дата;
					Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					
					Для Каждого СтрокаТовара Из ОбТовары Цикл
						Если НЕ СтрокаТовара.Обработан = Истина Тогда Продолжить; КонецЕсли;
						//НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
						//ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
						//КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
						//Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
						//	Количество = СтрокаТовара.Количество;
						//	//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
						//	//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
						//	//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
						//	//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
						//	КоличествоВ = Количество * ПлощадьЕдиницы;
						//Иначе
						//	КоличествоВ = СтрокаТовара.Количество;
						//КонецЕсли;
							
						НСР = Объект.ТоварыПоРаспоряжениям.Добавить();
						НСР.Номенклатура = СтрокаТовара.Номенклатура;
						НСР.Распоряжение = ?(ЗначениеЗаполнено(СтрокаТовара.ЗаказНаПеремещение),СтрокаТовара.ЗаказНаПеремещение,СсылкаНаЗаказКлиента);
						НСР.Количество = СтрокаТовара.Количество;
						
						НСО = Объект.ОтгружаемыеТовары.Добавить();
						НСО.Номенклатура = СтрокаТовара.Номенклатура;
						НСО.Количество = СтрокаТовара.Количество;
						НСО.Упаковка = СтрокаТовара.Номенклатура.ЕдиницаИзмерения;
						НСО.КоличествоУпаковок = СтрокаТовара.Количество;
						НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					КонецЦикла;
					
					Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
					Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
					Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
					ПроизошлаИсключительнаяСитуация = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли РазложениеНомера[0] = "V"	Тогда
			МассивОбъектов = Новый Массив;
			
			СсылкаНаЗаказКлиента	= Документы.ВозвратТоваровПоставщику.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
			Если СсылкаНаЗаказКлиента = Неопределено ИЛИ СсылкаНаЗаказКлиента = Документы.ВозвратТоваровПоставщику.ПустаяСсылка() Тогда
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
			Иначе
				ДопИнфа = СсылкаНаЗаказКлиента;
				Реал = СсылкаНаЗаказКлиента;
				Если ВложенныеТаблицыОбъекта.Товары.Количество() > 0 Тогда
					Объект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
					Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
					Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров;
					Объект.Склад = Реал.Склад;
					Объект.Получатель = Реал.Партнер;
					Объект.Дата = ТекущаяДата();
					Объект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
					Объект.ДатаОтгрузки = Объект.Дата;
					Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					
					Для Каждого СтрТовара Из Реал.Товары Цикл
						Если Не СтрТовара.Номенклатура.Артикул = "Доставка" Тогда							
							НСР = Объект.ТоварыПоРаспоряжениям.Добавить();
							НСР.Номенклатура = СтрТовара.Номенклатура;
							НСР.Распоряжение = СсылкаНаЗаказКлиента;
							НСР.Количество = СтрТовара.Количество;
								
							НСО = Объект.ОтгружаемыеТовары.Добавить();
							НСО.Номенклатура = СтрТовара.Номенклатура;
							НСО.Количество = СтрТовара.Количество;
							НСО.Упаковка = СтрТовара.Упаковка;
							НСО.КоличествоУпаковок = СтрТовара.КоличествоУпаковок;
							НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
						КонецЕсли;
					КонецЦикла;
					
					Попытка
						НачатьТранзакцию();
						Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
						Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
						Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("При создании ""Расходного ордера на товары"" на основании %1 и распоряжения %2, получили ошибку %3. Модуль: %4{%5}.", 
																							Реал, СсылкаНаЗаказКлиента, 
																							ИнформацияОбОшибке.Причина.Описание, 
																							ИнформацияОбОшибке.ИмяМодуля, 
																							ИнформацияОбОшибке.НомерСтроки);
						ДобавитьОшибку(УникальностьЗагрузки, ТекстОшибки);
						ПроизошлаИсключительнаяСитуация = Истина;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		Иначе	
			ПроизошлаИсключительнаяСитуация = Истина;
			ДобавитьОшибку(УникальностьЗагрузки, "Тип документа не определен " + ЗначениеПолейОбъекта.НомерДокумента);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Заполнить2(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
	
	Если СтрНайти(ЗначениеПолейОбъекта.НомерДокумента, "WMS") > 0 Тогда
		
		Если ЗначениеПолейОбъекта.ТипДокумента = "121" Тогда
		
			Попытка
				НачатьТранзакцию();
			
				СкладОт = Справочники.Склады.НайтиПоНаименованию("склад Альфа Логистик");
				СкладДо = Справочники.Склады.НайтиПоНаименованию("Альфа Логистик WMS");
				
				ТабТовар = Новый ТаблицаЗначений;
				ТабТовар.Колонки.Добавить("Номенклатура");
				ТабТовар.Колонки.Добавить("Количество");
				
				Для Каждого СтрТовара Из ВложенныеТаблицыОбъекта.Товары Цикл
				
					Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрТовара.Товар);
					Если Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
						ДобавитьОшибку(СтрТовара.Товар, "Товар не найден");
					КонецЕсли;				
					
					ПлощадьЕдиницы = Номенклатура.ПлощадьЕдиницы;
					КолвоВСтандУпаковке = Номенклатура.КолвоВСтандУпаковке;
					Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
						Количество = СтрТовара.Количество;
						//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
						//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
						//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
						//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
						КоличествоВ = Количество * ПлощадьЕдиницы;
					Иначе
						КоличествоВ = СтрТовара.Количество;
					КонецЕсли;
														
					НС = ТабТовар.Добавить();
					НС.Номенклатура = Номенклатура; 
					НС.Количество = КоличествоВ;				
									
				КонецЦикла;
				
				ТабТовар.Свернуть("Номенклатура", "Количество");
				
				ОбПерем = СоздатьПеремещение(ТабТовар, СкладОт, СкладДо);
				ОбПерем.Комментарий = "Первичная загрузка остатков " + УникальностьЗагрузки;
				ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
				ОбПерем.Записать(РежимЗаписиДокумента.Запись);
				
				ДопИнфа = Неопределено;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
				ПроизошлаИсключительнаяСитуация = Истина;
			КонецПопытки;

		Иначе
			
			Если ЗначениеЗаполнено(ЗначениеПолейОбъекта.НомерДокументаВозврат) Тогда 
				РазложениеНомераВозврат = _ПолучитьМассивНомера(ЗначениеПолейОбъекта.НомерДокументаВозврат);	
				Если РазложениеНомераВозврат[0] = "R" Тогда
					СсылкаНаЗаказВозврат = Документы.ЗаказКлиента.НайтиПоНомеру(РазложениеНомераВозврат[2], Дата(РазложениеНомераВозврат[1], 1, 1));
					Если СсылкаНаЗаказВозврат = Неопределено ИЛИ СсылкаНаЗаказВозврат = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
						ПроизошлаИсключительнаяСитуация = Истина;
						ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
					Иначе
						СсылкаНаРеализациюВозврат = _ПолучитьПодчиненныйДокумент(СсылкаНаЗаказВозврат, "РеализацияТоваровУслуг", "ЗаказКлиента");
						Если СсылкаНаРеализациюВозврат = Неопределено Тогда
							ПроизошлаИсключительнаяСитуация = Истина;
							ДобавитьОшибку(УникальностьЗагрузки, "Документ реализации не найден " + ЗначениеПолейОбъекта.НомерДокумента);
						Иначе
							Попытка
								НачатьТранзакцию();
							
								ОбВозврат = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
								ОбВозврат.ДополнительныеСвойства.Вставить("inforLoad", Истина);
								ОбВозврат.Заполнить(СсылкаНаРеализациюВозврат);
								ОбВозврат.Дата = ТекущаяДата();
								
								КопияТоваров = ОбВозврат.Товары.Выгрузить();
								ОбВозврат.Товары.Очистить();
								
								КопияТовары = ВложенныеТаблицыОбъекта.Товары.Скопировать();
								КопияТовары.Свернуть("Товар", "Количество");
								
								СуммаДок = 0;
								Для Каждого СтрокаТовара Из КопияТовары Цикл 
									НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
									ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
									КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
									Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
										Количество = СтрокаТовара.Количество;
										//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
										//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
										//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
										//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
										КоличествоВ = Количество * ПлощадьЕдиницы;
									Иначе
										КоличествоВ = СтрокаТовара.Количество;
									КонецЕсли;
									
									Рез = КопияТоваров.Найти(НоменклатураВ, "Номенклатура");
									
									НС = ОбВозврат.Товары.Добавить();
									ЗаполнитьЗначенияСвойств(НС, Рез);

									НС.Количество = КоличествоВ;
									НС.КоличествоУпаковок = КоличествоВ;

									НС.Сумма = Рез.Сумма / Рез.Количество * КоличествоВ;
									НС.СуммаНДС = Рез.СуммаНДС / Рез.Количество * КоличествоВ;
									НС.СуммаСНДС = Рез.СуммаСНДС / Рез.Количество * КоличествоВ;
									
									СуммаДок = СуммаДок + НС.СуммаСНДС;
								КонецЦикла; 
								ОбВозврат.СуммаДокумента = СуммаДок;
								
								Для Каждого СтрокаРасшифровкаПлатежа Из ОбВозврат.РасшифровкаПлатежа Цикл
									СтрокаРасшифровкаПлатежа.Сумма = СуммаДок;
									СтрокаРасшифровкаПлатежа.СуммаВзаиморасчетов = СуммаДок;
								КонецЦикла;
							
							    ОбВозврат.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
								
								ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
								ОбПрОрд.Заполнить(ОбВозврат.Ссылка);
								ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
								ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
								ОбПрОрд.Дата = ТекущаяДата();
							
							    ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
								ДопИнфа = Неопределено;
								
								ЗафиксироватьТранзакцию();
							Исключение
								ОтменитьТранзакцию();
								ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
								ПроизошлаИсключительнаяСитуация = Истина;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ПроизошлаИсключительнаяСитуация = Истина;
					ДобавитьОшибку(УникальностьЗагрузки, "Тип документа не определен " + ЗначениеПолейОбъекта.НомерДокумента);
				КонецЕсли;
			Иначе
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Тип документа не определен " + ЗначениеПолейОбъекта.НомерДокумента);
			КонецЕсли;
		КонецЕсли;
	Иначе	

		РазложениеНомера = _ПолучитьМассивНомера(ЗначениеПолейОбъекта.НомерДокумента);

		Если РазложениеНомера = Неопределено Тогда
			ПроизошлаИсключительнаяСитуация = Истина;
			ДобавитьОшибку(УникальностьЗагрузки, "Ошибка при получении номера документа " + ЗначениеПолейОбъекта.НомерДокумента);
		Иначе
			Если РазложениеНомера[0] = "P" Тогда
				МассивОбъектов = Новый Массив;
				
				СсылкаНаЗаказПоставщика	= Документы.ЗаказПоставщику.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
				Если СсылкаНаЗаказПоставщика = Неопределено ИЛИ СсылкаНаЗаказПоставщика = Документы.ЗаказПоставщику.ПустаяСсылка() Тогда
					ПроизошлаИсключительнаяСитуация = Истина;
					ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
				Иначе
						
					ТабРасхождений = Новый ТаблицаЗначений;
					ТабРасхождений.Колонки.Добавить("Номенклатура");
					ТабРасхождений.Колонки.Добавить("Количество");
					ТабРасхождений.Колонки.Добавить("Зона");
					
					ТабМинусов = Новый ТаблицаЗначений;
					ТабМинусов.Колонки.Добавить("Номенклатура");
					ТабМинусов.Колонки.Добавить("Количество");
					ТабМинусов.Колонки.Добавить("КоличествоВМС");
					
					КопияТовары = ВложенныеТаблицыОбъекта.Товары.Скопировать();
					КопияТовары.Свернуть("Товар", "Количество");
									
					Для Каждого СтрокаТовара Из ВложенныеТаблицыОбъекта.Товары Цикл
						НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
						ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
						КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
						Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
							Количество = СтрокаТовара.Количество;
							//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
							//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
							//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
							//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
							КоличествоВ = Количество * ПлощадьЕдиницы;
						Иначе
							КоличествоВ = СтрокаТовара.Количество;
						КонецЕсли;
						
						НС = ТабРасхождений.Добавить();
						НС.Номенклатура = НоменклатураВ;
						НС.Количество = КоличествоВ;
						НС.Зона = СтрокаТовара.Зона;
						
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = НоменклатураВ;
						НС.Количество = 0;
						НС.КоличествоВМС = КоличествоВ;
					КонецЦикла;
					
					Для Каждого СтрокаТовара Из СсылкаНаЗаказПоставщика.Товары Цикл 
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = СтрокаТовара.Номенклатура;
						НС.Количество = СтрокаТовара.Количество;
						НС.КоличествоВМС = 0;
					КонецЦикла;
										
					Попытка
						НачатьТранзакцию();
						
						ЖДата = ТекущаяДата() - (24*60*60);
						Если СсылкаНаЗаказПоставщика.ЖелаемаяДатаПоступления > ЖДата Тогда
							ОбъектЗаказ = СсылкаНаЗаказПоставщика.ПолучитьОбъект();
							ОбъектЗаказ.ЖелаемаяДатаПоступления = ЖДата;
							ОбъектЗаказ.ПоступлениеОднойДатой = Истина;
							ОбъектЗаказ.ДатаПоступления = ОбъектЗаказ.ЖелаемаяДатаПоступления;
							Для Каждого ТоварСтрока Из ОбъектЗаказ.Товары Цикл
								ТоварСтрока.ДатаПоступления = ОбъектЗаказ.ДатаПоступления;
							КонецЦикла;
							ОбъектЗаказ.ДополнительныеСвойства.Вставить("inforLoad", Истина);
							ОбъектЗаказ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
																	
						ДопИнфа = СсылкаНаЗаказПоставщика;
						Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
						Объект.Заполнить(СсылкаНаЗаказПоставщика);
						Объект.Дата = ТекущаяДата();
						Объект.ЗакрыватьГрафикПоступления = Истина;
						Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
						Объект.Комментарий = Строка(СсылкаНаЗаказПоставщика);
						
						Если Объект.Товары.Количество() = 0 Тогда
							ОтменитьТранзакцию();
							ДобавитьОшибку(УникальностьЗагрузки, "Внимание пустой приходный ордер");
							ПропуститьЗагрузку = Истина;
							Возврат;
						КонецЕсли;
						
						Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
																	
						//Обработка расхождений
						ТабРасхождений.Свернуть("Номенклатура, Зона", "Количество");
						ТабРасхождений.Сортировать("Зона, Номенклатура");
							
						ТекСклад = Справочники.Склады.ПустаяСсылка();
						ТабТовар = Новый ТаблицаЗначений;
						ТабТовар.Колонки.Добавить("Номенклатура");
						ТабТовар.Колонки.Добавить("Количество");
						Для Каждого СтрТабРасхождений Из ТабРасхождений Цикл
							Склад = ВернутьСкладНовый1C(Объект.Склад, СтрТабРасхождений.Зона);
							Если Склад <> ТекСклад Тогда
								Если ТабТовар.Количество() > 0 И Объект.Склад <> ТекСклад Тогда
									ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, ТекСклад);
									ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
									ОбПерем.Дата = Объект.Дата + 1;
									ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
									ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
									
									ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
									ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
									ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
									ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
									ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
									ОбРасхОрд.Дата = ОбПерем.Дата + 1;
									ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
									ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
									ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
									
									Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
											
										НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
										НСР.Номенклатура = СтрокаТовара.Номенклатура;
										НСР.Распоряжение = ОбПерем.Ссылка;
										НСР.Количество = СтрокаТовара.Количество;
										
										НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
										НСО.Номенклатура = СтрокаТовара.Номенклатура;
										НСО.Количество =  СтрокаТовара.Количество;
										НСО.Упаковка = СтрокаТовара.Упаковка;
										НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
										НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
									КонецЦикла;	
									ОбРасхОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
									ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
									ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
									ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
									
									ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
									ОбПрОрд.Заполнить(ОбПерем.Ссылка);
									ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
									ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
									ОбПрОрд.Дата = ОбПерем.Дата + 2;
							        ОбПрОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							        ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

								КонецЕсли;
								ТекСклад = Склад;
								ТабТовар.Очистить();
							КонецЕсли;
							
							НС = ТабТовар.Добавить();
							НС.Номенклатура = СтрТабРасхождений.Номенклатура;
							НС.Количество = СтрТабРасхождений.Количество;
						КонецЦикла;
						
						Если ТабТовар.Количество() > 0 И Объект.Склад <> ТекСклад Тогда
							ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, Склад);
							ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбПерем.Дата = Объект.Дата + 1;
							ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
							ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
							ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
							ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
							ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
							ОбРасхОрд.Дата = ОбПерем.Дата + 1;
							ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
							ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
							ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
							
							Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
									
								НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
								НСР.Номенклатура = СтрокаТовара.Номенклатура;
								НСР.Распоряжение = ОбПерем.Ссылка;
								НСР.Количество = СтрокаТовара.Количество;
										
								НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
								НСО.Номенклатура = СтрокаТовара.Номенклатура;
								НСО.Количество =  СтрокаТовара.Количество;
								НСО.Упаковка = СтрокаТовара.Упаковка;
								НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
								НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
							КонецЦикла;
							ОбРасхОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							ОбПрОрд.Заполнить(ОбПерем.Ссылка);
							ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							ОбПрОрд.Дата = ОбПерем.Дата + 2;
							ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
							ОбПрОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
					        ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						ТабМинусов.Свернуть("Номенклатура", "Количество, КоличествоВМС");
						ТабТовар.Очистить();
						Для Каждого СтрТабМинусов Из ТабМинусов Цикл
						 	Если СтрТабМинусов.Количество > СтрТабМинусов.КоличествоВМС Тогда
								НС = ТабТовар.Добавить();
								НС.Номенклатура = СтрТабМинусов.Номенклатура;
								НС.Количество = СтрТабМинусов.Количество - СтрТабМинусов.КоличествоВМС;
							КонецЕсли;
						КонецЦикла;
						
						Если ТабТовар.Количество() > 0 Тогда
							ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, ВернутьСкладПотерянногоТовараНовый(ЗначениеПолейОбъекта.СкладВМС));
							ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбПерем.Дата = Объект.Дата + 1;
							//ОбПерем.Записать(РежимЗаписиДокумента.Запись);
							ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
							ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
							ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
							ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
							ОбРасхОрд.Дата = ОбПерем.Дата + 1;
							ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
							ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
							ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
							
							Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
									
								НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
								НСР.Номенклатура = СтрокаТовара.Номенклатура;
								НСР.Распоряжение = ОбПерем.Ссылка;
								НСР.Количество = СтрокаТовара.Количество;
										
								НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
								НСО.Номенклатура = СтрокаТовара.Номенклатура;
								НСО.Количество =  СтрокаТовара.Количество;
								НСО.Упаковка = СтрокаТовара.Упаковка;
								НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
								НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
							КонецЦикла;
							ОбРасхОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							ОбПрОрд.Заполнить(ОбПерем.Ссылка);
							ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							ОбПрОрд.Дата = ОбПерем.Дата + 2;
							ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
							ОбПрОрд.Комментарий = Строка(СсылкаНаЗаказПоставщика);
						    ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
						ПроизошлаИсключительнаяСитуация = Истина;
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли РазложениеНомера[0] = "M" Тогда
				МассивОбъектов = Новый Массив;
				
				СсылкаНаЗаказПоставщика	= Документы.ПеремещениеТоваров.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
				Если СсылкаНаЗаказПоставщика = Неопределено ИЛИ СсылкаНаЗаказПоставщика = Документы.ПеремещениеТоваров.ПустаяСсылка() Тогда
					ПроизошлаИсключительнаяСитуация = Истина;
					ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
				Иначе
					ТабРасхождений = Новый ТаблицаЗначений;
					ТабРасхождений.Колонки.Добавить("Номенклатура");
					ТабРасхождений.Колонки.Добавить("Количество");
					ТабРасхождений.Колонки.Добавить("Зона");
					
					ТабМинусов = Новый ТаблицаЗначений;
					ТабМинусов.Колонки.Добавить("Номенклатура");
					ТабМинусов.Колонки.Добавить("Количество");
					ТабМинусов.Колонки.Добавить("КоличествоВМС");
									
					Для Каждого СтрокаТовара Из ВложенныеТаблицыОбъекта.Товары Цикл
						НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
						ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
						КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
						Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
							Количество = СтрокаТовара.Количество;
							//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
							//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
							//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
							//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
							КоличествоВ = Количество * ПлощадьЕдиницы;
						Иначе
							КоличествоВ = СтрокаТовара.Количество;
						КонецЕсли;
						
						НС = ТабРасхождений.Добавить();
						НС.Номенклатура = НоменклатураВ;
						НС.Количество = КоличествоВ;
						НС.Зона = СтрокаТовара.Зона;
						
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = НоменклатураВ;
						НС.Количество = 0;
						НС.КоличествоВМС = КоличествоВ;
					КонецЦикла;
					
					Для Каждого СтрокаТовара Из СсылкаНаЗаказПоставщика.Товары Цикл 
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = СтрокаТовара.Номенклатура;
						НС.Количество = СтрокаТовара.Количество;
						НС.КоличествоВМС = 0;
					КонецЦикла;
					
					Попытка
						НачатьТранзакцию();
						ТЗТовары = СсылкаНаЗаказПоставщика.Товары.Выгрузить();
						ТЗТовары.Свернуть("ЗаказНаПеремещение");
						Если СсылкаНаЗаказПоставщика.ПеремещениеПоЗаказам Тогда
							Для каждого ТекСсылка из ТЗТовары Цикл
								Если НЕ ЗначениеЗаполнено(ТекСсылка.ЗаказНаПеремещение) Тогда Продолжить; КонецЕсли;
								ДопИнфа = СсылкаНаЗаказПоставщика;
								Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
								Объект.Заполнить(ТекСсылка.ЗаказНаПеремещение);
								Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
								Объект.Дата = ТекущаяДата();
								Объект.ЗакрыватьГрафикПоступления = Истина;
								Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							КонецЦикла;
						Иначе
							ДопИнфа = СсылкаНаЗаказПоставщика;
							Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							Объект.Заполнить(СсылкаНаЗаказПоставщика);
							Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							Объект.Дата = ТекущаяДата();
							Объект.ЗакрыватьГрафикПоступления = Истина;
							Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						//Обработка расхождений
						ТабРасхождений.Свернуть("Номенклатура, Зона", "Количество");
						ТабРасхождений.Сортировать("Зона, Номенклатура");
							
						ТекСклад = Справочники.Склады.ПустаяСсылка();
						ТабТовар = Новый ТаблицаЗначений;
						ТабТовар.Колонки.Добавить("Номенклатура");
						ТабТовар.Колонки.Добавить("Количество");
						Для Каждого СтрТабРасхождений Из ТабРасхождений Цикл
							Склад = ВернутьСкладНовый1C(Объект.Склад, СтрТабРасхождений.Зона);
							Если Склад <> ТекСклад Тогда
								Если ТабТовар.Количество() > 0 И Объект.Склад <> ТекСклад Тогда
									ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, ТекСклад);
									ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
									ОбПерем.Дата = Объект.Дата + 1;
									ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
									ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
									
									ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
									ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
									ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
									ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
									ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
									ОбРасхОрд.Дата = ОбПерем.Дата + 1;
									ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
									ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
									ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
									
									Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
											
										НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
										НСР.Номенклатура = СтрокаТовара.Номенклатура;
										НСР.Распоряжение = ОбПерем.Ссылка;
										НСР.Количество = СтрокаТовара.Количество;
										
										НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
										НСО.Номенклатура = СтрокаТовара.Номенклатура;
										НСО.Количество =  СтрокаТовара.Количество;
										НСО.Упаковка = СтрокаТовара.Упаковка;
										НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
										НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
									КонецЦикла;						
									ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
								
									ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
									ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
									
									ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
									ОбПрОрд.Заполнить(ОбПерем.Ссылка);
									ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
									ОбПрОрд.Дата = ОбПерем.Дата + 2;
							        ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
							        ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

								КонецЕсли;
								ТекСклад = Склад;
								ТабТовар.Очистить();
							КонецЕсли;
							
							НС = ТабТовар.Добавить();
							НС.Номенклатура = СтрТабРасхождений.Номенклатура;
							НС.Количество = СтрТабРасхождений.Количество;
						КонецЦикла;
						
						Если ТабТовар.Количество() > 0 И Объект.Склад <> ТекСклад Тогда
							ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, Склад);
							ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбПерем.Дата = Объект.Дата + 1;
							ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
							ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
							ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
							ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
							ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
							ОбРасхОрд.Дата = ОбПерем.Дата + 1;
							ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
							ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
							ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
							
							Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
									
								НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
								НСР.Номенклатура = СтрокаТовара.Номенклатура;
								НСР.Распоряжение = ОбПерем.Ссылка;
								НСР.Количество = СтрокаТовара.Количество;
										
								НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
								НСО.Номенклатура = СтрокаТовара.Номенклатура;
								НСО.Количество =  СтрокаТовара.Количество;
								НСО.Упаковка = СтрокаТовара.Упаковка;
								НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
								НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
							КонецЦикла;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							ОбПрОрд.Заполнить(ОбПерем.Ссылка);
							ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							ОбПрОрд.Дата = ОбПерем.Дата + 2;
					        ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
					        ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						ТабМинусов.Свернуть("Номенклатура", "Количество, КоличествоВМС");
						ТабТовар.Очистить();
						Для Каждого СтрТабМинусов Из ТабМинусов Цикл
						 	Если СтрТабМинусов.Количество > СтрТабМинусов.КоличествоВМС Тогда
								НС = ТабТовар.Добавить();
								НС.Номенклатура = СтрТабМинусов.Номенклатура;
								НС.Количество = СтрТабМинусов.Количество - СтрТабМинусов.КоличествоВМС;
							КонецЕсли;
						КонецЦикла;
						
						Если Ложь Тогда //ТабТовар.Количество() > 0 Тогда             Данный метод никогда не работал
							ОбПерем = СоздатьПеремещение(ТабТовар, Объект.Склад, ВернутьСкладПотерянногоТовараНовый(ЗначениеПолейОбъекта.СкладВМС));
							ОбПерем.Комментарий = Строка(СсылкаНаЗаказПоставщика);
							ОбПерем.Дата = Объект.Дата + 1;
							ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
							ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
							ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
							ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
							ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
							ОбРасхОрд.Дата = ОбПерем.Дата + 1;
							ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
							ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
							ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
							
							Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
									
								НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
								НСР.Номенклатура = СтрокаТовара.Номенклатура;
								НСР.Распоряжение = ОбПерем.Ссылка;
								НСР.Количество = СтрокаТовара.Количество;
										
								НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
								НСО.Номенклатура = СтрокаТовара.Номенклатура;
								НСО.Количество =  СтрокаТовара.Количество;
								НСО.Упаковка = СтрокаТовара.Упаковка;
								НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
								НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
							КонецЦикла;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						
							ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
							ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							ОбПрОрд.Заполнить(ОбПерем.Ссылка);
							ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							ОбПрОрд.Дата = ОбПерем.Дата + 2;
					        ОбПрОрд.ЗакрыватьГрафикПоступления = Истина;
					        ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
						ПроизошлаИсключительнаяСитуация = Истина;
					КонецПопытки;
				КонецЕсли;
			ИначеЕсли РазложениеНомера[0] = "Q" Тогда	
			    МассивОбъектов = Новый Массив;
				
				СсылкаНаЗВозвратТоваровОтКлиента	= Документы.ВозвратТоваровОтКлиента.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
				Если СсылкаНаЗВозвратТоваровОтКлиента = Неопределено ИЛИ СсылкаНаЗВозвратТоваровОтКлиента = Документы.ВозвратТоваровОтКлиента.ПустаяСсылка() Тогда
					ПроизошлаИсключительнаяСитуация = Истина;
					ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
				Иначе
					//ТТ проведение возврата при загрузке ПО
					Если НЕ СсылкаНаЗВозвратТоваровОтКлиента.Проведен Тогда
						ОбВозврат = СсылкаНаЗВозвратТоваровОтКлиента.ПолучитьОбъект();
						ОбВозврат.Дата = ТекущаяДата();
						ОбВозврат.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					
					ТабМинусов = Новый ТаблицаЗначений;
					ТабМинусов.Колонки.Добавить("Номенклатура");
					ТабМинусов.Колонки.Добавить("Количество");
					ТабМинусов.Колонки.Добавить("КоличествоВМС");
					
					КопияТовары = ВложенныеТаблицыОбъекта.Товары.Скопировать();
					КопияТовары.Свернуть("Товар", "Количество");
					
					Для Каждого СтрокаТовара Из КопияТовары Цикл 
						НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
						ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
						КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
						Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
							Количество = СтрокаТовара.Количество;
							//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
							//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
							//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
							//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
							КоличествоВ = Количество * ПлощадьЕдиницы;
						Иначе
							КоличествоВ = СтрокаТовара.Количество;
						КонецЕсли;
						
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = НоменклатураВ;
						НС.Количество = 0;
						НС.КоличествоВМС = КоличествоВ;
					КонецЦикла;
					
					Для Каждого СтрокаТовара Из СсылкаНаЗВозвратТоваровОтКлиента.Товары Цикл 
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = СтрокаТовара.Номенклатура;
						НС.Количество = СтрокаТовара.Количество;
						НС.КоличествоВМС = 0;
					КонецЦикла;
					
					ТабМинусов.Свернуть("Номенклатура", "Количество, КоличествоВМС");
					
					ФлагЕстьРасхождения = Ложь;
					Для Каждого СтрТабМинусов Из ТабМинусов Цикл 
						Если Не (СтрТабМинусов.КоличествоВМС = СтрТабМинусов.Количество) Тогда
							ФлагЕстьРасхождения = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если СсылкаНаЗВозвратТоваровОтКлиента.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
						Попытка
							НачатьТранзакцию();
						
							ДопИнфа = СсылкаНаЗВозвратТоваровОтКлиента;
							
							ОбъектВозврат = СсылкаНаЗВозвратТоваровОтКлиента.ПолучитьОбъект();
							
							Если ФлагЕстьРасхождения Тогда
				                ОбъектВозврат.Комментарий = "!!!ВНИМАНИЕ ТРЕБУЕТСЯ РУЧНАЯ КОРРЕКТИРОВКА!!! " + ОбъектВозврат.Комментарий;
							КонецЕсли;	
								
							ОбъектВозврат.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
														
							Если Не ФлагЕстьРасхождения Тогда
								Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
								Объект.Заполнить(СсылкаНаЗВозвратТоваровОтКлиента);
								//Объект.Распоряжение = СсылкаНаЗВозвратТоваровОтКлиента;
								Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
								Объект.Дата = ТекущаяДата();
								//Объект.ЗакрыватьГрафикПоступления = Истина;
								Объект.ЗакрыватьГрафикПоступления = Ложь;
								Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							КонецЕсли;
																																			
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
							ПроизошлаИсключительнаяСитуация = Истина;
						КонецПопытки;
					Иначе
						Попытка
							НачатьТранзакцию();
						
							ДопИнфа = СсылкаНаЗВозвратТоваровОтКлиента;
							
							ОбъектВозврат = СсылкаНаЗВозвратТоваровОтКлиента.ПолучитьОбъект();
							
							МассивУдалений = Новый Массив();
							
							Для Каждого СтрТабМинусов Из ТабМинусов Цикл
								Если СтрТабМинусов.КоличествоВМС = 0 Тогда
									Рез = ОбъектВозврат.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура"); //КодСтроки
									МассивУдалений.Добавить(Рез);
									//Рез = Объект.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура");
									//Рез.Отменено = Истина;
									//Рез.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("Отсутствие товара на складе");
									
								ИначеЕсли СтрТабМинусов.КоличествоВМС < СтрТабМинусов.Количество ИЛИ СтрТабМинусов.КоличествоВМС > СтрТабМинусов.Количество Тогда
									//Рез = Объект.Товары.Найти(Число(СтрЗаменить(СтрТабМинусов.КодСтроки, "N", "")), "КодСтроки"); //КодСтроки
									Рез = ОбъектВозврат.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура"); 
									//Рез.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
															
									Рез.Количество = СтрТабМинусов.КоличествоВМС;
									Рез.КоличествоУпаковок = СтрТабМинусов.КоличествоВМС;
									
									//Рез.Сумма = Рез.Сумма / Рез.Количество * СтрТабМинусов.КоличествоВМС;
									//Рез.СуммаНДС = Рез.СуммаНДС / Рез.Количество * СтрТабМинусов.КоличествоВМС;
									//Рез.СуммаСНДС = Рез.СуммаСНДС / Рез.Количество * СтрТабМинусов.КоличествоВМС;
									
									СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектВозврат);
									
									СтруктураДействий = Новый Структура;
									СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
									СтруктураДействий.Вставить("ПересчитатьСумму");
									ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектВозврат.Товары, СтруктураДействий, Неопределено);
									
								Иначе
									//Рез = Объект.Товары.Найти(Число(СтрЗаменить(СтрТабМинусов.КодСтроки, "N", "")), "КодСтроки"); //КодСтроки
									Рез = ОбъектВозврат.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура");
								    //Рез.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
								КонецЕсли;
								
							КонецЦикла;
							
							Для Каждого СтрМассивУдалений Из МассивУдалений Цикл
								ОбъектВозврат.Товары.Удалить(СтрМассивУдалений);
							КонецЦикла;

							ОбъектВозврат.ДополнительныеСвойства.Вставить("inforLoad", Истина);
							ОбъектВозврат.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
							
							
							Объект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
							Объект.Заполнить(СсылкаНаЗВозвратТоваровОтКлиента);
							//Объект.Распоряжение = СсылкаНаЗВозвратТоваровОтКлиента;
							Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
							Объект.Дата = ТекущаяДата();
							//Объект.ЗакрыватьГрафикПоступления = Истина;
							Объект.ЗакрыватьГрафикПоступления = Ложь;
							Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);																											
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
							ПроизошлаИсключительнаяСитуация = Истина;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе	
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Тип документа не определен " + ЗначениеПолейОбъекта.НомерДокумента);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

Процедура ТестЗагрузки(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
	РазложениеНомера = _ПолучитьМассивНомера(ЗначениеПолейОбъекта.НомерДокумента);
	
	Если РазложениеНомера = Неопределено Тогда
		ПроизошлаИсключительнаяСитуация = Истина;
		ДобавитьОшибку(УникальностьЗагрузки, "Ошибка при получении номера документа " + ЗначениеПолейОбъекта.НомерДокумента);
	Иначе
		Если РазложениеНомера[0] = "R" Тогда
			МассивОбъектов = Новый Массив;
			
			СсылкаНаЗаказКлиента = Документы.ЗаказКлиента.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
			Если СсылкаНаЗаказКлиента = Неопределено ИЛИ СсылкаНаЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
				ПроизошлаИсключительнаяСитуация = Истина;
				ДобавитьОшибку(УникальностьЗагрузки, "Документ не найден " + ЗначениеПолейОбъекта.НомерДокумента);
			Иначе
				ДопИнфа = СсылкаНаЗаказКлиента;
				Объект = СсылкаНаЗаказКлиента.ПолучитьОбъект();
				Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
				Объект.ДополнительныеСвойства.Вставить("inforLoad", Истина);
				
				ТабМинусов = Новый ТаблицаЗначений;
				ТабМинусов.Колонки.Добавить("Номенклатура");
				ТабМинусов.Колонки.Добавить("КодСтроки");
				ТабМинусов.Колонки.Добавить("Количество");
				ТабМинусов.Колонки.Добавить("КоличествоВМС");
				ТабМинусов.Колонки.Добавить("КоличествоОригинальное");
				ТабМинусов.Колонки.Добавить("КоличествоВМСОригинальное");
				
				КопияТовары = ВложенныеТаблицыОбъекта.Товары.Скопировать();
				КопияТовары.Свернуть("Товар, КодСтроки", "Количество");
				
				Для Каждого СтрокаТовара Из КопияТовары Цикл 
					НоменклатураВ = Справочники.Номенклатура.НайтиПоКоду(СтрокаТовара.Товар);
					ПлощадьЕдиницы = НоменклатураВ.ПлощадьЕдиницы;
					КолвоВСтандУпаковке = НоменклатураВ.КолвоВСтандУпаковке;
					Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
						Количество = СтрокаТовара.Количество;
						//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
						//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
						//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
						//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
						КоличествоВ = Количество * ПлощадьЕдиницы;
					Иначе
						КоличествоВ = СтрокаТовара.Количество;
					КонецЕсли;
					
					НС = ТабМинусов.Добавить();
					НС.Номенклатура = НоменклатураВ;
					НС.КодСтроки = СтрокаТовара.КодСтроки;
					НС.Количество = 0;
					НС.КоличествоОригинальное = 0;
					НС.КоличествоВМС = КоличествоВ;
					НС.КоличествоВМСОригинальное = СтрокаТовара.Количество;
				КонецЦикла;
				
				Для Каждого СтрокаТовара Из СсылкаНаЗаказКлиента.Товары Цикл 
					Если Не СтрокаТовара.Номенклатура.Артикул = "Доставка" Тогда
						ПлощадьЕдиницы = СтрокаТовара.Номенклатура.ПлощадьЕдиницы;
						КолвоВСтандУпаковке = СтрокаТовара.Номенклатура.КолвоВСтандУпаковке;
						Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
							КоличествоВ = СтрокаТовара.Количество;
							//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
							//КоличествоЯщ = Цел(СтрокаТовара.Количество / КолвоВСтандУпаковке);
							//КоличествоШт = КоличествоВ - КоличествоЯщ * КолвоВСтандУпаковке;
							//Результат = КоличествоЯщ * КоличествоВЯщ + Окр(КоличествоШт / ПлощадьЕдиницы);
							КоличествоШт = Окр(КоличествоВ / ПлощадьЕдиницы);
							Результат = КоличествоШт;
						Иначе
							Результат = СтрокаТовара.Количество;
						КонецЕсли;
						
						НС = ТабМинусов.Добавить();
						НС.Номенклатура = СтрокаТовара.Номенклатура;
						СтрВрем = Строка(СтрокаТовара.КодСтроки);
						СтрВрем = СтрЗаменить(СтрВрем, Символы.НПП, "");
						НС.КодСтроки = "N" + СтрВрем;
						НС.Количество = СтрокаТовара.Количество;
						НС.КоличествоВМС = 0;
						НС.КоличествоВМСОригинальное = 0;
						НС.КоличествоОригинальное = Результат;
					КонецЕсли;
				КонецЦикла;
				
				ТабМинусов.Свернуть("Номенклатура, КодСтроки", "Количество, КоличествоВМС, КоличествоОригинальное, КоличествоВМСОригинальное");
				
				ФлагСметыОплаты = Ложь;
				Для Каждого СтрТабМинусов Из ТабМинусов Цикл
					Если СтрТабМинусов.КоличествоВМС = 0 Тогда
						Рез = Объект.Товары.Найти(Число(СтрЗаменить(СтрТабМинусов.КодСтроки, "N", "")), "КодСтроки"); //КодСтроки
						//Рез = Объект.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура");
						Рез.Отменено = Истина;
						Рез.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.НайтиПоНаименованию("Отсутствие товара на складе");
						
						ФлагСметыОплаты = Истина;
					ИначеЕсли СтрТабМинусов.КоличествоОригинальное < СтрТабМинусов.КоличествоВМСОригинальное ИЛИ СтрТабМинусов.КоличествоОригинальное > СтрТабМинусов.КоличествоВМСОригинальное Тогда
						Рез = Объект.Товары.Найти(Число(СтрЗаменить(СтрТабМинусов.КодСтроки, "N", "")), "КодСтроки"); //КодСтроки
						//Рез = Объект.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура"); 
						Рез.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
						
						Рез.Сумма = Рез.Сумма / Рез.Количество * СтрТабМинусов.КоличествоВМС;
						Рез.СуммаНДС = Рез.СуммаНДС / Рез.Количество * СтрТабМинусов.КоличествоВМС;
						Рез.СуммаСНДС = Рез.СуммаСНДС / Рез.Количество * СтрТабМинусов.КоличествоВМС;
						Рез.СуммаРучнойСкидки = Рез.СуммаРучнойСкидки / Рез.Количество * СтрТабМинусов.КоличествоВМС;
						Рез.СуммаАвтоматическойСкидки = Рез.СуммаАвтоматическойСкидки / Рез.Количество * СтрТабМинусов.КоличествоВМС;
						
						Рез.Количество = СтрТабМинусов.КоличествоВМС;
						Рез.КоличествоУпаковок = СтрТабМинусов.КоличествоВМС;
						
						ФлагСметыОплаты = Истина;
					Иначе
						Рез = Объект.Товары.Найти(Число(СтрЗаменить(СтрТабМинусов.КодСтроки, "N", "")), "КодСтроки"); //КодСтроки
						//Рез = Объект.Товары.Найти(СтрТабМинусов.Номенклатура, "Номенклатура");
						Рез.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ФлагСметыОплаты Тогда
					Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
				КонецЕсли;
				
				Попытка
					НачатьТранзакцию();
					Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
					ПроизошлаИсключительнаяСитуация = Истина;
				КонецПопытки;
			КонецЕсли;	
		ИначеЕсли РазложениеНомера[0] = "M" Тогда
			МассивОбъектов = Новый Массив;
			
			СсылкаНаЗаказКлиента = Документы.ПеремещениеТоваров.НайтиПоНомеру(РазложениеНомера[2], Дата(РазложениеНомера[1], 1, 1));
		Иначе	
			ПроизошлаИсключительнаяСитуация = Истина;
			ДобавитьОшибку(УникальностьЗагрузки, "Тип документа не определен " + ЗначениеПолейОбъекта.НомерДокумента);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТестЗагрузкиПеремещения(ЗначениеПолейОбъекта, УникальностьЗагрузки, ПропуститьЗагрузку, ПроизошлаИсключительнаяСитуация, Объект, ДопИнфа, ВложенныеТаблицыОбъекта)
Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ЗначениеПолейОбъекта.Товар);
ПлощадьЕдиницы = Номенклатура.ПлощадьЕдиницы;
КолвоВСтандУпаковке = Номенклатура.КолвоВСтандУпаковке;
Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
	Количество = ЗначениеПолейОбъекта.Количество;
	//КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
	//КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
	//КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
	//КоличествоВ = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
	КоличествоВ = Количество * ПлощадьЕдиницы;
Иначе
	КоличествоВ = ЗначениеПолейОбъекта.Количество;
КонецЕсли;
					
СкладОт = ВернутьСкладНовый(ЗначениеПолейОбъекта.СкладВМС, ЗначениеПолейОбъекта.ЗонаОт);
СкладДо = ВернутьСкладНовый(ЗначениеПолейОбъекта.СкладВМС, ЗначениеПолейОбъекта.ЗонаДо);
Если СкладОт <> СкладДо Тогда
	ТабТовар = Новый ТаблицаЗначений;
	ТабТовар.Колонки.Добавить("Номенклатура");
	ТабТовар.Колонки.Добавить("Количество");
	
	НС = ТабТовар.Добавить();
	НС.Номенклатура = Номенклатура; 
	НС.Количество = КоличествоВ;
	
	Попытка
		НачатьТранзакцию();
	
		ОбПерем = СоздатьПеремещение(ТабТовар, СкладОт, СкладДо);
		ОбПерем.Комментарий = "Перемещение товара " + УникальностьЗагрузки;
		ОбПерем.ДополнительныеСвойства.Вставить("inforLoad", Истина);
		ОбПерем.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		ОбРасхОрд = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;
		ОбРасхОрд.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
		ОбРасхОрд.Склад = ОбПерем.СкладОтправитель;
		ОбРасхОрд.Получатель = ОбПерем.СкладПолучатель;
		ОбРасхОрд.Дата = ОбПерем.Дата + 1;
		ОбРасхОрд.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
		ОбРасхОрд.ДатаОтгрузки = ОбПерем.Дата;
		ОбРасхОрд.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		
		Для Каждого СтрокаТовара Из ОбПерем.Товары Цикл 
				
			НСР = ОбРасхОрд.ТоварыПоРаспоряжениям.Добавить();
			НСР.Номенклатура = СтрокаТовара.Номенклатура;
			НСР.Распоряжение = ОбПерем.Ссылка;
			НСР.Количество = СтрокаТовара.Количество;
			
			НСО = ОбРасхОрд.ОтгружаемыеТовары.Добавить();
			НСО.Номенклатура = СтрокаТовара.Номенклатура;
			НСО.Количество = СтрокаТовара.Количество;
			НСО.Упаковка = СтрокаТовара.Упаковка;
			НСО.КоличествоУпаковок = СтрокаТовара.КоличествоУпаковок;
			НСО.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		КонецЦикла;						
		ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

		ОбРасхОрд.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		ОбРасхОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		ОбПрОрд = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		ОбПрОрд.Заполнить(ОбПерем.Ссылка);
		ОбПрОрд.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		ОбПрОрд.Дата = ОбПерем.Дата + 2;

	    ОбПрОрд.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ДобавитьОшибку(УникальностьЗагрузки, ОписаниеОшибки());
		ПроизошлаИсключительнаяСитуация = Истина;
	КонецПопытки;
КонецЕсли;
КонецПроцедуры

//Вынесено из общей команды
&НаСервере
Функция _ПолучитьЗначениеСвойстваСправочника_ИзКоманды(Св, Ном)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураДополнительныеРеквизиты.Значение
	               |ИЗ
	               |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |ГДЕ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
	               |	И НоменклатураДополнительныеРеквизиты.Свойство.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Ссылка", Ном);
	Запрос.УстановитьПараметр("Наименование", Св);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция _ОбъектВыгружен(Св) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Infor_ОчередьВыгрузки.Объект
	               |ИЗ
	               |	РегистрСведений.Infor_ОчередьВыгрузки КАК Infor_ОчередьВыгрузки
	               |ГДЕ
	               |	Infor_ОчередьВыгрузки.Объект в (&Объект)";
	Запрос.УстановитьПараметр("Объект", Св);
	Результат = Запрос.Выполнить();
	Пока Результат.Пустой() Цикл
		Возврат Ложь;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьТовары(Источник)
	Ошибка = Ложь;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказКлиента") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Для Каждого СтрокаТовары Из Источник.Товары Цикл
			Ошибка = ?(Ошибка, Ошибка, ПроверкаТовара(СтрокаТовары.Номенклатура));
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Номенклатура") Тогда
		Ошибка = ?(Ошибка, Ошибка, ПроверкаТовара(Источник));
	КонецЕсли;
	Возврат Ошибка; 
КонецФункции

&НаСервере
Функция ПроверитьРезервы(Источник)
	Ошибка = Ложь;
	Если Infor_Интеграция.ПолучитьОбщуюНастройку("ВЫГРУЗКА", "КонтрольРезерва") Тогда
		ТабОст = Новый ТаблицаЗначений;
		ТабОст.Колонки.Добавить("Номенклатура");
		ТабОст.Колонки.Добавить("Количество");
		
		Для Каждого СтрТовары Из Источник.Товары Цикл
			НС = ТабОст.Добавить();
			НС.Номенклатура = СтрТовары.Номенклатура;
			НС.Количество = СтрТовары.Количество;
		КонецЦикла;
		
		ТабОст.Свернуть("Номенклатура", "Количество");
		ТабРезервов = Infor_Интеграция._ПолучитьРезерв(Источник.Склад, ТабОст.ВыгрузитьКолонку("Номенклатура"));
		ТабОстаток = Infor_Интеграция._ПолучитьОстаток(Источник.Склад, ТабОст.ВыгрузитьКолонку("Номенклатура"));
		
		Для Каждого СтрТабОстатка Из ТабОстаток Цикл
			ПлощадьЕдиницы = СтрТабОстатка.Номенклатура.ПлощадьЕдиницы;
			КолвоВСтандУпаковке = СтрТабОстатка.Номенклатура.КолвоВСтандУпаковке;
			Если ЗначениеЗаполнено(ПлощадьЕдиницы) И ЗначениеЗаполнено(КолвоВСтандУпаковке) Тогда
				Количество = СтрТабОстатка.КоличествоОстаток;
				КоличествоВЯщ = Окр(КолвоВСтандУпаковке / ПлощадьЕдиницы);
				КоличествоЯщ = Цел(Количество / КоличествоВЯщ);
				КоличествоШт = Количество - КоличествоЯщ * КоличествоВЯщ;
				СтрТабОстатка.КоличествоОстаток = КоличествоЯщ * КолвоВСтандУпаковке + КоличествоШт * ПлощадьЕдиницы;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрТабОстатка Из ТабОст Цикл
			РезОст = ТабОстаток.Найти(СтрТабОстатка.Номенклатура, "Номенклатура");
			РезРез = ТабРезервов.Найти(СтрТабОстатка.Номенклатура, "Номенклатура");
			
			Ост = 0;
			
			Если Не РезОст = Неопределено Тогда
				Ост = РезОст.КоличествоОстаток;
			КонецЕсли;
			
			Рез = 0;
			
			Если Не РезРез = Неопределено Тогда
				Рез = РезРез.КоличествоОстаток;
			КонецЕсли;
			
			Если (Ост - Рез - СтрТабОстатка.Количество) < 0 Тогда
				Сообщить("Товара " + СтрТабОстатка.Номенклатура + " не хватает для заказа. Остаток в ВМС " + Строка(Ост) + ". Резерв в 1С " + Строка(Рез) + ". В заказе " + Строка(СтрТабОстатка.Количество), СтатусСообщения.Внимание);
				
				Ошибка = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибка; 
КонецФункции

&НаСервере
Функция ПроверитьВыгрузка(Источник)
	Ошибка = Ложь;
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказКлиента") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ПеремещениеТоваров") ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Если _ОбъектВыгружен(Источник) Тогда
			Сообщить("Объект " + Источник + " уже выгружался.", СтатусСообщения.Внимание);
			Ошибка = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ошибка; 
КонецФункции

&НаСервере
Функция ЕстьПриход(Источник)
	Ошибка = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	               |ГДЕ
	               |	ПриобретениеТоваровУслуг.Проведен = ИСТИНА
	               |	И ПриобретениеТоваровУслуг.ЗаказПоставщику = &ЗаказПоставщику";
	Запрос.УстановитьПараметр("ЗаказПоставщику", Источник);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Сообщить("Нельзя выгружать заказ " + Источник + " без создания поступления.", СтатусСообщения.Внимание);
		Ошибка = Ложь;
	КонецЕсли;
	
	Возврат Ошибка; 
КонецФункции

&НаСервере
Функция ПроверкаТовара(Товар)
	Ошибка = Ложь;
	РезГруппа = СокрЛП(ВРег(_ПолучитьЗначениеСвойстваСправочника_ИзКоманды("Группа товара", Товар.Ссылка)));
	Если РезГруппа = """КАФЕЛЬ""" Тогда
		Если НЕ ЗначениеЗаполнено(Товар.Ссылка.ПлощадьЕдиницы) Тогда
			Сообщить("Для товара " + Товар.Ссылка.Наименование + " не заполнен атрибут площадь единицы.", СтатусСообщения.Внимание);
			Ошибка = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Товар.Ссылка.КолвоВСтандУпаковке) Тогда
			Сообщить("Для товара " + Товар.Ссылка.Наименование + " не заполнен атрибут количество в стандартной упаковке.", СтатусСообщения.Внимание);
			Ошибка = Истина;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(РезГруппа) Тогда
			Сообщить("У товара " + Товар.Ссылка.Наименование + " не заполнен атрибут группа товара.", СтатусСообщения.Внимание);
			Ошибка = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ошибка; 
КонецФункции

&НаСервере
Функция ПроверкаСсылки(Сс)
	Ошибка = Ложь;
	Если Сс.Ссылка.Пустая() Тогда
		Ошибка = Истина;
	КонецЕсли;
	Возврат Ошибка; 
КонецФункции

&НаСервере
Процедура ОбработкаКоманды(ПараметрКоманды) Экспорт
	Если ПроверитьТовары(ПараметрКоманды) Тогда
		Сообщить("Объект не выгружен.", СтатусСообщения.Важное);
	Иначе
		Если ПроверитьВыгрузка(ПараметрКоманды) Тогда
			Сообщить("Объект не выгружен.", СтатусСообщения.Важное);
		Иначе
			Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				Если ЕстьПриход(ПараметрКоманды) Тогда
					ВыполнитьРегистрациюОбъекта(ПараметрКоманды);
					Сообщить("Объект успешно выгружен.", СтатусСообщения.Важное);
				Иначе
					Сообщить("Объект не выгружен.", СтатусСообщения.Важное);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				Если ПроверитьРезервы(ПараметрКоманды) Тогда
					Сообщить("Объект не выгружен.", СтатусСообщения.Важное);
				Иначе
					ВыполнитьРегистрациюОбъекта(ПараметрКоманды);
					Сообщить("Объект успешно выгружен.", СтатусСообщения.Важное);
				КонецЕсли;
			Иначе
				ВыполнитьРегистрациюОбъекта(ПараметрКоманды);
				Сообщить("Объект успешно выгружен.", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыОпределенияСебестоимости(Объект)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалогообложениеНДС",Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураПараметров.Вставить("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	
	Возврат СтруктураПараметров
	
КонецФункции

//++ Тишбаев О.М.
Процедура ПолучитьДанныеДляРадуги() Экспорт
	
	//Ограничения в 100 Заказов для снижения нагрузки
	//Обмен происходит каждые 120 секунд поэтому не критично
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	Infor_ИсторияСтатусовВМС.Объект КАК Объект
	//                      |ПОМЕСТИТЬ ОбработаныеОбъекты
	//                      |ИЗ
	//                      |	РегистрСведений.Infor_ИсторияСтатусовВМС КАК Infor_ИсторияСтатусовВМС
	//                      |ГДЕ
	//                      |	ТИПЗНАЧЕНИЯ(Infor_ИсторияСтатусовВМС.Объект) = ТИП(Документ.ЗаказКлиента)
	//                      |	И Infor_ИсторияСтатусовВМС.ДатаИзменения >= ДАТАВРЕМЯ(2021, 8, 1, 0, 0, 0)
	//                      |	И Infor_ИсторияСтатусовВМС.СтатусОбъекта = ""Загружен""
	//                      |	И Infor_ИсторияСтатусовВМС.Объект В
	//                      |			(ВЫБРАТЬ
	//                      |				Infor_ДанныеДляРадуги.Объект КАК Объект
	//                      |			ИЗ
	//                      |				РегистрСведений.Infor_ДанныеДляРадуги КАК Infor_ДанныеДляРадуги)
	//                      |
	//                      |ИНДЕКСИРОВАТЬ ПО
	//                      |	Объект
	//                      |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ ПЕРВЫЕ 300
	//                      |	ЗаказКлиента.Номер КАК Номер,
	//                      |	ЗаказКлиента.Дата КАК Дата
	//                      |ИЗ
	//                      |	РегистрСведений.Infor_ИсторияСтатусовВМС КАК Infor_ИсторияСтатусовВМС
	//                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	//                      |		ПО Infor_ИсторияСтатусовВМС.Объект = ЗаказКлиента.Ссылка
	//                      |ГДЕ
	//                      |	ЗаказКлиента.Проведен
	//                      |	И Infor_ИсторияСтатусовВМС.СтатусОбъекта = ""Загружен""
	//                      |	И ЗаказКлиента.Дата >= ДАТАВРЕМЯ(2021, 8, 1, 0, 0, 0)
	//                      |	И НЕ Infor_ИсторияСтатусовВМС.Объект В
	//                      |				(ВЫБРАТЬ
	//                      |					ОбработаныеОбъекты.Объект КАК Объект
	//                      |				ИЗ
	//                      |					ОбработаныеОбъекты КАК ОбработаныеОбъекты)
	//                      |
	//                      |УПОРЯДОЧИТЬ ПО
	//                      |	Дата УБЫВ");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ЗаказКлиента.Номер КАК Номер,
	                      |	ЗаказКлиента.Дата КАК Дата
	                      |ИЗ
	                      |	РегистрСведений.Infor_ИсторияСтатусовВМС КАК Infor_ИсторияСтатусовВМС
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	                      |		ПО Infor_ИсторияСтатусовВМС.Объект = ЗаказКлиента.Ссылка
	                      |ГДЕ
	                      |	ЗаказКлиента.Проведен
	                      |	И Infor_ИсторияСтатусовВМС.СтатусОбъекта = ""Загружен""
	                      |	И ЗаказКлиента.Дата >= ДАТАВРЕМЯ(2021, 8, 1, 0, 0, 0)
	                      |	И НЕ Infor_ИсторияСтатусовВМС.Объект В
	                      |				(ВЫБРАТЬ
	                      |					Infor_ДанныеДляРадуги.Объект КАК Объект
	                      |				ИЗ
	                      |					РегистрСведений.Infor_ДанныеДляРадуги КАК Infor_ДанныеДляРадуги)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда 
		Возврат
	КонецЕсли;
		
	ОписаниеПолей = Новый ТаблицаЗначений;
	ОписаниеПолей.Колонки.Добавить("ИмяПоля");
	ОписаниеПолей.Колонки.Добавить("ТипПоля");
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "RecordId";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "Docid";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "SUSR01";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "DriverName";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "PRONumber";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	НС = ОписаниеПолей.Добавить();
	НС.ИмяПоля = "PHONENUMBER";
	НС.ТипПоля = Перечисления.Infor_ТипыПолей.Строка;
	
	ОписаниеТаблицы = Новый Структура();
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "dbo.ImpOutputOrdersShippingFromWMS");
	ОписаниеТаблицы.Вставить("Поля", ОписаниеПолей);
	
	ЗначениеПоля   = "(";
	ФильтрыНомеров = Новый Структура("ИмяПоля, ЗначениеПоля", "Docid", ЗначениеПоля);
	Выборка.Сбросить();
	
	//Загружаем пачками по 50. Чтобы не было нагрузки
	к=0; 
	
	Пока Выборка.Следующий() Цикл
		Если к < 50 Тогда
			ЗначениеПоля = ЗначениеПоля + "'R_" + Выборка.Номер + "_" + СтрЗаменить(Строка(Год(Выборка.Дата)), Символы.НПП, "") + "', ";
			к = к + 1;
			Продолжить;
		Иначе
			
			ФильтрыНомеров.ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля)-2) + ")";
			
			ДанныеПоВодителям = ПолучитьТаблицуИзSql(ОписаниеТаблицы, ФильтрыНомеров);
			НаборЗаписей      = РегистрыСведений.Infor_ДанныеДляРадуги.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			
			МасЗаказы = Новый Массив();
			
			Для Каждого ТекСтрока Из ДанныеПоВодителям Цикл
				
				МассивНомера = _ПолучитьМассивНомера(ТекСтрока.Docid);
				
				Если МассивНомера = Неопределено Тогда
					ДобавитьОшибку(ТекСтрока.Docid, "Ошибка получении номера документа при загрузке данных для радуги. " + ТекСтрока.Docid);
					Продолжить;
				КонецЕсли;
				
				ЗаказКлиента = Документы.ЗаказКлиента.НайтиПоНомеру(МассивНомера[2], Дата(МассивНомера[1], 1, 1));
				
				Если ЗаказКлиента = Неопределено ИЛИ ЗаказКлиента.Пустая() Тогда
					ДобавитьОшибку(ТекСтрока.Docid, "При загрузке данных для радуги не удалось найти документ. " + ТекСтрока.Docid);
					Продолжить;
				КонецЕсли;
				
				Если НЕ МасЗаказы.Найти(ЗаказКлиента) = Неопределено Тогда
					Продолжить;
				Иначе
					МасЗаказы.Добавить(ЗаказКлиента);
				КонецЕсли;
				
				
				НоваяЗапись        = НаборЗаписей.Добавить();
				НоваяЗапись.Объект = ЗаказКлиента;
				
				ФизЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию(СокрЛП(ТекСтрока.DriverName), Истина);
				
				Если ФизЛицо = Неопределено Или ФизЛицо.Пустая() Тогда 
					НоваяЗапись.Водитель = ТекСтрока.DriverName;
				Иначе
					НоваяЗапись.Водитель = ФизЛицо;
				КонецЕсли;
				
				//Если ПустаяСтрока(ТекСтрока.PHONENUMBER) Тогда 
				НоваяЗапись.НомерТелефона =	Лев(ТекСтрока.PHONENUMBER,12);
				//Иначе
				//	НоваяЗапись.НомерТелефона = ОбработатьНомерМобильноТелефона(ЗаказКлиента, ТекСтрока.PHONENUMBER);
				//КонецЕсли;
				
				НоваяЗапись.РегистрационныйНомер = ТекСтрока.PRONumber;
				НоваяЗапись.ТипДоставки          = ТекСтрока.SUSR01;
				
			КонецЦикла;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				ДляОтладки = 0;
			КонецПопытки;
			
			к = 0;
			ЗначениеПоля = "("; 

		КонецЕсли;
	КонецЦикла;
	

КонецПроцедуры 

Функция ОбработатьНомерМобильноТелефона(Объект, НомерТелефона)
	
	ОбработанныйНомер = "";
	
	Для Счетчик = 1 По СтрДлина(НомерТелефона) Цикл
		СимволНомера = Сред(НомерТелефона, Счетчик, 1);
		Если Найти("0123456789", СимволНомера) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныйНомер = ОбработанныйНомер + СимволНомера;
	КонецЦикла;
	
	Если СтрДлина(ОбработанныйНомер) = 10 Тогда
		Возврат "+7" + ОбработанныйНомер;
	КонецЕсли;
	Если СтрДлина(ОбработанныйНомер) = 11 
		И (Лев(ОбработанныйНомер, 1) = "8" 
		ИЛИ Лев(ОбработанныйНомер, 1) = "7") Тогда
		Возврат  "+7" + Сред(ОбработанныйНомер, 2);
	КонецЕсли;
	
	Если СтрДлина(ОбработанныйНомер) <> 12 Тогда
		ДобавитьОшибку(Объект, "При загрузке данных для радуги получили номер не соответствующий стандартам. " + НомерТелефона);;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
//++