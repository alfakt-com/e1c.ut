#Область ПрограммныйИнтерфейс

#Область СобытияФормИСМП

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ВидПродукции) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукции);
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормы) Тогда
		ПараметрыИнтеграции.Вставить(ВидПродукции, ПараметрыИнтеграцииФормыПроверки);
		
		Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
			
			ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
		Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
			
			Если ПараметрыИнтеграцииФормыПроверки.РазмещатьЭлементыИнтерфейса Тогда
				
				ПутьКРеквизиту = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
				ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты);
				
			КонецЕсли;
			
			ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если Настройки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
			Продолжить;
		КонецЕсли;
		ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, Настройки);
		ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДобавитьКнопкуПроверкиИПодбора(Форма, Настройки, ВидПродукции);
		ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, Настройки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВстраиваниеФормыПроверкиИПодбора

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции формы проверки и подбора
//   в прикладные документы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//  Форма - УправляемаяФорма, Неопределено - форма для которой возвращаются параметры интеграции
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции для определения параметров интеграции
//
// Возвращаемое значение:
//  Структура - (См. ПроверкаИПодборПродукцииИС.ПараметрыИнтеграцииФормПроверкиИПодбора).
//
Функция ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыИнтеграции = ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ПараметрыИнтеграцииФормПроверкиИПодбора();
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Обувная Тогда
		
		ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке = НСтр(
			"ru = 'До окончания работы в форме сканирования и проверки маркируемой продукции внесение изменений в данной форме недоступно.';
			|en = 'До окончания работы в форме сканирования и проверки маркируемой продукции внесение изменений в данной форме недоступно.'");
		ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке = НСтр(
			"ru = 'Выполняется проверка маркируемой продукции. При окончании работы в форме проверки табличная часть может быть изменена.';
			|en = 'Выполняется проверка маркируемой продукции. При окончании работы в форме проверки табличная часть может быть изменена.'");
	
		ПараметрыИнтеграции.Заголовки[0] = НСтр("ru = 'Проверить поступившую обувную продукцию';
												|en = 'Проверить поступившую обувную продукцию'");
		ПараметрыИнтеграции.Заголовки[1] = НСтр("ru = 'Подобрать и проверить обувную продукцию';
												|en = 'Подобрать и проверить обувную продукцию'");
		ПараметрыИнтеграции.Заголовки[2] = НСтр("ru = 'Продолжить проверку поступившей обувной продукции';
												|en = 'Продолжить проверку поступившей обувной продукции'");
		ПараметрыИнтеграции.Заголовки[3] = НСтр("ru = 'Продолжить подбор и проверку обувной продукции';
												|en = 'Продолжить подбор и проверку обувной продукции'");
		ПараметрыИнтеграции.Заголовки[4] = НСтр("ru = 'Результаты проверки обувной продукции';
												|en = 'Результаты проверки обувной продукции'");
		ПараметрыИнтеграции.Заголовки[5] = НСтр("ru = 'Результаты подбора обувной продукции';
												|en = 'Результаты подбора обувной продукции'");
		ПараметрыИнтеграции.Заголовки[6] = НСтр("ru = 'Промежуточные результаты проверки обувной продукции';
												|en = 'Промежуточные результаты проверки обувной продукции'");
		ПараметрыИнтеграции.Заголовки[7] = НСтр("ru = 'Промежуточные результаты подбора обувной продукции';
												|en = 'Промежуточные результаты подбора обувной продукции'");
		ПараметрыИнтеграции.Заголовки[8] = НСтр("ru = 'Возобновить проверку обувной продукции';
												|en = 'Возобновить проверку обувной продукции'");
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке = НСтр(
			"ru = 'До окончания работы в форме сканирования и проверки табачной продукции внесение изменений в данной форме недоступно.';
			|en = 'До окончания работы в форме сканирования и проверки табачной продукции внесение изменений в данной форме недоступно.'");
		ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке = НСтр(
			"ru = 'Выполняется проверка табачной продукции. При окончании работы в форме проверки табличная часть может быть изменена.';
			|en = 'Выполняется проверка табачной продукции. При окончании работы в форме проверки табличная часть может быть изменена.'");
		
		ПараметрыИнтеграции.Заголовки[0] = НСтр("ru = 'Проверить поступившую табачную продукцию';
												|en = 'Проверить поступившую табачную продукцию'");
		ПараметрыИнтеграции.Заголовки[1] = НСтр("ru = 'Подобрать и проверить табачную продукцию';
												|en = 'Подобрать и проверить табачную продукцию'");
		ПараметрыИнтеграции.Заголовки[2] = НСтр("ru = 'Продолжить проверку поступившей табачной продукции';
												|en = 'Продолжить проверку поступившей табачной продукции'");
		ПараметрыИнтеграции.Заголовки[3] = НСтр("ru = 'Продолжить подбор и проверку табачной продукции';
												|en = 'Продолжить подбор и проверку табачной продукции'");
		ПараметрыИнтеграции.Заголовки[4] = НСтр("ru = 'Результаты проверки табачной продукции';
												|en = 'Результаты проверки табачной продукции'");
		ПараметрыИнтеграции.Заголовки[5] = НСтр("ru = 'Результаты подбора табачной продукции';
												|en = 'Результаты подбора табачной продукции'");
		ПараметрыИнтеграции.Заголовки[6] = НСтр("ru = 'Промежуточные результаты проверки табачной продукции';
												|en = 'Промежуточные результаты проверки табачной продукции'");
		ПараметрыИнтеграции.Заголовки[7] = НСтр("ru = 'Промежуточные результаты подбора табачной продукции';
												|en = 'Промежуточные результаты подбора табачной продукции'");
		ПараметрыИнтеграции.Заголовки[8] = НСтр("ru = 'Возобновить проверку табачной продукции';
												|en = 'Возобновить проверку табачной продукции'");
			
	КонецЕсли;
	
	Если Форма<>Неопределено Тогда
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(
			Форма, ПараметрыИнтеграции, ВидПродукции);
	КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Вызывается при закрытии формы проверки и подбора маркируемой продукции из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС и при инициализации формы.
// 
// Параметры:
//  Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - настраиваемый вид продукции
//  ВидимостьЭлементов - Булево - флаг видимости соответствующего блока по виду продукции
//
Процедура УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов)
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);

	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	СтатусПроверкиИПодбора  = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(Объект.Ссылка, ВидПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Обувная);
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(
		Форма,
		ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект,
		ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок,
		ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки);
	
КонецПроцедуры

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь) Экспорт

	ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Обувная);
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииГосИС.Получить(Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	
	Если ПараметрыИнтеграцииФормыПроверки = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_НастройкиИсточникаКешаШтрихкодовУпаковок();
	Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
	Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
	Настройки.Товары           = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
	Настройки.Серии            = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиСерии;
	
	ИСМПТВыбытиеКодовМаркировкиСервер.ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, Настройки, ОбновлениеТаблицыТоваров);
	
КонецПроцедуры

#КонецОбласти

// Фиксирует результаты сканирования в форме проверки и подбора в документе, из которого она была вызвана.
//
// Параметры:
//   РезультатПроверки - Структура - (См. ПараметрыОкончанияПроверки)
//
Процедура ЗафиксироватьРезультатПроверкиИПодбора(РезультатПроверки) Экспорт
	
	МетаданныеДокумента = РезультатПроверки.ПроверяемыйДокумент.Метаданные();
	
	Если ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_СодержитсяВПодсистеме("ГосИС.ИСМП", МетаданныеДокумента) Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
		МенеджерДокумента.ОтразитьРезультатыПроверкиИПодбора(РезультатПроверки);
	Иначе
		ПроверкаИПодборПродукцииИСМППереопределяемый.ОтразитьРезультатыСканированияВДокументе(РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру параметров завершения проверки и подбора маркируемой продукции (ИС МП)
// 
// Возвращаемое значение:
//   Структура - содержит следующие поля:
//     * ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого требуется зафиксировать результат проверки и подбора
//     * СоздаватьАктОРасхождениях       - Булево - признак, того что требуется создания документа "Акт о расхождениях".
//     * СозданныйАктОРасхождениях       - ДокументСсылка - в данный параметр требуется поместить созданный документ "Акт о расхождениях".
//     * ПроверяемыйДокумент             - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
//     * ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - содержит следующие колонки:
//        ** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
//        ** Штрихкод - Строка - Значение штрихкода
//     * ТаблицаПодобраннойПровереннойПродукции - ТаблицаЗначений - содержит следующие колонки:
//        ** Номенклатура        - ОпределяемыйТип.Номекнлатура - Номекнлатура
//        ** Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
//        ** Серия               - ОпределяемыйТип.СерияНоменклатуры - Серия
//        ** Количество          - Число - количество по документу
//        ** КоличествоПодобрано - Число - фактическое количество по результатам проверки и подбора
//     * ТаблицаРасхождений - ТаблицаЗначений - содержит расхождения при проверке маркируемой продукции
//
Функция ПараметрыОкончанияПроверки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидПродукцииИС",            Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	Результат.Вставить("СоздаватьАктОРасхождениях", Ложь);
	Результат.Вставить("СозданныйАктОРасхождениях");
	Результат.Вставить("ПроверяемыйДокумент");
	Результат.Вставить("ТаблицаШтрихкодовВерхнегоУровня");
	Результат.Вставить("ТаблицаПодобраннойПровереннойПродукции");
	Результат.Вставить("ТаблицаРасхожденийШтриховыхКодов");
	Возврат Результат;
	
КонецФункции

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
//Параметры:
//   Документ - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//Возвращаемое значение:
//   Неопределено, ДокументСсылка - ссылка на Акт о расхождениях
Функция СформированныйАктОРасхождениях(Документ) Экспорт
	
	АктОРасхождениях = Неопределено;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПолучитьСформированныйАктОРасхождениях(Документ, АктОРасхождениях);
	
	Возврат АктОРасхождениях;
	
КонецФункции

//Возвращает для переданного документа таблицу его товаров, являющихся маркируемой продукцией тревуемого вида.
//
//Параметры:
//  * Контекст - УправляемаяФорма, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  * ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид получаемой маркируемой продукции.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с табачной продукцией переданного документа:
//   * GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//   * Количество     - Число                                      - количество.
//
Функция ТаблицаМаркируемойПродукцииДокумента(Контекст, ВидМаркируемойПродукции) Экспорт
	
	ТаблицаМаркируемойПродукции = НоваяТаблицаМаркируемойПродукции();
	
	Если ТипЗнч(Контекст) = Тип("ДанныеФормыСтруктура") Тогда
		
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
			Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции);
			
	КонецЕсли;
		
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетХешСумм

//Пересчитывает хеш-суммы всех упаковок формы и проверяется необходимость перемаркировки.
//
//Параметры:
//   Форма - УправляемаяФорма - форма проверки и подбора маркируемой продкуции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ОкончаниеПроверкиИПодбора

// Удаляет пустые упаковки из дерева маркируемой продукции.
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - дерево упаковок маркируемой продукции из формы проверки и подбора
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции
//
Процедура УдалитьПустыеУпаковкиДерева(ДеревоМаркированнойПродукции) Экспорт
	
	УдалитьПустыеУпаковкиВСтрокахДерева(ДеревоМаркированнойПродукции.Строки);
	
КонецПроцедуры

// Формирует пустую таблицу о штриховых кодах верхнего уровня, для дальнейшего наполнения информацией из форрмы проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров 
// * Штрихкод - Строка 
//
Функция ПустаяТаблицаШтрихкодовВерхнегоУровня() Экспорт
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ТаблицаШтрихкодовВерхнегоУровня;
	
КонецФункции

// Формирует пустую таблицу информации о проверенных и под, сформированную в форме проверки и подбора.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Номенклатура        - ОпределяемыеТипы.Номенклатура
// * Характеристика      - ОпределяемыеТипы.ХарактеристикаНоменклатуры
// * Серия               - ОпределяемыеТипы.СерияНоменклатуры
// * Количество          - Число
// * КоличествоПодобрано - Число 
Функция ПустаяТаблицаПодобраннойПровереннойПродукции() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Серия",               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПодобрано", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции 

#КонецОбласти

#Область СерииНоменклатуры

Функция ЕстьПравоДобавлениеСерий() Экспорт
	
	ПравоДобавлениеСерий = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий);
	
	Возврат ПравоДобавлениеСерий;
	
КонецФункции

#КонецОбласти

Функция ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции) Экспорт
	
	ЕстьМаркируемаяПродукция = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция);
	
	Возврат ЕстьМаркируемаяПродукция;
	
КонецФункции

Функция СтатусПроверкиИПодбораДокумента(Документ, ВидМаркируемойПродукции) Экспорт
	
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораЕГАИС.НеВыполнялось;

	Возврат СтатусПроверкиИПодбора;
	
КонецФункции

Функция КонтрагентНеРезидент(Контрагент) Экспорт
	
	НеРезидент = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииКонтрагентНеРезидент(Контрагент, НеРезидент);
	
	Возврат НеРезидент;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

//Формирует пустую таблицу маркируемой продукции
//
//Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав маркируемой продукции документа:
//    GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//    Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//    Количество     - Число                                      - количество.
//
Функция НоваяТаблицаМаркируемойПродукции()

	ТаблицаМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаМаркируемойПродукции.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

Процедура УдалитьПустыеУпаковкиВСтрокахДерева(СтрокиДерева)
	
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		СтрокаДерева = СтрокиДерева[КоличествоСтрок - ОбратныйИндекс];
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПодчиненныеСтроки = СтрокаДерева.Строки;
			
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				УдалитьПустыеУпаковкиВСтрокахДерева(ПодчиненныеСтроки);
			КонецЕсли;
			
			Если ПодчиненныеСтроки.Количество() = 0
				И СтрокаДерева.КоличествоПодчиненнойПродукции = 0 Тогда
				СтрокиДерева.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ВстраиваниеФормыПроверкиИПодбора

Процедура УправлениеВидимостьюЭлеменовПроверкиИПодбора(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если (ПараметрыИнтеграции = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		Настройки = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если Настройки = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Форма[Настройки.ИмяРеквизитаФормыОбъект];
		ТабличнаяЧастьТовары = Объект[Настройки.ИмяТабличнойЧастиТовары];
		
		ВидимостьЭлементов = Настройки.ИспользоватьБезМаркируемойПродукции
			Или ПроверкаИПодборПродукцииИСМП.ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидПродукции);
		
		УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриПримененииПараметровИнтеграцииФормыПроверкиИПодбора(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти