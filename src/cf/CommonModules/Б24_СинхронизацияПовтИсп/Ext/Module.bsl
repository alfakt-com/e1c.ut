
#Область ПолучениеПеречислений

Функция ПолучитьТипыОперацийСинхронизации() Экспорт
	
	лСтруктура = Новый Структура;
	лСтруктура.Вставить("Компании"			, "Компании");	
	лСтруктура.Вставить("Контакты"			, "Контакты");
	лСтруктура.Вставить("Реквизиты"			, "Реквизиты");
	лСтруктура.Вставить("АдресаРеквизитов"	, "АдресаРеквизитов");
	лСтруктура.Вставить("БанковскиеСчета"	, "БанковскиеСчета");
	
	лСтруктура.Вставить("ГруппыТоваров"		, "ГруппыТоваров");
	лСтруктура.Вставить("ЕдиницыИзмерения"	, "ЕдиницыИзмерения");
	лСтруктура.Вставить("СвойстваТоваров"	, "СвойстваТоваров");
	
	лСтруктура.Вставить("Товары"			, "Товары");
	
	лСтруктура.Вставить("Счета"				, "Счета");
	лСтруктура.Вставить("Сделки"			, "Сделки");
	лСтруктура.Вставить("Заказы"			, "Заказы");
	лСтруктура.Вставить("Отгрузки"			, "Отгрузки");
	лСтруктура.Вставить("Оплаты"			, "Оплаты");
	
	лСтруктура.Вставить("СвойстваКонтактов"	, "СвойстваКонтактов");
	лСтруктура.Вставить("СвойстваКомпаний"	, "СвойстваКомпаний");
	лСтруктура.Вставить("СвойстваСделок"	, "СвойстваСделок");
	лСтруктура.Вставить("СвойстваСчетов"	, "СвойстваСчетов");
	лСтруктура.Вставить("СвойстваЗаказов"	, "СвойстваЗаказов");
	
	Результат = Новый ФиксированнаяСтруктура(лСтруктура);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипыДанныхДляОбменаСПорталом() Экспорт
	
	лСтруктура = новый Структура;
	
	лСтруктура.Вставить("Компания"		, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Компания);	
	лСтруктура.Вставить("Контакт"		, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Контакт);
	
	лСтруктура.Вставить("Реквизит"				 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Реквизит);
	лСтруктура.Вставить("ЮрАдресРеквизита"		 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита);
	лСтруктура.Вставить("ФактАдресРеквизита"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита);
	лСтруктура.Вставить("БанковскийСчетРеквизита", Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита);	
	
	лСтруктура.Вставить("ГруппаТовара"		, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ГруппаТовара);
	лСтруктура.Вставить("Товар"				, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Товар);	
	лСтруктура.Вставить("ЕдиницаИзмерения"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения);	
	лСтруктура.Вставить("КартинкаФайлТовара", Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.КартинкаФайлТовара);	
	
	лСтруктура.Вставить("Счет"				, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Счет);	
	лСтруктура.Вставить("РеквизитыСчета"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.РеквизитыСчета);	
	
	лСтруктура.Вставить("Сделка"			, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Сделка);	
	лСтруктура.Вставить("ТоварыСделки"		, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ТоварыСделки);	
	лСтруктура.Вставить("РеквизитыСделки"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.РеквизитыСделки);	
	
	
	лСтруктура.Вставить("СвойствоКомпании"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоКомпании);	
	лСтруктура.Вставить("СвойствоКонтакта" 	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоКонтакта);	
	лСтруктура.Вставить("СвойствоТовара"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоТовара);	
	лСтруктура.Вставить("СвойствоСделки"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоСделки);	
	лСтруктура.Вставить("СвойствоСчета"		, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоСчета);	
	лСтруктура.Вставить("СвойствоЗаказа"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.СвойствоЗаказа);	
	
	лСтруктура.Вставить("ЗначениеСвойстваКомпании"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКомпании);	
	лСтруктура.Вставить("ЗначениеСвойстваКонтакта"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКонтакта);	
	лСтруктура.Вставить("ЗначениеСвойстваТовара"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваТовара);	
	лСтруктура.Вставить("ЗначениеСвойстваСделки"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСделки);	
	лСтруктура.Вставить("ЗначениеСвойстваСчета"		 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСчета);	
	лСтруктура.Вставить("ЗначениеСвойстваЗаказа"	 , Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваЗаказа);	
	
	лСтруктура.Вставить("Заказ"						, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Заказ);	
	лСтруктура.Вставить("ТоварыЗаказа"				, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.ТоварыЗаказа);
	лСтруктура.Вставить("УказанныеСвойстваЗаказа"	, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.УказанныеСвойстваЗаказа);
	
	лСтруктура.Вставить("Оплата"			, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Оплата);	
	лСтруктура.Вставить("Отгрузка"			, Перечисления.Б24_ТипыДанныхДляОбменаСПорталом.Отгрузка);	
	
	Результат = Новый ФиксированнаяСтруктура(лСтруктура);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначенияПеречисленияВидыКонтрагентов() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Компания"		, Перечисления.КомпанияЧастноеЛицо.Компания);
	СтруктураДанных.Вставить("ЧастноеЛицо"	, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	
	Результат = Новый ФиксированнаяСтруктура(СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ПолучениеКонстантыНастроек

Функция ПолучитьСпособСинхронизацииДанных(НастройкаСинхронизации) Экспорт
	
	Результат = "";
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если Настройки <> Неопределено тогда
		Настройки.Свойство("СпособСинхронизацииДанных", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипЦены(НастройкаСинхронизации) Экспорт
	Возврат НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ТипЦены");
КонецФункции

Функция ПолучитьСклад(НастройкаСинхронизации) Экспорт
	Возврат НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "Склад");
КонецФункции

#КонецОбласти


#Область ПолучениеОбщихКонстант

Функция ПолучитьПреффиксыВнешнихКодов1С() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организации"							, "ORG_");	
	Результат.Вставить("БанковскиеСчета"						, "B_ORG_");	
	Результат.Вставить("КонтактныеЛица"							, "CL_");	
	Результат.Вставить("ОперацияПоПлатежнойКарте"				, "PC_");	
	Результат.Вставить("ПриходныйКассовыйОрдер"					, "CR_");	
	Результат.Вставить("ПоступлениеБезналичныхДенежныхСредств"	, "SA_");	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПреффиксыВнешнихКодовБитрикс24() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Сделки"				, "S_");	
	Результат.Вставить("Заказы"				, "Z_");	
	Результат.Вставить("Счета"				, "B_");	
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьСтруктуруВидовКИКонтрагентов() Экспорт
	
	Результат = новый Структура;
	
	Результат.Вставить("ПочтаРабочий"		, Справочники.ВидыКонтактнойИнформации.EmailПартнера); 	
	Результат.Вставить("ТелефонРабочий"		, Справочники.ВидыКонтактнойИнформации.ТелефонПартнера); 	
	Результат.Вставить("ПочтаЧастная"		, "");
	Результат.Вставить("ТелефонМобильный"	, "");
	Результат.Вставить("ТелефонДомашний"	, "");
	
	Результат.Вставить("ПочтаРабочийОрг"		, Справочники.ВидыКонтактнойИнформации.EmailОрганизации); 	
	Результат.Вставить("ТелефонРабочийОрг"		, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации); 	
	Результат.Вставить("ПочтаЧастнаяОрг"		, "");
	Результат.Вставить("ТелефонМобильныйОрг"	, "");
	Результат.Вставить("ТелефонДомашнийОрг"		, "");
	
	Результат.Вставить("ПочтаРабочийКонЛица"		, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица); 	
	Результат.Вставить("ТелефонРабочийКонЛица"		, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица); 	
	Результат.Вставить("ПочтаЧастнаяКонЛица"		, "");
	Результат.Вставить("ТелефонМобильныйКонЛица"	, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	Результат.Вставить("ТелефонДомашнийКонЛица"		, "");
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникПартнеры);
	
	ЕстьПочтаЧастная 	= Ложь;
	ЕстьТелефонМоб 		= Ложь;
	ЕстьТелефонДом 		= Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Выборка.Наименование = "Частный" тогда
			ЕстьПочтаЧастная = Истина;	
			Результат.ПочтаЧастная = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Выборка.Наименование = "Мобильный" тогда
			ЕстьТелефонМоб = Истина;	
			Результат.ТелефонМобильный = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Выборка.Наименование = "Домашний" тогда
			ЕстьТелефонДом = Истина;	
			Результат.ТелефонДомашний = Выборка.Ссылка;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьПочтаЧастная тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НовыйКИ.Наименование = "Частный";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ПочтаЧастная = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Если НЕ ЕстьТелефонМоб тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовыйКИ.Наименование = "Мобильный";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ТелефонМобильный = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Если НЕ ЕстьТелефонДом тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовыйКИ.Наименование = "Домашний";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ТелефонДомашний = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	ЕстьПочтаЧастная 	= Ложь;
	ЕстьТелефонМоб 		= Ложь;
	ЕстьТелефонДом 		= Ложь;
	
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
	
	ЕстьПочтаЧастная 	= Ложь;
	ЕстьТелефонМоб 		= Ложь;
	ЕстьТелефонДом 		= Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Выборка.Наименование = "Частный" тогда
			ЕстьПочтаЧастная = Истина;	
			Результат.ПочтаЧастнаяОрг = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Выборка.Наименование = "Мобильный" тогда
			ЕстьТелефонМоб = Истина;	
			Результат.ТелефонМобильныйОрг = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Выборка.Наименование = "Домашний" тогда
			ЕстьТелефонДом = Истина;	
			Результат.ТелефонДомашнийОрг = Выборка.Ссылка;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьПочтаЧастная тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НовыйКИ.Наименование = "Частный";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ПочтаЧастнаяОрг = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Если НЕ ЕстьТелефонМоб тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовыйКИ.Наименование = "Мобильный";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ТелефонМобильныйОрг = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Если НЕ ЕстьТелефонДом тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовыйКИ.Наименование = "Домашний";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ТелефонДомашнийОрг = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Выборка = Справочники.ВидыКонтактнойИнформации.Выбрать(Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров);
	
	ЕстьПочтаЧастная 	= Ложь;
	ЕстьТелефонДом 		= Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И Выборка.Наименование = "Частный" тогда
			ЕстьПочтаЧастная = Истина;	
			Результат.ПочтаЧастнаяКонЛица = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон И Выборка.Наименование = "Домашний" тогда
			ЕстьТелефонДом = Истина;	
			Результат.ТелефонДомашнийКонЛица = Выборка.Ссылка;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьПочтаЧастная тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НовыйКИ.Наименование = "Частный";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ПочтаЧастнаяКонЛица = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Если НЕ ЕстьТелефонДом тогда
		НовыйКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
		НовыйКИ.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров;
		НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НовыйКИ.Наименование = "Домашний";
		НовыйКИ.Используется = Истина;
		НовыйКИ.Записать();
		
		Результат.ТелефонДомашнийКонЛица = НовыйКИ.Ссылка;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПрефиксСвойстваХарактеристики() Экспорт
	Возврат "'Характеристика' ";		
КонецФункции

Функция ПолучитьРазделительНаименованийНоменклатуры() Экспорт
	Возврат " :: ";		
КонецФункции

Функция ПолучитьСписокТиповСвойствЗаказов() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("STRING");
	Результат.Добавить("ENUM");
	Результат.Добавить("NUMBER");
	Результат.Добавить("DATE");
	Результат.Добавить("Y/N");
	
	Возврат Результат;	
	
КонецФункции

#КонецОбласти


#Область Прочие

Функция ПолучитьМассивНастроекОВыгружаемыхДанных(ТолькоДляРегистрацииИзменений = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	Выборка = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеРегистрироватьИзмененияАвтоматически И ТолькоДляРегистрацииИзменений тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("НастройкаСинхронизации", Выборка.Ссылка);
		СтруктураДанных.Вставить("Портал"				 , Выборка.Портал);
		
		ВыгружатьКонтрагентов 	= НастройкиСинхронизацииКонтрагентов(Выборка.Ссылка		, "ВыгружатьКонтрагентов");
		ВыгружатьТовары 		= НастройкиСинхронизацииТоваров(Выборка.Ссылка			, "ВыгружатьТовары");
		ВыгружатьСчета 			= НастройкиСинхронизацииСчетов(Выборка.Ссылка			, "ВыгружатьСчета");
		ВыгружатьСделки 		= НастройкиСинхронизацииСделок(Выборка.Ссылка			, "ВыгружатьСделки");
		ВыгружатьЗаказы 		= НастройкиСинхронизацииЗаказов(Выборка.Ссылка			, "ВыгружатьЗаказы");
		ВыгружатьОплаты 		= НастройкиСинхронизацииЗаказов(Выборка.Ссылка			, "ВыгружатьОплаты");
		ВыгружатьОтгрузки 		= НастройкиСинхронизацииЗаказов(Выборка.Ссылка			, "ВыгружатьОтгрузки");
		
		СтруктураДанных.Вставить("ВыгружатьКонтрагентов", ?(ВыгружатьКонтрагентов 	= Истина И Выборка.СинхронизацияКонтрагентов, Истина, Ложь));
		СтруктураДанных.Вставить("ВыгружатьТовары"		, ?(ВыгружатьТовары 		= Истина И Выборка.СинхронизацияТоваров, Истина, Ложь));
		СтруктураДанных.Вставить("ВыгружатьСчета"		, ?(ВыгружатьСчета 			= Истина И Выборка.СинхронизацияСчетов, Истина, Ложь));
		СтруктураДанных.Вставить("ВыгружатьСделки"		, ?(ВыгружатьСделки 		= Истина И Выборка.СинхронизацияСделок, Истина, Ложь));
		СтруктураДанных.Вставить("ВыгружатьЗаказы"		, ?(ВыгружатьЗаказы 		= Истина И Выборка.СинхронизацияЗаказов, Истина, Ложь));
		
		СтруктураДанных.Вставить("ВыгружатьОплаты"		, ?(ВыгружатьОплаты 		= Истина И Выборка.СинхронизацияЗаказов И ВыгружатьЗаказы = Истина , Истина, Ложь));
		СтруктураДанных.Вставить("ВыгружатьОтгрузки"	, ?(ВыгружатьОтгрузки 		= Истина И Выборка.СинхронизацияЗаказов И ВыгружатьЗаказы = Истина, Истина, Ложь));
		
		
		Результат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьПользовательскоеДеревоГрупп(НастройкаСинхронизации) Экспорт
	
	Результат = Ложь;
	
	ДеревоГрупп = НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ДеревоГрупп");	
	
	Если ЗначениеЗаполнено(ДеревоГрупп) тогда
		
		Выборка = Справочники.Б24_ПользовательскиеГруппыТоваров.ВыбратьИерархически(ДеревоГрупп);
		
		Пока Выборка.Следующий() Цикл
			Результат = Истина;
			Прервать;
		КонецЦикла;
		
		Если Результат = Ложь тогда
			Результат = ДеревоГрупп.Товары.Количество() > 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИспользуемыеТипыСвойствБитрикс24() Экспорт
	
	ПоддерживаемыеТипы = Новый Массив;
	ПоддерживаемыеТипы.Добавить("string");
	ПоддерживаемыеТипы.Добавить("boolean");
	ПоддерживаемыеТипы.Добавить("integer");
	ПоддерживаемыеТипы.Добавить("double");
	ПоддерживаемыеТипы.Добавить("datetime");
	ПоддерживаемыеТипы.Добавить("date");
	ПоддерживаемыеТипы.Добавить("employee");
	ПоддерживаемыеТипы.Добавить("enumeration");
	ПоддерживаемыеТипы.Добавить("url");
	
	Возврат ПоддерживаемыеТипы;	
	
КонецФункции

#КонецОбласти


#Область ПолучениеНастроек

Функция НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Неопределено;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииКонтрагентов = Настройки.НастройкиСинхронизацииКонтрагентов;
	НастройкиСинхронизацииКонтрагентов.Свойство(НазваниеНастройки, Результат); 	
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСинхронизацииТоваров(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Неопределено;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииТоваров = Настройки.НастройкиСинхронизацииТоваров;
	НастройкиСинхронизацииТоваров.Свойство(НазваниеНастройки, Результат); 	
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСинхронизацииСчетов(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Неопределено;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииСчетов = Настройки.НастройкиСинхронизацииСчетов;
	НастройкиСинхронизацииСчетов.Свойство(НазваниеНастройки, Результат); 	
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСинхронизацииСделок(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Неопределено;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииСделок = Настройки.НастройкиСинхронизацииСделок;
	НастройкиСинхронизацииСделок.Свойство(НазваниеНастройки, Результат); 	
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Неопределено;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииЗаказов = Настройки.НастройкиСинхронизацииЗаказов;
	НастройкиСинхронизацииЗаказов.Свойство(НазваниеНастройки, Результат); 	
	
	Возврат Результат;
	
КонецФункции

Функция ПринудительныеСтатусыДокументов(НастройкаСинхронизации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОплатаСчета"	, Ложь);
	Результат.Вставить("ОтгрузкаСчета"	, Ложь);
	Результат.Вставить("ОплатаСделки"	, Ложь);
	Результат.Вставить("ОтгрузкаСделки"	, Ложь);
	Результат.Вставить("ОплатаЗаказа"	, Ложь);
	Результат.Вставить("ОтгрузкаЗаказа"	, Ложь);
	Результат.Вставить("ОплатаОтгрузки"	, Ложь);
	Результат.Вставить("ОтгрузкаОтгрузки", Ложь);
	
	ИнформацияОСтатусах = НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ИнформацияОСтатусах");
	
	Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
		
		Если ИнформацияОСтатусах.Свойство("ПринудительныеСтатусы") тогда
			Для каждого ТекСтрока Из ИнформацияОСтатусах.ПринудительныеСтатусы Цикл
				Если ТекСтрока.НазначениеСтатуса = "Отгрузка" И ЗначениеЗаполнено(ТекСтрока.ИдСтатуса) тогда
					Результат.ОтгрузкаСделки = Истина;	
				ИначеЕсли ТекСтрока.НазначениеСтатуса = "Оплата" И ЗначениеЗаполнено(ТекСтрока.ИдСтатуса) тогда	
					Результат.ОплатаСделки = Истина;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОСтатусах = НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ИнформацияОСтатусах");
	
	Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
		
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОплачен") тогда
			Результат.ОплатаСчета = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОплачен);	
		КонецЕсли;
		
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОтгружен") тогда
			Результат.ОтгрузкаСчета = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОтгружен);	
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОСтатусах = НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ИнформацияОСтатусах");
	
	Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
		
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОплаченЗаказ") тогда
			Результат.ОплатаЗаказа = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОплаченЗаказ);	
		КонецЕсли;
		
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОтгруженЗаказ") тогда
			Результат.ОтгрузкаЗаказа = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОтгруженЗаказ);	
		КонецЕсли;
		                                                                                           
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОплаченаОтгрузка") тогда
			Результат.ОплатаОтгрузки = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОплаченаОтгрузка);	
		КонецЕсли;
		
		Если ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОтгруженаОтгрузка") тогда
			Результат.ОтгрузкаОтгрузки = ЗначениеЗаполнено(ИнформацияОСтатусах.ПереводитьВСтатусКогдаОтгруженаОтгрузка);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьВозможностьСинхронизацииТипаОбъекта(НастройкаСинхронизации, НазваниеНастройки) Экспорт
	
	Результат = Ложь;
	
	Настройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если Настройки <> Неопределено тогда
		
		Настройки.Свойство(НазваниеНастройки, Результат);
	КонецЕсли;
	
	Если Результат <> Истина тогда Результат = Ложь КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти
