#Область ПрограммныйИнтерфейс

// Проверяет код маркировки на соответствие шаблону табачной пачки
//
// Параметры:
//   КодМаркировки - Строка - Код маркировки.
//   GTIN          - Строка - GTIN [Возвращаемое значение].
//Возвращаемое значение:
//   Булево - Истина, если код соответствует табачной пачке.
Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт

	ДлинаКодаМаркировки = СтрДлина(КодМаркировки);
	
	Если ДлинаКодаМаркировки <> 29
		И ДлинаКодаМаркировки <> 25
		И ДлинаКодаМаркировки <> 21 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	EAN = EANПоКодуМаркировки(КодМаркировки);
	Если EAN = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Алфавит = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки();
	Если Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(КодМаркировки, Алфавит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДлинаКодаМаркировки > 21 Тогда
		МРЦ = МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Проверяет код маркировки на соответствие шаблону блока табачных пачек
//
// Параметры:
//   КодМаркировки - Строка - Код маркировки.
//   GTIN          - Строка - GTIN [Исходящий].
//   МРЦ           - Число  - МРЦ [Исходящий].
//   СерийныйНомер - Строка - Серийный номер [Исходящий].
//Возвращаемое значение:
//   Булево - Истина, если код соответствует блоку табачных пачек.
//
Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено, СерийныйНомер = Неопределено) Экспорт
	
	Если Не СтрНачинаетсяС(СокрЛП(КодМаркировки), "(") Тогда
		
		ЭтоКМ25 = (СтрДлина(КодМаркировки) = 25);
		ЭтоКМ35 = (СтрДлина(КодМаркировки) = 35);
		
		Если ЭтоКМ25 Или ЭтоКМ35 Тогда
			
			Алфавит = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки();
			
			ИдентификаторПрименения = Сред(КодМаркировки, 1, 2);
			Если ИдентификаторПрименения <> "01" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "01" + 14 знаков GTIN
			ЗначениеEAN = EANПоКодуМаркировки(Сред(КодМаркировки, 3, 14));
			Если ЗначениеEAN = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ИдентификаторПрименения = Сред(КодМаркировки, 17, 2);
			Если ИдентификаторПрименения <> "21" Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// "21" + 7 знаков Серийный номер
			ЗначениеСерийныйНомер = Сред(КодМаркировки, 19, 7);
			Если Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(ЗначениеСерийныйНомер, Алфавит) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если ЭтоКМ35 Тогда
				
				ИдентификаторПрименения = Сред(КодМаркировки, 26, 4);
				Если ИдентификаторПрименения <> "8005" Тогда
					Возврат Ложь;
				КонецЕсли;
				
				// "8005" + 6 знаков МРЦ
				ЗначениеМРЦ = Сред(КодМаркировки, 30, 6);
				Если Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(ЗначениеМРЦ, АлфавитМРЦ()) Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			EAN           = ЗначениеEAN;
			СерийныйНомер = ЗначениеСерийныйНомер;
			Если ЗначениеЗаполнено(ЗначениеМРЦ) Тогда
				МРЦ = Число(ЗначениеМРЦ) / 100;
			КонецЕсли;
			
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		
		Если Не РезультатРазбора.Разобран Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Обязательный элемент кода маркировки блока.
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗначениеEAN = EANПоКодуМаркировки(Идентификатор01.Значение);
		Если ЗначениеEAN = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Алфавит = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_АлфавитКодаМаркировки();
		
		// Обязательный элемент кода маркировки блока.
		Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
		Если Идентификатор21 = Неопределено
				Или СтрДлина(Идентификатор21.Значение) <> 7
				Или Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор21.Значение, Алфавит) Тогда // Серийный номер
			Возврат Ложь;
		КонецЕсли;
		
		// Необязательный элемент кода маркировки блока.
		Идентификатор93 = РезультатРазбора.ДанныеШтрихкода["93"];
		Если Идентификатор93 <> Неопределено Тогда
			
			Если СтрДлина(Идентификатор93.Значение) <> 4
				Или Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор93.Значение, Алфавит) Тогда // Код проверки
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Необязательный элемент кода маркировки блока.
		Идентификатор8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
		Если Идентификатор8005 <> Неопределено Тогда // МРЦ
			
			Если СтрДлина(Идентификатор8005.Значение) <> 6
				Или Не ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_КодСоответствуетАлфавиту(Идентификатор8005.Значение, АлфавитМРЦ()) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			МРЦ = Число(Идентификатор8005.Значение) / 100;
			
		КонецЕсли;
		
		EAN           = ЗначениеEAN;
		СерийныйНомер = Идентификатор21.Значение;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки
// 
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
//  КонтрольПоВидуПродукции - Булево - Истина, если будет выполняться проверка по вложенным видам продукции существующих
//  элементов справочника "Штрихкоды упаковок".
// Возвращаемое значение:
//  Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодЛогистическойУпаковки(КодМаркировки) Экспорт
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки);
	Если ЭтоGTIN Тогда
		Возврат Ложь;
	КонецЕсли;

	ТипШтрихкодаБПО = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(КодМаркировки);
	Если ТипШтрихкодаБПО = "ITF14" Тогда
	Возврат Ложь;
	КонецЕсли;
	Если ТипШтрихкодаБПО = "CODE39" Тогда
		Возврат Ложь;
	КонецЕсли;

	РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	Если Не РезультатРазбора.Разобран Тогда // Проверка на штрихкод GS1.
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеШтрихкода01 = РезультатРазбора.ДанныеШтрихкода.Получить("01");
	ДанныеШтрихкода02 = РезультатРазбора.ДанныеШтрихкода.Получить("02");

	GTIN = "";
	Если ДанныеШтрихкода01 <> Неопределено Тогда
		GTIN = ДанныеШтрихкода01.Значение;
	ИначеЕсли ДанныеШтрихкода02 <> Неопределено Тогда
		GTIN = ДанныеШтрихкода02.Значение;
	КонецЕсли;

	Если Не ПустаяСтрока(GTIN) Тогда

		ВидПродукции = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ШтрихкодированиеИСВызовСервера_ВидПродукцииПоGTIN(GTIN);
		Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки или блока.
// 
// Параметры:
// 	КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует логистической упаковке или коду блока.
Функция ЭтоКодУпаковки(КодМаркировки) Экспорт
	
	Возврат ЭтоКодМаркировкиБлока(КодМаркировки) Или ЭтоКодЛогистическойУпаковки(КодМаркировки);
	
КонецФункции

// Возвращает состав кода маркировки табачной пачки или табачного блока.
// 
// Параметры:
//  КодМаркировки - Строка - код маркировки табачной пачки или блока.
// Возвращаемое значение:
//  Неопределено, Структура - Описание:
// * ГрупповаяУпаковка - Булево - Истина, если код маркировки является кодом блока, Ложь - кодом пачки.
// * GTIN - Строка - GTIN табачной продукции.
// * Серия - Строка - серийный номер.
// * МРЦ - Число - Максимальная розничная цена.
// * КодПроверки - Строка - Код проверки групповой упаковки.
Функция СоставКодаМаркировки(КодМаркировки) Экспорт
	
	СоставКодаМаркировки = Новый Структура("ГрупповаяУпаковка, GTIN, СерийныйНомер, МРЦ, КодПроверки");
	
	Если ЭтоКодМаркировкиБлока(КодМаркировки) Тогда
		
		РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		СоставКодаМаркировки.ГрупповаяУпаковка = Истина;
		ДанныеШтрихкода01   = РезультатРазбора.ДанныеШтрихкода["01"];
		ДанныеШтрихкода21   = РезультатРазбора.ДанныеШтрихкода["21"];
		ДанныеШтрихкода92   = РезультатРазбора.ДанныеШтрихкода["92"];
		ДанныеШтрихкода93   = РезультатРазбора.ДанныеШтрихкода["93"];
		ДанныеШтрихкода8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
		
		Если ДанныеШтрихкода01 <> Неопределено Тогда
			СоставКодаМаркировки.GTIN = ДанныеШтрихкода01.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода21 <> Неопределено Тогда
			СоставКодаМаркировки.СерийныйНомер = ДанныеШтрихкода21.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода92 <> Неопределено Тогда
			СоставКодаМаркировки.КодПроверки = ДанныеШтрихкода92.Значение;
		ИначеЕсли ДанныеШтрихкода93 <> Неопределено Тогда
			СоставКодаМаркировки.КодПроверки = ДанныеШтрихкода93.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода8005 <> Неопределено Тогда
			СоставКодаМаркировки.МРЦ = ДанныеШтрихкода8005.Значение;
		КонецЕсли;
		
	ИначеЕсли ЭтоКодМаркировкиТабачнойПачки(КодМаркировки) Тогда
		
		СоставКодаМаркировки.ГрупповаяУпаковка = Ложь;
		СоставКодаМаркировки.GTIN              = Лев(КодМаркировки, 14);
		СоставКодаМаркировки.СерийныйНомер     = Сред(КодМаркировки, 15, 7);
		СоставКодаМаркировки.КодПроверки       = Сред(КодМаркировки, 22);
		СоставКодаМаркировки.МРЦ               = МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Дополняет параметры сканирования свойствами специфичными для табачной продукции.
//
// Параметры:
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Функция ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции = Неопределено) Экспорт
	
	ВидПродукцииТабачная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная");
	
	Если ЗначениеЗаполнено(ВидПродукции) И ВидПродукции <> ВидПродукцииТабачная Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ВидПродукцииТабачная);
	
	КонтролироватьСтатусы = ИнтеграцияМОТПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки();
	
	Если КонтролироватьСтатусы Тогда
		ВариантПолученияМРЦ = "ВычислениеИЗапрос";
	Иначе
		ВариантПолученияМРЦ = "Вычисление";
	КонецЕсли;
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",             Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                   КонтролироватьСтатусы);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхУпаковокМОТП", КонтролироватьСтатусы);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                    Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                              Неопределено);
	ПараметрыСканирования.Вставить("ВариантПолученияМРЦ",                      ВариантПолученияМРЦ);
	ПараметрыСканирования.Вставить("КонтрольСоставаУпаковокМОТП",              Ложь);
	
	Возврат Истина;
	
КонецФункции

// Заполняет параметры сканирования по контексту.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  Контекст - УправляемаяФорма, ДокументСсылка - источник заполнения параметров сканирования.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - по данному параметру будет проиходить отбор заполнения.
//  ФормаВыбора - УправляемаяФорма - Форма выбора.
Процедура ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора) Экспорт

	ТабачнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная");
	Если ЗначениеЗаполнено(ВидПродукции) И ВидПродукции <> ТабачнаяПродукция Тогда
		
		Возврат;
		
	ИначеЕсли Контекст = Неопределено И ВидПродукции = ТабачнаяПродукция Тогда
		
		ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования);
		Возврат;
		
	КонецЕсли;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
		
		ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования);
		
	//ИначеЕсли ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, "Документ.МаркировкаТоваровИСМП") Тогда
	//	
	//	ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования);
	//	
	//ИначеЕсли ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЭтоКонтекстОбъекта(Контекст, "Документ.СписаниеКодовМаркировкиИСМП") Тогда
	//	
	//	ЗаполнитьПараметрыСканированияСписаниеКодовМаркировки(Контекст, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычисляет штрихкода EAN по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Описание
// Возвращаемое значение:
//  Неопределено, Строка - Описание
Функция EANПоКодуМаркировки(КодМаркировки) Экспорт
	
	Если СтрНачинаетсяС(КодМаркировки, "(") Тогда
		GTIN = Сред(КодМаркировки, 5, 14);
	Иначе
		GTIN = Лев(КодМаркировки, 14);
	КонецЕсли;
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(GTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
// 	GTIN - Строка - GTIN.
// Возвращаемое значение:
// 	Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(GTIN);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
// 	Число, Неопределено - МРЦ.
Функция МРЦКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	
	Если Не РезультатРазбора.Разобран Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Идентификатор8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
		Если Идентификатор8005 <> Неопределено И СтрДлина(Идентификатор8005.Значение) = 6 Тогда
			
			МРЦ = Число(Идентификатор8005.Значение) / 100;
			
			Возврат МРЦ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет МРЦ из кода маркировки табачной пачки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки табачной пачки.
// Возвращаемое значение:
// 	Неопределено, Число - МРЦ.
Функция МРЦКодаМаркировкиТабачнойПачки(КодМаркировки) Экспорт
	
	ДлинаКода = СтрДлина(КодМаркировки);
	
	Если ДлинаКода < 25 Тогда
		// МРЦ может быть рассчитано только для кодов длиной 29 и 25 знаков.
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаМРЦ = Сред(КодМаркировки, 22, 4);
	
	Алфавит = АлфавитМРЦ();
	
	МРЦ    = 0;
	Индекс = 1;
	Пока Индекс <= 4 Цикл
		
		Символ = Сред(СтрокаМРЦ, Индекс, 1);
		ИндексСимвола = СтрНайти(Алфавит, Символ) - 1;
		Если ИндексСимвола < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
	Если МРЦ <= 500000
		И МРЦ%100 = 0 Тогда
		Возврат МРЦ / 100;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует МРЦ для блока.
// 
// Параметры:
//  МРЦ - Число - Максимальная розничная цена.
// Возвращаемое значение:
//  Строка - МРЦ блока.
Функция ЗначениеМРЦДляБлока(МРЦ) Экспорт
	
	СтрокаМРЦ = Формат(МРЦ * 100, "ЧГ=0;"); // МРЦ в копейках
	Пока СтрДлина(СтрокаМРЦ) < 6 Цикл
		СтрокаМРЦ = "0" + СтрокаМРЦ;
	КонецЦикла;
	
	Возврат СтрокаМРЦ;
	
КонецФункции

// Приводит код маркировки табачной продукции к виду со скобками и отсекает криптохвост.
// 
// Параметры:
//  КодМаркировки - Строка - штрихкод марки.
//  УчитыватьМРЦ - Булево - Истина, если необходимо отразить МРЦ в нормализованной коде маркировки.
// Возвращаемое значение:
//  Строка - Нормализованный код маркировки.
Функция НормализоватьКодМаркировки(Знач КодМаркировки, УчитыватьМРЦ = Истина, ОтключенныйФункционал = Ложь) Экспорт
	
	НормализованныйКод = КодМаркировки;
	
	Если НЕ ОтключенныйФункционал Тогда
		Возврат НормализованныйКод;
	КонецЕсли;
	
	EAN           = Неопределено;
	СерийныйНомер = Неопределено;
	МРЦ           = Неопределено;
	
	Если ЭтоКодМаркировкиБлока(КодМаркировки, EAN, МРЦ, СерийныйНомер) Тогда
		
		Если МРЦ = Неопределено Или Не УчитыватьМРЦ Тогда
			НормализованныйКод = СтрШаблон(
				"(01)%1(21)%2",
				ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоШтрихкодуEAN(EAN),
				СерийныйНомер);
		Иначе
			НормализованныйКод = СтрШаблон(
				"(01)%1(21)%2(8005)%3",
				ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоШтрихкодуEAN(EAN),
				СерийныйНомер,
				ЗначениеМРЦДляБлока(МРЦ));
		КонецЕсли;
		
	ИначеЕсли ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN, МРЦ) Тогда
		
		Если МРЦ = Неопределено Или Не УчитыватьМРЦ Тогда
			НормализованныйКод = Лев(КодМаркировки, 21);
		Иначе
			НормализованныйКод = Лев(КодМаркировки, 25);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НормализованныйКод;
	
КонецФункции

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки до нормализации.
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиМОТП(КодМаркировки, УчитыватьМРЦ = Ложь) Экспорт
	
	Если ЭтоКодМаркировкиТабачнойПачки(КодМаркировки) Тогда
		ЗначениеДляПоиска = НормализоватьКодМаркировки(КодМаркировки, УчитыватьМРЦ);
	ИначеЕсли ЭтоКодМаркировкиБлока(КодМаркировки) Тогда
		ЗначениеДляПоиска = НормализоватьКодМаркировки(КодМаркировки, УчитыватьМРЦ);
	Иначе
		ЗначениеДляПоиска = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_КодМаркировкиБезСкобок(КодМаркировки);
	КонецЕсли;
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод строкой.
// Возвращаемое значение:
// 	Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ЭтоШтрихкодТабачнойПродукции = ЭтоКодМаркировкиТабачнойПачки(Штрихкод)
		Или ЭтоКодМаркировкиБлока(Штрихкод)
		Или ЭтоКодЛогистическойУпаковки(Штрихкод);
	
	Если ЭтоШтрихкодТабачнойПродукции Тогда
		ПредставлениеШтрихкода = Штрихкод;
	Иначе
		ПредставлениеШтрихкода = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПредставлениеШтрихкода(Штрихкод);
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Допустимые символы, которые может содержать МРЦ в коде маркировки.
// 
// Возвращаемое значение:
//  Строка - алфавит МРЦ.
Функция АлфавитМРЦ()
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?";
	
КонецФункции

// Дополняются свойства параметров сканирования и заполняются значения для документа "Маркировка товаров ИСМП".
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияМаркировкаТоваров(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = Истина;
	ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП = Истина;
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Эмитирован"));
	// Для поддержки новых упаковок
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(
		ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Неопределен"));
	
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	ПараметрыСканирования.ДоступнаПечатьЭтикеток                         = Истина;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
		ПараметрыСканирования.Владелец    = Контекст.Объект.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

// Дополняются свойства параметров сканирования и заполняются значения для документа "Списание кодов маркировки".
//
// Параметры:
//  Контекст - УправляемаяФорма, ДокументСсылка, СправочникСсылка - Контекст.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
Процедура ЗаполнитьПараметрыСканированияСписаниеКодовМаркировки(Контекст, ПараметрыСканирования)
	
	ВидПродукции = Неопределено;
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		ВидПродукции = Контекст.Объект.ВидПродукции;
	КонецЕсли;
	
	Если Не ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Нанесен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенОплачен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.НанесенНеОплачен"));
	ПараметрыСканирования.ДопустимыеСтатусыМОТП.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.Эмитирован"));
	ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = "ШтрихкодыУпаковок";
	ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки         = "ШтрихкодУпаковки";
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		ПараметрыСканирования.Организация = Контекст.Объект.Организация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти