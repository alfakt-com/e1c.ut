

#Область Прочие

Функция ПолучитьТипОбъекта(ТипОбъекта) Экспорт
	
	Возврат Тип(ТипОбъекта);
	
КонецФункции

// Функция - Проверяет, является ли база копией
// 
// Возвращаемое значение:
//   - Истина, если это копия 
//
Функция ЭтоКопияБазы() Экспорт
	
	Результат = Ложь;
	
	ИнформацияОБазе = Константы.ПараметрыБлокировкиРаботыСВнешнимиРесурсами.Получить().Получить();
	Если ИнформацияОБазе <> Неопределено тогда
		Результат =  ИнформацияОБазе.РаботаСВнешнимиРесурсамиЗаблокирована;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекущегоПользователя() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

Функция БазаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Константы.ИспользоватьРазделениеПоОбластямДанных.Получить(); 	
	
КонецФункции  

Функция ДополнительныеРеквизитыИСведенияИспользуются() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") = Истина;
	
КонецФункции

Функция ВыполнитьОбрезкуЛогаВСеансе() Экспорт
	
	ОбрезатьИсториюОбменов 	 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ОбрезатьИсториюОбменов");
	ЧислоДнейХраненияИстории = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ЧислоДнейХраненияИстории");
	РежимОтладки 			 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","РежимОтладки");
	
	ОбрезатьИсториюОбменов 	 = ?(ЗначениеЗаполнено(ЧислоДнейХраненияИстории), ЧислоДнейХраненияИстории, 7);
	ЧислоДнейХраненияИстории = ?(ЗначениеЗаполнено(ОбрезатьИсториюОбменов), ОбрезатьИсториюОбменов, Истина);
	РежимОтладки 			 = ?(ЗначениеЗаполнено(РежимОтладки), РежимОтладки, Ложь);
	
	Если ОбрезатьИсториюОбменов тогда
		Б24_ОбщегоНазначенияСервер.ОбрезатьЛог(Неопределено, ЧислоДнейХраненияИстории);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначенияПеречисленияВариантыИспользованияХарактеристикНоменклатуры() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НеИспользовать"					, Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	СтруктураДанных.Вставить("ИндивидуальныеДляНоменклатуры"	, Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	СтруктураДанных.Вставить("ОбщиеДляВидаНоменклатуры"			, Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	СтруктураДанных.Вставить("ОбщиеСДругимВидомНоменклатуры"	, Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	
	Результат = Новый ФиксированнаяСтруктура(СтруктураДанных);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПризнакИспользованияХарактеристикиНоменклатуры() Экспорт
	Возврат Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();	
КонецФункции

#КонецОбласти
