// Обработчик события ПриЗаписиНаСервере в формах СНТ.
//
// Параметры:
// Форма - Форма, УправляемаяФорма - Форма СНТ, в которой обрабатывается событие.
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// Оставили повторную запись документа СНТ, так как значение в реквизит "НомерСНТ" не записывался без повторной записи.
Процедура ФормаСНТПослеЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
	Ссылка = ТекущийОбъект.Ссылка;
	СНТОбъект = Ссылка.ПолучитьОбъект();
	СНТОбъект.Записать();
КонецПроцедуры

// Обработчик события ОбработкаОповещения в формах СНТ.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма СНТ, в которой обрабатывается оповещение.
//
Процедура СНТОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	
	Ссылка = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если НЕ Ссылка.Пустая() И СНТКлиентСервер.ЭтоОповещениеПодсистемыСНТ(ИмяСобытия) Тогда
		Форма.Прочитать();
		ОбновитьПредставлениеСНТ(Форма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ЭСФ, который является актуальным для СНТ.
Функция АктуальныйЭСФДляСНТ(Знач СНТ) Экспорт
	
	ЭСФ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭСФ.Ссылка КАК ЭСФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.СНТ = &СНТ И &СНТ <> ЗНАЧЕНИЕ(Документ.СНТ.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭСФ.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("СНТ", СНТ);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЭСФ = Выборка.ЭСФ; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭСФ;
	
КонецФункции

// Обновляет представление гиперссылки ЭСФ в формах СНТ.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма СНТ, 
//   в которой необходимо обновить представление гиперссылки ЭСФ.
//
Процедура ОбновитьПредставлениеСНТ(Форма, Знач СсылкаЭСФ = Неопределено) Экспорт
	
	СсылкаНаЭСФ = АктуальныйЭСФДляСНТ(?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка));

	Если ЗначениеЗаполнено(СсылкаЭСФ) Тогда
		ЭСФ = СсылкаЭСФ;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаЭСФ) Тогда
		ЭСФ = СсылкаНаЭСФ;
	Иначе
		ЭСФ = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	КонецЕсли;
	
	Элементы = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.ЭлементыФормы, Форма.Элементы);
	Форма.РеквизитыЭСФ = ЭСФКлиентСервер.РеквизитыЭСФ(Форма);
	
	Если ТипЗнч(ЭСФ) = Тип("ДокументСсылка.ЭСФ")  Тогда
		Если ЭСФ.СчетФактура <> Неопределено И ЗначениеЗаполнено(ЭСФ.СчетФактура.Ссылка) Тогда
			Форма.РеквизитыЭСФ.СсылкаЭСФ = АктуальныйЭСФ(ЭСФ.СчетФактура);
		Иначе
			Если СНТКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
				Если ТипЗнч(Форма.Параметры.Ключ) = Тип("ДокументСсылка.СНТ") Тогда
					Форма.ПредставлениеЭСФ = Форма.ПараметрОснование; 
				КонецЕсли;
			Иначе
				Если ТипЗнч(Форма.Параметры.Ключ) = Тип("ДокументСсылка.СНТ") Тогда
					Форма.РеквизитыЭСФ.СсылкаЭСФ = ЭСФ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
				Форма.ПредставлениеЭСФ = НСтр("ru = 'ЭСФ отсутствует'");
				Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветЧерный();			
			Иначе
				Форма.ПредставлениеЭСФ = ЭСФ;
				Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();		
			КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
		Форма.ПредставлениеЭСФ = НСтр("ru = 'ЭСФ отсутствует'");
		Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветЧерный();							
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ЭСФ, который является актуальным для СНТ.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - 
//   Счет-фактура, для которого необходимо найти ЭСФ.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭСФ, Неопределено - Ссылка на актуальный ЭСФ.
//   Если актуальный ЭСФ не найден, то Неопределено.
//
Функция АктуальныйЭСФ(Знач СчетФактура) Экспорт
	
	ЭСФ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.ЭСФ КАК ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура = &СчетФактура";
	
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЭСФ = Выборка.ЭСФ; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭСФ;
	
КонецФункции

// Заполняет документ СНТ на основании первичного документа.
//
// Параметры:
//  СсылкаПервичныйДокументСНТ - ДокументСсылка -
//   Счет-Документа, на основании которого необходимо заполнить СНТ.
//  ОбъектСНТ - ДокументОбъект.СНТ - СНТ, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийСНТ(Знач СсылкаПервичныйДокументСНТ, ОбъектСНТ, ДополнительныеПараметры = Неопределено) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().ЗаполнитьИсходящийСНТ(СсылкаПервичныйДокументСНТ, ОбъектСНТ, ДополнительныеПараметры);
	
КонецПроцедуры

Функция СтруктурнаяЕдиницаСНТ(СНТ, Действие) Экспорт
	
	СтруктурнаяЕдиница = Неопределено;
	
	Если СНТ.Направление = Перечисления.НаправленияСНТ.Входящий 
		И ЗначениеЗаполнено(СНТ.Получатель) И ТипЗнч(СНТ.Получатель) = СНТСерверПереопределяемый.ПолучитьТипПодразделенияОрганизаций() Тогда
		
		СтруктурнаяЕдиница = СНТ.Получатель;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз
		И ЗначениеЗаполнено(СНТ.Получатель) И ТипЗнч(СНТ.Получатель) = СНТСерверПереопределяемый.ПолучитьТипПодразделенияОрганизаций() Тогда
		
		СтруктурнаяЕдиница = СНТ.Получатель;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами
		И ЗначениеЗаполнено(СНТ.Получатель) И ТипЗнч(СНТ.Получатель) <> СНТСерверПереопределяемый.ПолучитьТипКонтрагенты()
		И (Действие = СНТКлиентСервер.ДействиеПодтверждение() ИЛИ Действие = СНТКлиентСервер.ДействиеОтклонение()) Тогда
		
		СтруктурнаяЕдиница = СНТ.Получатель;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий
		И ЗначениеЗаполнено(СНТ.Поставщик) И ТипЗнч(СНТ.Поставщик) = СНТСерверПереопределяемый.ПолучитьТипПодразделенияОрганизаций() Тогда
		
		СтруктурнаяЕдиница = СНТ.Поставщик;
		
	ИначеЕсли ЗначениеЗаполнено(СНТ.Организация) Тогда
		
		СтруктурнаяЕдиница = СНТ.Организация;
		
	Иначе
		
		СтруктурнаяЕдиница = Неопределено;
		
	КонецЕсли;
		
	Возврат СтруктурнаяЕдиница;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с источниками происхождения

//Процедура заполняет признаки происхождения по умолчанию в документах
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ДанныеДляЗаполненияПП, ДокументОбъект) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().ЗаполнитьПустыеПризнакиПроисхождения(ДанныеДляЗаполненияПП, ДокументОбъект);
	
КонецПроцедуры

#Область ПараметрыДляЗаполнениеСНТ

Функция ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияСНТ = ПодготовитьТаблицыДанныхДляЗаполненияСНТ(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияСНТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	НеРазбиватьДокумент = Ложь;
	Если ПараметрыЗаполнения.Свойство("НеРазбиватьДокумент") Тогда
		НеРазбиватьДокумент = ПараметрыЗаполнения.НеРазбиватьДокумент;
	КонецЕсли;
	
	ПодбиратьИсточникиПроисхождения = Ложь;
	Если ПараметрыЗаполнения.Свойство("ПодбиратьИсточникиПроисхождения") Тогда
		ПодбиратьИсточникиПроисхождения = ПараметрыЗаполнения.ПодбиратьИсточникиПроисхождения;
	КонецЕсли;
	
	СоответсвиеДляОтбораПоСкладу = Неопределено;
	Если ПараметрыЗаполнения.Свойство("СоответсвиеДляОтбораПоСкладу") Тогда
		СоответсвиеДляОтбораПоСкладу = ПараметрыЗаполнения.СоответсвиеДляОтбораПоСкладу;
	КонецЕсли;
	
	ТаблицаРеквизитов = ТаблицыДанныхДляЗаполненияСНТ.ТаблицаРеквизитов;
	ТаблицаТовары = ТаблицыДанныхДляЗаполненияСНТ.ТаблицаТовары;
	ТаблицаОстатков = ТаблицыДанныхДляЗаполненияСНТ.ТаблицаОстатков;
	
	СтруктураДокумента = СНТСерверПовтИсп.ПолучитьПустуюСтруктуруДокументаСНТ();
	
	Реквизиты = СтруктураДокумента.Реквизиты;
	Товары = СтруктураДокумента.Товары;
	ТоварыВС = СтруктураДокумента.ТоварыВС;
	
	СобщениеВыведено = Ложь;
	
	ТекущийДокументОснования = Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;
		Иначе
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		ТипДокумента = ТипЗнч(ТекущийДокументОснования);

		Реквизиты.Очистить();
		Товары.Очистить();
		ТоварыВС.Очистить();
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		//Заполним поставщика-СП
		Если ЗначениеЗаполнено(СтрокаРеквизитов.СтруктурноеПодразделение) Тогда
			Если (НоваяСтрокаРеквизитов.ТипСНТ =  Перечисления.ТипыСНТ.ВозвратТоваров И ТипЗнч(СтрокаРеквизитов.ДокументОснование) = СНТСерверПереопределяемый.ПолучитьТипДокументаВозвратОтПокупателя()) ИЛИ НоваяСтрокаРеквизитов.ВидОперации =  Перечисления.ВидыОперацийСНТ.Ввоз Тогда
				НоваяСтрокаРеквизитов.СтруктурноеПодразделениеПолучатель = СтрокаРеквизитов.СтруктурноеПодразделение;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтрокаРеквизитов.Валюта) <> Тип("СправочникСсылка.Валюты") Тогда
			НоваяСтрокаРеквизитов.Валюта = ЭСФВызовСервера.ВалютаРегламентированногоУчета();
		КонецЕсли; 
		
		НоваяСтрокаРеквизитов.КурсВалюты = СНТСерверПереопределяемый.ПолучитьКурсВалютыПриСозданииСНТ(НоваяСтрокаРеквизитов.Валюта, ТекущаяДата()); 
		
		ПараметрыОтбора = Новый Структура;
		Если ТипДокумента <> СНТСерверПереопределяемый.ПолучитьТипДокументаНаИмпорт() Тогда
			ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		Иначе 
			ПараметрыОтбора.Вставить("СкладПолучатель", СтрокаРеквизитов.СкладПолучатель);
		КонецЕсли;
		
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		ТоварыИП = Товары.СкопироватьКолонки();
		
		ЕстьТовары = Ложь;
		КоличествоСтрокТоварыВС = 0;
		
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			
			УчитыватьАкциз = СтрокаТовары.УчитыватьАкциз;
			СуммаВключаетАкциз = СтрокаТовары.СуммаВключаетАкциз;
			УчитыватьНДС = СтрокаТовары.УчитыватьНДС;
			СуммаВключаетНДС = СтрокаТовары.СуммаВключаетНДС;
			БезНДС = СтрокаТовары.БезНДС;
			
			// Устанавливаем признак УчитыватьНДС даже в случае,если документ выписывается организацией не плательщиком НДС
			Если НЕ УчитыватьНДС И БезНДС Тогда 
				УчитыватьНДС  = Истина;
				СтрокаТовары.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(БезНДС);
			КонецЕсли;
			
			Если ПодбиратьИсточникиПроисхождения И СтрокаРеквизитов.РаспределятьТоварыПоИП Тогда
				
				ЕдиницаИзмеренияОтбора = СНТСерверПереопределяемый.ПолучитьЕдиницуИзмеренияОтбора(СтрокаТовары);
				
				ПараметрыОтбораОстатков = Новый Структура;
				ПараметрыОтбораОстатков.Вставить("Организация"		, СтрокаТовары.Организация);
				Если ЗначениеЗаполнено(СтрокаТовары.СтруктурноеПодразделение) Тогда
					ПараметрыОтбораОстатков.Вставить("СтруктурноеПодразделение"		, СтрокаТовары.СтруктурноеПодразделение);
				КонецЕсли;	
				Если ТипДокумента <> СНТСерверПереопределяемый.ПолучитьТипДокументаВозвратОтПокупателя() И ТипДокумента <> СНТСерверПереопределяемый.ПолучитьТипДокументаНаИмпорт() Тогда
					ПараметрыОтбораОстатков.Вставить("Склад"			, СтрокаТовары.СкладОтправитель);
				Иначе
					ПараметрыОтбораОстатков.Вставить("Склад"			, СтрокаТовары.СкладПолучатель);
				КонецЕсли;
			
				ПараметрыОтбораОстатков.Вставить("Товар"			, СтрокаТовары.Товар);
				ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"	, ЕдиницаИзмеренияОтбора);
				Если НЕ СтрокаРеквизитов.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение Тогда
					ПараметрыОтбораОстатков.Вставить("ПризнакУчетаНаВиртуальномСкладе"	, Истина);
				КонецЕсли;

				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
				
				ОбщаяСумма = СтрокаТовары.Сумма;
				Коэффициент = СНТСерверПереопределяемый.КоэффициентАкцизаИзНоменклатуры(СтрокаТовары.Товар);
				СуммаАкциза = ?(УчитыватьАкциз, (СтрокаТовары.Количество * СтрокаТовары.СтавкаАкцизаЧисло/?(Коэффициент = 0, 1, Коэффициент)), 0);
				СуммаНДС = СтрокаТовары.СуммаНДС;
				
				ОбщаяСуммаРаспределенных				= 0;
				ОбщаяСуммаАкцизаРаспределенных			= 0;
				ОбщаяСуммаНДСРаспределенных				= 0;
				
				КоличествоОсталосьПогасить = СтрокаТовары.Количество;
				Для Каждого СтрокаИП Из МассивСтрокОстатков Цикл
					Если КоличествоОсталосьПогасить <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаИП.КоличествоОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСтроки = Мин(СтрокаИП.КоличествоОстаток, КоличествоОсталосьПогасить);
					
					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСтроки;
					НоваяСтрока = ТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары,,"ЕдиницаИзмерения, СуммаНДС, СуммаАкциза, СуммаБезНалогов, Сумма");
					
					Если ЗначениеЗаполнено(СтрокаИП.ИсточникПроисхождения) И ЗначениеЗаполнено(СтрокаИП.ИсточникПроисхождения.КодТНВЭД) Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП.ИсточникПроисхождения);
					Иначе
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП.ИсточникПроисхождения,,"КодТНВЭД");
					КонецЕсли;	
					
					КодГСВС = "";
					ФизическаяМетка = "";
					ИдентификаторСклада = "";
					КлючевыеПоляЗаполнены = Истина;
					СписокНезаполненныхПолей = "";
					ДополнительныйИдентификатор = "";
					
					Если ЗначениеЗаполнено(СтрокаИП.ГСВС) Тогда
						КодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаИП.ГСВС, "Наименование");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаИП.ФизическаяМетка) Тогда
						ФизическаяМетка = "[" + СтрокаИП.ФизическаяМетка + "]";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаИП.ДополнительныйИдентификатор) Тогда
						ДополнительныйИдентификатор = "<" + Формат(СтрокаИП.ДополнительныйИдентификатор,"ЧГ=") + ">";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаРеквизитов.СкладОтправкиИдентификатор) Тогда
						ИдентификаторСклада = Формат(СтрокаРеквизитов.СкладОтправкиИдентификатор, "ЧГ=");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КодГСВС) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Код ГСВС, ";
					КонецЕсли;
					
					Если НЕ (СтрокаРеквизитов.ПоставщикРозничнаяРеализация Или СтрокаРеквизитов.ПоставщикФизическоеЛицо) И НЕ ЗначениеЗаполнено(ИдентификаторСклада) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Идентификатор склада";
					КонецЕсли;
					
					//при возврате товаров поставщику заполняем входящий ИД товара
					Если ЗначениеЗаполнено(СтрокаИП.ВходящийИдентификаторТовара) Тогда
						НоваяСтрока.ИдентификаторТовара = СтрокаИП.ВходящийИдентификаторТовара;
					ИначеЕсли КлючевыеПоляЗаполнены Тогда
						//ИдентификаторТовара = "%1%2%3(%4)";
						ИдентификаторТовара = "%1%2%3";    //исключена метка склада с 09.11.2020
						ИдентификаторТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИдентификаторТовара, КодГСВС, ФизическаяМетка, ДополнительныйИдентификатор, ИдентификаторСклада ); 
						НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
					Иначе
						ТекстОшибки = НСтр("ru='Не удалось заполнить поле ""Идентификатор товара"" по причине: не заполнены поля: %1.' ");
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СписокНезаполненныхПолей);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ИдентификаторТовара, "Объект");	
					КонецЕсли;
										
					//Устанавливаем признак происхождения	
					Если НЕ ЗначениеЗаполнено(СтрокаИП.ТипПроисхождения) ИЛИ НЕ ЗначениеЗаполнено(СтрокаИП.ПризнакПеречняИзьятий) Тогда
						
						НоваяСтрока.ПризнакПроисхождения = "5";
						
						ТекстОшибки = НСтр(
						"ru = 'Для товара ""%1"" не указан Тип происхождения или отсутствуют данные по ГСВС в источнике происхождения.
						|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению. 
						|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
						
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						НоваяСтрока.Товар);
						
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ПризнакПроисхождения, "Объект");	
						
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И СтрокаИП.ПризнакПеречняИзьятий Тогда
						НоваяСтрока.ПризнакПроисхождения = "1";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И НЕ СтрокаИП.ПризнакПеречняИзьятий Тогда
						НоваяСтрока.ПризнакПроисхождения = "2";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И СтрокаИП.ПризнакПеречняИзьятий Тогда
						НоваяСтрока.ПризнакПроисхождения = "3";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И НЕ СтрокаИП.ПризнакПеречняИзьятий Тогда
						НоваяСтрока.ПризнакПроисхождения = "4";
					Иначе
						НоваяСтрока.ПризнакПроисхождения = "5";
					КонецЕсли;
					
					НоваяСтрока.ЕдиницаИзмерения = СтрокаИП.ЕдиницаИзмеренияДокумента;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.ТоварНаименование) Тогда
						НоваяСтрока.ТоварНаименование = СтрокаТовары.ТоварНаименование;
					КонецЕсли;
					
					НоваяСтрока.ИсточникПроисхождения = СтрокаИП.ИсточникПроисхождения; 
					НоваяСтрока.Количество = КоличествоСтроки;
					
					//Пересчет суммовых значений  
					ДоляКоличестваНовойСтроки = КоличествоСтроки / СтрокаТовары.Количество;
					
					НоваяСтрока.Сумма = Окр(ОбщаяСумма * ДоляКоличестваНовойСтроки, 2);
					НоваяСтрока.СуммаАкциза = Окр(СуммаАкциза * ДоляКоличестваНовойСтроки, 2); 
					НоваяСтрока.СуммаНДС = Окр(СуммаНДС * ДоляКоличестваНовойСтроки, 2);
					
					НоваяСтрока.СуммаБезНалогов = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС - НоваяСтрока.СуммаАкциза;
					НоваяСтрока.ОборотПоРеализации = НоваяСтрока.СуммаБезНалогов - НоваяСтрока.СуммаНДС;
					
					ОбщаяСуммаРаспределенных				= ОбщаяСуммаРаспределенных + НоваяСтрока.Сумма;
					ОбщаяСуммаАкцизаРаспределенных			= ОбщаяСуммаАкцизаРаспределенных + НоваяСтрока.СуммаАкциза;
					ОбщаяСуммаНДСРаспределенных				= ОбщаяСуммаНДСРаспределенных + НоваяСтрока.СуммаНДС;

					СтрокаИП.КоличествоОстаток = СтрокаИП.КоличествоОстаток - КоличествоСтроки; 
					НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе = СтрокаИП.ПризнакУчетаНаВиртуальномСкладе;
					
					//при возврате товаров поставщику заполняем входящий номер строки по основной СНТ
					Если ЗначениеЗаполнено(СтрокаИП.ВходящийНомерСтроки) Тогда
						НоваяСтрока.НомерСтрокиСНТ = СтрокаИП.ВходящийНомерСтроки;
					КонецЕсли;
				КонецЦикла;
				
				Если КоличествоОсталосьПогасить > 0 Тогда
					НоваяСтрока 						= ТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					НоваяСтрока.Количество 				= КоличествоОсталосьПогасить;
					
					Коэффициент = СНТСерверПереопределяемый.КоэффициентАкцизаИзНоменклатуры(НоваяСтрока.Товар);
					
					НоваяСтрока.Сумма				= 0; // заполнится из остатка нераспределенной суммы
					НоваяСтрока.СуммаНДС			= 0; // заполнится из остатка нераспределенной суммы
					НоваяСтрока.СуммаАКциза			= 0; // заполнится из остатка нераспределенной суммы
					
					НоваяСтрока.СуммаБезНалогов		= НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС - НоваяСтрока.СуммаАКциза;
					НоваяСтрока.ОборотПоРеализации	= НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
					
					НоваяСтрока.ИсточникПроисхождения	= ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
					
					ТекстОшибки = НСтр("ru='В Документе <%1> не найдено товара <%2> по источникам происхождения, которые подлежат отражению на Виртуальном складе в количестве %3 %4 по организации <%5> на складе <%6>.' ");
					
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекущийДокументОснования, НоваяСтрока.Товар,
					КоличествоОсталосьПогасить, СтрокаТовары.ЕдиницаИзмерения, СтрокаТовары.Организация,СтрокаТовары.СкладОтправитель);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
					
					Если СтрокаРеквизитов.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение  Тогда
						ПараметрыОтбораОстатков = Новый Структура;
						ПараметрыОтбораОстатков.Вставить("Организация"			, НоваяСтрока.Получатель);
						ПараметрыОтбораОстатков.Вставить("Склад"				, НоваяСтрока.СкладПолучатель);
						ПараметрыОтбораОстатков.Вставить("Товар"				, НоваяСтрока.Товар);
						ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"		, ЕдиницаИзмеренияОтбора);
						ПараметрыОтбораОстатков.Вставить("ИсточникПроисхождения", НоваяСтрока.ИсточникПроисхождения);
						МассивСтрокОстатковПриход = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
						
						СтрокаОстатковПриход = ?(МассивСтрокОстатковПриход.Количество() = 0, ТаблицаОстатков.Добавить(), МассивСтрокОстатковПриход[0]);
						
						СтрокаОстатковПриход.ДатаДокументПартии		= Дата(1,1,1);
						Если ЗначениеЗаполнено(НоваяСтрока.ИсточникПроисхождения) Тогда
							ДокументПарти = НоваяСтрока.ИсточникПроисхождения.ДокументПартии;
							Если ЗначениеЗаполнено(ДокументПарти) Тогда
								СтрокаОстатковПриход.ДатаДокументПартии = ДокументПарти.Дата;
							КонецЕсли;	
						КонецЕсли;	
						СтрокаОстатковПриход.ЕдиницаИзмерения			= ЕдиницаИзмеренияОтбора;
						СтрокаОстатковПриход.ЕдиницаИзмеренияДокумента	= НоваяСтрока.ЕдиницаИзмерения;
						СтрокаОстатковПриход.КоличествоОстаток			= ?(ЗначениеЗаполнено(СтрокаОстатковПриход.КоличествоОстаток), СтрокаОстатковПриход.КоличествоОстаток, 0) + НоваяСтрока.Количество;
						СтрокаОстатковПриход.Организация				= НоваяСтрока.Получатель;
						СтрокаОстатковПриход.Склад						= НоваяСтрока.СкладПолучатель;
						//СтрокаОстатковПриход.ТипПроисхождения			= НоваяСтрока.ТипПроисхождения;
						СтрокаОстатковПриход.Товар 						= НоваяСтрока.Товар;
					КонецЕсли;
				КонецЕсли;
				// Обработка погрешности округления
				НоваяСтрока.Сумма				= НоваяСтрока.Сумма + (ОбщаяСумма - ОбщаяСуммаРаспределенных);
				НоваяСтрока.СуммаНДС			= НоваяСтрока.СуммаНДС + (СуммаНДС - ОбщаяСуммаНДСРаспределенных);
				НоваяСтрока.СуммаАКциза			= НоваяСтрока.СуммаАКциза + (СуммаАКциза - ОбщаяСуммаАкцизаРаспределенных);
				НоваяСтрока.СуммаБезНалогов		= НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС - НоваяСтрока.СуммаАкциза;
				НоваяСтрока.ОборотПоРеализации	= НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
			Иначе
				НоваяСтрока = ТоварыИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТовары Из ТоварыИП Цикл
			
			НоваяСтрока = Неопределено;
			
			Если СНТСерверПереопределяемый.ПроверитьТипИмпортДокументаПТУПОСсылке(ТекущийДокументОснования) Тогда
				НоваяСтрока = ТоварыВС.Добавить();
			ИначеЕсли СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
				НоваяСтрока = ТоварыВС.Добавить();
			Иначе
				Если НоваяСтрокаРеквизитов.ВидОперации = Перечисления.ВидыОперацийСНТ.Перемещение Тогда
					НоваяСтрока = Товары.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ЕстьТовары = Истина;
			
			Если НоваяСтрока <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьТовары Тогда 
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты"	, Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары"		, Товары.Скопировать());
			СтруктураДляПередачи.Вставить("ТоварыВС"	, ТоварыВС.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеДляЗаполнения;

КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияСНТ(ПараметрыЗаполнения) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = СНТСерверПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияСНТ(ПараметрыЗаполнения);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияСНТ(ТекстЗапроса);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияСНТ_Расход(ТекстЗапроса);
	
	Если Не ПараметрыЗаполнения.ЗаполнятьЦены ИЛИ ПараметрыЗаполнения.СпособЗаполненияЦены <> Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.ДокументОснование = вт_ЦеныНоменклатуры.Регистратор", "");	
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением ИЛИ НЕ ПараметрыЗаполнения.ЗаполнятьЦены Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.Организация = вт_ЦеныНоменклатуры.Организация", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	ИначеЕсли ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоТипуЦены ИЛИ Не ПараметрыЗаполнения.СебестоимостьПоСкладам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
		
	ТаблицыДанныхДляЗаполненияСНТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияСНТ.Вставить("ТаблицаРеквизитов"	, РезультатЗапроса[КоличествоПакетов - 7].Выгрузить());
	ТаблицыДанныхДляЗаполненияСНТ.Вставить("ТаблицаТовары"		, РезультатЗапроса[КоличествоПакетов - 6].Выгрузить());
	ТаблицыДанныхДляЗаполненияСНТ.Вставить("ТаблицаОстатков"	, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	
	Возврат ТаблицыДанныхДляЗаполненияСНТ;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияСНТ(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_ДанныеДокумента.ПервичныйДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ОсновнойСНТ.Ссылка, Неопределено) КАК СвязанныйСНТ,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ОсновнойСНТ.Ссылка) = ТИП(Документ.СНТ) 
	|		ТОГДА ЕСТЬNULL(ОсновнойСНТ.РегистрационныйНомерИСЭСФ, """")
	|	ИНАЧЕ """"
	|	КОНЕЦ КАК РегистрационныйНомерСвязанногоСНТ
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполненияСвязанныеСНТ
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ КАК ОсновнойСНТ
	|			ПО вт_ДанныеДокумента.ПервичныйДокументОснование = ОсновнойСНТ.ДокументОснование
	|ГДЕ
	|	ОсновнойСНТ.Проведен
	|	И ОсновнойСНТ.ПометкаУдаления <> Истина
	|	И ОсновнойСНТ.РегистрационныйНомерИСЭСФ <> """"
	|	И ОсновнойСНТ.ДокументОснование <> Неопределено
	|	И ОсновнойСНТ.ТипСНТ В (ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Первичная), ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная))
	|	И ОсновнойСНТ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.НеПросмотрен), ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Доставленный), ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Созданный), ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Подтвержден))
	|	И вт_ДанныеДокумента.Количество > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение,
	|	вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель,
	|	вт_ДанныеДокумента.ТипСНТ,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.Поставщик,
	|	вт_ДанныеДокумента.Получатель,
	|	вт_ДанныеДокумента.ГрузоотправительКодСтраныОтправки,
	|	вт_ДанныеДокумента.ГрузополучательКодСтраныОтправки,
	|	вт_ДанныеДокумента.ДатаОтгрузкиТовара,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.ВидОперации,
    |	вт_ДанныеДокумента.ВидВывоза,
	|	вт_ДанныеДокумента.ВидВвоза,
    |	вт_ДанныеДокумента.ВидПеремещения,
	|	вт_ДанныеДокумента.Валюта,
	|	вт_ДанныеДокумента.ВалютаКод,
	|	вт_ДанныеДокумента.КурсВалюты,
	|	вт_ДанныеДокумента.УчитыватьНДС,
	|	вт_ДанныеДокумента.СуммаВключаетНДС,
	|	вт_ДанныеДокумента.УчитыватьАкциз,
	|	вт_ДанныеДокумента.СуммаВключаетАкциз,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладОтправитель) = ТИП(Справочник.ВиртуальныеСклады)
	|			ТОГДА вт_ДанныеДокумента.СкладОтправитель
	|		ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляОтправителя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|	КОНЕЦ КАК СкладОтправитель,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Перемещение)И
	|			ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладПолучатель) = ТИП(Справочник.ВиртуальныеСклады)
	|			ТОГДА вт_ДанныеДокумента.СкладПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.ДокументОснование) В (&ТипыДокументовВозвратаПоставщику)
	|			И вт_ДанныеДокумента.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|			ТОГДА ЕСТЬNULL(СоответствиеСкладовДляПолучателя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСкладыКонтрагента.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляПолучателя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|	КОНЕЦ КАК СкладПолучатель,
	|	вт_ДанныеДокумента.ПоставщикИдентификатор,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикНерезидент,
	|	вт_ДанныеДокумента.ПоставщикРозничнаяРеализация,
	|	вт_ДанныеДокумента.ПоставщикКодСтраны,
	|	вт_ДанныеДокумента.ПоставщикКодСтраныОтправки,
	|	вт_ДанныеДокумента.ПолучательИдентификатор,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|   вт_ДанныеДокумента.ПолучательБИНСтруктурногоПодразделения,
	|   вт_ДанныеДокумента.ПоставщикБИНСтруктурногоПодразделения,
	|	вт_ДанныеДокумента.Грузоотправитель,
	|	вт_ДанныеДокумента.ГрузоотправительНаименование,
	|	вт_ДанныеДокумента.ГрузоотправительИдентификатор,
	|	вт_ДанныеДокумента.ГрузоотправительНерезидент,
	|	вт_ДанныеДокумента.Грузополучатель,
	|	вт_ДанныеДокумента.ГрузополучательНаименование,
	|	вт_ДанныеДокумента.ГрузополучательИдентификатор,
	|	вт_ДанныеДокумента.ГрузополучательНерезидент,
	|	вт_ДанныеДокумента.ПолучательКодСтраны,
	|	вт_ДанныеДокумента.ПолучательКодСтраныДоставки,
	|	вт_ДанныеДокумента.ПолучательНерезидент,
	|	вт_ДанныеДокумента.ПолучательРозничнаяРеализация,
	|	вт_ДанныеДокумента.АдресОтправки,	
	|	вт_ДанныеДокумента.АдресДоставки,
	|	вт_ДанныеДокумента.ДоговорПоставки,
	|	вт_ДанныеДокумента.БезДоговора,
	|	вт_ДанныеДокумента.ДоговорПоставкиНомер,
	|	вт_ДанныеДокумента.ДоговорПоставкиДата,
	|	вт_ДанныеДокумента.ДоговорПоставкиУсловияОплаты,
	|	вт_ДанныеДокумента.ДоговорПоставкиУсловияПоставки,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.ТоварНаименование,
	|	вт_ДанныеДокумента.КодТНВЭД,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияКод,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.Сумма,
	|	вт_ДанныеДокумента.СуммаБезНалогов,
	|	вт_ДанныеДокумента.ОборотПоРеализации,
	|	вт_ДанныеДокумента.Цена,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) И вт_ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз) 
	|			ТОГДА ""1""
	|		КОГДА НЕ ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) И вт_ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз) 
	|			ТОГДА ""2""
	|		ИНАЧЕ вт_ДанныеДокумента.ПризнакПроисхождения
	|	КОНЕЦ КАК ПризнакПроисхождения,
	|	вт_ДанныеДокумента.НомерЗаявленияВРамкахТС,
	|	вт_ДанныеДокумента.НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_ДанныеДокумента.СтавкаАкциза,
	|	вт_ДанныеДокумента.СуммаАкциза,
	|	вт_ДанныеДокумента.СтавкаНДС,
	|	вт_ДанныеДокумента.БезНДС,
	|	вт_ДанныеДокумента.СуммаНДС,
	|	вт_ДанныеДокумента.ИдентификаторТовара,
	|	вт_ДанныеДокумента.ИмяТабличнойЧасти,
	|	вт_ДанныеДокумента.ЗапрещеноРазбиватьДокумент,
	|	вт_ДанныеДокумента.РаспределятьТоварыПоИП,
	|	вт_ДанныеДокумента.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	вт_ДанныеДокумента.ПрефиксВидаДокумента,
	|	вт_ДанныеДокумента.НомерУчетногоДокумента,
	|	вт_ДанныеДокумента.НомерПакета,
	|   вт_ДанныеДокумента.СтавкаНДСЧисло,
	|   вт_ДанныеДокумента.СтавкаАкцизаЧисло,
	|   ВЫБОР  КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.ДокументОснование) В (&ТипыДокументовВозвратаКлиента)
	|           И вт_ДанныеДокумента.ТипСНТ =  ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|   	   	  ТОГДА  Истина
	|   	   ИНАЧЕ Ложь
	|   КОНЕЦ КАК ЭтоВозвратОтКлиента,
	//+
	|   ВЫБОР  КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.ДокументОснование) В (&ТипыДокументовВозвратаПоставщику)
	|           И вт_ДанныеДокумента.ТипСНТ =  ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.ВозвратТоваров)
	|   	   	  ТОГДА  Истина
	|   	   ИНАЧЕ Ложь
	|   КОНЕЦ КАК ЭтоВозвратПоставщику,
	//-
	|	вт_ДанныеДокумента.ЭтоИсправленнаяСНТ КАК ЭтоИсправленнаяСНТ,
	|	ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыСНТ.Черновик) КАК Статус,
	|	вт_ДанныеДляЗаполненияСвязанныеСНТ.СвязанныйСНТ КАК СвязанныйСНТ,
	|	вт_ДанныеДляЗаполненияСвязанныеСНТ.РегистрационныйНомерСвязанногоСНТ КАК РегистрационныйНомерСвязанногоСНТ,
	|	0 КАК НомерСтрокиСНТ,
	|   вт_ДанныеДокумента.ПолучательФизическоеЛицо,
	|   вт_ДанныеДокумента.ПоставщикФизическоеЛицо,
	|	вт_ДанныеДокумента.НомерДоверенностиОтпуск,
	|	вт_ДанныеДокумента.ДатаДоверенностиОтпуск,
	|   вт_ДанныеДокумента.НомерСтроки"
	+
	СНТСерверПереопределяемый.ПолучитьДополнительныеПереопределяемыеПоля()
	+ "
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КонтактнаяИнформация КАК КонтактнаяИнформацияОтправителя
	|		ПО вт_ДанныеДокумента.Организация = КонтактнаяИнформацияОтправителя.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляОтправителя
	|	ПО (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|			ТОГДА вт_ДанныеДокумента.Организация = СоответствиеСкладовДляОтправителя.Организация
	|			ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = СоответствиеСкладовДляОтправителя.Организация КОНЕЦ)	
	|			И вт_ДанныеДокумента.СкладОтправитель = СоответствиеСкладовДляОтправителя.Склад	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляПолучателя
	|		ПО (ВЫБОР
	|				КОГДА вт_ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Перемещение) ИЛИ вт_ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	|					ТОГДА (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = &ПодразделенияОрганизацийПустаяСсылка
	|							ТОГДА вт_ДанныеДокумента.ОрганизацияПолучатель = СоответствиеСкладовДляПолучателя.Организация
	|							ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = СоответствиеСкладовДляПолучателя.Организация КОНЕЦ)
	|				ИНАЧЕ (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|							ТОГДА вт_ДанныеДокумента.Организация = СоответствиеСкладовДляПолучателя.Организация
	|							ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = СоответствиеСкладовДляПолучателя.Организация КОНЕЦ)КОНЕЦ)
	|			И вт_ДанныеДокумента.СкладПолучатель = СоответствиеСкладовДляПолучателя.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
	|					&ДатаНачала,
	|					НоменклатураГСВС.КодГСВС В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт_ДанныеДокумента.КодТНВЭД
	|						ИЗ
	|							вт_ДанныеДокумента КАК вт_ДанныеДокумента)) КАК СведенияОНоменклатуреГСВС
	|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС.Ссылка
	|		ПО вт_ДанныеДокумента.КодТНВЭД = ГСВС.КодГСВС
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|			И (СведенияОНоменклатуреГСВС.ПризнакАктивности)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныйСкладНераспределенныхТоваров
	|		ПО вт_ДанныеДокумента.Организация = ВиртуальныйСкладНераспределенныхТоваров.Организация
	|			И (ВиртуальныйСкладНераспределенныхТоваров.ПризнакОприходования = ИСТИНА)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДанныеДляЗаполненияСвязанныеСНТ КАК вт_ДанныеДляЗаполненияСвязанныеСНТ
	|			ПО вт_ДанныеДокумента.ПервичныйДокументОснование = вт_ДанныеДляЗаполненияСвязанныеСНТ.ДокументОснование
	|
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";
	
	Возврат ТекстЗапроса + ПолучитьТекстПакетовЗапросаДляЗаполненияСНТ();
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияСНТ_Расход(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение,
	| ВЫБОР
	|	КОГДА вт_ДанныеДокумента.ЭтоВозвратОтКлиента
	|		ТОГДА вт_ДанныеДокумента.СкладПолучатель
	|	ИНАЧЕ вт_ДанныеДокумента.СкладОтправитель
	| КОНЕЦ КАК Склад,
	|	вт_ДанныеДокумента.ЭтоВозвратОтКлиента КАК ЭтоВозвратОтКлиента,
	|	вт_ДанныеДокумента.ЭтоВозвратПоставщику КАК ЭтоВозвратПоставщику,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумента,
	|	%ДанныеДокументаЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.ТипСНТ КАК ТипСНТ,
	|	вт_ДанныеДокумента.СвязанныйСНТ КАК СвязанныйСНТ,
	|	вт_ДанныеДокумента.ЭтоИсправленнаяСНТ КАК ЭтоИсправленнаяСНТ,
	|	СУММА(вт_ДанныеДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента.ЕдиницаИзмерения,
	|	%ДанныеДокументаЕдиницаИзмерения,
	|	вт_ДанныеДокумента.Товар,
	|	ВЫБОР КОГДА вт_ДанныеДокумента.ЭтоВозвратОтКлиента
	|		ТОГДА вт_ДанныеДокумента.СкладПолучатель
	|	ИНАЧЕ вт_ДанныеДокумента.СкладОтправитель
	| КОНЕЦ ,
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.ТипСНТ,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение,
	|	вт_ДанныеДокумента.СвязанныйСНТ,
	|	вт_ДанныеДокумента.ЭтоВозвратОтКлиента,
	|	вт_ДанныеДокумента.ЭтоИсправленнаяСНТ,
	|	вт_ДанныеДокумента.ЭтоВозвратПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаВиртуальныхСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыНаВиртуальныхСкладах.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	(ТоварыНаВиртуальныхСкладах.КоличествоОстаток - ЕСТЬNULL(ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|	ТоварыНаВиртуальныхСкладах.Организация КАК Организация,
	|	ТоварыНаВиртуальныхСкладах.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ТоварыНаВиртуальныхСкладах.Склад КАК Склад
	|ПОМЕСТИТЬ ОстаткиГТДПромежуточная
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&ДатаОстатка,
	|			(Организация, СтруктурноеПодразделение, Склад, Номенклатура, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.Организация,
	|					Товары.СтруктурноеПодразделение,
	|					Товары.Склад,
	|					Товары.Товар,
	|					Товары.ЕдиницаИзмерения
	|				ИЗ
	|					вт_Товары КАК Товары)) КАК ТоварыНаВиртуальныхСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&ДатаОстатка,
	|			(Организация, СтруктурноеПодразделение, Склад, Номенклатура, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.Организация,
	|					Товары.СтруктурноеПодразделение,
	|					Товары.Склад,
	|					Товары.Товар,
	|					Товары.ЕдиницаИзмерения
	|				ИЗ
	|					вт_Товары КАК Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|			ПО ТоварыНаВиртуальныхСкладах.Организация = ТоварыВиртуальногоСкладаВРезерве.Организация
	|			И ВЫБОР КОГДА &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|				ТОГДА ТоварыНаВиртуальныхСкладах.СтруктурноеПодразделение = ТоварыВиртуальногоСкладаВРезерве.СтруктурноеПодразделение
	|				ИНАЧЕ ИСТИНА КОНЕЦ 
	|			И ТоварыНаВиртуальныхСкладах.Склад = ТоварыВиртуальногоСкладаВРезерве.Склад
	|			И ТоварыНаВиртуальныхСкладах.Номенклатура = ТоварыВиртуальногоСкладаВРезерве.Номенклатура
	|			И ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения = ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения
	|			И ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения = ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель КАК Склад
	|ИЗ
	|	Документ.СНТ.ТоварыВС КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|ГДЕ Товары.ЭтоИсправленнаяСНТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникПроисхождения
	|;
	|
	|ВЫБРАТЬ
	|	ОстаткиГТДПромежуточная.Номенклатура КАК Номенклатура,
	|	ОстаткиГТДПромежуточная.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ОстаткиГТДПромежуточная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиГТДПромежуточная.ДатаДокументПартии КАК ДатаДокументПартии,
	|	СУММА(ОстаткиГТДПромежуточная.КоличествоОстаток) КАК КоличествоОстаток,
	|	ОстаткиГТДПромежуточная.Организация КАК Организация,
	|	ОстаткиГТДПромежуточная.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ОстаткиГТДПромежуточная.Склад КАК Склад,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	ОстаткиГТДПромежуточная КАК ОстаткиГТДПромежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|			ПО ОстаткиГТДПромежуточная.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиГТДПромежуточная.Номенклатура,
	|	ОстаткиГТДПромежуточная.ИсточникПроисхождения,
	|	ОстаткиГТДПромежуточная.ЕдиницаИзмерения,
	|	ОстаткиГТДПромежуточная.ДатаДокументПартии,
	|	ОстаткиГТДПромежуточная.Организация,
	|	ОстаткиГТДПромежуточная.СтруктурноеПодразделение,
	|	ОстаткиГТДПромежуточная.Склад,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ),
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)),
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """"),
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0),
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)),
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ПОМЕСТИТЬ ТоварыПервичногоСНТ
	|ИЗ
	|	Документ.СНТ.ТоварыВС КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ЭтиловыйСпирт КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.Виноматериал КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.КоличествоУпаковок КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ПивоПивныеНапитки КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.КоличествоБутылок КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ДанныеПоНефтепродуктам КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ДанныеПоБиотопливу КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.КоличествоПачек КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ТабачнаяПродукция КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК КоличествоОстаток,
	|	ТоварыИсправляемогоСНТ.Ссылка.Организация Как Организация,
	|	&ПодразделенияОрганизацийПустаяСсылка КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ТоварыИсправляемогоСНТ.ИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыИсправляемогоСНТ.НомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе ,
	|	ВЫБОР 
	|		КОГДА Товары.ЭтоВозвратОтКлиента
	|			ТОГДА ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|		ИНАЧЕ ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	Документ.СНТ.ТоварыЭкспортныйКонтроль КАК ТоварыИсправляемогоСНТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО Товары.Организация = ТоварыИсправляемогоСНТ.Ссылка.Организация
	|			И ВЫБОР КОГДА Товары.ЭтоВозвратОтКлиента 
	|					ТОГДА Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладОтправитель
	|				ИНАЧЕ Товары.Склад = ТоварыИсправляемогоСНТ.Ссылка.СкладПолучатель
	|				КОНЕЦ
	|			И Товары.Товар = ТоварыИсправляемогоСНТ.Товар
	|			И Товары.ЕдиницаИзмерения = %ТекстПоляТипИзмеряемойВеличины
	|			И Товары.СвязанныйСНТ     = ТоварыИсправляемогоСНТ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|ГДЕ Товары.ЭтоВозвратОтКлиента Или Товары.ЭтоВозвратПоставщику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.СтруктурноеПодразделение,
	|	Товары.Склад,
	|	Товары.Товар,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияДокумента,
	|	ТоварыПервичногоСНТ.ДатаДокументПартии КАК ДатаДокументПартии,
	|	ТоварыПервичногоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыПервичногоСНТ.ПризнакПеречняИзьятий КАК ПризнакПеречняИзьятий,
	|	ТоварыПервичногоСНТ.ТипПроисхождения КАК ТипПроисхождения,
	|	ТоварыПервичногоСНТ.ГСВС КАК ГСВС,
	|	ТоварыПервичногоСНТ.ФизическаяМетка КАК ФизическаяМетка,
	|	ТоварыПервичногоСНТ.ДополнительныйИдентификатор КАК ДополнительныйИдентификатор,
	|	ЕСТЬNULL(ТоварыПервичногоСНТ.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ТоварыПервичногоСНТ.ВходящийИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыПервичногоСНТ.ВходящийНомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ТоварыПервичногоСНТ.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	вт_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|		ПО Товары.Организация = ОстаткиГТД.Организация
	|			И Товары.Склад = ОстаткиГТД.Склад
	|			И Товары.Товар = ОстаткиГТД.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ОстаткиГТД.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПервичногоСНТ КАК ТоварыПервичногоСНТ
	|		ПО (ОстаткиГТД.Организация = ТоварыПервичногоСНТ.Организация)
	|			И (ОстаткиГТД.Склад = ТоварыПервичногоСНТ.Склад)
	|			И (ОстаткиГТД.Номенклатура = ТоварыПервичногоСНТ.Номенклатура)
	|			И (ОстаткиГТД.ЕдиницаИзмерения = ТоварыПервичногоСНТ.ЕдиницаИзмерения)
	|			И (ОстаткиГТД.ИсточникПроисхождения = ТоварыПервичногоСНТ.ИсточникПроисхождения)
	|ГДЕ
	|	Товары.ЭтоВозвратПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.СтруктурноеПодразделение,
	|	Товары.Склад,
	|	Товары.Товар,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияДокумента,
	|	ТоварыПервичногоСНТ.ДатаДокументПартии,
	|	ТоварыПервичногоСНТ.ИсточникПроисхождения,
	|	ТоварыПервичногоСНТ.ПризнакПеречняИзьятий,
	|	ТоварыПервичногоСНТ.ТипПроисхождения,
	|	ТоварыПервичногоСНТ.ГСВС,
	|	ТоварыПервичногоСНТ.ФизическаяМетка,
	|	ТоварыПервичногоСНТ.ДополнительныйИдентификатор,
	|	ЕСТЬNULL(ТоварыПервичногоСНТ.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ),
	|	ТоварыПервичногоСНТ.ВходящийИдентификаторТовара КАК ВходящийИдентификаторТовара,
	|	ТоварыПервичногоСНТ.ВходящийНомерСтроки КАК ВходящийНомерСтроки,
	|	ЕСТЬNULL(ТоварыПервичногоСНТ.КоличествоОстаток, 0)
	|ИЗ
	|	вт_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПервичногоСНТ КАК ТоварыПервичногоСНТ
	|		ПО Товары.Организация = ТоварыПервичногоСНТ.Организация
	|			И Товары.Склад = ТоварыПервичногоСНТ.Склад
	|			И Товары.Товар = ТоварыПервичногоСНТ.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ТоварыПервичногоСНТ.ЕдиницаИзмерения
	|ГДЕ
	|	Товары.ЭтоВозвратОтКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.СтруктурноеПодразделение,
	|	Товары.Склад,
	|	Товары.Товар,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияДокумента,
	|	ОстаткиГТД.ДатаДокументПартии,
	|	ОстаткиГТД.ИсточникПроисхождения,
	|	ОстаткиГТД.ПризнакПеречняИзьятий,
	|	ОстаткиГТД.ТипПроисхождения,
	|	ОстаткиГТД.ГСВС,
	|	ОстаткиГТД.ФизическаяМетка,
	|	ОстаткиГТД.ДополнительныйИдентификатор,
	|	ЕСТЬNULL(ОстаткиГТД.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ),
	|	"""",
	|	"""",
	|	ЕСТЬNULL(ОстаткиГТД.КоличествоОстаток, 0)
	|ИЗ
	|	вт_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|		ПО Товары.Организация = ОстаткиГТД.Организация
	|			И Товары.Склад = ОстаткиГТД.Склад
	|			И Товары.Товар = ОстаткиГТД.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ОстаткиГТД.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ Товары.ЭтоВозвратПоставщику
	|	И НЕ Товары.ЭтоВозвратОтКлиента
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокументПартии,
	|	ИсточникПроисхождения";
	
	СоответсвиеПолейЗапросов = Новый Соответствие;
	СоответсвиеПолейЗапросов.Вставить("%ТекстПоляТипИзмеряемойВеличины", Новый Структура("ЕдиницаИзмерения, Номенклатура",
		"ТоварыИсправляемогоСНТ.ЕдиницаИзмерения","ТоварыИсправляемогоСНТ.Товар"));
	СоответсвиеПолейЗапросов.Вставить("%Количество", "");
	СоответсвиеПолейЗапросов.Вставить("%ДанныеДокументаЕдиницаИзмерения", "");
	СНТСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеПолейЗапросов);
	СНТСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросовКоличество(СоответсвиеПолейЗапросов,"ТоварыВС");	
		
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеПолейЗапросов);

	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияСНТ() Экспорт
	
	СтруктураДокумента = СНТСерверПовтИсп.ПолучитьПустуюСтруктуруДокументаСНТ();
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл 
		Если ЭлементСтруктуры.Ключ = "ТоварыВС" Тогда
			Продолжить;	
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ" + ?(ЭлементСтруктуры.Ключ = "Реквизиты",  " РАЗЛИЧНЫЕ", "") + " 
		|";
		
		КолонкиТЧ 			= ЭлементСтруктуры.Значение.Колонки;
		НомерКолонки 		= 0;
		КоличествоКолонок 	= КолонкиТЧ.Количество();
		Для Каждого КолонкаТЧ Из КолонкиТЧ Цикл
			НомерКолонки = НомерКолонки + 1;
			ТекстЗапроса = ТекстЗапроса + "
			|вт_ДанныеДляЗаполнения." + КолонкаТЧ.Имя + ?(НомерКолонки = КоличествоКолонок, "", ",");
		КонецЦикла;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИЗ вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения";
		
		Если ЭлементСтруктуры.Ключ = "Товары" Тогда
			ВССерверПереопределяемый.ПрисоединитьВременнуюТаблицуЦеныНоменклатуры(ТекстЗапроса, ЭлементСтруктуры.Ключ);
			
			//Для товаров применяем упорядочивание по номеру строки на случай разных СУБД
			ТекстЗапроса = ТекстЗапроса + "
			|					
			|	УПОРЯДОЧИТЬ ПО
			|		ДокументОснование,
			|		НомерСтроки";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|					
			|	УПОРЯДОЧИТЬ ПО
			|		ДокументОснование";	
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "вт_ДанныеДляЗаполнения.Сумма," , "ВЫБОР
																			|		КОГДА вт_ДанныеДляЗаполнения.ВидОперации В (&ВидыОперацийЦены)
																			|				И ТИПЗНАЧЕНИЯ(вт_ДанныеДляЗаполнения.ДокументОснование) В (&ТипыДокументовСПерезаполнениемЦены)
																			|			ТОГДА ЕСТЬNULL(вт_ЦеныНоменклатуры.ЦенаНоменклатуры, 0) * вт_ДанныеДляЗаполнения.Количество
																			|		ИНАЧЕ вт_ДанныеДляЗаполнения.Сумма
																			|	КОНЕЦ КАК Сумма,"); 
												
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "вт_ДанныеДляЗаполнения.Цена,", "ВЫБОР
																			|		КОГДА вт_ДанныеДляЗаполнения.ВидОперации В (&ВидыОперацийЦены)
																			|				И ТИПЗНАЧЕНИЯ(вт_ДанныеДляЗаполнения.ДокументОснование) В (&ТипыДокументовСПерезаполнениемЦены)
																			|			ТОГДА ЕСТЬNULL(вт_ЦеныНоменклатуры.ЦенаНоменклатуры, 0)
																			|		ИНАЧЕ вт_ДанныеДляЗаполнения.Цена
																			|	КОНЕЦ КАК Цена,"); 
	
	Возврат ТекстЗапроса; 
КонецФункции

Функция ПолучитьПараметрыЗаполненияСНТПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияСНТ = Новый Структура;	

	//Получаем Параметры заполнения цены. Предпологаемые параметры:
	//	СпособЗаполненияЦены 	- Способ заполнения цены в расходных документах. Может принимать значения "По себестоимости", "По типу цены", "Фиксированным значением"
	//  ПоДвижениямДокумента	- Цена расчитывается исходя из движений первичного документа
	//	ТипЦены					- Тип цены номенклатуры. (Используется при способе заполнения равным "По типу цены"),
	// 	Значение                - Фиксированное значение цены. (Используется при способе заполнения равным "Фиксированным значением"),
	//  ЗаполнятьЦены			- Нужно ли заполнять цену в СНТ, в приходных документах заполняется из первичного документа
	//  ВидыОперацийЦены		- массив видов операций СНТ, в которых необходимо заполнять цену

	ПараметрыСНТ = ВССервер.ПолучитьПараметрыЭДВС();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСНТ Цикл
		ПараметрыЗаполненияСНТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	ПараметрыЗаполненияСНТ.Вставить("ЗаполнятьЦены"						, Ложь);
	ПараметрыЗаполненияСНТ.Вставить("ВидыОперацийЦены"						, СНТСерверПереопределяемый.ВидыОперацийСНТКоторыхУстанавливаютсяЦены());
	ПараметрыЗаполненияСНТ.Вставить("ТипыДокументовСПерезаполнениемЦены" 	, ВССерверПереопределяемый.ТипыДокументовСПерезаполнениемЦены());	
	ПараметрыЗаполненияСНТ.Вставить("ПоДвижениямДокумента", ПараметрыЗаполненияСНТ.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости);

	ДополнительныеПараметрыЗапросаБУ = ВССерверПереопределяемый.ПолучитьДополнительныеПараметрыЗапросаБУ();
	Для Каждого ЭлементСтрукуры  Из ДополнительныеПараметрыЗапросаБУ Цикл
		ПараметрыЗаполненияСНТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	ПредопределенноеЗначениеСтраны = ЭСФКлиентСерверПереопределяемый.ПолучитьПредопределенноеЗначениеСтраны();
	ПараметрыЗаполненияСНТ.Вставить("КазахстанСсылкаСтранаПроисхождения", ПредопределенноеЗначениеСтраны);
	ПараметрыЗаполненияСНТ.Вставить("КазахстанКодАльфа2"				, ПредопределенноеЗначениеСтраны.КодАльфа2);
	ДатаОформления = ВСОбщегоНазначения.ТекущаяДатаПользователя();
	ПараметрыЗаполненияСНТ.Вставить("НеРазбиватьДокумент"				, Истина);
	ПараметрыЗаполненияСНТ.Вставить("ПодбиратьИсточникиПроисхождения"	, Истина);
	ПараметрыЗаполненияСНТ.Вставить("ДатаСреза"							, КонецДня(ДатаОформления));
	ПараметрыЗаполненияСНТ.Вставить("ДатаОстатка"						, Новый Граница(КонецДня(ДатаОформления), ВидГраницы.Включая));
	ПараметрыЗаполненияСНТ.Вставить("ДатаДокумента"						, ДатаОформления);
	ПараметрыЗаполненияСНТ.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
	ПараметрыЗаполненияСНТ.Вставить("ФормироватьСписокДокументов" 		, Ложь);
	ПараметрыЗаполненияСНТ.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ВССерверПереопределяемый.ПоддерживаетсяРаботаСоСтруктурнымиПодразделениями());	
	ПараметрыЗаполненияСНТ.Вставить("ПодразделенияОрганизацийПустаяСсылка", ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	ПараметрыЗаполненияСНТ.Вставить("ТипыДокументовВозвратаКлиента",        СНТСерверПереопределяемый.ПолучитьТипДокументаВозвратОтПокупателя());
	ПараметрыЗаполненияСНТ.Вставить("ТипыДокументовВозвратаПоставщику",     СНТСерверПереопределяемый.ПолучитьТипДокументаВозвратПоставщику());
	
	Возврат ПараметрыЗаполненияСНТ;

КонецФункции

#КонецОбласти

Функция ПолучитьПараметрыЗаполненияСНТ(ПараметрыСоздания) Экспорт
	
	ПараметрыЗаполненияСНТ = ПолучитьПараметрыЗаполненияСНТПоУмолчанию();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСоздания Цикл
		ПараметрыЗаполненияСНТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
		
	Возврат ПараметрыЗаполненияСНТ;
	
КонецФункции

Функция СоздатьСписокСНТ(ПараметрыСоздания) Экспорт
	
	СписокСНТ = Новый Массив;
	Отказ = Ложь;
		
	ПараметрыЗаполненияСНТ = ПолучитьПараметрыЗаполненияСНТ(ПараметрыСоздания);
	
	НетДатыНачала 		= Не ПараметрыЗаполненияСНТ.Свойство("ДатаНачала");
	НетДатыОкончания 	= Не ПараметрыЗаполненияСНТ.Свойство("ДатаОкончания");
	
	МассивДокументов = ПараметрыЗаполненияСНТ.МассивДокументов;
	Если НетДатыНачала ИЛИ НетДатыОкончания Тогда
		ТаблицаДокументов = Новый ТаблицаЗначений;
		ТаблицаДокументов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		Для Каждого ЭлементМассив Из МассивДокументов Цикл
			НоваяСтрокаТЧ 		= ТаблицаДокументов.Добавить();
			НоваяСтрокаТЧ.Дата	= ЭлементМассив.Дата;
		КонецЦикла;	
		Запрос = Новый Запрос;                                            
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДокументов.Дата КАК Дата
		|ПОМЕСТИТЬ вт_ТаблицаДокументов
		|ИЗ
		|	&ТаблицаДокументов КАК ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МИНИМУМ(вт_ТаблицаДокументов.Дата) КАК Дата
		|ИЗ
		|	вт_ТаблицаДокументов КАК вт_ТаблицаДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(вт_ТаблицаДокументов.Дата) КАК Дата
		|ИЗ
		|	вт_ТаблицаДокументов КАК вт_ТаблицаДокументов";
		
		Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
		Результат = Запрос.ВыполнитьПакет();
		ПакетМинимум 	= Результат[1].Выбрать();
		ПакетМаксимум 	= Результат[2].Выбрать();
	КонецЕсли;	
	
	Если МассивДокументов.Количество() = 1 Тогда
		Если НетДатыНачала Тогда
			ПараметрыЗаполненияСНТ.Вставить("ДатаНачала"	, МассивДокументов[0].Дата);
		КонецЕсли;	
		Если НетДатыОкончания Тогда	
			ПараметрыЗаполненияСНТ.Вставить("ДатаОкончания", МассивДокументов[0].Дата);
		КонецЕсли;	
	ИначеЕсли МассивДокументов.Количество() > 1 Тогда
		Если НетДатыНачала и ПакетМинимум.Следующий() Тогда
			ПараметрыЗаполненияСНТ.Вставить("ДатаНачала"	, ПакетМинимум.Дата);	
		КонецЕсли;	
		Если НетДатыОкончания и ПакетМаксимум.Следующий() Тогда
			ПараметрыЗаполненияСНТ.Вставить("ДатаОкончания", ПакетМаксимум.Дата);	
		КонецЕсли;
	Иначе
		ПараметрыЗаполненияСНТ.Вставить("ДатаНачала"	, Дата(1,1,1));
		ПараметрыЗаполненияСНТ.Вставить("ДатаОкончания", Дата(1,1,1));
	КонецЕсли;
	
	ЭтоИсправленнаяСНТ = Ложь;
	Если ПараметрыСоздания.Свойство("ЭтоИсправленнаяСНТ") Тогда
		ЭтоИсправленнаяСНТ = ПараметрыСоздания.ЭтоИсправленнаяСНТ;
	КонецЕсли;
	ПараметрыЗаполненияСНТ.Вставить("ЭтоИсправленнаяСНТ", ЭтоИсправленнаяСНТ);
	
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияСНТ(ПараметрыЗаполненияСНТ);
	НачатьТранзакцию();
	
	ЗаполнитьМассивСНТ(ПараметрыЗаполненияСНТ, МассивДанныхДляЗаполнения, СписокСНТ, Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Возврат СписокСНТ; 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Возврат СписокСНТ;
	
КонецФункции

Процедура ЗаполнитьМассивСНТ(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокСНТ, Отказ, ВидДвижения = "")
	
	ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		СНТ = Документы.СНТ.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(СНТ,ЭлементМассива.Реквизиты[0]);
		СНТ.Дата = ПараметрыСоздания.ДатаВыписки;
		СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий;
		СНТ.ТипСНТ = ПараметрыСоздания.ТипСНТ;
		
		//для исправленных СНТ
		Если ПараметрыСоздания.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная") Тогда
			ДанныеСвязанногоСНТ = ПараметрыСоздания.СоответствиеПервичныеДокументыДанныеСНТ.Получить(ЭлементМассива.Реквизиты[0].ДокументОснование);
			Если ДанныеСвязанногоСНТ <> Неопределено Тогда
				СНТ.СвязанныйСНТ = ДанныеСвязанногоСНТ.Ссылка;
				СНТ.РегистрационныйНомерСвязанногоСНТ = ДанныеСвязанногоСНТ.РегистрационныйНомерИСЭСФ;
			КонецЕсли;
		КонецЕсли;

		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
			НоваяСтрокаТЧ = СНТ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
		КонецЦикла;	
		
		Попытка 
			СНТ.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СНТ, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ПроводитьСозданныеДокументы Тогда  
			
			Попытка 
				СНТ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Отказ = Истина;
			КонецПопытки;
				
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов СНТ прервано'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СНТ);
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормироватьСписокДокументов Тогда
			СписокСНТ.Добавить(СНТ.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

#Область ПроцедурыИФункцииОбменаAPI

Функция ОтправитьИсходящиеSnt(ВерсияВС, Знач КоллекцияДанныеКоллекцииSntXML, Знач КоллекцияПодписей, Знач ДанныеПрофилейИСЭСФ) Экспорт
	//ВерсияВС, Знач КоллекцияДанныеКоллекцииUttnXML, Знач КоллекцияПодписей, Знач ДанныеПрофилейИСЭСФ
	
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().ОтправитьSnt(ВерсияВС, КоллекцияДанныеКоллекцииSntXML, КоллекцияПодписей, ДанныеПрофилейИСЭСФ);
	
КонецФункции

// Выполняет метод queryUpdates() API ИС ЭСФ.
// Обновляет существующие и создает новые документы ВС, заполняет ссылочные реквизиты.
// Сохраняет lastEventDate и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭДВС будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭДВС, создаст новые ЭДВС, создаст и обновит присоединенные файлы ЭДВС.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых документов ВС.
//
Функция ПолучитьНовыеСНТ(ПараметрыВыгрузки) Экспорт
	  
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().ПолучитьНовыеСНТ(ПараметрыВыгрузки);
	
КонецФункции

Функция ПолучитьВСКонтрагента(Знач ПрофильИСЭСФ, Знач МассивКонтрагентов, ВерсияВС = Неопределено) Экспорт
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().ПолучитьВСКонтрагента(ПрофильИСЭСФ, МассивКонтрагентов, ВерсияВС);	
КонецФункции

#КонецОбласти

// Создает коллекцию XML строк Invoice и коллекцию XML строк SignedContent на основе документов ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Входящий - Массив ЭСФ, на основе которых необходимо создать 
//   коллекцию XML строк Invoice и коллекцию XML строк SignedContent. 
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  КоллекцияInvoiceXML - Соответствие - Возвращаемый - Созданная коллекция XML строк Invoice.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка Invoce.
//   |- Значение - Стркоа - Созданная XML строка Invoce.
//  КоллекцияSignedContentXML - Соответствие - Возвращаемый - Созданная коллекция XML строк SignedContent.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка SignedContent.
//   |- Значение - Стркоа - Созданная XML строка SignedContent.
//
Процедура СоздатьИсходящиеSnt(Знач МассивСНТ, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияSntXML, КоллекцияSignedContentXML, ВерсияВС) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().СоздатьИсходящиеSnt(МассивСНТ, УстанавливатьПодпись, ТипПодписи, КоллекцияSntXML, КоллекцияSignedContentXML, Неопределено, ВерсияВС);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение СНТ

// Возвращает параметры метода API ИС ЭСФ, сохраненные в регистре сведений ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСЭСФ.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметры которого необходимо получить.
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление ЭСФ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - Ключ - Имя параметра, Значение - Значение параметра.
//                     Имя параметра возвращается в верхнем регистре.
//
// Пример:
//  // Получение сохраненных параметров метода queryInvoiceStatusUpdate(), например, lastEventId и limit.
//  СтруктураПараметров = ПолучитьПараметрыМетода(МояСтруктурнаяЕдиница, "queryInvoiceStatusUpdate", Перечисления.НаправленияЭСФ.Исходящий);
//
Функция ПолучитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач НаправлениеЭСФ) Экспорт
	                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСЭСФ.ИмяПараметра,
	|	ПараметрыМетодовИСЭСФ.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФ
	|ГДЕ
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПараметрыМетодовИСЭСФ.ИмяМетода = &ИмяМетода" + ?(ЗначениеЗаполнено(НаправлениеЭСФ), "
	|	И ПараметрыМетодовИСЭСФ.НаправлениеЭСФ = &НаправлениеЭСФ", ""); // параметр может быть не заполнен при синхронизации ГСВС
	
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	Запрос.УстановитьПараметр("НаправлениеЭСФ", НаправлениеЭСФ);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыМетода = Новый Структура();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода.Вставить(ВРег(Выборка.ИмяПараметра), Выборка.ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции

// Сохраняет параметр метода API ИС ЭСФ в регистр сведений ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСЭСФ.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметр которого необходимо сохранить.
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление ЭСФ, для которого необходимо сохранить параметр.
//  ИмяПараметра - Строка - Имя сохраняемого параметра.
//  ЗначениеПараметра - Строка - Значение сохраняемого парметра.
//
Процедура СохранитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач НаправлениеЭСФ, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	Запись = РегистрыСведений.ПараметрыМетодовИСЭСФ.СоздатьМенеджерЗаписи();
	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	Запись.ИмяМетода = ИмяМетода;
	Запись.НаправлениеЭСФ = НаправлениеЭСФ;
	Запись.ИмяПараметра = ИмяПараметра;
	Запись.ЗначениеПараметра = ЗначениеПараметра;
	
	Запись.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск документов и элементов справочников

// Возвращает новую пустую таблицу значений, с колонками, указанными в параметре ИменаРеквизитов. 
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов объекта, перечисленные через запятую.
//   В таблице будут созданы колонки с такими же именами и типами, как и указанные реквизиты.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Созданная пустая таблица значений.
//
// Пример:
//  ПараметрыПоискаДокументовЭСФ = НовыеПараметрыПоискаСсылок("Номер, Направление, Организация", Метаданные.Документы.ЭСФ);
//
Функция НовыеПараметрыПоискаСсылок(Знач ИменаРеквизитов, Знач ОбъектМетаданных) Экспорт
		
	ПустаяТаблицаРеквизитов = Новый ТаблицаЗначений;	
	МассивИменРеквизитов = СНТКлиентСервер.МассивИмен(ИменаРеквизитов);
	
	ЭтоДокумент = ?(Найти(ОбъектМетаданных.ПолноеИмя(), "Документ") <> 0, Истина, Ложь);
	ЭтоСправочник = ?(Найти(ОбъектМетаданных.ПолноеИмя(), "Справочник") <> 0, Истина, Ложь);
	
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		
		Если ИмяРеквизита = "Номер" И ЭтоДокумент Тогда
			
			КвалификаторыСтроки = Новый КвалификаторыСтроки(ОбъектМетаданных.ДлинаНомера);
			ТипНомер = Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипНомер);
			
		ИначеЕсли ИмяРеквизита = "Дата" И ЭтоДокумент Тогда
			
			ТипДата = Новый ОписаниеТипов("Дата");
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипДата);
			
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
			
			ТипПометкаУдаления = Новый ОписаниеТипов("Булево");
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипПометкаУдаления);			
			
		ИначеЕсли ИмяРеквизита = "Владелец" И ЭтоСправочник Тогда
			
			МассивТиповВладельцев = Новый Массив;
			Для Каждого Владелец Из ОбъектМетаданных.Владельцы Цикл
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка." + Владелец.Имя));
			КонецЦикла;
			ТипРеквизита = Новый ОписаниеТипов(МассивТиповВладельцев);
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
			
		Иначе
			
			ТипРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита).Тип;
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ПустаяТаблицаРеквизитов;
	
КонецФункции  

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Очищает документ или элемент справочника.
// Устанавливает значения реквизитов в значения по умолчанию, очищает табличные части.
//
// Параметры:
//  Объект - ДокументОбъект.<Имя>, СправочникОбъект.<Имя> - Объект, который необходимо очистить.
//  ИсключаемыеРеквизиты - Строка - Имена реквизитов, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все реквизиты.
//  ИсключаемыеТабличныеЧасти - Строка - Имена табличных частей, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все табличные части.
//                               
Процедура ОчиститьОбъект(Объект, ИсключаемыеРеквизиты = Неопределено, ИсключаемыеТабличныеЧасти = Неопределено) Экспорт
	
	// Создать МассивИсключаемыхРеквизитов.
	Если ИсключаемыеРеквизиты = Неопределено Тогда
		МассивИсключаемыхРеквизитов = Новый Массив;
	Иначе
		МассивИсключаемыхРеквизитов = ЭСФКлиентСервер.МассивИмен(ИсключаемыеРеквизиты);	
	КонецЕсли;
	
	// Создать МассивИсключаемыхТабличныхЧастей.
	Если ИсключаемыеТабличныеЧасти = Неопределено Тогда
		МассивИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		МассивИсключаемыхТабличныхЧастей = ЭСФКлиентСервер.МассивИмен(ИсключаемыеТабличныеЧасти);	
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();	
	ИмяГруппыОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1);
	
	Если ИмяГруппыОбъекта = "Справочник" Тогда
		ПустойОбъект =  Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
	ИначеЕсли ИмяГруппыОбъекта = "Документ" Тогда
		ПустойОбъект =  Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) = Неопределено Тогда
			Объект[Реквизит.Имя] = ПустойОбъект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если МассивИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧасть.Имя) = Неопределено Тогда
			Объект[ТабличнаяЧасть.Имя].Очистить();	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаИБ(Знач ДатаИСЭСФ) Экспорт
	
	Попытка
		Дата = СериализаторXDTO.XMLЗначение(Тип("Дата"), ДатаИСЭСФ);
	Исключение
		Попытка
			День = Лев(ДатаИСЭСФ, 2);
			Месяц = Сред(ДатаИСЭСФ, 4, 2);
			Год = Прав(ДатаИСЭСФ, 4);		
			Дата = Дата(Год, Месяц, День);	
		Исключение
			Дата = Дата(1,1,1);
		КонецПопытки;	
	КонецПопытки;
	
	Возврат Дата;
	
КонецФункции

Функция ПолучитьСвойство(Знач ОбъектXDTO, Знач ИмяСвойства, Знач ПустоеЗначение) Экспорт
	
	Если ЕстьСвойство(ОбъектXDTO, ИмяСвойства) Тогда
		Значение = ОбъектXDTO[ИмяСвойства];
		Если Значение = Неопределено Тогда	
			Значение = ПустоеЗначение;	
		КонецЕсли; 
	Иначе
		Значение = ПустоеЗначение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ОбъектXDTOИзСтрокиXML(Знач СтрокаXML, Знач Фабрика, Знач Тип = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Если Тип <> Неопределено Тогда
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML, Тип);
	Иначе
		ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	КонецЕсли; 
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Проверяет, есть ли в ОбъектXDTO свойство с именем  ИмяСвойства.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - ОбъектXDTO, в котором необходимо проверить наличие свойства.
//  ИмяСвойства - Строка - Имя свойства, наличие которого необходимо проверить.
//
// Возвращаемое значение:
//  Булево - Истина - свойство с указанным именем есть в ОбъектXDTO, Ложь - в противном случае.
//
Функция ЕстьСвойство(Знач ОбъектXDTO, Знач ИмяСвойства) Экспорт 
	
	КоллекцияСвойствXDTO = ОбъектXDTO.Свойства();
	СвойствоXDTO = КоллекцияСвойствXDTO.Получить(ИмяСвойства);
	
	Если СвойствоXDTO = Неопределено Тогда
		ЕстьСвойство = Ложь;	
	Иначе
		ЕстьСвойство = Истина;	
	КонецЕсли;
	
	Возврат ЕстьСвойство;
	
КонецФункции

// Проверяет корректность заполнения документов ЭСФ для отправки в ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка.ЭСФ".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка.ЭСФ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ЭСФ.
//   Истина - Если все ЭСФ из массива можно отправлять. 
//   Ложь - Если хотя бы один ЭСФ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиСНТ(МассивИсходящихСНТ, ДополнительныеПараметры) Экспорт

	ОбработкаОбменСНТ = СНТСерверПовтИсп.ОбработкаОбменСНТ();
	
	МассивИсключаемыхСНТ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихСНТ", МассивИсходящихСНТ);
	
	МассивИсключаемыхСтатусов = Новый Массив;
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.НеПросмотрен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Доставленный);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Импортированный);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Подтвержден);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Отклонен);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Аннулирован);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыСНТ.Отозван);
		
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
	
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	СНТ.Ссылка КАК СсылкаСНТ,
	|	СНТ.Статус КАК Статус,
	|	СНТ.Состояние КАК Состояние
	|ИЗ
	|	Документ.СНТ КАК СНТ
	|ГДЕ
	|	СНТ.Ссылка В(&МассивИсходящихСНТ)
	|	И (СНТ.Статус В(&Статусы)
	|	ИЛИ СНТ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСНТ.ОбрабатываетсяСервером))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		МассивИсключаемыхСНТ.Добавить(ВыборкаДетальныеЗаписи.СсылкаСНТ);
		
		// Проверить Статус документа СНТ.
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Если ВыборкаДетальныеЗаписи.Состояние = Перечисления.СостоянияСНТ.ОбрабатываетсяСервером Тогда
				
				ТекстСообщения = НСтр("ru = 'Документ ""%1"" в состоянии ""%2"" исключен из пакета отправки.'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ВыборкаДетальныеЗаписи.СсылкаСНТ,
				ВыборкаДетальныеЗаписи.Состояние);
				
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом ""%2"" исключен из пакета отправки, отправке подлежат документы со статусами: ""%3"", ""%4"", ""%5""'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ВыборкаДетальныеЗаписи.СсылкаСНТ,
				ВыборкаДетальныеЗаписи.Статус,
				Перечисления.СтатусыСНТ.Созданный,
				Перечисления.СтатусыСНТ.Черновик,
				Перечисления.СтатусыСНТ.Ошибочный);
				
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСНТ Из МассивИсключаемыхСНТ Цикл		
		ИндексСтроки = МассивИсходящихСНТ.Найти(СтрокаСНТ);		
		Если НЕ ИндексСтроки = Неопределено Тогда			
			МассивИсходящихСНТ.Удалить(ИндексСтроки);		
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого СсылкаСНТ Из МассивИсходящихСНТ Цикл
		
		РезультатПроверки = ОбработкаОбменСНТ.ПроверитьСНТ(СсылкаСНТ);
		ОбработкаОбменСНТ.СообщитьОбнаруженыОшибки(СсылкаСНТ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
		
	Возврат МассивИсходящихСНТ.Количество() > 0;
	
КонецФункции

Функция РазрешенныеДействияПоСтатусамСНТ(Знач Направление, Знач ВидОперацииСНТ = Неопределено, Знач ОбъектСНТ = Неопределено) Экспорт
	
	РазрешенныеДействия = Новый Соответствие();
	
	//Для исходящих
	Если Направление = Перечисления.НаправленияСНТ.Исходящий Тогда	
		
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		Если ВидОперацииСНТ = Перечисления.ВидыОперацийСНТ.Ввоз 
			Или ВидОперацииСНТ = Перечисления.ВидыОперацийСНТ.Перемещение 
			Или ВидОперацииСНТ = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами 
		Тогда
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен				, Истина);
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный				, Истина);	
		КонецЕсли;
		
		Если ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда // условия когда не требуется подтверждение документа "СНТ"
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен				, Ложь);
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный				, Ложь);
		КонецЕсли;
		
		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		
		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		
		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	//Для входящих	
	Иначе
	
		//Подтверждение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		Если ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда // условия когда не требуется подтверждение документа "СНТ"
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен				, Ложь);
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный				, Ложь);
		КонецЕсли;
		
		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеПодтверждение(), СоответствиеДоступностиДействия);	
		
		//Отклонение
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Истина);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		
		Если ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Тогда // условия когда не требуется подтверждение документа "СНТ"
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен				, Ложь);
			СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный				, Ложь);
		КонецЕсли;

		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеОтклонение(), СоответствиеДоступностиДействия);	

		//Отзыв
		СоответствиеДоступностиДействия = Новый Соответствие();

		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Черновик						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.НеПросмотрен					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Доставленный					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Созданный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Импортированный				, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Ошибочный						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Подтвержден					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отклонен						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД		, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД			, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Аннулирован					, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.Отозван						, Ложь);
		СоответствиеДоступностиДействия.Вставить(Перечисления.СтатусыСНТ.ПустаяСсылка()					, Ложь);
		
		РазрешенныеДействия.Вставить(СНТКлиентСервер.ДействиеОтзыв(), СоответствиеДоступностиДействия);	

		
	КонецЕсли;
	
	Возврат РазрешенныеДействия;
		
КонецФункции

// Возвращает текст XML запроса для изменения статуса СНТ,
// а также текст для формирования подписи запроса.
//
// Параметры:
//  Действие - Строка - Определяет, какой запрос будет создан.
//  КоллецияДляИзмененияСтатусов - Соответствие - Данные для формирования запроса:
//   |- Ключ - Строка - Идентификатор СНТ, у которого будет изменен статус.
//   |- Значение - Строка - Причина изменения статуса.
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//
// Возвращаемое значение:
//  Структура - Сформированный запрос на изменение статуса.
//   |- ТекстЗапроса - Строка - Текст запроса на изменение статуса.
//   |- СтрокаДляПодписи - Строка - Строка, на основе которой будет сформирована ЭЦП запроса.
//
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеКлючаЭЦП, ТипПодписиЭСФ) Экспорт
	
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().СоздатьЗапросНаИзменениеСтатусовСНТ(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ТипПодписиЭСФ);
	
КонецФункции

// См. ЭСФКлиент.ПроверитьИсходящиеЭСФ().
Процедура ПроверитьИсходящиеСНТ(Знач МассивИсходящихСНТ) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().ПроверитьИсходящиеСНТ(МассивИсходящихСНТ);
	
КонецПроцедуры

// Заполняет документ ЭСФ на основании документа СНТ.
//
// Параметры:
//  СНТ - ДокументСсылка.СНТ -
//  СНТ, на основании которого необходимо заполнить ЭСФ.
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийЭСФИЗСНТ(Знач СсылкаСНТ, ОбъектЭСФ) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().ЗаполнитьИсходящийЭСФИзСНТ(СсылкаСНТ, ОбъектЭСФ);
	
КонецПроцедуры

// Сопоставление данных документа ЭСФ и документа СНТ.
//
// Параметры:
//  СНТ - ДокументСсылка.СНТ -
//  СНТ, на основании которого был заполнен ЭСФ.
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, который необходимо проверить.
//
Процедура СопоставитьДанныеЭСФИЗСНТ(Знач СсылкаСНТ, ОбъектЭСФ, РезультатПроверки) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().СопоставитьДанныеЭСФИЗСНТ(СсылкаСНТ, ОбъектЭСФ, РезультатПроверки);
	
КонецПроцедуры

Функция ПроверитьНаличиеСвязанногоСНТ(Основание, ЭтоПроверкаИзОснования = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СНТ.Ссылка,
		|	СНТ.Дата КАК Дата,
		|	СНТ.ДокументОснование,
		|	СНТ.РегистрационныйНомерИСЭСФ
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	СНТ.ДокументОснование = &ДокументОснование		
		|	[УсловиеПоРегНомеру]
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
	Если Не ЭтоПроверкаИзОснования Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоРегНомеру]", "И СНТ.РегистрационныйНомерИСЭСФ <> """"");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоРегНомеру]", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	
	Если ТипЗнч(Основание) <> СНТСерверПереопределяемый.ПолучитьТипДокументаНаИмпорт() Тогда
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ДанныеСНТ = Неопределено;
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
			ДанныеСНТ = Новый Структура();
			ДанныеСНТ.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка); 
			ДанныеСНТ.Вставить("Дата",   ВыборкаДетальныеЗаписи.Дата);
			ДанныеСНТ.Вставить("РегистрационныйНомерИСЭСФ", ВыборкаДетальныеЗаписи.РегистрационныйНомерИСЭСФ);
		КонецЕсли;
		
	Иначе
		
		РезультаЗапроса = Запрос.Выполнить().Выгрузить();
		МассивСсылокСНТ = РезультаЗапроса.ВыгрузитьКолонку("Ссылка");
		
		ДанныеСНТ = Новый СписокЗначений;
		ДанныеСНТ.ЗагрузитьЗначения(МассивСсылокСНТ);
		
	КонецЕсли; 
	
	Возврат ДанныеСНТ;

КонецФункции

//Возвращает данные СНТ для массива первичных документов
Функция ПроверитьНаличиеСвязанныхСНТ(МассивОснований) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СНТ.Ссылка,
		|	СНТ.Дата КАК Дата,
		|	СНТ.ДокументОснование,
		|	СНТ.РегистрационныйНомерИСЭСФ,
		|	ВЫБОР
		|		КОГДА СНТ.ТипСНТ = ЗНАЧЕНИЕ(Перечисление.ТипыСНТ.Исправленная)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Исправленная
		|ИЗ
		|	Документ.СНТ КАК СНТ
		|ГДЕ
		|	СНТ.ДокументОснование В(&МассивОснований)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОснований", МассивОснований);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДанныеСНТ = Неопределено;
	
	СоответствиеПервичныеДокументыДанныеСНТ = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеСНТ = Новый Структура();
		ДанныеСНТ.Вставить("Ссылка",					ВыборкаДетальныеЗаписи.Ссылка); 
		ДанныеСНТ.Вставить("Дата",   					ВыборкаДетальныеЗаписи.Дата);
		ДанныеСНТ.Вставить("РегистрационныйНомерИСЭСФ", ВыборкаДетальныеЗаписи.РегистрационныйНомерИСЭСФ);
		ДанныеСНТ.Вставить("Исправленная",              ВыборкаДетальныеЗаписи.Исправленная);
		
		СоответствиеПервичныеДокументыДанныеСНТ.Вставить(ВыборкаДетальныеЗаписи.ДокументОснование, ДанныеСНТ); 
	КонецЦикла;
	
	Возврат СоответствиеПервичныеДокументыДанныеСНТ;

КонецФункции

Функция ЗаполнитьИсточникиПроисхождения(Параметры, Отказ)  Экспорт
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	ЕстьТипПроисхождения = (ТаблицаТовары.Колонки.Найти("ПризнакПроисхождения") <> Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары); 
	Запрос.УстановитьПараметр("Организация",Параметры.Организация); 
	Запрос.УстановитьПараметр("Склад",Параметры.Склад); 
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	МоментВремени = Новый МоментВремени(Параметры.Дата, Параметры.Регистратор);
	ЭтоСНТ = ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.СНТ");
	
	Если ЭтоСНТ И Параметры.Свойство("СвязанныйСНТ") Тогда
		СвязанныйСНТ = Параметры.СвязанныйСНТ;
		УчитыватьТоварыИсправленнойСНТ = Истина;
		Если Параметры.Свойство("ЭтоВозвратСНТ") Тогда
			УчитыватьТолькоТоварыИсправленногоСНТ = Истина;
		Иначе                                        
			УчитыватьТолькоТоварыИсправленногоСНТ  = Ложь;			
		КонецЕсли;
		
	Иначе
		СвязанныйСНТ = Неопределено;
		УчитыватьТоварыИсправленнойСНТ        = Ложь;
		УчитыватьТолькоТоварыИсправленногоСНТ  = Ложь;
	КонецЕсли;
	
	ИмяТабличнойЧасти = Параметры.ИмяСписка;
	
	Если ЗначениеЗаполнено(Параметры.Склад)  Тогда
		КонтролироватьОстатокПоСкладу = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "КонтролироватьОстатки");
	Иначе
		//для нераспределенного склада остатки контролируем
		КонтролироватьОстатокПоСкладу = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Регистратор) Тогда		
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Включая));
	Иначе  	
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Исключая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустойИсточник", Справочники.ИсточникиПроисхождения.ПустаяСсылка());
	Запрос.УстановитьПараметр("СвязанныйСНТ", СвязанныйСНТ);
	Запрос.УстановитьПараметр("УчитыватьТоварыИсправленнойСНТ", УчитыватьТоварыИсправленнойСНТ);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", Параметры.СтруктурноеПодразделение); 
	Запрос.УстановитьПараметр("УчитыватьТолькоТоварыИсправленногоСНТ", УчитыватьТолькоТоварыИсправленногоСНТ);

	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Товар КАК Номенклатура,
	|	ТаблицаТовары.%Количество КАК Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	%ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумента,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	вт_Товары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	%ТекстПоляТипИзмеряемойВеличины,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаВиртуальныхСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыНаВиртуальныхСкладах.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыНаВиртуальныхСкладах.КоличествоОстаток - ЕСТЬNULL(Товары.Количество, 0) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиГТДПромежуточный
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&Период,
	|			Организация = &Организация
	|			И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Склад = &Склад
	|				И (Номенклатура, ЕдиницаИзмерения) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.Номенклатура,
	|						Товары.ЕдиницаИзмерения
	|					ИЗ
	|						Товары КАК Товары)) КАК ТоварыНаВиртуальныхСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО ТоварыНаВиртуальныхСкладах.Номенклатура = Товары.Номенклатура
	|			И ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|			И ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения = Товары.ИсточникПроисхождения
	|			И (Товары.ИсточникПроисхождения <> &ПустойИсточник) 
	|   ГДЕ НЕ &УчитыватьТолькоТоварыИсправленногоСНТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТоварыВиртуальногоСкладаВРезерве.Номенклатура КАК Номенклатура,
	|	ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыВиртуальногоСкладаВРезерве.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	- ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&Период,
	|			Организация = &Организация
	|			И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И Склад = &Склад
	|				И (Номенклатура, ЕдиницаИзмерения) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.Номенклатура,
	|						Товары.ЕдиницаИзмерения
	|					ИЗ
	|						Товары КАК Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО ТоварыВиртуальногоСкладаВРезерве.Номенклатура = Товары.Номенклатура
	|			И ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|			И ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения = Товары.ИсточникПроисхождения
	|			И (Товары.ИсточникПроисхождения <> &ПустойИсточник)   
	|     ГДЕ НЕ &УчитыватьТолькоТоварыИсправленногоСНТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыИсправляемогоСНТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоСНТ.%Количество КАК Количество
	|ИЗ
	|	Документ.СНТ.%Товары КАК ТоварыИсправляемогоСНТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|ГДЕ
	|	ТоварыИсправляемогоСНТ.Ссылка = &СвязанныйСНТ
	|	И ТоварыИсправляемогоСНТ.ПризнакПроисхождения <> ""6""
	|	И ТоварыИсправляемогоСНТ.ИсточникПроисхождения <> &ПустойИсточник
	|	И &УчитыватьТоварыИсправленнойСНТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|; 
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ 
	|	ОстаткиГТДПромежуточный.Номенклатура КАК Номенклатура,
	|	ОстаткиГТДПромежуточный.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ОстаткиГТДПромежуточный.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиГТДПромежуточный.ДатаДокументПартии КАК ДатаДокументПартии,
	|	СУММА(ОстаткиГТДПромежуточный.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	ОстаткиГТДПромежуточный КАК ОстаткиГТДПромежуточный
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения,
	|	ДатаДокументПартии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмеренияДокумента КАК ЕдиницаИзмеренияДокумента,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество,
	|	ЕСТЬNULL(ОстаткиГТД.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ОстаткиГТД.ИсточникПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.НомерЗаявленияВРамкахТС, """") КАК НомерЗаявленияВРамкахТС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.КодТНВЭД, """") КАК КодТНВЭД,
	|	ЕСТЬNULL(ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении, """") КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС, """") КАК ТоварНаименованиеВРамкахТС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий КАК ГСВСВходитВПеречень,
	//|	ЕСТЬNULL(СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладе,
	|	%ТекстПоляУслуга,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПошлины, ЗНАЧЕНИЕ(Перечисление.ТипыПошлинВС.ПустаяСсылка)) КАК ТипПошлины
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
	|			ПО ОстаткиГТД.ИсточникПроисхождения.ГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС
	|				И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|			ПО ОстаткиГТД.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ПО Товары.Номенклатура = ОстаткиГТД.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ОстаткиГТД.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиГТД.ДатаДокументПартии,
	|	ОстаткиГТД.ИсточникПроисхождения";
			   
	СоответсвиеПолейЗапросов = Новый Соответствие;
	СоответсвиеПолейЗапросов.Вставить("%ТекстПоляУслуга"				, "");
	СоответсвиеПолейЗапросов.Вставить("%ТекстПоляТипИзмеряемойВеличины"	, "");
	СоответсвиеПолейЗапросов.Вставить("%Количество", "");
	СоответсвиеПолейЗапросов.Вставить("%ЕдиницаИзмеренияКод", "");
	СНТСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеПолейЗапросов);
	СНТСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросовКоличество(СоответсвиеПолейЗапросов,ИмяТабличнойЧасти);	
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеПолейЗапросов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Товары", ИмяТабличнойЧасти); 	

	Запрос.Текст = ТекстЗапроса; 
				   
	ТаблицаИП = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваровПоИП = ТаблицаТовары.Скопировать();
	ТаблицаТоваровПоИП.Очистить();
	
	НомерСтроки = 1; 
	Для Каждого СтрокаТовары Из  ТаблицаТовары Цикл 
		
		ОбщаяСуммаРаспределенных = 0;
		
		Если ЭтоСНТ Тогда
			ОбщаяСуммаАкцизаРаспределенных			= 0;
			ОбщаяСуммаНДСРаспределенных				= 0;
			ОбщийОборотПоРеализацииРаспределенных	= 0;
			ОбщаяСуммаБезНалоговРаспределенных		= 0;
		КонецЕсли;
		
		//если выбрали вручную, то не перезаполняем - проверка будет дальше
		Если ЗначениеЗаполнено(СтрокаТовары.ИсточникПроисхождения)
			Или ЕстьТипПроисхождения И СтрокаТовары.ПризнакПроисхождения = "6" Тогда
			
			НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
		Иначе
			
			ЕдиницаИзмеренияОтбора = ВССерверПереопределяемый.ПолучитьЕдиницуИзмеренияОтбора(СтрокаТовары);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура"		, СтрокаТовары.Товар);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения"	, ЕдиницаИзмеренияОтбора);
			Если ИмяТабличнойЧасти = "ТоварыВС" Тогда
				СтруктураПоиска.Вставить("ПризнакУчетаНаВиртуальномСкладе"	, Истина);
			Иначе
				СтруктураПоиска.Вставить("ПризнакУчетаНаВиртуальномСкладе"	, Ложь);
			КонецЕсли;
			   				
			СтрокиИП = ТаблицаИП.НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = СтрокаТовары.Количество;
			
			Для Каждого СтрокаИП Из СтрокиИП Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаИП.КоличествоОстаток <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтроки = Мин(СтрокаИП.КоличествоОстаток, КоличествоОсталосьПогасить);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСтроки;	
				
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары,, "ЕдиницаИзмерения, НомерСтроки");
				
				НоваяСтрока.ЕдиницаИзмерения = СтрокаИП.ЕдиницаИзмеренияДокумента;
				НоваяСтрока.НомерСтроки 	 = НомерСтроки;
				
				НомерСтроки = НомерСтроки + 1; 
				
				//Заполнение признака происхождения
				Если ЭтоСНТ Тогда
					Если СтрокаИП.Услуга Тогда
						НоваяСтрока.ПризнакПроисхождения ="6";
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаИП.ТипПроисхождения) ИЛИ НЕ ЗначениеЗаполнено(СтрокаИП.ГСВСВходитВПеречень) Тогда
						
						НоваяСтрока.ПризнакПроисхождения = "5";
						
						ТекстОшибки = НСтр(
						"ru = 'Для товара ""%1"" (номер строки: %2) не указан Тип происхождения или отсутствуют данные по ГСВС в источнике происхождения.
						|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению. 
						|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
						
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						НоваяСтрока.Товар,
						НоваяСтрока.НомерСтроки);
						
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ПризнакПроисхождения, "Объект");	
						
						
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "1";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "2";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "3";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "4";
					Иначе
						НоваяСтрока.ПризнакПроисхождения = "5";
					КонецЕсли; 
				КонецЕсли;
				
				//Заполнение полей из ИП
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП);
				Если НЕ ЭтоСНТ Тогда
					НоваяСтрока.СоставнойКодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(НоваяСтрока.ГСВС, "Наименование");
				КонецЕсли;
				
				КодГСВС = "";
				ФизическаяМетка = "";
				ИдентификаторСклада = "";
				КлючевыеПоляЗаполнены = Истина;
				СписокНезаполненныхПолей = "";
				ДополнительныйИдентификатор = "";
				
				Если ЭтоСНТ И СтрокаИП.ПризнакУчетаНаВиртуальномСкладе Тогда				
					Если ЗначениеЗаполнено(СтрокаИП.ГСВС) Тогда
						КодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаИП.ГСВС, "Наименование");
					КонецЕсли;
									
					Если ЗначениеЗаполнено(СтрокаИП.ФизическаяМетка) Тогда
						ФизическаяМетка = "[" + СтрокаИП.ФизическаяМетка + "]";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаИП.ДополнительныйИдентификатор) Тогда
						ДополнительныйИдентификатор = "<" + Формат(СтрокаИП.ДополнительныйИдентификатор,"ЧГ=") + ">";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Параметры.Склад) Тогда
						ИдентификаторСклада = Формат(ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "Код"), "ЧГ=");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КодГСВС) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Код ГСВС, ";
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ИдентификаторСклада) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Идентификатор склада";
					КонецЕсли;
								
					Если КлючевыеПоляЗаполнены Тогда
						//ИдентификаторТовара = "%1%2%3(%4)";
						ИдентификаторТовара = "%1%2%3";    //исключена метка склада с 09.11.2020
						ИдентификаторТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИдентификаторТовара, КодГСВС, ФизическаяМетка, ДополнительныйИдентификатор, ИдентификаторСклада ); 
						НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
					Иначе
						ТекстОшибки = НСтр("ru='Строка: %1. Не удалось заполнить поле ""Идентификатор товара"" по причине: не заполнены поля: %2.' ");
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НоваяСтрока.НомерСтроки, СписокНезаполненныхПолей);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ИдентификаторТовара, "Объект");	
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Количество = КоличествоСтроки;
				
				КоличествоОстаток			= СтрокаИП.КоличествоОстаток -  КоличествоСтроки;
				СтрокаИП.КоличествоОстаток 	= ?(КоличествоОстаток < 0, 0, КоличествоОстаток);
				
				//Пересчет суммовых значений  
				ДоляКоличестваНовойСтроки = КоличествоСтроки / СтрокаТовары.Количество;

				НоваяСтрока.Сумма = СтрокаТовары.Сумма * ДоляКоличестваНовойСтроки;
				Если ЭтоСНТ Тогда
					НоваяСтрока.СуммаАкциза 		= СтрокаТовары.СуммаАкциза * ДоляКоличестваНовойСтроки;
					НоваяСтрока.СуммаНДС			= СтрокаТовары.СуммаНДС * ДоляКоличестваНовойСтроки;
					НоваяСтрока.ОборотПоРеализации 	= СтрокаТовары.ОборотПоРеализации * ДоляКоличестваНовойСтроки;
					НоваяСтрока.СуммаБезНалогов		= НоваяСтрока.Сумма - НоваяСтрока.СуммаАкциза - НоваяСтрока.СуммаНДС;
				КонецЕсли;
				ОбщаяСуммаРаспределенных				= ОбщаяСуммаРаспределенных + НоваяСтрока.Сумма;				        				
				
				Если ЭтоСНТ Тогда
				
					ОбщаяСуммаАкцизаРаспределенных			= ОбщаяСуммаАкцизаРаспределенных + НоваяСтрока.СуммаАкциза;
					ОбщаяСуммаНДСРаспределенных				= ОбщаяСуммаНДСРаспределенных + НоваяСтрока.СуммаНДС;
					ОбщийОборотПоРеализацииРаспределенных	= ОбщийОборотПоРеализацииРаспределенных + НоваяСтрока.ОборотПоРеализации;
					ОбщаяСуммаБезНалоговРаспределенных		= ОбщаяСуммаБезНалоговРаспределенных + НоваяСтрока.СуммаБезНалогов;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, , "НомерСтроки");
				
				НоваяСтрока.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1; 
				
				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				ДоляКоличестваНовойСтроки = КоличествоОсталосьПогасить / СтрокаТовары.Количество;
				
				НоваяСтрока.Сумма 				= СтрокаТовары.Сумма * ДоляКоличестваНовойСтроки;
				НоваяСтрока.СуммаАкциза 		= СтрокаТовары.СуммаАкциза * ДоляКоличестваНовойСтроки;
				НоваяСтрока.СуммаНДС			= СтрокаТовары.СуммаНДС * ДоляКоличестваНовойСтроки;
				НоваяСтрока.ОборотПоРеализации 	= СтрокаТовары.ОборотПоРеализации * ДоляКоличестваНовойСтроки;
				НоваяСтрока.СуммаБезНалогов		= НоваяСтрока.Сумма - НоваяСтрока.СуммаАкциза - НоваяСтрока.СуммаНДС;
				
				НоваяСтрока.ИсточникПроисхождения 			= ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
							
				ТекстОшибки = НСтр("ru='Строка: %1. Не распределено по источникам происхождения товара <%2> в количестве %3 %4 по организации <%5> на складе <%6>.' ");
				ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НоваяСтрока.НомерСтроки + 1, НоваяСтрока.Товар,
				КоличествоОсталосьПогасить, НоваяСтрока.ЕдиницаИзмерения, Параметры.Организация,Параметры.Склад);
				ПолеКоличество	= Параметры.ИмяСписка + "[" + Формат(НоваяСтрока.НомерСтроки, "ЧН=0; ЧГ=") + "].Количество";	
				
				Если КонтролироватьОстатокПоСкладу Тогда
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Параметры.Регистратор, ПолеКоличество, "Объект", Отказ);						
				Иначе
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Параметры.Регистратор, ПолеКоличество, "Объект");						
				КонецЕсли;
				
			КонецЕсли;
			
			//Суммовые значения последней строки для корректировки ошибок округления
			Если НоваяСтрока <> Неопределено Тогда
				Если ОбщаяСуммаРаспределенных > 0 И СтрокаТовары.Сумма <> ОбщаяСуммаРаспределенных Тогда
					НоваяСтрока.Сумма = СтрокаТовары.Сумма - ОбщаяСуммаРаспределенных;
				КонецЕсли;
				Если ЭтоСНТ Тогда
					Если ОбщаяСуммаАкцизаРаспределенных > 0 И СтрокаТовары.СуммаАкциза <> ОбщаяСуммаАкцизаРаспределенных Тогда
						НоваяСтрока.СуммаАкциза = НоваяСтрока.СуммаАкциза + (СтрокаТовары.СуммаАкциза - ОбщаяСуммаАкцизаРаспределенных);
					КонецЕсли;
					Если ОбщаяСуммаНДСРаспределенных > 0 И СтрокаТовары.СуммаНДС <> ОбщаяСуммаНДСРаспределенных Тогда
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + (СтрокаТовары.СуммаНДС - ОбщаяСуммаНДСРаспределенных); 
					КонецЕсли;
					Если ОбщийОборотПоРеализацииРаспределенных > 0 И СтрокаТовары.ОборотПоРеализации <> ОбщийОборотПоРеализацииРаспределенных Тогда
						НоваяСтрока.ОборотПоРеализации = НоваяСтрока.ОборотПоРеализации + (СтрокаТовары.ОборотПоРеализации - ОбщийОборотПоРеализацииРаспределенных);
					КонецЕсли;
					Если ОбщаяСуммаБезНалоговРаспределенных > 0 И СтрокаТовары.СуммаБезНалогов <> ОбщаяСуммаБезНалоговРаспределенных Тогда
						НоваяСтрока.СуммаБезНалогов = НоваяСтрока.СуммаБезНалогов + (СтрокаТовары.СуммаБезНалогов - ОбщаяСуммаБезНалоговРаспределенных);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли

		КонецЕсли;
		
	КонецЦикла;
	    
	Возврат  ПоместитьВоВременноеХранилище(ТаблицаТоваровПоИП); 	

КонецФункции

Функция ЗаполнитьТаблицуНомеровСтрокСНТ(МассивСНТ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СНТТоварыВС.Ссылка КАК Ссылка,
	                      |	СНТТоварыВС.НомерСтрокиСНТ КАК НомерСтрокиВВС,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка) КАК ТипФормы,
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка) КАК ВидДетализации,
	                      |	СНТТоварыВС.НомерСтроки КАК НомерСтрокиВДокументе,
	                      |	"""" КАК НомерЗаявленияВРамкахТС,
	                      |	СНТТоварыВС.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТТоварыВС.ДополнительныйИдентификатор КАК ИдентификаторТовараВДокументе,
	                      |	СНТТоварыВС.ДополнительныйИдентификаторПолучатель КАК ИдентификаторТовараВДокументеПолучатель,
	                      |	СНТТоварыВС.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТСВДокументе,
	                      |	1 КАК НомерТабличнойЧасти,
	                      |	СНТТоварыВС.НомерФНО,
	                      |	СНТТоварыВС.НомерПозицииИзФНО
	                      |ПОМЕСТИТЬ ВТ_Товары
	                      |ИЗ
	                      |	Документ.СНТ.ТоварыВС КАК СНТТоварыВС
	                      |ГДЕ
	                      |	СНТТоварыВС.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТЭтиловыйСпирт.Ссылка,
	                      |	СНТЭтиловыйСпирт.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТЭтиловыйСпирт.НомерСтроки,
	                      |	"""",
	                      |	СНТЭтиловыйСпирт.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТЭтиловыйСпирт.ДополнительныйИдентификатор,
	                      |	СНТЭтиловыйСпирт.ДополнительныйИдентификаторПолучатель,
	                      |	СНТЭтиловыйСпирт.ТоварНаименованиеВРамкахТС,
	                      |	2,
	                      |	СНТЭтиловыйСпирт.НомерФНО,
	                      |	СНТЭтиловыйСпирт.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ЭтиловыйСпирт КАК СНТЭтиловыйСпирт
	                      |ГДЕ
	                      |	СНТЭтиловыйСпирт.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТВиноматериал.Ссылка,
	                      |	СНТВиноматериал.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТВиноматериал.НомерСтроки,
	                      |	"""",
	                      |	СНТВиноматериал.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТВиноматериал.ДополнительныйИдентификатор,
	                      |	СНТВиноматериал.ДополнительныйИдентификаторПолучатель,
	                      |	СНТВиноматериал.ТоварНаименованиеВРамкахТС,
	                      |	3,
	                      |	СНТВиноматериал.НомерФНО,
	                      |	СНТВиноматериал.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.Виноматериал КАК СНТВиноматериал
	                      |ГДЕ
	                      |	СНТВиноматериал.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТПивоПивныеНапитки.Ссылка,
	                      |	СНТПивоПивныеНапитки.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТПивоПивныеНапитки.НомерСтроки,
	                      |	"""",
	                      |	СНТПивоПивныеНапитки.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТПивоПивныеНапитки.ДополнительныйИдентификатор,
	                      |	СНТПивоПивныеНапитки.ДополнительныйИдентификаторПолучатель,
	                      |	СНТПивоПивныеНапитки.ТоварНаименованиеВРамкахТС,
	                      |	4,
	                      |	СНТПивоПивныеНапитки.НомерФНО,
	                      |	СНТПивоПивныеНапитки.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ПивоПивныеНапитки КАК СНТПивоПивныеНапитки
	                      |ГДЕ
	                      |	СНТПивоПивныеНапитки.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТАлкогольнаяПродукцияКромеПива.Ссылка,
	                      |	СНТАлкогольнаяПродукцияКромеПива.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТАлкогольнаяПродукцияКромеПива.НомерСтроки,
	                      |	"""",
	                      |	СНТАлкогольнаяПродукцияКромеПива.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТАлкогольнаяПродукцияКромеПива.ДополнительныйИдентификатор,
	                      |	СНТАлкогольнаяПродукцияКромеПива.ДополнительныйИдентификаторПолучатель,
	                      |	СНТАлкогольнаяПродукцияКромеПива.ТоварНаименованиеВРамкахТС,
	                      |	5,
	                      |	СНТАлкогольнаяПродукцияКромеПива.НомерФНО,
	                      |	СНТАлкогольнаяПродукцияКромеПива.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК СНТАлкогольнаяПродукцияКромеПива
	                      |ГДЕ
	                      |	СНТАлкогольнаяПродукцияКромеПива.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТДанныеПоНефтепродуктам.Ссылка,
	                      |	СНТДанныеПоНефтепродуктам.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТДанныеПоНефтепродуктам.НомерСтроки,
	                      |	"""",
	                      |	СНТДанныеПоНефтепродуктам.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТДанныеПоНефтепродуктам.ДополнительныйИдентификатор,
	                      |	СНТДанныеПоНефтепродуктам.ДополнительныйИдентификаторПолучатель,
	                      |	СНТДанныеПоНефтепродуктам.ТоварНаименованиеВРамкахТС,
	                      |	6,
	                      |	СНТДанныеПоНефтепродуктам.НомерФНО,
	                      |	СНТДанныеПоНефтепродуктам.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ДанныеПоНефтепродуктам КАК СНТДанныеПоНефтепродуктам
	                      |ГДЕ
	                      |	СНТДанныеПоНефтепродуктам.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТДанныеПоБиотопливу.Ссылка,
	                      |	СНТДанныеПоБиотопливу.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТДанныеПоБиотопливу.НомерСтроки,
	                      |	"""",
	                      |	СНТДанныеПоБиотопливу.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТДанныеПоБиотопливу.ДополнительныйИдентификатор,
	                      |	СНТДанныеПоБиотопливу.ДополнительныйИдентификаторПолучатель,
	                      |	СНТДанныеПоБиотопливу.ТоварНаименованиеВРамкахТС,
	                      |	7,
	                      |	СНТДанныеПоБиотопливу.НомерФНО,
	                      |	СНТДанныеПоБиотопливу.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ДанныеПоБиотопливу КАК СНТДанныеПоБиотопливу
	                      |ГДЕ
	                      |	СНТДанныеПоБиотопливу.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТТабачнаяПродукция.Ссылка,
	                      |	СНТТабачнаяПродукция.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТТабачнаяПродукция.НомерСтроки,
	                      |	"""",
	                      |	СНТТабачнаяПродукция.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТТабачнаяПродукция.ДополнительныйИдентификатор,
	                      |	СНТТабачнаяПродукция.ДополнительныйИдентификаторПолучатель,
	                      |	СНТТабачнаяПродукция.ТоварНаименованиеВРамкахТС,
	                      |	8,
	                      |	СНТТабачнаяПродукция.НомерФНО,
	                      |	СНТТабачнаяПродукция.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ТабачнаяПродукция КАК СНТТабачнаяПродукция
	                      |ГДЕ
	                      |	СНТТабачнаяПродукция.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТДругиеТоварыЦифроваяМаркировка.Ссылка,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТДругиеТоварыЦифроваяМаркировка.НомерСтроки,
	                      |	"""",
	                      |	СНТДругиеТоварыЦифроваяМаркировка.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.ДополнительныйИдентификатор,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.ДополнительныйИдентификаторПолучатель,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.ТоварНаименованиеВРамкахТС,
	                      |	9,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.НомерФНО,
	                      |	СНТДругиеТоварыЦифроваяМаркировка.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК СНТДругиеТоварыЦифроваяМаркировка
	                      |ГДЕ
	                      |	СНТДругиеТоварыЦифроваяМаркировка.Ссылка В(&МассивСНТ)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СНТТоварыЭкспортныйКонтроль.Ссылка,
	                      |	СНТТоварыЭкспортныйКонтроль.НомерСтрокиСНТ,
	                      |	ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка),
	                      |	ЗНАЧЕНИЕ(Перечисление.ВидДетализации.ПустаяСсылка),
	                      |	СНТТоварыЭкспортныйКонтроль.НомерСтроки,
	                      |	"""",
	                      |	СНТТоварыЭкспортныйКонтроль.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	СНТТоварыЭкспортныйКонтроль.ДополнительныйИдентификатор,
	                      |	СНТТоварыЭкспортныйКонтроль.ДополнительныйИдентификаторПолучатель,
	                      |	СНТТоварыЭкспортныйКонтроль.ТоварНаименованиеВРамкахТС,
	                      |	10,
	                      |	СНТТоварыЭкспортныйКонтроль.НомерФНО,
	                      |	СНТТоварыЭкспортныйКонтроль.НомерПозицииИзФНО
	                      |ИЗ
	                      |	Документ.СНТ.ТоварыЭкспортныйКонтроль КАК СНТТоварыЭкспортныйКонтроль
	                      |ГДЕ
	                      |	СНТТоварыЭкспортныйКонтроль.Ссылка В(&МассивСНТ)
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	СНТ.Ссылка,
	                      |	СНТ.Проведен,
	                      |	СНТ.РегистрационныйНомерИСЭСФ КАК РегистрационныйНомер,
	                      |	ВЫБОР
	                      |		КОГДА СНТ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
	                      |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами)
	                      |		ИНАЧЕ ВТ_Товары.ТипФормы
	                      |	КОНЕЦ КАК ТипФормы,
	                      |	ВТ_Товары.НомерСтрокиВВС,
	                      |	ВТ_Товары.ВидДетализации,
	                      |	ВТ_Товары.НомерСтрокиВДокументе,
	                      |	ВТ_Товары.НомерЗаявленияВРамкахТС,
	                      |	ВТ_Товары.НомерПозицииВДекларацииИлиЗаявлении,
	                      |	ВТ_Товары.ИдентификаторТовараВДокументе,
	                      |	ВТ_Товары.ИдентификаторТовараВДокументеПолучатель,
	                      |	ВТ_Товары.ТоварНаименованиеВРамкахТСВДокументе,
	                      |	ВТ_Товары.НомерТабличнойЧасти,
	                      |	ВТ_Товары.НомерФНО,
	                      |	ВТ_Товары.НомерПозицииИзФНО
	                      |ИЗ
	                      |	ВТ_Товары КАК ВТ_Товары
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ КАК СНТ
	                      |		ПО ВТ_Товары.Ссылка = СНТ.Ссылка");
	

	Запрос.УстановитьПараметр("МассивСНТ", МассивСНТ);
	ТаблицаНомеровСтрокСНТ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНомеровСтрокСНТ;
	
КонецФункции

Функция ПроверитьСтатусНеТребуетПодтверждения(ОбъектСНТ) Экспорт

	НеТребуетПодтверждения = Ложь;
	
	// Получатель «Розничный реализатор» и заполнен раздел G1
	Если ОбъектСНТ.ПолучательРозничныйРеализатор И НЕ ОбъектСНТ.ЕстьЭтиловыйСпирт И НЕ ОбъектСНТ.ЕстьВиноматериал И НЕ ОбъектСНТ.ЕстьАлкоголь И НЕ ОбъектСНТ.ЕстьПивоПивныеНапитки
		И НЕ ОбъектСНТ.ЕстьНефтепродукты И НЕ ОбъектСНТ.ЕстьБиотопливо И НЕ ОбъектСНТ.ЕстьТабачныеИзделия 
		И НЕ ОбъектСНТ.ЕстьДругиеТоварыЦифроваяМаркировка И НЕ ОбъектСНТ.ЕстьТоварыЭК Тогда
		
		Если ТипЗнч(ОбъектСНТ.ТоварыВС) = Тип ("Булево") И ОбъектСНТ.ТоварыВС Тогда
			НеТребуетПодтверждения = Истина;
		ИначеЕсли ТипЗнч(ОбъектСНТ.ТоварыВС) <> Тип ("Булево") И ОбъектСНТ.ТоварыВС.Количество() <> 0 Тогда
			НеТребуетПодтверждения = Истина;
		КонецЕсли;
		
	ИначеЕсли (ОбъектСНТ.ПолучательФизическоеЛицо ИЛИ ОбъектСНТ.ПолучательРозничнаяРеализация) Тогда// Получатель «Физическое лицо» или Получатель «Розничная реализация»
		
		НеТребуетПодтверждения = Истина;
			
	ИначеЕсли (НЕ ОбъектСНТ.ЕстьЭтиловыйСпирт ИЛИ (ОбъектСНТ.ЕстьЭтиловыйСпирт И (ОбъектСНТ.КодОперацииG2 = 2 ИЛИ ОбъектСНТ.КодОперацииG2 = 3 ИЛИ ОбъектСНТ.КодОперацииG2 = 15))) // Этиловый спирт «2» - Отгрузка ЭС на медицинские нужды или «3» - Отгрузка ЭС на технические нужды.
		И (НЕ ОбъектСНТ.ЕстьПивоПивныеНапитки ИЛИ (ОбъектСНТ.ЕстьПивоПивныеНапитки И ОбъектСНТ.КодОперацииG4 = 15))
		И (НЕ ОбъектСНТ.ЕстьАлкоголь ИЛИ (ОбъектСНТ.ЕстьАлкоголь И ОбъектСНТ.КодОперацииG5 = 15)) // «15» - Отгрузка на территорию г. Байконур и не заполнено поле « ИИН/БИН получателя»
		И (НЕ ОбъектСНТ.ЕстьНефтепродукты ИЛИ (ОбъектСНТ.ЕстьНефтепродукты И (ОбъектСНТ.КодОперацииG6 = 21 ИЛИ ОбъектСНТ.КодОперацииG6 = 22 ИЛИ ОбъектСНТ.КодОперацииG6 = 26))) // Данные по нефтепродуктам «21» - Реализация в розничную сеть или «22» - Конечному потребителю или «26» Отгрузка на территорию г. Байконур
		И (НЕ ОбъектСНТ.ЕстьБиотопливо ИЛИ (ОбъектСНТ.ЕстьБиотопливо И (ОбъектСНТ.КодОперацииG7 = 34 ИЛИ ОбъектСНТ.КодОперацииG7 = 37))) // Данные по биотопливу «34» Отгрузка на территорию г. Байконур или «37» Конечному потребителю
		
		И НЕ ОбъектСНТ.ПолучательРозничныйРеализатор 
		И НЕ ОбъектСНТ.ЕстьВиноматериал И НЕ ОбъектСНТ.ЕстьТабачныеИзделия И НЕ ОбъектСНТ.ЕстьДругиеТоварыЦифроваяМаркировка И НЕ ОбъектСНТ.ЕстьТоварыЭК Тогда
		
		Если ТипЗнч(ОбъектСНТ.ТоварыВС) = Тип ("Булево") И НЕ ОбъектСНТ.ТоварыВС Тогда
			НеТребуетПодтверждения = Истина;
		ИначеЕсли ТипЗнч(ОбъектСНТ.ТоварыВС) <> Тип ("Булево") И ОбъектСНТ.ТоварыВС.Количество() = 0 Тогда
			НеТребуетПодтверждения = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат НеТребуетПодтверждения;

КонецФункции

Функция ПолучитьТаблицуТоваровСопоставленныхИП(СНТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СНТ);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТоварыВС.ИсточникПроисхождения
	|ПОМЕСТИТЬ ТоварыСНТ
	|ИЗ
	|	Документ.СНТ.ТоварыВС КАК ТоварыВС
	|ГДЕ
	|	ТоварыВС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНТЭтиловыйСпирт.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ЭтиловыйСпирт КАК СНТЭтиловыйСпирт
	|ГДЕ
	|	СНТЭтиловыйСпирт.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНТВиноматериал.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.Виноматериал КАК СНТВиноматериал
	|ГДЕ
	|	СНТВиноматериал.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СНТПивоПивныеНапитки.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ПивоПивныеНапитки КАК СНТПивоПивныеНапитки
	|ГДЕ
	|	СНТПивоПивныеНапитки.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяпродукцияКромеПива.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК АлкогольнаяпродукцияКромеПива
	|ГДЕ
	|	АлкогольнаяпродукцияКромеПива.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПоНефтепродуктам.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ДанныеПоНефтепродуктам КАК ДанныеПоНефтепродуктам
	|ГДЕ
	|	ДанныеПоНефтепродуктам.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПоБиотопливу.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ДанныеПоБиотопливу КАК ДанныеПоБиотопливу
	|ГДЕ
	|	ДанныеПоБиотопливу.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабачнаяПродукция.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ТабачнаяПродукция КАК ТабачнаяПродукция
	|ГДЕ
	|	ТабачнаяПродукция.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДругиеТоварыЦифроваяМаркировка.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК ДругиеТоварыЦифроваяМаркировка
	|ГДЕ
	|	ДругиеТоварыЦифроваяМаркировка.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыЭкспортныйКонтроль.ИсточникПроисхождения
	|ИЗ
	|	Документ.СНТ.ТоварыЭкспортныйКонтроль КАК ТоварыЭкспортныйКонтроль
	|ГДЕ
	|	ТоварыЭкспортныйКонтроль.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС, """") КАК ТоварНаименованиеВРамкахТС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПошлины, ЗНАЧЕНИЕ(Перечисление.ТипыПошлинВС.ПустаяСсылка)) КАК ТипПошлины,
	|	ИсточникиПроисхождения.ДокументПартии КАК ДокументПартии,
	|	ЕСТЬNULL(СопоставленныеИП.ИсточникПроисхожденияПослеСопоставления, ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)) КАК ИсточникПроисхожденияПослеСопоставления
	|ИЗ
	|	ТоварыСНТ КАК ТоварыСНТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыСНТ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставленныеИсточникиПроисхождения КАК СопоставленныеИП
	|		ПО ТоварыСНТ.ИсточникПроисхождения = СопоставленныеИП.ИсточникПроисхожденияДоСопоставления
	|ГДЕ
	|	СопоставленныеИП.ИсточникПроисхожденияПослеСопоставления ЕСТЬ НЕ NULL ";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#Область ПараметрыДляЗаполнениеПТУ

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияСНТ = ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияСНТ = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов 		= ТаблицыДанныхДляЗаполненияСНТ.ТаблицаРеквизитов;
	ТаблицаТовары 			= ТаблицыДанныхДляЗаполненияСНТ.ТаблицаТовары;
	
	СтруктураДокумента 		= СНТСерверПереопределяемый.ПолучитьПустуюСтруктуруДокументаПТУ();
	
	Реквизиты		= СтруктураДокумента.Реквизиты;
	Товары 			= СтруктураДокумента.Товары;
	
	СобщениеВыведено = Ложь;
	
	ТекущийДокументОснования = Неопределено;
	ДанныеДляСозданияСПустымСкладом = ТаблицаРеквизитов.СкопироватьКолонки(); 

	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
			
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		ТипДокумента   = ТипЗнч(ТекущийДокументОснования);
		Реквизиты.Очистить();
		Товары.Очистить();
	
		ПараметрыОтбораПоОснованиям = Новый Структура();
		ПараметрыОтбораПоОснованиям.Вставить("ДокументОснование", СтрокаРеквизитов.ДокументОснование);
		НайденныеДублиСтрок = ТаблицаРеквизитов.НайтиСтроки(ПараметрыОтбораПоОснованиям);
				
		Если НайденныеДублиСтрок.Количество() > 1 Тогда
			//Если для одного склада ВС установлено соответствие с несколькими складами, необходимо создать только 1 ПТУ 
			//с пустым складом и вывести сообщение.
			//Для этого из общей таблицы отбираем строки по одному основанию, если их несколько, значит нашлось несколько соответствий складов.
			СуществующаяСтрока = ДанныеДляСозданияСПустымСкладом.Найти(СтрокаРеквизитов.ДокументОснование, "ДокументОснование");
			Если СуществующаяСтрока = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеДляСозданияСПустымСкладом.Добавить(), СтрокаРеквизитов, , "Склад");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
 	//	
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		
		МассивСтрокТовары 			= ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Товары 			= Товары.СкопироватьКолонки();
		
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		КонецЦикла;	
		
		//Если были СНТ со складом ВС, которому соответствует несколько складов, ПТУ создается с пустым складом.
		//Такие основания отобраны в отдельную ТЗ без дублей, по ней необходимо сделать отдельный обход.
		КоличествоОснованийДляСозданияСПустымСкладом = ДанныеДляСозданияСПустымСкладом.Количество();
		Если КоличествоОснованийДляСозданияСПустымСкладом > 0 Тогда
			Для Каждого СтрокаРеквизитов ИЗ  ДанныеДляСозданияСПустымСкладом Цикл
				
				Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
					НомерПакета = 1;		
				Иначе
					НомерПакета = НомерПакета + 1;		
				КонецЕсли;		
				
				Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
					ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
				КонецЕсли;
				
				ТипДокумента = ТипЗнч(ТекущийДокументОснования);
				Реквизиты.Очистить();
				Товары.Очистить();
				
				НоваяСтрокаРеквизитов = Реквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
				
				МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
				Товары = Товары.СкопироватьКолонки();
				
				Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				КонецЦикла; 
				
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать()); 
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			КонецЦикла;
		КонецЕсли;	
		
	Возврат ДанныеДляЗаполнения;	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивСНТДляСозданияПервичныхДокументов;
	
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = СНТСерверПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияПервичныхДокументов(ПараметрыЗаполнения);
	ТекстЗапроса = СНТСерверПереопределяемый.ДополнитьТекстЗапросЗаполненияПТУ(ТекстЗапроса);
				
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияСНТ = Новый Структура;
	ТаблицыДанныхДляЗаполненияСНТ.Вставить("ТаблицаРеквизитов"		, РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияСНТ.Вставить("ТаблицаТовары"			, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
		
	Возврат ТаблицыДанныхДляЗаполненияСНТ;
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияПервичныхДокументов(ТекстЗапроса) Экспорт
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.Контрагент,
	|	вт_ДанныеДокумента.ДатаОтгрузкиТовара,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	вт_ДанныеДокумента.Валюта,
	|	вт_ДанныеДокумента.ВалютаКод,
	|	вт_ДанныеДокумента.КурсВалюты,
	|	вт_ДанныеДокумента.УчитыватьНДС,
	|	вт_ДанныеДокумента.СуммаВключаетНДС,
	|	вт_ДанныеДокумента.УчитыватьАкциз,
	|	вт_ДанныеДокумента.СуммаВключаетАкциз,
	|		ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладОтправитель) = ТИП(Справочник.ВиртуальныеСклады)
	|					ТОГДА вт_ДанныеДокумента.СкладОтправитель
	|				ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляОтправителя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|	КОНЕЦ КАК СкладОтправитель,
	|	вт_ДанныеДокумента.СкладПолучатель,
	|	вт_ДанныеДокумента.ПоставщикИдентификатор,
	|	вт_ДанныеДокумента.ПоставщикНаименование,
	|	вт_ДанныеДокумента.ПоставщикНерезидент,
	|	вт_ДанныеДокумента.ПоставщикКодСтраны,
	|	вт_ДанныеДокумента.ПоставщикКодСтраныОтправки,
	|	вт_ДанныеДокумента.ПолучательИдентификатор,
	|	вт_ДанныеДокумента.ПолучательНаименование,
	|	вт_ДанныеДокумента.ПолучательКодСтраны,
	|	вт_ДанныеДокумента.ПолучательКодСтраныДоставки,
	|	вт_ДанныеДокумента.ПолучательНерезидент,
	|	вт_ДанныеДокумента.АдресДоставки,
	|	вт_ДанныеДокумента.ДоговорПоставки,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.ТоварНаименование,
	|	вт_ДанныеДокумента.КодТНВЭД,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияКод,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.Сумма,
	|	вт_ДанныеДокумента.СуммаБезНалогов,
	|	вт_ДанныеДокумента.ОборотПоРеализации,
	|	вт_ДанныеДокумента.Цена,
	|	вт_ДанныеДокумента.ПризнакПроисхождения,
	|	вт_ДанныеДокумента.НомерЗаявленияВРамкахТС,
	|	вт_ДанныеДокумента.НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_ДанныеДокумента.СтавкаАкциза,
	|	вт_ДанныеДокумента.СуммаАкциза,
	|	вт_ДанныеДокумента.СтавкаНДС,
	|	вт_ДанныеДокумента.СуммаНДС,
	|	вт_ДанныеДокумента.ИдентификаторТовара,
	|	вт_ДанныеДокумента.ИмяТабличнойЧасти,
	|	вт_ДанныеДокумента.ЗапрещеноРазбиватьДокумент,
	|	вт_ДанныеДокумента.РаспределятьТоварыПоИП,
	|	вт_ДанныеДокумента.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	вт_ДанныеДокумента.ПрефиксВидаДокумента,
	|	вт_ДанныеДокумента.НомерУчетногоДокумента,
	|	вт_ДанныеДокумента.НомерПакета"
	+
	СНТСерверПереопределяемый.ПолучитьДополнительныеПереопределяемыеПоля()
	+ "
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КонтактнаяИнформация КАК КонтактнаяИнформацияОтправителя
	|		ПО вт_ДанныеДокумента.Организация = КонтактнаяИнформацияОтправителя.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляОтправителя
	|		ПО вт_ДанныеДокумента.Организация = СоответствиеСкладовДляОтправителя.Организация
	|			И вт_ДанныеДокумента.СкладОтправитель = СоответствиеСкладовДляОтправителя.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляПолучателя
	|		ПО вт_ДанныеДокумента.Организация
	|			= СоответствиеСкладовДляПолучателя.Организация
	|			И вт_ДанныеДокумента.СкладПолучатель = СоответствиеСкладовДляПолучателя.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныйСкладНераспределенныхТоваров
	|		ПО вт_ДанныеДокумента.Организация = ВиртуальныйСкладНераспределенныхТоваров.Организация
	|			И (ВиртуальныйСкладНераспределенныхТоваров.ПризнакОприходования = ИСТИНА)
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|";

	Возврат ТекстЗапроса + ПолучитьТекстПакетовЗапросаДляЗаполненияСНТ();
	
КонецФункции

Функция СоздатьСписокПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	СписокПервичныхДокументов  = Новый Массив;
	Отказ 		= Ложь;
	
	ПараметрыЗаполненияПервичныхДокументов = ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания);
	МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияПервичныхДокументов(ПараметрыЗаполненияПервичныхДокументов);
	НачатьТранзакцию();
	
	УстановитьПривилегированныйРежим(Истина);
	СНТСерверПереопределяемый.ЗаполнитьМассивПервичныхДокументов(ПараметрыЗаполненияПервичныхДокументов, МассивДанныхДляЗаполнения, СписокПервичныхДокументов, Отказ);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		СписокПервичныхДокументов.Очистить();
		Возврат СписокПервичныхДокументов; 
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокПервичныхДокументов;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументов(ПараметрыСоздания) Экспорт
	
	ПараметрыЗаполненияСНТ = ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСоздания Цикл
		ПараметрыЗаполненияСНТ.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
		
	Возврат ПараметрыЗаполненияСНТ;
	
КонецФункции

Функция ПолучитьПараметрыЗаполненияПервичныхДокументовПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияПервичныхДокументов = Новый Структура;	
	
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ДатаДокумента"	, ВСОбщегоНазначения.ТекущаяДатаПользователя());
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
	ПараметрыЗаполненияПервичныхДокументов.Вставить("ФормироватьСписокДокументов" 		, Истина);
		
	Возврат ПараметрыЗаполненияПервичныхДокументов;
	
КонецФункции

Функция МассивСНТСДокументомОснованияИБез(МассивСНТ) Экспорт
	
	СтруктураСДокументомОснованияИБез = Новый Структура;
	МассивСНТСДокументомОснования = Новый Массив;
	МассивСНТБезДокументаОснования = Новый Массив;
	
	Для Каждого ДокументСНТ Из МассивСНТ Цикл
	
		Если ЗначениеЗаполнено(ДокументСНТ.ДокументОснование) Тогда
			МассивСНТСДокументомОснования.Добавить(ДокументСНТ);
		Иначе
			МассивСНТБезДокументаОснования.Добавить(ДокументСНТ);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураСДокументомОснованияИБез.Вставить("МассивСНТСДокументомОснования", МассивСНТСДокументомОснования); 
	СтруктураСДокументомОснованияИБез.Вставить("МассивСНТБезДокументаОснования", МассивСНТБезДокументаОснования); 
	
	Возврат СтруктураСДокументомОснованияИБез;
		
КонецФункции

#КонецОбласти

Функция СостояниеСНТ(СНТ, ЕстьТоварыВССПустымиИдентификаторами = Ложь) Экспорт
	
	Если ЕстьТоварыВССПустымиИдентификаторами Тогда
		
		Если (СНТ.Направление = Перечисления.НаправленияСНТ.Входящий)
			ИЛИ (СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз)
			ИЛИ (СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров) 
			ИЛИ (СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий И СНТ.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
			Тогда
			
			Если СНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден Тогда
				Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС;
				Возврат Состояние;
			КонецЕсли;
		КонецЕсли;
	
		Если СНТ.Направление = Перечисления.НаправленияСНТ.Входящий И СНТСервер.ПроверитьСтатусНеТребуетПодтверждения(СНТ) 
			И (СНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.Доставленный) Тогда
			Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС;
			Возврат Состояние;
		КонецЕсли;
			
	КонецЕсли;
			
	Если ПустаяСтрока(СНТ.РегистрационныйНомерИСЭСФ)
		И ЗначениеЗаполнено(СНТ.Идентификатор)
		И СНТ.Ошибки.Количество() = 0
		И СНТ.Статус = Перечисления.СтатусыСНТ.Созданный Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ОбрабатываетсяСервером;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.ПустаяСсылка()
		ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.Черновик
		ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.Импортированный Тогда
		
		Состояние = Перечисления.СостоянияСНТ.Сформирован;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.Ошибочный
		ИЛИ СНТ.Ошибки.Количество() <> 0 Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ОтклоненСервером;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий
		И (СНТ.Статус = Перечисления.СтатусыСНТ.Созданный 
		ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен) Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ПринятСервером;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Исходящий
		И СНТ.Статус = Перечисления.СтатусыСНТ.Доставленный Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ДоставленПолучателю;
		
	ИначеЕсли СНТ.Направление = Перечисления.НаправленияСНТ.Входящий
		И (СНТ.Статус = Перечисления.СтатусыСНТ.Созданный 
		ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.Доставленный
		ИЛИ СНТ.Статус = Перечисления.СтатусыСНТ.НеПросмотрен) Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ПринятОтПоставщика;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.Отозван Тогда
		
		Состояние = Перечисления.СостоянияСНТ.Отозван;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.Аннулирован Тогда
		
		Состояние = Перечисления.СостоянияСНТ.Аннулирован;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.Отклонен Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ОтклоненПолучателем;		
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.Подтвержден Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ПодтвержденПолучателем;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.ПодтвержденИнспекторомОГД Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ПодтвержденОГД;
		
	ИначеЕсли СНТ.Статус = Перечисления.СтатусыСНТ.ОтклоненИнспекторомОГД Тогда
		
		Состояние = Перечисления.СостоянияСНТ.ОтклоненОГД;
	Иначе
		
		Состояние = Перечисления.СостоянияСНТ.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

#Область ПроведениеСНТ

Процедура СформироватьДвиженияТоваровНаВСВРезерве(ПериодДвижения, ТаблицаРеквизиты, ТаблицаТовары, Движения, ВидДвижения, Отказ, СпособВыписки = Неопределено) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособВыписки = Неопределено Тогда
		СпособВыписки = Перечисления.СпособВыпискиСНТ.ВЭлектронномВиде;
	КонецЕсли;
	
	Параметры = ВССервер.ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];

	РеквизитТипФормы = Параметры.Реквизиты.Колонки.Найти("ТипФормы");
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Движение = Движения.ТоварыВиртуальногоСкладаВРезерве.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.ВидДвижения 	          =  ВидДвижения;
		Движение.Организация 	          =  Реквизиты.Организация;
		Движение.Период      	          =  ПериодДвижения;
		Движение.СпособВыписки  		  =  СпособВыписки;
		Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделение;
	КонецЦикла;

	Движения.ТоварыВиртуальногоСкладаВРезерве.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияТоваровНаВС(ТаблицаРеквизиты, ТаблицаТовары, Движения, Отказ, ПериодДвижения = Неопределено, ВидДвижения = Неопределено) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ВССервер.ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ ЗначениеЗаполнено(ПериодДвижения) Тогда
		ПериодДвижения = Реквизиты.Период;
	КонецЕсли;

	РеквизитТипФормы = Параметры.Реквизиты.Колонки.Найти("ТипФормы");
		
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Если НЕ ЗначениеЗаполнено(ВидДвижения) Тогда
			ВидДвиженияСтроки = СтрокаТаблицы.ВидДвижения;
		Иначе
			ВидДвиженияСтроки = ВидДвижения;			
		КонецЕсли;
		
		Движение = Движения.ТоварыНаВиртуальныхСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Если РеквизитТипФормы <> Неопределено
			    И (Реквизиты.ТипФормы = Перечисления.ВидыОперацийСНТ.Перемещение
					Или Реквизиты.ТипФормы = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами)
				И ВидДвиженияСтроки = ВидДвиженияНакопления.Приход Тогда
			Движение.Организация =  Реквизиты.ОрганизацияПолучатель;
			Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделениеПолучатель;
		Иначе
			Движение.Организация =  Реквизиты.Организация;
			Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделение;
		КонецЕсли;	
		Движение.ВидДвижения =  ВидДвиженияСтроки;
		Движение.Период      =  ПериодДвижения;
	КонецЦикла;

	Движения.ТоварыНаВиртуальныхСкладах.Записывать = Истина;
	Движения.ТоварыНаВиртуальныхСкладах.Записать();
	
КонецПроцедуры

Процедура СформироватьДвиженияТоваровНаВССопоставление(ТаблицаРеквизиты, ТаблицаТовары, Движения, Отказ, ПериодДвижения = Неопределено, ВидДвижения = Неопределено) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьТаблицуТоварыНаВССопоставление(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ ЗначениеЗаполнено(ПериодДвижения) Тогда
		ПериодДвижения = Реквизиты.Период;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Если НЕ ЗначениеЗаполнено(ВидДвижения) Тогда
			ВидДвиженияСтроки = СтрокаТаблицы.ВидДвижения;
		Иначе
			ВидДвиженияСтроки = ВидДвижения;			
		КонецЕсли;
		
		Движение = Движения.ТоварыНаВиртуальныхСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.Организация =  Реквизиты.Организация;
		Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделение;
		
		Движение.ВидДвижения =  ВидДвиженияСтроки;
		Движение.Период      =  ПериодДвижения;
	КонецЦикла;

	Движения.ТоварыНаВиртуальныхСкладах.Записывать = Истина;
	Движения.ТоварыНаВиртуальныхСкладах.Записать();
	
КонецПроцедуры

Процедура СформироватьДвиженияСопоставленныхИсточниковПроисхождения(ТаблицаРеквизиты, ТаблицаИП, Движения, Отказ, ПериодДвижения = Неопределено, ВидДвижения = Неопределено) Экспорт
	
	Если ТаблицаИП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьТаблицуСопоставленыхИП(ТаблицаРеквизиты, ТаблицаИП, Отказ);
		
	Если Параметры.ТаблицаИП.Количество() = 0
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ ЗначениеЗаполнено(ПериодДвижения) Тогда
		ПериодДвижения = Реквизиты.Период;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаИП Цикл
				
		Движение = Движения.СопоставленныеИсточникиПроисхождения.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Движение.Период      =  ПериодДвижения;
	КонецЦикла;

	Движения.СопоставленныеИсточникиПроисхождения.Записывать = Истина;
		
КонецПроцедуры

Функция ПодготовитьТаблицуТоварыНаВССопоставление(ТаблицаРеквизиты, ТаблицаТовары, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение";        // <СправочникСсылка.ПодразделенияОрганизаций> - СП, в которую приходуется товар
	
	Параметры.Вставить("Реквизиты",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Количество,"
	+ "Цена,"
	+ "ИсточникПроисхождения,"
	+ "Номенклатура,"
	+ "ЕдиницаИзмерения,"
	+ "Склад,"
	+ "ДокументПартии,"
	+ "ИмяСписка,"
	+ "ВидДвижения";
	
		
	Параметры.Вставить("ТаблицаТовары",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
		
КонецФункции

Функция ПодготовитьТаблицуСопоставленыхИП(ТаблицаРеквизиты, ТаблицаИП, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период";                       	 // <Дата> - период движений - дата документа
	
	
	Параметры.Вставить("Реквизиты",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "ИсточникПроисхожденияДоСопоставления,"
	+ "ИсточникПроисхожденияПослеСопоставления";
	
		
	Параметры.Вставить("ТаблицаИП",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаИП, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
		
КонецФункции

Процедура ВыполнитьКонтрольТоварыОрганизацийНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ) Экспорт
	
	Параметры = ВССервер.ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
	Если Параметры.ТаблицаТовары.Количество() = 0 
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	КонтролироватьОстатокПоСкладу = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "КонтролироватьОстатки");
	Если НЕ ЗначениеЗаполнено(КонтролироватьОстатокПоСкладу) Тогда
		КонтролироватьОстатокПоСкладу = Ложь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", 					ТаблицаТовары);
	Запрос.УстановитьПараметр("ДатаОстатка"	 , 					Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация"	 , 					Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 		Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад"		 , 					Реквизиты.Склад);
	
	Запрос.УстановитьПараметр("ПустойИсточник", Справочники.ИсточникиПроисхождения.ПустаяСсылка());
	
	УчитыватьТоварыИсправленнойСНТ = Ложь;
	СвязанныйСНТ = ПредопределенноеЗначение("Документ.СНТ.ПустаяСсылка");
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.СНТ") Тогда
		
		ТипСНТ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "ТипСНТ");
		
		Если ТипСНТ = Перечисления.ТипыСНТ.Исправленная Тогда
			СвязанныйСНТ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "СвязанныйСНТ");
			УчитыватьТоварыИсправленнойСНТ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьТоварыИсправленнойСНТ", УчитыватьТоварыИсправленнойСНТ);
	Запрос.УстановитьПараметр("СвязанныйСНТ", СвязанныйСНТ);
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения КАК ИсточникПроисхождения
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыОрганизацийОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И (Номенклатура, ЕдиницаИзмерения, ИсточникПроисхождения) В
	|					(ВЫБРАТЬ
	|						Вт_Товары.Номенклатура,
	|						Вт_Товары.ЕдиницаИзмерения,
	|						Вт_Товары.ИсточникПроисхождения
	|					ИЗ
	|						Вт_Товары)) КАК ТоварыОрганизацийОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоСНТ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоСНТ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыИсправляемогоСНТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыИсправляемогоСНТ.Количество КАК КоличествоОстаток
	|ИЗ
	|	Документ.СНТ.ТоварыВС КАК ТоварыИсправляемогоСНТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СНТ КАК СНТ
	|		ПО ТоварыИсправляемогоСНТ.Ссылка = СНТ.Ссылка
	|ГДЕ
	|	ТоварыИсправляемогоСНТ.Ссылка = &СвязанныйСНТ
	|	И СНТ.Ссылка = &СвязанныйСНТ
	|	И ТоварыИсправляемогоСНТ.ИсточникПроисхождения <> &ПустойИсточник
	|	И СНТ.СкладОтправитель = &Склад
	|	И &УчитыватьТоварыИсправленнойСНТ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВиртуальногоСкладаВРезерве.Номенклатура,
	|	ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения,
	|	ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения,
	|	-ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И (Номенклатура, ЕдиницаИзмерения, ИсточникПроисхождения) В
	|					(ВЫБРАТЬ
	|						Вт_Товары.Номенклатура,
	|						Вт_Товары.ЕдиницаИзмерения,
	|						Вт_Товары.ИсточникПроисхождения
	|					ИЗ
	|						Вт_Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ИсточникПроисхождения,
	|	Остатки.ЕдиницаИзмерения,
	|	СУММА(Остатки.КоличествоОстаток)
	|
	|ИЗ
	|	ВТ_Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ИсточникПроисхождения,
	|	Остатки.ЕдиницаИзмерения
	|";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из ТаблицаТовары Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"			, СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения"		, СтрокаДокумента.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("ИсточникПроисхождения", СтрокаДокумента.ИсточникПроисхождения);
		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;	
		
		Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстатка.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = СтрокиОстатка[0];
			КоличествоДок = МИН(КоличествоОсталосьПогасить,СтрокаОстатка.КоличествоОстаток);			
			
			Если СтрокаОстатка.КоличествоОстаток <= КоличествоДок Тогда
				СтрокаОстатка.КоличествоОстаток = 0;
			Иначе
				СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - КоличествоДок;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоДок;
				
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			ТекстОшибки = НСтр("ru='Товары на виртуальных складах. Строка: %1. По организации <%2>,структурному подразделению <%3>, складу <%4> не списано %5 %6 товара <%7>, источник происхождения - %8' ");
			ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки,Реквизиты.Организация,Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад, КоличествоОсталосьПогасить, СтрокаДокумента.ЕдиницаИзмерения,
						СтрокаДокумента.Номенклатура, СтрокаДокумента.ИсточникПроисхождения);
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
			
			Если КонтролироватьОстатокПоСкладу Тогда
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
			Иначе
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект");
			КонецЕсли; 			
		КонецЕсли; 				
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

Функция МассивСНТНеПоИмпорту(МассивСНТДляСозданияПервичныхДокументов) Экспорт
	
	МассивСНТНеПоИмпорту = Новый Массив();
	Для Каждого СНТ Из МассивСНТДляСозданияПервичныхДокументов Цикл
		Если СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И
			СНТ.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") И
			СНТ.ВидВвоза <> ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт") Тогда
			
			МассивСНТНеПоИмпорту.Добавить(СНТ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСНТНеПоИмпорту;
КонецФункции

Функция МассивСНТНаВозврат(МассивСНТДляСозданияПервичныхДокументов) Экспорт
	
	МассивСНТНаВозврат = Новый Массив();
	Для Каждого СНТ Из МассивСНТДляСозданияПервичныхДокументов Цикл
		Если СНТ.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") И
			СНТ.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
			
			МассивСНТНаВозврат.Добавить(СНТ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСНТНаВозврат;
КонецФункции

#Область ОтправкаСопоставленийСНТиФНО

Процедура СоздатьИсходящиеfnoMatching(Знач МассивСопоставленийСНТиФНО, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияfnoMatchingXML, КоллекцияSignedContentXML, ВерсияВС) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().СоздатьИсходящиеfnoMatching(МассивСопоставленийСНТиФНО, УстанавливатьПодпись, ТипПодписи, КоллекцияfnoMatchingXML, КоллекцияSignedContentXML, Неопределено, ВерсияВС);
	
КонецПроцедуры

Функция ОтправитьИсходящиеfnoMatching(ВерсияВС, Знач КоллекцияДанныеКоллекцииfnoMatchingXML, Знач КоллекцияПодписей, Знач ДанныеПрофилейИСЭСФ) Экспорт
		
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().ОтправитьfnoMatching(ВерсияВС, КоллекцияДанныеКоллекцииfnoMatchingXML, КоллекцияПодписей, ДанныеПрофилейИСЭСФ);
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Перезаполнение СНТ по данным документа-основания

Функция НайтиАктуальныеОснованияПоСНТ(Знач МассивСНТ) Экспорт
	
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().НайтиАктуальныеОснованияПоСНТ(МассивСНТ);
	
КонецФункции

#Область СоответствиеТоваровИЕдиницИзмерений

Функция ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Знач МассивСНТ, Знач СоздатьНовыеПриОтсутствии = Ложь) Экспорт
	
	Возврат СНТСерверПовтИсп.ОбработкаОбменСНТ().ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивСНТ, СоздатьНовыеПриОтсутствии);
	
КонецФункции

Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(Знач КлючиАналитикиУчетаСоответствий, Знач НаправлениеСНТ, Знач МассивСНТ) Экспорт
	
	СНТСерверПовтИсп.ОбработкаОбменСНТ().СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, НаправлениеСНТ, МассивСНТ);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИД

Функция СоответствиеНомеровТаблицИНазванийСНТ() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить(1, "ТоварыВС");
	Соответствие.Вставить(2, "ЭтиловыйСпирт");
	Соответствие.Вставить(3, "Виноматериал");
	Соответствие.Вставить(4, "ПивоПивныеНапитки");
	Соответствие.Вставить(5, "АлкогольнаяПродукцияКромеПива");
	Соответствие.Вставить(6, "ДанныеПоНефтепродуктам");
	Соответствие.Вставить(7, "ДанныеПоБиотопливу");
	Соответствие.Вставить(8, "ТабачнаяПродукция");
	Соответствие.Вставить(9, "ДругиеТоварыЦифроваяМаркировка");
	Соответствие.Вставить(10, "ТоварыЭкспортныйКонтроль");
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗавершениеОбновления = Ложь;
	СНТСерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления);
	Если ЗавершениеОбновления Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.15";
	Обработчик.Процедура           = "Документы.СНТ.ЗаполнитьНомерСтрокиСНТ";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.1.17";
	Обработчик.Процедура           = "Документы.СНТ.ЗаполнитьСПСНТ";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.2.1";
	Обработчик.Процедура           = "Документы.СНТ.ЗаполнитьСтатусСопоставленияДляСНТ";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.0.2.2";
	Обработчик.Процедура           = "Документы.СопоставлениеСНТиФНО.ЗаполнитьНаименованиеТовараПоФНО";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";

КонецПроцедуры

#КонецОбласти
