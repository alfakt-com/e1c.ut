

#Область Общее

Функция ПолучитьЗначниеИзМассиваСоответствий(МассивСоответствий, КолонкаПоиска, ЗначениеКолонкиПоиска, КолонкаЗначения) Экспорт
	
	Результат = "";
	
	Для Каждого ТекЭлемент из МассивСоответствий Цикл
		
		Если ТекЭлемент = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если Формат(ТекЭлемент.Получить(КолонкаПоиска), "ЧГ=0") = ЗначениеКолонкиПоиска тогда
			Результат = ТекЭлемент.Получить(КолонкаЗначения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьАдресСайта(Знач АдресСайта, НастройкиПодключения)Экспорт 
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	Сервер		 		 = ""; 
	Порт				 = 0;
	АдресСкрипта 		 = "";
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			
			АдресСайта = Сред(АдресСайта, 8);
			
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
			
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			
			Сервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
			
		Иначе
			
			Сервер 		 = АдресСайта;
			АдресСкрипта = "";
			
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		
		Если ПозицияДвоеточия > 0 Тогда
			
			СерверСПортом = Сервер;
			Сервер		  = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока 	  = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
			
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			#ЕСЛИ НЕ СЕРВЕР ТОГДА 	
				ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось получить номер порта ('") + ПортСтрока + ")!"
				+ Символы.ПС + НСтр("ru = 'Проверьте правильность ввода адреса сайта.'"));
			#ИНАЧЕ
				Сообщить(НСтр("ru = 'Не удалось получить номер порта ('") + ПортСтрока + ")!"
				+ Символы.ПС + НСтр("ru = 'Проверьте правильность ввода адреса сайта.'"));
			#КОНЕЦЕСЛИ
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			
			Порт = ?(ЗащищенноеСоединение, 443, 80);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер"	  				, Сервер); 
	НастройкиПодключения.Вставить("Порт"		   			, Порт);
	НастройкиПодключения.Вставить("АдресСкрипта"			, АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение"	, ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

Функция ИнформацияОПриложении()
	
	Результат = Новый Структура;
	
	//Результат.Вставить("КодПриложения"			, "app.574416a3e4c0b3.20492342");
	//Результат.Вставить("СекретныйКодПриложения"	, "bmF6rILJ3890FwgTcZGQrQuNJvXcmvMAk2dLD6Yr4mFIcIil8I");
	//Результат.Вставить("АдресСайта"				, "http://oauth.sigurd.bx");
	//Результат.Вставить("ОбластьВидимости"			, "user,department,log,sonet_group");
	
	Результат.Вставить("КодПриложения"			, "app.552d288cc83c88.78059741");
	Результат.Вставить("СекретныйКодПриложения"	, "a49b3d28c435cec6ea7d8ba53cd9c9be");
	Результат.Вставить("АдресСайта"				, "https://oauth.bitrix.info");
	Результат.Вставить("ОбластьВидимости"		, "user,department,log,sonet_group");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(ОбщиеНастройки) Экспорт
	
	НастройкиПодключения = Новый Структура;
	лАдрес = ОбщиеНастройки.НастройкиПодключения.АдресСайта;
	
	ИнформацияОПриложении = ИнформацияОПриложении();
	
	НастройкиПодключения.Вставить("КодПриложения"			, ИнформацияОПриложении.КодПриложения);
	НастройкиПодключения.Вставить("СекретныйКодПриложения"	, ИнформацияОПриложении.СекретныйКодПриложения);
	НастройкиПодключения.Вставить("ОбластьВидимости"		, ИнформацияОПриложении.ОбластьВидимости);
	НастройкиПодключения.Вставить("АдресСайта"				, лАдрес);
	
	Если НЕ РазобратьАдресСайта(лАдрес, НастройкиПодключения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат НастройкиПодключения;
	
КонецФункции

Функция ДобавлениеНастроекПодключения(ОбщиеНастройки) Экспорт
	
	Если НЕ ПолучитьНастройкиАвторизации(ОбщиеНастройки) Тогда
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.КритическаяОшибка"), "Ошибка при получении параметров подключения к сайту авторизации. Выгрузка отчетов невозможна.");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНастройкиАвторизации(ОсновныеНастройки)
	
	НастройкиПодключения = Новый Структура;
	
	ИнформацияОПриложении = ИнформацияОПриложении();
	
	НастройкиПодключения.Вставить("КодПриложения"			, ИнформацияОПриложении.КодПриложения);
	НастройкиПодключения.Вставить("СекретныйКодПриложения"	, ИнформацияОПриложении.СекретныйКодПриложения);
	НастройкиПодключения.Вставить("ОбластьВидимости"		, ИнформацияОПриложении.ОбластьВидимости);
	НастройкиПодключения.Вставить("АдресСайта"				, ИнформацияОПриложении.АдресСайта);
	
	НастройкиПодключения.Вставить("Токен"					, "");
	НастройкиПодключения.Вставить("ВременныйТокен"			, "");
	НастройкиПодключения.Вставить("НовыйТокен"				, "");
	
	Если НЕ РазобратьАдресСайта(ИнформацияОПриложении.АдресСайта, НастройкиПодключения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОсновныеНастройки.Вставить("НастройкиПодключенияАвторизации", НастройкиПодключения);
	
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("АдресСайта", "");
	ОсновныеНастройки.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область СобытияБитрикс24

Функция ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации) Экспорт
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбщиеНастройки.Измерение2 = "Добавление/удаление подписок на события";
	
	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.Информация"), "Начало добавления подписок на события");
	
	СформированныеДанные = новый Массив;
	
	Портал = Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "Портал");
	
	мСобытияКомпанийИКонтактов = ПолучитьМассивСобытийКомпанийИКонтактов();	
	ДобавлениеСобытийКомпанийИКонтактов = Б24_RestApiВызовСервера.ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, "Контрагенты");
	
	Для Каждого ТекЭлемент из мСобытияКомпанийИКонтактов Цикл
		СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(?(ДобавлениеСобытийКомпанийИКонтактов, "event.bind", "event.unbind")+ "?event=" + ТекЭлемент + "&event_type=offline&" + ОбщиеНастройки.ПараметрКоннектора));
	КонецЦикла;
	
	мСобытияТоваров = ПолучитьМассивСобытийТоваров();	
	ДобавлениеСобытийТоваров = Б24_RestApiВызовСервера.ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, "Товары");
	
	Для Каждого ТекЭлемент из мСобытияТоваров Цикл
		СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(?(ДобавлениеСобытийТоваров, "event.bind", "event.unbind")+ "?event=" + ТекЭлемент + "&event_type=offline&" + ОбщиеНастройки.ПараметрКоннектора));
	КонецЦикла;
	
	мСобытияСчетов = ПолучитьМассивСобытийСчетов();	
	ДобавлениеСобытийСчетов = Б24_RestApiВызовСервера.ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, "Счета");
	
	Для Каждого ТекЭлемент из мСобытияСчетов Цикл
		СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(?(ДобавлениеСобытийСчетов, "event.bind", "event.unbind")+ "?event=" + ТекЭлемент + "&event_type=offline&" + ОбщиеНастройки.ПараметрКоннектора));
	КонецЦикла;
	
	мСобытияСделок = ПолучитьМассивСобытийСделок();	
	ДобавлениеСобытийСделок = Б24_RestApiВызовСервера.ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, "Сделки");
	
	Для Каждого ТекЭлемент из мСобытияСделок Цикл
		СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(?(ДобавлениеСобытийСделок, "event.bind", "event.unbind")+ "?event=" + ТекЭлемент + "&event_type=offline&" + ОбщиеНастройки.ПараметрКоннектора));
	КонецЦикла;
	
	мСобытияЗаказов = ПолучитьМассивСобытийЗаказов();	
	ДобавлениеСобытийЗаказов = Б24_RestApiВызовСервера.ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, "Заказы");
	
	Для Каждого ТекЭлемент из мСобытияЗаказов Цикл
		СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(?(ДобавлениеСобытийЗаказов, "event.bind", "event.unbind")+ "?event=" + ТекЭлемент + "&event_type=offline&" + ОбщиеНастройки.ПараметрКоннектора));
	КонецЦикла;
	
	
	Если СформированныеДанные.Количество() = 0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	КоличествоВЗапросе = 0;	
	ТелоHTTPЗапроса= "";
	Для каждого ТекЭлемент из СформированныеДанные Цикл
		
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
		
		КоличествоВЗапросе = КоличествоВЗапросе + 1;
		
		Если КоличествоВЗапросе = 50 тогда
			Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
			КоличествоВЗапросе = 0;	
			ТелоHTTPЗапроса= "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоВЗапросе > 0 тогда
		Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

Функция ПолучитьВидыСобытийЭлементовБ24() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДобавлениеКомпании"	 		, "onCrmCompanyAdd");	
	Результат.Вставить("ОбновлениеКомпании"	 		, "onCrmCompanyUpdate");
	Результат.Вставить("УдалениеКомпании"	 		, "onCrmCompanyDelete");
	
	
	Результат.Вставить("ДобавлениеКонтакта" 		, "onCrmContactAdd");	
	Результат.Вставить("ОбновлениеКонтакта" 		, "onCrmContactUpdate");
	Результат.Вставить("УдалениеКонтакта"	 		, "onCrmContactDelete");
	
	Результат.Вставить("ДобавлениеРеквизита"		, "onCrmRequisiteAdd");	
	Результат.Вставить("ОбновлениеРеквизита"		, "onCrmRequisiteUpdate");	
	Результат.Вставить("УдалениеРеквизита"			, "onCrmRequisiteDelete");	
	
	Результат.Вставить("ДобавлениеБанкСчета" 		, "onCrmBankDetailAdd");	
	Результат.Вставить("ОбновлениеБанкСчета" 		, "onCrmBankDetailUpdate");
	Результат.Вставить("УдалениеБанкСчета" 			, "onCrmBankDetailDelete");
	
	Результат.Вставить("ДобавлениеАдреса"	 		, "onCrmAddressRegister");	
	Результат.Вставить("УдалениеАдреса"	 			, "onCrmAddressDelete");	
	
	Результат.Вставить("ДобавлениеТовара"	 		, "onCrmProductAdd");	
	Результат.Вставить("ОбновлениеТовара"	 		, "onCrmProductUpdate");
	Результат.Вставить("УдалениеТовара"	 			, "onCrmProductDelete");
	
	Результат.Вставить("ДобавлениеЕдИзм"	 		, "onCrmMeasureAdd");	
	Результат.Вставить("ОбновлениеЕдИзм"	 		, "onCrmMeasureUpdate");	
	Результат.Вставить("УдалениеЕдИзм"	 			, "onCrmMeasureDelete");	
	
	Результат.Вставить("ДобавлениеСвойстваТовара" 	, "onCrmProductPropertyAdd");	
	Результат.Вставить("ОбновлениеСвойстваТовара" 	, "onCrmProductPropertyUpdate");	
	Результат.Вставить("УдалениеСвойстваТовара" 	, "onCrmProductPropertyDelete");	
	
	Результат.Вставить("ДобавлениеРаздела"	 		, "onCrmProductSectionAdd");	
	Результат.Вставить("ОбновлениеРаздела"	 		, "onCrmProductSectionUpdate");	
	Результат.Вставить("УдалениеРаздела"	 		, "onCrmProductSectionDelete");	
	
	Результат.Вставить("ДобавлениеСчета"	 		, "onCrmInvoiceAdd");	
	Результат.Вставить("ОбновлениеСчета"	 		, "onCrmInvoiceUpdate");	
	Результат.Вставить("ОбновлениеСтатусаСчета"	 	, "onCrmInvoiceSetStatus");	
	Результат.Вставить("УдалениеСчета"	 			, "onCrmInvoiceDelete");	
	
	Результат.Вставить("ДобавлениеСделки"	 		, "onCrmDealAdd");	
	Результат.Вставить("ОбновлениеСделки"	 		, "onCrmDealUpdate");	
	//	Результат.Вставить("ОбновлениеСтатусаСделки", "onCrmDealSetStatus");	
	Результат.Вставить("УдалениеСделки"	 			, "onCrmDealDelete");	
	
	
	Результат.Вставить("ДобавлениеСвойстваКомпаний" 	, "ONCRMCOMPANYUSERFIELDADD");	
	Результат.Вставить("ОбновлениеСвойстваКомпаний" 	, "ONCRMCOMPANYUSERFIELDUPDATE");	
	Результат.Вставить("УдалениеСвойстваКомпаний" 		, "ONCRMCOMPANYUSERFIELDDELETE");	
	Результат.Вставить("ОбновлениеЗначенийСвойствКомпаний", "ONCRMCOMPANYUSERFIELDSETENUMVALUES");	
	
	Результат.Вставить("ДобавлениеСвойстваКонтактов" 	, "ONCRMCONTACTUSERFIELDADD");	
	Результат.Вставить("ОбновлениеСвойстваКонтактов" 	, "ONCRMCONTACTUSERFIELDUPDATE");	
	Результат.Вставить("УдалениеСвойстваКонтактов" 		, "ONCRMCONTACTUSERFIELDDELETE");	
	Результат.Вставить("ОбновлениеЗначенийСвойствКонтактов", "ONCRMCONTACTUSERFIELDSETENUMVALUES");	
	
	
	Результат.Вставить("ДобавлениеСвойстваСделок" 		, "ONCRMDEALUSERFIELDADD");	
	Результат.Вставить("ОбновлениеСвойстваСделок" 		, "ONCRMDEALUSERFIELDUPDATE");	
	Результат.Вставить("УдалениеСвойстваСделок" 		, "ONCRMDEALUSERFIELDDELETE");	
	Результат.Вставить("ОбновлениеЗначенийСвойствСделок", "ONCRMDEALUSERFIELDSETENUMVALUES");	
	
	Результат.Вставить("ДобавлениеСвойстваСчетов" 		, "ONCRMINVOICEUSERFIELDADD");	
	Результат.Вставить("ОбновлениеСвойстваСчетов" 		, "ONCRMINVOICEUSERFIELDUPDATE");	
	Результат.Вставить("УдалениеСвойстваСчетов" 		, "ONCRMINVOICEUSERFIELDDELETE");	
	Результат.Вставить("ОбновлениеЗначенийСвойствСчетов", "ONCRMINVOICEUSERFIELDSETENUMVALUES");	
	
	
	Результат.Вставить("ДобавлениеЗаказа" 			, "onSaleOrderSaved");	
	Результат.Вставить("УдалениеЗаказа" 			, "onSaleBeforeOrderDelete");	
	                                            	                                    
	Результат.Вставить("ДобавлениеОплаты" 			, "onPaymentEntitySaved");	
	Результат.Вставить("УдалениеОплаты"				, "onPaymentDeleted");
	
	Результат.Вставить("ДобавлениеОтгрузки" 		, "onShipmentEntitySaved");	
	Результат.Вставить("УдалениеОтгрузки"			, "onShipmentDeleted");	
	                                            	
	Результат.Вставить("ДобавлениеСвойстваЗаказов" 	, "OnOrderPropsAdd");	
	Результат.Вставить("ОбновлениеСвойстваЗаказов" 	, "OnOrderPropsUpdate");	
	Результат.Вставить("УдалениеСвойстваЗаказов" 	, "OnOrderPropsDelete");	
	
	Результат.Вставить("ДобавлениеЗначенийСвойствЗаказов"	, "onPropertyValueEntitySaved");	
	Результат.Вставить("УдалениеЗначенийСвойствЗаказов" 	, "onPropertyValueDeleted");	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСобытийКомпанийИКонтактов() 
	
	События = ПолучитьВидыСобытийЭлементовБ24();
	
	Результат = Новый Массив;
	
	Результат.Добавить(События.ДобавлениеКомпании);
	Результат.Добавить(События.ОбновлениеКомпании);
	Результат.Добавить(События.УдалениеКомпании);
	
	Результат.Добавить(События.ДобавлениеКонтакта);
	Результат.Добавить(События.ОбновлениеКонтакта);
	Результат.Добавить(События.УдалениеКонтакта);
	
	Результат.Добавить(События.ДобавлениеРеквизита);
	Результат.Добавить(События.ОбновлениеРеквизита);
	Результат.Добавить(События.УдалениеРеквизита);
	
	Результат.Добавить(События.ДобавлениеБанкСчета);
	Результат.Добавить(События.ОбновлениеБанкСчета);
	Результат.Добавить(События.УдалениеБанкСчета);
	
	Результат.Добавить(События.ДобавлениеАдреса);
	Результат.Добавить(События.УдалениеАдреса);
	
	Результат.Добавить(События.ДобавлениеСвойстваКомпаний);
	Результат.Добавить(События.ОбновлениеСвойстваКомпаний);
	Результат.Добавить(События.УдалениеСвойстваКомпаний);
	Результат.Добавить(События.ОбновлениеЗначенийСвойствКомпаний);
	
	Результат.Добавить(События.ДобавлениеСвойстваКонтактов);
	Результат.Добавить(События.ОбновлениеСвойстваКонтактов);
	Результат.Добавить(События.УдалениеСвойстваКонтактов);
	Результат.Добавить(События.ОбновлениеЗначенийСвойствКонтактов);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСобытийТоваров() 
	
	События = ПолучитьВидыСобытийЭлементовБ24();
	
	Результат = Новый Массив;
	
	Результат.Добавить(События.ДобавлениеТовара);
	Результат.Добавить(События.ОбновлениеТовара);
	Результат.Добавить(События.УдалениеТовара);
	
	Результат.Добавить(События.ДобавлениеЕдИзм);
	Результат.Добавить(События.ОбновлениеЕдИзм);
	Результат.Добавить(События.УдалениеЕдИзм);
	
	Результат.Добавить(События.ДобавлениеСвойстваТовара);
	Результат.Добавить(События.ОбновлениеСвойстваТовара);
	Результат.Добавить(События.УдалениеСвойстваТовара);
	
	Результат.Добавить(События.ДобавлениеРаздела);
	Результат.Добавить(События.ОбновлениеРаздела);
	Результат.Добавить(События.УдалениеРаздела);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСобытийСчетов() 
	
	События = ПолучитьВидыСобытийЭлементовБ24();
	
	Результат = Новый Массив;
	
	Результат.Добавить(События.ДобавлениеСчета);
	Результат.Добавить(События.ОбновлениеСчета);
	Результат.Добавить(События.ОбновлениеСтатусаСчета);
	Результат.Добавить(События.УдалениеСчета);
	
	Результат.Добавить(События.ДобавлениеСвойстваСчетов);
	Результат.Добавить(События.ОбновлениеСвойстваСчетов);
	Результат.Добавить(События.УдалениеСвойстваСчетов);
	Результат.Добавить(События.ОбновлениеЗначенийСвойствСчетов);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСобытийСделок() 
	
	События = ПолучитьВидыСобытийЭлементовБ24();
	
	Результат = Новый Массив;
	
	Результат.Добавить(События.ДобавлениеСделки);
	Результат.Добавить(События.ОбновлениеСделки);
	Результат.Добавить(События.УдалениеСделки);
	
	Результат.Добавить(События.ДобавлениеСвойстваСделок);
	Результат.Добавить(События.ОбновлениеСвойстваСделок);
	Результат.Добавить(События.УдалениеСвойстваСделок);
	Результат.Добавить(События.ОбновлениеЗначенийСвойствСделок);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСобытийЗаказов() 
	
	События = ПолучитьВидыСобытийЭлементовБ24();
	
	Результат = Новый Массив;
	
	Результат.Добавить(События.ДобавлениеЗаказа);
	Результат.Добавить(События.УдалениеЗаказа);
	
	Результат.Добавить(События.ДобавлениеСвойстваЗаказов);
	Результат.Добавить(События.ОбновлениеСвойстваЗаказов);
	Результат.Добавить(События.УдалениеСвойстваЗаказов);
	
	Результат.Добавить(События.ДобавлениеЗначенийСвойствЗаказов);
	Результат.Добавить(События.УдалениеЗначенийСвойствЗаказов);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 
