
#Область ПрограммныйИнтерфейс

// Возвращает номер версии библиотеки ЭАВР.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.0.10";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Преобразование значений для обмена с ИС ЭСФ

Функция ТипРегистрацииНПАВРИСЭСФ(ТипРегистрации) Экспорт
	
	Если ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Адвокат") Тогда				
		ТипРегистрацииНПАВРИСЭСФ = "LAWYER";	
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель") Тогда		
		ТипРегистрацииНПАВРИСЭСФ = "ENTREPRENEUR"; 		
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Медиатор") Тогда		
		ТипРегистрацииНПАВРИСЭСФ = "MEDIATOR";		
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Нотариус") Тогда				
		ТипРегистрацииНПАВРИСЭСФ = "NOTARY";		
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо") Тогда			
		ТипРегистрацииНПАВРИСЭСФ = "ENTERPRISE";													
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ЧастныйСудебныйИсполнитель") Тогда				
		ТипРегистрацииНПАВРИСЭСФ = "BAILIFF";		
	ИначеЕсли ТипРегистрации = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ФизическоеЛицо") Тогда				
		ТипРегистрацииНПАВРИСЭСФ = "INDIVIDUAL";			
	КонецЕсли;
	
	Возврат ТипРегистрацииНПАВРИСЭСФ;	
	
КонецФункции

Функция ТипРегистрацииНПАВРИБ(Знач ТипРегистрацииНПАВРИСЭСФ) Экспорт
	
	ТипРегистрацииНПАВРИБ = Неопределено;
	
	Если ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "LAWYER" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Адвокат");		
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "MEDIATOR" Тогда		
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Медиатор"); 
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "NOTARY" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.Нотариус") ;
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "ENTREPRENEUR" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель") ;
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "INDIVIDUAL" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ФизическоеЛицо");
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "BAILIFF" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ЧастныйСудебныйИсполнитель");
	ИначеЕсли ВРЕГ(ТипРегистрацииНПАВРИСЭСФ) = "ENTERPRISE" Тогда
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо");		
	Иначе 
		ТипРегистрацииНПАВРИБ = ПредопределенноеЗначение("Перечисление.ТипыРегистрацииНПАВР.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ТипРегистрацииНПАВРИБ;
	
КонецФункции

#КонецОбласти 

#Область РаботаСКонтейнером

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;	
	ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		// Если база клиент-серверная, то это точно только клиент.
		// Если база файловая, то это может быть как клиент, так и сервер.		
		
		// Если выполняется препроцессоре ТолстыйКлиентОбычноеПриложение, 
		// то код ВнешниеОбработки.Подключить() вызовет ошибку,
		// поэтому внешняя обработка для данного режима подлкючается через файл.
		
		//Если ИспользоватьВнешнююОбработку Тогда
		//	ВнешняяОбработка = ЭСФСерверПереопределяемый.СоздатьВнешнююОбработкуИзФайла();
		//	Контейнер = ВнешняяОбработка.ПолучитьФорму("КлиентОбычная");
		//Иначе
		//	Контейнер = Обработки.ОбменЭСФ.ПолучитьФорму("КлиентОбычная");
		//КонецЕсли;
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.КлиентУправляемаяАВР"); 	
		Иначе
			Контейнер = ПолучитьФорму("Обработка.ОбменЭСФ.Форма.КлиентУправляемаяАВР");
		КонецЕсли;
		
	#Иначе // Сервер ИЛИ ВнешнееСоединение
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
				
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
		Иначе
			Контейнер = Обработки.ОбменЭСФ.Создать();
		КонецЕсли;	

	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

#КонецОбласти 

#Область ЗаполнениеРеквизитов

Функция КраткоеПредставлениеАВР(Знач СсылкаАВР) Экспорт
	
	СтрокаАВР = Строка(СсылкаАВР);
	СтрокаАВР = СтрЗаменить(СтрокаАВР, НСтр("ru = 'Электронный акт выполненных работ'"), НСтр("ru = 'АВР'"));	
	СтрокаАВР = СтрЗаменить(СтрокаАВР, НСтр("ru = ' 0:00:00'"), "");
	
	Возврат СтрокаАВР;
	
КонецФункции

Функция СтатусАВР(Знач СтатусИСЭСФ) Экспорт
	
	ВРегСтатусИСЭСФ = ВРег(СтатусИСЭСФ);
	
	Если ВРегСтатусИСЭСФ = "NOT_VIEWED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Непросмотренный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DELIVERED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Доставленный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CREATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Созданный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "CONFIRMED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Подтвержденный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DECLINED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Отклоненный");		
		
	ИначеЕсли ВРегСтатусИСЭСФ = "REVOKED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Отозванный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IMPORTED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Импортированный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "DRAFT" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Черновик");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "FAILED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Ошибочный");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "IN_TERMINATING" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.НаСтадииРасторжения");
		
	ИначеЕсли ВРегСтатусИСЭСФ = "TERMINATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.Расторженный");
		
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыАВР.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ПустыеПараметрыФормыИзменениеСтатусовАВР() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивАВР", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НаименованиеДоговора(Знач ОбъектАВР) Экспорт
	
	НаименованиеДоговора = "";
	
	ВалютаРегламентированногоУчета = ЭСФВызовСервера.ВалютаРегламентированногоУчета();
	
	Если ЗначениеЗаполнено(ОбъектАВР.НомерДоговора) И ЗначениеЗаполнено(ОбъектАВР.ДатаДоговора) Тогда
		
		Если ОбъектАВР.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата]'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор №[Номер] от [Дата] в [Валюта]'");
		КонецЕсли;		
		
	Иначе
		
		Если ОбъектАВР.Валюта = ВалютаРегламентированногоУчета Тогда
			НаименованиеДоговора = НСтр("ru = 'Без договора'");
		Иначе
			НаименованиеДоговора = НСтр("ru = 'Договор в [Валюта]'");
		КонецЕсли;		
		
	КонецЕсли;
		
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Номер]", ОбъектАВР.НомерДоговора);	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Дата]", Формат(ОбъектАВР.ДатаДоговора, "ДФ=dd.MM.yyyy"));	
	НаименованиеДоговора = СтрЗаменить(НаименованиеДоговора, "[Валюта]", ОбъектАВР.Валюта);	
	
	Возврат НаименованиеДоговора;
	
КонецФункции

#КонецОбласти  

#Область НаименованияДействийИСобытий

Функция ИмяСобытияЗаписьАВР() Экспорт 
	Возврат "Запись_АВР";	
КонецФункции

Функция ИмяСобытияСинхронизацияАВР() Экспорт 
	Возврат "Синхронизация_АВР";	
КонецФункции

Функция ДействиеОтправка() Экспорт
	Возврат "Отправка";
КонецФункции

Функция ДействиеОтзыв() Экспорт
	Возврат "Отзыв";	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	Возврат "Отклонение";	
КонецФункции

Функция ДействиеПодтверждение() Экспорт
	Возврат "Подтверждение";
КонецФункции

Функция ДействиеРасторжение() Экспорт
	Возврат "Расторжение";	
КонецФункции

Функция ДействиеПодтверждениеРасторжения() Экспорт
	Возврат "Подтверждение расторжения";	
КонецФункции

Функция ДействиеОтклонениеРасторжения() Экспорт
	Возврат "Отклонение расторжения";	
КонецФункции

#КонецОбласти 

#Область ТекстыСообщений
	          
Функция ТекстКомментарияСозданПоДаннымАВР(СсылкаАВР) Экспорт
	
	КраткоеПредставлениеАВР = АВРКлиентСервер.КраткоеПредставлениеАВР(СсылкаАВР);
	
	ТекстКомментария = НСтр("ru = 'Создан по данным документа ""[АВР]"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[АВР]", КраткоеПредставлениеАВР);

	Возврат ТекстКомментария;
	
КонецФункции

Функция ТекстСообщенияНеУстановленаИспользоватьАВР() Экспорт 
	
	Возврат НСтр("ru = 'Не установлена константа ""Использовать электронные АВР"".'");
	
КонецФункции

#КонецОбласти 

#Область РаботаСЭлементамиФормы

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ЦветСостоянияАВР(Знач СостояниеАВР) Экспорт
	
	Если СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.Сформирован")
	 ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ПринятСервером")
	      ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ДоставленПолучателю")
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ПринятОтПоставщика") 
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ПодтвержденПолучателем") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветЗеленый();
		
	ИначеЕсли СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ОтклоненСервером")
	      ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.Отозван")
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.Аннулирован")
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.ОтклоненПолучателем") 
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.НаходитсяНаСтадииРасторжения") 
		  ИЛИ СостояниеАВР = ПредопределенноеЗначение("Перечисление.СостоянияАВР.Расторжен") Тогда
		  
		Цвет = ЭСФКлиентСервер.ЦветКрасный();
		
	Иначе
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

#КонецОбласти 

#Область ПрямойОбменАВР

Функция ИспользоватьФоновуюОтправкуАВР() Экспорт
	
	Возврат ЭСФВызовСервераПовтИсп.ИспользоватьФоновуюОтправкуЭСФ();
	
КонецФункции

Функция ПроверитьВозможностьОбновления(МассивАВР) Экспорт
	
	Возврат АВРВызовСервера.ПроверитьВозможностьОбновления(МассивАВР);

КонецФункции

#КонецОбласти 

