
Процедура ОбработкаОповещенияВС_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = Параметр;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		АдресСообщенияПользователю = ЭСФВызовСервера.СообщенияФоновогоЗадания(РезультатРаботыЗадания.ИдентификаторЗадания);
		СообщенияПользователю = ПолучитьИзВременногоХранилища(АдресСообщенияПользователю);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ЭСФКлиент.ОповеститьФормы(ВСКлиентСервер.ИмяСобытияЗаписьЭДВС(), Параметр, ЭтаФорма);
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			ЭСФКлиент.ОповеститьФормы(ДополнительноеОповещение.Ключ, Параметр, ЭтаФорма);
		КонецЦикла;			
	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		//ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресХранилища);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыДлительнойОперации.ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершениияДлительнойОперацииВС", ВСКлиентПереопределяемый, ЭтаФорма);
		
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершениияДлительнойОперацииВС(Результат, Источник) Экспорт

	Оповестить(ВСКлиентСервер.ИмяСобытияЗаписьЭДВС(), Результат, Источник);
	Если Источник.ИмяФормы = "Обработка.ОбменЭСФ.Форма.СинхронизацияСВС" Тогда
		Оповестить(ВСКлиентСервер.ИмяСобытияСинхронизацияЭДВС(), Результат, Источник);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для обработки действий пользователя в процессе редактирования
// многострочного текста, например комментария в документах.

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать.
//  ФормаВладелец 			- УправляемаяФорма - форма, в поле которой выполняется ввод комментария.
//  ИмяРеквизита            - Строка - имя реквизита формы, в который будет помещен введенный пользователем
//                                     комментарий.
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//                                     По умолчанию: "Комментарий".
//
// Пример использования:
//
//	 ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
//
Процедура ПоказатьФормуРедактированияКомментария(Знач МногострочныйТекст, Знач ФормаВладелец, Знач ИмяРеквизита, 
	Знач Заголовок = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(МногострочныйТекст, ФормаВладелец, ИмяРеквизита);

	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста.
//
// Параметры:
//  ОповещениеОЗакрытии     - ОписаниеОповещения - содержит описание процедуры, которая будет вызвана 
//                            после закрытия формы ввода текста с теми же параметрами, что и для метода
//                            ПоказатьВводСтроки.
//  МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать;
//  Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы.
//
// Пример:
//
//   Оповещение = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект);
//   ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Оповещение, Элемент.ТекстРедактирования);
//
//   &НаКлиенте
//   Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
//      Если ВведенныйТекст = Неопределено Тогда
//		   Возврат;
//   	КонецЕсли;	
//	
//	   Объект.МногострочныйКомментарий = ВведенныйТекст;
//	   Модифицированность = Истина;
//   КонецПроцедуры
//
Процедура ПоказатьФормуРедактированияМногострочногоТекста(Знач ОповещениеОЗакрытии, 
	Знач МногострочныйТекст, Знач Заголовок = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст,,, Истина);
	Иначе
		ПоказатьВводСтроки(ОповещениеОЗакрытии, МногострочныйТекст, Заголовок,, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция КодТНВЭДНачалоВыбора(КодТНВЭД, Форма) Экспорт
	
КонецФункции	

Процедура ОткрытьФормуРезерверногоКопирование(ПараметрыФормы = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуЖурналаРегистрации(ПараметрыФормы = Неопределено) Экспорт
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОткрытьФормуОбработкиТабличнойЧастиДокументов(ПараметрыФормы = Неопределено, Знач ФормаЭДВС, Знач УникальныйИдентификатор) Экспорт
	
КонецПроцедуры

Процедура ИзменитьТабличнуюЧастьДокумента(ИмяТабличнойЧасти, СинонимТабличнойЧасти, ИмяТаблицыФормы, Форма, ПараметрыФормы) Экспорт

	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФормуОбработкиТабличнойЧастиДокументов(ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

Функция ПроверитьМожноЛиОткрыватьФормуНовогоДокумента(ТипДокумента) Экспорт
	Возврат Истина;
КонецФункции	

// Процедура должна использоваться при начале выбора значения в поле "СтруктурноеПодразделениеОрганизация"
Процедура СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ДоступностьИзмененияОрганизации, ИмяПроцедурыОбработкиВыбора = "ПослеВыбораСтруктурногоПодразделения") Экспорт
	//РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Организация, СтруктурноеПодразделение, ДоступностьИзмененияОрганизации, ИмяПроцедурыОбработкиВыбора);
	//для конфигураций без поддержки структурных подразделений никаких действий не нужны
	//тогда в форме документа будет выполняться стандартная обработка
КонецПроцедуры

// Вызывает функцию, которая проверяет измененность реквизита формы "СтруктурноеПодразделениеОрганизация" по отношению к реквизитам объекта
Функция ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Организация, СтруктурноеПодразделение) Экспорт
	//Возврат РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Организация, СтруктурноеПодразделение);
	//для конфигураций без поддержки структурных подразделений возвращаем структуру
	Результат = Новый Структура;
	Результат.Вставить("ИзмененаОрганизация", Ложь);
	Результат.Вставить("ИзмененоСтруктурноеПодразделение", Ложь);
	Возврат Результат;
КонецФункции

// Процедура вызывается из формы объекта после выбора значения в поле "СтруктурноеПодразделениеОрганизация" и выполняет общие действия для всех объектов.
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Организация, СтруктурноеПодразделение, ЗначениеЭлементаФормы = Неопределено) Экспорт
	//РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Организация, СтруктурноеПодразделение, ЗначениеЭлементаФормы);
	//для конфигураций без поддержки структурных подразделений формируем структуру
	Результат = Новый Структура;
	Результат.Вставить("ИзмененаОрганизация", Ложь);
	Результат.Вставить("ИзмененоСтруктурноеПодразделение", Ложь);
КонецПроцедуры

Процедура ОткрытьСНТ(ФормаЭСФ, СНТ, НаправлениеСНТ, ДоступныеРоли) Экспорт
	
	СНТКлиент.ОткрытьСНТ(ФормаЭСФ, СНТ, НаправлениеСНТ, ДоступныеРоли);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораСНТ(Знач ФормаЭСФ, Знач ТипСНТ) Экспорт
	
	СНТКлиентПереопределяемый.ОткрытьФормуВыбораСНТ(ФормаЭСФ, ТипСНТ);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораСправочникаТипыЦенНоменклатуры(Оповещение) Экспорт
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора", ,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);;
	
КонецПроцедуры

Функция ПолучитьТипПроизводствоБезЗаказа(Знач Основание) Экспорт
	
	ТипПроизводствоБезЗаказа = Ложь;
	Возврат ТипПроизводствоБезЗаказа;
	
КонецФункции

