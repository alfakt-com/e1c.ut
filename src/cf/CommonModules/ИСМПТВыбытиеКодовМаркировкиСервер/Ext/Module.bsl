#Область ОбщегоНазначения

Функция ОбщегоНазначения_СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда 
		
		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОбщегоНазначения_СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные)
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда 
		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция ОбщегоНазначения_СкопироватьМассив(МассивИсточник, ФиксироватьДанные)
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(ОбщегоНазначения_СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда 
		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
//
// Параметры:
//  Источник - Структура, ФиксированнаяСтруктура,
//             Соответствие, ФиксированноеСоответствие,
//             Массив, ФиксированныйМассив,
//             СписокЗначений - объект, который необходимо скопировать.
//  ФиксироватьДанные - Булево, Неопределено - если Истина - фиксировать, 
//                          если Ложь - снять фиксацию, если Неопределено - не изменять.
//
// Возвращаемое значение:
//  Структура, ФиксированнаяСтруктура,
//  Соответствие, ФиксированноеСоответствие,
//  Массив, ФиксированныйМассив,
//  СписокЗначений - копия объекта, переданного в параметре Источник.
//
Функция ОбщегоНазначения_СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ТаблицаЗначений") Тогда
		Возврат Источник.Скопировать();
	КонецЕсли;
	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = ОбщегоНазначения_СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = ОбщегоНазначения_СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = ОбщегоНазначения_СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти 

#Область ЧекиЕГАИС

Функция ЧекиЕГАИС_ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Операция = Неопределено) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ;
	КонецЕсли;
	
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Шапка.Количество() > 1 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС';
		                            |en = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС';
		                            |en = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС_ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
	
	АкцизныеМарки = Новый ТаблицаЗначений;
	АкцизныеМарки.Колонки.Добавить("ИдентификаторСтроки");
	АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция");
	АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
	
	Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
		
		НоваяСтрока = АкцизныеМарки.Добавить();
		НоваяСтрока.ИдентификаторСтроки  = СтрокаТЧ.ИдентификаторСтроки;
		НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
		
	КонецЦикла;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	АдресТорговогоОбъекта = "";
	ИнтеграцияЕГАИСПереопределяемый.АдресТорговогоОбъекта(АдресТорговогоОбъекта, Шапка.ТорговыйОбъект);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1';
							|en = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЧекXDTO = ИнтеграцияИС_ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
	
	АкцизныеМарки.Индексы.Добавить("ИдентификаторСтроки");
	АкцизныеМарки.Индексы.Добавить("АлкогольнаяПродукция");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		КодыАкцизныхМарок = Новый Массив;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторСтроки", СтрокаТЧ.ИдентификаторСтроки);
		НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
			АкцизныеМарки.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		Если КодыАкцизныхМарок.Количество() < СтрокаТЧ.Количество Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
				АкцизныеМарки.Удалить(НайденнаяСтрока);
				Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если КодыАкцизныхМарок.Количество() >= СтрокаТЧ.Количество Тогда
			
			Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
				
				Bottle = ИнтеграцияИС_ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена,              СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
				
				Если ЧекиЕГАИС_ЭтоШтрихкодEAN(ПространствоИмен, СтрокаТЧ.Штрихкод) Тогда
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
				КонецЕсли;
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем,             СообщениеXML);
				
				ЧекXDTO.Bottle.Добавить(Bottle);
				
			КонецЦикла;
			
		Иначе
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""';
							|en = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЧекиЕГАИС_ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Операция = Неопределено) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ;
	КонецЕсли;
	
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Шапка.Количество() > 1 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС';
		                            |en = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС';
		                            |en = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС_ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
	
	АкцизныеМарки = Новый ТаблицаЗначений;
	АкцизныеМарки.Колонки.Добавить("Номенклатура");
	АкцизныеМарки.Колонки.Добавить("Характеристика");
	АкцизныеМарки.Колонки.Добавить("Серия");
	АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция");
	АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
	
	Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
		
		НоваяСтрока = АкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
		
	КонецЦикла;
	
	АкцизныеМарки.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Серия");
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	АдресТорговогоОбъекта = "";
	ИнтеграцияЕГАИСПереопределяемый.АдресТорговогоОбъекта(АдресТорговогоОбъекта, Шапка.ТорговыйОбъект);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1';
							|en = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЧекXDTO = ИнтеграцияИС_ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
		Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
		
		КодыАкцизныхМарок = Новый Массив;
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТЧ);
		
		КоличествоМарок = СтрокаТЧ.Количество;
		
		НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если КоличествоМарок > 0 Тогда
				КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
				АкцизныеМарки.Удалить(НайденнаяСтрока);
				КоличествоМарок = КоличествоМарок - 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
			
			Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
				
				Bottle = ИнтеграцияИС_ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена,              СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
				
				Если ЧекиЕГАИС_ЭтоШтрихкодEAN(ПространствоИмен, СтрокаТЧ.Штрихкод) Тогда
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
				КонецЕсли;
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем,             СообщениеXML);
				
				ЧекXDTO.Bottle.Добавить(Bottle);
				
			КонецЦикла;
			
		Иначе
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""';
							|en = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовЕГАИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЧекиЕГАИС_ЭтоШтрихкодEAN(ПространствоИмен, Штрихкод)
	
	Если Штрихкод = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипEAN = ФабрикаXDTO.Тип(ПространствоИмен, "EAN");
	
	Попытка
		ТипEAN.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодированиеЕГАИС

// Возвращает структуру параметров, на основании которых будет формироваться запрос получения вложенных штрихкодов.
// 
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ИмяТабЧастиАкцизныхМарок - Булево - Наименование табличной части, где хранятся Акцизные марки.
// * ЗаполнитьСправки2ИзРегистра - Булево - Истина, если необходимо брать справки 2 из регистра сведений 
//  Акцизные марки ЕГАИС.
// * ИмяВременнойТаблицы - Строка - Имя временной таблицы, на основании которой будут получены данные.
// * ИмяПоляАлкогольнаяПродукция - Строка - Наименование реквизита табличной части, где хранится значение Алкогольная
//  продукция.
// * ИмяПоляОрганизацияЕГАИС - Строка - Наименование реквизита, где хранится значение Организация ЕГАИС.
// * ИспользоватьИдентификаторСтроки - Булево - Истина, в том случае, используется идентификатор строк для связи между 
//	 табличной частью с товарами и табличной частью с акцизными марками.
// * ДокументСсылка - Неопределено - Ссылка на документ, для которого необходимо получить данные по штрихкодам упаковок.
// * ИмяКолонкиСвязи - Строка - Если акцизные марки хранятся в отдельной табличной части и связь осуществляется по колонке-ключу -
//      требуется указать имя колонки, по которой осуществляется связь между табличными частями Товары и табличной частью, где хранятся
//      акцизные марки. По умолчанию "ИдентификаторСтроки".
Функция ШтрихкодированиеЕГАИС_ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяПоляОрганизацияЕГАИС",         "ОрганизацияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяПоляАлкогольнаяПродукция",     "АлкогольнаяПродукция");
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	ВозвращаемоеЗначение.Вставить("ЗаполнитьСправки2ИзРегистра",     Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяТабЧастиАкцизныхМарок",        "");
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяКолонкиСвязи",                 "ИдентификаторСтроки");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует текст запроса для получения вложенных штрихкодов по документу.
//
// Параметры:
//  ПараметрыФормированияТекстаЗапроса - (См. ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов).
//  
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ШтрихкодированиеЕГАИС_ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса) Экспорт
	
	ДокументСсылка                  = ПараметрыФормированияТекстаЗапроса.ДокументСсылка;
	ИспользоватьИдентификаторСтроки = ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки;
	ИмяПоляОрганизацияЕГАИС         = ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС;
	ИмяПоляАлкогольнаяПродукция     = ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция;
	ИмяВременнойТаблицы             = ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы;
	ЗаполнитьСправки2ИзРегистра     = ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра;
	ОрганизацияЕГАИС                = ПараметрыФормированияТекстаЗапроса.ОрганизацияЕГАИС;
	ИмяТабЧастиАкцизныхМарок        = ?(ЗначениеЗаполнено(ПараметрыФормированияТекстаЗапроса.ИмяТабЧастиАкцизныхМарок), 
		ПараметрыФормированияТекстаЗапроса.ИмяТабЧастиАкцизныхМарок, "АкцизныеМарки");
	ИмяКолонкиСвязи                 = ПараметрыФормированияТекстаЗапроса.ИмяКолонкиСвязи;
	
	ТекстЗапроса = "";
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		ТабличнаяЧастьСАкцизнымиМарками =  МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиАкцизныхМарок);
		Если ТабличнаяЧастьСАкцизнымиМарками = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть %2.';
								|en = 'У документа %1 отсутствует табличная часть %2.'");
			ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка, ИмяТабЧастиАкцизныхМарок);
		КонецЕсли;
		
		РеквизитыТабличнойЧастиАкцизныеМарки = ТабличнаяЧастьСАкцизнымиМарками.Реквизиты;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти(ИмяКолонкиСвязи) <> Неопределено
			И ИспользоватьИдентификаторСтроки Тогда
			ЗначениеРеквизитаИдентификаторСтроки  = "ТабличнаяЧасть."+ИмяКолонкиСвязи;
			ИспользоватьТабличнуюЧастьТовары      = Истина;
		Иначе
			ЗначениеРеквизитаИдентификаторСтроки  = "НЕОПРЕДЕЛЕНО";
			ИспользоватьТабличнуюЧастьТовары      = Ложь;
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("Справка2") <> Неопределено Тогда
			
			ЗначениеРеквизитаСправка2 = "ТабличнаяЧасть.Справка2";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			КонецЕсли;
			
		Иначе
			
			ЗначениеРеквизитаСправка2 = "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)";
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("ШтрихкодУпаковки") <> Неопределено Тогда
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ТабличнаяЧасть.ШтрихкодУпаковки";
		Иначе
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ЗначениеРеквизитаОрганизацияЕГАИС = "&ОрганизацияЕГАИС";
		Иначе
			ЗначениеРеквизитаОрганизацияЕГАИС = "ТабличнаяЧасть.Ссылка." + ИмяПоляОрганизацияЕГАИС;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	%ОрганизацияЕГАИС%             КАК ОрганизацияЕГАИС,
		|	%ИдентификаторСтроки%          КАК ИдентификаторСтроки,
		|	%АлкогольнаяПродукция%         КАК АлкогольнаяПродукция,
		|	%Справка2%                     КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка   КАК ШтрихкодУпаковки,
		|	%ШтрихкодРодительскойУпаковки% КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	%ИмяТабличнойЧасти% КАК ТабличнаяЧасть
		|		%Соединения%
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти%",            МетаданныеДокумента.ПолноеИмя() + "." +ИмяТабЧастиАкцизныхМарок);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОрганизацияЕГАИС%",             ЗначениеРеквизитаОрганизацияЕГАИС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИдентификаторСтроки%",          ЗначениеРеквизитаИдентификаторСтроки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%АлкогольнаяПродукция%",         СтрЗаменить(ЗначениеРеквизитаАлкогольнаяПродукция, "%ИмяПоляАлкогольнаяПродукция%", ИмяПоляАлкогольнаяПродукция));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Справка2%",                     ЗначениеРеквизитаСправка2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШтрихкодРодительскойУпаковки%", ЗначениеРеквизитаШтрихкодРодительскойУпаковки);
		
		Если ИспользоватьТабличнуюЧастьТовары Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%",
				СтрШаблон(
					"ЛЕВОЕ СОЕДИНЕНИЕ %1.%2 КАК Товары
					|ПО Товары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
					|И Товары.ИдентификаторСтроки <> """"
					|",
					МетаданныеДокумента.ПолноеИмя(),
					МетаданныеДокумента.ТабличныеЧасти.Товары.Имя));
		Иначе
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС     КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2             КАК Справка2,
	|	ИсходныеДанные.ШтрихкодУпаковки     КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.АлкогольнаяПродукция
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.Справка2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1             КАК Справка2Уровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень1             КАК Справка2Уровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2             КАК Справка2Уровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.Упаковка                     КАК Упаковка,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ИсходныеДанные.Справка2Уровень1             КАК Справка2Уровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ИсходныеДанные.Справка2Уровень2             КАК Справка2Уровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень3 КАК АлкогольнаяПродукцияУровень3,
	|	ИсходныеДанные.Справка2Уровень3             КАК Справка2Уровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.Упаковка ЕСТЬ NULL
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.ОрганизацияЕГАИС                                                         КАК ОрганизацияЕГАИС,
	|	ДанныеУпаковок.Упаковка                                                                 КАК Упаковка,
	|	ДанныеУпаковок.ИдентификаторСтроки                                                      КАК УпаковкаИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2
	|	КОНЕЦ КАК УпаковкаСправка2,
	|	ДанныеУпаковок.Упаковка.ТипШтрихкода                                                    КАК УпаковкаТипШтрихкода,
	|	ДанныеУпаковок.Упаковка.ТипУпаковки                                                     КАК УпаковкаТипУпаковки,
	|	ДанныеУпаковок.Упаковка.ЗначениеШтрихкода                                               КАК УпаковкаШтрихкод,
	|	ДанныеУпаковок.Упаковка.Номенклатура                                                    КАК УпаковкаНоменклатура,
	|	ДанныеУпаковок.Упаковка.Характеристика                                                  КАК УпаковкаХарактеристика,
	|	ДанныеУпаковок.Упаковка.Серия                                                           КАК УпаковкаСерия,
	|	ДанныеУпаковок.Упаковка.ХешСумма                                                        КАК УпаковкаХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаСтатус,
	|	ЕСТЬNULL(СтатусыУпаковки.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукция) КАК УпаковкаАлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                                                         КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1                                              КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень1
	|	КОНЕЦ КАК УпаковкаУровень1Справка2,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода                                            КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки                                             КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода                                       КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура                                            КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика                                          КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия                                                   КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма                                                КАК УпаковкаУровень1ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень1 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень1Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень1.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень1) КАК УпаковкаУровень1АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                                                         КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2                                              КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень2
	|	КОНЕЦ КАК УпаковкаУровень2Справка2,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода                                            КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки                                             КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода                                       КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура                                            КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика                                          КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия                                                   КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма                                                КАК УпаковкаУровень2ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень2Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень2.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень2) КАК УпаковкаУровень2АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                                                         КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3                                              КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень3
	|	КОНЕЦ КАК УпаковкаУровень3Справка2,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода                                            КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки                                             КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода                                       КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура                                            КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика                                          КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия                                                   КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма                                                КАК УпаковкаУровень3ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень3 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень3Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень3.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень3) КАК УпаковкаУровень3АлкогольнаяПродукция
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковки
	|		ПО ДанныеУпаковок.Упаковка = СтатусыУпаковки.АкцизнаяМарка
	|			И (СтатусыУпаковки.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1 = СтатусыУпаковкиУровень1.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень1.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2 = СтатусыУпаковкиУровень2.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень2.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3 = СтатусыУпаковкиУровень3.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень3.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТВложенныеШтрихкодыИсходныеДанные", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаполнитьСправки2ИзРегистра",        Формат(ЗаполнитьСправки2ИзРегистра, "БЛ=ЛОЖЬ; БИ=ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустойСтатус",                       "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОшибкаЧтенияСтатуса",                "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустаяСправка2",                     "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары».
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок».
//
// Параметры:
//  ВыборкаПерваяИтерация - ВыборкаРезультатаЗапроса - первая итерации выборки.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
// Возвращаемое значение:
//  Структура - Описание:
// * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ШтрихкодированиеЕГАИС_ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) Экспорт

	ДеревоУпаковок      = ШтрихкодированиеИС_ИнициализироватьДеревоУпаковок();
	МаркированныеТовары = ШтрихкодированиеЕГАИС_ИнициализироватьТаблицуМаркированныеТовары();

	МаркированныеТовары.Индексы.Добавить("ШтрихкодУпаковки");

	СоответствиеСтрокДереваУпаковок = Новый Соответствие;

	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);

	НуженПоискВложенныхШтрихкодов = Истина;
	НомерИтерации = 1;
	Пока НуженПоискВложенныхШтрихкодов Цикл

		Если НомерИтерации = 1 Тогда

			Выборка = ВыборкаПерваяИтерация;

		Иначе

			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные2";

			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
					|	ИсходныеДанные.Справка2                     КАК Справка2,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));

			ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС_ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстыЗапроса.Добавить(
				ШтрихкодированиеЕГАИС_ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса), "ВложенныеШтрихкоды");

			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(
					СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			РезультатыЗапроса = ИнтеграцияИС_ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();

		КонецЕсли;

		ТаблицаШтрихкодов.Очистить();

		Пока Выборка.Следующий() Цикл

			Если СоответствиеСтрокДереваУпаковок[Выборка.Упаковка] = Неопределено Тогда
				СтрокаРодитель = ДеревоУпаковок.Строки.Добавить();
				ШтрихкодированиеЕГАИС_ЗаполнитьСтрокуДереваУпаковок(СтрокаРодитель, Выборка, 0, МаркированныеТовары, ДополнительныеПараметры);
				СоответствиеСтрокДереваУпаковок.Вставить(Выборка.Упаковка, СтрокаРодитель);
			Иначе
				СтрокаРодитель = СоответствиеСтрокДереваУпаковок[Выборка.Упаковка];
			КонецЕсли;

			Если ЗначениеЗаполнено(Выборка.УпаковкаУровень1) Тогда

				Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1] = Неопределено Тогда
					СтрокаУпаковкиУровень1 = СтрокаРодитель.Строки.Добавить();
					ШтрихкодированиеЕГАИС_ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень1, Выборка, 1, МаркированныеТовары, ДополнительныеПараметры);
					СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень1, СтрокаУпаковкиУровень1);
				Иначе
					СтрокаУпаковкиУровень1 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1];
				КонецЕсли;

				Если ЗначениеЗаполнено(Выборка.УпаковкаУровень2) Тогда

					Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2] = Неопределено Тогда
						СтрокаУпаковкиУровень2 = СтрокаУпаковкиУровень1.Строки.Добавить();
						ШтрихкодированиеЕГАИС_ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень2, Выборка, 2, МаркированныеТовары, ДополнительныеПараметры);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень2, СтрокаУпаковкиУровень2);
					Иначе
						СтрокаУпаковкиУровень2 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2];
					КонецЕсли;

					Если ЗначениеЗаполнено(Выборка.УпаковкаУровень3) Тогда

						Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3] = Неопределено Тогда
							СтрокаУпаковкиУровень3 = СтрокаУпаковкиУровень2.Строки.Добавить();
							ШтрихкодированиеЕГАИС_ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень3, Выборка, 3, МаркированныеТовары, ДополнительныеПараметры);
							СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень3, СтрокаУпаковкиУровень3);
						Иначе
							СтрокаУпаковкиУровень3 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3];
						КонецЕсли;

						НоваяСтрока = ТаблицаШтрихкодов.Добавить();
						НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
						НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
						НоваяСтрока.АлкогольнаяПродукция = Выборка.УпаковкаУровень3АлкогольнаяПродукция;
						НоваяСтрока.Справка2             = Выборка.УпаковкаУровень3Справка2;
						НоваяСтрока.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		НомерИтерации = НомерИтерации + 1;
		НуженПоискВложенныхШтрихкодов = ТаблицаШтрихкодов.Количество() > 0;

	КонецЦикла;

	КодыАлкогольнойПродукции = Новый Массив;
	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда

			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);

		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции)
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрокаТЧ.Штрихкод) Тогда

			СтрокаТЧ.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаТЧ.Штрихкод);
			Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
				СтрокаТЧ.СтрокаДерева.КодАлкогольнойПродукции = СтрокаТЧ.КодАлкогольнойПродукции;
			КонецЕсли;

			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);

		КонецЕсли;

	КонецЦикла;

	СоответствиеАлкогольнойПродукции = ИнтеграцияЕГАИС.СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции);

	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл

		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда

			АлкогольнаяПродукция = СоответствиеАлкогольнойПродукции[СтрокаТЧ.КодАлкогольнойПродукции];
			Если ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
				СтрокаТЧ.АлкогольнаяПродукция = АлкогольнаяПродукция;
				Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
					СтрокаТЧ.СтрокаДерева.АлкогольнаяПродукция = АлкогольнаяПродукция;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ШтрихкодированиеЕГАИС_СоздатьШтрихкодыУпаковок(ДеревоУпаковок, Неопределено, Истина);

	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок",      ДеревоУпаковок);
	Результат.Вставить("МаркированныеТовары", МаркированныеТовары);

	Возврат Результат;

КонецФункции

// Инициализирует таблицу значений - "Маркированные товары" путем получения базовой структуры таблицы значений -
// (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары) и дополнения ее специфичными колонками.
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары) и
//    (См. ШтрихкодированиеЕГАИС.ДобавитьКолонкиДляТаблицыМаркированнаяПродукция).
Функция ШтрихкодированиеЕГАИС_ИнициализироватьТаблицуМаркированныеТовары()
	
	МаркированныеТовары = ШтрихкодированиеИС_ИнициализироватьТаблицуМаркированныеТовары();
	ШтрихкодированиеЕГАИС_ДобавитьКолонкиДляТаблицыМаркированнаяПродукция(МаркированныеТовары);
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Добавляет колонки для общей таблицы "Маркированные товары"
//
// Параметры:
//  МаркированныеТовары - ТаблицаЗначений - Описание:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок - статус акцизной марки.
// * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Алкогольная продукция.
// * КодАлкогольнойПродукции - Число - Код продукции по классификатору.
Процедура ШтрихкодированиеЕГАИС_ДобавитьКолонкиДляТаблицыМаркированнаяПродукция(МаркированныеТовары)
	
	МаркированныеТовары.Колонки.Добавить("ОрганизацияЕГАИС",        Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	МаркированныеТовары.Колонки.Добавить("Статус",                  Неопределено);
	МаркированныеТовары.Колонки.Добавить("Справка2",                Неопределено);
	МаркированныеТовары.Колонки.Добавить("АлкогольнаяПродукция",    Неопределено);
	МаркированныеТовары.Колонки.Добавить("КодАлкогольнойПродукции", Неопределено);
	
КонецПроцедуры

// Заполняет строку дерева упаковок данными выборки запроса. Добавляет данные в таблицу маркированные товары.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок) и дополнения его специфичными колонками. 
//  Выборка - ВыборкаРезультатаЗапроса - выборка запроса, для заполнения строки дерева упаковок.
//  Уровень - Число - Уровень дерева упаковок.
//  МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//  ДополнительныеПараметры - Структура - Описание:
// * УпаковкиВерхнегоУровня - Соответствие - Строки верхнего уровня дерева.
Процедура ШтрихкодированиеЕГАИС_ЗаполнитьСтрокуДереваУпаковок(СтрокаДерева, Выборка, Уровень, МаркированныеТовары, ДополнительныеПараметры)
	
	ТекстУровень = ?(Уровень = 0, "", "Уровень" + Уровень);
	
	СтрокаДерева.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;
	СтрокаДерева.ШтрихкодУпаковки     = Выборка["Упаковка" + ТекстУровень];
	СтрокаДерева.ИдентификаторСтроки  = Выборка["Упаковка" + ТекстУровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки          = Выборка["Упаковка" + ТекстУровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода         = Выборка["Упаковка" + ТекстУровень + "ТипШтрихкода"];
	СтрокаДерева.Штрихкод             = Выборка["Упаковка" + ТекстУровень + "Штрихкод"];
	СтрокаДерева.Номенклатура         = Выборка["Упаковка" + ТекстУровень + "Номенклатура"];
	СтрокаДерева.Характеристика       = Выборка["Упаковка" + ТекстУровень + "Характеристика"];
	СтрокаДерева.Серия                = Выборка["Упаковка" + ТекстУровень + "Серия"];
	СтрокаДерева.ХешСумма             = Выборка["Упаковка" + ТекстУровень + "ХешСумма"];
	СтрокаДерева.Статус               = Выборка["Упаковка" + ТекстУровень + "Статус"];
	СтрокаДерева.Справка2             = Выборка["Упаковка" + ТекстУровень + "Справка2"];
	СтрокаДерева.АлкогольнаяПродукция = Выборка["Упаковка" + ТекстУровень + "АлкогольнаяПродукция"];
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаДерева.КодАлкогольнойПродукции)
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрокаДерева.Штрихкод) Тогда
			СтрокаДерева.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
		СтрокаТаблицы = МаркированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
		
		СтрокаТаблицы.СтрокаДерева           = СтрокаДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = ШтрихкодированиеЕГАИС_СтрокаДереваВерхнегоУровня(СтрокаДерева, ДополнительныеПараметры.УпаковкиВерхнегоУровня);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает самую верхнюю строку в иерархии.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  УпаковкиВерхнегоУровня - Соответствие - Ключ - Строка дерева, Значение - Строка дерева верхнего уровня.
// Возвращаемое значение:
//  СтрокаДереваЗначений, Произвольный - Описание:
// * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - Алкогольная продукция.
// * Справка2 - СправочникСсылка.Справки2ЕГАИС - Справка 2.
// * ВсеСправки2Указаны - Булево - Истина, если указаны все справки 2.
// * Статус - ПеречислениеСсылка.СтатусыАкцизныхМарок - Статус акцизной марки.
// * КодАлкогольнойПродукции - Число - Код продукции по классификатору.
// * КоличествоАкцизныхМарок - Число - Количество марок.
Функция ШтрихкодированиеЕГАИС_СтрокаДереваВерхнегоУровня(СтрокаДерева, УпаковкиВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = УпаковкиВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = ШтрихкодированиеЕГАИС_СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, УпаковкиВерхнегоУровня);
		
		УпаковкиВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

// Создает элементы справочника ШтрихкодыУпаковокТоваров.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  РассчитыватьДанные - Булево - выполнять расчет данных о товарах и справках 2 дерева упаковок.
//  Грузополучатель - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для записи статусов новых акцизных марок.
//  КэшСтатусовУказанияСерий - Соответствие - кэш статусов указания серий номенклатуры
//
Функция ШтрихкодированиеЕГАИС_СоздатьШтрихкодыУпаковок(ДеревоУпаковок, ШтрихкодыУпаковок = Неопределено,
	РассчитыватьДанные = Ложь, Грузополучатель = Неопределено, КэшСтатусовУказанияСерий = Неопределено) Экспорт

	КоличествоАкцизныхМарок = 0;

	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
		ВозвращаемоеЗначение.Вставить("ХешСумма",                   "");
	Иначе
		ВозвращаемоеЗначение = Неопределено;
	КонецЕсли;

	Если РассчитыватьДанные Тогда

		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("АлкогольнаяПродукция",    NULL);
		ДанныеСтроки.Вставить("КодАлкогольнойПродукции", NULL);
		ДанныеСтроки.Вставить("Номенклатура",            NULL);
		ДанныеСтроки.Вставить("Характеристика",          NULL);
		ДанныеСтроки.Вставить("Серия",                   NULL);
		ДанныеСтроки.Вставить("Справка2",                NULL);
		ДанныеСтроки.Вставить("ВсеСправки2Указаны",      Истина);

	КонецЕсли;

	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	КонецЕсли;

	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Результат = Новый Структура;
			Результат.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
			Результат.Вставить("ХешСумма",                   "");
		Иначе
			Результат = ШтрихкодированиеЕГАИС_СоздатьШтрихкодыУпаковок(СтрокаДерева, ШтрихкодыУпаковок,
				РассчитыватьДанные, Грузополучатель, КэшСтатусовУказанияСерий);
		КонецЕсли;

		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;

		Если ШтрихкодыУпаковок <> Неопределено Тогда

			Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда

				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
				ПараметрыОтбора.Вставить("ХешСумма", Результат.ХешСумма);
				НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда

					ШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0].Ссылка;

				Иначе

					ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
					ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
					ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
					ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;

					ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
					ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
					ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;

					Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

						Если СтрДлина(СтрокаДерева.Штрихкод) = 150 Тогда
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
						Иначе
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
						КонецЕсли;

					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда

						ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоАкцизныхМарок;
						ДанныеНовойУпаковки.ХешСумма   = Результат.ХешСумма;

					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда

						ДанныеНовойУпаковки.ХешСумма = Результат.ХешСумма;

					КонецЕсли;

					ПараметрыЗаписи = Новый Структура;
					ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
					ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);

					ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки,
						Результат.ВложенныеШтрихкодыУпаковок, ПараметрыЗаписи, КэшСтатусовУказанияСерий);

					НоваяСтрока = ШтрихкодыУпаковок.Добавить();
					НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
					НоваяСтрока.ХешСумма = ДанныеНовойУпаковки.ХешСумма;
					НоваяСтрока.Ссылка   = ШтрихкодУпаковки;

				КонецЕсли;

				СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;

			КонецЕсли;

			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеДляРасчетаХешСуммы.Добавить(СтрокаДерева.Штрихкод);
			Иначе
				ДанныеДляРасчетаХешСуммы.Добавить(Результат.ХешСумма);
			КонецЕсли;

			ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);

		КонецЕсли;

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + 1;
		Иначе
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + СтрокаДерева.КоличествоАкцизныхМарок;
		КонецЕсли;

		Если РассчитыватьДанные Тогда

			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаДерева.ВсеСправки2Указаны = ЗначениеЗаполнено(СтрокаДерева.Справка2);
			КонецЕсли;

			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "АлкогольнаяПродукция");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "КодАлкогольнойПродукции");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Номенклатура");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Характеристика");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Серия");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Справка2");
			ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ВсеСправки2Указаны", Истина);

		КонецЕсли;

	КонецЦикла;

	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда

		ДеревоУпаковок.КоличествоАкцизныхМарок = КоличествоАкцизныхМарок;

		Если РассчитыватьДанные Тогда
			Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);
			Иначе

				ДанныеСтроки.АлкогольнаяПродукция    = Неопределено;
				ДанныеСтроки.КодАлкогольнойПродукции = Неопределено;
				ДанныеСтроки.Номенклатура            = Неопределено;
				ДанныеСтроки.Характеристика          = Неопределено;
				ДанныеСтроки.Серия                   = Неопределено;
				ДанныеСтроки.Справка2                = Неопределено;
				ДанныеСтроки.ВсеСправки2Указаны      = Ложь;

				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);

			КонецЕсли;
		КонецЕсли;

		Если ШтрихкодыУпаковок <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДеревоУпаковок, "ХешСумма") Тогда
				ВозвращаемоеЗначение.ХешСумма = ДеревоУпаковок.ХешСумма;
			ИначеЕсли ДанныеДляРасчетаХешСуммы.Количество() <> 0 Тогда
				ВозвращаемоеЗначение.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ШтрихкодированиеЕГАИС_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь)

	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];

	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;

	ДанныеСтроки[ИмяПоля] = Значение;

КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСПереопределяемый

// В процедуре нужно реализовать заполнение массива ШтрихкодыУпаковок из данных документа.
// 
// Параметры:
//  Документ - ДокументСсылка - проверяемый документ.
//  ШтрихкодыУпаковок - Массив - Список штрихкодов.
Процедура ШтрихкодированиеИСПереопределяемый_ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковок) Экспорт
	
	//++ НЕ ГОСИС
	ШтрихкодыУпаковок = Документ.ШтрихкодыУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать проверку необходимости выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий 
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии
// 	(ПараметрыСканирования.ПараметрыУказанияСерий).
//
Процедура ШтрихкодированиеИСПереопределяемый_ПриОпределинииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = ОбщегоНазначения_СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
	ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии;
	
	КэшированныеЗначения = Неопределено;
	
	ТекущаяСтрока = Новый Структура;
	
	ТекущаяСтрока.Вставить("Номенклатура",    ДанныеДляРасчетаСерии.Номенклатура);
	ТекущаяСтрока.Вставить("Характеристика",  ДанныеДляРасчетаСерии.Характеристика);
	ТекущаяСтрока.Вставить("ТипНоменклатуры");
	ТекущаяСтрока.Вставить("НомерСтроки",             1);
	ТекущаяСтрока.Вставить("Количество",              1);
	ТекущаяСтрока.Вставить("КоличествоПодобрано",     1);
	ТекущаяСтрока.Вставить("СтатусУказанияСерий",     0);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются");
	ТекущаяСтрока.Вставить("Серия");
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
		ТекущаяСтрока.Характеристика);
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));

	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, ДанныеДляРасчетаСерии.Склад));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТребуетсяВыбор = Не НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(ТекущаяСтрока.СтатусУказанияСерий, ПараметрыУказанияСерий);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

//Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида.
//
//Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
Процедура ШтрихкодированиеИСПереопределяемый_ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС) Экспорт
	
	ШтрихкодыУпаковок = ИнтеграцияИСУТ_ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	Возврат;
	
КонецПроцедуры

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежит во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС.
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ШтрихкодированиеИСПереопределяемый_ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапросаСвойстваМаркируемойПродукции = "
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура   КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табачная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табачная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы ДанныеПоEAN на основании заполненной колонки ШтрихкодEAN.
// 
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ШтрихкодEAN, возвращает:
//   * Номенклатура - ОпределяемыйТип.Номенклатура
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры
//   * Характеристика - ОпределяемыйТип.Характеристика
//   * ШтрихкодEAN - Строка - Штрихкод
//   * ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//   * Маркируемая - Булево - Признак маркируемой продукции
Процедура ШтрихкодированиеИСПереопределяемый_ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ_ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В случае учета серий в данной процедуре необходимо реализовать заполнение таблицы значений "ДанныеТаблицыТовары", содержащей колонки: 
//     "Номенклатура", "Характеристика", "Серия", "Количество". Таблицу необходимо положить во временное хранилище, адрес хранилища
//     - в ПараметрыСканирования.ДанныеТаблицыТовары. Если учет серий не ведется - заполнение не требуется.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой происходит обработка штрихкодов.
//  ДанныеТаблицыТовары - См. ШтрихкодированиеИС.ИнициализицияТаблицыДанныхДокумента.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  СтандартнаяОбработка - Булево, Ложь - если требуется заполнение таблицы в данной процедуре, Истина - заполнение произойдет
//      по стандартному алгоритму.
Процедура ШтрихкодированиеИСПереопределяемый_ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение таблицы данных данными документа основания.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ТаблицаДанных - ТаблицаЗначений - Данные из документа основания.
Процедура ШтрихкодированиеИСПереопределяемый_СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСУТ_СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать обработку данных штрихкода для общей формы. результат обработки штрихкода следует
// вернуть в параметре РезультатОбработки.
//
// Параметры:
//  Форма - УправляемаяФорма - Общая форма.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Процедура ШтрихкодированиеИСПереопределяемый_ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки) Экспорт
	
	//++ НЕ ГОСИС
	РезультатОбработки = ИнтеграцияИСУТ_ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В этой процедуре при необходимости следует реализовать дополнительные проверки на ошибки данных по штрихкодам.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой выполняется обработка штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам). 
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИСПереопределяемый_ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИС

// Производит анализ дерева упаковок на продукцию.
//
// Параметры:
//  ДеревоМаркируемойПродукции - ДеревоЗначений - Иерархия хранения маркируемой продукции с упаковками.
//  ЗначенияШтрихкодов - Массив - Массив, который будет дополнен штрихкодами, которые в наличии.
// * Штрихкод - СтрокаТаблицыЗначений: См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам - Значение штрихкода.
// Возвращаемое значение:
//  Массив - Штрихкоды, которые имеют статус "В Наличии" и содержатся в дереве упаковок.
Функция ШтрихкодированиеИС_ЗначенияШтрихкодовИзДереваМаркируемойПродукции(ДеревоМаркируемойПродукции, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркируемойПродукции.Строки Цикл
		
		ШтрихкодированиеИС_ЗначенияШтрихкодовИзДереваМаркируемойПродукции(СтрокаДерева, Результат);
		
		Если Не (ПустаяСтрока(СтрокаДерева.Штрихкод) Или СтрокаДерева.НедопустимыйКодМаркировки) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет инициализацию кэша для формы объекта, необходимого для обработки маркируемой продукции.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
Процедура ШтрихкодированиеИС_ИнициализироватьКэшМаркируемойПродукции(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшМаркируемойПродукции") Тогда
		
		КэшМаркируемойПродукции = ШтрихкодированиеИС_ИнициализацияКэшаМаркируемойПродукции();
		Форма.КэшМаркируемойПродукции = ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется инициализация структуры кэширования данных маркируемой продукции.
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ОтложенныеКодыМаркировки - Массив - Коды маркировки, по которым требуется выполнить постобработку.
// * ОбработанныеКодыМаркировки - Соответствие - Ключ - код маркировки, значение - информация по коду маркировки.
Функция ШтрихкодированиеИС_ИнициализацияКэшаМаркируемойПродукции() Экспорт
	
	КэшМаркируемойПродукции = Новый Структура;
	КэшМаркируемойПродукции.Вставить("ОбработанныеКодыМаркировки",             Новый Соответствие);
	КэшМаркируемойПродукции.Вставить("ОтложенныеКодыМаркировки",               Новый Массив);
	КэшМаркируемойПродукции.Вставить("ДанныеДляУточненияСведенийПользователя", Новый Структура("Операция, Данные"));
	
	Возврат КэшМаркируемойПродукции;
	
КонецФункции

// Получает массив элементов справочника Штрихкоды упаковок документа по его ссылке.
//
// Параметры:
//  Документ - ДокументСсылка - Ссылка на документ.
//  ПараметрыСканирования - Структура - Параметры сканирования штрихкодов с заполненным свойством ДопустимыеВидыПродукции
// Возвращаемое значение:
//  Массив - коллекция элементов справочника Штрихкоды упаковок.
Функция ШтрихкодированиеИС_ШтрихкодыУпаковокДокумента(Документ, ПараметрыСканирования) Экспорт
	
	ШтрихкодыУпаковокДокумента = Новый Массив;
	ШтрихкодыУпаковок          = Новый Массив;
	
	ШтрихкодированиеИСПереопределяемый_ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковокДокумента);
	
	ПодсистемаИСМПСуществует = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	Если ПодсистемаИСМПСуществует Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		
		ДопустимыеВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
		
		Для Каждого ПроверяемыйШтрихкод Из ШтрихкодыУпаковокДокумента Цикл
			
			Для Каждого ВидПродукции Из ДопустимыеВидыПродукции Цикл
				
				Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
					
					Если МодульШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВФорматеGS1(ПроверяемыйШтрихкод));
					ИначеЕсли МодульШтрихкодированиеМОТП.ЭтоКодМаркировкиТабачнойПачки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ПроверяемыйШтрихкод);
					ИначеЕсли МодульШтрихкодированиеМОТПКлиентСервер.ЭтоКодЛогистическойУпаковки(ПроверяемыйШтрихкод) Тогда
						ШтрихкодыУпаковок.Добавить(ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВФорматеGS1(ПроверяемыйШтрихкод));
					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

//При необходимости изменяет данные поступившие из ТСД по правилам: вложение упаковки всегда должно 
//   быть в массиве после строки самой упаковки; если строки с штрихкодом упаковки нет - она добавляется.
//
//Параметры:
//   ДанныеТСД - Массив - данные поступившие с ТСД (изменяемый параметр)
//
//Возвращаемое значение:
//   Булево - в данных ТСД есть иерархия
//
Функция ШтрихкодированиеИС_ДополнитьУпорядочитьДанныеТСД(ДанныеТСД) Экспорт
	
	// 1. Дополнить данные поступившие из ТСД / внешних источников (в формате ТСД)
	ВсеШтрихкоды = Новый Массив;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ВсеШтрихкоды.Добавить(ЭлементМассива.Штрихкод);
	КонецЦикла;
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		ШтрихкодУпаковки = "";
		Если Не ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда
			Продолжить;
		ИначеЕсли ВсеШтрихкоды.Найти(ШтрихкодУпаковки) = Неопределено Тогда
			ВсеШтрихкоды.Добавить(ШтрихкодУпаковки);
			НовыйЭлемент = ОбщегоНазначения_СкопироватьРекурсивно(ЭлементМассива);
			Для Каждого КлючИЗначение Из НовыйЭлемент Цикл
				НовыйЭлемент[КлючИЗначение.Ключ] = Неопределено;
			КонецЦикла;
			НовыйЭлемент.Штрихкод = ШтрихкодУпаковки;
			НовыйЭлемент.ШтрихкодУпаковки = "";
			ДанныеТСД.Добавить(НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Сортировать данные
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ШтрихкодУпаковки");
	ТаблицаСоответствия.Колонки.Добавить("Штрихкод");
	ТаблицаСоответствия.Колонки.Добавить("Уровень");
	ТаблицаСоответствия.Колонки.Добавить("Элемент");
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		ШтрихкодУпаковки = "";
		ЭлементМассива.Свойство("ШтрихкодУпаковки", ШтрихкодУпаковки);
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
		НоваяСтрока.Штрихкод         = ЭлементМассива.Штрихкод;
		НоваяСтрока.Уровень          = 0;
		НоваяСтрока.Элемент          = ЭлементМассива;
		
	КонецЦикла;
	
	ТаблицаСоответствия.Индексы.Добавить("Уровень");
	ТаблицаСоответствия.Индексы.Добавить("Уровень, Штрихкод");
	
	Уровень = 0;
	СчитатьИерархию = Истина;
	СтрокТаблицы    = ТаблицаСоответствия.Количество();
	Пока СчитатьИерархию И Уровень <= СтрокТаблицы Цикл
		СчитатьИерархию = Ложь;
		Для Каждого СтрокаТЧ Из ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень", Уровень)) Цикл
			Если СтрокаТЧ.ШтрихкодУпаковки = "" Тогда
				Продолжить;
			КонецЕсли;
			Упаковки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("Уровень, Штрихкод", Уровень, СтрокаТЧ.ШтрихкодУпаковки));
			Если Упаковки.Количество() Тогда
				СчитатьИерархию = Истина;
				СтрокаТЧ.Уровень = Уровень + 1;
			КонецЕсли;
		КонецЦикла;
		Уровень = Уровень + 1;
	КонецЦикла;
	
	Если Уровень = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Уровень > СтрокТаблицы) Тогда
		ДанныеТСД = Новый Массив;
		ВызватьИсключение НСтр("ru = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок';
								|en = 'Получены некорректные данные из ТСД или внешнего файла: обнаружено зацикливание упаковок'");
	КонецЕсли;
	
	ТаблицаСоответствия.Сортировать("Уровень");
	
	СортированныйМассив = Новый Массив;
	Для Каждого СтрокаТЧ Из ТаблицаСоответствия Цикл
		СортированныйМассив.Добавить(СтрокаТЧ.Элемент);
	КонецЦикла;
	ДанныеТСД = СортированныйМассив;
	
	Возврат Истина;
	
КонецФункции

// Выполняет контроль заполнения серии с учетом сохраненного ранее выбора пользователя.
// 
// Параметры:
//  ПравилаПроверкиНаОшибки - Структура:
//   * КонтрольСерий - Массив строк дерева упаковок или данных штрихкода, где требуется указание серии.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(ПравилаПроверкиНаОшибки, ПараметрыСканирования) Экспорт
	
	ДанныеУточнения = Новый Соответствие;
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий")
		И ПравилаПроверкиНаОшибки.КонтрольСерий.Количество() > 0 Тогда
		
		Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСерий Цикл
			
			КодМаркировки   = КлючЗначение.Ключ;
			ДанныеШтрихкода = КлючЗначение.Значение;
			ДанныеШтрихкода.ТребуетсяВыборСерии = Истина;
			
			ДанныеУточненияКодаМаркировки = ДанныеУточнения.Получить(КодМаркировки);
			
			Если ДанныеУточненияКодаМаркировки <> Неопределено
				Или (ДанныеСохраненногоВыбора <> Неопределено
				И ДанныеШтрихкода.Номенклатура = ДанныеСохраненногоВыбора.Номенклатура
				И ДанныеШтрихкода.Характеристика = ДанныеСохраненногоВыбора.Характеристика
				И ДанныеШтрихкода.Серия = ДанныеСохраненногоВыбора.Серия) Тогда
				
				ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив штрихкодов EAN, которые хранятся в регистре сведений штрихкоды.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Коллекция штрихкодов EAN.
// Возвращаемое значение:
//  Массив - Коллекция штрихкодов EAN по данным ИБ.
Функция ШтрихкодированиеИС_СуществующиеВРегистреШтрихкодыEAN(ШтрихкодыEAN) Экспорт

	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);

	Возврат ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");

КонецФункции

// Выполняет сравнение двух деревьев значений: Дерево по данным информационной базы, сформированнное на базе справочника
//   "Штрихкоды упаковоко товаров" и дерева, полученного из сервиса Государственной ИС.
// 
// Параметры:
//  ДеревоУпаковок - (См. ИнициализироватьДеревоУпаковок).
//  ДеревоУпаковокПоДаннымСервиса - ДеревоЗначений - Дерево, полученное из сервиса Гос. ИС.
//  ЕстьРасхождения - Булево - Истина, если выявлено расхождение при сравнении.
Процедура ШтрихкодированиеИС_ВыявитьРасхожденияВСоставахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, ЕстьРасхождения) Экспорт
	
	КэшПроверенныхСтрок = Новый Соответствие;
	ТекстОшибки = НСтр("ru = 'Отсутствует по данным сервиса ИС МП.';
						|en = 'Отсутствует по данным сервиса ИС МП.'");
	ШтрихкодированиеИС_ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковок, ДеревоУпаковокПоДаннымСервиса, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, Истина);
	
	ТекстОшибки = НСтр("ru = 'Отсутствует по данным ИБ.';
						|en = 'Отсутствует по данным ИБ.'");
	ШтрихкодированиеИС_ВыявитьРасхожденияВСтрокахДеревьев(ДеревоУпаковокПоДаннымСервиса, ДеревоУпаковок, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, Ложь);
	
КонецПроцедуры

// Проверят Дерево значений 1 на соотствие Дерева значений 2. Фиксирует расхождения.
// 
// Параметры:
//  ДеревоЗначений1 - ДеревоЗначений - 
//  ДеревоЗначений2 - ДеревоЗначений - Описание
//  КэшПроверенныхСтрок - Соответствие - Описание
//  ЕстьРасхождения - Булево - Описание
//  ТекстОшибки - Строка - Описание
//  ПерваяИтерация - Булево - Описание
Процедура ШтрихкодированиеИС_ВыявитьРасхожденияВСтрокахДеревьев(ДеревоЗначений1, ДеревоЗначений2, КэшПроверенныхСтрок, ЕстьРасхождения,
	ТекстОшибки, ПерваяИтерация)
	
	Для Каждого СтрокаДерева1 Из ДеревоЗначений1.Строки Цикл
		
		СоответствующаяСтрокаДерева2 = КэшПроверенныхСтрок.Получить(СтрокаДерева1);
		Если СоответствующаяСтрокаДерева2 <> Неопределено Тогда
			ШтрихкодированиеИС_ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, СоответствующаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения, ТекстОшибки, ПерваяИтерация);
			Продолжить;
		КонецЕсли;
		
		Если ПерваяИтерация Тогда
			
			НайденнаяСтрокаДерева2 = ДеревоЗначений2.Строки.Найти(СтрокаДерева1.Штрихкод, "Штрихкод");
			Если НайденнаяСтрокаДерева2 = Неопределено Тогда
				СтрокаДерева1.ТекстОшибки = ТекстОшибки;
				СтрокаДерева1.ЕстьОшибки  = Истина;
				ЕстьРасхождения = Истина;
			Иначе
				КэшПроверенныхСтрок.Вставить(НайденнаяСтрокаДерева2, СтрокаДерева1);
				ШтрихкодированиеИС_ВыявитьРасхожденияВСтрокахДеревьев(СтрокаДерева1, НайденнаяСтрокаДерева2, КэшПроверенныхСтрок, ЕстьРасхождения,
					ТекстОшибки, ПерваяИтерация);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрокаДерева2 = ДеревоЗначений2.Строки.Добавить();
			НоваяСтрокаДерева2.Штрихкод    = СтрокаДерева1.Штрихкод;
			НоваяСтрокаДерева2.ТекстОшибки = ТекстОшибки;
			НоваяСтрокаДерева2.ЕстьОшибки  = Истина;
			ЕстьРасхождения = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает виды продукции ИС по значению штрихкода логистической упаковки.
//
// Параметры:
//  КодЛогистическойУпаковки - Строка - Штрихкод
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, которые присутствуют в упаковке.
Функция ШтрихкодированиеИС_ВидыПродукцииЛогистическойУпаковки(КодЛогистическойУпаковки) Экспорт
	
	ВидыПродукции = Новый Массив;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС_ИнициализацияДанныхПоШтрихкодам();
	ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Добавить(КодЛогистическойУпаковки);
	
	НайденныеУпаковки = ШтрихкодированиеИС_НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкоды = ШтрихкодированиеИС_ВложенныеШтрихкодыИзвестныхУпаковок(НайденныеУпаковки);
		ВидыПродукции = ВложенныеШтрихкоды.ВидыПродукции;
		
	КонецЕсли;
	
	Возврат ВидыПродукции;
	
КонецФункции

// Дополняет коллекции Дерево упаковок и таблицу значений маркируемая продукция в данных по штрихкодам значениями
// вложенных штрихкодов.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Процедура ШтрихкодированиеИС_ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, ВложенныеШтрихкоды) Экспорт
	
	Если ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Количество() = 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		Возврат;
	КонецЕсли;
	
	ДеревоИзвестныхУпаковок       = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
	ДеревоУпаковокПоДаннымСервиса = ВложенныеШтрихкоды.ДеревоУпаковок;
	СоответствиеСтарыхИНовыхСтрокДерева = Новый Соответствие;
	ШтрихкодированиеИС_СкопироватьСтрокиДерева(ДеревоИзвестныхУпаковок, ДеревоУпаковокПоДаннымСервиса, СоответствиеСтарыхИНовыхСтрокДерева);
	
	МаркированныеТоварыИзвестныхУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
	МаркированныеТоварыПоДаннымСервиса   = ВложенныеШтрихкоды.МаркированныеТовары;
	Для Каждого СтрокаПоДаннымСервиса Из МаркированныеТоварыПоДаннымСервиса Цикл
		
		НоваяСтрока = МаркированныеТоварыИзвестныхУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоДаннымСервиса);
		НоваяСтрока.СтрокаДерева = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.СтрокаДерева);
		НоваяСтрока.УпаковкаВерхнегоУровня = СоответствиеСтарыхИНовыхСтрокДерева.Получить(СтрокаПоДаннымСервиса.УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует стоки дерева источника в строки дерева приемника.
//
// Параметры:
//  СтрокаДереваПриемник - КоллекцияСтрокДереваЗначений - Строки дерева приемника.
//  СтрокаДереваИсточник - КоллекцияСтрокДереваЗначений - Строки дерева источника.
//  СоответствиеСтарыхИНовыхСтрокДерева - Соответствие - Ключ - строка источника, значение - новая строка приемника.
Процедура ШтрихкодированиеИС_СкопироватьСтрокиДерева(СтрокаДереваПриемник, СтрокаДереваИсточник, СоответствиеСтарыхИНовыхСтрокДерева)
	
	Для Каждого СтрокаИсточника Из СтрокаДереваИсточник.Строки Цикл
		
		НоваяСтрока = СтрокаДереваПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
		СоответствиеСтарыхИНовыхСтрокДерева.Вставить(СтрокаИсточника, НоваяСтрока);
		ШтрихкодированиеИС_СкопироватьСтрокиДерева(НоваяСтрока, СтрокаИсточника, СоответствиеСтарыхИНовыхСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
Функция ШтрихкодированиеИС_ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_БазовыеПараметрыСканирования();
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ШтрихкодированиеИС_ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСерверПереопределяемый_ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
// 
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")
		Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары». 
// Данные собираются на основании информации справочника «ШтрихкодыУпаковок». 
// Так же возможно получение информации из сервиса Государственных Информационных Систем,
// если данное взаимодействие и получение информации предусмотрено.
// 
// Параметры:
//  Упаковки - Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Массив упаковок, по которому формируются вложенные штрихкоды.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - Массив штрихкодов, которые необходимо сопоставить с номенклатурой.
//   * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Массив видов продукции.
//   * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке:
//   * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Функция ШтрихкодированиеИС_ВложенныеШтрихкодыУпаковок(Упаковки, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Упаковки.Количество() = 0 Тогда
		
		ВложенныеШтрихкоды = ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
		Возврат ВложенныеШтрихкоды;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС_ИнициализацияДанныхПоШтрихкодам();
	ВложенныеШтрихкоды = ШтрихкодированиеИС_ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(Упаковки);
	ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Если ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ВложенныеШтрихкоды.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования);
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Формирует структуру Вложенные штрихкоды для упаковок на основании существующих данных в ИБ.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодированиеИС_ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок, ВидыПродукцииИС = Неопределено) Экспорт
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
	
	Если МассивУпаковок.Количество() = 0 Тогда
		Возврат ВложенныеШтрихкоды;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС_ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ВидыПродукцииИС);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Данные, заполняемые в процессе обработки штрихкодов.
// 
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ЕстьОшибкиВДеревеУпаковок - Булево - признак, указывающий на то, что в дереве упаковок имеются ошибки.
//   * ВидыПродукции - Массив - коллекция видов продукции, которые были идентифицированы при обработке штрихкодов.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Коллекция штрихкодов EAN, требующих сопоставление пользователя.
//   * ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
//   * НеобработанныеШтрихкоды - Соответствие - штрихкоды, которые не удалось обработать.
//   * ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//   * ШтрихкодыНеизвестныхУпаковок - Массив - коллекция штрихкодов упаковок, отсутствующие в базе.
//   * ШтрихкодыИзвестныхУпаковок - Массив - коллекция штрихкодов упаковок, которые известны.
//   * МаркируемаяПродукция - Массив - вся продукция, подлежащая маркировке.
Функция ШтрихкодированиеИС_ИнициализацияДанныхПоШтрихкодам() Экспорт
	
	ДанныеПоШтрихкодам = Новый Структура;
	
	ДанныеПоШтрихкодам.Вставить("ВсеШтрихкоды",                       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ВидыПродукции",                      Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ДанныеКодовМаркировок",              ШтрихкодированиеИС_ИнициализацияТаблицыДанныеКодовМаркировок());
	ДанныеПоШтрихкодам.Вставить("ВложенныеШтрихкоды",                 Неопределено);
	ДанныеПоШтрихкодам.Вставить("ДеревоПоДаннымСервиса",              Неопределено);
	
	//Ошибки
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибкиВДеревеУпаковок",          Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьОшибки",                         Ложь);
	ДанныеПоШтрихкодам.Вставить("ТребуетсяОбновлениеКлючаСессии",     Ложь);
	ДанныеПоШтрихкодам.Вставить("ОшибкаДопустимостиВидовПродукции",   Ложь);
	ДанныеПоШтрихкодам.Вставить("ЕстьКодыМаркировкиВводаОстатков",    Ложь);
	ДанныеПоШтрихкодам.Вставить("ТекстОшибки",                        "");
	
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ОбработанныеШтрихкоды",              Новый Соответствие);
	ДанныеПоШтрихкодам.Вставить("НеобработанныеШтрихкоды",            Новый Соответствие);
	
	//Не будет использоваться
	ДанныеПоШтрихкодам.Вставить("МаркируемаяПродукция",               Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыИзвестныхУпаковок",         Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ШтрихкодыНеизвестныхУпаковок",       Новый Массив);
	ДанныеПоШтрихкодам.Вставить("ИнформацияПоШтрихкодамEAN",          Новый ТаблицаЗначений);
	ДанныеПоШтрихкодам.Вставить("ЗначенияШтрихкодовПоВидуПродукции",  Новый Соответствие);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Описание
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * КодМаркировки - Строка - Штрихкод.
// * GTIN - Строка - Штрихкод формата GTIN 14 знаков.
// * EAN - Строка - Штрихкод формата EAN.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * ЭтоКодВводаОстатков - Булево - Истина, если код маркировки является кодов ввода остатков, GTIN которого начинается с 029.
// * МаркируемаяПродукция - Булево - Истина, если продукция имеет марку. (Для упаковки - Ложь).
// * ЭтоУпаковка - Булево - Истина, если код маркировки является кодом упаковки.
// * ИзвестнаяУпаковка - Булево - Истина, если данные по упаковки хранятся в базе.
// * ТребуетсяСопоставление - Булево - Истина, если штрихкод EAN кода маркировки не сопоставлен номенклатуре.
Функция ШтрихкодированиеИС_ИнициализацияТаблицыДанныеКодовМаркировок()
	
	ДанныеКодовМаркировок = Новый ТаблицаЗначений;
	
	ДанныеКодовМаркировок.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("GTIN",                   Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("EAN",                    Новый ОписаниеТипов("Строка"));
	ДанныеКодовМаркировок.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("Серия",                  Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДанныеКодовМаркировок.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеКодовМаркировок.Колонки.Добавить("ЭтоКодВводаОстатков",    Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ЭтоУпаковка",            Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ИзвестнаяУпаковка",      Новый ОписаниеТипов("Булево"));
	ДанныеКодовМаркировок.Колонки.Добавить("ТребуетсяСопоставление", Новый ОписаниеТипов("Булево"));
	
	Возврат ДанныеКодовМаркировок;
	
КонецФункции

// Формирует вложенные штрихкоды без учета специфики маркируемой продукции.
//
// Параметры:
//  МассивУпаковок - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодированиеИС_ВложенныеШтрихкодыПоМассивуУпаковокБезСпецифики(МассивУпаковок, ВидыПродукцииИС = Неопределено) Экспорт
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ВложенныеШтрихкоды = ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ШтрихкодированиеИС_ТекстЗапросаСоставаУпаковокВИерархии();
	
	КоллекцияУпаковок = ОбщегоНазначения_СкопироватьРекурсивно(МассивУпаковок);
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВидПродукции = Выборка["УпаковкаУровень"+ТекущийУровень+"ВидПродукции"];
						Если ЗначениеЗаполнено(ВидПродукции)
							И ВидыПродукцииИС <> Неопределено
							И ВидыПродукцииИС.Найти(ВидПродукции) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ВидПродукции) Тогда
							ВложенныеШтрихкоды.ВидыПродукции.Добавить(ВидПродукции);
						КонецЕсли;
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ШтрихкодированиеИС_ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Значение.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = ШтрихкодированиеИС_СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВложенныеШтрихкоды.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВложенныеШтрихкоды.ВидыПродукции);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Выполняет поиск в массиве ВидыПродукции табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если найдена табачная продукция.
Функция ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт

	Возврат ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено;

КонецФункции

//Определяет по контексту возможность работы с табаком.
//
//Параметры:
//   Контекст - Структура, ПеречислениеСсылка.ВидыПродукцииИС -
//     контекст (параметры сканирования или вид продукции), по которому будет определяться возможность работы с табачной продукцией.
//Возвращаемое значение:
//   Булево - Истина, если для контекста разрешена работа с табачной продукцией.
//
Функция ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(Контекст)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(Контекст) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		Возврат Контекст = Перечисления.ВидыПродукцииИС.Табачная;
	КонецЕсли;
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ДопустимВидПродукции(Контекст, Перечисления.ВидыПродукцииИС.Табачная);
	
КонецФункции

// Ищет в массиве табачную продукцию.
//
// Параметры:
//  Коллекция - Массив - коллекция видов продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в коллекции найдена табачная продукция.
Функция ШтрихкодированиеИС_ЕстьТабачнаяПродукцияВКоллекции(Коллекция)
	
	ТабачнаяПродукция = Перечисления.ВидыПродукцииИС.Табачная;
	
	Возврат Коллекция.Найти(ТабачнаяПродукция) <> Неопределено;
	
КонецФункции

Процедура ШтрихкодированиеИС_ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства)
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ШтрихкодированиеИС_ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства);
	Иначе
		ДанныеШтрихкода.ШтрихкодУпаковки = ШтрихкодированиеИС_СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

// Актуализирует данные элемента справочника штрихкоды упаковок.
// 
// Параметры:
//  ЭлементСсылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Элемент справочника.
//  СохраненныйВыбор - Структура - Данные, которые были сохранены пользователем для дальнейшего заполнения.
Процедура ШтрихкодированиеИС_ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства)
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки)
		Или ИзмененныеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты;
	
	ТребуетсяЗаписьОбъекта = Ложь;
	Для Каждого Свойство Из ИзмененныеСвойства Цикл
		Если Реквизиты.Найти(Свойство) <> Неопределено Тогда
			ТребуетсяЗаписьОбъекта = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТребуетсяЗаписьОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
	ОбъектШтрихкодУпаковки.Заблокировать();
	ЗаполнитьЗначенияСвойств(ОбъектШтрихкодУпаковки, ДанныеШтрихкода,,"Владелец");
	ОбъектШтрихкодУпаковки.Записать();
	
КонецПроцедуры

// Обновляет информацию, находяющуюся во временном хранилище, адрес которого, как правило,
// хранится в реквизите формы «КэшМаркируемойПродукции». 
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обновить кэш маркируемой продукции.
Процедура ШтрихкодированиеИС_ОбновитьКэшМаркируемойПродукции(Форма) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС_ПараметрыСканирования(Форма);
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		ШтрихкодированиеИС_ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	КонецЕсли;
	
	УпаковкиОбъекта = ШтрихкодированиеИС_УпаковкиОбъекта(Форма, ПараметрыСканирования);
	
	ЗначенияВложенныхШтрихкодовМарок = ШтрихкодированиеИС_ЗначенияВложенныхШтрихкодовУпаковок(УпаковкиОбъекта);
	
	НовыйОбработанныеКодыМаркировки = Новый Соответствие;
	Для Каждого Штрихкод Из ЗначенияВложенныхШтрихкодовМарок Цикл
		НовыйОбработанныеКодыМаркировки.Вставить(Штрихкод, ОбработанныеКодыМаркировки.Получить(Штрихкод));
	КонецЦикла;
	
	КэшМаркируемойПродукции.ОбработанныеКодыМаркировки = НовыйОбработанныеКодыМаркировки;
	ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
	
КонецПроцедуры

// Формирует данные кодов маркировок на основании данных формы и помещает их во временное хранилище.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции)
		Или ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	Если ОбработанныеКодыМаркировки.Количество() = 0 Тогда
		
		ШтрихкодыУпаковок = ШтрихкодированиеИС_ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
		ШтрихкодированиеИС_КоллекцияВсехШтрихкодовДерева(ШтрихкодыУпаковок.ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ПараметрыСканирования);
		
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
	ШтрихкодированиеИС_СформироватьДанныеТабличнойЧастиТовары(Форма, ПараметрыСканирования);
	
КонецПроцедуры

// Формирует вложенные штрихкоды по данным табличной части Товары и табличной части элементами штрихкодов упаковок.
//
// Параметры:
//  ДанныеТовары - ТабличнаяЧасть - табличная часть с товарами.
//  ДанныеМаркируемаяПродукция - ТабличнаяЧасть - табличная часть с элементами штрихкодов упаковок.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодированиеИС_ШтрихкодыУпаковокПоДаннымТоваровИМаркируемойПродукции(Форма, ПараметрыСканирования);
	
	ИсточникДанных = Форма;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		ИсточникДанных = Форма.Объект;
	КонецЕсли;
	ТабличнаяЧастьШтрихкоды = ИсточникДанных[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ИспользоватьИдентификаторСтроки = Ложь;
	Для Каждого СтрокаТЧ Из ТабличнаяЧастьШтрихкоды Цикл
		МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
		
		Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
			ИмяКолонки = СокрЛП(ИмяКолонки);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ШтрихкодУпаковки") Тогда
				ИмяКолонкиШтрихкодРодительскойУпаковки = "ШтрихкодУпаковки";
			Иначе
				ИмяКолонкиШтрихкодРодительскойУпаковки = ИмяКолонки;
			КонецЕсли;
					
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтрихкодУпаковки             = СтрокаТЧ[ИмяКолонки];
			НоваяСтрока.ШтрихкодРодительскойУпаковки = СтрокаТЧ[ИмяКолонкиШтрихкодРодительскойУпаковки];
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ИдентификаторСтроки") Тогда
				ИспользоватьИдентификаторСтроки = Истина;
				ИдентификаторСтроки             = СтрокаТЧ.ИдентификаторСтроки;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
		|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС_ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = ИспользоватьИдентификаторСтроки;
	ТекстЗапроса = ШтрихкодированиеИС_ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ВложенныеШтрихкоды");
	
	МенеджерВременнойТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	Запрос.УстановитьПараметр("ИсходныеДанные",           ТаблицаШтрихкодов);
	Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС_ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС_ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременнойТаблицы);
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Получает из справочника «Штрихкоды упаковок» данные по массиву значений штрихкодов.
//
// Параметры:
// 	ЗначенияШтрихкодов - Массив из Строка, ТаблицаЗначений - Массив штрихкодов.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Штрихкод - Строка - Штрихкод.
//   * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
//   * ХешСумма - Строка - Хэш сумма упаковки.
Функция  ШтрихкодированиеИС_ШтрихкодыУпаковок(ЗначенияШтрихкодов) Экспорт
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("Штрихкод",     Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ТаблицаШтрихкодов.Колонки.Добавить("ХэшШтрихкода", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	
	Для Каждого Штрихкод Из ЗначенияШтрихкодов Цикл
		
		НоваяСтрока = ТаблицаШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод     = Штрихкод;
		НоваяСтрока.ХэшШтрихкода = ИнтеграцияИС_ХешированиеДанныхSHA256(Штрихкод);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодов);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаШтрихкодов.Штрихкод     КАК Штрихкод,
	|	ТаблицаШтрихкодов.ХэшШтрихкода КАК ХэшШтрихкода
	|ПОМЕСТИТЬ ТаблицаШтрихкодов
	|ИЗ
	|	&ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                    КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода         КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.ХешСумма                  КАК ХешСумма,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки              КАК ДатаУпаковки,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода              КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода КАК ХэшШтрихкода,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковокТоваров.ХешСуммаЗначенияШтрихкода = """"
	|			Тогда Ложь
	|		ИНАЧЕ Истина
	|	КОНЕЦ                                              КАК СвязьПоХэшу,
	|	ШтрихкодыУпаковокТоваров.Номенклатура              КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика            КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Серия                     КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода В
	|		(ВЫБРАТЬ
	|			ТаблицаШтрихкодов.Штрихкод
	|		ИЗ
	|			ТаблицаШтрихкодов КАК ТаблицаШтрихкодов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Ссылка         КАК Ссылка,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод       КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХешСумма       КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ДатаУпаковки   КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ТипШтрихкода   КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода   КАК ХэшШтрихкода,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу    КАК СвязьПоХэшу,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Номенклатура   КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Серия          КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам КАК ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаШтрихкодов КАК ТаблицаШтрихкодов
	|		ПО ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.Штрихкод = ТаблицаШтрихкодов.Штрихкод
	|		И ВЫБОР
	|			КОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.СвязьПоХэшу
	|				ТОГДА ДанныеШтрихкодовУпаковокСОтборомПоШтрихкодам.ХэшШтрихкода = ТаблицаШтрихкодов.ХэшШтрихкода
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод               КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода           КАК ХэшШтрихкода,
	|	МАКСИМУМ(ДанныеШтрихкодовУпаковок.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДаты
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХэшШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Ссылка         КАК Ссылка,
	|	ДанныеШтрихкодовУпаковок.Штрихкод       КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.ХешСумма       КАК ХешСумма,
	|	ДанныеШтрихкодовУпаковок.ДатаУпаковки   КАК ДатаУпаковки,
	|	ДанныеШтрихкодовУпаковок.ТипШтрихкода   КАК ТипШтрихкода,
	|	ДанныеШтрихкодовУпаковок.Номенклатура   КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.Серия          КАК Серия
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДаты КАК МаксимальныеДаты
	|		ПО ДанныеШтрихкодовУпаковок.Штрихкод = МаксимальныеДаты.Штрихкод
	|		И ДанныеШтрихкодовУпаковок.ДатаУпаковки = МаксимальныеДаты.ДатаУпаковки
	|		И ДанныеШтрихкодовУпаковок.ХэшШтрихкода = МаксимальныеДаты.ХэшШтрихкода";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("Штрихкод, ХешСумма");
	
	Возврат Результат;
	
КонецФункции

// Формирует вложенные штрихкоды по данным временной таблицы.
//
// Параметры:
//  ВыборкаПерваяИтерация - РезультатЗапроса.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Функция ШтрихкодированиеИС_ВложенныеШтрихкодыУпаковокПоДаннымМенеджераВТ(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) 
	
	ВложенныеШтрихкоды  = ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня", Новый Соответствие);
	
	ПродолжатьПоиск    = Истина;
	НомерИтерации      = 1;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС_ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстЗапроса = ШтрихкодированиеИС_ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы);
			ТекстыЗапроса.Добавить(ТекстЗапроса,"ВложенныеШтрихкоды");
			
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
			РезультатыЗапроса = ИнтеграцияИС_ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ВложенныеШтрихкоды.ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						РодительскиеДанные = РодительскиеДанные.Строки.Добавить();
						ШтрихкодированиеИС_ЗаполнитьСтрокуДереваУпаковокПоВыборке(РодительскиеДанные, Выборка, ТекущийУровень);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					
					НоваяСтрока = ТаблицаШтрихкодов.Добавить();
					НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
					НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		НомерИтерации   = НомерИтерации + 1;
		ПродолжатьПоиск = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшУпаковокВерхнегоУровня = Новый Соответствие;
	Для Каждого КлючЗначение Из СоответствиеСтрокДереваУпаковок Цикл
		
		Если КлючЗначение.Ключ.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			НоваяСтрока = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗначение.Значение);
			НоваяСтрока.СтрокаДерева = КлючЗначение.Значение;
			НоваяСтрока.УпаковкаВерхнегоУровня = ШтрихкодированиеИС_СтрокаДереваВерхнегоУровня(КлючЗначение.Значение, КэшУпаковокВерхнегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Заполняет строку дерева упаковок по выборке запроса с учетом уровня.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка результата запроса.
//  Уровень - Число - Уровень строки дерева.
Процедура ШтрихкодированиеИС_ЗаполнитьСтрокуДереваУпаковокПоВыборке(СтрокаДерева, Выборка, Уровень)
	
	СтрокаДерева.ШтрихкодУпаковки    = Выборка["УпаковкаУровень" + Уровень];
	СтрокаДерева.ИдентификаторСтроки = Выборка["УпаковкаУровень" + Уровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки         = Выборка["УпаковкаУровень" + Уровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода        = Выборка["УпаковкаУровень" + Уровень + "ТипШтрихкода"];
	СтрокаДерева.Штрихкод            = Выборка["УпаковкаУровень" + Уровень + "Штрихкод"];
	СтрокаДерева.Номенклатура        = Выборка["УпаковкаУровень" + Уровень + "Номенклатура"];
	СтрокаДерева.Характеристика      = Выборка["УпаковкаУровень" + Уровень + "Характеристика"];
	СтрокаДерева.ХешСумма            = Выборка["УпаковкаУровень" + Уровень + "ХешСумма"];
	СтрокаДерева.Серия               = Выборка["УпаковкаУровень" + Уровень + "Серия"];
	СтрокаДерева.ВидПродукции        = Выборка["УпаковкаУровень" + Уровень + "ВидПродукции"];
	
КонецПроцедуры

// Возвращает строку верхнего уровня для строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
//  КэшУпаковокВерхнегоУровня - Соответствие - ключ - Строка дерева, значение - элемент справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка верхнего уровня дерева.
Функция ШтрихкодированиеИС_СтрокаДереваВерхнегоУровня(СтрокаДерева, КэшУпаковокВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = КэшУпаковокВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = ШтрихкодированиеИС_СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, КэшУпаковокВерхнегоУровня);
		
		КэшУпаковокВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

// Заполняет коллекцию "МаркируемаяПродукцияДокумента" данными строк дерева.
//
// Параметры:
//  ДеревоУпаковок - Дерево значений - иерархия маркируемой продукции.
//  КэшМаркируемойПродукции - Соответствие - Ключ - Значение штрихкода, Значение - Данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_КоллекцияВсехШтрихкодовДерева(СтрокиДереваУпаковок, КэшМаркируемойПродукции, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДереваУпаковок Цикл
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СтрокаДерева);
		ДанныеШтрихкода.Штрихкод = СтрокаДерева.Штрихкод;
		
		КэшМаркируемойПродукции.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		
		ШтрихкодированиеИС_КоллекцияВсехШтрихкодовДерева(СтрокаДерева.Строки, КэшМаркируемойПродукции, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру, которая будет содержать в себе всю собранную и проанализированную информацию 
// по значению штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Информация по штрихкоду:
//   * МаркируемаяПродукция - Булево - Истина, если номенклатура данных штрихкода является маркируемой.
//   * ВидыПродукции - Массив - Коллекция элементов перечисления видов продукции ИС, которые были идентифицированы по
// данным штрихкода.
//   * ДополнительныеПараметры - Произвольный.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * Штрихкод - Строка - Значение штрихкода.
//   * Упаковка - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника верхнего уровня.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода маркированного товара.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки маркированного товара.
//   * ТекстОшибки - Строка - описание ошибки.
//   * МаркированныеТовары - Массив - коллекция товаров, подлежащих маркировке.
//   * Количество - Число - количество единиц маркируемой продукции.
//   * ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
//   * ПредставлениеНоменклатуры - Строка - Строковое представление номенклатуры.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
Функция ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования = Неопределено) Экспорт
	
	ДанныеШтрихкода = Новый Структура;
	
	ДанныеШтрихкода.Вставить("Номенклатура",            Неопределено);
	ДанныеШтрихкода.Вставить("Характеристика",          Неопределено);
	ДанныеШтрихкода.Вставить("Серия",                   Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеНоменклатуры", "");
	ДанныеШтрихкода.Вставить("ВложенныеШтрихкоды",      Новый Соответствие);
	ДанныеШтрихкода.Вставить("Количество",              0);
	ДанныеШтрихкода.Вставить("МаркированныеТовары",     Новый Массив);
	ДанныеШтрихкода.Вставить("ТекстОшибки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипУпаковки",             Неопределено);
	ДанныеШтрихкода.Вставить("ТипШтрихкода",            Неопределено);
	ДанныеШтрихкода.Вставить("Упаковка",                Неопределено);
	ДанныеШтрихкода.Вставить("Штрихкод",                Неопределено);
	ДанныеШтрихкода.Вставить("ШтрихкодУпаковки",        Неопределено);
	ДанныеШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	ДанныеШтрихкода.Вставить("ВидыПродукции",           Новый Массив);
	ДанныеШтрихкода.Вставить("МаркируемаяПродукция",    Неопределено);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки", Ложь);
	ДанныеШтрихкода.Вставить("ЭтоШтрихкодНоменклатуры", Ложь);
	ДанныеШтрихкода.Вставить("АдресДереваУпаковок",     Неопределено);
	ДанныеШтрихкода.Вставить("ТребуетсяВыборСерии",     Ложь);
	
	Если ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	КонецЕсли;

	Возврат ДанныеШтрихкода;
	
КонецФункции

// Формирует данные документа основания и помещает их во временное хранилище.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Процедура ШтрихкодированиеИС_СформироватьДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
		И Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		
		ТаблицаДанныхДокументаОснования = ШтрихкодированиеИС_ИнициализицияТаблицыДанныхДокумента();
		
		ШтрихкодированиеИСПереопределяемый_СформироватьДанныеДокументаОснования(
			ПараметрыСканирования, ТаблицаДанныхДокументаОснования);
		
		ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
		
		ПараметрыСканирования.АдресДанныхДокументаОснования = ПоместитьВоВременноеХранилище(
			ТаблицаДанныхДокументаОснования,
			ПараметрыСканирования.ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует коллекцию обработанных штрихкодов по структуре "Вложенные штрихкоды". Коллекция формируется по строкам дерева
// упаковок верхнего уровня.
//
// Параметры:
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//  Соответствие - Описание
Функция ШтрихкодированиеИС_СформироватьОбработанныеШтрихкодыПоВложенным(ВложенныеШтрихкоды)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	
	ОбработанныеШтрихкоды = Новый Соответствие;
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоУпаковок.Строки Цикл
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода();
		ДанныеШтрихкода.Штрихкод         = СтрокаВерхнегоУровня.Штрихкод;
		ДанныеШтрихкода.ШтрихкодУпаковки = СтрокаВерхнегоУровня.ШтрихкодУпаковки;
		ДанныеШтрихкода.ТипШтрихкода     = СтрокаВерхнегоУровня.ТипШтрихкода;
		ДанныеШтрихкода.ТипУпаковки      = СтрокаВерхнегоУровня.ТипУпаковки;
		ДанныеШтрихкода.Номенклатура     = СтрокаВерхнегоУровня.Номенклатура;
		ДанныеШтрихкода.Характеристика   = СтрокаВерхнегоУровня.Характеристика;
		ДанныеШтрихкода.Серия            = СтрокаВерхнегоУровня.Серия;
		ДанныеШтрихкода.ВидыПродукции    = ВложенныеШтрихкоды.ВидыПродукции;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УпаковкаВерхнегоУровня", СтрокаВерхнегоУровня);
		НайденныеСтроки = МаркированныеТовары.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаМаркированныеТовары Из НайденныеСтроки Цикл
			
			ДанныеМаркированногоТовара = Новый Структура;
			Для Каждого Колонка Из МаркированныеТовары.Колонки Цикл
				Если ТипЗнч(СтрокаМаркированныеТовары[Колонка.Имя]) <> Тип("СтрокаДереваЗначений") Тогда
					ДанныеМаркированногоТовара.Вставить(Колонка.Имя, СтрокаМаркированныеТовары[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			
			ДанныеШтрихкода.МаркированныеТовары.Добавить(ДанныеМаркированногоТовара);
			
		КонецЦикла;
		
		ОбработанныеШтрихкоды.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Возврат ОбработанныеШтрихкоды;
	
КонецФункции

// Формирует данные по табличной части "Товары" и помещает данные во временное хранилище.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа, обработки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_СформироватьДанныеТабличнойЧастиТовары(Форма, ПараметрыСканирования)
	
	Если Не ИнтеграцияИС_СерииИспользуются() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТаблицыТовары = ШтрихкодированиеИС_ИнициализицияТаблицыДанныхДокумента();
	
	СтандартнаяОбработка = Истина;
	ШтрихкодированиеИСПереопределяемый_ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ТабличнаяЧастьТовары = Форма.Объект.Товары;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Товары") Тогда
			ТабличнаяЧастьТовары = Форма.Товары;
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
			НоваяСтрока = ДанныеТаблицыТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыСканирования.ДанныеТаблицыТовары = ПоместитьВоВременноеХранилище(
		ДанныеТаблицыТовары, ПараметрыСканирования.ИдентификаторФормы);
	
КонецПроцедуры

// Инициализирует таблицу значений для заполнения данных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * Номенклатура - ОписаниеТипа.Номенклатура - Номенклатура.
// * Характеристика - ОписаниеТипа.ХарактеристикаНоменклатуры - Характеристика.
// * Серия - ОписаниеТипа.СерияНоменклатуры - Серия.
// * Количество - Число - Количество товара.
Функция ШтрихкодированиеИС_ИнициализицияТаблицыДанныхДокумента()
	
	ТаблицаДанныхДокумента = Новый ТаблицаЗначений;
	ТаблицаДанныхДокумента.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДокумента.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	Возврат ТаблицаДанныхДокумента;
	
КонецФункции

// Формирует структура параметров, необходимую для выполнения действия и заполняет ее.
// (См. ШтрихкодированиеИС.ВыполнитьДействие).
//
// Параметры:
//  РезультатВыбора - Произвольный - Результат уточнения информации у пользователя.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// Возвращаемое значение:
//  Структура - Описание - Заполняет структуру параметров значениями.
Функция ШтрихкодированиеИС_ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РезультатВыбора",             РезультатВыбора);
	ПараметрыВыбора.Вставить("РезультатОбработкиШтрихкода", РезультатОбработкиШтрихкода);
	ПараметрыВыбора.Вставить("КэшированныеЗначения",        КэшированныеЗначения);
	
	Возврат ПараметрыВыбора;

КонецФункции

// Выполняет инициализацию структуры Вложенные штрихкоды.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов, которым требуется сопоставить номенклатуру.
//   * ВидыПродукции - Массив - Коллекция видов продукции ИС, которые присутствуют в дереве упаковок.
//   * МаркированныеТовары - (См. ШтрихкодированиеИС.ИнициализироватьТаблицуМаркированныеТовары).
//   * ДеревоУпаковок - (См. ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок);
Функция ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов() Экспорт
	
	ВложенныеШтрихкоды = Новый Структура;
	
	ВложенныеШтрихкоды.Вставить("ДеревоУпаковок",                     ШтрихкодированиеИС_ИнициализироватьДеревоУпаковок());
	ВложенныеШтрихкоды.Вставить("МаркированныеТовары",                ШтрихкодированиеИС_ИнициализироватьТаблицуМаркированныеТовары());
	ВложенныеШтрихкоды.Вставить("ВидыПродукции",                      Новый Массив);
	ВложенныеШтрихкоды.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Распознавание коллекции Штрихкоды и заполнение коллекции ДанныеПоШтрихкодам
// 
// Параметры:
//  Штрихкоды - Массив - Коллекция штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеПоШтрихкодам.ВсеШтрихкоды  = Штрихкоды;
	ОбрабатыватьМаркируемуюПродукцию = ИнтеграцияИСПовтИсп_ВедетсяУчетМаркируемойПродукции();
	
	Если ОбрабатыватьМаркируемуюПродукцию Тогда
		
		Для Каждого КодМаркировки Из Штрихкоды Цикл
			НоваяСтрока = ДанныеПоШтрихкодам.ДанныеКодовМаркировок.Добавить();
			НоваяСтрока.КодМаркировки = КодМаркировки;
		КонецЦикла;
		
		ШтрихкодированиеИС_ОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС_ОпределитьМаркируемуюПродукциюПоКодамМаркировок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС_ОпределитьЛогистическиеУпаковкиШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС_ОпределитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС_ОпределитьНеобработанныеШтрихкоды(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ШтрихкодированиеИС_ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
		ДанныеПоШтрихкодам.ВидыПродукции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
		
	Иначе
		
		Для Каждого Штрихкод Из Штрихкоды Цикл
			ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(Штрихкод);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ШтрихкодированиеИС_ОпределитьШтрихкодыВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДанныеУточнения = Новый Соответствие;
	Если ПараметрыСканирования.ДополнительныеПараметры.Свойство("ДанныеУточнения") Тогда
		ДанныеУточнения = ПараметрыСканирования.ДополнительныеПараметры.ДанныеУточнения;
	КонецЕсли;
	
	ШтрихкодыВводаОстатков = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если ШтрихкодированиеИС_ЭтоШтрихкодВводаОстатков(СтрокаДанных.EAN) Тогда
			
			СтрокаДанных.ЭтоКодВводаОстатков = Истина;
			ШтрихкодыВводаОстатков.Добавить(СтрокаДанных.EAN);
			
			НоменклатураХарактеристика = ДанныеУточнения.Получить(СтрокаДанных.КодМаркировки);
			Если НоменклатураХарактеристика <> Неопределено Тогда
				СтрокаДанных.Номенклатура   = НоменклатураХарактеристика.Номенклатура;
				СтрокаДанных.Характеристика = НоменклатураХарактеристика.Характеристика;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ШтрихкодыВводаОстатков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков = Истина;
	ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрихкодыВводаОстатков);
	
	ШтрихкодированиеИС_ЗаполнитьНоменклатуруХарактеристикуИзПула(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
КонецПроцедуры

// Заполняет значения строк таблицы значений "ДанныеПоШтрихкодам" значениями номенклатуры и характеристики по данным
// регистра сведений "ПулКодовМаркировкиСУЗ". Заполнение выполняется только для кодов маркировки ввода остатков.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьНоменклатуруХарактеристикуИзПула(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Возврат;
	
КонецПроцедуры

// Определяет по штрихкодам логистических упаковок необходимость в сопоставлении их с номенклатурой.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  Штрихкоды - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьШтрихкодыДляСопоставленияЛогистическихУпаковок(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования)
	
	//Определение логистических упаковок
	ШтрихкодыEAN = Новый Массив;
	СоответствиеШтрихкодовEAN = Новый Соответствие;
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		Если ШтрихкодированиеИС_ЭтоШтрихкодGS1(ЗначениеШтрихкода) Тогда
			
			ШтрихкодEAN = ШтрихкодированиеИС_EANПоКодуМаркировки(ЗначениеШтрихкода);
			
			Если ШтрихкодEAN <> Неопределено Тогда
				
				ШтрихкодыEAN.Добавить(ШтрихкодEAN);
				СоответствиеШтрихкодовEAN.Вставить(ЗначениеШтрихкода, ШтрихкодEAN);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДаныеПоШтрихкодамEAN = ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
	Для Каждого ЗначениеШтрихкода Из Штрихкоды Цикл
		
		ШтрихкодEAN = СоответствиеШтрихкодовEAN[ЗначениеШтрихкода];
		Если ШтрихкодEAN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ДаныеПоШтрихкодамEAN.Найти(ШтрихкодEAN, "ШтрихкодEAN");
		
		Если НайденнаяСтрока = Неопределено Тогда
			ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Добавить(ШтрихкодEAN);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необработанные штрихкоды. На основании анализа заполняет "ДанныеПоШтрихкодам".
//
// Параметры:
// 	ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// 	Штрихкоды - Массив из Строка - Список штрихкодов.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ОпределитьНеобработанныеШтрихкоды(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Штрихкоды = ДанныеПоШтрихкодам.ВсеШтрихкоды;
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		Если ДанныеПоШтрихкодам.МаркируемаяПродукция.Найти(Штрихкод) <> Неопределено
			Или ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Найти(Штрихкод) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НеизвестныеШтрихкоды.Добавить(Штрихкод);
		
	КонецЦикла;
	
	ДаныеПоШтрихкодамEAN = ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(НеизвестныеШтрихкоды);
	
	Для Каждого Штрихкод Из НеизвестныеШтрихкоды Цикл
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ДанныеШтрихкода.Количество              = 1;
		ДанныеШтрихкода.Штрихкод                = Штрихкод;
		ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
		
		ИскомаяСтрока = ДаныеПоШтрихкодамEAN.Найти(Штрихкод, "ШтрихкодEAN");
		Если ИскомаяСтрока <> Неопределено Тогда
			
			ДанныеШтрихкода.Номенклатура         = ИскомаяСтрока.Номенклатура;
			ДанныеШтрихкода.Характеристика       = ИскомаяСтрока.Характеристика;
			ДанныеШтрихкода.МаркируемаяПродукция = ИскомаяСтрока.МаркируемаяПродукция;
			
			Если ЗначениеЗаполнено(ИскомаяСтрока.ВидПродукции) Тогда
				ДанныеШтрихкода.ВидыПродукции.Добавить(ИскомаяСтрока.ВидПродукции);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Вставить(Штрихкод, ДанныеШтрихкода);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет по штрихкодам необходимость в сопоставлении их с номенклатурой.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  Штрихкоды - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ОпределитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Штрихкоды = ДанныеПоШтрихкодам.ВсеШтрихкоды;
	
	ШтрихкодированиеИС_ЗаполнитьШтрихкодыДляСопоставленияЛогистическихУпаковок(ДанныеПоШтрихкодам, Штрихкоды, ПараметрыСканирования);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
	
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам);
	
		ШтрихкодированиеИСМПСлужебный_ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам);
	
	КонецЕсли;
	
	ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления);
	
КонецПроцедуры
	
// Определят по переданному массиву штрихкодов логистические упаковки. По результатам анализа заполняет
// "ДанныеПоШтрихкодам".
//
// Параметры:
// 	ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// 	Штрихкоды - Массив из Строка - Список штрихкодов.
// 	ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ОпределитьЛогистическиеУпаковкиШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если ШтрихкодированиеИС_ЭтоКодУпаковки(СтрокаДанных.КодМаркировки, ПараметрыСканирования) Тогда
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Добавить(СтрокаДанных.КодМаркировки);
			СтрокаДанных.ЭтоУпаковка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет код маркировки на соответствие шаблону штрихкодов GS1-128
// 
// Параметры:
//  КодМаркировки
// Возвращаемое значение:
//  Булево - Истина, если код соответствует GS1-128.
Функция ШтрихкодированиеИС_ЭтоШтрихкодGS1(Штрихкод)
	
	// Штрихкод GS1 должен быть преобразован в формат GS1 со скобками
	Если СтрНайти(Штрихкод, "(") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(Штрихкод);
	
	Возврат РезультатРазбора.Разобран;
	
КонецФункции

// Выполняет проверку является ли значение штрихкода штрихкодом логистической упаковки.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодом логистической упаковки.
Функция ШтрихкодированиеИС_ЭтоКодУпаковки(Штрихкод, ПараметрыСканирования)
	
	ЭтоКодУпаковки = Ложь;
	
	КонтрольПоВидуПродукции = Истина;
	Если ПараметрыСканирования.Свойство("ЗапрашиватьДанныеНеизвестныхУпаковокИСМП")
		И ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокИСМП Тогда
		КонтрольПоВидуПродукции = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП")
		И ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		И ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		ЭтоКодУпаковки = МодульШтрихкодированиеМОТП.ЭтоКодУпаковки(Штрихкод, КонтрольПоВидуПродукции);
		
		Если ЭтоКодУпаковки Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определят по переданному массиву штрихкодов маркируемую продукцию. По результатам анализа заполняет
// "ДанныеПоШтрихкодам".
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  КодыМаркировок - Массив из Строка - Список штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ОпределитьМаркируемуюПродукциюПоКодамМаркировок(ДанныеПоШтрихкодам, ПараметрыСканирования)
		
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		ВидПродукцииИСПоШтрихкоду = ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуМаркировки(СтрокаДанных.КодМаркировки);
		
		Если ВидПродукцииИСПоШтрихкоду <> Неопределено Тогда
			
			ДанныеПоШтрихкодам.МаркируемаяПродукция.Добавить(СтрокаДанных.КодМаркировки);
			ДанныеПоШтрихкодам.ВидыПродукции.Добавить(ВидПродукцииИСПоШтрихкоду);
			ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Вставить(СтрокаДанных.КодМаркировки, ВидПродукцииИСПоШтрихкоду);
			СтрокаДанных.ВидПродукции = ВидПродукцииИСПоШтрихкоду;
			СтрокаДанных.МаркируемаяПродукция = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию по EAN кодов маркировки по данным ИБ. Информация помещается в
//  ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ОпределитьИнформациюПоGTINКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыEAN = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		ШтрихкодEAN = ШтрихкодированиеИС_EANИзКодаМаркировки(СтрокаДанных.КодМаркировки);
		Если ШтрихкодEAN <> Неопределено Тогда
			ШтрихкодыEAN.Добавить(ШтрихкодEAN);
			СтрокаДанных.EAN  = ШтрихкодEAN;
			СтрокаДанных.GTIN = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоШтрихкодуEAN(ШтрихкодEAN);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN = ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	
КонецПроцедуры

// Инициализирует дерево значений - Дерево упаковок.
//
// Параметры:
// Возвращаемое значение:
//  ДеревоЗначений - состав колонок определяется в ШтрихкодированиеИС.КолонкиДереваУпаковок.
Функция ШтрихкодированиеИС_ИнициализироватьДеревоУпаковок() Экспорт
	
	КолонкиДереваУпаковок = ШтрихкодированиеИС_КолонкиДереваУпаковок();
	ДеревоУпаковок = Новый ДеревоЗначений;
	
	Для Каждого КлючЗначение Из КолонкиДереваУпаковок Цикл
		
		ДеревоУпаковок.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение)
		
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Формирует структуру обязательных колонок для дерева значений - Дерево упаковок, путем добавления к структуре общих
// колонок. (См. ШтрихкодированиеИС.ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТекстОшибки - Строка - текст ошибки в строке дерева.
//   * ЕстьОшибки - Булево - Истина, если есть ошибки в строке дерева.
//   * ХешСумма - Неопределено - Хэш сумма упаковки.
//   * ТипУпаковки - Неопределено - Тип упаковки.
Функция ШтрихкодированиеИС_КолонкиДереваУпаковок() Экспорт
	
	КоллекцияОбязательныхКолонок = ШтрихкодированиеИС_ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	
	КоллекцияОбязательныхКолонок.Вставить("ТипУпаковки",  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ХешСумма",     Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ЕстьОшибки",   Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(300));
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Инициализирует таблицу значений - Маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы определен в процедуре ШтрихкодированиеИС.КолонкиТаблицыМаркированныеТовары.
Функция ШтрихкодированиеИС_ИнициализироватьТаблицуМаркированныеТовары() Экспорт
	
	КолонкиТаблицы = ШтрихкодированиеИС_КолонкиТаблицыМаркированныеТовары();
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из КолонкиТаблицы Цикл
		
		МаркированныеТовары.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		
	КонецЦикла;
	
	Возврат МаркированныеТовары;
	
КонецФункции

// Формирует структуру обязательных колонок для таблицы - Маркированные товары, путем добавления к структуре общих
// колонок. (См. ШтрихкодированиеИС.ОбщиеКолонкиКоллекцийВложенныхШтрихкодов).
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * СтрокаДерева - СтрокаДереваЗначений - строка дерева упаковок.
Функция ШтрихкодированиеИС_КолонкиТаблицыМаркированныеТовары() Экспорт
	
	КоллекцияОбязательныхКолонок = ШтрихкодированиеИС_ОбщиеКолонкиКоллекцийВложенныхШтрихкодов();
	КоллекцияОбязательныхКолонок.Вставить("СтрокаДерева");
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Возвращает состав колонок, который является общим для дерева упаковок и таблицы значений маркированные товары.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
//   * ТипШтрихкода - Неопределено, ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
//   * УпаковкаВерхнегоУровня - Неопределено -
//   * ВидПродукции - Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции кода маркировки.
//   * Серия - Неопределено, ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Характеристика - Неопределено, ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Номенклатура - Неопределено, ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * ЗначениеШтрихкода - Неопределено, Строка - Штрихкод.
//   * ШтрихкодУпаковки - Неопределено, СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на элемент справочника.
//   * ИдентификаторСтроки - Неопределено, Строка - Идентификатор.
Функция ШтрихкодированиеИС_ОбщиеКолонкиКоллекцийВложенныхШтрихкодов()
	
	КоллекцияОбязательныхКолонок = Новый Структура;
	
	КоллекцияОбязательныхКолонок.Вставить("ИдентификаторСтроки",    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ШтрихкодУпаковки",       Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Штрихкод",               Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Номенклатура",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Характеристика",         Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("Серия",                  Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ВидПродукции",           Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ТипШтрихкода",           Неопределено);
	
	Возврат КоллекцияОбязательныхКолонок;
	
КонецФункции

// Возвращает список элементов штрихкодов упаковок, находящихся на форме объекта.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - Список элементов штрихкодов формы объекта.
Функция ШтрихкодированиеИС_УпаковкиОбъекта(Форма, ПараметрыСканирования)
	
	ТабличнаяЧастьШтрихкодыУпаковок = Форма.Объект[ПараметрыСканирования.ИмяТабличнойЧастиШтрихкодыУпаковок];
	
	ИменаКолонокШтрихкодовУпаковок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ПараметрыСканирования.ИмяКолонкиШтрихкодУпаковки, ",", Истина);
	
	УпаковкиОбъекта = Новый Массив;
	
	Для Каждого ИмяКолонки Из ИменаКолонокШтрихкодовУпаковок Цикл
		
		УпаковкиТабЧасти = ТабличнаяЧастьШтрихкодыУпаковок.Выгрузить(,ИмяКолонки);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УпаковкиОбъекта, УпаковкиТабЧасти, Истина);
		
	КонецЦикла;
	
	Возврат УпаковкиОбъекта;
	
КонецФункции

// Возвращает  запрос получения состава упаковок в иерархии.
//
// Параметры:
// Возвращаемое значение:
//  МассивУпаковок - СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодированиеИС_ТекстЗапросаСоставаУпаковокВИерархии()
	
	ТекстЗапросаИсходныеДанные = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка                            КАК ШтрихкодУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК ШтрихкодРодительскойУпаковки,
	|	""""                                                       КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ 
	|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивУпаковок)
	|;
	|";
	
	ТекстЗапросаСоставаУпаковок = ТекстЗапросаИсходныеДанные + ШтрихкодированиеИС_ТекстЗапросаВложенныхШтрихкодов(Неопределено);
	
	Возврат ТекстЗапросаСоставаУпаковок;
	
КонецФункции

// Возвращает текст запроса для формирования структуры "Вложенные штрихкоды" на основании исходных данных.
//
// Параметры:
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы, где сформированы исходные данные.
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ШтрихкодированиеИС_ТекстЗапросаВложенныхШтрихкодов(ПараметрыФормированияТекстаЗапроса)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодУпаковки                     КАК УпаковкаУровень0,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1
	|ИЗ
	|	ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.УпаковкаУровень0             КАК УпаковкаУровень0,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.УпаковкаУровень0 = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень0 ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень0 ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура   КАК Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковокДляГриппировки
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	ДанныеШтрихкодовУпаковокДляГриппировки КАК ДанныеДляГриппировки
	|ГДЕ ДанныеДляГриппировки.Номенклатура <> &НоменклатураПустаяСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляГриппировки.Номенклатура,
	|	ДанныеДляГриппировки.Характеристика
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|%ТекстЗапросаСвойстваМаркируемойПродукции%
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.УпаковкаУровень0                   КАК УпаковкаУровень0,
	|	ДанныеУпаковок.ИдентификаторСтроки                КАК УпаковкаУровень0ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипШтрихкода      КАК УпаковкаУровень0ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень0.ТипУпаковки       КАК УпаковкаУровень0ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень0.ЗначениеШтрихкода КАК УпаковкаУровень0Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень0.Номенклатура      КАК УпаковкаУровень0Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень0.Характеристика    КАК УпаковкаУровень0Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень0.Серия             КАК УпаковкаУровень0Серия,
	|	ДанныеУпаковок.УпаковкаУровень0.ХешСумма          КАК УпаковкаУровень0ХешСумма,
	|	СвойстваПродукцииУровень0.ВидПродукции            КАК УпаковкаУровень0ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                   КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1        КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода      КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки       КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура      КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика    КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия             КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма          КАК УпаковкаУровень1ХешСумма,
	|	СвойстваПродукцииУровень1.ВидПродукции            КАК УпаковкаУровень1ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                   КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2        КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода      КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки       КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура      КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика    КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия             КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма          КАК УпаковкаУровень2ХешСумма,
	|	СвойстваПродукцииУровень2.ВидПродукции            КАК УпаковкаУровень2ВидПродукции,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                   КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3        КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода      КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки       КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура      КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика    КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия             КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма          КАК УпаковкаУровень3ХешСумма,
	|	СвойстваПродукцииУровень3.ВидПродукции            КАК УпаковкаУровень3ВидПродукции
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень0
	|	ПО ДанныеУпаковок.УпаковкаУровень0.Номенклатура = СвойстваПродукцииУровень0.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень1
	|	ПО ДанныеУпаковок.УпаковкаУровень1.Номенклатура = СвойстваПродукцииУровень1.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень2
	|	ПО ДанныеУпаковок.УпаковкаУровень2.Номенклатура = СвойстваПродукцииУровень2.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваПродукцииУровень3
	|	ПО ДанныеУпаковок.УпаковкаУровень3.Номенклатура = СвойстваПродукцииУровень3.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СвойстваМаркируемойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"%ТекстЗапросаСвойстваМаркируемойПродукции%",
		ШтрихкодированиеИС_ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет текст запроса получения информации по номенклатуре такой как: "МаркируемаяПродукция" и "ВидПродукции" и
// помещает во временную таблицу "СвойстваМаркируемойПродукции".
// 
// Параметры:
// Возвращаемое значение:
// 	Строка - Фрагмент запроса, выборкой которого являются поля: Номенклатура, МаркируемаяПродукция, ВидПродукции.
Функция ШтрихкодированиеИС_ОпределитьТекстЗапросаСвойстваМаркируемойПродукции() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура               КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика             КАК Характеристика,
	|	МАКСИМУМ(ЛОЖЬ)                                      КАК МаркируемаяПродукция,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка) КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ШтрихкодированиеИСПереопределяемый_ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает все вложенные значения штрихкодов по массиву элементов справочника штрихкоды упаковок.
//
// Параметры:
//  АкцизныеМарки - Массив - коллекция элементов справочники Штрихкоды упаковок.
// Возвращаемое значение:
//  Массив - Значения штрихкодов.
Функция ШтрихкодированиеИС_ЗначенияВложенныхШтрихкодовУпаковок(КоллекцияУпаковок)
	
	ВложенныеЗначенияШтрихкодов = Новый Массив;
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ДеревоУпаковок = ШтрихкодированиеИС_ИнициализироватьДеревоУпаковок();
	
	Запрос       = Новый Запрос();
	Запрос.Текст = ШтрихкодированиеИС_ТекстЗапросаСоставаУпаковокВИерархии();
	
	ПродолжатьПоиск    = Истина;
	УровнейВложенности = 3;
	
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("МассивУпаковок", КоллекцияУпаковок);
		Запрос.УстановитьПараметр("НоменклатураПустаяСсылка", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		КоллекцияУпаковок.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			РодительскиеДанные = ДеревоУпаковок;
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				Если ЗначениеЗаполнено(Выборка["УпаковкаУровень"+ТекущийУровень]) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]] = Неопределено Тогда
						
						ВложенныеЗначенияШтрихкодов.Добавить(Выборка["УпаковкаУровень" + ТекущийУровень + "Штрихкод"]);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка["УпаковкаУровень"+ТекущийУровень], РодительскиеДанные);
						
					Иначе
						РодительскиеДанные = СоответствиеСтрокДереваУпаковок[Выборка["УпаковкаУровень"+ТекущийУровень]];
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности Тогда 
					КоллекцияУпаковок.Добавить(Выборка["УпаковкаУровень"+ТекущийУровень]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = КоллекцияУпаковок.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ВложенныеЗначенияШтрихкодов;
	
КонецФункции

// Структура, описывающая результат обработки штрихкода.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ДанныеШтрихкода - Неопределено, Структура - Результат анализа штрихкода, все данные, которые удалось по нему собрать.
// Возвращаемое значение:
//  Структура - Описание:
//   * ВидыПродукции - Массив - Массив видов продукции ИС.
//   * ИзмененныеСтроки - Массив - Строки документа, которые были изменены в процессе обработки штрихкодов.
//   * ДобавленныеСтроки - Массив - Строки документа, которые были добавлены в процессе обработки штрихкодов.
//   * ОшибкаШтрихкодУжеДобавлен - Булево - Признак, указывающий, что обрабатываемый штрихкод был добавлен в документ ранее.
//   * ОшибкаВидаПродукции - Булево - Признак, указывающий, что штрихкод относится к виду продукции, который не поддерживается.
//   * ДополнительныеПараметры - Неопределено -
//   * ЕстьОшибкиВДеревеУпаковок - Булево - Признак, указывающий, что где-то в дереве упаковок присутствует ошибка.
//   * АдресДереваУпаковок - Строка - Адрес временного хранилища, где хранится дерево упаковок.
//   * ТекстОшибки - Строка - Текст ошибки, на которую стоит обратить внимание.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ЕстьОшибки - Булево - Признак, указывающий, что есть ошибки в данных штрихкода.
//   * ШтрихкодыПродукцииДляСопоставления - Неопределено, Массив - Массив неизвестных штрихкодов EAN, которые необходимо сопоставить перед обработкой.
//   * ТребуетсяСопоставлениеНоменклатуры - Булево - Признак, указывающий на то, что перед обработкой необходимо сопоставить номенклатуру штрихкодам EAN.
//   * ИсходныеДанные - Произвольный - Данные, которые поступили на вход для обработки.
//   * ТребуетсяОбработкаШтрихкода - Булево - Признак, указывающий, что данные штрихкода не удалось обработать по стандартному алгоритму.
//   * ТребуетсяВыборНоменклатуры - Булево - Признак, указывающий на необходимость выбора номенклатуры.
//   * ПараметрыВыбораНоменклатуры - Структура - Параметры, участвующие в отборе при выборе номенклатуры в диалоговом окне.
//   * АдресДанныхШтрихкода - Строка - Адрес временного хранилища, где хранится данные штрихкода.
Функция ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования = Неопределено, ДанныеШтрихкода = Неопределено) Экспорт
	
	ВидыПродукции = Неопределено;
	
	Если ПараметрыСканирования <> Неопределено Тогда
		ВидыПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено И ДанныеШтрихкода.ВидыПродукции.Количество() > 0 Тогда
		ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Новый Структура;
	
	// Для выбора значений на клиенте.
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяСопоставлениеНоменклатуры", Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборНоменклатуры",         Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяВыборСерии",                Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяОбработкаШтрихкода",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяУточнениеДанных",           Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОткрытьФормуВводаКодаМаркировки",    Ложь);
	РезультатОбработкиШтрихкода.Вставить("АдресДанныхШтрихкода",               "");
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораНоменклатуры",        Новый Структура);
	РезультатОбработкиШтрихкода.Вставить("ИсходныеДанные",                     Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыУточненияДанных",           Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ИспользоватьОбработкуНаКлиенте",     Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбработкаШтрихкодаБезМарки",         Ложь);
	
	// Для вывода сообщения об ошибке.
	РезультатОбработкиШтрихкода.Вставить("Штрихкод",     "");
	РезультатОбработкиШтрихкода.Вставить("ТипШтрихкода", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТипУпаковки",  Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ТекстОшибки",  "");
	
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибки",                       Ложь);
	РезультатОбработкиШтрихкода.Вставить("ЕстьОшибкиВДеревеУпаковок",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОбщаяОшибка",                      Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаШтрихкодУжеДобавлен",        Ложь);
	РезультатОбработкиШтрихкода.Вставить("ОшибкаДопустимостиВидовПродукции", Ложь);
	
	РезультатОбработкиШтрихкода.Вставить("АдресДереваУпаковок",     "");
	РезультатОбработкиШтрихкода.Вставить("ДополнительныеПараметры", Неопределено);
	
	// Для обработки строк табличной части.
	РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтроки",  Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("ИзмененныеСтроки",   Новый Массив);
	
	РезультатОбработкиШтрихкода.Вставить("ВидыПродукции",      Новый Массив);
	РезультатОбработкиШтрихкода.Вставить("МаркировкаОстатков", Ложь);
	
	Если ВидыПродукции = Неопределено Тогда
		Возврат РезультатОбработкиШтрихкода;
	КонецЕсли;
	
	Если ДанныеШтрихкода <> Неопределено Тогда
		РезультатОбработкиШтрихкода.ТипУпаковки = ДанныеШтрихкода.ТипУпаковки;
	КонецЕсли;
	
	РезультатОбработкиШтрихкода.ВидыПродукции = ВидыПродукции;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ШтрихкодированиеИС_ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);

	КонецЕсли;

	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//Возвращает штрихкод нормализованный по стандартам подсистемы
//
// Параметры:
//  Штрихкод - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Строка - Штрихкод приведенный к требуемому виду.
Функция ШтрихкодированиеИС_НормализованныйШтрихкод(Знач Штрихкод, ПараметрыСканирования) Экспорт
	
	Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_Base64ВШтрихкод(Штрихкод);
	Если НайтиНедопустимыеСимволыXML(Штрихкод) > 0 Тогда
		Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВФорматеGS1(Штрихкод);
	КонецЕсли;
	
	ШтрихкодНормализован = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") И ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
			МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
			НормализованныйШтрихкод = МодульШтрихкодированиеМОТПКлиентСервер.НормализоватьКодМаркировки(Штрихкод,,ПолучитьФункциональнуюОпцию("ОтключенныйФункционал"));
			ШтрихкодНормализован = НормализованныйШтрихкод <> Штрихкод;
		КонецЕсли;
		
	КонецЕсли;
	
	// Только в форме проверки для табачной и обувной продукции
	Если Не ШтрихкодНормализован Тогда
		ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
		Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
			Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
				НормализованныйШтрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
				ШтрихкодНормализован = НормализованныйШтрихкод <> Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ШтрихкодНормализован Тогда
		
		Возврат НормализованныйШтрихкод;
		
	Иначе
		
		ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод);
		Если ЭтоGTIN И СтрДлина(Штрихкод) = 14 Тогда
			Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(Штрихкод);
		КонецЕсли;
		
		Возврат Штрихкод;
		
	КонецЕсли;
	
КонецФункции

// Выполняет обработку штрихкода и возвращает результат этой обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ДанныеШтрихкода - Структура - Исходные данные, включающие только значение штрихкода и количество,
//                                либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ПараметрыСканирования - Структура - Параметры сканирования См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// Возвращаемое значение:
//  (См. ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_ОбработатьВводШтрихкода(Форма, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИС_ПараметрыСканирования(Форма);
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		Если КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Количество() > 0 Тогда
			ДанныеШтрихкода.Штрихкод = КэшМаркируемойПродукции.ОтложенныеКодыМаркировки[0];
			КэшМаркируемойПродукции.ОтложенныеКодыМаркировки = Новый Массив;
			ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		Иначе
			ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИС_НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
		КонецЕсли;
		
	Иначе
		
		ДанныеШтрихкода.Штрихкод = ШтрихкодированиеИС_НормализованныйШтрихкод(ДанныеШтрихкода.Штрихкод, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если ШтрихкодированиеИС_ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
		И ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Возврат ШтрихкодированиеИС_РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ШтрихкодированиеИС_ПодготовитьДанныеДокумента(Форма, ПараметрыСканирования);
	
	Штрихкоды = Новый Массив;
	Штрихкоды.Добавить(ДанныеШтрихкода.Штрихкод);
	
	РезультатыПроверок = ШтрихкодированиеИС_ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(Штрихкоды, ПараметрыСканирования);
	Если РезультатыПроверок.Количество() > 0 Тогда
		Возврат РезультатыПроверок[ДанныеШтрихкода.Штрихкод];
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС_ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	ЕстьОшибки         = ШтрихкодированиеИС_ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	РезультатОбработки = ШтрихкодированиеИС_ОбработатьДанныеПоШтрихкодам(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ДанныеШтрихкода, ЕстьОшибки);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет полную проверку на ошибки данных штрихкодов с учетом индивидуальных проверок по видам продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки в данных.
Функция ШтрихкодированиеИС_ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ШтрихкодированиеИС_ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИС_ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИС_ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИС_ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИС_ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	ШтрихкодированиеИСПереопределяемый_ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
	Если Не ЕстьОшибки Тогда
		
		Если ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

// Выполняет проверку на повторное сканирование кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьНаУжеДобавленныеДанныеВДокумент(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат;
	КонецЕсли; 
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
	
	//Проверка для упаковок
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ШтрихкодированиеИС_ПроверитьСтрокиДереваНаУжеДобавленные(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	Иначе
		ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
		ШтрихкодированиеИС_ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, ОбработанныеКодыМаркировки, ЕстьОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет штрихкоды строк дерева упаковок на попытку повторного ввода.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьСтрокиДереваНаУжеДобавленные(СтрокиДерева, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если МаркируемаяПродукцияДокумента[СтрокаДерева.Штрихкод] <> Неопределено Тогда
			
			СтрокаДерева.ЕстьОшибки = Истина;
			СтрокаДерева.ТекстОшибки = ШтрихкодированиеИС_ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
		ШтрихкодированиеИС_ПроверитьСтрокиДереваНаУжеДобавленные(СтрокаДерева.Строки, МаркируемаяПродукцияДокумента, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет коллекцию обработанные штрихкоды на повторный ввод.
//
// Параметры:
//  ОбработанныеШтрихкоды - Соответствие - штрихкоды, которые удалось обработать.
//  МаркируемаяПродукцияДокумента - Соответствие - закэшированные данные.
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьОбработанныеШтрихкодыНаУжеДобавленные(ОбработанныеШтрихкоды, МаркируемаяПродукцияДокумента, ЕстьОшибки)
	
	Если ОбработанныеШтрихкоды = Неопределено Или МаркируемаяПродукцияДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл 
		
		Если МаркируемаяПродукцияДокумента[КлючЗначение.Ключ] <> Неопределено Тогда
			КлючЗначение.Значение.ТекстОшибки = ШтрихкодированиеИС_ТекстОшибкиУжеДобавленаВДокумент();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверят на дубли коды маркировки в данных по штрихкодам.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьНаДублиКодовМаркировки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Или Не ПараметрыСканирования.ПроверятьДублиКодовМаркировки Тогда
		Возврат;
	КонецЕсли;
	
	КэшДобавляемыхКодовМаркировки = Новый Соответствие;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ШтрихкодированиеИС_ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, ДеревоУпаковок.Строки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		КодМаркировки   = КлючЗначение.Ключ; 
		ДанныеШтрихкода = КлючЗначение.Значение;
		Если ДанныеШтрихкода.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДобавляемыхКодовМаркировки.Получить(КодМаркировки) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(КодМаркировки, Истина);
		Иначе
			ДанныеШтрихкода.ТекстОшибки = НСтр("ru = 'Обрабатывается повторно';
												|en = 'Обрабатывается повторно'");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет проверку по строкам дерева на дубли, которые лежат в кэше. В случе нахождения - добавляет описание ошибки,
//    в противном случае - добавляет в кэш проверенных кодов маркировки.
// 
// Параметры:
//  КэшДобавляемыхКодовМаркировки - Соответствие - Кэш проверяемых кодов.
//  СтрокиДерева - СтрокиДерваЗначений - Строки дерева для обхода.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокиДерева, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ШтрихкодированиеИС_ЗаполнитьКэшКодовМаркировкиПоСтрокамДереваСКонтролемВхождения(КэшДобавляемыхКодовМаркировки, СтрокаДерева.Строки, ПараметрыСканирования, ЕстьОшибки);
		
		Если КэшДобавляемыхКодовМаркировки.Получить(СтрокаДерева.Штрихкод) = Неопределено Тогда
			КэшДобавляемыхКодовМаркировки.Вставить(СтрокаДерева.Штрихкод, Истина);
		Иначе
			СтрокаДерева.ТекстОшибки = НСтр("ru = 'Обрабатывается повторно';
											|en = 'Обрабатывается повторно'");
			СтрокаДерева.ЕстьОшибки  = Истина;
			ЕстьОшибки = Истина;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку видов продукции данных по штрихкодам на вхождение в массив допустимых видов продукции, который
// задан в параметрах сканирования.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьНаДопустимостьОбработкиВидовПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ШтрихкодированиеИС_ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьОшибки = Истина;
	ДанныеПоШтрихкодам.ОшибкаДопустимостиВидовПродукции = Истина;
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		ШтрихкодированиеИС_НайтиСтрокиДереваСНедопустимымВидомПродукции(ДеревоУпаковок.Строки, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Обходит строки дерева и выполняет поиск вида продукции строки дерева в массиве допустимых видов продукции, которые
// заданы в параметрах сканирования.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокиДерева, ПараметрыСканирования)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(СтрокаДерева.ВидПродукции) = Неопределено Тогда
			
			СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Вид продукции: %1';
														|en = 'Вид продукции: %1'"), СтрокаДерева.ВидПродукции);
			СтрокаДерева.ЕстьОшибки  = Истина;
			
		КонецЕсли;
		
		ШтрихкодированиеИС_НайтиСтрокиДереваСНедопустимымВидомПродукции(СтрокаДерева.Строки, ПараметрыСканирования);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку на допустимость обработки вида продукции ИС. Допустимые виды продукции задаются в параметрах
// сканирования.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_КонтрольНаДопустимыеВидыПродукции(Штрихкод, ПараметрыСканирования)
	
	РезультатОбработки = Неопределено;
	
	ВидПродукцииИС = ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод);
	
	Если ВидПродукцииИС = Неопределено Тогда
		ВидПродукцииИС = ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуНоменклатуры(Штрихкод);
	КонецЕсли;
	
	Если ВидПродукцииИС = Неопределено Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ПустаяСсылка()
		И ПараметрыСканирования.ТолькоМаркируемаяПродукция Тогда
		
		ПредставлениеШтрихкода = Новый ФорматированнаяСтрока(
			ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПредставлениеШтрихкода(Штрихкод),
			Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылки,,"СкопироватьШтриховойКодВБуферОбмена");
		
		ШаблонОшибки = НСтр("ru = 'Штрихкод %1 не соответствует допустимому виду продукции.
		                          |Допустимые виды продукции: %2';
		                          |en = 'Штрихкод %1 не соответствует допустимому виду продукции.
		                          |Допустимые виды продукции: %2'");
		
		РезультатОбработки          = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
		ПредставлениеВидовПродукции = ШтрихкодированиеИС_ПредставлениеВидовПродукции(ПараметрыСканирования.ДопустимыеВидыПродукции);
		РезультатОбработки.ТекстОшибки = СтрШаблон(ШаблонОшибки, ПредставлениеШтрихкода, ПредставлениеВидовПродукции);
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		
		Возврат РезультатОбработки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПродукцииИС) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	ДопустимВидПродукции = ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
	Если Не ДопустимВидПродукции Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
		РезультатОбработки.Штрихкод    = Штрихкод;
		РезультатОбработки.ЕстьОшибки  = Истина;
		РезультатОбработки.ОбщаяОшибка = Истина;
		РезультатОбработки.ТекстОшибки = ШтрихкодированиеИС_ТекстОшибкиНеПоддерживаетсяВидПродукции(
			Штрихкод,
			ПараметрыСканирования.ДопустимыеВидыПродукции,
			ВидПродукцииИС);
		
		РезультатОбработки.ОшибкаДопустимостиВидовПродукции = Истина;
		РезультатОбработки.ВидыПродукции.Добавить(ВидПродукцииИС);
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода();
		ДанныеШтрихкода.Штрихкод   = Штрихкод;
		ДанныеШтрихкода.Количество = 1;
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукцииИС);
		ДанныеШтрихкода.ТекстОшибки = СтрШаблон(НСтр("ru = 'Вид продукции: %1';
													|en = 'Вид продукции: %1'"), ВидПродукцииИС);
		
		Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
		Если Идентификатор = Неопределено Тогда
			Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Идентификатор);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает строковое представление массива видов продукции.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция элементов справочника Штрихкоды упаковок.
// Возвращаемое значение:
//  Строка - Представление коллекции элементов.
Функция ШтрихкодированиеИС_ПредставлениеВидовПродукции(ВидыПродукции)
	
	Представление = "";
	Разделитель   = "";
	
	Для Каждого Элемент Из ВидыПродукции Цикл
		
		Представление = Представление + Разделитель + Элемент;
		Разделитель = ", ";
		
	КонецЦикла;
	
	Возврат Представление;
	
КонецФункции

// Выполняет проверки по штрихкодам до формирования данных по ним.
//
// Параметры:
//  СписокШтрихкодов - Массив - Коллекция штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - Штрихкод, значение результат его проверки.
Функция ШтрихкодированиеИС_ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатПроверок = Новый Соответствие;
	
	Для Каждого Штрихкод Из СписокШтрихкодов Цикл
		
		РезультатПроверки = ШтрихкодированиеИС_КонтрольНаДопустимыеВидыПродукции(Штрихкод, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ШтрихкодированиеИС_ПроверкаШтрихкодаНаУжеДобавленный(Штрихкод, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПроверок.Количество() > 0 Тогда
		Возврат РезультатПроверок;
	КонецЕсли;
	
	Если ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(ПараметрыСканирования)
		И ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатПроверки = МодульШтрихкодированиеМОТП.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			РезультатПроверок.Вставить(Штрихкод, РезультатПроверки);
			
			Возврат РезультатПроверок;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверок;
	
КонецФункции

// Выполняет проверку на соответствие вида продукции номенклатуры виду продукции, вычисленному по значению кода маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьНаСоответствиеНоменклатурыВидуПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ВидыПродукцииНоменклатуры = КлючЗначение.Значение.ВидыПродукции;
		ВидПродукцииПоШтрихкоду   = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции[КлючЗначение.Ключ];
		
		Если ВидПродукцииПоШтрихкоду <> Неопределено
			И ВидыПродукцииНоменклатуры.Найти(ВидПродукцииПоШтрихкоду) = Неопределено Тогда			
			
			ЕстьОшибки = Истина;
			
			Если ВидыПродукцииНоменклатуры.Количество() = 0 Тогда
				ШаблонОшибки =  НСтр("ru = 'Не задан вид продукции номенклатуры %1';
									|en = 'Не задан вид продукции номенклатуры %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, КлючЗначение.Значение.Номенклатура);
			Иначе
				ШаблонОшибки = НСтр("ru = 'Значение штрихкода соответствует виду %1';
									|en = 'Значение штрихкода соответствует виду %1'");
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ВидПродукцииПоШтрихкоду);
			КонецЕсли;
			
			КлючЗначение.Значение.ТекстОшибки = ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.ВидПродукции) Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаТовары.СтрокаДерева.ЕстьОшибки         = Истина;
				СтрокаТовары.СтрокаДерева.ТекстОшибки        = НСтр("ru = 'Вид продукции не определен';
																	|en = 'Вид продукции не определен'");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет контроль на соответствие маркируемой продукции по документу основания.
//
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ШтрихкодированиеИС_ПроверитьНаСоответствиеДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием
		И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ШтрихкодированиеИС_ДанныеДокументаОснования(ПараметрыСканирования);
	ТекстОшибки = НСтр("ru = 'Не соответствует документу-основанию';
						|en = 'Не соответствует документу-основанию'");
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
			
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл 
			ДанныеШтрихкода = КлючЗначение.Значение;
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
				ПараметрыПоиска.Вставить("Серия", ДанныеШтрихкода.Серия);
			КонецЕсли;
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
	Иначе
		
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаМаркированныеТовары Из МаркированныеТовары Цикл
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Номенклатура",   СтрокаМаркированныеТовары.Номенклатура);
			ПараметрыПоиска.Вставить("Характеристика", СтрокаМаркированныеТовары.Характеристика);
			ПараметрыПоиска.Вставить("Серия",          СтрокаМаркированныеТовары.Серия);
			
			НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаМаркированныеТовары.СтрокаДерева.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные документа основания из временного хранилища. В случае отсутствия данных в хранилище - формирует их.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * Серия - ОпределяемыеТипы.СерияНоменклатуры - Серия номенклатуры.
//   * Количество - Число - количество единиц.
Функция ШтрихкодированиеИС_ДанныеДокументаОснования(ПараметрыСканирования) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
			
			ШтрихкодированиеИС_СформироватьДанныеДокументаОснования(ПараметрыСканирования);
			
		КонецЕсли;
		
		Возврат ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Выполняет проверку кода маркировки на уже обработанный, путем поиска в кэше обработанных кодов маркировки.
// 
// Параметры:
//  Штрихкод - Строка- Код маркировки.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_ПроверкаШтрихкодаНаУжеДобавленный(Штрихкод, ПараметрыСканирования)
	
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
	ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;

	ДанныеШтрихкода = ОбработанныеКодыМаркировки.Получить(Штрихкод);
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкода.ТекстОшибки             = ШтрихкодированиеИС_ТекстОшибкиУжеДобавленаВДокумент();
	РезультатОбработки                      = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	РезультатОбработки.ЕстьОшибки           = Истина;
	РезультатОбработки.ОбщаяОшибка          = Истина;
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Возвращает шаблон ошибки уже добавлена в документ.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Шаблон ошибки.
Функция ШтрихкодированиеИС_ТекстОшибкиУжеДобавленаВДокумент()
	
	Возврат НСтр("ru = 'Уже добавлена в документ';
				|en = 'Уже добавлена в документ'");
	
КонецФункции

// Возвращает текст ошибки, что вид продукции не поддерживается.
//
// Параметры:
//  Штрихкод - Строка - Значение обрабатываемого штрихкода.
//  ПоддерживаемыеВидыПродукции - Массив - Список допустимых видов продукции.
//  ВидПродукцииШтрихкода - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции штрихкода.
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ШтрихкодированиеИС_ТекстОшибкиНеПоддерживаетсяВидПродукции(Штрихкод, ПоддерживаемыеВидыПродукции, ВидПродукцииШтрихкода)
	
	ПредставлениеВидаПродукции = Неопределено;
	Если ВидПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Табачная Тогда
		ПредставлениеВидаПродукции = НСтр("ru = 'табачной продукции';
											|en = 'табачной продукции'");
	Иначе
		ПредставлениеВидаПродукции = НСтр("ru = '<нет данных>';
											|en = '<нет данных>'");
	КонецЕсли;
	
	Если ПоддерживаемыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = "Не определены";
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПоддерживаемыеВидыПродукции, " ,");
	КонецЕсли;
	
	ПредставлениеШтрихкода             = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПредставлениеШтрихкода(Штрихкод);
	Фрагмент1 = НСтр("ru = 'Считанный код';
					|en = 'Считанный код'");
	Фрагмент2 = Новый ФорматированнаяСтрока(
		ПредставлениеШтрихкода, Новый Шрифт(,,,,Истина),
		ЦветаСтиля.ЦветГиперссылки,,
		"СкопироватьШтриховойКодВБуферОбмена");
	Фрагмент3 = СтрШаблон(НСтр("ru = 'принадлежит %1.';
								|en = 'принадлежит %1.'"), НРег(ПредставлениеВидаПродукции));
	Фрагмент4 = СтрШаблон(НСтр("ru = 'Ожидаемые виды продукции: %1.';
								|en = 'Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, " ", Фрагмент2, " ", Фрагмент3, Символы.ПС, Фрагмент4);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Выполняет обработку данных штрихкода для единицы маркируемой продукции. Обработка происходит в модуле соответствующей
// виду продукции подсистеме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ДанныеШтрихкода - Структура - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Неопределено, Структура - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	РезультатДобавления = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ШтрихкодированиеИС_ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма);

	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, данные которых не удалось сформировать в связи с их
// отсутствием.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования)

	РезультатОбработки = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
	РезультатОбработки.ИсходныеДанные = ШтрихкодИКоличество;
	ДанныеШтрихкода = ДанныеПоШтрихкодам.НеобработанныеШтрихкоды.Получить(ШтрихкодИКоличество.Штрихкод);
	
	Если ДанныеШтрихкода = Неопределено Тогда
		
		РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
		
	ИначеЕсли ПараметрыСканирования.РазрешенаОбработкаБезУказанияМарки Тогда
		
		ДанныеШтрихкода.ОбработатьБезМаркировки = Истина;
		ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры = Истина;
		РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.МаркируемаяПродукция = Истина Тогда
		
		РезультатОбработки.ОткрытьФормуВводаКодаМаркировки = Истина;
		РезультатОбработки.ВидыПродукции = ДанныеШтрихкода.ВидыПродукции;
		
		ПараметрыОткрытияФормы = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытияФормы.ВидПродукции = ДанныеШтрихкода.ВидыПродукции[0];
		ПараметрыОткрытияФормы.МаркируемаяПродукция   = Истина;
		ПараметрыОткрытияФормы.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыОткрытияФормы.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		ПараметрыОткрытияФормы.Характеристика         = ДанныеШтрихкода.Характеристика;
		ПараметрыОткрытияФормы.ДанныеШтрихкода        = ШтрихкодИКоличество;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ПараметрыОткрытияФормы.Документ = Форма.Объект.Ссылка;
		КонецЕсли;
		
		ДанныеКэша = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Операция = "ОткрытьФормуВводаКодаМаркировки";
		ДанныеКэша.ДанныеДляУточненияСведенийПользователя.Данные   = ПараметрыОткрытияФормы;
		
		РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ШтрихкодИКоличество);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
		ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(ШтрихкодИКоличество);
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные   = ДанныеДляСопоставленияНоменклатуры;
		
		РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
		РезультатОбработки.ШтрихкодыПродукцииДляСопоставления.Добавить(ШтрихкодИКоличество);
		
	Иначе
		
		РезультатОбработки.ТребуетсяОбработкаШтрихкода = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для кодов маркировки, в данных которых выявлены ошибки.
//
// Параметры:
//  ДанныеШтрихкодов - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  УникальныйИдентификатор - УникальныйИдентификатор - идентификатор, по которому помещается дерево упаковок во временное
//                                                      хранилище.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатОбработкиШтрихкодаПриОшибках(ДанныеШтрихкодов, ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор)
	
	Если ДанныеШтрихкодов.ЕстьОшибки Тогда
		
		РезультатДобавления = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатДобавления.ТекстОшибки = ДанныеШтрихкодов.ТекстОшибки;
		РезультатДобавления.ЕстьОшибки  = ДанныеШтрихкодов.ЕстьОшибки;
		РезультатДобавления.ОбщаяОшибка = Истина;
		
		Возврат РезультатДобавления;
	КонецЕсли;
	
	//Условие для дерева.
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		РезультатДобавления = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатДобавления.Штрихкод                  = ДанныеШтрихкода.Штрихкод;
		РезультатДобавления.ТипШтрихкода              = ДанныеШтрихкода.ТипШтрихкода;
		РезультатДобавления.АдресДереваУпаковок       = ПоместитьВоВременноеХранилище(ДанныеШтрихкодов.ВложенныеШтрихкоды.ДеревоУпаковок, УникальныйИдентификатор);
		РезультатДобавления.ЕстьОшибкиВДеревеУпаковок = ДанныеШтрихкодов.ЕстьОшибкиВДеревеУпаковок;
		
		Если Не ШтрихкодированиеИС_ВидыПродукцииПоддерживаются(ДанныеШтрихкодов.ВидыПродукции, ПараметрыСканирования) Тогда
			РезультатДобавления.ОбщаяОшибка = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") И ШтрихкодированиеИС_ЕстьТабачнаяПродукцияВКоллекции(ДанныеШтрихкода.ВидыПродукции) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатДобавления = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, Неопределено);
		Иначе
			РезультатДобавления = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатДобавления.ТекстОшибки = ДанныеШтрихкода.ТекстОшибки;
			РезультатДобавления.ЕстьОшибки  = Истина;
			РезультатДобавления.ОбщаяОшибка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатДобавления;
	
КонецФункции

// Формирует результат обработки для уточнения номенклатуры у пользователя, в случае когда 1 штрихкод сопоставлен
//   2 номенклатурным позициям в ИБ.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатТребуетсяУточнениеНоменклатуры(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	КодМаркировки   = ДанныеПоШтрихкодам.ВсеШтрихкоды[0];
	ДанныеШтрихкода = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[КодМаркировки];
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных = Истина;
	РезультатОбработкиШтрихкода.АдресДанныхШтрихкода = 
		ПоместитьВоВременноеХранилище(ДанныеШтрихкода, ПараметрыСканирования.ИдентификаторФормы);
	
	ПараметрыВыбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыУточненияДанных();
	
	Номенклатура = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.ВыгрузитьКолонку("Номенклатура");
	Если Номенклатура.Количество() = 1 Тогда
		Номенклатура = Номенклатура[0];
	КонецЕсли;
	
	Характеристика = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.ВыгрузитьКолонку("Характеристика");
	Если Характеристика.Количество() = 1 Тогда
		Характеристика = Характеристика[0];
	КонецЕсли;
	
	ПараметрыВыбора.Номенклатура           = Номенклатура;
	ПараметрыВыбора.Характеристика         = Характеристика;
	ПараметрыВыбора.КодМаркировки          = КодМаркировки;
	ПараметрыВыбора.ШтрихкодEAN            = ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN[0].ШтрихкодEAN;
	ПараметрыВыбора.ПараметрыУказанияСерий = ОбщегоНазначения_СкопироватьРекурсивно(ПараметрыСканирования.ПараметрыУказанияСерий);
	ПараметрыВыбора.Склад                  = ПараметрыСканирования.Склад;
	ПараметрыВыбора.ПараметрыСканирования  = ПараметрыСканирования;
	РезультатОбработкиШтрихкода.ПараметрыУточненияДанных = ПараметрыВыбора;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Получение информации по коллекции штрихкодов.
// 
// Параметры:
//  Штрихкоды - Массив - коллекция штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  КэшированныеЗначения - Структура - Содержит закэшированные значения.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Функция ШтрихкодированиеИС_ДанныеПоШтрихкодам(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения = Неопределено) Экспорт
	
	ДанныеПоШтрихкодам = ШтрихкодированиеИС_ИнициализацияДанныхПоШтрихкодам();
	ШтрихкодированиеИС_ИдентифицироватьЗначенияШтрихкодов(Штрихкоды, ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ШтрихкодированиеИС_ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеИС_ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если Не ШтрихкодированиеИС_ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ШтрихкодированиеИС_ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Или ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли; 
	
	Если Не ШтрихкодированиеИС_ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ШтрихкодированиеИС_ЗаполнитьДанныеНеобработанныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеИС_ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеИС_ЗаполнитьДаныеПоШтрихкодамПоДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования);
	ШтрихкодированиеИС_ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Заполняет данные коллекции или структуру данными сохраненного выбора пользователя в процессе обработки кодов маркировки.
// 
// Параметры:
//  Данные - Произвольный - Структура ДанныеШтрихкода, строка таблицы значений МаркированныеТовары
//      или строка Дерева упаковок.
//  СохраненныйВыбор - Структура - Данные, сохраненные ранее пользователем в процессе обработки кодов маркировки.
//  ИзмененныеСвойства - Массив из Строка - Имена свойств, значения которых послужили данными заполнения.
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеСохраненнымВыбором(Данные, СохраненныйВыбор, ИзмененныеСвойства)
	
	Если Не (Данные.Номенклатура = СохраненныйВыбор.Номенклатура
		И Данные.Характеристика = СохраненныйВыбор.Характеристика)
		И Не СохраненныйВыбор.ЭтоКодВводаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СохраненныйВыбор Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Данные, КлючЗначение.Ключ)
		 И Не ЗначениеЗаполнено(Данные[КлючЗначение.Ключ]) И ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Данные[КлючЗначение.Ключ] = КлючЗначение.Значение;
			ИзмененныеСвойства.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет структуру "Данные по штрихкодам" информацией по известным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеИзвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеУпаковки = ШтрихкодированиеИС_НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам);
	
	Если НайденныеУпаковки.Количество() > 0 Тогда
		
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ШтрихкодированиеИС_ВложенныеШтрихкодыИзвестныхУпаковок(НайденныеУпаковки);
		ОбработанныеШтрихкоды = ШтрихкодированиеИС_СформироватьОбработанныеШтрихкодыПоВложенным(ДанныеПоШтрихкодам.ВложенныеШтрихкоды);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды);
		ВидыПродукцииДерева = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ВидыПродукции;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ВидыПродукции, ВидыПродукцииДерева, Истина);
		
		ШтрихкодированиеИС_ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам.ДанныеКодовМаркировок, ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск по значениям штрихкодов в справочнике штрихкоды упаковок. Если элемент справочника найден - добавляет
// штрихкод в ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок и удаляет из ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
// Возвращаемое значение:
//  Массив - Коллекция элементов справочника Штрихкоды упаковок.
Функция ШтрихкодированиеИС_НайтиУпаковкиПоШтрихкодам(ДанныеПоШтрихкодам)
	
	ТипыУпаковокДляКоробок = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ТипыУпаковокДляКоробок();
	ТаблицаШтрихкодовУпаковок = ШтрихкодированиеИС_ДанныеШтрихкодовУпаковок(
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок,
		ТипыУпаковокДляКоробок);
	
	НайденныеУпаковки = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок   = ТаблицаШтрихкодовУпаковок.ВыгрузитьКолонку("Штрихкод");
	ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок,
		ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок);
	
	Возврат НайденныеУпаковки;
	
КонецФункции

// Собирает данные по маркируемой продукции, которые хранятся в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеИзвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыМаркируемойПродукции = ДанныеПоШтрихкодам.МаркируемаяПродукция;
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзвестнойПродукции = ШтрихкодированиеИС_ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(
		ШтрихкодыМаркируемойПродукции, ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеИзвестнойПродукции);
	
КонецПроцедуры

// Дополняет данные штрихкодов специфичными данными, характерными для каждого вида продукции ИС.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ДополнитьДанныеШтрихкодовСпецификойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт

	Если ДанныеПоШтрихкодам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = ДанныеПоШтрихкодам.ВидыПродукции;
		
	Если ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ВидыПродукции) Тогда
		МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
		МодульШтрихкодированиеМОТП.ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Дополняет строки таблицы "ДанныеКодовМаркировок" данными строк дерева упаковок.
// 
// Параметры:
//  ДанныеКодовМаркировок - ТаблицаЗначений - (См. ИнициализацияТаблицыДанныеКодовМаркировок).
//  ДеревоУпаковок - ДеревоЗначний - Иерархния кодов маркировок.
Процедура ШтрихкодированиеИС_ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировок, ДеревоУпаковок)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ШтрихкодированиеИС_ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(ДанныеКодовМаркировок, СтрокаДерева);
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(СтрокаДерева.Штрихкод, "КодМаркировки");
		Если НайденнаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеКодовМаркировок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.КодМаркировки = СтрокаДерева.Штрихкод;
		НоваяСтрока.EAN                 = ШтрихкодированиеИС_EANИзКодаМаркировки(НоваяСтрока.КодМаркировки);
		НоваяСтрока.GTIN                = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоШтрихкодуEAN(НоваяСтрока.EAN);
		НоваяСтрока.ЭтоКодВводаОстатков = ШтрихкодированиеИС_ЭтоШтрихкодВводаОстатков(НоваяСтрока.EAN);
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда 
			НоваяСтрока.МаркируемаяПродукция = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет является ли штрихкод кодом ввода остатков.
// 
// Параметры:
//  Штрихкод - Строка - штрихкод в формате EAN, GTIN или код маркировки.
// Возвращаемое значение:
//  Булево - Истина, если штрихкод является штрихкодов ввода остатков.
Функция ШтрихкодированиеИС_ЭтоШтрихкодВводаОстатков(Штрихкод) Экспорт
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЭтоШтрихкодВводаОстатков(Штрихкод);
	
КонецФункции

// Вычисляет штрихкод формата EAN по коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка, Неопределено - Если штрихкод EAN удалось вычислить - возвращается штрихкод EAN, если нет - Неопределено.
Функция ШтрихкодированиеИС_EANИзКодаМаркировки(КодМаркировки)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоставКодаМаркировкиМОТП = ШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
	СоставКодаМаркировкиИСМП = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_СоставКодаМаркировки(КодМаркировки);
	
	Если СоставКодаМаркировкиМОТП <> Неопределено Тогда
		GTIN = СоставКодаМаркировкиМОТП.GTIN;
	ИначеЕсли СоставКодаМаркировкиИСМП <> Неопределено Тогда
		GTIN = СоставКодаМаркировкиИСМП.GTIN;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ШтрихкодEAN = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(GTIN);
	Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
		Возврат ШтрихкодEAN;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет штрихкод EAN по коду маркировки.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Неопределено, Строка - Неопределено, если вычислить штрихкод EAN не удалось.
Функция ШтрихкодированиеИС_EANПоКодуМаркировки(Знач КодМаркировки) Экспорт
	
	ШтрихкодGTIN = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоКодуМаркировки(КодМаркировки);
	
	Возврат ШтрихкодированиеИС_ШтрихкодEANИзGTIN(ШтрихкодGTIN);
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодированиеИС_ШтрихкодEANИзGTIN(Знач GTIN) Экспорт
	
	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

// Дополняет структуру "Данные по штрихкодам" информацией по неизвестным упаковкам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодированиеИС_ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		ШтрихкодированиеМОТП.ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные по маркируемой продукции, информации о которой нет в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестнойМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыМаркируемойПродукции = ДанныеПоШтрихкодам.МаркируемаяПродукция;
	Если ШтрихкодыМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеШтрихкоды = Новый Массив;
	ШтрихкодыКОбработке   = Новый Массив;
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		ОбработанныеШтрихкоды.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ШтрихкодыКОбработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДанныеПоШтрихкодам.МаркируемаяПродукция, ОбработанныеШтрихкоды);
	
	ДанныеНеизвестнойПродукции = ШтрихкодированиеИС_ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(
		ШтрихкодыКОбработке, ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции, ПараметрыСканирования, ДанныеПоШтрихкодам.ТекстОшибки);
	ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииДаннымиПула(ДанныеНеизвестнойПродукции, ДанныеПоШтрихкодам.ДанныеКодовМаркировок);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ДанныеНеизвестнойПродукции);
	
	Если Не ПустаяСтрока(ДанныеПоШтрихкодам.ТекстОшибки) Тогда
		ДанныеПоШтрихкодам.ЕстьОшибки = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получает данные по штрихкодам(кодам маркировок), информация о которых есть в ИБ.
//
// Параметры:
//  ШтрихкодыКОбработке - Массив -  коллекция известных штрихкодов.
//  СоответствиеШтрихкодаВидуПродукции - Соответствие - Ключ - штрихкод, значение - вид продукции ИС.
// Возвращаемое значение:
//  Соответствие - значение кода маркировки, значение - сформированные данные кода маркировки.
Функция ШтрихкодированиеИС_ДанныеИзвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	
	ТипыУпаковок = Новый Массив;
	ТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	ТаблицаШтрихкодовУпаковок = ШтрихкодированиеИС_ДанныеШтрихкодовУпаковок(ШтрихкодыКОбработке, ТипыУпаковок);
	
	ОбработанныеШтрихкоды = Новый Массив;
	Для Каждого Строка Из ТаблицаШтрихкодовУпаковок Цикл
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода();
		ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Строка);
		ДанныеШтрихкода.Штрихкод = Строка.Штрихкод;
		
		Если ЗначениеЗаполнено(Строка.ВидПродукции) Тогда
			ВидПродукции = Строка.ВидПродукции;
		Иначе
			ВидПродукции = СоответствиеШтрихкодаВидуПродукции.Получить(Строка.Штрихкод);
		КонецЕсли;
		
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
		ДанныеМаркируемойПродукции.Вставить(Строка.Штрихкод, ДанныеШтрихкода);
		ОбработанныеШтрихкоды.Добавить(Строка.Штрихкод);
	КонецЦикла;
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

// Формирует данные штрихкодов упаковок.
//
// Параметры:
//  СписокЗначенийШтрихкодов - Массив Из Строка - Массив значений штрихкодов
//  ТипыУпаковок - Массив ПеречислениеСсылка.ТипыУпаковок - Коллекция типов упаковок, по которым будет установлено 
//                                                          условие для формирования запроса.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Данные штрихкодов упаковок.
//   * Штрихкод - Строка - Значение штрихкода.
//   * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   * ДатаУпаковки - Дата - Дата формирования упаковки.
//   * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - Тип упаковки.
//   * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//   * Упаковка - ОпределяемыйТип.Упаковка - Единица измерения.
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
//   * МаркируемаяПродукция - Булево - Истина, если продкция подлежит маркированию.
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции номенклатуры.
Функция ШтрихкодированиеИС_ДанныеШтрихкодовУпаковок(СписокЗначенийШтрихкодов, ТипыУпаковок = Неопределено)
	
	ШтрихкодыУпаковок =  ШтрихкодированиеИС_ШтрихкодыУпаковок(СписокЗначенийШтрихкодов).ВыгрузитьКолонку("Ссылка");
	СписокЗапросов = Новый СписокЗначений;

	ТекстЗапросаДанныеШтрихкодовУпаковок =
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
		|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия
		|ПОМЕСТИТЬ ШтрихкодыУпаковокТоваров
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&ШтрихкодыУпаковок)
		|	И &УсловиеПоТипамУпаковок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.ДатаУпаковки) КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.Штрихкод               КАК Штрихкод
		|ПОМЕСТИТЬ МаксимальныеДатыУпаковки
		|ИЗ
		|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&ШтрихкодыУпаковок)
		|
		|СГРУППИРОВАТЬ ПО
		|	ШтрихкодыУпаковокТоваров.Штрихкод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Штрихкод          КАК Штрихкод,
		|	ШтрихкодыУпаковокТоваров.Ссылка            КАК ШтрихкодУпаковки,
		|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
		|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
		|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыУпаковки КАК МаксимальныеДатыУпаковки
		|		ПО ШтрихкодыУпаковокТоваров.Штрихкод = МаксимальныеДатыУпаковки.Штрихкод
		|			И ШтрихкодыУпаковокТоваров.ДатаУпаковки = МаксимальныеДатыУпаковки.ДатаУпаковки
		|";

	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		ТекстЗапросаДанныеШтрихкодовУпаковок = СтрЗаменить(
			ТекстЗапросаДанныеШтрихкодовУпаковок,
			"&УсловиеПоТипамУпаковок",
			"ШтрихкодыУпаковокТоваров.ТипУпаковки В(&ТипыУпаковок)");
	КонецЕсли;
	
	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	
	СписокЗапросов.Добавить(ШтрихкодированиеИС_ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());

	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
		|	ДанныеШтрихкодовУпаковок.ДатаУпаковки             КАК ДатаУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки              КАК ТипУпаковки,
		|	ДанныеШтрихкодовУпаковок.ТипШтрихкода             КАК ТипШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Упаковка                 КАК Упаковка,
		|	ДанныеШтрихкодовУпаковок.Серия                    КАК Серия,
		|	СвойстваМаркируемойПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
		|	СвойстваМаркируемойПродукции.ВидПродукции         КАК ВидПродукции
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура",
		"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ТипыУпаковок) Тогда
		Запрос.УстановитьПараметр("ТипыУпаковок", ТипыУпаковок);
	Иначе
		Запрос.УстановитьПараметр("УсловиеПоТипамУпаковок", Истина);
	КонецЕсли;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Результат = ИнтеграцияИС_ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Возврат Результат["ШтрихкодыУпаковок"];
	
КонецФункции

// Выполняет попытку сформировать данные по неизвестному штрихкоду. По некоторым видам продукции выполняет обращение в
// сервис Государственной учетной системы для получения данных.
//
// Параметры:
//  ШтрихкодыКОбработке - Массив - коллекция неизвестных штрихкодов.
//  СоответствиеШтрихкодаВидуПродукции - Соответствие - Ключ - штрихкод, значение - вид продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ТекстОшибки - Строка - Описание ошибки.
// Возвращаемое значение:
//  Соответствие - Ключ - значение кода маркировки, значение - сформированные данные кода маркировки.
Функция ШтрихкодированиеИС_ДанныеНеизвестнойМаркируемойПродукцииПоШтрихкодам(ШтрихкодыКОбработке, СоответствиеШтрихкодаВидуПродукции, ПараметрыСканирования, ТекстОшибки)
	
	ДанныеНеизвестнойПродукции                  = Новый Соответствие;
	НеобработанныеШтрихкодыТабачнойПродукции    = Новый Массив;
	
	Для Каждого Штрихкод Из ШтрихкодыКОбработке Цикл
		
		Если (СоответствиеШтрихкодаВидуПродукции[Штрихкод] = Перечисления.ВидыПродукцииИС.Табачная) Тогда 
			НеобработанныеШтрихкодыТабачнойПродукции.Добавить(Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ШтрихкодированиеИС_ПрисутствуетТабачнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
			
			ДанныеНеизвестнойТабачнойПродукции = ШтрихкодированиеМОТП.ДанныеНеизвестнойМаркируемойПродукции(
				НеобработанныеШтрихкодыТабачнойПродукции, ПараметрыСканирования, ТекстОшибки);
		
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеНеизвестнойПродукции, ДанныеНеизвестнойТабачнойПродукции);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойПродукции;
	
КонецФункции

ПРоцедура ШтрихкодированиеИС_ЗаполнитьДанныеНеизвестнойМаркируемойПродукцииДаннымиПула(ДанныеНеизвестнойПродукции, ДанныеКодовМаркировок)
	
	Для Каждого КлючЗначение Из ДанныеНеизвестнойПродукции Цикл
		
		КодМаркировки        = КлючЗначение.Ключ;
		ДанныеКодаМаркировки = КлючЗначение.Значение;
		
		НайденнаяСтрока = ДанныеКодовМаркировок.Найти(КодМаркировки, "КодМаркировки");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКодаМаркировки.Номенклатура)
			И НайденнаяСтрока.ЭтоКодВводаОстатков Тогда
			
			ДанныеКодаМаркировки.Номенклатура   = НайденнаяСтрока.Номенклатура;
			ДанныеКодаМаркировки.Характеристика = НайденнаяСтрока.Характеристика;
			ДанныеКодаМаркировки.Серия          = ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
			
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ШтрихкодированиеИС_СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные штрихкодов необработаными кодами маркировки.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДанныеНеобработанныхШтрихкодов(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодыНеизвестныхУпаковок = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
	
	НеобработанныеШтрихкоды = Новый Соответствие;
	Для Каждого Штрихкод Из ШтрихкодыНеизвестныхУпаковок Цикл
		
		Если ДанныеПоШтрихкодам.ОбработанныеШтрихкоды.Получить(Штрихкод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеобработанныеШтрихкоды[Штрихкод] <> Неопределено Тогда
			НеобработанныеШтрихкоды[Штрихкод].Количество = НеобработанныеШтрихкоды[Штрихкод].Количество + 1;
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
		ДанныеШтрихкода.Штрихкод   = Штрихкод;
		ДанныеШтрихкода.Количество = 1;
		
		НеобработанныеШтрихкоды.Вставить(Штрихкод, ДанныеШтрихкода); 
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ДанныеПоШтрихкодам.НеобработанныеШтрихкоды, НеобработанныеШтрихкоды, Истина);
	
КонецПроцедуры

// Приводит данные по штрихкодам в соответствие данным ранее указанными пользователем.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДаныеПоШтрихкодамНаОснованииСохраненногоВыбора(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСохраненногоВыбора = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не ЗначениеЗаполнено(ДанныеСохраненногоВыбора.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбработанныеШтрихкодыКлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = ОбработанныеШтрихкодыКлючЗначение.Значение;
		
		Если ДанныеСохраненногоВыбора.Номенклатура = ДанныеШтрихкода.Номенклатура
			И ДанныеСохраненногоВыбора.Характеристика = ДанныеШтрихкода.Характеристика Тогда
			
			ИзмененныеСвойства = Новый Массив;
			ШтрихкодированиеИС_ЗаполнитьДанныеСохраненнымВыбором(ДанныеШтрихкода, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ШтрихкодированиеИС_ОбновитьЭлементШтрихкодовУпаковок(ДанныеШтрихкода, ИзмененныеСвойства);
			
		ИначеЕсли ДанныеСохраненногоВыбора.ЭтоКодВводаОстатков Тогда
			
			GTINКодаМаркировки = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоКодуМаркировки(ДанныеШтрихкода.Штрихкод);
			Если GTINКодаМаркировки = ДанныеСохраненногоВыбора.GTIN Тогда
				ИзмененныеСвойства = Новый Массив;
				ШтрихкодированиеИС_ЗаполнитьДанныеСохраненнымВыбором(ДанныеШтрихкода, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
				ШтрихкодированиеИС_ОбновитьСоздатьШтрихкодУпаковкиДанныхШтрихкода(ДанныеШтрихкода, ИзмененныеСвойства);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		Для Каждого СтрокаТаблицы Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			ИзмененныеСвойства = Новый Массив;
			ШтрихкодированиеИС_ЗаполнитьДанныеСохраненнымВыбором(СтрокаТаблицы, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ШтрихкодированиеИС_ЗаполнитьДанныеСохраненнымВыбором(СтрокаТаблицы.СтрокаДерева, ДанныеСохраненногоВыбора, ИзмененныеСвойства);
			ИзмененныеСвойства = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИзмененныеСвойства);
			ШтрихкодированиеИС_ОбновитьЭлементШтрихкодовУпаковок(СтрокаТаблицы.ШтрихкодУпаковки, ИзмененныеСвойства);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет данные штрихкода по документу основанию.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ЗаполнитьДаныеПоШтрихкодамПоДокументуОснованию(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ШтрихкодированиеИС_СформироватьДанныеДокументаОснования(ПараметрыСканирования);
	Если Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДокументаОснования = ПолучитьИзВременногоХранилища(ПараметрыСканирования.АдресДанныхДокументаОснования);
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;
		Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика",
			ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.Характеристика);
		
		НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки <> Неопределено
			И НайденныеСтроки.Количество() = 1
			И ЗначениеЗаполнено(НайденныеСтроки[0].Серия)
			И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
			
			ДанныеШтрихкода.Серия = НайденныеСтроки[0].Серия;
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
				Блокировка.Заблокировать();
				
				ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
				ШтрихкодУпаковкиОбъект.Серия = ДанныеШтрихкода.Серия;
				ШтрихкодУпаковкиОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии';
													|en = 'ИС МП: Обработка выбора серии'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				
				ВызватьИсключение ПодробноеПредставлениеОшибки;
				
			КонецПопытки;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает дерево упаковок во временное хранилище. Адрес дерева упаковок помещает в каждые данные обработанных штрихкодов.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ШтрихкодированиеИС_ПоместитьДеревоУпаковокВоВременноеХранилище(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ПараметрыСканирования.ИдентификаторФормы;
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, Идентификатор);
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;

		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеШтрихкода.АдресДереваУпаковок = АдресДереваУпаковок;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу значений данных по штрихкодам EAN.
//
// Параметры:
//  ШтрихкодыEAN - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//   * Номенклатура - ОпределяемыеТипы.Номенклатура - Номенклатура.
//   * Характеристика - ОпределяемыеТипы.ХарактеристикаНоменклатуры - Характеристика.
//   * ЗначениеШтрихкодаEAN - Строка - Штрихкод.
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры.
//   * ВидПродукции -ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//   * МаркируемаяПродукция - Булево - Истина, если продукция является маркируемая.
Функция ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(ШтрихкодыEAN) Экспорт
	
	ДанныеПоШтрихкодамEAN = Новый ТаблицаЗначений;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ШтрихкодEAN",               Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ВидПродукции",              Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("МаркируемаяПродукция",      Новый ОписаниеТипов("Булево"));
	
	ПолучатьИнформациюПоШтрихкодам = Ложь;
	Для Каждого ШтрихкодEAN Из ШтрихкодыEAN Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		НоваяСтрока.ШтрихкодEAN = ШтрихкодEAN;
		ПолучатьИнформациюПоШтрихкодам = Истина;
		
	КонецЦикла;
	
	Если ПолучатьИнформациюПоШтрихкодам Тогда
		
		ШтрихкодированиеИСПереопределяемый_ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN);
		
		ИндексСтроки = ДанныеПоШтрихкодамEAN.Количество()-1;
		Пока ИндексСтроки >= 0 Цикл
		
			ДанныеСтроки = ДанныеПоШтрихкодамEAN[ИндексСтроки];
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				ДанныеПоШтрихкодамEAN.Удалить(ДанныеСтроки);
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN;
	
КонецФункции

// Выполняет проверку Данных штрихкода на то, что уже данные обработаны.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если данные штрихкода не требует повторной обработки.
Функция ШтрихкодированиеИС_ДанныеПоШтрихкодуУжеПолучены(ДанныеШтрихкода, ПараметрыСканирования)
	
	ДанныеШтрихкодаСоответствуютФормату = Истина;
	
	ДанныеШтрихкодаЭталон = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	Для Каждого КлючЗначение Из ДанныеШтрихкодаЭталон Цикл
		
		Если Не ДанныеШтрихкода.Свойство(КлючЗначение.Ключ) Тогда
			ДанныеШтрихкодаСоответствуютФормату = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеШтрихкодаСоответствуютФормату;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется обработать неизвестный код маркировки ввода остатков.
//
// Параметры:
//  НеизвестныеШтрихкодыEAN - Массив - Коллекция штрихкодов EAN, информация по которым отсутствует.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	РезультатОбработки = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
	
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если Не СтрокаДанных.ЭтоКодВводаОстатков Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОбработки.Штрихкод = СтрокаДанных.КодМаркировки;
		РезультатОбработки.ТребуетсяВыборНоменклатуры = Истина;
		
		// Расчитываем, так как в таблице штрихкод ввода остатков заменен на штрихкод номенклатуры.
		GTINВводаОстатков = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_GTINПоКодуМаркировки(СтрокаДанных.КодМаркировки);
		
		ПараметрыВыбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыВыбора.КодМаркировки          = СтрокаДанных.КодМаркировки;
		ПараметрыВыбора.ПараметрыУказанияСерий = ОбщегоНазначения_СкопироватьРекурсивно(ПараметрыСканирования.ПараметрыУказанияСерий);
		ПараметрыВыбора.Склад                  = ПараметрыСканирования.Склад;
		ПараметрыВыбора.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыВыбора.ШтрихкодEAN            = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодEANИзGTIN(GTINВводаОстатков);
		РезультатОбработки.ПараметрыУточненияДанных = ПараметрыВыбора;
		
	КонецЦикла;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет обработку данных по штрихкодам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма объекта.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ШтрихкодИКоличество - Структура - Описание:
//   * Штрихкод - Строка - Значение штрихкода.
//   * Количество - Число - количество штрихкодов с одним значением.
//  ЕстьОшибки - Булево - Истина, если есть ошибки в данных по штрихкодам.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_ОбработатьДанныеПоШтрихкодам(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования, ШтрихкодИКоличество, ЕстьОшибки)
	
	ДанныеШтрихкода    = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды[ШтрихкодИКоличество.Штрихкод];
	ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
	
	РезультатОбработки = Неопределено;
	
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(
			ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрихкодИКоличество, ПараметрыСканирования);
	
	ИначеЕсли ДанныеПоШтрихкодам.ЕстьКодыМаркировкиВводаОстатков И (ДанныеШтрихкода = Неопределено Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)) Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиТребуетсяОбработатьКодМаркировкиВводаОстатков(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ИначеЕсли ЕстьОшибки Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиШтрихкодаПриОшибках(
			ДанныеПоШтрихкодам, ДанныеШтрихкода, ПараметрыСканирования, Форма.УникальныйИдентификатор);
	
	ИначеЕсли ДанныеШтрихкода = Неопределено Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиДанныеПоКодуМаркировкиНеНайдены(
			Форма, ДанныеПоШтрихкодам, ШтрихкодИКоличество, ПараметрыСканирования);
		
	ИначеЕсли ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
			И ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Количество() > 0 Тогда
			
			РезультатОбработки = ШтрихкодированиеИС_РезультатТребуетсяУточнениеНоменклатуры(Форма, ДанныеПоШтрихкодам, ПараметрыСканирования);
			
		Иначе
			
			РезультатОбработки = ШтрихкодированиеИС_РезультатОбработкиШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
	
	ИначеЕсли ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		РезультатОбработки = ШтрихкодированиеИС_ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Формирует результат обработки штрихкодов для случая, когда требуется сопоставление номенклатуры штрихкодам.
//
// Параметры:
//  НеизвестныеШтрихкодыEAN - Массив - Коллекция штрихкодов EAN, информация по которым отсутствует.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(НеизвестныеШтрихкодыEAN, ШтрихкодИКоличество, ПараметрыСканирования) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) Тогда
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		КэшМаркируемойПродукции.ОтложенныеКодыМаркировки.Добавить(ШтрихкодИКоличество.Штрихкод);
		
		ДанныеДляСопоставленияНоменклатуры = Новый Структура;
		ДанныеДляСопоставленияНоменклатуры.Вставить("ИсходныеДанные", ШтрихкодИКоличество);
		ДанныеДляСопоставленияНоменклатуры.Вставить("ШтрихкодыКСопоставлению", Новый Массив);
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Операция = "СопоставлениеНоменклатуры";
		
		Для Каждого Штрихкод Из НеизвестныеШтрихкодыEAN Цикл
			ДанныеДляСопоставленияНоменклатуры.ШтрихкодыКСопоставлению.Добавить(Новый Структура("Штрихкод, Количество", Штрихкод, 1));
		КонецЦикла;
		
		КэшМаркируемойПродукции.ДанныеДляУточненияСведенийПользователя.Данные = ДанныеДляСопоставленияНоменклатуры;
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
	НеизвестныеШтрихкодыEANДляОбработки = Новый Массив;
	
	Для Каждого Элемент Из НеизвестныеШтрихкодыEAN Цикл
		
		РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры = Истина;
		НеизвестныеШтрихкодыEANДляОбработки.Добавить(Новый Структура("Штрихкод, Количество", Элемент, 1));
		
	КонецЦикла;
	
	РезультатОбработки.ШтрихкодыПродукцииДляСопоставления = НеизвестныеШтрихкодыEANДляОбработки;
	РезультатОбработки.Штрихкод = Штрихкод;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Выполняет действие после уточнения информации у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкоды.
//  Действие - Строка - Идентификатор необходимого действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  Структура, Неопределено - Результат выполнения действия.
Функция ШтрихкодированиеИС_ВыполнитьДействие(Форма, Действие, Параметры) Экспорт
	
	Если Действие = "ОбработатьУточнениеДанных" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ШтрихкодированиеИС_ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	ВидыПродукции = Параметры.РезультатОбработкиШтрихкода.ВидыПродукции;
	
	Если ШтрихкодированиеИС_ЕстьТабачнаяПродукцияВКоллекции(ВидыПродукции) Тогда
		РезультатВыполнения = ШтрихкодированиеМОТП.ВыполнитьДействие(Форма, Действие, Параметры);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет обработку данных, которые уточнил пользователь в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_ОбработатьУточнениеДанных(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС_ПараметрыСканирования(Форма);
	
	Если ЭтоАдресВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода) Тогда
		ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	Иначе
		ДанныеШтрихкода = ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода(ПараметрыСканирования);
	КонецЕсли;
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидыПродукции.Количество() = 0 Тогда
		ВидПродукции = ИнтеграцияИСМП_ВидПродукцииПоНоменклатуре(Номенклатура);
		ДанныеШтрихкода.ВидыПродукции.Добавить(ВидПродукции);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Штрихкод) И ЗначениеЗаполнено(РезультатОбработки.Штрихкод) Тогда
		ДанныеШтрихкода.Штрихкод = РезультатОбработки.Штрихкод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
			ШтрихкодУпаковкиОбъект.Номенклатура   = Номенклатура;
			ШтрихкодУпаковкиОбъект.Характеристика = Характеристика;
			ШтрихкодУпаковкиОбъект.Серия          = Серия;
			ШтрихкодУпаковкиОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии';
												|en = 'ИС МП: Обработка выбора серии'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	ИначеЕсли ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		
		ДанныеШтрихкода.ШтрихкодУпаковки = ШтрихкодированиеИС_СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода);
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТипУпаковки) Тогда
		ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС_ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Создает элемент справочника штрихкоды упаковок на основании данных штрихкода.
//
// Параметры:
//  ДанныеШтрихкода - (См. ИнициализироватьДанныеШтрихкода)
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на созданный элемент справочника.
Функция ШтрихкодированиеИС_СоздатьМаркированныйТоварПоДаннымШтрихкода(ДанныеШтрихкода) Экспорт
	
	ВидПродукцииПоШтрихкоду = ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуМаркировки(ДанныеШтрихкода.Штрихкод);
	Если ДанныеШтрихкода.ВидыПродукции.Найти(ВидПродукцииПоШтрихкоду) = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		Возврат Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеШтрихкода);
	
	ДанныеНовойУпаковки.Штрихкод    = ДанныеШтрихкода.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество  = 1;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

// Определяет вид продукции ИС по значению штрихкода.
//
// Параметры:
//  ЗначениеШтрихкода - Строка - Штрихкод.
//  УчитыватьЛогистическуюУпаковку - Булево - Истина, если включать проверку для логистической упаковки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид продукции ИС, определенный по значению штрихкода.
Функция ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуМаркировки(Штрихкод, УчитыватьЛогистическуюУпаковку = Ложь)
	
	ВидПродукцииИС = Неопределено;
	
	//ПодсистемаИСМПСуществует  = ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		И ШтрихкодированиеМОТП.ЭтоШтрихкодТабачнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку) Тогда
		
		ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табачная;
	КонецЕсли;
	
	Возврат ВидПродукцииИС;
	
КонецФункции

// Возвращает вид продукции ИС по штрихкоду EAN
// 
// Параметры:
//  Штрихкод - Строка - Штрихкода EAN
// Возвращаемое значение:
//  Неопределено, ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС
Функция ШтрихкодированиеИС_ВидПродукцииИСПоШтрихкодуНоменклатуры(Штрихкод)
	
	ШтрихкодыEAN = Новый Массив;
	ШтрихкодыEAN.Добавить(Штрихкод);
	
	ДанныеПоШтрихкодамEAN = ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
	Если ДанныеПоШтрихкодамEAN.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодамEAN[0].ВидПродукции;
	
КонецФункции

// Проверяет значения массива ВидыПродукции на вхождение допустимых видов продукции параметров сканирования.
//
// Параметры:
//  ВидыПродукции - Массив - Коллекция видов продукции ИС.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если каждый элемент массива ВидыПродукции присутствует в допустимых видах продукции.
Функция ШтрихкодированиеИС_ВидыПродукцииПоддерживаются(ВидыПродукции, ПараметрыСканирования) Экспорт
	
	ВидыПродукцииПоддерживаются = Истина;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		
		Если Не ЗначениеЗаполнено(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
			ВидыПродукцииПоддерживаются = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыПродукцииПоддерживаются;
	
КонецФункции

// Передает управление обработки данных штрихкодов в модуль менеджера объекта или модуль общей формы.
// Выполняет кэширование данных штрихкодов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ДанныеШтрихкода
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИС_ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма") Тогда
		РезультатОбработки = Неопределено;
		ШтрихкодированиеИСПереопределяемый_ОбработатьДанныеШтрихкодаДляОбщейФормы(
			Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки);
	Иначе
		МодульДляОбработки = ИнтеграцияИС_МенеджерОбъектаПоСсылке(Форма.Объект.Ссылка);
		РезультатОбработки = МодульДляОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	КонецЕсли;
	
	ДеревоУпаковок = Неопределено;
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;
	
	ШтрихкодированиеИС_ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
	Форма.Модифицированность = Истина;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Кэширует данные обработанных штрихкодов путем помещения их в хранилище значений.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется закэшировать обработанные штрихкоды.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  РезультатДобавления - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов).
Процедура ШтрихкодированиеИС_ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатДобавления, ДеревоУпаковок = Неопределено) Экспорт
	
	Если РезультатДобавления = Неопределено
		Или Не ЭтоАдресВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции) 
		Или ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
		
		Если РезультатДобавления.ЕстьОшибкиВДеревеУпаковок Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ШтрихкодированиеИС_ПоместитьДанныеСтрокДереваВСоответствие(ДеревоУпаковок.Строки, ОбработанныеКодыМаркировки);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	Иначе
		
		Если ЗначениеЗаполнено(РезультатДобавления.ТекстОшибки) Или ДанныеШтрихкода.Штрихкод = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		КэшМаркируемойПродукции = ПолучитьИзВременногоХранилища(ПараметрыСканирования.КэшМаркируемойПродукции);
		ОбработанныеКодыМаркировки = КэшМаркируемойПродукции.ОбработанныеКодыМаркировки;
		
		ОбработанныеКодыМаркировки.Вставить(ДанныеШтрихкода.Штрихкод, ДанныеШтрихкода);
		ПоместитьВоВременноеХранилище(КэшМаркируемойПродукции, ПараметрыСканирования.КэшМаркируемойПродукции);
		
	КонецЕсли;

КонецПроцедуры

// Формирует соответствие, ключ которого - строка дерева, значение - структура, свойства и значения которой равны
// строке дерева.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева.
//  Соответствие - Соответствие - Ключ - строка дерева, значение - структура значений строки дерева.
Процедура ШтрихкодированиеИС_ПоместитьДанныеСтрокДереваВСоответствие(СтрокиДерева, Соответствие)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДерева);
		Соответствие.Вставить(СтрокаДерева.Штрихкод, ДанныеШтрихкода);
		ШтрихкодированиеИС_ПоместитьДанныеСтрокДереваВСоответствие(СтрокаДерева.Строки, Соответствие);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСМПСлужебный
// Обрабатывает выбор серии.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой необходимо обработать штрихкод.
//  РезультатВыбора - Структура, ОпределяемыйТип.СерияНоменклатуры - результат выбора серии пользователем.
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - кэшированные значения формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ШтрихкодированиеИСМПСлужебный_ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработки, КэшированныеЗначения) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИС_ПараметрыСканирования(Форма);
	
	ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	
	Номенклатура   = РезультатВыбора.ДанныеВыбора.Номенклатура;
	Характеристика = РезультатВыбора.ДанныеВыбора.Характеристика;
	Серия = РезультатВыбора.ДанныеВыбора.Серия;
	ДанныеШтрихкода.ДополнительныеПараметры = РезультатВыбора;
	
	ДанныеШтрихкода.Номенклатура   = Номенклатура;
	ДанныеШтрихкода.Характеристика = Характеристика;
	ДанныеШтрихкода.Серия          = Серия;
	
	Если ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции Тогда
		ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСМПКлиентСервер_ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеШтрихкода.ШтрихкодУпаковки);
			Блокировка.Заблокировать();
			
			ШтрихкодУпаковкиОбъект = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
			ШтрихкодУпаковкиОбъект.Номенклатура   = Номенклатура;
			ШтрихкодУпаковкиОбъект.Характеристика = Характеристика;
			ШтрихкодУпаковкиОбъект.Серия          = Серия;
			ШтрихкодУпаковкиОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытияЖурналРегистрации = НСтр("ru = 'ИС МП: Обработка выбора серии';
												|en = 'ИС МП: Обработка выбора серии'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, Форма.УникальныйИдентификатор);
	
	ТипУпаковки = РезультатОбработки.ТипУпаковки;
	
	ВложенныеШтрихкоды = Неопределено;
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ТипУпаковки) Тогда
		ВложенныеШтрихкоды = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
	КонецЕсли;
	
	РезультатОбработки = ШтрихкодированиеИС_ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Заполняет значение ШтрихкодыПродукцииДляСопоставления структуры ДанныхПоШтрихкодам штрихкодами EAN, которые не найдены
// в ИБ.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Процедура ШтрихкодированиеИСМПСлужебный_ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам) Экспорт
	
	МассивШтрихкодовEAN = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если Не СтрокаДанных.МаркируемаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииШтрихкода = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Получить(СтрокаДанных.КодМаркировки);
			
	КонецЦикла;
	
	СуществующиеШтрихкодыВРегистре = ШтрихкодированиеИС_СуществующиеВРегистреШтрихкодыEAN(МассивШтрихкодовEAN);
	ШтрикходыДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивШтрихкодовEAN, СуществующиеШтрихкодыВРегистре);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрикходыДляСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИС

// Возвращает признак вхождения переданного объекта метаданных в переданную подсистему
//
// Параметры:
//   ПолноеИмяИлиМетаданныеПодсистемы - Строка           - полное имя подсистемы с учетом родительских подсистем через "."
//                                    - ОбъектМетаданных - сама подсистема
//   ОбъектМетаданных                 - ОбъектМетаданных - объект метаданных для которого определяется принадлежность к подсистеме
//
// Возвращаемое значение:
//   Булево - признак вхождения объекта метаданных в подсистему
//
Функция ИнтеграцияИС_СодержитсяВПодсистеме(ПолноеИмяИлиМетаданныеПодсистемы, ОбъектМетаданных) Экспорт
	
	Если ТипЗнч(ПолноеИмяИлиМетаданныеПодсистемы) = Тип("Строка") Тогда
		
		ИменаПодсистем = СтрРазделить(ПолноеИмяИлиМетаданныеПодсистемы, ".");
		Если ИменаПодсистем.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МетаданныеПодсистемы = Метаданные;
		
		Для Каждого ИмяПодсистемы Из ИменаПодсистем Цикл
			МетаданныеПодсистемы = МетаданныеПодсистемы.Подсистемы[ИмяПодсистемы];
		КонецЦикла;
		
	Иначе
		
		МетаданныеПодсистемы = ПолноеИмяИлиМетаданныеПодсистемы;
		
	КонецЕсли;
	
	Если МетаданныеПодсистемы.Состав.Содержит(ОбъектМетаданных) Тогда
		Возврат Истина;
	КонецЕсли;

	Для Каждого ПодчиненнаяПодсистема Из МетаданныеПодсистемы.Подсистемы Цикл
		Если ИнтеграцияИС_СодержитсяВПодсистеме(ПодчиненнаяПодсистема, ОбъектМетаданных) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в объекте.
//
//Параметры:
//   ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//   Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ИнтеграцияИС_ПараметрыУказанияСерий(ТипОбъекта, Объект) Экспорт
	
	Параметры = Неопределено;
	ИнтеграцияИСПереопределяемый_ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект);
	Возврат Параметры;
	
КонецФункции

// Получает структуру настроек обмена через ЭДО, извлекая из константы НастройкиОбменаГосИС.
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Неопределено - Настройки обмена.
//
Функция ИнтеграцияИС_НастройкиОбменаГосИС() Экспорт
	
	ХранилищеЗначения = Неопределено;
	
	Если ХранилищеЗначения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиОбмена = ХранилищеЗначения.Получить();
	
	Возврат НастройкиОбмена;
	
КонецФункции

Функция ИнтеграцияИС_ДатаИзСтрокиUNIX(Значение, Делитель = 1000) Экспорт
	
	Возврат МестноеВремя('19700101' + Цел(Значение / Делитель));
	
КонецФункции

Функция ИнтеграцияИС_ХарактеристикиИспользуются() Экспорт
	
	Используются = Ложь;
	ИнтеграцияИСПереопределяемый_ИспользованиеХарактеристик(Используются, Неопределено);
	Возврат Используются;
	
КонецФункции

Функция ИнтеграцияИС_СерииИспользуются() Экспорт
	
	Используются = Ложь;
	ИнтеграцияИСПереопределяемый_ИспользованиеСерий(Используются, Неопределено);
	Возврат Используются;
	
КонецФункции

// Возвращает поля поиска номенклутары (и характеристикик) анализируя признак использования серий.
// 
// Параметры:
// 	ИспользоватьСерии - Булево - Признак использования серий.
// Возвращаемое значение:
// 	Структура - Описание:
// * Серия - ОпределяемыйТип.СерияНоменклатуры - Пустое значение серии.
// * Характеристика  - ОпределяемыйТип.Характеристика - Пустое значение характеристики.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Пустоне значение номенклатуры.
//
Функция ИнтеграцияИС_ПоляДляПоискаМаркируемойПродукции(ИспользоватьСерии=Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",   ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Результат.Вставить("Характеристика", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));

	Если ИспользоватьСерии Тогда
		Результат.Вставить("Серия", ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает значение по умолчанию переданного определяемого типа.
//
Функция ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа(ИмяТипа) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.ПривестиЗначение();
	
КонецФункции

// Рассчитать хеш для строки
// 
// Параметры:
//  СтрокаДляРасчетаХеша - Строка - Строка для расчета хеша
// Возвращаемое значение:
//  Строка - Описание
Функция  ИнтеграцияИС_ХешированиеДанныхSHA256(СтрокаДляРасчетаХеша) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	
	Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
КонецФункции

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//  Запрос				 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса		 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  ВыгрузитьРезультат	 - Булево			 - Истина, если результат запроса нужно выгрузить в таблицы значений.
// 
// Возвращаемое значение:
//  Структура - структура в которую помещены полученные таблицы
//
Функция ИнтеграцияИС_ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ВыгрузитьРезультат = Ложь) Экспорт

	Таблицы = Новый Структура;
	
	МассивТекстаЗапроса = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстаЗапроса.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли;
		МассивТекстаЗапроса.Добавить(ТекстЗапроса.Значение);
		
		МассивТекстаЗапроса.Добавить(
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|");
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
	
	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	КоличествоЗапросовВПакете = 0;
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		
		Если СтрЧислоВхождений(ТекстЗапроса.Значение, ";") > 0 Тогда
			Подзапросы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапроса.Значение, ";");
			КоличествоПодзапросов = Подзапросы.Количество();
			ИндексЗапросаРезультате = Неопределено;
			Для Индекс = -(КоличествоПодзапросов - 1) По 0 Цикл
				Если Найти(Подзапросы[-Индекс], "#РезультатЗапроса#") > 0 Тогда
					ИндексЗапросаРезультате = -Индекс;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ИндексЗапросаРезультате = Неопределено Тогда
				ИндексЗапросаРезультате = КоличествоПодзапросов - 1;
			КонецЕсли;
		Иначе
			КоличествоПодзапросов = 1;
			ИндексЗапросаРезультате = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			РезультатТаблица = Результат[КоличествоЗапросовВПакете + ИндексЗапросаРезультате];
			РезультатТаблица = ?(ВыгрузитьРезультат, РезультатТаблица.Выгрузить(), РезультатТаблица);
			Таблицы.Вставить(ТекстЗапроса.Представление, РезультатТаблица);
		КонецЕсли;
		
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + КоличествоПодзапросов;
		
	КонецЦикла;
	
	Возврат Таблицы;
	
КонецФункции

// Создает ОбъектXDTO из пространства имен по имени свойства.
//
Функция ИнтеграцияИС_ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойства, ОбъектXDTOРодитель = Неопределено) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		ТипОбъекта = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(ИмяСвойства).Тип;
	Иначе
		ТипОбъекта = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства).Тип;
	КонецЕсли;
	
	Возврат ФабрикаXDTO.Создать(ТипОбъекта);
	
КонецФункции

// Возвращает менеджер (модуль менеджера или общий модуль) объекта по ссылке на объект.
// Ограничение: не обрабатываются точки маршрутов бизнес-процессов.
// См. также ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект, менеджер которого требуется получить.
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
// Пример:
//  МенеджерСправочника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОрганизацию);
//
Функция ИнтеграцияИС_МенеджерОбъектаПоСсылке(Ссылка) Экспорт
	
	МенеджерОбъекта = Неопределено;
	ИнтеграцияИСПереопределяемый_ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка);
	
	Если МенеджерОбъекта = Неопределено Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	КонецЕсли;
	
	Возврат МенеджерОбъекта;
	
КонецФункции

// Определяет ведение учета маркируемой продукции.
//
Функция ИнтеграцияИС_ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	
КонецФункции

// Возвращает количество строк в дереве значений с учетом их вложенности
// 
// Параметры:
//  ДеревоЗначений - ДеревоЗначений - Дерево значений, в котором требуется определить количество строк
// Возвращаемое значение:
//  Число - количество строк
// 	
Функция ИнтеграцияИС_КоличествоСтрокДереваЗначений(ДеревоЗначений) Экспорт
	
	СтрокиДерева    = ДеревоЗначений.Строки;
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для Каждого ПодчиненнаяСтрока Из СтрокиДерева Цикл
		КоличествоСтрок = КоличествоСтрок + ИнтеграцияИС_КоличествоСтрокДереваЗначений(ПодчиненнаяСтрока);
	КонецЦикла;
	
	Возврат КоличествоСтрок;
	
КонецФункции

// Возвращает текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//   ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//   ПараметрыУказанияСерий - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий).
//
// Возвращаемое значение:
//   Строка - Текст запроса заполнения статусов указания серий для товаров, указанных в объекте.
//
Функция ИнтеграцияИС_ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = "";
	ИнтеграцияИСПереопределяемый_ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(
		ТекстЗапроса,
		ТипОбъекта,
		ПараметрыУказанияСерий);
	Возврат ТекстЗапроса;
	
КонецФункции
#КонецОбласти

#Область ИнтеграцияИСПереопределяемый

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//  Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//                                                                                              собственную организацию или контрагента
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
Процедура ИнтеграцияИСПереопределяемый_ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         Организация);
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") И ТорговыйОбъект = Неопределено Тогда 
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.Склады") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Подразделение                         КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ТорговыйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")
		И ТипЗнч(ТорговыйОбъект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(&ТорговыйОбъект КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&Ссылка КАК Справочник.Организации)                  КАК Организация
		|ПОМЕСТИТЬ Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(Данные.Организация.ИНН, """") КАК ИНН,
		|	ВЫБОР
		|		КОГДА РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане ЕСТЬ NULL
		|			ТОГДА ЕСТЬNULL(Данные.Организация.КПП, """")
		|		ИНАЧЕ ЕСТЬNULL(РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП, """")
		|	КОНЕЦ КАК КПП
		|ИЗ
		|	Данные КАК Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО Данные.Подразделение = РегистрацииВНалоговомОргане.Подразделение
		|		И Данные.Организация = РегистрацииВНалоговомОргане.Организация
		|";
	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИнтеграцияИСПереопределяемый_ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Использование = Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить видимость команд.
Процедура ИнтеграцияИСПереопределяемый_НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы = "Товары") Экспорт
	
	//++ НЕ ГОСИС
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы);
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Если Форма.ИмяФормы <> "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		И Форма.ИмяФормы <> "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		
		Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				Префикс + "ВыгрузитьДанныеВТСД",
				"Видимость",
				Ложь);
		КонецЦикла;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//  Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                  НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//  ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//  Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
Процедура ИнтеграцияИСПереопределяемый_ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	Если ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		Параметры = ИнтеграцияИСМПУТ_ПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//  Использование - Булево - Признак использования серий (для номенклатуры или общий)
//  Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИнтеграцияИСПереопределяемый_ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Использование = Ложь;
	ИначеЕсли Номенклатура = Неопределено Тогда
		Использование = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Использование = Ложь;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВладелецСерий.ИспользоватьСерии
		|		КОГДА
		|			Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Номенклатура.ВидНоменклатуры.ИспользоватьСерии
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИспользованияСерий
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Использование = Ложь;
		Если Выборка.Следующий() Тогда
			Использование = Выборка.ПризнакИспользованияСерий;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ИнтеграцияИСПереопределяемый_ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	//++ НЕ ГОСИС
	МенеджерОбъекта = Неопределено;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ИнтеграцияИСПереопределяемый_ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ОфициальноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ОфициальноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ИнтеграцияИСПереопределяемый_ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	//++ НЕ ГОСИС
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)
	|");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет текст запроса заполнения статусов указания серий для товаров, указанных в документе.
//
// Параметры:
//  ТекстЗапроса           - Строка           - Текст запроса заполнения статусов указания серий.
//  ТипОбъекта             - ОбъектМетаданных - Тип документа коллекции объектов метаданных.
//  ПараметрыУказанияСерий - Структура        - Состав полей определен в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ИнтеграцияИСПереопределяемый_ЗаполнитьТекстЗапросаЗаполненияСтатусовУказанияСерий(ТекстЗапроса, ТипОбъекта, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ_ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИСМППереопределяемый

//Определяет использование актов о расхождении после приемки для документа
//
//Параметры:
//  Документ     - ДокументСсылка - документ, для которого необходимо определить возможность использования актов о расхождении.
//  Используется - Булево - в данный параметр необходимо установить признак использования актов, по умолчанию установлен в Ложь.
//
Процедура ИнтеграцияИСМППереопределяемый_ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ_ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используется);
	//-- НЕ ГОСИС
	
КонецПроцедуры

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//  (См. ИнтеграцияИСМП.СгенерироватьСерии)
//
Процедура ИнтеграцияИСМППереопределяемый_СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ_СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции);
	//-- НЕ ГОСИС
	
КонецПроцедуры

Процедура ИнтеграцияИСМППереопределяемый_ПриОпределенииСкладаДокументаОснования(Склад, ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияИСМПУТ_ОпределитьСкладДокументаОснования(Склад, ДокументОснование);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИСМПУТ

Процедура ИнтеграцияИСМПУТ_ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются) Экспорт
	
	Используются = Ложь;
	
КонецПроцедуры

Процедура ИнтеграцияИСМПУТ_СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ТаблицаДанныхДляГенерацииСерий = ИнтеграцияИСМПУТ_ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции);
	
	Для Каждого ЭлементМассива Из ДанныеДляГенерации Цикл
		НоваяСтрока = ТаблицаДанныхДляГенерацииСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				
		Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.Серия = ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ";
	
	Для Каждого Колонка Из ТаблицаДанныхДляГенерацииСерий.Колонки Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|Таблица." + Колонка.Имя + " КАК " + Колонка.Имя + ",";
	КонецЦикла;
	
	ТекстЗапроса = Сред(ТекстЗапроса, 1, СтрДлина(ТекстЗапроса) - 1);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ
	|	ВтТовары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтТовары.Номенклатура                                    КАК Номенклатура,
	|	ЕСТЬNULL(ВидыНоменклатуры.ИспользоватьСерии, ЛОЖЬ)       КАК ИспользоватьСерии,
	|	ЕСТЬNULL(ВладельцыСерии.Ссылка, ВидыНоменклатуры.Ссылка) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ВладельцыСерии.АвтоматическиГенерироватьСерии,
	|		ВидыНоменклатуры.АвтоматическиГенерироватьСерии)      КАК АвтоматическиГенерироватьСерии
	|	//ДополнительныеПоляВидаНоменклатуры
	|ПОМЕСТИТЬ
	|	ВтВидыНоменклатуры
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВладельцыСерии
	|		ПО СправочникНоменклатура.ВладелецСерий = ВладельцыСерии.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ВтТовары.Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура                             КАК Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры                КАК ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии              КАК ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии КАК АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование               КАК НоменклатураНаименование,
	|	//ДополнительныеПоляВыборки
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.Ссылка,
	|				ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ ВтТовары.Серия
	|	КОНЕЦ)                                            КАК Серия
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыНоменклатуры
	|		ПО ВтТовары.Номенклатура = ВтВидыНоменклатуры.Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО СерииНоменклатуры.ВидНоменклатуры = ВтВидыНоменклатуры.ВидНоменклатуры
	|		И ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
	|		//ДополнительныеПоляСвязи
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтВидыНоменклатуры.ВидНоменклатуры,
	|	ВтВидыНоменклатуры.ИспользоватьСерии,
	|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии,
	|	СправочникНоменклатура.Наименование
	|	//ДополнительныеПоляГруппировки
	|";
	
	ИнтеграцияИСМПУТ_ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", ТаблицаДанныхДляГенерацииСерий);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеДляГенерации = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСерии = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСМПУТКлиентСервер_СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции); 
		ЗаполнитьЗначенияСвойств(ДанныеСерии, Выборка);
		
		Если Не Выборка.ИспользоватьСерии Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 серии не используются.';
													|en = 'Series are not used for the %1 products.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли НЕ Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
			
			ДанныеСерии.ЕстьОшибка = Истина;
			ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не предусмотрена автоматическая генерация серий.';
													|en = 'Automatic series generation is not available for the %1 products.'"), Выборка.НоменклатураНаименование);
			
		ИначеЕсли Выборка.АвтоматическиГенерироватьСерии И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
				
			Попытка
				
				НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НоваяСерия.Заполнить(Выборка);
				НоваяСерия.Записать();
				
				ДанныеСерии.Серия = НоваяСерия.Ссылка;
				
			Исключение
				
				ДанныеСерии.ЕстьОшибка = Истина;
				ДанныеСерии.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сгенерировать серию для номенклатуры %1 по причине: %2';
														|en = 'Cannot generate series for the %1 products due to: %2'"),
					Выборка.НоменклатураНаименование,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

			КонецПопытки;
		 
		КонецЕсли;
		
		ДанныеДляГенерации.Добавить(ДанныеСерии); 
	КонецЦикла;

КонецПроцедуры

Функция ИнтеграцияИСМПУТ_ТаблицаДанныхДляГенерацииСерий(ВидМаркируемойПродукции)
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Серия",        Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("ЕстьОшибка",   Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТекстОшибки",  ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ИнтеграцияИСМПУТ_ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ИнтеграцияИСМПУТ_ДополнитьТаблицуДляГенерацииСерийПоВидуПродукции(ТаблицаДанных, ВидМаркируемойПродукции)
	
	Возврат;
	
КонецПроцедуры

Процедура ИнтеграцияИСМПУТ_ДополнитьТекстЗапросаГенерацииСерийПоВидуПродукции(ТекстЗапроса, ВидМаркируемойПродукции)
	
	ДополнительныеПоляВидаНоменклатуры = "";
	ДополнительныеПоляВыборки          = "";
	ДополнительныеПоляСвязи            = "";
	ДополнительныеПоляГруппировки      = "";
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		ДополнительныеПоляВидаНоменклатуры = ",
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьМРЦМОТПСерии,
		|		ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии) КАК ИспользоватьМРЦМОТПСерии";
		
		ДополнительныеПоляВыборки = "
		|	ВтТовары.МРЦ КАК МаксимальнаяРозничнаяЦенаМОТП,";
		
		ДополнительныеПоляСвязи = "
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьМРЦМОТПСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.МаксимальнаяРозничнаяЦенаМОТП = ВтТовары.МРЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)";
		
		ДополнительныеПоляГруппировки = ",
		|	ВтТовары.МРЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВидаНоменклатуры", ДополнительныеПоляВидаНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляВыборки",          ДополнительныеПоляВыборки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляСвязи",            ДополнительныеПоляСвязи);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДополнительныеПоляГруппировки",      ДополнительныеПоляГруппировки);
	
КонецПроцедуры

Процедура ИнтеграцияИСМПУТ_ОпределитьСкладДокументаОснования(Склад, ДокументОснование) Экспорт
	
	СкладОснования      = Справочники.Склады.ПустаяСсылка();
	МетаданныеОснования = ДокументОснование.Метаданные();
	
	Если МетаданныеОснования.Реквизиты.Найти("Склад") <> Неопределено Тогда
		СкладОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Склад");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладОснования)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладОснования, "ЭтоГруппа") Тогда
		
		ИменаТабличныхЧастей = Новый Массив();
		ИменаТабличныхЧастей.Добавить("Товары");
		ИменаТабличныхЧастей.Добавить("Продукция");
		
		Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			МетаданныеТабличнойЧасти = МетаданныеОснования.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда
				Если МетаданныеТабличнойЧасти.Реквизиты.Найти("Склад") <> Неопределено Тогда
					ТекстЗапроса =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Склад
					|ИЗ
					|	Документ." + МетаданныеОснования.Имя + "." + ИмяТабличнойЧасти + "
					|ГДЕ
					|	Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|	И НЕ Склад.ЭтоГруппа";
					Запрос = Новый Запрос(ТекстЗапроса);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СкладОснования = Выборка.Склад;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладОснования) Тогда
		Склад = СкладОснования;
	КонецЕсли;
	
КонецПроцедуры

Функция ИнтеграцияИСМПУТ_ПараметрыУказанияСерийПроверкаИПодборПродукцииИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");
	
	Если ЗначениеЗаполнено(Объект[ПараметрыУказанияСерий.ИмяПоляСклад]) Тогда
		ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект[ПараметрыУказанияСерий.ИмяПоляСклад], Ложь);
	
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
																		Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	Иначе
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = Объект.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.ИмяПоляСклад                   = Неопределено;
	КонецЕсли;
		
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ИнтеграцияИСМПУТ_ТекстЗапросаМаркируемойПродукции(ДокументСсылка, ИмяТабЧастиТовары = Неопределено,
	ИмяТабЧастиСерии = Неопределено, ИмяПоляСклад = Неопределено)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если ИмяТабЧастиТовары = Неопределено Тогда
		ИмяТабЧастиТовары = "Товары";
	КонецЕсли;
	
	Если ИмяТабЧастиСерии = Неопределено Тогда
		ИмяТабЧастиСерии = "Серии";
	КонецЕсли;
	
	Если ИмяПоляСклад = Неопределено Тогда
		ИмяПоляСклад = "Склад";
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
		СкладВТабличнойЧастиТовары = Ложь;
	Иначе
		СкладВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиТовары].Реквизиты.Найти("Назначение") = Неопределено Тогда
		НазначениеВТабличнойЧастиТовары = Ложь;
	Иначе
		НазначениеВТабличнойЧастиТовары = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабЧастиСерии) = Неопределено Тогда
		ЕстьТабличнаяЧастьСерии        = Ложь;
		СкладВТабличнойЧастиСерии      = Ложь;
		НазначениеВТабличнойЧастиСерии = Ложь;
	Иначе
		ЕстьТабличнаяЧастьСерии = Истина;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти(ИмяПоляСклад) = Неопределено Тогда
			СкладВТабличнойЧастиСерии = Ложь;
		Иначе
			СкладВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТабЧастиСерии].Реквизиты.Найти("Назначение") = Неопределено Тогда
			НазначениеВТабличнойЧастиСерии = Ложь;
		Иначе
			НазначениеВТабличнойЧастиСерии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСвязьПоСкладуТабличнойЧасти = СкладВТабличнойЧастиТовары И СкладВТабличнойЧастиСерии;
	ДобавитьСвязьПоНазначению           = НазначениеВТабличнойЧастиТовары И НазначениеВТабличнойЧастиСерии;
	
	Если ЕстьТабличнаяЧастьСерии Тогда
		
		ТекстЗапросаШаблон = "ВЫБРАТЬ
		|	Товары.Номенклатура                                 КАК Номенклатура,
		|	Товары.Характеристика                               КАК Характеристика,
		|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                 КАК Серия,
		|	СУММА(ЕСТЬNULL(Серии.Количество,Товары.Количество)) КАК Количество
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1.%3 КАК Серии
		|		ПО Товары.Номенклатура = Серии.Номенклатура
		|		И Товары.Характеристика = Серии.Характеристика
		|		И Серии.Ссылка = &Документ
		|		%4
		|		%5
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|	И &УсловиеМаркируемаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	ЕСТЬNULL(Серии.Серия, Товары.Серия)";
		
		СвязьПоСкладу = "";
		Если ДобавитьСвязьПоСкладуТабличнойЧасти Тогда
			ШаблонСвязьПоСкладу = "И Товары.%1 = Серии.%1";
			СвязьПоСкладу = СтрШаблон(ШаблонСвязьПоСкладу, ИмяПоляСклад);
		КонецЕсли;
		
		СвязьПоНазначению = "";
		Если ДобавитьСвязьПоНазначению Тогда
			СвязьПоНазначению = "И Товары.Назначение = Серии.Назначение";
		КонецЕсли;
		
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары, ИмяТабЧастиСерии, СвязьПоСкладу, СвязьПоНазначению);
		
	Иначе
		
		ТекстЗапросаШаблон = "ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Серия             КАК Серия,
		|	СУММА(Товары.Количество) КАК Количество
		|ИЗ
		|	Документ.%1.%2 КАК Товары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		|ГДЕ
		|	Товары.Ссылка = &Документ
		|	И &УсловиеМаркируемаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Серия";
		
		ТекстЗапроса = СтрШаблон(ТекстЗапросаШаблон, МетаданныеДокумента.Имя, ИмяТабЧастиТовары);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
//   Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
//   ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//   ВидыМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив - вид(ы) маркируемой продукции, которым(и) необходимо заполнить таблицу.
//
Процедура ИнтеграцияИСМПУТ_СформироватьТаблицуМаркируемойПродукцииДокумента(Документ, ТаблицаПродукции, ВидыМаркируемойПродукции) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		Или ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		Или ТипДокумента = Тип("ДокументСсылка.СборкаТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		Или ТипДокумента = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ_ТекстЗапросаМаркируемойПродукции(Документ);
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЧекККМ")
		Или ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТекстЗапроса = ИнтеграцияИСМПУТ_ТекстЗапросаМаркируемойПродукции(Документ,,,"Помещение");
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Формирование таблицы маркируемой продукции указанного документа не определено';
								|en = 'Generation of the marked products table of the specified document is not specified'");
		
	КонецЕсли;
	
	ИнтеграцияИСМПУТ_УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидыМаркируемойПродукции);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса условие отбора по маркируемой продукции требуемого вида.
// Текст запроса должен содержать строку вида "&УсловиеМаркируемаяПродукция" в условии соединения или условии отбора
// и таблицу с синонимом "СправочникНоменклатура", которой как правило является таблица справочника "Номенклатура".
// Параметры:
//   ТекстЗапроса - Строка - строка с текстом запроса, удовлетворяющая приведенным выше условиям.
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - 
//     вид или виды маркируемой продукции, условие отбора по которым необходимо установить.
Процедура ИнтеграцияИСМПУТ_УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, Знач ВидМаркируемойПродукции) Экспорт
	
	Если ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табачная Тогда
		
		УсловиеМаркируемаяПродукция = "СправочникНоменклатура.ТабачнаяПродукция";
		
	ИначеЕсли (ТипЗнч(ВидМаркируемойПродукции) = Тип("Массив")) Тогда
		
		МассивУсловийМаркируемойПродукции = Новый Массив;
		
		Если ВидМаркируемойПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная) <> Неопределено Тогда
			МассивУсловийМаркируемойПродукции.Добавить("СправочникНоменклатура.ТабачнаяПродукция")
		КонецЕсли;
		
		УсловиеМаркируемаяПродукция = СтрСоединить(МассивУсловийМаркируемойПродукции, " ИЛИ ");
		
		Если УсловиеМаркируемаяПродукция <> "" Тогда
			УсловиеМаркируемаяПродукция = СтрШаблон("(%1)", УсловиеМаркируемаяПродукция);
		Иначе
			УсловиеМаркируемаяПродукция = "ЛОЖЬ";
		КонецЕсли;
		
	Иначе
		УсловиеМаркируемаяПродукция = "ЛОЖЬ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеМаркируемаяПродукция", УсловиеМаркируемаяПродукция);
	
КонецПроцедуры

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
//
//Параметры:
//   ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях.
//
//Возвращаемое значение:
//   ДокументСсылка.АктОРасхожденияхПослеПриемки, Неопределено - Акт о расхождениях (если он есть).
//
Функция ИнтеграцияИСМПУТ_СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Если ТипДокументаОснования <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипДокументаОснования <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктОРасхождениях.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхождениях
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхТовары
	|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
	|ГДЕ
	|	НЕ АктОРасхождениях.ПометкаУдаления
	|	И АктОРасхожденияхТовары.ДокументОснование = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхождениях.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	АктОРасхождениях.Дата УБЫВ
	|";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

// Формирует текст запроса для расчета статусов указания серий в обработках проверки и подбора товаров
//
//Параметры:
//   ПараметрыУказанияСерий - Структура - (См. НоменклатураКлиентСервер.ПараметрыУказанияСерий).
//
//Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ИнтеграцияИСМПУТ_ТекстЗапросаЗаполненияСтатусовУказанияСерийПроверкаИПодборПродукцииИСМП(ПараметрыУказанияСерий) Экспорт
	
	Проверяемыйдокумент = Неопределено;
	ПараметрыУказанияСерий.Свойство("ПроверяемыйДокумент", Проверяемыйдокумент);

	ДопУсловиеКоличество = "";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары." + ПараметрыУказанияСерий.ИмяПоляКоличество + " КАК Количество,";
	
	Для Каждого ИмяПоля Из ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	Товары." + ИмяПоля + " КАК " + ИмяПоля + ",";
		ДопУсловиеКоличество = ДопУсловиеКоличество + ?(ПустаяСтрока(ДопУсловиеКоличество), "", " ИЛИ ") + "Товары." + ИмяПоля + " <> 0";
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) ИЛИ &Склад = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|				КОГДА ВидыНоменклатуры.НастройкаИспользованияСерий = ЗНАЧЕНИЕ(Перечисление.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка)
	|					ИЛИ ВидыНоменклатуры.НастройкаИспользованияСерий ЕСТЬ NULL
	|					ТОГДА 0
	|				КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА 2
	|				ИНАЧЕ 21
	|			КОНЕЦ";
	
	Если ПроверяемыйДокумент = "ЧекККМ" Или ПроверяемыйДокумент = "ЧекККМВозврат" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 14
		|				ИНАЧЕ 13
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|			ТОГДА ВЫБОР
		|				КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|					И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|					ТОГДА 10
		|				ИНАЧЕ 9
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 6
		|						ИНАЧЕ 5
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 8
		|					ИНАЧЕ 7
		|				КОНЕЦ
		|			КОНЕЦ
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|			И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
		|			ТОГДА ВЫБОР
		|				КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|					ТОГДА ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 4
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА 2
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СтатусУказанияСерий";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
		|			ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий = ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)
		|			ТОГДА 0
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
		|				ТОГДА ВЫБОР
		|					КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|						И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|							КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|								ТОГДА 14
		|							ИНАЧЕ 10
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
		|							ТОГДА 13
		|						ИНАЧЕ 9
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 6
		|							ИНАЧЕ 5
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 8
		|						ИНАЧЕ 7
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
		|					И &ПриемкаОтПоставщика
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
		|					И &ПриемкаПоВозвратуОтКлиента
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
		|					И &ПриемкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
		|					И &ПриемкаПоПрочемуОприходованию
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
		|					И &ПриемкаКомплектующихПослеРазборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
		|					И &ПриемкаСобранныхКомплектов)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
		|				И (ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
		|					И &ОтгрузкаКлиенту
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
		|					И &ОтгрузкаНаВнутренниеНужды
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
		|					И &ОтгрузкаПоВозвратуПоставщику
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
		|					И &ОтгрузкаПоПеремещению
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
		|					И &ОтгрузкаКомплектующихДляСборки
		|				  ИЛИ ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
		|					И &ОтгрузкаКомплектовДляРазборки)
		|				ТОГДА ВЫБОР
		|					КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
		|						ТОГДА ВЫБОР
		|							КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|								И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|								ТОГДА 4
		|							ИНАЧЕ 3
		|						КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|						КОГДА (Товары.Количество <> 0 ИЛИ &ДопУсловиеКоличество)
		|							И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|							ТОГДА 2
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|				КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусУказанияСерий";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|		 И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Если ПустаяСтрока(ДопУсловиеКоличество) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", "ЛОЖЬ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловиеКоличество", ДопУсловиеКоличество);
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСУТ

//Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
//Параметры:
//   Объект - УправляемаяФорма - форма документа для проверки.
//   Отказ  - Булево - Отказ из вызывающего метода.
Процедура ИнтеграцияИСУТ_ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ) Экспорт
	
	Ошибки = Неопределено;
	
	ТестовыйПериодМОТП = ИнтеграцияМОТПВызовСервера.ЭтоТестовыйПериод();
		
	ЗапросМаркируемыхТоваров = Новый Запрос;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Табак", Не ТестовыйПериодМОТП);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И (&Табак И Номенклатура.ТабачнаяПродукция)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП_Содержимое(Объект.АкцизныеМарки.ВыгрузитьКолонку("АкцизнаяМарка"), Неопределено);
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		ПроверяемСтроку = ПроверяемыеТовары.Найти(СтрокаТовары.Номенклатура);
		Если ПроверяемСтроку<>Неопределено Тогда
			
			ОтборПоПолям = ИнтеграцияИС_ПоляДляПоискаМаркируемойПродукции();
			ЗаполнитьЗначенияСвойств(ОтборПоПолям, СтрокаТовары);
			
			СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолям);
			СтрокиТоваров       = Объект.Товары.НайтиСтроки(ОтборПоПолям);
			
			КоличествоМарок = ?(СтрокиАкцизныхМарок.Количество() = 0, 0, СтрокиАкцизныхМарок[0].Количество);
			
			КоличествоЕдиницТоваров = 0;
			Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
				КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
			КонецЦикла;
			
			Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
				
				Шаблон = НСтр("ru = 'Для %1 должно быть указано марок - %2, а указано - %3.';
								|en = '%2 labels must be specified for %1. The number specified is %3.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					СтрокаТовары.Номенклатура,
					КоличествоЕдиницТоваров,
					КоличествоМарок);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"Объект.Товары[%1].Номенклатура",
					ТекстОшибки,
					"",
					СтрокаТовары.НомерСтроки-1);
	
			КонецЕсли;
			ПроверяемыеТовары.Удалить(ПроверяемСтроку);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ИнтеграцияИСУТ_СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	ИнтеграцияИСМПУТ_СформироватьТаблицуМаркируемойПродукцииДокумента(
			ПараметрыСканирования.ДокументОснование, ТаблицаДанных, ПараметрыСканирования.ДопустимыеВидыПродукции);

КонецПроцедуры

Функция ИнтеграцияИСУТ_ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт

	Если ТипЗнч(Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма.ПроверкаЗаполненияДокументов") Тогда

		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

			Возврат ИнтеграцияИСУТ_ОбработатьДанныеШтрихкодаДляОбщейФормыПроверкиЗаполненияДокументов(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);

		КонецЕсли;

	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция ИнтеграцияИСУТ_ОбработатьДанныеШтрихкодаДляОбщейФормыПроверкиЗаполненияДокументов(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)

	Результат = ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);

	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ПараметрыУказанияСерий         = Форма.ПараметрыУказанияСерий;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ИмяКолонкиКоличество           = "КоличествоФакт";
	ПараметрыЗаполнения.ИмяКолонкиКоличествоУпаковок   = "КоличествоУпаковокФакт";

	ПараметрыПоискаСтатусаУказанияСерии = Новый Структура;
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);

	НайденныеСтроки = Форма.Товары.НайтиСтроки(ПараметрыПоискаСтатусаУказанияСерии);

	АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
	Справка2             = Неопределено;
	Если ДанныеШтрихкода.ВидыПродукции.Количество() > 0
		И ДанныеШтрихкода.ВидыПродукции[0] = Перечисления.ВидыПродукцииИС.Алкогольная Тогда

		АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция;
		Справка2             = ДанныеШтрихкода.Справка2;
	КонецЕсли;

	Если НайденныеСтроки.Количество() > 0 Тогда

		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			НайденныеСтроки[0].СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          ДанныеШтрихкода.Серия);

		Иначе

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          Справочники.СерииНоменклатуры.ПустаяСсылка());

		КонецЕсли;

		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			Форма.Товары,
			ПараметрыОтбора,
			Неопределено,
			АлкогольнаяПродукция,
			ПараметрыЗаполнения);

		СтрокаТЧ                        = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;

	Иначе

		СтрокаТЧ                        = Неопределено;
		СтрокиТЧДляУменьшенияКоличества = Неопределено;

	КонецЕсли;

	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ = Неопределено Тогда

		СтрокаТЧ = Форма.Товары.Добавить();
		СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;
		СтрокаТЧ.Номенклатура         = ДанныеШтрихкода.Номенклатура;
		СтрокаТЧ.Характеристика       = ДанныеШтрихкода.Характеристика;
		СтрокаТЧ.Серия                = ДанныеШтрихкода.Серия;

		ПроверитьСериюРассчитатьСтатус = Новый Структура;
		ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  Форма.Склад);
		ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);

		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);

		Если НЕ НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(
			СтрокаТЧ.СтатусУказанияСерий, ПараметрыЗаполнения.ПараметрыУказанияСерий) Тогда
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;

		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТЧ <> Неопределено Тогда

		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

	Иначе

		Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл

			Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда

				Если СтрокаТЧ = Неопределено Тогда

					СтрокаТЧ = СтрокаТЧДляУменьшенияКоличества;

					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;

				Иначе

					Форма.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);

					Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
					Если Индекс <> Неопределено Тогда
						ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
					КонецЕсли;

				КонецЕсли;

				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

			Иначе

				СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);

				Если СтрокаТЧ = Неопределено Тогда

					СтрокаТЧ = Форма.Товары.Вставить(Форма.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");

					СтрокаТЧ[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = АлкогольнаяПродукция;

					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

				Иначе

					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧ, ПараметрыЗаполнения, 1);

				КонецЕсли;

			КонецЕсли;

			Прервать;

		КонецЦикла;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;

	АкцизныеМаркиСтрокаТЧ = Форма.АкцизныеМарки.Добавить();
	АкцизныеМаркиСтрокаТЧ.ИдентификаторСтроки = СтрокаТЧ.ИдентификаторСтроки;
	АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
	АкцизныеМаркиСтрокаТЧ.Справка2            = Справка2;

	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;

	Возврат Результат;

КонецФункции

Процедура ИнтеграцияИСУТ_ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	ПрефиксыВесовыхШтрихкодов = ЗначениеНастроекПовтИсп.ПолучитьПрефиксыВесовыхШтрихкодов();
	
	ШтрихкодыEAN = Новый Массив;
	
	СоответствиеВесовыхШтрихкодов = Новый Соответствие;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		ШтрихкодыEAN.Добавить(СтрокаДанных.ШтрихкодEAN);
		
		ТекШтрихкод = Новый Структура("Штрихкод, Количество", СтрокаДанных.ШтрихкодEAN, 1);
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод, ПрефиксыВесовыхШтрихкодов);
		ЭтоВесовойШтрихкод = ТекШтрихкод.Штрихкод <> СтрокаДанных.ШтрихкодEAN;
		
		Если ЭтоВесовойШтрихкод Тогда
			СоответствиеВесовыхШтрихкодов.Вставить(СтрокаДанных.ШтрихкодEAN, ТекШтрихкод.Штрихкод);
			ШтрихкодыEAN.Добавить(ТекШтрихкод.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	КэшированныеЗначения = Новый Структура("Штрихкоды", Новый Соответствие);
	РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, ШтрихкодыEAN);
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого КлючЗначение Из КэшированныеЗначения.Штрихкоды Цикл
		
		Если Не ЗначениеЗаполнено(КлючЗначение.Значение.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(КлючЗначение.Значение.Номенклатура);
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка                   КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(спрНоменклатура.Ссылка)    КАК ПредставлениеНоменклатуры,
	|	&ОпределениеВидаПродукции                КАК ВидПродукции,
	|	&ОпределениеПризнакаМаркируемаяПродукция КАК МаркируемаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	спрНоменклатура.Ссылка В(&СписокНоменклатуры)";
	
	ИнтеграцияИСУТ_ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, "спрНоменклатура.Ссылка");
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУТ_ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("спрНоменклатура.Ссылка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	СведенияОНоменклатуре = Запрос.Выполнить().Выгрузить();
	СведенияОНоменклатуре.Индексы.Добавить("Номенклатура");
	
	ДанныеПоШтрихкодамРезультат = ДанныеПоШтрихкодамEAN.СкопироватьКолонки();
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		
		ШтрихкодПоиска = СоответствиеВесовыхШтрихкодов.Получить(СтрокаДанных.ШтрихкодEAN);
		ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(ШтрихкодПоиска);
		
		Если ДанныеПоШтрихкоду = Неопределено Или Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
			ДанныеПоШтрихкоду = КэшированныеЗначения.Штрихкоды.Получить(СтрокаДанных.ШтрихкодEAN);
		КонецЕсли;
		
		Если ДанныеПоШтрихкоду = Неопределено Или Не ЗначениеЗаполнено(ДанныеПоШтрихкоду.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеПоШтрихкодамРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Номенклатура   = ДанныеПоШтрихкоду.Номенклатура;
		НоваяСтрока.Характеристика = ДанныеПоШтрихкоду.Характеристика;
		НоваяСтрока.ПредставлениеНоменклатуры = Строка(ДанныеПоШтрихкоду.Номенклатура);
		
		Сведения = СведенияОНоменклатуре.Найти(ДанныеПоШтрихкоду.Номенклатура);
		Если Сведения <> Неопределено Тогда
			НоваяСтрока.ВидПродукции         = Сведения.ВидПродукции;
			НоваяСтрока.МаркируемаяПродукция = Сведения.МаркируемаяПродукция;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN = ДанныеПоШтрихкодамРезультат;
	
КонецПроцедуры

Процедура ИнтеграцияИСУТ_ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, ПутьКПолюНоменклатура = "Номенклатура", ИмяПараметра = "&ОпределениеВидаПродукции") Экспорт
	
	ОпределениеВидаПродукции = СтрШаблон(" ВЫБОР
	|		КОГДА %1 = Неопределено
	|			ТОГДА Неопределено
	|		КОГДА %1.ТабачнаяПродукция
	|			ТОГДА Значение(Перечисление.ВидыПродукцииИС.Табачная)
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ ", ПутьКПолюНоменклатура);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, ОпределениеВидаПродукции);
	
КонецПроцедуры

Функция ИнтеграцияИСУТ_ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	ОпределениеШаблон = "
						|	%1.ТабачнаяПродукция";
	
	Возврат СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура);
	
КонецФункции

Функция ИнтеграцияИСУТ_ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПроверятьТабачную    = Истина;
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		
		ПроверятьТабачную    = (ВидыПродукции.Найти(Перечисления.ВидыПродукцииИС.Табачная)<>Неопределено);
			
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		
		ПроверятьТабачную    = (ВидыПродукции=Перечисления.ВидыПродукцииИС.Табачная);
			
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверятьТабачную",    ПроверятьТабачную);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	    (&ПроверятьТабачную И ЕСТЬNULL(ШтрихкодыУпаковок.Номенклатура.ТабачнаяПродукция, ЛОЖЬ))	КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ИнтеграцияИСУТ_УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ИнтеграцияИСУТ_ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокументаРМК
//
Процедура ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	ЕстьТабак = ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьТабак Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		ПроверкаИПодборПродукцииИС_ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС_ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Товары", ДобавляемыеРеквизиты);
		
		Если ЕстьТабак Тогда
			ПараметрыИнтеграцииГосИС.Вставить(
				Перечисления.ВидыПродукцииИС.Табачная,
				ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, Перечисления.ВидыПродукцииИС.Табачная));
		КонецЕсли;
				
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Если ЕстьТабак Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
	
	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Марки';
	                                   |en = 'Stamps'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ГруппаНижняяКоманднаяПанельКонтекстныеКоманды4);
	Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.ЦветФона  = Новый Цвет(224, 224, 224);
	Кнопка.Ширина = 12;
	Кнопка.Высота = 3;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2, Истина, Ложь, Истина);
	
#КонецОбласти
	
#Область Элементы
	
	ПутьКРеквизиту = "Объект.Товары.СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ТоварыСтатусПроверкиГосИС",
		Тип("ПолеФормы"),
		ЭлементыФормы.Товары,
		ЭлементыФормы.ТоварыИндексНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияШапка;
			
#КонецОбласти
	
#Область Инициализация

	ИнтеграцияИСУТ_ИнициализироватьФормуРМК(Форма, Ложь, ЕстьТабак, Ложь);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ТоварыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость    = Форма.ИспользоватьАкцизныеМарки;
	
#КонецОбласти

КонецПроцедуры

Процедура ИнтеграцияИСУТ_ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьТабак, ЕстьОбувь)
	
	Если ЕстьТабак Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП = ИнтеграцияМОТПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ОбработкаТабличнойЧастиКлиентСерверЛокализация_ДополнитьСтруктуруДействийПриИзмененииЭлемента(Форма, "НоменклатураПризнаки", СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Форма.Объект.Товары, СтруктураДействий);
	
	ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(Форма, "Объект", "АкцизныеМарки", "АкцизнаяМарка", Истина);
	ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ_НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС_ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Добавляет на форму чека (чека возврата) реквизиты ГосИС (упрощенный вариант: флаг использования акцизных марок и видимость колонки "Номенклатура ЕГАИС")
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокумента чека
//
Процедура ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуЧека(Форма) Экспорт
	
#Область Реквизиты
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды
#КонецОбласти
	
#Область Элементы
#КонецОбласти
	
#Область Инициализация
#КонецОбласти
	
#Область Интерфейс
	
	ИспользоватьАкцизныеМарки = ИнтеграцияЕГАИСВызовСервера.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(
		Форма.Объект.Организация, Форма.Объект.Склад, Форма.Объект.Дата);
	ЭлементыФормы.ТоварыНоменклатураЕГАИС.Видимость = ИспользоватьАкцизныеМарки;
	
#КонецОбласти

КонецПроцедуры

// Возвращяет список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
// 
// Параметры:
// 	Товары - ДанныеФормыКоллекция - ТЧ формы документа.
// Возвращаемое значение:
// 	СписокЗначений - список типа Перечисления.ВидыПродукцииИС содержащийся в ТЧ.
Функция ИнтеграцияИСУТ_ВидыПродукцииВТоварах(Товары) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЕСТЬNULL(МАКСИМУМ(Номенклатура.АлкогольнаяПродукция),ЛОЖЬ) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(МАКСИМУМ(Номенклатура.ТабачнаяПродукция),ЛОЖЬ)    КАК ТабачнаяПродукция,
	|	ЕСТЬNULL(МАКСИМУМ(Номенклатура.ОбувнаяПродукция),ЛОЖЬ)     КАК ОбувнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В (&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.АлкогольнаяПродукция Тогда
			Результат.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
		КонецЕсли;
		Если Выборка.ТабачнаяПродукция Тогда
			Результат.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		КонецЕсли;
		Если Выборка.ОбувнаяПродукция Тогда
			Результат.Добавить(Перечисления.ВидыПродукцииИС.Обувная);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область ИнтеграцияИСМП

//Предназачена для реализации механизма генерации серий номенклатуры по переданным данным
//
//Параметры:
// ДанныеДляГенерации - Структура - (См. ИнтеграцияИСМПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии).
// ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для определения особенностей генерации серий.
//
Процедура ИнтеграцияИСМП_СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции) Экспорт

	ИнтеграцияИСМППереопределяемый_СгенерироватьСерии(ДанныеДляГенерации, ВидМаркируемойПродукции);

КонецПроцедуры

Функция ИнтеграцияИСМП_АктыОРасхожденияПослеПоступленияИспользуются(Документ) Экспорт

	Используются = Ложь;

	ИнтеграцияИСМППереопределяемый_ОпределитьИспользованиеАктовОРасхожденииПослеПриемки(Документ, Используются);

	Возврат Используются;

КонецФункции

Функция ИнтеграцияИСМП_ПолучитьДанныеИзСервиса(АдресЗапроса, КлючСессии, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", "");
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    "");
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Получает вид продукции по номенклатуре
//
//Параметры:
//   Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
//
//Возвращаемое значение:
//   ПеречислениеСсылка.ВидыПродукцииИС - вид продукции по номенклатуре
//
Функция ИнтеграцияИСМП_ВидПродукцииПоНоменклатуре(Номенклатура) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Номенклатура КАК Номенклатура,
	|	Неопределено КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеИС_ОпределитьТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеПоВидуПродукции.Номенклатура         КАК Номенклатура,
	|	ДанныеПоВидуПродукции.Характеристика       КАК Характеристика,
	|	ДанныеПоВидуПродукции.МаркируемаяПродукция КАК МаркируемаяПродукция,
	|	ДанныеПоВидуПродукции.ВидПродукции         КАК ВидПродукции
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК ДанныеПоВидуПродукции
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидПродукции;
	КонецЕсли;
		
КонецФункции

Функция ИнтеграцияИСМП_ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", "");
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    "");
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Определяет контрагента по ИНН.
//
// Параметры:
//   ИНН - Строка - ИНН контрагента.
//
//Возвращаемое значение:
//   ОпределяемыйТип.КонтрагентГосИС - Контрагент, найденный по ИНН.
//
Функция ИнтеграцияИСМП_КонтрагентПоИНН(ИНН) Экспорт
	
	МассивИНН = Новый Массив;
	МассивИНН.Добавить(ИНН);
	КонтрагентыПоИНН = ИнтеграцияИСМП_КонтрагентыПоСпискуИНН(МассивИНН);
	
	Возврат КонтрагентыПоИНН.Получить(ИНН);
	
КонецФункции

//Получает контрагентов по массиву ИНН.
//
//Параметры:
//   КоллекцияИНН - Массив - список ИНН контрагентов
//
//Возвращаемое значение:
//   Соответствие - ссылки на элементы справочника контрагентов:
//    * Ключ     - Строка                          - ИНН контрагента.
//    * Значение - ОпределяемыйТип.КонтрагентГосИС - элемент справочника.
Функция ИнтеграцияИСМП_КонтрагентыПоСпискуИНН(КоллекцияИНН) Экспорт
	
	СоответствиеИННКонтрагентам = Новый Соответствие;
	ИнтеграцияИСПереопределяемый_ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, СоответствиеИННКонтрагентам);
	
	Возврат СоответствиеИННКонтрагентам;
	
КонецФункции

Функция ИнтеграцияИСМП_ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	//ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовИСМП.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
	//	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСПовтИсп

// Определяет включено ли ведение учета продукции, подлежащей маркированию.
//
// Параметры:
// Возвращаемое значение:
//  Булево - Истина, если учет ведется.
Функция ИнтеграцияИСПовтИсп_ВедетсяУчетМаркируемойПродукции() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП");
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсИСМПСлужебный 

Процедура ИнтерфейсИСМПСлужебный_ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь) Экспорт
	
	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];
	
	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;
	
	ДанныеСтроки[ИмяПоля] = Значение;
	
КонецПроцедуры

Процедура ИнтерфейсИСМПСлужебный_ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, КешКодовМаркировки) Экспорт
	
	СтрокаДереваИзКеша = КешКодовМаркировки[КодМаркировки];
	Если СтрокаДереваИзКеша <> Неопределено Тогда
		Если СтрокаДереваИзКеша.Родитель = Неопределено Тогда
			// Код маркировки уже был добавлен в корень дерева упаковок.
			// Требуется удаление упаковки-дубля из дерева упаковок.
			СтрокаДереваИзКеша.Владелец().Строки.Удалить(СтрокаДереваИзКеша);
			КешКодовМаркировки.Удалить(КодМаркировки);
		Иначе
			ВызватьИсключение
				СтрШаблон(
					НСтр("ru = 'В процессе построения дерева упаковок произошла внутренняя ошибка при обработке кода маркировки %1';
						|en = 'В процессе построения дерева упаковок произошла внутренняя ошибка при обработке кода маркировки %1'"),
					КодМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсАвторизацииИСМПСлужебный

// Возвращает ключ сессии для обмена с МОТП.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии.
// 	СрокДейтвия      - Дата, Неопределено - Срок действия ключа сессии.
// Возвращаемое значение:
// 	Строка, Неопределено - Действующий ключ сессии для организации.
Функция ИнтерфейсАвторизацииИСМПСлужебный_ПроверитьОбновитьКлючСессии(ПараметрыЗапроса, Знач СрокДействия = Неопределено, ОбновлятьКлючСессииНаСервере = Истина) Экспорт
	
	КлючСессии = Неопределено;

	Возврат КлючСессии;
	
КонецФункции

// Возвращает структуру данных запроса авторизации
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры авторизации:
// * Идентификатор - Строка - Идентификатор запроса
// * Данные        - Строка - Данные для подписания
Функция ИнтерфейсАвторизацииИСМПСлужебный_ПараметрыАвторизации() Экспорт
	
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("Идентификатор");
	ПараметрыАвторизации.Вставить("Данные");
	
	Возврат ПараметрыАвторизации;
	
КонецФункции

// Выполняет попытку обновления ключа сессии на сервере
// (на сервере предприятия должны быть установлены сертификаты для подписания и пароль).
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// Возвращаемое значение:
// 	Булево - Истина, если обновление ключа сессии выполнено успешно.
Функция ИнтерфейсАвторизацииИСМПСлужебный_ОбновитьКлючСессииНаСервере(ПараметрыЗапроса) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Запрашивает ключ сессии и установливает его в параметры сеанса.
// 
// Параметры:
// 	ПараметрыЗапроса - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии для организации для которой необходимо обновить ключ сессии.
// 	ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// 	Подпись - Строка - Подпись.
// Возвращаемое значение:
// 	Булево - Ключ сессии успешно запрошен и установлен
Функция ИнтерфейсАвторизацииИСМПСлужебный_ЗапроситьУстановитьКлючСессии(ПараметрыЗапроса, ПараметрыАвторизации, Подпись) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КлючСессииУстановлен", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",          "");
	
	СвойстваПодписи = Новый Структура("Подпись", Подпись);
	
	ПараметрыЗапросаПоОрганизации = Новый Структура;
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыЗапроса",     ПараметрыЗапроса);
	ПараметрыЗапросаПоОрганизации.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ПараметрыЗапросаПоОрганизации.Вставить("СвойстваПодписи",      СвойстваПодписи);
	
	РезультатЗапросаКлючаСессии = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ИнтерфейсАвторизацииИСМПВызовСервера_ЗапроситьКлючСессии(ПараметрыЗапросаПоОрганизации);
	Если РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии <> Неопределено Тогда
		
		ИнтерфейсАвторизацииИСМПСлужебный_УстановитьКлючСессии(
			ПараметрыЗапросаПоОрганизации.ПараметрыЗапроса,
			РезультатЗапросаКлючаСессии.ПараметрыКлючаСессии);
		
		ВозвращаемоеЗначение.КлючСессииУстановлен = Истина;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		ВозвращаемоеЗначение.КлючСессииУстановлен = Ложь;
		ВозвращаемоеЗначение.ТекстОшибки          = РезультатЗапросаКлючаСессии.ТекстОшибки;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

Процедура ИнтерфейсАвторизацииИСМПСлужебный_УстановитьКлючСессии(ПараметрыЗапроса, ПараметрыКлючаСессии) Экспорт
	
	Попытка
		ДанныеКлючаСессии = ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса].Получить();
	Исключение
		ДанныеКлючаСессии = Неопределено;
	КонецПопытки;
	
	Если ДанныеКлючаСессии = Неопределено Тогда
		ДанныеКлючаСессии = Новый Соответствие;
	КонецЕсли;
	
	ДанныеКлючаСессии.Вставить(ПараметрыЗапроса.Организация, ПараметрыКлючаСессии);
	
	ПараметрыСеанса[ПараметрыЗапроса.ИмяПараметраСеанса] = Новый ХранилищеЗначения(ДанныеКлючаСессии);
	
КонецПроцедуры

// Возвращает пароль к сертификату, если доступен текущему пользователю.
// При вызове в привилегированном режиме текущий пользователь не учитывается.
//
// Параметры:
//  Сертификат - Неопределено - вернуть пароли ко всем сертификатам, доступным текущему пользователю.
//             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - вернуть пароль
//                 к указанному сертификату.
//              
// Возвращаемое значение:
//  Неопределено - пароль для указанного сертификата не указан.
//  Строка       - пароль для указанного сертификата.
//  Соответствие - все заданные пароли, доступные текущему пользователю
//                 в виде ключ - сертификат и значение - пароль.
//
// TODO: Сделать общее с ГИСМ
Функция ИнтерфейсАвторизацииИСМПСлужебный_ПарольКСертификату(Сертификат = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = Константы.КонтекстРаботыГИСМ.Получить().Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Пользователи.РолиДоступны("ДобавлениеИзменениеЭлектронныхПодписейИШифрование") Тогда
		Если Сертификат <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Если Сертификат <> Неопределено Тогда
		Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Свойства = Данные.Получить(Сертификат);
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
				
				Возврат Свойства.Пароль;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПаролиСертификатов = Новый Соответствие;
	
	Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
		Возврат ПаролиСертификатов;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Данные Цикл
		Свойства = КлючИЗначение.Значение;
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.Свойство("Пароль")
		   И ТипЗнч(Свойства.Пароль) = Тип("Строка")
		   И Свойства.Свойство("Пользователь")
		   И ТипЗнч(Свойства.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
		   Если Свойства.Пользователь = Пользователи.ТекущийПользователь()
			   ИЛИ Свойства.Пользователь = Справочники.Пользователи.ПустаяСсылка()
			 Или ПривилегированныйРежим() Тогда
				ПаролиСертификатов.Вставить(КлючИЗначение.Ключ, Свойства.Пароль);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПаролиСертификатов;
	
КонецФункции

// Получает сертификаты организаций, для предназначены для подписания на сервере.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Сертификаты - ТаблицаЗначений - содержит сертификат и пароль.
//   * МенеджерКриптографии - МенеджерКриптографии - менеджер криптографии.
//
Функция ИнтерфейсАвторизацииИСМПСлужебный_СертификатыДляПодписанияНаСервере() Экспорт
	
	НастройкиОбмена = ИнтеграцияИС_НастройкиОбменаГосИС();
	
	Если НастройкиОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.Сертификат  КАК Сертификат
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Организация          КАК Организация,
	|	ТаблицаДанных.Сертификат           КАК Сертификат,
	|	ТаблицаДанных.Сертификат.Отпечаток КАК Отпечаток
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|");
	
	Запрос.УстановитьПараметр("Таблица", НастройкиОбмена);
	
	ДанныеСертификатовИзНастроекОбмена = Запрос.Выполнить().Выгрузить();
	
	СертификатыОрганизацийДляОбменаНаСервере = Новый ТаблицаЗначений();
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("Организация");
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("Сертификат");
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("Отпечаток");
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("СертификатКриптографии");
	СертификатыОрганизацийДляОбменаНаСервере.Колонки.Добавить("Пароль");
	
	Для Каждого ДанныеСертификата Из ДанныеСертификатовИзНастроекОбмена Цикл
		
		Пароль = ИнтерфейсАвторизацииИСМПСлужебный_ПарольКСертификату(ДанныеСертификата.Сертификат);
		
		СертификатКриптографии = ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку(ДанныеСертификата.Отпечаток, Ложь, Ложь);
		Если СертификатКриптографии = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = СертификатыОрганизацийДляОбменаНаСервере.Добавить();
		СтрокаТЧ.Организация            = ДанныеСертификата.Организация;
		СтрокаТЧ.Сертификат             = ДанныеСертификата.Сертификат;
		СтрокаТЧ.Отпечаток              = ДанныеСертификата.Отпечаток;
		СтрокаТЧ.СертификатКриптографии = СертификатКриптографии;
		Если Пароль <> Неопределено Тогда
			СтрокаТЧ.Пароль = Пароль;
		Иначе
			СтрокаТЧ.Пароль = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если СертификатыОрганизацийДляОбменаНаСервере.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("Подписание", Ложь);
	
	СертификатыДляПодписанияНаСервере = Новый Структура;
	СертификатыДляПодписанияНаСервере.Вставить("Сертификаты",          СертификатыОрганизацийДляОбменаНаСервере);
	СертификатыДляПодписанияНаСервере.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Возврат СертификатыДляПодписанияНаСервере;
	
КонецФункции

// Возвращает структуру данных ключа сессии обмена с МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Параметры ключа сессии:
// * КлючСессии  - Строка - Ключ сессии.
// * ДействуетДо - Дата   - Дата и время окончания действия ключа сессии.
Функция ИнтерфейсАвторизацииИСМПСлужебный_ПараметрыКлючаСессии() Экспорт
	
	ПараметрыКлючаСессии = Новый Структура;
	ПараметрыКлючаСессии.Вставить("КлючСессии",  "");
	ПараметрыКлючаСессии.Вставить("ДействуетДо", '00010101');
	
	Возврат ПараметрыКлючаСессии;
	
КонецФункции

#КонецОбласти

#Область ЭлектронноеВзаимодействиеИСМП

// Разворачивает таблицу транспортных и индивидуалЭлектронноеВзаимодействиеИСМППереопределяемыйки, серии
//   для дальнейшего сравнения информации об упаковках с товарной частью.
// 
// Параметры:
//   ШтрихкодыУпаковок - Массив - исходный массив элементов типа "СправочникСсылка.ШтрихкодыУпаковокТоваров"
//   ВидыПродукцииИС   - (см. ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции) - виды продукции для отбора штрихкодов
// Возвращаемое значение - ТаблицаЗначений - таблица состава упаковок:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
//   * Количество         - Число - количество единиц содержимого
//
Функция ЭлектронноеВзаимодействиеИСМП_Содержимое(Знач ШтрихкодыУпаковок, Знач ВидыПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	ШтрихкодированиеИСПереопределяемый_ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Номенклатура             КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика           КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия                    КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                                      КАК Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|		ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И Вложенные.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[0].Выбрать();
		Пока ДочерниеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДочерниеЗаписи);
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика, Серия", "Количество");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИПодборПродукцииИС

// Добавляет на форму колонку статуса проверки и подбора в табличной части
//
// Параметры:
//   Форма               - УправляемаяФорма                   - форма для встраивания
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//
Процедура ПроверкаИПодборПродукцииИС_ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	Если ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		
		ПутьКРеквизиту = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграции.ИмяТабличнойЧастиТовары;
		ПутьКРеквизиту = ПутьКРеквизиту + ".СтатусПроверкиГосИС";
		ИмяКолонкиРеквизита = СтрШаблон("%1СтатусПроверкиГосИС",ПараметрыИнтеграции.ИмяТабличнойЧастиТовары);
		
		Если Форма.Элементы.Найти(ИмяКолонкиРеквизита) = Неопределено Тогда
		
			КолонкаИнтерфейса = Форма.Элементы.Вставить(
				ИмяКолонкиРеквизита,
				Тип("ПолеФормы"),
				Форма.Элементы[ПараметрыИнтеграции.ИмяЭлементаФормыТовары],
				Форма.Элементы[ПараметрыИнтеграции.ИмяСледующейКолонки]);
			КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
			КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
			КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияТЧ;
			КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяАлкогольнаяПродукцияШапка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(ВидПродукции = Неопределено, ВозобновлениеПроверки = Ложь)
	
	Индекс = "";
	Если ВидПродукции<>Неопределено Тогда
		Индекс = Перечисления.ВидыПродукцииИС.Индекс(ВидПродукции);
	КонецЕсли;
	
	Если ВозобновлениеПроверки Тогда
		Возврат "ВозобновитьПроверкуПродукцииГосИС" + Индекс;
	Иначе
		Возврат "ПодобратьИПроверитьПродукциюГосИС" + Индекс;
	КонецЕсли;
	
КонецФункции

// Добавляет на форму кнопки проверки и подбора, возобновления проверки по видам продукции ГосИС
// 
// Параметры:
//   Форма               - УправляемаяФорма                   - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура                          - параметры интеграции прикладной формы
//   ВидПродукцииИС      - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого производится встраивание
//
Процедура ПроверкаИПодборПродукцииИС_ДобавитьКнопкуПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукцииИС) Экспорт
	
	ИмяКомандыПроверкаПодбор = ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(ВидПродукцииИС);
	
	Если Форма.Команды.Найти(ИмяКомандыПроверкаПодбор)<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыПроверкаПодбор);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = ВидПродукцииИС;
	
	Кнопка = Форма.Элементы.Вставить(
		ИмяКомандыПроверкаПодбор,
		Тип("КнопкаФормы"),
		Форма.Элементы[ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды()],
		Форма.Элементы[ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(,Истина)]);
	Кнопка.ИмяКоманды = ИмяКомандыПроверкаПодбор;
	Кнопка.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
	Кнопка.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена Тогда
		
		ИмяКомандыВозобновитьПроверку = ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(ВидПродукцииИС, Истина);
		
		КомандаФормы = Форма.Команды.Добавить(ИмяКомандыВозобновитьПроверку);
		КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
		КомандаФормы.Заголовок = ПараметрыИнтеграции.Заголовки[8];
		
		Кнопка = Форма.Элементы.Добавить(
			ИмяКомандыВозобновитьПроверку,
			Тип("КнопкаФормы"),
			Форма.Элементы[ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(,Истина)]);
		Кнопка.ИмяКоманды = ИмяКомандыВозобновитьПроверку;
		Кнопка.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , , , Истина, , );
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет на форму подменю проверки и подбора по видам продукции ГосИС
// 
// Параметры:
//   Форма               - УправляемаяФорма - форма для встраивания гиперссылок проверки и подбора
//   ПараметрыИнтеграции - Структура        - параметры интеграции прикладной формы
//
Процедура ПроверкаИПодборПродукцииИС_ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, ПараметрыИнтеграции) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ЭлементыФормы.Найти("КоманднаяПанельПроверкаИПодборПродукцииГосИС")<>Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследующийЭлемент = ?(ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы],
		Неопределено);
		
	ПанельСканированиеИПроверка = ЭлементыФормы.Вставить(
		"КоманднаяПанельПроверкаИПодборПродукцииГосИС",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	ПанельСканированиеИПроверка.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ПодменюСканированиеИПроверка = ЭлементыФормы.Добавить(
		ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(),
		Тип("ГруппаФормы"),
		ПанельСканированиеИПроверка);
	ПодменюСканированиеИПроверка.Вид = ВидГруппыФормы.Подменю;
	ПодменюСканированиеИПроверка.Заголовок = НСтр("ru = 'Проверка и подбор';
													|en = 'Проверка и подбор'");
	ПодменюСканированиеИПроверка.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылки;
	ПодменюСканированиеИПроверка.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюСканированиеИПроверка.Отображение = ОтображениеКнопки.Текст;
	ПодменюСканированиеИПроверка.ШрифтЗаголовка = Новый Шрифт(ПодменюСканированиеИПроверка.ШрифтЗаголовка, , , , , Истина, , );
	
	ПодменюВозобновитьПроверку = ЭлементыФормы.Добавить(
		ПроверкаИПодборПродукцииИС_ИмяКнопкиИКоманды(, Истина),
		Тип("ГруппаФормы"),
		ПодменюСканированиеИПроверка);
	ПодменюВозобновитьПроверку.Вид = ВидГруппыФормы.Подменю;
	ПодменюВозобновитьПроверку.Заголовок = НСтр("ru = 'Возобновить проверку и подбор';
												|en = 'Возобновить проверку и подбор'");
	ПодменюВозобновитьПроверку.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветГиперссылки;
	ПодменюВозобновитьПроверку.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюВозобновитьПроверку.Отображение = ОтображениеКнопки.Текст;
	
	ИнформацияОПроверкеИПодборе = ЭлементыФормы.Вставить(
		"СводнаяИнформацияОПроверкеИПодбореПродукцииГосИС",
		Тип("ГруппаФормы"),
		ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы],
		ПоследующийЭлемент);
	
	ИнформацияОПроверкеИПодборе.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ИнформацияОПроверкеИПодборе.ОтображатьЗаголовок = Ложь;
	ИнформацияОПроверкеИПодборе.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ИнформацияОПроверкеИПодборе.РастягиватьПоВертикали = Ложь;
	ИнформацияОПроверкеИПодборе.РастягиватьПоГоризонтали = Истина;
	
	Картинка = ЭлементыФормы.Добавить("КартинкаПроверкаИПодборПродукцииГосИС",
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Картинка.Вид      = ВидДекорацииФормы.Картинка;
	Картинка.Картинка = БиблиотекаКартинок.ИнформацияГИСМ;
	
	Надпись = ЭлементыФормы.Добавить("НадписьПроверкаИПодборПродукцииГосИС",
		Тип("ДекорацияФормы"), ИнформацияОПроверкеИПодборе);
	Надпись.Вид = ВидДекорацииФормы.Надпись;
	Надпись.АвтоМаксимальнаяШирина = Ложь;
	
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИС_ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("СтатусыПроверкиПодбораГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("СтатусыПроверкиПодбораГосИС", Новый Массив);
	
	Таблица = Новый РеквизитФормы("СтатусыПроверкиПодбораГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), "СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Статус",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиИПодбораЕГАИС"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Видимость",Новый ОписаниеТипов("Булево"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Описание",Новый ОписаниеТипов("Строка"),"СтатусыПроверкиПодбораГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции форм проверки и подбора
//   в прикладные документы конфигурации - потребителя библиотеки ГосИС.
//
// ВозвращаемоеЗначение:
//  ПараметрыИнтеграции - Структура - значения, используемые для интеграции формы проверки и подбора:
//   * ИспользоватьБезМаркируемойПродукции        - Булево - признак показа гиперссылки в форме документа без маркируемой продукции
//   * БлокироватьТабличнуюЧастьТоварыПриПроверке - Булево - признак блокировки табличной части "Товары" для изменений после начала проверки в форме
//   * ИнформацияДляПользователяОБлокировке       - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Истина
//   * ИнформацияДляПользователяОПроверке         - Строка - информационная надпись на форме над табличной частью "Товары" при БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь
//   * ИспользоватьСтатусПроверкаЗавершена        - Булево - признак допустимости у документа состояния завершения проверки. При значении Ложь проверку можно выполнять многократно.
//   * ИмяРеквизитаФормыОбъект                    - Строка - имя реквизита формы, содержащего объект документа
//   * ИмяТабличнойЧастиТовары                    - Строка - имя табличной части документа, содержащей номенклатуру
//   * ИмяТабличнойЧастиСерии                     - Строка - имя табличной части документа, содержащей данные по сериям
//   * ИмяРодительскойГруппыФормы                 - Строка - имя элемента-группы формы документа, в которую необходимо добавить гиперссылку для открытия формы проверки
//   * ИмяЭлементаФормыТовары                     - Строка - имя элемента формы документа, в котором выводится табличная часть с номенклатурой
//   * ИмяПоследующегоЭлементаФормы               - Строка - имя элемента формы, перед которым необходимо добавить гиперссылку для открытия формы проверки
//   * БлокируемыеЭлементы                        - Массив - имена элементов формы документа, которые необходимо заблокировать после начала работы с формой проверки
//   * ИспользоватьСтатусПроверкиПодбораДокумента - Булево - признак наличия у формы реквизита "СтатусПроверкиГосИС"
//   * ИспользоватьКолонкуСтатусаПроверкиПодбора  - Булево - признак использования специальной колонки в таблице товаров для отображения статуса проверки товара
//   * ИмяСледующейКолонки                        - Строка - имя колонки, перед которой необходимо вставить колонку для отображения статуса проверки товара
//   * ИмяТабличнойЧастиШтрихкодыУпаковок         - Строка - имя табличной части документа, содержащей штрихкоды упаковок номенклатуры
//   * ИмяКолонкиШтрихкодУпаковки                 - Строка - имя колонки табличной части штрихкодов содержащей штрихкоды упаковок номенклатуры
//   * ХарактеристикиИспользуются                 - Булево - общий признак использования характеристик
//   * СерииИспользуются                          - Булево - общий признак использования серий
//   * РазмещатьЭлементыИнтерфейса                - Булево - необходимость размещения гиперссылок проверки и подбора;
//   * ИмяРеквизитаФормы                          - Строка - имя реквизита формы для вывода гиперссылки проверки/подбора
//   * ЕстьПравоИзменения                         - Булево - право пользователя на редактирование текущего документа;
//   * ЭтоДокументПриобретения                    - Булево - признак встраивания в документ приобретения;
//   * ЕстьЭлектронныйДокумент                    - Булево - признак наличия ЭДО по объекту
//   * Заголовки                                  - Массив - варианты представления заголовков кнопок для пользователя
//
Функция ПроверкаИПодборПродукцииИС_ПараметрыИнтеграцииФормПроверкиИПодбора() Экспорт
	
	ПараметрыИнтеграции = Новый Структура();
	
	#Область СвойстваФормыИОбъектаВстраивания
	
	ПараметрыИнтеграции.Вставить("ЭтоДокументПриобретения",            Ложь);
	ПараметрыИнтеграции.Вставить("ЕстьЭлектронныйДокумент",            Ложь);
	
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормыОбъект",            "Объект");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиТовары",            "Товары");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиСерии",             "Серии");
	ПараметрыИнтеграции.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок", "ШтрихкодыУпаковок");
	ПараметрыИнтеграции.Вставить("ИмяКолонкиШтрихкодУпаковки",         "ШтрихкодУпаковки");
	
	ПараметрыИнтеграции.Вставить("БлокируемыеЭлементы", Новый Массив);
	
	ПараметрыИнтеграции.Вставить("РазмещатьЭлементыИнтерфейса", Ложь);
	ПараметрыИнтеграции.Вставить("ИмяРеквизитаФормы",           "ТекстПроверкаПодбор");
	
	ПараметрыИнтеграции.Вставить("ИмяРодительскойГруппыФормы",   "СтраницаТовары");
	ПараметрыИнтеграции.Вставить("ИмяПоследующегоЭлементаФормы", "Товары");
	ПараметрыИнтеграции.Вставить("ИмяЭлементаФормыТовары",       "Товары");
	ПараметрыИнтеграции.Вставить("ИмяСледующейКолонки",          "ТоварыНоменклатура");
	
	#КонецОбласти
	
	#Область НастройкиИнтеграцииФормыПроверки
	
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкаЗавершена",        Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьБезМаркируемойПродукции",        Ложь);
	ПараметрыИнтеграции.Вставить("БлокироватьТабличнуюЧастьТоварыПриПроверке", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьСтатусПроверкиПодбораДокумента", Истина);
	ПараметрыИнтеграции.Вставить("ИспользоватьКолонкуСтатусаПроверкиПодбора",  Ложь);
	
	#КонецОбласти
	
	#Область ОбщиеНастройкиСистемы
	
	ПараметрыИнтеграции.Вставить("ХарактеристикиИспользуются", ИнтеграцияИС_ХарактеристикиИспользуются());
	ПараметрыИнтеграции.Вставить("СерииИспользуются",          ИнтеграцияИС_СерииИспользуются());
	ПараметрыИнтеграции.Вставить("ЕстьПравоИзменение",      Ложь);
	
	#КонецОбласти
	
	#Область Тексты
	
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОБлокировке",
		НСтр("ru = 'До окончания работы в форме проверки и подбора внесение изменений в данной форме недоступно.';
			|en = 'До окончания работы в форме проверки и подбора внесение изменений в данной форме недоступно.'"));
	ПараметрыИнтеграции.Вставить("ИнформацияДляПользователяОПроверке",
		НСтр("ru = 'Выполняется проверка маркируемой продукции. При завершении проверки табличная часть может быть изменена.';
			|en = 'Выполняется проверка маркируемой продукции. При завершении проверки табличная часть может быть изменена.'"));
	
	ПараметрыИнтеграции.Вставить("Заголовки", Новый Массив);
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Проверить поступившую маркируемую продукцию';
												|en = 'Проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Подобрать и проверить поступившую маркируемую продукцию';
												|en = 'Подобрать и проверить поступившую маркируемую продукцию'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить проверку поступившей маркируемой продукции';
												|en = 'Продолжить проверку поступившей маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Продолжить подбор и проверку маркируемой продукции';
												|en = 'Продолжить подбор и проверку маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты проверки маркируемой продукции';
												|en = 'Результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Результаты подбора маркируемой продукции';
												|en = 'Результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты проверки маркируемой продукции';
												|en = 'Промежуточные результаты проверки маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Промежуточные результаты подбора маркируемой продукции';
												|en = 'Промежуточные результаты подбора маркируемой продукции'"));
	ПараметрыИнтеграции.Заголовки.Добавить(НСтр("ru = 'Возобновить проверку маркируемой продукции';
												|en = 'Возобновить проверку маркируемой продукции'"));
	
	#КонецОбласти
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

Процедура ПроверкаИПодборПродукцииИС_ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("ДанныеШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИнтеграции.Вставить("ДанныеШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Таблица = Новый РеквизитФормы("ДанныеШтрихкодовУпаковокГосИС", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(Таблица);
	
	Колонка = Новый РеквизитФормы("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип, "ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Характеристика",Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип,"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Серия",Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип,"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("Количество",Новый ОписаниеТипов("Число"),"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ШтрихкодыУпаковок",Новый ОписаниеТипов("СписокЗначений"),"ДанныеШтрихкодовУпаковокГосИС");
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИС_ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты) Экспорт
	
	Если ПараметрыИнтеграции.Получить("ИнтерфейсШтрихкодовУпаковокГосИС") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("ИнтерфейсШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Ложь));
	
	Колонка = Новый РеквизитФормы("МаркируемаяПродукция", Новый ОписаниеТипов("Булево"), ПутьКРеквизиту, НСтр("ru = 'Маркируемая продукция';
																												|en = 'Маркируемая продукция'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("ВидПродукцииИС", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"), ПутьКРеквизиту, НСтр("ru = 'Вид продукции';
																																	|en = 'Вид продукции'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	Колонка = Новый РеквизитФормы("СтатусПроверкиГосИС", Новый ОписаниеТипов("Число"), ПутьКРеквизиту, НСтр("ru = 'Статус проверки подбора';
																											|en = 'Статус проверки подбора'"));
	ДобавляемыеРеквизиты.Добавить(Колонка);
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИС_РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, ВключаяПодчиненные) Экспорт
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений();
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		ИдентификаторВДереве    = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПодчиненныеСтрокиДерева = СтрокаДерева.Строки;
		ИдентификаторВДереве    = СтрокаДерева.ИдентификаторСтроки;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтрокиДерева Цикл
		Если ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияАлкогольнойПродукции.Отсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			Если ВключаяПодчиненные Тогда
				ПроверкаИПодборПродукцииИС_РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, ВключаяПодчиненные);
			КонецЕсли;
			
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.ХешСумма);
		Иначе
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		СтрокаДерева.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
		
		СтрокаТаблицыХешСуммы = ТаблицаХешСумм.Добавить();
		СтрокаТаблицыХешСуммы.ХешСумма             = СтрокаДерева.ХешСумма;
		СтрокаТаблицыХешСуммы.Штрихкод             = СтрокаДерева.Штрихкод;
		СтрокаТаблицыХешСуммы.ИдентификаторВДереве = ИдентификаторВДереве;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИС_ПустаяТаблицаХешСумм() Экспорт

	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ТаблицаХешСумм;

КонецФункции

Функция ПроверкаИПодборПродукцииИС_ПустаяТаблицаПеремаркировки() Экспорт

	ТаблицаПеремаркировки = Новый ТаблицаЗначений;
	ТаблицаПеремаркировки.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаПеремаркировки.Колонки.Добавить("ТребуетсяПеремаркировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПеремаркировки;

КонецФункции

Функция ПроверкаИПодборПродукцииИС_ТаблицаПеремаркировки(ТаблицаХешСумм) Экспорт
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС_ПустаяТаблицаПеремаркировки();
	
	Если ТаблицаХешСумм.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТаблицаХешСумм", ТаблицаХешСумм);
	
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаХешСумм.ХешСумма             КАК ХешСумма,
		|	ТаблицаХешСумм.Штрихкод             КАК ЗначениеШтрихкода,
		|	ТаблицаХешСумм.ИдентификаторВДереве КАК ИдентификаторВДереве
		|ПОМЕСТИТЬ
		|	ПроверяемыеУпаковки
		|ИЗ
		|	&ТаблицаХешСумм КАК ТаблицаХешСумм
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроверяемыеУпаковки.ИдентификаторВДереве КАК ИдентификаторВДереве,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ) КАК ТребуетсяПеремаркировка
		|ИЗ
		|	ПроверяемыеУпаковки КАК ПроверяемыеУпаковки
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ПроверяемыеУпаковки.ЗначениеШтрихкода = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|		 И ПроверяемыеУпаковки.ХешСумма <> ШтрихкодыУпаковокТоваров.ХешСумма
		|СГРУППИРОВАТЬ ПО
		|	ПроверяемыеУпаковки.ИдентификаторВДереве
		|";
	
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПеремаркировки.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПеремаркировки;
	
КонецФункции

Процедура ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(
	Форма,
	ИмяРеквизитаФормыОбъект,
	ИмяТабличнойЧастиШтрихкоды = "ШтрихкодыУпаковок",
	ИмяКолонкиШтрихкодУпаковки = "ШтрихкодУпаковки",
	Инициализация = Ложь) Экспорт
	
	Если Инициализация Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		Если ПараметрыИнтеграцииГосИС.Получить("ДанныеШтрихкодовУпаковокГосИС").Заполнение = Истина Тогда
			Возврат;
		КонецЕсли;
		ПараметрыИнтеграцииГосИС.Вставить("ДанныеШтрихкодовУпаковокГосИС", Новый Структура("Заполнение", Истина));
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Очистить();
	ДанныеШтрихкодовУпаковокГосИС = Форма.ДанныеШтрихкодовУпаковокГосИС.Выгрузить();
	ДанныеШтрихкодовУпаковокГосИС.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	
	Если ЗначениеЗаполнено(ИмяРеквизитаФормыОбъект) Тогда
		Объект = Форма[ИмяРеквизитаФормыОбъект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ШтрихкодыУпаковокИсходнаяТаблица = Объект[ИмяТабличнойЧастиШтрихкоды].Выгрузить();
	
	МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИмяКолонкиШтрихкодУпаковки, ",", Истина);
	ШтрихкодыУпаковок = Неопределено;
	Для Каждого ИмяКолонки Из МассивИменКолонокШтрихкодовУпаковки Цикл
		Если ШтрихкодыУпаковок = Неопределено Тогда
			ШтрихкодыУпаковок = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			ШтрихкодыУпаковокДополнительное = ШтрихкодыУпаковокИсходнаяТаблица.ВыгрузитьКолонку(ИмяКолонки);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ШтрихкодыУпаковок, ШтрихкодыУпаковокДополнительное);
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика,
	|	ШтрихкодыУпаковок.Серия,
	|	ШтрихкодыУпаковок.Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СоставУпаковки);
			СтрокиКеша = ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			Если СтрокиКеша.Количество() Тогда
				СтрокиКеша[0].Количество = СтрокиКеша[0].Количество + ?(СоставУпаковки.Количество=0,1,СоставУпаковки.Количество);
				СтрокиКеша[0].ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
			Иначе
				НоваяСтрока = ДанныеШтрихкодовУпаковокГосИС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СоставУпаковки);
				Если (НоваяСтрока.Количество=0) Тогда
					НоваяСтрока.Количество=1;
				КонецЕсли;
				НоваяСтрока.ШтрихкодыУпаковок = Новый СписокЗначений;
				НоваяСтрока.ШтрихкодыУпаковок.Добавить(ИсходныйШтрихкод);
			КонецЕсли;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыУпаковок = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыУпаковок.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ДанныеШтрихкодовУпаковокГосИС.Загрузить(ДанныеШтрихкодовУпаковокГосИС);
	
КонецПроцедуры

//Возвращает настройки, используемые для встраивания интерфейса кеша штрихкодов упаковок в конкретную форму.
//
// Возвращаемое значение:
//   Структура - настройки встраивания:
//    * Объект           - Строка - имя реквизита формы Объект (сама форма если пусто).
//    * ВсеМаркируемые   - Булево - истина - не проверять товары на признак "Маркируемые".
//    * Штрихкоды        - Строка - имя табличной части "Штрихкоды упаковок".
//    * ШтрихкодУпаковки - Строка - имя колонки табличной части "Штрихкоды упаковок" содержащей ссылку на штрихкод.
//    * Товары           - Строка - имя табличной части "Товары".
//    * Серии            - Строка - имя табличной части "Серии".
//
Функция ПроверкаИПодборПродукцииИС_НастройкиИсточникаКешаШтрихкодовУпаковок(ЭтоДокументГосИС = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Объект",         "Объект");
	Результат.Вставить("ВсеМаркируемые", ЭтоДокументГосИС);
	
	Результат.Вставить("Штрихкоды",        "ШтрихкодыУпаковок");
	Результат.Вставить("ШтрихкодУпаковки", "ШтрихкодУпаковки");
	
	Результат.Вставить("Товары", "Товары");
	Результат.Вставить("Серии",  "");
	
	Возврат Результат;
	
КонецФункции

// Обновляет статусы проверки и подбора в строках таблицы товаров формы (документа)
//
// Параметры:
//   Форма          - УправляемаяФорма        - форма для обновления статусов строк.
//   Настройки      - Неопределено, Структура - (См. НастройкиИсточникаКешаШтрихкодовУпаковок).
//   ОбновитьТовары - Булево                  - необходимость обновить таблицу товаров по таблице штрихкодов.
//
Процедура ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, Настройки = Неопределено, ОбновитьТовары = Ложь) Экспорт
	
	Если Настройки = Неопределено Тогда
		Настройки = ПроверкаИПодборПродукцииИС_НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.Объект) Тогда
		Объект = Форма[Настройки.Объект];
	Иначе
		Объект = Форма;
	КонецЕсли;
	
	ТабличнаяЧастьТовары = Объект[Настройки.Товары];
	
	Если ЗначениеЗаполнено(Настройки.Серии) И Объект[Настройки.Серии].Количество() Тогда
		ТабличнаяЧастьСерии = Объект[Настройки.Серии];
	Иначе
		ТабличнаяЧастьСерии = Неопределено;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС_ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары, Настройки.ВсеМаркируемые);
	
	КолонкиТаблицыТовары = ТабличнаяЧастьТовары.Выгрузить(Новый Массив).Колонки;
	СтруктураПоиска = Новый Структура("Номенклатура");
	СтруктураПоискаБезСерий = Новый Структура("Номенклатура");
	Если КолонкиТаблицыТовары.Найти("Характеристика")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоискаБезСерий.Вставить("Характеристика");
	КонецЕсли;
	Если КолонкиТаблицыТовары.Найти("Серия")<> Неопределено Тогда
		СтруктураПоиска.Вставить("Серия");
	КонецЕсли;
	
	Если ОбновитьТовары Тогда
		ТабличнаяЧастьШтрихкоды = Объект[Настройки.Штрихкоды];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		//Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиТовары.Количество() = 0 И ТабличнаяЧастьСерии<>Неопределено Тогда
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
				Если СтрокиТовары.Количество() Тогда
					СтрокиТовары = ТабличнаяЧастьСерии.НайтиСтроки(СтруктураПоиска);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСписка Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСписка.Значение, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		МассивИменКолонокШтрихкодовУпаковки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			Настройки.ШтрихкодУпаковки, ",", Истина);
		ИмяКолонкиШтрихкодУпаковки = МассивИменКолонокШтрихкодовУпаковки.Получить(0);
		Если (УдалитьСвязанныеШтрихкодыУпаковок.Количество()) Тогда
			//Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды[ИмяКолонкиШтрихкодУпаковки])=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки.Объект, Настройки.Штрихкоды, ИмяКолонкиШтрихкодУпаковки);
		КонецЕсли;
		
	КонецЕсли;
	 
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		Если Настройки.ВсеМаркируемые Или СтрокаТовары.МаркируемаяПродукция Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиКеша.Количество() = 0 И ТабличнаяЧастьСерии <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСерий, СтрокаТовары);
				СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаБезСерий);
				СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоискаБезСерий);
			КонецЕсли;
			
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
			КонецЦикла;
			
			КоличествоВКеше = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиКеша Цикл
				КоличествоВКеше = КоличествоВКеше + СтрокаПоКлючу.Количество;
			КонецЦикла;
			
			Если СтрокиКеша.Количество() = 0 Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			ИначеЕсли КоличествоПоКлючу = КоличествоВКеше Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИС_ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть, ВсеТоварыМаркируемые)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ВсеТоварыМаркируемые Или СтрокаТабличнойЧасти.МаркируемаяПродукция Тогда
			СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииИСМПУТ

// Возвращает через параметр наличие права на добавление элементов справочника СерииНоменклатуры
// 
// Параметры:
// 	ПравоДобавлениеСерий - Булево - исходящий, наличие права на добавление.
//
Процедура ПроверкаИПодборПродукцииИСМПУТ_ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий) Экспорт
	
	ПравоДобавлениеСерий = ПравоДоступа("Добавление", Метаданные.Справочники.СерииНоменклатуры);
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИСМПУТ_ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МаркируемаяПродукция.Номенклатура   КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика КАК Характеристика,
	|	МаркируемаяПродукция.Серия          КАК Серия,
	|	МаркируемаяПродукция.Количество     КАК Количество
	|ПОМЕСТИТЬ ВТМаркируемаяПродукция
	|ИЗ
	|	&МаркируемаяПродукция КАК МаркируемаяПродукция
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	МаркируемаяПродукция.Номенклатура              КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика            КАК Характеристика,
	|	МаркируемаяПродукция.Серия                     КАК Серия,
	|	МаркируемаяПродукция.Количество                КАК Количество
	|ИЗ
	|	ВТМаркируемаяПродукция КАК МаркируемаяПродукция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		 И МаркируемаяПродукция.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МаркируемаяПродукция", ТаблицаМаркируемойПродукции);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииЧекККМ(ФормаОбъект, ВидМаркируемойПродукции)
	
	Если ТипЗнч(ФормаОбъект) = Тип("УправляемаяФорма") Тогда
		Товары = ФормаОбъект.Объект.Товары;
	Иначе
		Товары = ФормаОбъект.Товары;
	КонецЕсли;
	
	Возврат ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииДанныеФормыКоллекция(Товары, ВидМаркируемойПродукции);
	
КонецФункции

Функция ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииДанныеФормыСтруктура(ДанныеФормыСтруктура, ВидМаркируемойПродукции, ИмяКоллекции = "Товары")
	
	Возврат ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииДанныеФормыКоллекция(ДанныеФормыСтруктура[ИмяКоллекции], ВидМаркируемойПродукции);
	
КонецФункции

Функция ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииДанныеФормыКоллекция(ДанныеФормыКоллекция, ВидМаркируемойПродукции)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура      КАК Номенклатура,
	|	ВТ_Товары.Характеристика    КАК Характеристика,
	|	ВТ_Товары.Серия             КАК Серия,
	|	СУММА(ВТ_Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_МаркируемаяПродукция
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&УсловиеМаркируемаяПродукция
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура,
	|	ВТ_Товары.Характеристика,
	|	ВТ_Товары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	МаркируемаяПродукция.Номенклатура              КАК Номенклатура,
	|	МаркируемаяПродукция.Характеристика            КАК Характеристика,
	|	МаркируемаяПродукция.Серия                     КАК Серия,
	|	МаркируемаяПродукция.Количество                КАК Количество
	|ИЗ
	|	ВТ_МаркируемаяПродукция КАК МаркируемаяПродукция
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО МаркируемаяПродукция.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		 И МаркируемаяПродукция.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	GTIN
	|";
	
	ИнтеграцияИСМПУТ_УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапроса, ВидМаркируемойПродукции);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Товары", ДанныеФормыКоллекция.Выгрузить());
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Заполняет переданную таблицу товарами переданного документа, являющимися маркируемой продукцией требуемого вида.
// 
// Параметры:
//  Контекст - ДанныеФормыСтруктура, УправляемаяФорма, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции, которую необходимо получить.
//  ТаблицаМаркируемойПродукции - ТаблицаЗначений - таблица маркируемой продукции документа. (См. ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента())
//
Процедура ПроверкаИПодборПродукцииИСМПУТ_ЗаполнитьМаркируемуюПродукциюДокумента(Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() > 0 Тогда
		РезультатЗапроса = ПроверкаИПодборПродукцииИСМПУТ_ЗапросGTINпоТаблицеМаркируемойПродукции(ТаблицаМаркируемойПродукции);
		ТаблицаМаркируемойПродукции.Очистить();
	ИначеЕсли ТипЗнч(Контекст) = Тип("ДанныеФормыСтруктура") Тогда
		РезультатЗапроса = ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииДанныеФормыСтруктура(Контекст, ВидМаркируемойПродукции);
	ИначеЕсли ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСУТКлиентСервер_ЭтоДокументПоНаименованию(Контекст, "ЧекККМ") Тогда
		РезультатЗапроса = ПроверкаИПодборПродукцииИСМПУТ_ЗапросМаркируемойПродукцииЧекККМ(Контекст, ВидМаркируемойПродукции);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			ПродукцияПоGTIN = ТаблицаМаркируемойПродукции.СкопироватьКолонки();
			ДлинаСтрокиGTIN = 0;
			
			ВыборкаGTIN = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаGTIN.Следующий() Цикл
				Если ПродукцияПоGTIN.Количество() = 0 Тогда
					Выборка = ВыборкаGTIN.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЗаполнитьЗначенияСвойств(ПродукцияПоGTIN.Добавить(), Выборка,, "GTIN");
					КонецЦикла;
				КонецЕсли;
				
				Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ВыборкаGTIN.GTIN)
					И СтрДлина(ВыборкаGTIN.GTIN) > ДлинаСтрокиGTIN Тогда
					ПродукцияПоGTIN.ЗаполнитьЗначения(ВыборкаGTIN.GTIN, "GTIN");
					ДлинаСтрокиGTIN = СтрДлина(ВыборкаGTIN.GTIN);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаПродукцииПоGTIN Из ПродукцияПоGTIN Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаМаркируемойПродукции.Добавить(), СтрокаПродукцииПоGTIN);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИСМПУТ_КонтрагентНеРезидент(Контрагент) Экспорт
	
	ЮрФизЛицоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	
	Возврат ЮрФизЛицоКонтрагента = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	
КонецФункции

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
//
Процедура ПроверкаИПодборПродукцииИСМПУТ_ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ПерваяСтрокаКоллекции = ТабличнаяЧасть[0];
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПерваяСтрокаКоллекции, "Характеристика") Тогда
			ПараметрыЗаполненияРеквизитов.Вставить(
				"ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПерваяСтрокаКоллекции, "Серия") Тогда
			ПараметрыЗаполненияРеквизитов.Вставить(
				"ЗаполнитьПризнакТипНоменклатуры",
				Новый Структура("Номенклатура", "ТипНоменклатуры"));
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаполненияРеквизитов.Количество() > 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			ТабличнаяЧасть, ПараметрыЗаполненияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для расчета статусов указания серий во всех строках таблицы товаров
// см. НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий
// 
// Параметры:
// * Форма        - УправляемаяФорма - форма с таблицей товаров
//  ПараметрыУказанияСерий - Структура - параметры указания серий
//
Процедура ПроверкаИПодборПродукцииИСМПУТ_ЗаполнитьСтатусыУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Форма, ПараметрыУказанияСерий);
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИСМПУТ_НастройкиИсточникаКешаЧека() Экспорт
	
	Результат = ПроверкаИПодборПродукцииИС_НастройкиИсточникаКешаШтрихкодовУпаковок();
	
	Результат.Штрихкоды =        "АкцизныеМарки";
	Результат.ШтрихкодУпаковки = "АкцизнаяМарка";
	Результат.Серии            = "Серии";
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверкаИПодборПродукцииИСМПУТ_ПриЗакрытииФормыПроверкиИПодбораВФормеРМК(Форма, Результат, ВидПродукцииИС) Экспорт
	
	ДанныеПроверкиИПодбора = ПолучитьИзВременногоХранилища(Результат);
	
	ИнтеграцияИСУТ_УдалитьСтрокиАкцизныхМарокПоВидуПродукции(Форма.Объект.АкцизныеМарки, ВидПродукцииИС);
	
	Для Каждого СтрокаАкцизныхМарок Из ДанныеПроверкиИПодбора.ТаблицаШтрихкодовВерхнегоУровня Цикл
		НоваяСтрокаАкцизныхМарок = Форма.Объект.АкцизныеМарки.Добавить();
		НоваяСтрокаАкцизныхМарок.АкцизнаяМарка = СтрокаАкцизныхМарок.ШтрихкодУпаковки;
	КонецЦикла;
	
	ОтборПоВидуПродукции  = Новый Структура("ВидПродукцииИС", ВидПродукцииИС);
	СтрокиПоВидуПродукции = Форма.Объект.Товары.НайтиСтроки(ОтборПоВидуПродукции);
	
	ДобавленныеСтроки = Новый Массив;
	ИзмененныеСтроки  = Новый Массив;
	
	Для Каждого СтрокаПродукции Из ДанныеПроверкиИПодбора.ТаблицаПодобраннойПровереннойПродукции Цикл
		Если СтрокаПродукции.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПродукцияНайдена = Ложь;
		
		Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
			Если СтрокаПродукции.Номенклатура = СтрокаПоВидуПродукции.Номенклатура
				И СтрокаПродукции.Характеристика = СтрокаПоВидуПродукции.Характеристика
				И СтрокаПродукции.Серия = СтрокаПоВидуПродукции.Серия Тогда
				ПродукцияНайдена = Истина;
				Если ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции) = Неопределено Тогда
					СтрокаПоВидуПродукции.Количество = СтрокаПродукции.КоличествоПодобрано;
					ИзмененныеСтроки.Добавить(СтрокаПоВидуПродукции);
				Иначе
					СтрокаПоВидуПродукции.Количество = СтрокаПоВидуПродукции.Количество + СтрокаПродукции.КоличествоПодобрано;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПродукцияНайдена Тогда
			НоваяСтрокаТоваров = Форма.Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, СтрокаПродукции);
			НоваяСтрокаТоваров.Количество = СтрокаПродукции.КоличествоПодобрано;
			ДобавленныеСтроки.Добавить(НоваяСтрокаТоваров);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаПоВидуПродукции Из СтрокиПоВидуПродукции Цикл
		Если ИзмененныеСтроки.Найти(СтрокаПоВидуПродукции) = Неопределено Тогда
			Форма.Объект.Товары.Удалить(СтрокаПоВидуПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Форма.ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		Форма.Объект, НоменклатураСервер.ПараметрыУказанияСерий(Форма.Объект, Документы.ЧекККМ));
	
	ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(Форма, "Объект", "АкцизныеМарки", "АкцизнаяМарка");
	ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ_НастройкиИсточникаКешаЧека());
	
	ШтрихкодированиеИС_ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

Функция ПроверкаИПодборПродукцииИСМПУТ_АдресДанныхПроверкиМаркируемойПродукцииЧекККМ(ПараметрыСканирования, Объект, УникальныйИдентификатор, ВидМаркируемойПродукции) Экспорт
	
	СписокШтрихкодов = Объект.АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка");
	ШтрихкодыМаркируемойПродукции = ИнтеграцияИСУТ_ШтрихкодыСодержащиеВидыПродукции(
		СписокШтрихкодов, ВидМаркируемойПродукции);
	
	ДанныеПроверяемогоДокумента = ШтрихкодированиеИС_ВложенныеШтрихкодыУпаковок(
		ШтрихкодыМаркируемойПродукции, ПараметрыСканирования);
	
	ТаблицаМаркируемойПродукции = ПроверкаИПодборПродукцииИСМП.ТаблицаМаркируемойПродукцииДокумента(Объект, ВидМаркируемойПродукции);
	
	ДанныеХранилища = Новый Структура("ДеревоУпаковок, МаркированныеТовары, ТаблицаМаркируемойПродукции",
		ДанныеПроверяемогоДокумента.ДеревоУпаковок,
		ДанныеПроверяемогоДокумента.МаркированныеТовары,
		ТаблицаМаркируемойПродукции);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СобытияФорм

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении".
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФорм_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормЛокализация_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- Объект - записываемый объект.
//	ПараметрыЗаписи			- Структура - дополнительные параметры записи.
//
Процедура СобытияФорм_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СобытияФормЛокализация_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
		
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура СобытияФорм_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормЛокализация_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);

КонецПроцедуры

#КонецОбласти

#Область СобытияФормЛокализация

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура СобытияФормЛокализация_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	СобытияФормИС_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС_ИнициализироватьКэшМаркируемойПродукции(Форма);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормЛокализация_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИС_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	Возврат;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- Объект - объект, который будет прочитан.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура СобытияФормЛокализация_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормИС_ПослеЗаписиНаСервере(Форма);
	Возврат;
		
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИС

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ГосИС
//   в прикладные формы конфигурации - потребителя библиотеки ГосИС.
//   Содержит настройки встраивания 1 реквизита формы в связке с 1 элементом.
//
// ВозвращаемоеЗначение:
//  ПараметрыИнтеграции - Структура - значения, используемые для интеграции форматированной строки в прикладной документ:
//   * Ключ                       - Строка - ключ настроек интеграции
//   * ИмяЭлементаФормы           - Строка - имя элемента для размещения на форме
//   * ИмяРодительскойГруппыФормы - Строка - имя группы для размещения на форме (для унификации она всегда создается)
//   * РазмещениеВ                - Строка - имя группы/страницы формы где будет размещаться создаваемая группа
//   * РазмещениеПеред            - Строка - имя элемента формы перед которым будет размещаться создаваемая группа
//   * ИмяРеквизитаФормы          - Строка - имя реквизита формы, содержащего форматированную строку (для создания)
//   * Заголовок                  - Строка - заголовок создаваемого реквизита (пустой = не отображать).
//
Функция СобытияФормИС_ПараметрыИнтеграцииДляДокументаОснования() Экспорт
	
	ПараметрыНадписи = Новый Структура();
	ПараметрыНадписи.Вставить("Ключ",                       "ЗаполнениеТекстаДокументаГосИС");
	ПараметрыНадписи.Вставить("ИмяЭлементаФормы",           "");
	ПараметрыНадписи.Вставить("ИмяРодительскойГруппыФормы", "ГруппаСостояниеГосИС");
	ПараметрыНадписи.Вставить("РазмещениеВ",                "");
	ПараметрыНадписи.Вставить("РазмещениеПеред",            "");
	ПараметрыНадписи.Вставить("ИмяРеквизитаФормы",          "");
	ПараметрыНадписи.Вставить("Заголовок",                  "");
	
	Возврат ПараметрыНадписи;
	
КонецФункции

Процедура СобытияФормИС_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ШтрихкодированиеИС_ИнициализироватьКэшМаркируемойПродукции(Форма);
	ТребуетсяЗаполнениеРеквизитов = Ложь;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		СобытияФормИС_МодификацияФормы(Форма);
		ТребуетсяЗаполнениеРеквизитов = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСПереопределяемый_ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
		
		Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
			Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
			
			ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуРМК(Форма);
			
		ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
			Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
			
			ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуЧека(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Модифицирует прикладные формы: добавляет необходимые реквизиты, элементы, команды ГосИС
//   Требуется выполнить до прочей работы с ГосИС в прикладных формах.
//
// Параметры:
//   Форма - УправляемаяФорма - модифицируемая форма
//
Процедура СобытияФормИС_МодификацияФормы(Форма)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	МодулиМодификацииФормыГосИС = Новый Массив;
	ДобавляемыеРеквизиты = Новый Массив;
	СобытияФормИСПереопределяемый_ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиМодификацииФормыГосИС);
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие;
	
	Если МодулиМодификацииФормыГосИС.Количество() Тогда
		
		Реквизит = Новый РеквизитФормы("ПараметрыИнтеграцииГосИС", Новый ОписаниеТипов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Для Каждого ИмяМодуля Из МодулиМодификацииФормыГосИС Цикл
			
			МодульМодификации = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			МодульМодификации.СобытияФормИСМП_МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
			
		КонецЦикла;
		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
		
		Для Каждого ИмяМодуля Из МодулиМодификацииФормыГосИС Цикл
			
			МодульМодификации = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
			МодульМодификации.СобытияФормИСМП_МодификацияЭлементовФормы(Форма);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Серверная процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, в которой происходит событие.
//   Элемент                 - Произвольный     - источник события
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИС_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Элемент = "Подключаемый_ОбработатьВводШтрихкода" Тогда 
		
		ДополнительныеПараметры.РезультатОбработкиШтрихкода = ШтрихкодированиеИС_ОбработатьВводШтрихкода(
			Форма, 
			ДополнительныеПараметры.ДанныеШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения,
			ДополнительныеПараметры.ПараметрыСканирования);
		
	ИначеЕсли Элемент = "Подключаемый_ВыполнитьДействие" Тогда 
		
		ПараметрыОбработкиВыбора    = ШтрихкодированиеИС_ИнициализироватьПараметрыОбработкиВыбора(
			ДополнительныеПараметры.РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ДополнительныеПараметры.РезультатОбработкиШтрихкода = ШтрихкодированиеИС_ВыполнитьДействие(
			Форма,
			ДополнительныеПараметры.Действие,
			ПараметрыОбработкиВыбора);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			СобытияФормИСМП_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СобытияФормИС_ПослеЗаписиНаСервере(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			ИСМПТВыбытиеКодовМаркировкиСервер.СобытияФормИСМП_ПослеЗаписиНаСервере(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение созданных реквизитов ГосИС 
//   Требуется выполнить при открытии формы после создания реквизитов, после записи объекта (перезаполнение).
//
// Параметры:
//   Форма - УправляемаяФорма - заполняемая форма.
//
Процедура СобытияФормИС_ЗаполнениеРеквизитовГосИС(Форма)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Форма.ПараметрыИнтеграцииГосИС Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Если КлючИЗначение.Значение.Свойство("МодульЗаполнения") Тогда
				ИмяМодуляЗаполнения = КлючИЗначение.Значение.МодульЗаполнения;
				Если ЗначениеЗаполнено(ИмяМодуляЗаполнения) Тогда
					МодульЗаполнения = ОбщегоНазначения.ОбщийМодуль(ИмяМодуляЗаполнения);
					МодульЗаполнения.ЗаполнениеРеквизитовФормы(Форма);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ГосИС
//   в прикладные формы конфигурации - потребителя библиотеки ГосИС.
//   Содержит общие настройки встраивания подсистемы
//
// ВозвращаемоеЗначение:
//  ПараметрыИнтеграции - Структура - значения, используемые для интеграции подсистемы в прикладную форму:
//   * МодульЗаполнения        - Строка - модуль в котором размещаются действия по заполнению реквизитов ГосИС при открытии формы
//   * ИмяРеквизитаФормыОбъект - Строка - имя реквизита формы, содержащего связанный объект.
//
Функция СобытияФормИС_ОбщиеПараметрыИнтеграции(ИмяМодуляЗаполнения = Неопределено) Экспорт
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("МодульЗаполнения",        ИмяМодуляЗаполнения);
	ОбщиеПараметры.Вставить("ИмяРеквизитаФормыОбъект", "Объект");
	Возврат ОбщиеПараметры;
	
КонецФункции

// Добавляет поле интеграции на форму-потребитель (форму объекта прикладного документа конфигурации)
//
// Параметры:
// 	Форма               - УправляемаяФорма - форма-потребитель интеграции
// 	ПараметрыИнтеграции - Структура        - (См. ПараметрыИнтеграцииДляДокументаОснования)
// 	ГруппаИнтеграции    - ГруппаФормы      - группа, в которую будет добавлено поле интеграции
//
Процедура СобытияФормИС_ДобавитьПолеИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, ГруппаИнтеграции)
	
	ЭлементыФормы = Форма.Элементы;
	
	ТекстСостояния = ЭлементыФормы.Добавить(
		ПараметрыИнтеграции.ИмяЭлементаФормы,
		Тип("ПолеФормы"),
		ГруппаИнтеграции);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыИнтеграции.Заголовок) Тогда
		ТекстСостояния.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		ТекстСостояния.Заголовок = ПараметрыИнтеграции.Заголовок;
	КонецЕсли;
	
	ТекстСостояния.Вид = ВидПоляФормы.ПолеНадписи;
	ТекстСостояния.АвтоМаксимальнаяШирина = Ложь;
	ТекстСостояния.ПутьКДанным = ПараметрыИнтеграции.ИмяРеквизитаФормы;
	
КонецПроцедуры

//Добавляет в элементы формы-потребителя группу и элемент для взаимодействия со связанными библиотечными объектами ГосИС
//
//Параметры:
//   Форма     - УправляемаяФорма - форма-потребитель интеграции
//   Настройки - Структура        - настройки расположения и интерфейса элементов интеграции в прикладной форме
//     (См. ПараметрыИнтеграцииДляДокументаОснования).
//
Процедура СобытияФормИС_ВстроитьСтрокуИнтеграцииВДокументОснованиеПоПараметрам(Форма, Настройки) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить(Настройки);
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ПараметрыИнтеграции.ИмяЭлементаФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИнтеграцииГосИС = СобытияФормИС_ДобавитьПолучитьГруппуИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции);
	
	СобытияФормИС_ДобавитьПолеИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции, ГруппаИнтеграцииГосИС);
	
КонецПроцедуры

// Добавляет группу интеграции на форму-потребитель (форму объекта прикладного документа конфигурации)
//
// Параметры:
//   Форма               - УправляемаяФорма - форма-потребитель интеграции
//   ПараметрыИнтеграции - Структура (См. ПараметрыИнтеграцииДляДокументаОснования)
//
// Возвращаемое значение:
//   ГруппаФормы         - добавленная группа интеграции
//
Функция СобытияФормИС_ДобавитьПолучитьГруппуИнтеграцииНаФормуДокументаОснования(Форма, ПараметрыИнтеграции)
	
	ЭлементыФормы = Форма.Элементы;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементыФормы, ПараметрыИнтеграции.ИмяРодительскойГруппыФормы) Тогда
		Возврат ЭлементыФормы[ПараметрыИнтеграции.ИмяРодительскойГруппыФормы];
	КонецЕсли;
	
	ГруппаИнтеграцииГосИС = ЭлементыФормы.Добавить(
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы,
		Тип("ГруппаФормы"),
		?(ЗначениеЗаполнено(ПараметрыИнтеграции.РазмещениеВ), ЭлементыФормы[ПараметрыИнтеграции.РазмещениеВ], Неопределено));
		
	Если ЗначениеЗаполнено(ПараметрыИнтеграции.РазмещениеПеред) Тогда
		ЭлементыФормы.Переместить(ГруппаИнтеграцииГосИС,
		ГруппаИнтеграцииГосИС.Родитель,
		ЭлементыФормы[ПараметрыИнтеграции.РазмещениеПеред]);
	КонецЕсли;
		
	ГруппаИнтеграцииГосИС.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаИнтеграцииГосИС.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаИнтеграцииГосИС.ОтображатьЗаголовок = Ложь;
	ГруппаИнтеграцииГосИС.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Возврат ГруппаИнтеграцииГосИС;
	
КонецФункции

#КонецОбласти

#Область СобытияФормИСПереопределяемый

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//	Форма - УправляемаяФорма - Форма, в которой нужно установить условное оформление,
Процедура СобытияФормИСПереопределяемый_УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, "СерииВсегдаВТЧТовары", ИмяПоляВводаСерии, ПутьКПолюОтбораСтатусУказанияСерий, ПутьКПолюОтбораТипНоменклатуры);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура СобытияФормИСПереопределяемый_УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//++ НЕ ГОСИС
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - УправляемаяФорма - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура СобытияФормИСПереопределяемый_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы = "Документ.МаркировкаТоваровГИСМ.Форма.ФормаСписка"
	 ИЛИ ИмяФормы = "Документ.ПеремаркировкаТоваровГИСМ.Форма.ФормаСписка" Тогда
		ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(Форма);
	ИначеЕсли ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура СобытияФормИСПереопределяемый_УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	//++ НЕ ГОСИС
	СвязиПараметровВыбора = ОбщегоНазначения_СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Характеристика", ПутьКДаннымХарактеристики));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура СобытияФормИСПереопределяемый_УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	//++ НЕ ГОСИС
	СвязиПараметровВыбора = ОбщегоНазначения_СкопироватьРекурсивно(
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

//Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - УправляемаяФорма - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура СобытияФормИСПереопределяемый_ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	//++ НЕ ГОСИС
	Модули = Новый Соответствие;
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
			Модули.Вставить("ИСМПТВыбытиеКодовМаркировкиСервер");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ИнтеграцияИСМП_ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("ИСМПТВыбытиеКодовМаркировкиСервер");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Модули Цикл
		МодулиИнтеграции.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура СобытияФормИСПереопределяемый_ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		Если Элемент = "Товары" Тогда
			
			ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ_НастройкиИсточникаКешаЧека(), Истина);
			ШтрихкодированиеИС_ОбновитьКэшМаркируемойПродукции(Форма);
			
		ИначеЕсли Элемент = "ЗавершенаПроверкаКоличества" Тогда
			
			АкцизныеМарки = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АкцизныеМарки);
			Форма.Объект.АкцизныеМарки.Загрузить(АкцизныеМарки);
			ПроверкаИПодборПродукцииИС_ЗаполнитьКешШтрихкодовУпаковок(Форма, "Объект", "АкцизныеМарки", "АкцизнаяМарка");
			ПроверкаИПодборПродукцииИС_ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ_НастройкиИсточникаКешаЧека());
			ШтрихкодированиеИС_ОбновитьКэшМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			СобытияФормИСМППереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - источник вызова
Процедура СобытияФормИСПереопределяемый_ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСМП

Процедура СобытияФормИСМП_МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты) Экспорт
	
	СобытияФормИСМП_ДобавитьОбщиеНастройкиВстраивания(Форма, ПараметрыИнтеграции);
	СобытияФормИСМП_ДобавитьРеквизитТекстСостояниеИСМП(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
	СобытияФормИСМП_ДобавитьЭлементыПроверкиПодбораИСМП(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура СобытияФормИСМП_ДобавитьОбщиеНастройкиВстраивания(Форма, ПараметрыИнтеграции)
	
	ОбщиеНастройки = СобытияФормИС_ОбщиеПараметрыИнтеграции("ИСМПТВыбытиеКодовМаркировкиСервер");
	ОбщиеНастройки.Вставить("ВидыПродукции", Новый Массив);
	Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП") Тогда
		ОбщиеНастройки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	КонецЕсли;
	ПараметрыИнтеграции.Вставить("ИСМП", ОбщиеНастройки);
	
КонецПроцедуры

// Встраивает реквизит - форматированную строку перехода к ИСМП в прикладные формы
// 
// Параметры:
//   Форма                - УправляемаяФорма - форма в которую происходит встраивание
//   ПараметрыИнтеграции  - Структура        - (См. ПараметрыИнтеграцииИСМП)
//   ДобавляемыеРеквизиты - Массив           - массив реквизитов формы к добавлению
Процедура СобытияФормИСМП_ДобавитьРеквизитТекстСостояниеИСМП(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты)
	
	ПараметрыИнтеграцииИСМП = СобытияФормИСМП_ПараметрыИнтеграцииГиперссылкиИСМП(Форма);
	
	Если ЗначениеЗаполнено(ПараметрыИнтеграцииИСМП.ИмяРеквизитаФормы) Тогда
		ПараметрыИнтеграции.Вставить("ИСМП.ДокументОснование", ПараметрыИнтеграцииИСМП);
		Реквизит = Новый РеквизитФормы(
			ПараметрыИнтеграцииИСМП.ИмяРеквизитаФормы,
			Новый ОписаниеТипов("ФорматированнаяСтрока"),,
			ПараметрыИнтеграцииИСМП.Заголовок);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции реквизитов ИС МП
//   в прикладные формы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - форма для которой возвращаются параметры интеграции
//
// ВозвращаемоеЗначение:
//   Структура - (См. СобытияФормИС.ПараметрыИнтеграцииДляДокументаОснования).
//
Функция СобытияФормИСМП_ПараметрыИнтеграцииГиперссылкиИСМП(Форма = Неопределено)
	
	ПараметрыНадписи = СобытияФормИС_ПараметрыИнтеграцииДляДокументаОснования();
	ПараметрыНадписи.Вставить("Ключ",             "ЗаполнениеТекстаДокументаИСМП");
	ПараметрыНадписи.Вставить("МодульЗаполнения", "СобытияФормИСМП");
	
	Если НЕ(Форма = Неопределено) Тогда
		СобытияФормИСМППереопределяемый_ПриОпределенииПараметровИнтеграцииГиперссылкиИСМП(Форма, ПараметрыНадписи);
	КонецЕсли;
	
	Возврат ПараметрыНадписи;
	
КонецФункции

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСМП_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМППереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура СобытияФормИСМП_ПослеЗаписиНаСервере(Форма) Экспорт
	
	СобытияФормИСМППереопределяемый_ПослеЗаписиНаСервере(Форма);
	
КонецПроцедуры

Процедура СобытияФормИСМП_ДобавитьЭлементыПроверкиПодбораИСМП(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты)
	
	СтандартнаяОбработка = Истина;
	СобытияФормИСМППереопределяемый_ПриОпределенииПараметровИнтеграции(Форма, СтандартнаяОбработка);
	Если СтандартнаяОбработка Тогда
		Для Каждого ВидПродукции Из ПараметрыИнтеграции.Получить("ИСМП").ВидыПродукции Цикл
			ПроверкаИПодборПродукцииИСМП.МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ВидПродукции);
		КонецЦикла;;
	КонецЕсли;
	
КонецПроцедуры

Процедура СобытияФормИСМП_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СобытияФормИСМППереопределяемый_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СобытияФормИСМП_МодификацияЭлементовФормы(Форма) Экспорт
	
	ПроверкаИПодборПродукцииИСМП.МодификацияЭлементовФормы(Форма);
	СобытияФормИС_ВстроитьСтрокуИнтеграцииВДокументОснованиеПоПараметрам(Форма, "ИСМП.ДокументОснование");
	
КонецПроцедуры

Процедура СобытияФормИСМП_ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры


#КонецОбласти

#Область СобытияФормИСМППереопределяемый

//Переопределение параметров интеграции ИСМП (расположения форматированной строки перехода к связанному объекту)
//
//Параметры:
//   Форма            - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   ПараметрыНадписи - Структура        - (см. СобытияФормИСМП.ПараметрыИнтеграцииГиперссылкиИСМП)
//
Процедура СобытияФормИСМППереопределяемый_ПриОпределенииПараметровИнтеграцииГиперссылкиИСМП(Форма, ПараметрыНадписи) Экспорт
	
	//++ НЕ ГОСИС
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура")
		И ИнтеграцияИСМП_ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
		
		ПараметрыНадписи.Вставить("ИмяЭлементаФормы",  "ТекстДокументаИСМП");
		ПараметрыНадписи.Вставить("ИмяРеквизитаФормы", "ТекстДокументаИСМП");
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "ГруппаСостояние") Тогда
		ПараметрыНадписи.РазмещениеВ = "ГруппаСостояние";
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Серверная переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСМППереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК" Тогда
			
		Если Элемент = "Событие" И СтрНачинаетсяС(ДополнительныеПараметры.ИмяСобытия,"ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
			
			ПроверкаИПодборПродукцииИСМПУТ_ПриЗакрытииФормыПроверкиИПодбораВФормеРМК(
				Форма,
				ДополнительныеПараметры.Параметр,
				Перечисления.ВидыПродукцииИС.Получить(Число(СтрЗаменить(ДополнительныеПараметры.ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС", ""))));
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке табличной части.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - редактируемая строка таблицы,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Структура - (См. ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий).
Процедура СобытияФормИСМППереопределяемый_ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
		
		Склад = Неопределено;
		Если Не ПустаяСтрока(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			Склад = ИсточникЗначенийВФорме[ПараметрыУказанияСерий.ИмяПоляСклад];
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Новый Структура("НалогообложениеНДС, Дата", 
			ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")));
	КонецЕсли;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

Процедура СобытияФормИСМППереопределяемый_ПослеЗаписиНаСервере(Форма) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределение параметров интеграции ИСМП (расположения команды проверки и подбора)
//
// Параметры:
//   Форма                - УправляемаяФорма - прикладная форма для встраивания форматированной строки
//   СтандартнаяОбработка - Булево - стандартная работа с элементами проверки подбора
//
Процедура СобытияФормИСМППереопределяемый_ПриОпределенииПараметровИнтеграции(Форма, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "ОбщаяФорма.ПроверкаЗаполненияДокументов"
		Или Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового"
		Или Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
			СтандартнаяОбработка = Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
			СтандартнаяОбработка = Ложь;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура СобытияФормИСМППереопределяемый_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК" Тогда
		ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуРМК(Форма);
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормЕГАИС

Процедура СобытияФормЕГАИС_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СобытияФормЕГАИСПереопределяемый_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормЕГАИСПереопределяемый

Процедура СобытияФормЕГАИСПереопределяемый_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		ИнтеграцияИСУТ_МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФункциональныеОпции

Процедура УстановитьЗначенияСвязанныхОпцийВестиУчетТабачнойПродукции() Экспорт
	
	Константы.КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП.Установить(Ложь);
	Константы.КонтролироватьСтатусыКодовМаркировкиМОТП.Установить(Ложь);
	Константы.ДатаОбязательнойМаркировкиТабачнойПродукцииМОТП.Установить(Дата('2021.10.01 00:00:00'));
	
КонецПроцедуры

#КонецОбласти

