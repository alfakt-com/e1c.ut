
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВАЛЮТАМИ
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДанныеВалютыУУ(Дата) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Валюта", Константы.ВалютаУправленческогоУчета.Получить());
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Результат.Валюта, Дата);
	Результат.Вставить("Курс", КурсВалюты.Курс);
	Результат.Вставить("Кратность", КурсВалюты.Кратность);
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеВалютыБУ(Дата) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Результат.Валюта, Дата);
	Результат.Вставить("Курс", КурсВалюты.Курс);
	Результат.Вставить("Кратность", КурсВалюты.Кратность);
	Возврат Результат;
КонецФункции

Функция ПолучитьДанныеВалюты(Валюта, Дата) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Валюта", Валюта);
	КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Результат.Валюта, Дата);
	Результат.Вставить("Курс", КурсВалюты.Курс);
	Результат.Вставить("Кратность", КурсВалюты.Кратность);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ СВЕДЕНИЙ "Связь партий и документов"
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДокументИзСвязейДокументовИПартий(Партия) Экспорт
	Результат = Неопределено;
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	swСвязьПартийИДокументов.Документ
	        |ИЗ
	        |	РегистрСведений.swСвязьПартийИДокументов КАК swСвязьПартийИДокументов
	        |ГДЕ
	        |	swСвязьПартийИДокументов.swПартия = &Партия";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Партия", Партия);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ СВЕДЕНИЙ "Лица, уполномоченные подписывать счета-фактуры"
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДанныеУполномоченногоЛицаДляПодписиСФ() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЕстьУполномоченноеЛицо", Ложь);
	Результат.Вставить("УполномоченныйПодписыватьЗаРуководителя", "");
	Результат.Вставить("УполномоченныйПодписыватьЗаГлавногоБухгалтера", "");
	Результат.Вставить("ДолжностьУполномоченного", "");
	Результат.Вставить("ФИОУполномоченного", "");
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.Пользователь,
	        |	Данные.Должность,
	        |	Данные.ЗаголовокЗаРуководителя,
	        |	Данные.ЗаголовокЗаГлавногоБухгалтера
	        |ИЗ
	        |	РегистрСведений.swЛицаУполномоченныеПодписыватьСФ КАК Данные
	        |ГДЕ
	        |	Данные.Пользователь = &Пользователь";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ЕстьУполномоченноеЛицо = Истина;
		Если ЗначениеЗаполнено(Выборка.Пользователь.ФизическоеЛицо) Тогда
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.ФизическоеЛицо);
		Иначе
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.Наименование);
		КонецЕсли;
		Результат.УполномоченныйПодписыватьЗаРуководителя = Выборка.ЗаголовокЗаРуководителя + ": " + ФИОУполномоченного;
		Результат.УполномоченныйПодписыватьЗаГлавногоБухгалтера = Выборка.ЗаголовокЗаГлавногоБухгалтера + ": " + ФИОУполномоченного;
		Результат.ДолжностьУполномоченного = Выборка.Должность;
		Результат.ФИОУполномоченного = ФИОУполномоченного;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ СВЕДЕНИЙ "Лица, уполномоченные подписывать накладные"
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДанныеУполномоченногоЛицаДляПодписиНакладной() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЕстьУполномоченноеЛицо", Ложь);
	Результат.Вставить("ЗаголовокГлавныйБухгалтер", "Главный бухгалтер");
	Результат.Вставить("ДолжностьУполномоченного", "");
	Результат.Вставить("ФИОУполномоченного", "");
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.Пользователь,
	        |	Данные.Должность,
	        |	Данные.ЗаголовокЗаГлавногоБухгалтера
	        |ИЗ
	        |	РегистрСведений.swЛицаУполномоченныеПодписыватьНакладные КАК Данные
	        |ГДЕ
	        |	Данные.Пользователь = &Пользователь";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ЕстьУполномоченноеЛицо = Истина;
		Если ЗначениеЗаполнено(Выборка.Пользователь.ФизическоеЛицо) Тогда
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.ФизическоеЛицо);
		Иначе
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.Наименование);
		КонецЕсли;
		Результат.ЗаголовокГлавныйБухгалтер = Выборка.ЗаголовокЗаГлавногоБухгалтера;
		Результат.ДолжностьУполномоченного = Выборка.Должность;
		Результат.ФИОУполномоченного = ФИОУполномоченного;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГИСТРОМ СВЕДЕНИЙ "Лица, уполномоченные подписывать ПКО"
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДанныеУполномоченногоЛицаДляПодписиПКО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ЕстьУполномоченноеЛицо", Ложь);
	Результат.Вставить("ЗаголовокУполномоченноеЛицо", "");
	Результат.Вставить("ФИОУполномоченногоЛица", "");
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.Пользователь,
	        |	Данные.ЗаголовокПодписи,
	        |	Данные.КонцовкаРасшифровкиПодписи
	        |ИЗ
	        |	РегистрСведений.swЛицаУполномоченныеПодписыватьПКО КАК Данные
	        |ГДЕ
	        |	Данные.Пользователь = &Пользователь";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.ЕстьУполномоченноеЛицо = Истина;
		Если ЗначениеЗаполнено(Выборка.Пользователь.ФизическоеЛицо) Тогда
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.ФизическоеЛицо);
		Иначе
			ФИОУполномоченного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Выборка.Пользователь.Наименование);
		КонецЕсли;
		Результат.ЗаголовокУполномоченноеЛицо = Выборка.ЗаголовокПодписи;
		Результат.ФИОУполномоченногоЛица = ФИОУполномоченного + ?(Выборка.КонцовкаРасшифровкиПодписи = "", "", ", ") + Выборка.КонцовкаРасшифровкиПодписи;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ ВЗАИМОРАСЧЕТОВ С КОНТРАГЕНТАМИ
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьНастройкиКонтроляЗадолженности(Партнер, Валюта, Дата) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("НеКонтролироватьЗадолженность", Ложь);
	Результат.Вставить("РазрешеннаяСуммаЗадолженности", 0);
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	Данные.НеКонтролироватьЗадолженность,
	        |	Данные.РазрешеннаяСуммаЗадолженности
	        |ИЗ
	        |	РегистрСведений.swНастройкиКонтроляЗадолженностиКонтрагентов.СрезПоследних(
	        |			&Период,
	        |			Партнер = &Партнер
	        |				И Валюта = &Валюта) КАК Данные";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.НеКонтролироватьЗадолженность = Выборка.НеКонтролироватьЗадолженность;
		Результат.РазрешеннаяСуммаЗадолженности = Выборка.РазрешеннаяСуммаЗадолженности;
	КонецЕсли;
	Возврат Результат;
КонецФункции
