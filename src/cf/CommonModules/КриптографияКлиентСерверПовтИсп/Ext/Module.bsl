// При вызове функции из клиентского контекста с передачей управления на сервер
Функция НовыйКриптопровайдер(УникальныйИдентификаторФормыКлиента = Неопределено, РежимТишины = Ложь, ТолькоПодключение = Ложь) Экспорт
 	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	// Для сохранения ссылки в контексте перехода с клиента на сервер (в случае если криптопровацйдер создается на клиенте), 
	// выделение адреса ссылки происходит в контексте вызова (на клиенте)
	СсылкаНаМодуль = Контейнер.АдресБиблиотекиКриптографии(УникальныйИдентификаторФормыКлиента);
	
	УдалосьПодключить = ПодключитьВнешнююКомпоненту(СсылкаНаМодуль, Контейнер.ИмяКомпонентыКриптографии(), ТипВнешнейКомпоненты.Native); 
	
	Если УдалосьПодключить Тогда
		
		Криптопровайдер = Новый(Контейнер.ИмяОбъектаКриптографии());
		
	Иначе
		
		#Если Сервер ИЛИ ВнешнееСоединение Тогда
			Если РежимТишины Тогда
				Возврат Неопределено;
			Иначе				
				// Это сервер. На сервере НЕ требуется установка внешней компоненты перед подключением.	
				ВызватьИсключение НСтр("ru = 'Не удалось подключить внешнюю компоненту для работы с криптографией.'");
			КонецЕсли;
			
		#Иначе
			
			Если НЕ ТолькоПодключение Тогда
				
				// отказ от модальности, преполагаем только открытие формы установки криптографии.
				ОткрытьФорму(Контейнер.ПолноеИмяФормыУстановкаКриптографии());
				Возврат Неопределено;
				
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(СсылкаНаМодуль);
	
	#Если Клиент Тогда
	Если НЕ ТолькоПодключение И НЕ Контейнер.ВерсияВнешнегоМодуляКриптографии() = СтрЗаменить(Криптопровайдер.Версия, ",", ".") Тогда 
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ОбновлениеКомпонентыКриптографии");
		ВызватьИсключение НСтр("ru = 'Новая версия криптобиблиотеки загружена в информационную базу, требуется обновление на компьютере пользователя'");
	КонецЕсли;
	#КонецЕсли
	
	Возврат Криптопровайдер;
	
КонецФункции

