
#Область Информация

Функция ПолучитьЛокализациюКонфигурации() Экспорт
	
	//UKR
	//BEL
	//KAZ
	Возврат "KAZ";
	
КонецФункции

Функция ПолучитьЛокализациюБитрикс24() Экспорт
	
	//ua
	//en
	
	Возврат "ru";
	
КонецФункции

Функция ПолучитьНазваниеСтраны() Экспорт
	Возврат "КАЗАХСТАН";	
КонецФункции

Функция ПолучитьСлужебноеНазваниеКонфигурации() Экспорт
	
	Возврат "UT 3";
	
КонецФункции

Функция ПолучитьНазваниеМодуля() Экспорт
	
	Возврат "1С:Синхронизация Битрикс24";
	
КонецФункции

Функция ПолучитьИмяРасширения() Экспорт
	
	Возврат "СинхронизацияСБитрикс24";
	
КонецФункции

Функция Версия() Экспорт
	
	Результат = "2.0.0.0";
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаОбновленияДанныхМодуляОбменаСБитрикс24() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Версия();
	
	ПредыдущаяВерсия =  Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("ВерсияМодуля");
	
	ПервыйЗапуск = НЕ ПредыдущаяВерсия = Версия;
	
	Если НЕ ПервыйЗапуск Тогда
		Возврат Истина;
	КонецЕсли;
	
	Пока ПредыдущаяВерсия <> Версия Цикл
		
		ПредыдущаяВерсия =  Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("ВерсияМодуля");
		
		Если НЕ ЗначениеЗаполнено(ПредыдущаяВерсия) Тогда
			
			Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("ВерсияМодуля", Версия)
			
		Иначе  
			
			Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("ВерсияМодуля", Версия);
			
			Возврат Истина;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСФС

// Функция - возвращает путь к файлам/папкам, в звависимости от ОС
//
// Параметры:
//  ПлатформаWindows - 	 Признак того, что эта ОС - Windows 
//  Путь			 - 	 Адрес к файлу/папке 
// Возвращаемое значение:
//   Адрес к файлу/папке 
Функция ПолучитьПутьДляПлатформы(ПлатформаWindows, Путь) Экспорт
	
	Если ПлатформаWindows Тогда
		ЧтоМенять = "/";
		НаЧтоМенять = "\";
	Иначе
		ЧтоМенять = "\";
		НаЧтоМенять = "/";
	КонецЕсли;
	
	Путь = СтрЗаменить(Путь, ЧтоМенять, НаЧтоМенять);
	
	Возврат Путь;
	
КонецФункции

// Функция - проверяет, существует ли указанный файл
//
// Параметры:
//  ИмяФайла - 	 Имя проверяемого файла 
// Возвращаемое значение:
//   Истина, если файл существует 
Функция СуществуетФайл(ИмяФайла) Экспорт
	ВыбФайл = Новый Файл(ИмяФайла);
	Если ВыбФайл.Существует()  Тогда  
		Возврат Истина;
	КонецЕсли;  
	Возврат Ложь;
КонецФункции

// Функция - очищает содержимое каталога 
//
// Параметры:
//  Каталог			 - 	 Каталог, в котором очищаются файлы 
//  ПараметрыОбмена	 - 	 Настройки узла обмена  
// Возвращаемое значение:
//   Истина, если каталог очищен 
Функция КаталогОчищен(Каталог, ПараметрыОбмена = Неопределено) Экспорт
	
	Попытка
		
		УдалитьФайлы(Каталог, "*.*");
		
	Исключение
		
		Сообщить("Не удалось очистить каталог обмена: (" + Каталог + ")");	
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьРасширениеФайлаПоНаименованию(ИмяФайла) Экспорт
	
	Если Сред(ИмяФайла, СтрДлина(ИмяФайла)-3,1) = "." тогда
		Расширение = Прав(ИмяФайла, 4);	
	ИначеЕсли Сред(ИмяФайла, СтрДлина(ИмяФайла)-4,1) = "." тогда
		Расширение = Прав(ИмяФайла, 5);
	ИначеЕсли Сред(ИмяФайла, СтрДлина(ИмяФайла)-2,1) = "." тогда
		Расширение = Прав(ИмяФайла, 3);
	Иначе
		Расширение = "";	
	КонецЕсли;
	
	Возврат Расширение;
	
КонецФункции

#КонецОбласти


#Область Логирование

Процедура ЗаданиеПроверитьУдалитьИсториюОбменов() Экспорт
	
	ОбрезатьИсториюОбменов 	 = ПолучитьЗначениеХранилищаНастроек("Логирование","ОбрезатьИсториюОбменов");
	
	Если НЕ ОбрезатьИсториюОбменов = Истина тогда
		Возврат;
	КонецЕсли;
	
	ЧислоДнейХраненияИстории = ПолучитьЗначениеХранилищаНастроек("Логирование","ЧислоДнейХраненияИстории");
	
	Если ЧислоДнейХраненияИстории = Неопределено тогда
		ЧислоДнейХраненияИстории = 14;
	КонецЕсли;
	
	ДатаУдаления = НачалоДня(ТекущаяДата()) - 60*60*24*ЧислоДнейХраненияИстории;
	
	Выборка = РегистрыСведений.Б24_Логирование.Выбрать(,ДатаУдаления); 
	
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();	
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтруктуруНастроекДляЛогирования(НастройкаСинхронизации, ВремяЗапуска, ВидЗапуска, НомерСообщения = 0) Экспорт
	
	ОбщиеНастройки = Новый Структура;
	
	ОбщиеНастройки.Вставить("ДатаФормирования"		, ТекущаяДата());
	ОбщиеНастройки.Вставить("НомерСообщения"		, НомерСообщения);
	ОбщиеНастройки.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ОбщиеНастройки.Вставить("ВремяЗапуска"			, Строка(Формат(ВремяЗапуска, "ДЛФ=T")));
	ОбщиеНастройки.Вставить("Измерение1"			, "");
	ОбщиеНастройки.Вставить("Измерение2"			, "");
	ОбщиеНастройки.Вставить("Измерение3"			, "");
	ОбщиеНастройки.Вставить("Измерение4"			, "");
	ОбщиеНастройки.Вставить("Измерение5"			, "");
	ОбщиеНастройки.Вставить("Измерение6"			, "");
	
	Если ВидЗапуска = "По расписанию" тогда
		ОбщиеНастройки.Измерение1 = "Обмен по расписанию: " + НастройкаСинхронизации.Наименование;
	ИначеЕсли ВидЗапуска = "Обмен в режиме реального времени" тогда
		ОбщиеНастройки.Измерение1 = "В режиме реального времени: " + НастройкаСинхронизации.Наименование;
	ИначеЕсли ВидЗапуска = "Интерактивная синхронизация" тогда
		ОбщиеНастройки.Измерение1 = "Интерактивная синхронизация: " + НастройкаСинхронизации.Наименование;	
	Иначе
		ОбщиеНастройки.Измерение1 = ВидЗапуска;
	КонецЕсли;
	
	Возврат ОбщиеНастройки;
	
КонецФункции

Процедура ДобавитьВЛог(ОбщиеНастройки, ТипСообщения, пСобытие) Экспорт
	
	//Сообщить(пСобытие);
	//Б_ОбщиеПроцедурыИФункцииСервер.ОтображениеСостояния(пСобытие);
	
	Если Лев(ОбщиеНастройки.Измерение1, 28) = "Интерактивная синхронизация:" тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Поле 			= Формат(ТекущаяДата(), "ДЛФ=T");
		Сообщение.ПутьКДанным	= ТипСообщения;
		Сообщение.Текст 		= пСобытие;
		Сообщение.Сообщить();
	КонецЕсли;
	
	ОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения + 1;
	
	НовыйЭлемент = РегистрыСведений.Б24_Логирование.СоздатьМенеджерЗаписи();
	
	НовыйЭлемент.НастройкаСинхронизации	= ОбщиеНастройки.НастройкаСинхронизации;
	
	НовыйЭлемент.Период 			= ТекущаяДата();
	НовыйЭлемент.ВремяСообщения 	= ТекущаяДата();
	НовыйЭлемент.НомерСообщения 	= ОбщиеНастройки.НомерСообщения;
	НовыйЭлемент.ВремяЗапуска 		= ОбщиеНастройки.ВремяЗапуска;
	НовыйЭлемент.Измерение1 			= ОбщиеНастройки.Измерение1;
	НовыйЭлемент.Измерение2 			= ОбщиеНастройки.Измерение2;
	НовыйЭлемент.Измерение3 			= ОбщиеНастройки.Измерение3;
	НовыйЭлемент.Измерение4 			= ОбщиеНастройки.Измерение4;
	НовыйЭлемент.Измерение5 			= ОбщиеНастройки.Измерение5;
	НовыйЭлемент.ТипСообщения 		= ТипСообщения;
	НовыйЭлемент.Сообщение 			= пСобытие;
	
	НовыйЭлемент.Записать();
	
	Если ТипСообщения = Перечисления.Б24_ТипыСообщений.КритическаяОшибка тогда
		
		ОбщиеНастройки.НомерСообщения = ОбщиеНастройки.НомерСообщения + 1;
		
		НовыйЭлемент.НастройкаСинхронизации	= ОбщиеНастройки.НастройкаСинхронизации;
		
		НовыйЭлемент.Период 			= ТекущаяДата();
		НовыйЭлемент.ВремяСообщения 	= ТекущаяДата();
		НовыйЭлемент.НомерСообщения 	= ОбщиеНастройки.НомерСообщения;
		НовыйЭлемент.ВремяЗапуска 		= ОбщиеНастройки.ВремяЗапуска;
		НовыйЭлемент.Измерение1 			= ОбщиеНастройки.Измерение1;
		НовыйЭлемент.Измерение2 			= "Критическая ошибка";
		НовыйЭлемент.ТипСообщения 		= ТипСообщения;
		НовыйЭлемент.Сообщение 			= пСобытие;
		
		НовыйЭлемент.Записать();
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОбрезатьЛог(НастройкаСинхронизации, ЧислоДнейХраненияИстории) Экспорт
	
	ДатаОбрезки = ТекущаяДата() - 60*60*24*ЧислоДнейХраненияИстории;
	
	Выборка = РегистрыСведений.Б24_Логирование.Выбрать(,ДатаОбрезки); 
	
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьМенеджерЗаписи().Удалить();	
	КонецЦикла;
	
конецПроцедуры

#КонецОбласти


#Область РаботаСОбщимиНастройками

Функция ПолучитьЗначениеХранилищаНастроек(Настройка, НаименованиеКлюча = "") Экспорт
	
	Результат = Неопределено;
	
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьНазваниеМодуля(), Настройка);
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") тогда
		Если СохраненныеНастройки.Свойство(НаименованиеКлюча) <> Ложь тогда
			Результат = СохраненныеНастройки[НаименованиеКлюча];	
		Иначе
			СохраненныеНастройки.Вставить(НаименованиеКлюча, Неопределено);
			УстановитьЗначениеВХранилищаНастроек(Настройка, СохраненныеНастройки);
		КонецЕсли;	
	Иначе         		
		
		Если СохраненныеНастройки = Неопределено тогда
			УстановитьЗначениеВХранилищаНастроек(Настройка, Неопределено);
		Иначе
			Результат = СохраненныеНастройки;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Процедура УстановитьЗначениеВХранилищаНастроек(Настрока, ЗначениеНастройки) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить(ПолучитьНазваниеМодуля(), Настрока, ЗначениеНастройки, "Синхронизация с Битрикс24");
	
КонецПроцедуры

#КонецОбласти


#Область ПрочиеПроцедурыИФункции

Функция ПолучитьРеквизитОбъекта(Объект, НазваниеРеквизита) Экспорт
	
	Возврат Объект[НазваниеРеквизита]; 
	
КонецФункции

Функция ПолучитьПараметрыСоединения() Экспорт
	Структура = Новый Структура("Тип, Сервер, База, Файл, Строка"); 
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы(); 
	Структура.Строка = СтрокаСоединения; 
	
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, ";", Символы.ПС); 
	
	Стр1 = СтрПолучитьСтроку(СтрокаСоединения, 1); 
	Стр2 = СтрПолучитьСтроку(СтрокаСоединения, 2); 
	
	Если Лев(Стр1, 4) = "Srvr" Тогда 
		Структура.Тип = "Сервер"; 
		Структура.Сервер = Сред(Стр1, 7, СтрДлина(Стр1) - 7); 
		Структура.База = Сред(СтрПолучитьСтроку(СтрокаСоединения, 2), 6, СтрДлина(Стр2) - 6); 
	Иначе 
		Структура.Тип = "Файл"; 
		Структура.Файл = Сред(Стр1, 6, СтрДлина(Стр1) - 6); 
	КонецЕсли;     
	
	Возврат Структура; 
КонецФункции     

Функция ПреобразоватьТаблицуВМассив(ТзнДанных) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого ТекСтрока из ТзнДанных Цикл
		
		СтрокаСтруктурой = Новый Структура;
		
		Для Каждого ТекКолонка из ТзнДанных.Колонки Цикл
			СтрокаСтруктурой.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]); 
		КонецЦикла;
		
		Результат.Добавить(СтрокаСтруктурой);
		
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

// Процедура - выполяняет таймаут 
//
// Параметры:
//  ДлительностьСек	 - 	 длительность таймаута (сек) 
Процедура Таймаут(ДлительностьСек) Экспорт
	
	Начало = ТекущаяДата();
	Сч = 0;
	
	Пока Истина Цикл
		
		Сч = Сч + 1;
		
		Если Сч % 10000 = 0 Тогда
			Если ТекущаяДата() - Начало > ДлительностьСек Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивРазрешенныхРасширенийКартинок() Экспорт
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	РазрешенныеТипыКартинок.Добавить(".gif");
	РазрешенныеТипыКартинок.Добавить(".jpg");
	РазрешенныеТипыКартинок.Добавить(".jpeg");
	РазрешенныеТипыКартинок.Добавить(".png");
	РазрешенныеТипыКартинок.Добавить("");
	
	Возврат  РазрешенныеТипыКартинок;
	
КонецФункции

#КонецОбласти

