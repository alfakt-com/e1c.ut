
#Область ПрограммныйИнтерфейс

Процедура ОпределитьИспользованиеАктовОРасхождениииПослеПриемки(Документ, Используются) Экспорт
	
	Используются = Ложь;
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
// 
// Параметры:
// 	ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияСканирования) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
// Параметры:
// 	ДокументОснование - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//	
Функция СформированныйАктОРасхождениях(ДокументОснование) Экспорт
	
	АктОРасхождениях      = Неопределено;
	ТипДокументаОснования = ТипЗнч(ДокументОснование);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Если ТипДокументаОснования = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
	 Или ТипДокументаОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктОРасхождениях.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхождениях
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхТовары
		|	ПО АктОРасхождениях.Ссылка = АктОРасхожденияхТовары.Ссылка
		|ГДЕ
		|	НЕ АктОРасхождениях.ПометкаУдаления
		|	И АктОРасхожденияхТовары.ДокументОснование = &ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	АктОРасхождениях.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	АктОРасхождениях.Дата УБЫВ
		|";
	Иначе
		Возврат АктОРасхождениях;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АктОРасхождениях = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат АктОРасхождениях;
	
КонецФункции

Функция КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
		И ПолучитьФункциональнуюОпцию("КонтролироватьСтатусыКодовМаркировкиВРозницеМОТП");
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииПриобретениеТоваровУслуг()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура                                  КАК Номенклатура,
	|	Товары.Характеристика                                КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                  КАК Серия,
	|	СУММА(ЕСТЬNULL(Серии.Количество, Товары.Количество)) КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Склад = Серии.Склад
	|		И Товары.Назначение = Серии.Назначение
	|		И Серии.Ссылка = &Документ
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииРеализацияТоваровУслуг()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура                                 КАК Номенклатура,
	|	Товары.Характеристика                               КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                 КАК Серия,
	|	СУММА(ЕСТЬNULL(Серии.Количество,Товары.Количество)) КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Склад = Серии.Склад
	|		И Товары.Назначение = Серии.Назначение
	|		И Серии.Ссылка = &Документ
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииВозвратТоваровПоставщику()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура                                 КАК Номенклатура,
	|	Товары.Характеристика                               КАК Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)                 КАК Серия,
	|	СУММА(ЕСТЬNULL(Серии.Количество,Товары.Количество)) КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Серии КАК Серии
	|		ПО Товары.Номенклатура = Серии.Номенклатура
	|		И Товары.Характеристика = Серии.Характеристика
	|		И Товары.Назначение = Серии.Назначение
	|		И Серии.Ссылка = &Документ
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ЕСТЬNULL(Серии.Серия, Товары.Серия)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТабачнойПродукцииКорректировкаРеализации()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Товары.Номенклатура      КАК Номенклатура,
	|	Товары.Характеристика    КАК Характеристика,
	|	Товары.Серия             КАК Серия,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|		И СправочникНоменклатура.ТабачнаяПродукция
	|ГДЕ
	|	Товары.Ссылка = &Документ
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия";
	
	Возврат ТекстЗапроса;
	
КонецФункции


// Зполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
// 	Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
// 	ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//
Процедура СформироватьТаблицуТабачнойПродукцииДокумента(Документ, ТаблицаПродукции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ТипДокумента = ТипЗнч(Документ);
	Если ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииПриобретениеТоваровУслуг();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииРеализацияТоваровУслуг();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииВозвратТоваровПоставщику();
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Запрос.Текст = ТекстЗапросаТабачнойПродукцииКорректировкаРеализации();
	Иначе
		ВызватьИсключение НСтр("ru = 'Формирование таблицы табачной продукции указанного документа не определено';
								|en = 'Generation of the tobacco products table of the specified document is not specified'");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Серии

Процедура СгенерироватьСерии(ДанныеДляГенерации) Экспорт

	ТаблицаДанныхДляГенерацииСерий = Новый ТаблицаЗначений;
	ТаблицаДанныхДляГенерацииСерий.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанныхДляГенерацииСерий.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДанныхДляГенерацииСерий.Колонки.Добавить("МРЦ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДанныхДляГенерацииСерий.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхДляГенерацииСерий.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Для Каждого ЭлементМассива Из ДанныеДляГенерации Цикл
		
		НоваяСтрока = ТаблицаДанныхДляГенерацииСерий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				
		Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
			НоваяСтрока.Серия = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
		КонецЕсли;
		
	КонецЦикла;
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Серия        КАК Серия,
		|	Таблица.МРЦ          КАК МРЦ,
		|	Таблица.ЕстьОшибка   КАК ЕстьОшибка,
		|	Таблица.ТекстОшибки  КАК ТекстОшибки
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВтТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ВладельцыСерии.АвтоматическиГенерироватьСерии, ВидыНоменклатуры.АвтоматическиГенерироватьСерии) КАК
		|		АвтоматическиГенерироватьСерии,
		|	ЕСТЬNULL(ВладельцыСерии.ИспользоватьМРЦМОТПСерии, ВидыНоменклатуры.ИспользоватьМРЦМОТПСерии) КАК ИспользоватьМРЦМОТПСерии,
		|	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
		|	ЕСТЬNULL(ВладельцыСерии.Ссылка, ВидыНоменклатуры.Ссылка) КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ВтВидыНоменклатуры
		|ИЗ
		|	ВтТовары КАК ВтТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		По ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО СправочникНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВладельцыСерии
		|		ПО СправочникНоменклатура.ВладелецСерий = ВладельцыСерии.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВтТовары.Номенклатура
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТовары.Номенклатура                             КАК Номенклатура,
		|	ВтВидыНоменклатуры.ВидНоменклатуры                КАК ВидНоменклатуры,
		|	СправочникНоменклатура.Наименование               КАК НоменклатураНаименование,
		|	ВтТовары.МРЦ                                      КАК МаксимальнаяРозничнаяЦенаМОТП,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
		|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		|		ИНАЧЕ ВтТовары.Серия
		|	КОНЕЦ)                                            КАК Серия,
		|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии КАК АвтоматическиГенерироватьСерии,
		|	ВтВидыНоменклатуры.ИспользоватьСерии              КАК ИспользоватьСерии
		|ИЗ
		|	ВтТовары КАК ВтТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыНоменклатуры
		|		ПО ВтТовары.Номенклатура = ВтВидыНоменклатуры.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВтТовары.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|		ПО СерииНоменклатуры.ВидНоменклатуры = ВтВидыНоменклатуры.ВидНоменклатуры
		|		И ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии
		|		И (ВЫБОР
		|			КОГДА ВтВидыНоменклатуры.ИспользоватьМРЦМОТПСерии = ИСТИНА
		|				ТОГДА СерииНоменклатуры.МаксимальнаяРозничнаяЦенаМОТП = ВтТовары.МРЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ)
		|СГРУППИРОВАТЬ ПО
		|	ВтТовары.Номенклатура,
		|	ВтВидыНоменклатуры.ВидНоменклатуры,
		|	СправочникНоменклатура.Наименование,
		|	ВтТовары.МРЦ,
		|	ВтВидыНоменклатуры.АвтоматическиГенерироватьСерии,
		|	ВтВидыНоменклатуры.ИспользоватьСерии";
		
		Запрос.УстановитьПараметр("Таблица", ТаблицаДанныхДляГенерацииСерий);
		
		ДанныеДляГенерации = Новый Массив;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДанныеГенерации = ИнтеграцияМОТПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии(); 
			ЗаполнитьЗначенияСвойств(ДанныеГенерации, Выборка);
			
			Если Не Выборка.ИспользоватьСерии Тогда
				
				ДанныеГенерации.ЕстьОшибка = Истина;
				ДанныеГенерации.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 серии не используются.';
															|en = 'Series are not used for the %1 products.'"), Выборка.НоменклатураНаименование);
				
			ИначеЕсли НЕ Выборка.АвтоматическиГенерироватьСерии
			 		И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
			 	
			 	ДанныеГенерации.ЕстьОшибка = Истина;
				ДанныеГенерации.ТекстОшибки = СтрШаблон(НСтр("ru = 'Для номенклатуры %1 не предусмотрена автоматическая генерация серий.';
															|en = 'Automatic series generation is not available for the %1 products.'"), Выборка.НоменклатураНаименование);
				
			ИначеЕсли Выборка.АвтоматическиГенерироватьСерии
				И Не ЗначениеЗаполнено(Выборка.Серия) Тогда
					
				Попытка
					
					НоваяСерия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
					НоваяСерия.Заполнить(Выборка);
					НоваяСерия.Записать();
					
					ДанныеГенерации.Серия = НоваяСерия.Ссылка;
					
				Исключение
					
					ДанныеГенерации.ЕстьОшибка = Истина;
					ДанныеГенерации.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сгенерировать серию для номенклатуры %1 по причине: %2';
																|en = 'Cannot generate series for the %1 products due to: %2'"),
						Выборка.НоменклатураНаименование,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

				КонецПопытки;
			 
			КонецЕсли;
			
			ДанныеДляГенерации.Добавить(ДанныеГенерации); 
			
		КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДобавленныхИзмененныхСтрок

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий)

	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли СтрНачинаетсяС(ТипСтрокиТабличнойЧасти, "ДокументТабличнаяЧастьСтрока") Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиТипа = СтрРазделить(ТипСтрокиТабличнойЧасти, ".");
		
		Если ПодстрокиТипа.Количество() = 3 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиТипа[1]][ПодстрокиТипа[2]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧастиСтруктурой, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

#КонецОбласти


#Область ОтражениеРезультатаПроверкиИПодбораВДокументе

#Область ВходящиеДокументы

Процедура ЗаполнитьСерииВДокументе(ПараметрыОкончанияСканирования, ДокументОбъект)
	
	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	ИмяДокумента        = МетаданныеДокумента.Имя;
	МенеджерДокумента   = Документы[ИмяДокумента];
	
	ЕстьСклад = ДокументОбъект.Ссылка.Метаданные().ТабличныеЧасти.Серии.Реквизиты.Найти("Склад") <> Неопределено;
	
	ИмяТабличнойЧасти = СтрШаблон("Документ.%1.Серии", ИмяДокумента);
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика,
	|	ТаблицаПодобраннойПродукции.Серия,
	|	ТаблицаПодобраннойПродукции.Количество,
	|	ТаблицаПодобраннойПродукции.КоличествоПодобрано
	|ПОМЕСТИТЬ ТаблицаПодобраннойПродукции
	|ИЗ
	|	&ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодобраннойПродукции.Номенклатура КАК Номенклатура,
	|	ТаблицаПодобраннойПродукции.Характеристика КАК Характеристика,
	|	ТаблицаПодобраннойПродукции.Количество КАК Количество,
	|	ТаблицаПодобраннойПродукции.Серия КАК Серия
	|ИЗ
	|	ТаблицаПодобраннойПродукции КАК ТаблицаПодобраннойПродукции
	|ИТОГИ
	|ПО
	|	Номенклатура,
	|	Характеристика,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьСерии.Серия            КАК Серия,
	|	ТабличнаяЧастьСерии.Количество       КАК Количество,
	|	ТабличнаяЧастьСерии.Номенклатура     КАК Номенклатура,
	|	ТабличнаяЧастьСерии.Характеристика   КАК Характеристика,
	|	&Склад                               КАК Склад,
	|	ТабличнаяЧастьСерии.Назначение       КАК Назначение
	|ИЗ
	|	&ТабличнаяЧастьСерии  КАК ТабличнаяЧастьСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧастьСерии.Номенклатура = СправочникНоменклатура.Ссылка
	|			И СправочникНоменклатура.ОсобенностьУчета <> ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
	|ГДЕ
	|	ТабличнаяЧастьСерии.Ссылка = &ПроверяемыйДокумент";
	
	Если ЕстьСклад Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ТабличнаяЧастьСерии.Склад");
	Иначе
		Запрос.УстановитьПараметр("Склад", "");
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТабличнаяЧастьСерии", ИмяТабличнойЧасти);
	
	Запрос.УстановитьПараметр("ТаблицаПодобраннойПродукции", ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДокументОбъект.Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристика.Следующий() Цикл
			
			ВыборкаКоличество = ВыборкаХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаКоличество.Следующий() Цикл
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Номенклатура",   ВыборкаКоличество.Номенклатура);
				ПараметрыПоиска.Вставить("Характеристика", ВыборкаКоличество.Характеристика);
				ПараметрыПоиска.Вставить("Количество",     ВыборкаКоличество.Количество);
				
				НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
				
				ВыборкаДетали = ВыборкаКоличество.Выбрать();
				
				Если ВыборкаДетали.Количество() > 1 Тогда
					
					ТекущаяНайденнаяСтрока = 0;
					
					Пока ВыборкаДетали.Следующий() Цикл
						
						Склад      = Справочники.Склады.ПустаяСсылка();
						Назначение = Справочники.Назначения.ПустаяСсылка();
						
						Если НайденныеСтроки.Количество() > ТекущаяНайденнаяСтрока Тогда
							
							НайденныеСтроки[ТекущаяНайденнаяСтрока].Серия = ВыборкаДетали.Серия;
							Назначение = НайденныеСтроки[ТекущаяНайденнаяСтрока].Назначение;
							Если ЕстьСклад Тогда 
								Склад = НайденныеСтроки[ТекущаяНайденнаяСтрока].Склад;
							КонецЕсли;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Склад)
							Или Не ЕстьСклад Тогда
							
							НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
							НоваяСтрокаСерии.Номенклатура   = ВыборкаДетали.Номенклатура;
							НоваяСтрокаСерии.Характеристика = ВыборкаДетали.Характеристика;
							НоваяСтрокаСерии.Количество     = ВыборкаДетали.Количество;
							НоваяСтрокаСерии.Серия          = ВыборкаДетали.Серия;
							НоваяСтрокаСерии.Назначение     = Назначение;
							Если ЕстьСклад Тогда
								НоваяСтрокаСерии.Склад          = Склад;
							КонецЕсли;
							
						КонецЕсли;
						
						ТекущаяНайденнаяСтрока = ТекущаяНайденнаяСтрока + 1;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаДетали.Следующий();
					
					Склад      = Справочники.Склады.ПустаяСсылка();
					Назначение = Справочники.Назначения.ПустаяСсылка();
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						НайденнаяСтрока.Серия = ВыборкаДетали.Серия;
						Назначение = НайденнаяСтрока.Назначение;
						Если ЕстьСклад Тогда 
							Склад = НайденнаяСтрока.Склад;
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Склад) 
						Или Не ЕстьСклад Тогда
						
						НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
						НоваяСтрокаСерии.Номенклатура   = ВыборкаДетали.Номенклатура;
						НоваяСтрокаСерии.Характеристика = ВыборкаДетали.Характеристика;
						НоваяСтрокаСерии.Количество     = ВыборкаДетали.Количество;
						НоваяСтрокаСерии.Серия          = ВыборкаДетали.Серия;
						НоваяСтрокаСерии.Назначение     = Назначение;
						Если ЕстьСклад Тогда
							НоваяСтрокаСерии.Склад          = Склад;
						КонецЕсли;
						
					КонецЕсли;
					 
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, МенеджерДокумента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ДокументОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Функция ТекстЗапросаОпределениеСклада(ПроверяемыйДокумент) Экспорт
	
	Если ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Возврат "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслугТовары.Склад КАК Склад
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ ПриобретениеТоваровУслугТовары.Ссылка = &ПроверяемыйДокумент";
		
	ИначеЕсли ТипЗнч(ПроверяемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Возврат "ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Склад КАК Склад
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.Ссылка = &ПроверяемыйДокумент";
		
	КонецЕсли;
	
КонецФункции

Процедура РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект, НайденныеСтрокиДокумента, 
                                                      НайденныеСтрокиПродукция, СтруктураДействийОпределениеФактическогоКоличества)
	
	ТребуетсяРаспределениеПоСериям = Ложь;
	СерииВОтдельнойТабличнойЧасти  = Ложь;
	КоличествоКРаспределению = 0;
	
	СерииАкта      = Новый Массив;
	СерииПродукции = Новый Массив;
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		Если ЗначениеЗаполнено(НайденнаяСтрокаПродукция.Серия)
			И СерииПродукции.Найти(НайденнаяСтрокаПродукция.Серия) = Неопределено Тогда
			СерииПродукции.Добавить(НайденнаяСтрокаПродукция.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НайденнаяСтрокаДокумент Из НайденныеСтрокиДокумента Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрокаДокумент.Серия)
			И СерииАкта.Найти(НайденнаяСтрокаДокумент.Серия) = Неопределено Тогда
			СерииАкта.Добавить(НайденнаяСтрокаДокумент.Серия);
		КонецЕсли;
	КонецЦикла;
	
	Если СерииПродукции.Количество() > 1 Тогда
		ТребуетсяРаспределениеПоСериям = Истина;
	КонецЕсли;
	
	Если СерииПродукции.Количество() > 0 
		И СерииАкта.Количество() = 0 Тогда
		СерииВОтдельнойТабличнойЧасти = Истина;			
	КонецЕсли;
		
	Если Не ТребуетсяРаспределениеПоСериям Тогда
		
		РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
		                                 СерииПродукции, КоличествоКРаспределению, СтруктураДействийОпределениеФактическогоКоличества, 
		                                 СерииВОтдельнойТабличнойЧасти);
		
	КонецЕсли;

КонецПроцедуры

Процедура РаспределитьПодобранноеОднаСерия(ДокументОбъект, НайденныеСтрокиДокумента, НайденныеСтрокиПродукция, 
                                           СерииПродукции, КоличествоКРаспределению, СтруктураДействий, СерииВОтдельнойТабличнойЧасти)
	
	НомерСтроки = 1;
	КоличествоСтрок = НайденныеСтрокиДокумента.Количество();
	
	Для Каждого НайденнаяСтрокаДокумента Из НайденныеСтрокиДокумента Цикл
		
		Если НайденнаяСтрокаДокумента.КоличествоУпаковок < КоличествоКРаспределению Тогда
			
			Если КоличествоСтрок <> НомерСтроки Тогда
				КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаДокумента.КоличествоУпаковок;
			Иначе
				НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
			
				ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрокаДокумента.КоличествоУпаковок = КоличествоКРаспределению;
			КоличествоКРаспределению = 0;
			
			ОбработатьСтрокуТабличнойЧасти(НайденнаяСтрокаДокумента, СтруктураДействий);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;	
			
	КонецЦикла;
	
	Если СерииВОтдельнойТабличнойЧасти Тогда
		
		КоличествоКРаспределению = 0;
		Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
			КоличествоКРаспределению = КоличествоКРаспределению + НайденнаяСтрокаПродукция.КоличествоПодобрано;
		КонецЦикла;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура",   НайденныеСтрокиПродукция[0].Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", НайденныеСтрокиПродукция[0].Характеристика);
		ПараметрыПоиска.Вставить("Количество",     НайденныеСтрокиПродукция[0].Количество);
		ПараметрыПоиска.Вставить("Серия",          СерииПродукции[0]);
		
		НайденныеСтрокиСерии = ДокументОбъект.Серии.НайтиСтроки(ПараметрыПоиска);
		
		НомерСтроки = 1;
		
		Для Каждого НайденнаяСтрокаСерия Из НайденныеСтрокиСерии Цикл
		
			Если НайденнаяСтрокаСерия.Количество < КоличествоКРаспределению Тогда
				
				Если КоличествоСтрок <> НомерСтроки Тогда
					
					КоличествоКРаспределению = КоличествоКРаспределению - НайденнаяСтрокаСерия.Количество;
					
				Иначе
					
					НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
					КоличествоКРаспределению = 0;

				КонецЕсли;
				
			Иначе
				
				НайденнаяСтрокаСерия.Количество = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Количество", 0);
	
	НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДокументОбъект.Товары.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, НайденныеСтрокиПродукция,
                                                    ПроверяемыйДокумент, СтруктураДействий, Склад, ЕстьСкладВТЧ)
	
	Для Каждого НайденнаяСтрокаПродукция Из НайденныеСтрокиПродукция Цикл
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
	
		НоваяСтрока.Номенклатура        = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрока.Характеристика      = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрока.Серия               = НайденнаяСтрокаПродукция.Серия;
		НоваяСтрока.КоличествоУпаковок  = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		
		ОбработатьСтрокуТабличнойЧасти(НоваяСтрока, СтруктураДействий);
		
		НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
		НоваяСтрокаСерии.Номенклатура   = НайденнаяСтрокаПродукция.Номенклатура;
		НоваяСтрокаСерии.Характеристика = НайденнаяСтрокаПродукция.Характеристика;
		НоваяСтрокаСерии.Серия          = НайденнаяСтрокаПродукция.Серия;
		НоваяСтрокаСерии.Количество     = НайденнаяСтрокаПродукция.КоличествоПодобрано;
		
		Если ЕстьСкладВТЧ Тогда
			НоваяСтрока.Склад      = Склад;
			НоваяСтрокаСерии.Склад = Склад;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсходящиеДокументы

// Переносит таблицу штрихкодов верхнего уровня в документ
//   Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие табачные (содержащие внутри хотя бы 1 шт 
//   табачной продукции) штрихкоды верхнего уровня
//   Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды
//   Не меняет прочие (например алкогольные) штрихкоды
// 
// Параметры:
//  ДокументОбъект                  - ДокументОбъект  - документ для изменения
//  ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня) Экспорт
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементВНаличии.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	ШтрихкодыСодержащиеТабачнуюПродукцию = ШтрихкодыСодержащиеТабачнуюПродукцию(ШтрихкодыДляПроверки);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеТабачнуюПродукцию Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки"));
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыСодержащиеТабачнуюПродукцию(Знач ШтрихкодыДляПроверки)
	
	Возврат ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИСУТ_ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, Перечисления.ВидыПродукцииИС.Табачная);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
