////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

///////////////////////////////////////////////////////////////////////////////
// Работа с API ИС ЭСФ

// Возвращает идентификатор новой сессии с ИС ЭСФ. 
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, от имени которого необходимо открыть новую сессию.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//
// Возвращаемое значение:
//  Строка - Идентификатор новой открытой сессии.
//
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	   
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
	
КонецФункции

// Закрывает открытую сессию с ИС ЭСФ.
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, от имени которого необходимо открыть новую сессию.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ИдентификаторСессии - Строка - Идентификатор сессии, которую необходимо закрыть.
//
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияИСЭСФ = Неопределено) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

Процедура ЗакрытьСессиюПоДаннымПрофиля(ДанныеПрофиля, Пароль) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗакрытьСессиюПоДаннымПрофиля(ДанныеПрофиля, Пароль);
	
КонецПроцедуры

// Выполняет метод queryNewInvoice() API ИС ЭСФ.
// Обновляет существующие и создает новые документы ЭСФ, заполняет ссылочные реквизиты.
// Сохраняет lastEventId и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление получаемых ЭСФ.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭСФ будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭСФ, создаст новые ЭСФ, создаст и обновит присоединенные файлы ЭСФ.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых ЭСФ.
//
Функция ПолучитьДанныеНовыхЭСФ(Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, Знач ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьДанныеНовыхЭСФ(НаправлениеЭСФ, ПрофильИСЭСФ, ПолучитьОднуПорцию, ТолькоСоздатьОбновитьФайлы, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема);

КонецФункции

// Выполняет метод queryNewInvoice() API ИС ЭСФ.
// Обновляет существующие и создает новые документы ЭСФ, заполняет ссылочные реквизиты.
// Сохраняет lastEventId и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление получаемых ЭСФ.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭСФ будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭСФ, создаст новые ЭСФ, создаст и обновит присоединенные файлы ЭСФ.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых ЭСФ.
//
Функция ПолучитьНовыеЭСФ(ПараметрыВыгрузки) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьНовыеЭСФ(ПараметрыВыгрузки);
	
КонецФункции

// Выполняет метод queryInvoiceStatusById() API ИС ЭСФ.
// Получает новые данные об ЭСФ: статусы, состояния, рег. номера и т.д.
// Обновляет документы ЭСФ.
//
// Параметры:
//  МассивИдентификаторовЭСФ - Массив - Идентификаторы ЭСФ, для которых необходимо вызвать queryInvoiceStatusById().
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивИдентификаторовЭСФ.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Соответствие - Полученные данные об ЭСФ: статусы, состояния, рег. номера и т.д.
//   |- Ключ - Строка - Идентификатор ЭСФ.
//   |- Значение - Структура, Неопределено. 
//       Структура, если ЭСФ с указанным идентификатором найден, см. Обработки.ОбменЭСФ.ДанныеСтатусаInvoice().
//       Неопределено, в противном случае.
//
Функция ОбновитьСтатусыЭСФПоИдентификаторам(Знач МассивИдентификаторовЭСФ, Знач НаправлениеЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	            
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовЭСФ, НаправлениеЭСФ, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

// Возвращает данные профиля ИС ЭСФ.
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - Ссылка на профиль, данные которого необходимо получить.
//   Если передается Структура, то она и возвращается, это используется для упрощения вызывающего кода.
//
// Возвращаемое значение:
//  Структура - данные профиля ИС ЭСФ.
//   |- ПрофильИСЭСФ - ФиксированнаяСтруктура - См. ЭСФСерверПовтИсп.ДанныеПрофиляИСЭСФ().
//   |- ПользовательИСЭСФ - ФиксированнаяСтруктура - См. ЭСФСерверПовтИсп.ДанныеПользователяИСЭСФ(). 
//   |- СтруктурнаяЕдиница - ФиксированнаяСтруктура - См. ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(). 
//   |- ТекущийПарольАутентификации - Строка - Пароль аутентификации в ИС ЭСФ.
//
Функция ДанныеПрофиляИСЭСФ(Знач ПрофильИСЭСФ) Экспорт
	
	Если ТипЗнч(ПрофильИСЭСФ) = Тип("СправочникСсылка.ПрофилиИСЭСФ") Тогда
		
		ДанныеПрофиля = ЭСФСерверПовтИсп.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ); 
		ДанныеПользователя = ЭСФСерверПовтИсп.ДанныеПользователяИСЭСФ(ДанныеПрофиля.ПользовательИСЭСФ);
		ДанныеСтруктурнойЕдиницы = ЭСФСерверПовтИсп.ДанныеСтруктурнойЕдиницы(ДанныеПрофиля.СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = Новый Структура;
		ДанныеПрофиляИСЭСФ.Вставить("ПрофильИСЭСФ", ДанныеПрофиля);
		ДанныеПрофиляИСЭСФ.Вставить("ПользовательИСЭСФ", ДанныеПользователя);
		ДанныеПрофиляИСЭСФ.Вставить("СтруктурнаяЕдиница", ДанныеСтруктурнойЕдиницы);
		ДанныеПрофиляИСЭСФ.Вставить("ТекущийПарольАутентификации", ДанныеПользователя.ПарольАутентификации);
		ДанныеПрофиляИСЭСФ.Вставить("ТипПрофиляИСЭСФ", ПрофильИСЭСФ.ТипПрофиляИСЭСФ);
		
	Иначе
		
		ДанныеПрофиляИСЭСФ = ПрофильИСЭСФ;
		
	КонецЕсли;
		
	Возврат ДанныеПрофиляИСЭСФ;    
	
КонецФункции

// Возвращает текущую версию ИС ЭСФ.
//
// Параметры:
//  ТекстОшибки - Строка - Содержит текст ошибки, если не удалось получить версию ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка, Неопределено - Текушая версия ИС ЭСФ.
//   Строка, если удалось получить текущую версию ИС ЭСФ.
//   Неопределено в противном случае.
//
Функция ВерсияИСЭСФ(ТекстОшибки) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ВерсияИСЭСФ(ТекстОшибки);
	
КонецФункции

// Возвращает версии ИС ЭСФ, которые поддерживаются конфигурацией.
//
// Возвращаемое значение:
//  Массив, поддерживаемые версии ИС ЭСФ. Каждый элемент массива имеет тип Строка.
//
Функция ПоддерживаемыеВерсииИСЭСФ() Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПоддерживаемыеВерсииИСЭСФ();
	
КонецФункции

// Возвращает текущие версии API ИС ЭСФ и формы ЭСФ
//
// Параметры:
//  Дата - дата, на которую нужно получить версии.
//
// Возвращаемое значение:
//  Структура, Неопределено - Текушая версия ИС ЭСФ.
//   Строка, если удалось получить текущую версию ИС ЭСФ.
//   Неопределено в противном случае.
//
Функция ПолучитьТекущуюВерсиюЭСФиAPI(Дата) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьТекущуюВерсиюЭСФиAPI(Дата);
	
КонецФункции

Функция ПолучитьЭСФВерсияВнешнегоМодуля() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ЭСФВерсияВнешнегоМодуля.Получить();
	
КонецФункции

Процедура ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовЭСФ, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовЭСФ, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецПроцедуры

Процедура ЗаполнитьДатыНачалаСинхронизации() Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьДатыНачалаСинхронизации();
	
КонецПроцедуры

#Область РаботаССессиями
Функция ПолучитьСохраненныйИдентификаторСессии(Знач Профиль, Знач ИмяМодуля = "ESF") Экспорт
	                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктивныеСессииИСЭСФ.IDСессии КАК IDСессии
	|ИЗ
	|	РегистрСведений.АктивныеСессииИСЭСФ КАК АктивныеСессииИСЭСФ
	|ГДЕ
	|	АктивныеСессииИСЭСФ.ПрофильИСЭСФ = &ПрофильИСЭСФ
	|	И АктивныеСессииИСЭСФ.ИмяМодуля = &ИмяМодуля";
	
	Запрос.УстановитьПараметр("ПрофильИСЭСФ", Профиль);
	Запрос.УстановитьПараметр("ИмяМодуля", ИмяМодуля);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.IDСессии;
	
КонецФункции

// Сохраняет параметр метода API ИС ЭСФ в регистр сведений ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСЭСФ.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметр которого необходимо сохранить.
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление ЭСФ, для которого необходимо сохранить параметр.
//  ИмяПараметра - Строка - Имя сохраняемого параметра.
//  ЗначениеПараметра - Строка - Значение сохраняемого парметра.
//
Процедура СохранитьИдентификаторСессии(Знач Профиль, Знач ИмяМодуля = "ESF", IDСессии) Экспорт
	
	Запись = РегистрыСведений.АктивныеСессииИСЭСФ.СоздатьМенеджерЗаписи();
	Запись.ПрофильИСЭСФ = Профиль;
	Запись.ИмяМодуля = ИмяМодуля;	
	Запись.IDСессии = IDСессии;
	
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// Сторнирование счетов-фактур

// Синхронизирует сторнирующий документ со счетом-фактурой.
//
// Параметры:
//  СчетФактураОбъект - ДокументОбъект.СчетФактураВыданный, ДокументОбъект.СчетФактураПолученный -
//   Счет-фактура, на основании которого необходимо обновить сторнирующий документ.
//
Процедура ОбновитьСторнирующиеДокументы(Знач СчетФактураОбъект) Экспорт
	
	МассивСторнирований = ЭСФСерверПереопределяемый.ДокументыСторнирующиеСчетФактуру(СчетФактураОбъект.Ссылка);
	
	Для Каждого ДанныеСторнирования Из МассивСторнирований Цикл	
		
		ОбъектСторно = ДанныеСторнирования.Ссылка.ПолучитьОбъект();
		ЭСФСерверПереопределяемый.ОбновитьСторнирующийДокумент(СчетФактураОбъект, ОбъектСторно);
		
		ИмяПропуститьПроверку = ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения();
		ЗначениеПропуститьПроверку = Ложь;
		
		Если СчетФактураОбъект.ДополнительныеСвойства.Свойство(ИмяПропуститьПроверку, ЗначениеПропуститьПроверку) Тогда
			ОбъектСторно.ДополнительныеСвойства.Вставить(ИмяПропуститьПроверку, ЗначениеПропуститьПроверку);
		КонецЕсли;
		
		ОбъектСторно.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет движения сторнирующего документа на основании движений счета-фактуры.
//
// Параметры:
//  ДвиженияСчетаФактуры - КоллекцияДвижений - Коллекция движений счета-фактуры полученного или выданного.
//
Процедура ОбновитьДвиженияСторнирующихДокументов(Знач СчетФактураОбъект) Экспорт
	
	МассивСторнирований = ЭСФСерверПереопределяемый.ДокументыСторнирующиеСчетФактуру(СчетФактураОбъект.Ссылка);
	
	Для Каждого ДанныеСторнирования Из МассивСторнирований Цикл	
		ОбъектСторно = ДанныеСторнирования.Ссылка.ПолучитьОбъект();
		ЭСФСерверПереопределяемый.ОбновитьДвиженияСторнирующегоДокумента(СчетФактураОбъект.Движения, ОбъектСторно);
		ОбъектСторно.Записать();
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий модулей объектов счетов-фактур

// Обработчик события ПередЗаписью модуля объекта счета-фактуры.
//
// Параметры:
//  ЭтотОбъект - ДокументОбъект.СчетФактураВыданный, ДокументОбъект.СчетФактураПолученный - 
//   Счет-фактура, в котором обрабатывается событие ПередЗаписью.
//
Процедура ПередЗаписьюСчетаФактуры(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьИзмененияСчетаФактуры(ЭтотОбъект, Отказ);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий в формах счетов-фактур

// Обработчик события ОбработкаОповещения в формах счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, в которой обрабатывается оповещение.
//
Процедура СчетФактураОбработкаОповещения(Форма, ИмяСобытия, Параметр) Экспорт
	
	Ссылка = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	
	Если НЕ Ссылка.Пустая() И ЭСФКлиентСервер.ЭтоОповещениеПодсистемыЭСФ(ИмяСобытия) Тогда
		Форма.Прочитать();
		ОбновитьПредставлениеЭСФ(Форма);
		ОбновитьПредставлениеСторно(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере в формах документов счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма объекта счета-фактуры, 
//   в которой обрабатывается событие.
//
Процедура СчетФактураПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.ЭлементыФормы, Форма.Элементы);
	
	Форма.РеквизитыЭСФ = ЭСФКлиентСервер.РеквизитыЭСФ(Форма);
		
	ОбновитьПредставлениеЭСФ(Форма);
	ОбновитьПредставлениеСторно(Форма);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") Тогда
				ПодменюЭСФ = Элементы.ДействияФормы.Кнопки.ПодменюЭСФ;
				КнопкаОтозватьЭСФ = ПодменюЭСФ.Кнопки.Найти("ОтозватьЭСФ"); 
				Если КнопкаОтозватьЭСФ <> Неопределено Тогда
					ПодменюЭСФ.Кнопки.Удалить(КнопкаОтозватьЭСФ);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
				И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
				
				Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
					Элементы.ДействияФормы.Кнопки.Удалить(Элементы.ДействияФормы.Кнопки.ПодменюЭСФ);
					Элементы.ПанельЭСФ.Свертка = РежимСверткиЭлементаУправления.Низ;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере в формах списков и выбора счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма списка или выбора счета-фактуры, 
//   в которой обрабатывается событие.
//
Процедура СписокСчетовФактурПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.ЭлементыФормы, Форма.Элементы);
	
	Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") Тогда
				ПодменюЭСФ = Элементы.ДействияФормы.Кнопки.ПодменюЭСФ;
				КнопкаОтозватьЭСФ = ПодменюЭСФ.Кнопки.Найти("ОтозватьЭСФ"); 
				Если КнопкаОтозватьЭСФ <> Неопределено Тогда
					ПодменюЭСФ.Кнопки.Удалить(КнопкаОтозватьЭСФ);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
				И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
				
				Элементы.ДействияФормы.Кнопки.Удалить(Элементы.ДействияФормы.Кнопки.ПодменюЭСФ);
				
				Элементы.ДокументСписок.Колонки.СостояниеЭСФ.Видимость = Ложь;
				
				Если Элементы.ДокументСписок.Колонки.Найти("СпособВыставления") <> Неопределено Тогда
					Элементы.ДокументСписок.Колонки.СпособВыставления.Видимость = Ложь;
				КонецЕсли;
				
				Если Элементы.ДокументСписок.Колонки.Найти("СпособПолучения") <> Неопределено Тогда
					Элементы.ДокументСписок.Колонки.СпособПолучения.Видимость = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		#КонецЕсли
		
	Иначе
		Параметры = Форма.Параметры;
		Если Параметры.Свойство("ПользовательскиеНастройки") И ЗначениеЗаполнено(Параметры.ПользовательскиеНастройки) Тогда
			
			Для Каждого ЭлементНастроек Из Параметры.ПользовательскиеНастройки.ДополнительныеСвойства Цикл
				ЭСФКлиентСерверПереопределяемый.УстановитьЭлементОтбора(
				Форма.Список.КомпоновщикНастроек.Настройки.Отбор,
				ЭлементНастроек.Ключ,
				ЭлементНастроек.Значение, 
				ВидСравненияКомпоновкиДанных.Равно,
				,
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
			КонецЦикла;	

		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписиНаСервере в формах счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, в которой обрабатывается событие.
//
Процедура ФормаСчетаФактурыПослеЗаписиНаСервере(Форма, ТекущийОбъект) Экспорт
		
	Ссылка = ТекущийОбъект.Ссылка;
	
	Если Форма.РеквизитыЭСФ.ЗаписатьЭСФ Тогда
		ЭСФОбъект = Форма.РеквизитыЭСФ.СсылкаЭСФ.ПолучитьОбъект();
		ЭСФОбъект.СчетФактура = Ссылка;
		ЭСФОбъект.Записать();
	КонецЕсли;
	
	ОбновитьПредставлениеЭСФ(Форма, ТекущийОбъект.Ссылка);
	
КонецПроцедуры

// Обновляет представление гиперссылки ЭСФ в формах счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой необходимо обновить представление гиперссылки ЭСФ.
//  СсылкаСчетФактура - ДокументСсылка.СчетФактура<Направление> -
//   Ссылка на счет-фактуру, в форме которого необходимо обновить представление ЭСФ.
//   Если не задано, то используется Форма.Ссылка или Форма.Объект.Ссылка.
//
Процедура ОбновитьПредставлениеЭСФ(Форма, Знач СсылкаСчетФактура = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаСчетФактура) Тогда
		СчетФактура = СсылкаСчетФактура;
	Иначе
		СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);
	КонецЕсли;
	
	ЭтоСчетФактураВыданный = ?(ТипЗнч(СчетФактура) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный(), Истина, Ложь);
	Элементы = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.ЭлементыФормы, Форма.Элементы);
	
	// Прервать выполнение, если документ был выписан или получен на бумажном носителе.
	ИмяРеквизитаСпособОбмена = ?(ЭтоСчетФактураВыданный, "СпособВыставления", "СпособПолучения");
	
	// Заполнить реквизит формы СсылкаЭСФ.
	Если НЕ СчетФактура.Пустая() Тогда
		Форма.РеквизитыЭСФ.СсылкаЭСФ = АктуальныйЭСФ(СчетФактура);
	Иначе
		Если ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма) Тогда
			Если ТипЗнч(Форма.ПараметрОснование) = Тип("ДокументСсылка.ЭСФ") Тогда
				Форма.РеквизитыЭСФ.СсылкаЭСФ = Форма.ПараметрОснование; 
			КонецЕсли;
		Иначе
			Если Форма.Параметры.Свойство("Основание") И ТипЗнч(Форма.Параметры.Основание) = Тип("ДокументСсылка.ЭСФ") Тогда
				Форма.РеквизитыЭСФ.СсылкаЭСФ = Форма.Параметры.Основание;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСчетФактураВыданный Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
			
			Если ЭСФСерверПереопределяемый.ДокументВыписанНаБумажномНосителе(Форма, ИмяРеквизитаСпособОбмена) Тогда
				Форма.ПредставлениеЭСФ = НСтр("ru = 'Создать ЭСФ для счета-фактуры, выписанного на бумаге'");
			Иначе
				Форма.ПредставлениеЭСФ = НСтр("ru = 'Создать ЭСФ'");
			КонецЕсли;
			Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветЧерный();
			
		Иначе
			
			СостояниеЭСФ = Форма.РеквизитыЭСФ.СсылкаЭСФ.Состояние;
			
			// Установить текст гиперссылки ЭСФ.
			Форма.ПредставлениеЭСФ = НСтр("ru = '%ЭСФ% (%СостояниеЭСФ%)'");
			Форма.ПредставлениеЭСФ = СтрЗаменить(Форма.ПредставлениеЭСФ, "%ЭСФ%", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Форма.РеквизитыЭСФ.СсылкаЭСФ));
			Форма.ПредставлениеЭСФ = СтрЗаменить(Форма.ПредставлениеЭСФ, "%СостояниеЭСФ%", СостояниеЭСФ);
			
			// Установить цвет гиперссылки ЭСФ.
			Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветСостоянияЭСФ(СостояниеЭСФ);
			
		КонецЕсли;
		
	Иначе // ЭтоСчетФактураПолученный
		
		Если НЕ ЗначениеЗаполнено(Форма.РеквизитыЭСФ.СсылкаЭСФ) Тогда
			
			Если ЭСФСерверПереопределяемый.ДокументВыписанНаБумажномНосителе(Форма, ИмяРеквизитаСпособОбмена) Тогда
				Форма.ПредставлениеЭСФ = НСтр("ru = 'Выбрать ЭСФ для счета-фактуры, выписанного на бумаге'");
			Иначе
				Форма.ПредставлениеЭСФ = НСтр("ru = 'Выбрать ЭСФ'");
			КонецЕсли;

			Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветЧерный();
			
		Иначе
			
			СостояниеЭСФ = Форма.РеквизитыЭСФ.СсылкаЭСФ.Состояние;
			
			// Установить текст гиперссылки ЭСФ.
			Форма.ПредставлениеЭСФ = НСтр("ru = '%ЭСФ% (%СостояниеЭСФ%)'");
			Форма.ПредставлениеЭСФ = СтрЗаменить(Форма.ПредставлениеЭСФ, "%ЭСФ%", ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(Форма.РеквизитыЭСФ.СсылкаЭСФ));
			Форма.ПредставлениеЭСФ = СтрЗаменить(Форма.ПредставлениеЭСФ, "%СостояниеЭСФ%", СостояниеЭСФ);
			
			// Установить цвет гиперссылки ЭСФ.
			Элементы.ПредставлениеЭСФ.ЦветТекста = ЭСФКлиентСервер.ЦветСостоянияЭСФ(СостояниеЭСФ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет представление гиперссылки "Сторно" в формах счетов-фактур.
//
// Параметры:
//  Форма - Форма, УправляемаяФорма - Форма счета-фактуры, 
//   в которой необходимо обновить представление гиперссылки "Сторно".
//
Процедура ОбновитьПредставлениеСторно(Форма) Экспорт
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ОтражатьОтзывВУчете() Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.Ссылка, Форма.Объект.Ссылка);		
	Элементы = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма.ЭлементыФормы, Форма.Элементы);
	
	МассивСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(СчетФактура);
	
	// Заполнить реквизит формы МассивСторнирований.
	Форма.РеквизитыЭСФ = ЭСФКлиентСервер.РеквизитыЭСФ(Форма);	
	Форма.РеквизитыЭСФ.МассивСторнирований.Очистить();
	Для Каждого ДанныеСторнирования Из МассивСторнирований Цикл
		Форма.РеквизитыЭСФ.МассивСторнирований.Добавить(ДанныеСторнирования.Ссылка);
	КонецЦикла;
	
	// Заполнить реквизит формы ПредставлениеСторно.
	Количество = МассивСторнирований.Количество(); 
	Если Количество = 0 Тогда
		Форма.ПредставлениеСторно = НСтр("ru = 'Сторнировать документ'");
		Элементы.ПредставлениеСторно.ЦветТекста = ЭСФКлиентСервер.ЦветЧерный();
	ИначеЕсли Количество = 1 Тогда
		Форма.ПредставлениеСторно = Форма.РеквизитыЭСФ.МассивСторнирований[0];
		Элементы.ПредставлениеСторно.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	ИначеЕсли Количество > 1 Тогда
		Форма.ПредставлениеСторно = НСтр("ru = 'Счет-фактура сторнирован %Количество% %Раз%'");
		Форма.ПредставлениеСторно = СтрЗаменить(Форма.ПредставлениеСторно, "%Количество%", Количество);
		Если Количество = 2 ИЛИ Количество = 3 ИЛИ Количество = 4 Тогда
			Форма.ПредставлениеСторно = СтрЗаменить(Форма.ПредставлениеСторно, "%Раз%", НСтр("ru = 'раза'"));
		Иначе
			Форма.ПредставлениеСторно = СтрЗаменить(Форма.ПредставлениеСторно, "%Раз%", НСтр("ru = 'раз'"));
		КонецЕсли;
		Элементы.ПредставлениеСторно.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособОбменаСчетаФактуры(СсылкаСчетФактура, СпособВыставленияПолучения = "Электронно") Экспорт
	
	ЭСФСерверПереопределяемый.УстановитьСпособОбменаСчетаФактуры(СсылкаСчетФактура, СпособВыставленияПолучения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий модулей объектов счетов-фактур

Процедура ПроверитьВозможностьИзмененияСчетаФактуры(ОбъектСчетФактура, Отказ)
	
	МассивСообщений = Новый Массив;	
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Выполнить безусловные проверки, не зависящие от наличия ЭСФ.
	РазрешитьЗапись = ПроверитьВозможностьЗаписиСчетаФактуры(ОбъектСчетФактура, МассивСообщений); 
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Выполнить проверки, связанные с ЭСФ.				
	МассивИзменяемыхРеквизитов = Новый Массив;
	
	Если ТипЗнч(ОбъектСчетФактура) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		ЭСФСерверПереопределяемый.ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураВыданный(МассивИзменяемыхРеквизитов);		
	Иначе // ТипЗнч(ОбъектСчетФактура) = Тип("ДокументОбъект.СчетФактураПолученный")
		ЭСФСерверПереопределяемый.ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураПолученный(МассивИзменяемыхРеквизитов);		
	КонецЕсли;
	
	РазрешитьЗапись = РазрешитьЗапись И ПроверитьВозможностьЗаписиОбъектаСвязанногоСЭСФ(ОбъектСчетФактура, МассивИзменяемыхРеквизитов, МассивСообщений);
	
	
	
	//////////////////////////////////////////////////////////////////////////////
	// Показать сообщения, в случае невозможности записи счета-фактуры.
	Если НЕ РазрешитьЗапись Тогда		
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Если ЗначениеЗаполнено(ОбъектСчетФактура.Ссылка) Тогда
			Сообщение.Текст = НСтр("ru = 'Невозможно записать документ ""%СчетФактура%"":'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%СчетФактура%", ОбъектСчетФактура.Ссылка);
		Иначе	
			Сообщение.Текст = НСтр("ru = 'Невозможно записать документ:'");
		КонецЕсли;	
		Сообщение.УстановитьДанные(ОбъектСчетФактура);
		Сообщение.Сообщить();
		
		Для Каждого Сообщение Из МассивСообщений Цикл
			Сообщение.Сообщить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает записываемый объект, с объектом из базы данных.
// Проверяет изменения реквизитов, количества строк табличных частей
// и реквизитов табличных частей. 
// Если изменения допустимы, то разрешает запись, иначе запрещает запись.
//
// Параметры:
//  Объект - Любой ссылочный объект - Входящий. Объект, который необходимо проверить.
//  МассивИзменяемыхРеквизитов - Массив - Входящий. См. ЭСФСерверПереопределяемый.ЗаполнитьМассивИзменяемыхРеквизитовДокументаСчетФактураВыданный().
//  МассивСообщений - Массив - Возвращаемый. Массив сообщений объясняющих почему невозможно записать объект.
//
// Возвращаемое значение:
//  Булево - Истина - Запись возможна, Ложь - в противном случае.
//
Функция ПроверитьВозможностьЗаписиОбъектаСвязанногоСЭСФ(Знач Объект, Знач МассивИзменяемыхРеквизитов, МассивСообщений)
	
	Если Объект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуИзменений") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеАктуальногоЭСФ = ДанныеАктуальногоЭСФ(Объект.Ссылка);
	
	Если ДанныеАктуальногоЭСФ = Неопределено Тогда
		Возврат Истина;	
	КонецЕсли;
	
	СсылкаЭСФ = ДанныеАктуальногоЭСФ.СчетФактура;
	СостояниеЭСФ = ДанныеАктуальногоЭСФ.Состояние;
	
	Если СостояниеЭСФ = Перечисления.СостоянияЭСФ.Сформирован
		ИЛИ СостояниеЭСФ = Перечисления.СостоянияЭСФ.ОтклоненСервером Тогда
		Возврат Истина; // В данном случае разрешается изменять счет-фактуру. Актуально только для выданных ЭСФ
	КонецЕсли;
 			
	МетаданныеОбъекта = Объект.Метаданные();
	СтарыйОбъект = Объект.Ссылка.ПолучитьОбъект();
	НовыйОбъект = Объект;
	
	// Проверить изменения стандартных реквизитов.
	Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		// Стандартные реквизиты, которые не проверяются.
		Если СтандартныйРеквизит.Имя = "Ссылка"
			ИЛИ СтандартныйРеквизит.Имя = "Проведен"
			ИЛИ СтандартныйРеквизит.Имя = "ПометкаУдаления" Тогда
			Продолжить;
		КонецЕсли;
		
		// Страндартные реквизиты, которые могут изменяться.
		Если МассивИзменяемыхРеквизитов.Найти(СтандартныйРеквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Для счетов-фактур допускается, чтобы дата отличалась в течение дня. 
		Если СтандартныйРеквизит.Имя = "Дата" И 
			(ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураВыданный") 
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.СчетФактураПолученный")) Тогда
			
			Если НачалоДня(СтарыйОбъект.Дата) = НачалоДня(НовыйОбъект.Дата) Тогда 	
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Стандартные реквизиты, изменение которых запрещено.
		Если СтарыйОбъект[СтандартныйРеквизит.Имя] <> НовыйОбъект[СтандартныйРеквизит.Имя] Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Поле ""%Поле%"" не может быть изменено.'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Поле%", СтандартныйРеквизит.Представление());
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Поле = СтандартныйРеквизит.Имя;
			МассивСообщений.Добавить(Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверить изменения реквизитов.
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		// Реквизиты, которые могут изменяться.
		Если МассивИзменяемыхРеквизитов.Найти(Реквизит.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Реквизиты, изменение которых запрещено.
		Если СтарыйОбъект[Реквизит.Имя] <> НовыйОбъект[Реквизит.Имя] Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Поле ""%Поле%"" не может быть изменено.'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Поле%", Реквизит.Представление());
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Поле = Реквизит.Имя;
			МассивСообщений.Добавить(Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверить изменения табличных частей.
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		// Табличные части, которые могут полностью изменяться,
		// включая количество строк, порядок строк, значения реквизитов строк и т.д.
		Если МассивИзменяемыхРеквизитов.Найти(ТабличнаяЧасть.Имя + ".*") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверить количество строк табличной части.
		Если СтарыйОбъект[ТабличнаяЧасть.Имя].Количество() <> НовыйОбъект[ТабличнаяЧасть.Имя].Количество() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Количество строк в табличной части ""%ТабличнаяЧасть%"" не может быть изменено.'");
			Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ТабличнаяЧасть%", ТабличнаяЧасть.Представление());
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Поле = ТабличнаяЧасть.Имя;
			МассивСообщений.Добавить(Сообщение);
			// Нет смысла проверять реквизиты табличной части, т.к. отличается количество строк.
			Продолжить;
		КонецЕсли;
		
		// Проверить реквизиты табличной части.
		Для Каждого Реквизит Из МетаданныеОбъекта.ТабличныеЧасти[ТабличнаяЧасть.Имя].Реквизиты Цикл
			
			// Реквизиты табличной части, которые могут изменяться.
			Если МассивИзменяемыхРеквизитов.Найти(ТабличнаяЧасть.Имя + "." + Реквизит.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Реквизиты табличной части, изменение которых запрещено.
			МаксимальныйИндекс = СтарыйОбъект[ТабличнаяЧасть.Имя].Количество() - 1;
			Для ИндексСтроки = 0 По МаксимальныйИндекс Цикл
				Если СтарыйОбъект[ТабличнаяЧасть.Имя][ИндексСтроки][Реквизит.Имя] <> НовыйОбъект[ТабличнаяЧасть.Имя][ИндексСтроки][Реквизит.Имя] Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Колонка ""%Реквизит%"" в строке %НомерСтроки% табличной части ""%ТабличнаяЧасть%"" не может быть изменена.'");
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%Реквизит%", Реквизит.Представление());
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%НомерСтроки%", ИндексСтроки + 1);
					Сообщение.Текст = СтрЗаменить(Сообщение.Текст, "%ТабличнаяЧасть%", ТабличнаяЧасть.Представление());
					Сообщение.УстановитьДанные(Объект);
					Сообщение.Поле = "" + ТабличнаяЧасть.Имя + "[" + ИндексСтроки + "]." + Реквизит.Имя;
					МассивСообщений.Добавить(Сообщение);
				КонецЕсли;			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МассивСообщений.Количество() = 0 Тогда
		РазрешитьЗапись = Истина;	
	Иначе
		РазрешитьЗапись = Ложь;	
	КонецЕсли;
	
	Возврат РазрешитьЗапись;
	
КонецФункции

// Запрещает запись счета-фактуры выданног и полученного,
// если в результате записи может нарушиться правила уникальности СФ.
//
Функция ПроверитьВозможностьЗаписиСчетаФактуры(Знач Объект, МассивСообщений)
	
	Возврат ЭСФСерверПереопределяемый.ПроверитьВозможностьЗаписиСчетаФактуры(Объект, МассивСообщений);	
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Отправка ЭСФ

// Заполняет документ ЭСФ на основании документа СчетФактураВыданный.
//
// Параметры:
//  СсылкаСчетФактура - ДокументСсылка.СчетФактураВыданный -
//   Счет-фактура, на основании которого необходимо заполнить ЭСФ.
//  ОбъектЭСФ - ДокументОбъект.ЭСФ - ЭСФ, который необходимо заполнить.
//
Процедура ЗаполнитьИсходящийЭСФ(Знач СсылкаСчетФактура, ОбъектЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьИсходящийЭСФ(СсылкаСчетФактура, ОбъектЭСФ);
	
КонецПроцедуры

// Создает коллекцию XML строк Invoice и коллекцию XML строк SignedContent на основе документов ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Входящий - Массив ЭСФ, на основе которых необходимо создать 
//   коллекцию XML строк Invoice и коллекцию XML строк SignedContent. 
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  КоллекцияInvoiceXML - Соответствие - Возвращаемый - Созданная коллекция XML строк Invoice.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка Invoce.
//   |- Значение - Стркоа - Созданная XML строка Invoce.
//  КоллекцияSignedContentXML - Соответствие - Возвращаемый - Созданная коллекция XML строк SignedContent.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка SignedContent.
//   |- Значение - Стркоа - Созданная XML строка SignedContent.
//
Процедура СоздатьИсходящиеInvoice(Знач МассивЭСФ, Знач УстанавливатьПодпись, Знач ТипПодписиЭСФ, КоллекцияInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьИсходящиеInvoice(МассивЭСФ, УстанавливатьПодпись, ТипПодписиЭСФ, КоллекцияInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
	
КонецПроцедуры

// Выполняет метод syncInvoice() API ИС ЭСФ.
// Записывает результаты отправки в отправляемые документы ЭСФ: идентификатор, ошибки ФЛК и т.д. 
//
// Параметры:
//  КоллекцияInvoiceXML - Соответствие - Коллекция XML строк отправляемых ЭСФ.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, на основе которого была создана XML строка.
//   |- Значение - Стркоа - XML строка Invoce.
//  КоллекцияПодписей - Соответствие - Коллекция электронных подписей, которые будут вставлены в КоллекцияInvoiceXML.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, на основе которого была создана электронная подпись.
//   |- Значение - Стркоа - Электронная подпись.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Соответствие - Результат отправки ЭСФ.
//   |- Ключ - ДокументСсылка.ЭСФ - Ссылка на отправляемый ЭСФ.
//   |- Значение - Структура - Результат отправки ЭСФ.
//       |- Номер - Строка - Номер отправленного ЭСФ.
//       |- Дата - Дата - Дата отправленного ЭСФ.
//       |- ПринятИСЭСФ - Булево - Признак того, что ЭСФ прошел первичный ФЛК и получил идентификационный номер.
//       |- Идентификатор - Строка - Идентификтаор ЭСФ, присвоенный ИС ЭСФ.
//       |- Ошибки - Массив - Массив ошибок первичного ФЛК.
//
// Примечание:
//  Если ИдентификаторСессии = Неопределено, то сессия будет автоматически открыта и закрыта в процессе выполнения функции, 
//  Если ИдентификаторСессии <> Неопределено, то будет использоваться переданный ИдентификаторСессии и сессия не будет закрыта.
//
Функция ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, Знач КоллекцияInvoiceXML, Знач КоллекцияПодписей, Знач ПрофильИСЭСФ, Знач ОткрытыйКлючЭЦП, ИдентификаторСессии = Неопределено, УполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, КоллекцияInvoiceXML, КоллекцияПодписей, ПрофильИСЭСФ, ОткрытыйКлючЭЦП, ИдентификаторСессии, УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
	
КонецФункции

// См. ЭСФКлиент.ПроверитьИсходящиеЭСФ().
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПроверитьИсходящиеЭСФ(МассивИсходящихЭСФ);
	
КонецПроцедуры

// Проверяет корректность заполнения документов ЭСФ для отправки в ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка.ЭСФ".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка.ЭСФ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ЭСФ.
//   Истина - Если все ЭСФ из массива можно отправлять. 
//   Ложь - Если хотя бы один ЭСФ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры) Экспорт

	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
	
	Для Каждого СсылкаЭСФ Из МассивИсходящихЭСФ Цикл
		
		РезультатПроверки = ОбработкаОбменЭСФ.ПроверитьЭСФ(СсылкаЭСФ);
		ОбработкаОбменЭСФ.СообщитьОбнаруженыОшибки(СсылкаЭСФ, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЦикла;	
	
	// в момент отправки два параллельных сеанса могут изменить состояние ЭСФ, 
	// в данном массивае будем хранить такие ЭСФ параллельных сеансов
	// и удалять их из пакета отправки, если ЭСФ была "захвачена" другим сеансом
	МассивИсключаемыхЭСФ = Новый Массив;

	НеПерезаполнятьОчередьОтправки = ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки");
	
	СообщениеПользователю = Новый СообщениеПользователю;
	
	СтруктураВерсий = ЭСФСервер.ПолучитьТекущуюВерсиюЭСФиAPI(ТекущаяДата());
	ТекущаяВерсияЭСФ = ?(ЗначениеЗаполнено(СтруктураВерсий.ВерсияЭСФ), СтруктураВерсий.ВерсияЭСФ, 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИсходящихЭСФ", МассивИсходящихЭСФ);
	Запрос.УстановитьПараметр("УполномоченныйСотрудник", ЭСФКлиентСерверПереопределяемый.ТекущийПользователь());
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументЭСФ.Ссылка КАК ЭСФ,
		|	ДокументЭСФ.Состояние КАК СостояниеЭСФ,
		|	ВЫБОР КОГДА ДокументЭСФ.ВерсияБланкаЭСФ = 0 ТОГДА 1 ИНАЧЕ ДокументЭСФ.ВерсияБланкаЭСФ КОНЕЦ КАК ВерсияБланкаЭСФ,
		// При повторной отправке перезаполнять очередь отправки не нужно
		|	" + ?(НеПерезаполнятьОчередьОтправки, "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)", "ЕСТЬNULL(ОчередьЭСФ.ПользовательОтправки, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))") + " КАК Пользователь,
		|	ЕСТЬNULL(ОчередьЭСФ.КлючФоновогоЗадания, """") КАК УникальныйИдентификатор,
		|	&УполномоченныйСотрудник КАК УполномоченныйСотрудник
		|ИЗ
		|	Документ.ЭСФ КАК ДокументЭСФ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОтправкиЭСФ КАК ОчередьЭСФ
		|		ПО ОчередьЭСФ.ЭСФ = ДокументЭСФ.Ссылка
		|ГДЕ
		|	ДокументЭСФ.Ссылка В (&МассивИсходящихЭСФ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		// Проверить Состояние документа ЭСФ.
		Если НЕ (ВыборкаДетальныеЗаписи.СостояниеЭСФ = Перечисления.СостоянияЭСФ.Сформирован 
			ИЛИ ВыборкаДетальныеЗаписи.СостояниеЭСФ = Перечисления.СостоянияЭСФ.ОтклоненСервером)
			// документ уже в другой очереди отправки
			ИЛИ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пользователь) Тогда
			
			МассивИсключаемыхЭСФ.Добавить(ВыборкаДетальныеЗаписи.ЭСФ);
			
			ТекстСообщения = НСтр("ru = 'Документ ""%ЭСФ%"" уже отправлен или включен в другую очередь отправки в ИС ЭСФ (исключен из пакета отправки)'");	
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭСФ%", ВыборкаДетальныеЗаписи.ЭСФ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", ВыборкаДетальныеЗаписи.СостояниеЭСФ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сформирован%", Перечисления.СостоянияЭСФ.Сформирован);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтклоненСервером%", Перечисления.СостоянияЭСФ.ОтклоненСервером);
			
			СообщениеПользователю.Текст = ТекстСообщения;
			СообщениеПользователю.Сообщить();
			
			Если ВыборкаДетальныеЗаписи.ВерсияБланкаЭСФ <> ТекущаяВерсияЭСФ Тогда
				ТекстСообщения = 
				НСтр("ru = 'Документ ""%ЭСФ%"" был исключен из пакета отправки по причине несоответствия версии ЭСФ ""%ВерсияЭСФ%"" с версией, действующей на текущую дату ""%ТекВерсияЭСФ%"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭСФ%", ВыборкаДетальныеЗаписи.ЭСФ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияЭСФ%", ВыборкаДетальныеЗаписи.ВерсияБланкаЭСФ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекВерсияЭСФ%", ТекущаяВерсияЭСФ);
				
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
			КонецЕсли; 
			
		ИначеЕсли ВыборкаДетальныеЗаписи.ВерсияБланкаЭСФ <> ТекущаяВерсияЭСФ Тогда
			
			МассивИсключаемыхЭСФ.Добавить(ВыборкаДетальныеЗаписи.ЭСФ);
			
			ТекстСообщения = 
				НСтр("ru = 'Документ ""%ЭСФ%"" был исключен из пакета отправки по причине несоответствия версии ЭСФ ""%ВерсияЭСФ%"" с версией, действующей на текущую дату ""%ТекВерсияЭСФ%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭСФ%", ВыборкаДетальныеЗаписи.ЭСФ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияЭСФ%", ВыборкаДетальныеЗаписи.ВерсияБланкаЭСФ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекВерсияЭСФ%", ТекущаяВерсияЭСФ);
			
			СообщениеПользователю.Текст = ТекстСообщения;
			СообщениеПользователю.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЭСФ Из МассивИсключаемыхЭСФ Цикл
		
		ИндексСтроки = МассивИсходящихЭСФ.Найти(СтрокаЭСФ);
		
		Если НЕ ИндексСтроки = Неопределено Тогда
			
			Если НеПерезаполнятьОчередьОтправки Тогда
				// ЭСФ не находится в статусах Сформирован ИЛИ ОтклоненСервером, удалим её из очереди
				ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(СтрокаЭСФ);
			КонецЕсли;
			
			МассивИсходящихЭСФ.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// не перезаполняем очередь, если выполняется повторная отправка
	Если НЕ НеПерезаполнятьОчередьОтправки Тогда

		ОчередьОтпракиЭСФ = РегистрыСведений.ОчередьОтправкиЭСФ.СоздатьНаборЗаписей();
		
		Для Каждого СтрокаМассива Из МассивИсходящихЭСФ Цикл
			
			Если ОчередьОтпракиЭСФ.Отбор.Найти("ЭСФ") = Неопределено Тогда 
				ОтборЭСФ = ОчередьОтпракиЭСФ.Отбор.Добавить("ЭСФ");
			Иначе
				ОтборЭСФ = ОчередьОтпракиЭСФ.Отбор.ЭСФ;
			КонецЕсли;
			
			ОчередьОтпракиЭСФ.Отбор.ЭСФ.Установить(СтрокаМассива);
			
			ОчередьОтпракиЭСФ.Прочитать();
			
			Если ОчередьОтпракиЭСФ.Количество() = 0 Тогда
				
				СтрокаОчереди = ОчередьОтпракиЭСФ.Добавить();
				СтрокаОчереди.ЭСФ = СтрокаМассива;
				СтрокаОчереди.ПользовательОтправки = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
				
				Попытка
					
					ОчередьОтпракиЭСФ.Записать();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОписаниеОшибки(),);
					
					Возврат Ложь;
					
				КонецПопытки;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Отправка ""%ЭСФ%"" невозможна, документ  уже отправляется другим пользователем'");	
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭСФ%", СтрокаМассива);
				
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Сообщить();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат МассивИсходящихЭСФ.Количество() > 0;
	
КонецФункции

Процедура ОчиститьОчередьОтправкиЭСФ(Знач КоллекцияМассивЭСФ) Экспорт
	
	Если ТипЗнч(КоллекцияМассивЭСФ) = Тип("Массив") Тогда
		
		Для Каждого ЭСФ Из КоллекцияМассивЭСФ Цикл
			
			ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(ЭСФ);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(КоллекцияМассивЭСФ) = Тип("Соответствие") Тогда
		
		Для Каждого ЭСФ Из КоллекцияМассивЭСФ Цикл
			
			ЭСФСервер.ОчиститьЗаписьОтправкиЭСФ(ЭСФ.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ОчиститьЗаписьОтправкиЭСФ(Знач ЭСФ) Экспорт
	
	ЗаписьПрошлаУспешно = Истина;
	
	ОчередьОтпракиЭСФ = РегистрыСведений.ОчередьОтправкиЭСФ.СоздатьНаборЗаписей();
	
	Если ОчередьОтпракиЭСФ.Отбор.Найти("ЭСФ") = Неопределено Тогда 
		ОтборЭСФ = ОчередьОтпракиЭСФ.Отбор.Добавить("ЭСФ");
	Иначе
		ОтборЭСФ = ОчередьОтпракиЭСФ.Отбор.ЭСФ;
	КонецЕсли;
	
	ОчередьОтпракиЭСФ.Отбор.ЭСФ.Установить(ЭСФ);

	ОчередьОтпракиЭСФ.Прочитать();
	
	Если ОчередьОтпракиЭСФ.Количество() <> 0 Тогда
		
		ОчередьОтпракиЭСФ.Очистить();
		
		Попытка
			
			ОчередьОтпракиЭСФ.Записать(Истина);
			
		Исключение
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ОписаниеОшибки(),);
			ЗаписьПрошлаУспешно = Ложь;
			
		КонецПопытки;
			
	КонецЕсли;
	
КонецФункции
			
Процедура ЗаполнитьДанныеФоновогоЗаданияВОчередиОтправкиЭСФ(Знач КоллекцияМассивИсходящихЭСФ, Знач КлючФоновогоЗадания) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьОтправкиЭСФ.СоздатьНаборЗаписей();
	
	Для Каждого СтрокаОрганизации Из КоллекцияМассивИсходящихЭСФ Цикл
		
		Для Каждого СтрокаЭСФ Из СтрокаОрганизации.Значение Цикл
			
			НаборЗаписей.Отбор.ЭСФ.Установить(СтрокаЭСФ.Ключ);
			НаборЗаписей.Прочитать();
			
			Если НЕ НаборЗаписей.Количество() = 0 Тогда
				НаборЗаписей[0].ДатаОтправки = ТекущаяДатаСеанса();
				НаборЗаписей[0].КлючФоновогоЗадания = КлючФоновогоЗадания;
			КонецЕсли;

			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры			

// Проверяет корректность заполнения счетов-фактур для создания ЭСФ.
//
// Параметры:
//  МассивСчетовФактур - Массив - Массив счетов-фактур, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка.СчетФактураВыданный".
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка.СчетФактураВыданный - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность создания документов ЭСФ для всех счетов-фактур.
//   Истина - Если для всех счетов-фактур из массива можно создать документы ЭСФ. 
//   Ложь - Если хотя бы для одного счета-фактуры нельзя создать документ ЭСФ.
//
Функция ПроверитьВозможностьСозданияДокументовЭСФ(Знач МассивСчетовФактур, Знач ПоказыватьСообщения = Истина, ТекстыСообщений = Неопределено) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ПроверитьВозможностьСозданияДокументовЭСФ(МассивСчетовФактур, ПоказыватьСообщения, ТекстыСообщений);	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение ЭСФ

Функция ВыполнитьСинхронизациюСИСЭСФ() Экспорт
	
	ЭСФСерверПереопределяемый.ПриНачалеВыполненияРегламентногоЗадания();
	
	// Создать и заполнить МассивДанныхПрофилейИСЭСФ. 	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации <> """"
	|	И НЕ ПрофилиИСЭСФ.ПометкаУдаления
	|	И ПрофилиИСЭСФ.ИспользоватьДляРегламентногоЗадания";
	
	ВыборкаПрофилиИСЭСФ = Запрос.Выполнить().Выбрать();
	
	МассивДанныхПрофилейИСЭСФ = Новый Массив;
	Пока ВыборкаПрофилиИСЭСФ.Следующий() Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ВыборкаПрофилиИСЭСФ.ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
	КонецЦикла;
	
	КоллекцияРезультатов = Новый Соответствие;
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	ВерсияИСЭСФ = ПараметрыЭСФ.ВерсияИСЭСФ;

	НомерШага = 0;
	
	// Выполнить синхронизацию для каждого профиля ИС ЭСФ.
	Для Каждого ДанныеПрофиляИСЭСФ Из МассивДанныхПрофилейИСЭСФ Цикл
		
		ДанныеПрофиля = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ;	
		
		ПараметрыМетодаВходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Входящий);	
		ПараметрыМетодаИсходящихЭСФ = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("queryUpdates"), Перечисления.НаправленияЭСФ.Исходящий);	
	
		ИдентификаторСессии = ОткрытьСессию(ДанныеПрофиляИСЭСФ, ВерсияИСЭСФ);
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		Пока НЕ ЭтоПоследняяПорция Цикл						
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Входящий, ДанныеПрофиляИСЭСФ, Ложь, Ложь, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаВходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема);					
		КонецЦикла;
		ПодтвердитьПолучениеВходящихЭСФ(МассивИдентификаторовДляОбновленияСтатусаПриема, ДанныеПрофиляИСЭСФ, ИдентификаторСессии); // Отправка уведомления о приеме
		
		// Обновление исходящих ЭСФ
		ЭтоПоследняяПорция = Ложь;
		МассивИдентификаторовДляОбновленияСтатусаПриема = Новый Массив(); // накапливаем идентификаторы, чтобы отправить уведомление после получения всех документов
		Пока НЕ ЭтоПоследняяПорция Цикл		 	
			ЭтоПоследняяПорция = ПолучитьДанныеНовыхЭСФ(Перечисления.НаправленияЭСФ.Исходящий, ДанныеПрофиляИСЭСФ, Ложь, Истина, ИдентификаторСессии, ВерсияИСЭСФ, ПараметрыМетодаИсходящихЭСФ, МассивИдентификаторовДляОбновленияСтатусаПриема);
	 	КонецЦикла;
		
		ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
		
		КоллекцияРезультатов.Вставить(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, Новый Структура("Успешно, ДатаВремя", Истина, ТекущаяДата()));
		
	КонецЦикла;
		
	Если КоллекцияРезультатов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заданы профили для автоматической синхронизации с ИС ЭСФ. Синхронизация не выполнена.'");
		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

// Возвращает параметры метода API ИС ЭСФ, сохраненные в регистре сведений ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСЭСФ.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметры которого необходимо получить.
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление ЭСФ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - Ключ - Имя параметра, Значение - Значение параметра.
//                     Имя параметра возвращается в верхнем регистре.
//
// Пример:
//  // Получение сохраненных параметров метода queryInvoiceStatusUpdate(), например, lastEventId и limit.
//  СтруктураПараметров = ПолучитьПараметрыМетода(МояСтруктурнаяЕдиница, "queryInvoiceStatusUpdate", Перечисления.НаправленияЭСФ.Исходящий);
//
Функция ПолучитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач НаправлениеЭСФ) Экспорт
	                       
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыМетодовИСЭСФ.ИмяПараметра,
	|	ПараметрыМетодовИСЭСФ.ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыМетодовИСЭСФ КАК ПараметрыМетодовИСЭСФ
	|ГДЕ
	|	ПараметрыМетодовИСЭСФ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПараметрыМетодовИСЭСФ.ИмяМетода = &ИмяМетода" + ?(ЗначениеЗаполнено(НаправлениеЭСФ), "
	|	И ПараметрыМетодовИСЭСФ.НаправлениеЭСФ = &НаправлениеЭСФ", ""); // параметр может быть не заполнен при синхронизации ГСВС
	
	Запрос.УстановитьПараметр("ИмяМетода", ИмяМетода);
	Запрос.УстановитьПараметр("НаправлениеЭСФ", НаправлениеЭСФ);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыМетода = Новый Структура();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыМетода.Вставить(ВРег(Выборка.ИмяПараметра), Выборка.ЗначениеПараметра);
	КонецЦикла;
	
	Возврат ПараметрыМетода;
	
КонецФункции

// Сохраняет параметр метода API ИС ЭСФ в регистр сведений ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  СтруктурнаяЕдиница - См. Метаданные.РегистрыСведений.ПараметрыМетодовИСЭСФ.Измерения.СтруктурнаяЕдиница.Тип - Структурная единица, от имени которой будет вызываться метод.
//  ИмяМетода - Строка - Имя метода, параметр которого необходимо сохранить.
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление ЭСФ, для которого необходимо сохранить параметр.
//  ИмяПараметра - Строка - Имя сохраняемого параметра.
//  ЗначениеПараметра - Строка - Значение сохраняемого парметра.
//
Процедура СохранитьПараметрыМетода(Знач СтруктурнаяЕдиница, Знач ИмяМетода, Знач НаправлениеЭСФ, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	Запись = РегистрыСведений.ПараметрыМетодовИСЭСФ.СоздатьМенеджерЗаписи();
	Запись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	Запись.ИмяМетода = ИмяМетода;
	Запись.НаправлениеЭСФ = НаправлениеЭСФ;
	Запись.ИмяПараметра = ИмяПараметра;
	Запись.ЗначениеПараметра = ЗначениеПараметра;
	
	Запись.Записать();
	
КонецПроцедуры

// Создает новые и обновляет существующие документы ЭСФ. 
// Создает новые и обновляет существующие элементы ЭСФПрисоединенныеФайлы.
//
// Параметры:
//	invoiceInfoList - СписокXDTO - Список invoice, на основании которых необходимо создать и обновить документы ЭСФ. 
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в invoiceInfoList.
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, которой будут принадлежать все созданные документы ЭСФ.
//  УчитыватьВсеСтатусыЭСФ - Булево - Если Истина, то будут создаваться и обновляться все ЭСФ: 
//   Черновики, Импортированные, Ошибочные, Доставленные, Отправленные и т.д.
//   Если Ложь, то будут создаваться и обновляться все ЭСФ, кроме Черновик, Ошибочный, Импортированный.
//
Процедура СоздатьОбновитьПолучаемыеЭСФ(Знач invoiceInfoList, Знач НаправлениеЭСФ, Знач СтруктурнаяЕдиница, Знач УчитыватьВсеСтатусыЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьОбновитьПолучаемыеЭСФ(invoiceInfoList, НаправлениеЭСФ, СтруктурнаяЕдиница, УчитыватьВсеСтатусыЭСФ);	
	
КонецПроцедуры

Процедура ЗаполнитьЭСФ(Знач invoice, Знач СтруктурнаяЕдиница, Знач НаправлениеЭСФ, ЭСФ) Экспорт
	  
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьЭСФ(invoice, СтруктурнаяЕдиница, НаправлениеЭСФ, ЭСФ);
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруПолученный(Знач СсылкаЭСФ, ОбъектСчетФактура) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьСчетФактуруПолученный(СсылкаЭСФ, ОбъектСчетФактура);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение статусов ЭСФ (Отзыв, Отклонение и т.д.)

// Возвращает текст XML запроса для изменения статуса ЭСФ,
// а также текст для формирования подписи запроса.
//
// Параметры:
//  Действие - Строка - Определяет, какой запрос будет создан.
//   Должно быть ЭСФКлиентСервер.ДействиеОтзыв() или ЭСФКлиентСервер.ДействиеОтклонение().
//  КоллецияДляИзмененияСтатусов - Соответствие - Данные для формирования запроса:
//   |- Ключ - Строка - Идентификатор ЭСФ, у которого будет изменен статус.
//   |- Значение - Строка - Причина изменения статуса.
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//
// Возвращаемое значение:
//  Структура - Сформированный запрос на изменение статуса.
//   |- ТекстЗапроса - Строка - Текст запроса на изменение статуса.
//   |- СтрокаДляПодписи - Строка - Строка, на основе которой будет сформирована ЭЦП запроса.
//
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ОткрытыйКлючЭЦП);
	
КонецФункции
                                                                
// Выполняет методы ИС ЭСФ для изменения статусов, например: declineInvoiceById, revokeInvoiceById и т.д..
// Обновляет документы ЭСФ. Возвращает результат работы выполненного метода.
//
// Параметры:
//  Действие - Строка - Определяет, какой метод ИС ЭСФ будет выполняться.
//   Должно быть ЭСФКлиентСервер.ДействиеОтзыв() или ЭСФКлиентСервер.ДействиеОтклонение().
//  ТекстЗапроса - Строка - Текст XML запроса на изменение статусов, 
//   формируется функцией ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов().
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ - Профиль для установки сессии с ИС ЭСФ.
//  ИдентификаторСессии - Строка - Идентификатор сессии, для выполения запроса к ИС ЭСФ.
//
// Возвращаемое значение:
//  Соответствие - Результат выполнения метода ИС ЭСФ. Содержит данные по всем идентификаторам из ТекстЗапроса.
//   |- Ключ - Строка - Идентификатор ЭСФ, для которого изменялся статус.
//   |- Значение - Структура - Результат изменения статуса.
//       |- СтатусИзменился - Булево - Признак того, что выполненный запрос изменил статус ЭСФ.
//       |- ТекущийСтатус - Структура, Неопределено - Текущий статус ЭСФ. См. Обработки.ОбменЭСФ.ДанныеСтатусаInvoice(). 
//           Если в ИС ЭСФ нет ЭСФ с идентификатором из поля Ключ, то имеет значение Неопределено. 
//
Функция ВыполнитьЗапросНаИзменениеСтатусов(Знач Действие, Знач ТекстЗапроса, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пользователи ИС ЭСФ и Профили ИС ЭСФ

// Возвращает массив пользователей ИС ЭСФ, связанных с пользователем ИБ.
//
// Параметры:
//  ПользовательИБ - СправочникСсылка.Пользователи - Пользователь, для которого необходимо найти пользователей ИС ЭСФ.
//
// Возвращаемое значение:
//  Массив - Массив найденных пользователей ИС ЭСФ.
//   Каждый элемент массива имеет тип СправочникСсылка.ПользователиИСЭСФ.
//
Функция ПользователиИСЭСФ(Знач ПользовательИБ) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПользователиИСЭСФ.Ссылка КАК ПользовательИСЭСФ
	|ИЗ
	|	Справочник.ПользователиИСЭСФ КАК ПользователиИСЭСФ
	|ГДЕ
	|	ПользователиИСЭСФ.Владелец = &ПользовательИБ
	|	И НЕ ПользователиИСЭСФ.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПользовательИБ", ПользовательИБ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПользователейИСЭСФ = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивПользователейИСЭСФ.Добавить(Выборка.ПользовательИСЭСФ);
	КонецЦикла;
	
	МассивПользователейИСЭСФ = Новый ФиксированныйМассив(МассивПользователейИСЭСФ);
	
	Возврат МассивПользователейИСЭСФ;
	
КонецФункции

Функция ПользователиИСЭСФБезПароляАутентификации(Знач МассивПрофилейИСЭСФ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрофилиИСЭСФ.Владелец.Ссылка КАК ПользователиИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.Ссылка В(&МассивПрофилейИСЭСФ)
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации = """"";
	Запрос.УстановитьПараметр("МассивПрофилейИСЭСФ", МассивПрофилейИСЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПользователейИСЭСФБезПароля = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивПользователейИСЭСФБезПароля.Добавить(Выборка.ПользователиИСЭСФ);
	КонецЦикла;
	
	Возврат МассивПользователейИСЭСФБезПароля;
	
КонецФункции

// Возвращает профили ИС ЭСФ.
//
// Параметры:
//  ПользовательИСЭСФ - СправочникСсылка.ПользователиИСЭСФ - Отбор по реквизиту ПользовательИСЭСФ (если параметр не задан, то отбора не вполняется).
//  ПользовательИБ 	- СправочникСсылка.Пользователи - Отбор по реквизиту ПользовательИСЭСФ.Владелец (если параметр не задан, то отбора не вполняется).
//  СтруктурнаяЕдиница - См. Метаданные.Справочники.ПрофилиИСЭСФ.Реквизиты.СтруктурнаяЕдиница - Отбор на реквизит СтруктурнаяЕдиница (обязательный параметр).
//
// Возвращаемое значение:
//  Массив - Найденные профили ИС ЭСФ. Кадлый элемент массива имеет тип СправочникСсылка.ПрофилиИСЭСФ.
//
Функция ПрофилиИСЭСФ(Знач СтруктурнаяЕдиница, Знач ПользовательИСЭСФ = Неопределено, Знач ПользовательИБ = Неопределено) Экспорт
	
	УсловиеОтбора = "";	
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		УсловиеОтбора = " И ПрофилиИСЭСФ.СтруктурнаяЕдиница = &СтруктурнаяЕдиница ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПользовательИСЭСФ) Тогда
		УсловиеОтбора = УсловиеОтбора + " И ПрофилиИСЭСФ.Владелец В (&ПользовательИСЭСФ) ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПользовательИБ) Тогда
		УсловиеОтбора = УсловиеОтбора + " И ПрофилиИСЭСФ.Владелец.Владелец В (&ПользовательИБ) ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	НЕ ПрофилиИСЭСФ.ПометкаУдаления" + УсловиеОтбора; 
	
	Запрос.УстановитьПараметр("ПользовательИСЭСФ", 	ПользовательИСЭСФ);
	Запрос.УстановитьПараметр("ПользовательИБ", 	ПользовательИБ);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПрофилейИСЭСФ = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивПрофилейИСЭСФ.Добавить(Выборка.ПрофильИСЭСФ);
	КонецЦикла;
	
	МассивПрофилейИСЭСФ = Новый ФиксированныйМассив(МассивПрофилейИСЭСФ);
	
	Возврат МассивПрофилейИСЭСФ;
	
КонецФункции

// Возврашает таблицу структурных единиц, для которых можно создавать профили ИС ЭСФ.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Таблица структурных единиц.
//   |- СтруктурнаяЕдиница - СправочникСсылка.<Имя> - Ссылка на структурную единицу.
//   |- Представление - Строка - Представление стуктурной единицы.
//
Функция СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ() Экспорт
	
	Возврат ЭСФСерверПереопределяемый.СтруктурныеЕдиницыДляСозданияПрофилейИСЭСФ();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск документов и элементов справочников

// Возвращает ссылки на документы ЭСФ, которые уже существуют в ИБ.
// Поиск ЭСФ, которые уже существуют в ИБ, выполняется по реквизиту Идентификатор.
//
// Параметры:
//  МассивИдентификаторов - Массив - Идентификаторы, для которых необходимо найти ссылки на существующие ЭСФ.
//   Каждый элемент массива должен быть строкой, вида "97879722".
//  СтруктурнаяЕдиница - См. Справочник.ПрофилиИСЭСФ.СтруктурнаяЕдиница - 
//   Структурная единица, в пределах которой будут искаться ЭСФ с указазанными идентификаторами.
//   В ИС ЭСФ идентификатор ЭСФ уникален в пределах всей системы.
//   В ИБ идентификатор уникален в пределах структурной единицы, т.к. одна организация может отправить ЭСФ другой.
//
// Возвращаемое значение:
//  Соответствие - Найденные ЭСФ. 
//   |- Ключ - Строка - Идентификатор, для которого выполнялся поиск ЭСФ.
//   |- Значение - ДокументСсылка.ЭСФ - Найденный ЭСФ. 
//  Если ЭСФ с указанным идентификатором нет в ИБ, то значение содержит пустую ссылку на документ ЭСФ.
//
Функция НайтиСуществующиеЭСФПоИдентификаторам(Знач МассивИдентификаторов, Знач СтруктурнаяЕдиница) Экспорт

	Возврат	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСуществующиеЭСФПоИдентификаторам(МассивИдентификаторов, СтруктурнаяЕдиница);

КонецФункции

// Возвращает данные документов ЭСФ, которые являются актуальными для счетов-фактур.
//
// Параметры:
//  МассивСчетовФактур - Массив - Счета-фактуры, для которых необходимо получить данные актуальных ЭСФ.
//   Элементы массива должны иметь тип ДокументСсылка.СчетФактураВыданный или ДокументСсылка.СчетФактураПолученный.
//  ИменаРеквизитов - Строка - Имена реквизитов ЭСФ, которые необходимо получить, перечисленные через запятую.
//
// Возвращаемое значение:
//  Соответствие - Данные актуальных ЭСФ.
//   |- Ключ - ДокументСсылка.СчетФактура<Выданный/Полученный> - Счет фактура, для которого выполнялся поиск ЭСФ.
//   |- Значение - Структура, Неопределено - Данные актуального ЭСФ. 
//  Если счет-фактура имеет актуальный ЭСФ, то структура, с элементом ЭСФ и элементами из ИменаРеквизитов.
//  Если у счета-фактуры нет актуального ЭСФ, то Неопределено.
//
Функция НайтиАктуальныеЭСФПоСчетамФактурам(Знач МассивСчетовФактур, Знач ИменаРеквизитов = Неопределено) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиАктуальныеЭСФПоСчетамФактурам(МассивСчетовФактур, ИменаРеквизитов);
	
КонецФункции

// Возвращает новую пустую таблицу значений, с колонками, указанными в параметре ИменаРеквизитов. 
//
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов объекта, перечисленные через запятую.
//   В таблице будут созданы колонки с такими же именами и типами, как и указанные реквизиты.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Созданная пустая таблица значений.
//
// Пример:
//  ПараметрыПоискаДокументовЭСФ = НовыеПараметрыПоискаСсылок("Номер, Направление, Организация", Метаданные.Документы.ЭСФ);
//
Функция НовыеПараметрыПоискаСсылок(Знач ИменаРеквизитов, Знач ОбъектМетаданных) Экспорт
		
	ПустаяТаблицаРеквизитов = Новый ТаблицаЗначений;	
	МассивИменРеквизитов = ЭСФКлиентСервер.МассивИмен(ИменаРеквизитов);
	
	ЭтоДокумент = ?(Найти(ОбъектМетаданных.ПолноеИмя(), "Документ") <> 0, Истина, Ложь);
	ЭтоСправочник = ?(Найти(ОбъектМетаданных.ПолноеИмя(), "Справочник") <> 0, Истина, Ложь);
	
	Для Каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		
		Если ИмяРеквизита = "Номер" И ЭтоДокумент Тогда
			
			КвалификаторыСтроки = Новый КвалификаторыСтроки(ОбъектМетаданных.ДлинаНомера);
			ТипНомер = Новый ОписаниеТипов("Строка", , КвалификаторыСтроки);
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипНомер);
			
		ИначеЕсли ИмяРеквизита = "Дата" И ЭтоДокумент Тогда
			
			ТипДата = Новый ОписаниеТипов("Дата");
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипДата);
			
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
			
			ТипПометкаУдаления = Новый ОписаниеТипов("Булево");
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипПометкаУдаления);			
			
		ИначеЕсли ИмяРеквизита = "Владелец" И ЭтоСправочник Тогда
			
			МассивТиповВладельцев = Новый Массив;
			Для Каждого Владелец Из ОбъектМетаданных.Владельцы Цикл
				МассивТиповВладельцев.Добавить(Тип("СправочникСсылка." + Владелец.Имя));
			КонецЦикла;
			ТипРеквизита = Новый ОписаниеТипов(МассивТиповВладельцев);
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
			
		Иначе
			
			ТипРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита).Тип;
			ПустаяТаблицаРеквизитов.Колонки.Добавить(ИмяРеквизита, ТипРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ПустаяТаблицаРеквизитов;
	
КонецФункции  

///////////////////////////////////////////////////////////////////////////////
// Настройки параметров подключения к серверу ИС ЭСФ

Функция ПустыеПараметрыПодключенияКСерверуИСЭСФ() Экспорт
	
	ПустыеПараметрыПодключения = Новый Структура;
	
	// Параметры сервера ИС ЭСФ.
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	АдресСервераИСЭСФ = ОбработкаОбменЭСФ.АдресСервераAPIИСЭСФ();
	
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_ПолныйАдрес", АдресСервераИСЭСФ);
	ПараметрыПодключения = ПараметрыПодключенияКСерверуИСЭСФ(АдресСервераИСЭСФ);
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_HTTPS", ПараметрыПодключения.HTTPS);
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_Адрес", ПараметрыПодключения.Адрес);
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_Порт", ПараметрыПодключения.Порт);
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_Ресурс", ПараметрыПодключения.Ресурс);
	ПустыеПараметрыПодключения.Вставить("СерверИСЭСФ_Таймаут", 0);

	// Параметры прокси-сервера ИС ЭСФ.
	ПустыеПараметрыПодключения.Вставить("ПроксиСервер_ВариантИспользования", ЭСФКлиентСервер.ПроксиНеИспользовать());
	ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Сервер", "");
	ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Порт", "");
	ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Пользователь", "");
	ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Пароль", "");
	
	Возврат ПустыеПараметрыПодключения;
	
КонецФункции

Функция ПараметрыПодключенияКСерверуИСЭСФ(Знач АдресСервераИСЭСФ) Экспорт
	
	ПараметрыПодключения = Новый Структура;
	
	РазобранныйАдрес = ЭСФКлиентСервер.СтруктураURI(АдресСервераИСЭСФ);
	
	ПараметрыПодключения.Вставить("HTTPS", ?(ВРег(РазобранныйАдрес.Схема) = "HTTPS", Истина, Ложь));
	ПараметрыПодключения.Вставить("Адрес", РазобранныйАдрес.Хост);
	ПараметрыПодключения.Вставить("Порт", РазобранныйАдрес.Порт);
	ПараметрыПодключения.Вставить("Ресурс", РазобранныйАдрес.ПутьНаСервере);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ПолучитьПараметрыПодключенияКСерверуИСЭСФ() Экспорт
	
	ХранилищеЗначения = Константы.ПараметрыПодключенияКСерверуИСЭСФ.Получить();
	ПараметрыПодключения = ХранилищеЗначения.Получить();
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		ПараметрыПодключения = ПустыеПараметрыПодключенияКСерверуИСЭСФ();
		
	Иначе
		// обработаем ситуации, когда в релизах добавлялись новые параметры структуры
		ПустыеПараметрыПодключения = ПустыеПараметрыПодключенияКСерверуИСЭСФ();
		
		Для Каждого СтрокаСтруктуры Из ПустыеПараметрыПодключения Цикл
			
			Если ПараметрыПодключения.Свойство(СтрокаСтруктуры.Ключ) = Ложь Тогда
				ПараметрыПодключения.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция СохранитьПараметрыПодключенияКСерверуИСЭСФ(Знач СохраняемыеНастройки) Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияКСерверуИСЭСФ();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, СохраняемыеНастройки);
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыПодключения);
	Константы.ПараметрыПодключенияКСерверуИСЭСФ.Установить(ХранилищеЗначения);
	
КонецФункции

Процедура ОбновитьВерсиюИСЭСФ() Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОбновитьВерсиюИСЭСФ();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Настройки параметров подключения к серверу ИС ЭСФ

Функция ПустыеПараметрыЭСФ() Экспорт
	
	ПустыеПараметрыЭСФ = Новый Структура;
	
	ПустыеПараметрыЭСФ.Вставить("ВерсияИСЭСФ", "5.0.0");
	ПустыеПараметрыЭСФ.Вставить("ПерезаполнитьПризнакПроисхождения", Ложь);
	ПустыеПараметрыЭСФ.Вставить("СпособОпределенияВхожденияВПеречень", 0);
	ПустыеПараметрыЭСФ.Вставить("ЗаполнитьИсточникиПроисхожденияБезусловно", Ложь);
	ПустыеПараметрыЭСФ.Вставить("ПорогОкругленияСумм", 0.5);
	
	Возврат ПустыеПараметрыЭСФ;
	
КонецФункции

Функция ПолучитьПараметрыЭСФ() Экспорт
	
	ХранилищеЗначения = Константы.ПараметрыЭСФ.Получить();
	ПараметрыЭСФ = ХранилищеЗначения.Получить();
	
	Если ПараметрыЭСФ = Неопределено Тогда
		
		ПараметрыЭСФ = ПустыеПараметрыЭСФ();
		
	Иначе
		// обработаем ситуации, когда в релизах добавлялись новые параметры структуры
		ПустыеПараметрыЭСФ = ПустыеПараметрыЭСФ();
		
		Для Каждого СтрокаСтруктуры Из ПустыеПараметрыЭСФ Цикл
			
			Если ПараметрыЭСФ.Свойство(СтрокаСтруктуры.Ключ) = Ложь Тогда
				ПараметрыЭСФ.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыЭСФ;
	
КонецФункции

Функция СохранитьПараметрыЭСФ(Знач СохраняемыеНастройки) Экспорт
	
	ПараметрыЭСФ = ПолучитьПараметрыЭСФ();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭСФ, СохраняемыеНастройки);
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыЭСФ);
	Константы.ПараметрыЭСФ.Установить(ХранилищеЗначения);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции для работы с XML и XDTO

// Проверяет, есть ли у ОбъектXDTO хотя бы одно свойство, со значением отличным от Неопределено.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - ОбъектXDTO, который необходимо проверить.
//
// Возвращаемое значение:
//  Булево - Истина - ОбъектXDTO имеет хотя бы одно свойство со значением отличным от Неопределено, Ложь - в противном случае.
//
Функция ЕстьУстановленныеСвойства(Знач ОбъектXDTO) Экспорт
	
	ЕстьУстановленныеСвойства = Ложь;
	
	КоллекцияСвойствXDTO = ОбъектXDTO.Свойства();
	
	Для Каждого СвойствоXDTO Из КоллекцияСвойствXDTO Цикл
		Если ОбъектXDTO[СвойствоXDTO.Имя] <> Неопределено Тогда
			ЕстьУстановленныеСвойства = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ЕстьУстановленныеСвойства;	
	
КонецФункции

// Проверяет, есть ли в ОбъектXDTO свойство с именем  ИмяСвойства.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - ОбъектXDTO, в котором необходимо проверить наличие свойства.
//  ИмяСвойства - Строка - Имя свойства, наличие которого необходимо проверить.
//
// Возвращаемое значение:
//  Булево - Истина - свойство с указанным именем есть в ОбъектXDTO, Ложь - в противном случае.
//
Функция ЕстьСвойство(Знач ОбъектXDTO, Знач ИмяСвойства) Экспорт 
	
	КоллекцияСвойствXDTO = ОбъектXDTO.Свойства(); 	
	СвойствоXDTO = КоллекцияСвойствXDTO.Получить(ИмяСвойства);
	
	Если СвойствоXDTO = Неопределено Тогда
		ЕстьСвойство = Ложь;	
	Иначе
		ЕстьСвойство = Истина;	
	КонецЕсли;
	
	Возврат ЕстьСвойство;
	
КонецФункции

// Возвращает каноническую строку XML, созданную на основе XDTO объекта.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект на основе которого будет создана строка.
//  ИмяЭлемента - Строка - Имя корневого элемента создаваемой XML строки.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться при создании XML строки.
//
// Возвращаемое значение:
//  Строка - Строка, содержащая сериализованный XDTO объект.
//
// Пример:
//  InvoiceXML = КаноническаяСтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "Invoice", ФабрикаЭСФ);
//
Функция КаноническаяСтрокаXMLИзОбъектаXDTO(Знач ОбъектXDTO, Знач ИмяЭлемента, Знач Фабрика) Экспорт
	
	ДокументDOM = Новый ДокументDOM("", "ExclusiveXMLCanonicalization");
	
	ЗаписьУзловDOM = Новый ЗаписьУзловDOM;
	ЗаписьУзловDOM.Открыть(ДокументDOM);
	
	Фабрика.ЗаписатьXML(ЗаписьУзловDOM, ОбъектXDTO, ИмяЭлемента); 	
	
	ДокументDOM.ЭлементДокумента.ДобавитьДочерний(ЗаписьУзловDOM.УзелDOM);
	
	КаноническийDOM       = Новый КаноническийDOM;
	КаноническаяЗаписьXML = Новый КаноническаяЗаписьXML; 
	КаноническаяЗаписьXML.УстановитьСтроку(ТипКаноническогоXML.ИсключающийКаноническийXML, "");
	
	КаноническийDOM.Канонизировать(ДокументDOM, КаноническаяЗаписьXML, "");
	СтрокаXML = КаноническаяЗаписьXML.Закрыть();
	
	СтрокаXML = СтрЗаменить(СтрокаXML, "<ExclusiveXMLCanonicalization>", "");
	СтрокаXML = СтрЗаменить(СтрокаXML, "</ExclusiveXMLCanonicalization>", "");
	
	Возврат СтрокаXML;
	
КонецФункции
   
// Создает новый ОбъектXDTO, устанавливает его как свойство Владельца, возвращает созданный ОбъектXDTO.
//
// Параметры:
//  Владелец - ОбъектXDTO - Объект, для которого будет установлено свойство.
//  ИмяСвойства - Строка - Имя свойства, в которое необходимо записать созданный ОбъектXDTO.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания нового ОбъектXDTO.
//
// Возвращаемое значение:
//  ОбъектXDTO - Новый ОбъектXDTO, установленный как свойство Вледельца.
//
// Пример:
//  sellers = НовоеСвойствоОбъектаXDTO(invoice, "sellers", Фабрика);
//
Функция НовоеСвойствоОбъектаXDTO(Знач Владелец, Знач ИмяСвойства, Знач Фабрика) Экспорт
	
	ТипСвойство = Владелец.Тип().Свойства.Получить(ИмяСвойства).Тип;
	Свойство = Фабрика.Создать(ТипСвойство);
	
	Владелец.Установить(ИмяСвойства, Свойство); 
	
	Возврат Свойство;
	
КонецФункции

// Добавляет новый элемент в СписокXDTO и возвращает его.
//
// Параметры:
//  СписокXDTO - СписокXDTO - Список, в который необходимо добавить новый элемент.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться для создания нового элемента списка.
//  Значение - Произвольный - Значение которое будет установлено для добавленного элемента.
//                            Если не задано, то будет добавлен пустой элемент.
//
// Возвращаемое значение:
//  ЗначениеXDTO, ОбъектXDTO - Добавленный элемент.
//
// Пример:
//  seller = НовыйЭлементСпискаXDTO(sellers.seller, Фабрика);
//
Функция НовыйЭлементСпискаXDTO(Знач СписокXDTO, Знач Фабрика, Знач Значение = Неопределено) Экспорт
	
	ТипЭлемент = СписокXDTO.ВладеющееСвойство.Тип;
	Элемент = Фабрика.Создать(ТипЭлемент);
	
	Если Значение <> Неопределено Тогда
		Элемент = Значение;
	КонецЕсли;
	
	Возврат СписокXDTO.Добавить(Элемент);
	
КонецФункции

Функция ОбъектXDTOИзСтрокиXML(Знач СтрокаXML, Знач Фабрика) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);	
	ОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	
	Возврат ОбъектXDTO;
	
КонецФункции

Функция ОбъектXDTOИзСтрокиJSON(Знач СтрокаJSON, Знач Фабрика) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);	
	ОбъектXDTO = Фабрика.ПрочитатьJSON(ЧтениеJSON);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Возвращает свойство объекта XDTO, если свойства нет, то возвращает ПустоеЗначение.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - ОбъектXDTO, из которого необходимо получить свойство <ИмяСвойства>.
//  ИмяСвойства - Строка - Имя свойства, которое необходимо получить из ОбъектXDTO.
//  ПустоеЗначение - Произвольный - Значение, которое будет возвращено если в ОбъектXDTO нет свойства <ИмяСвойства>.
//
// Возвращаемое значение:
//  Произвольный - Значение, которое содержалост в ОбъектXDTO.ИмяСвойства или ПустоеЗначение.
//
Функция ПолучитьСвойство(Знач ОбъектXDTO, Знач ИмяСвойства, Знач ПустоеЗначение) Экспорт
	
	Если ЕстьСвойство(ОбъектXDTO, ИмяСвойства) Тогда
		Значение = ОбъектXDTO[ИмяСвойства];
	Иначе
		Значение = ПустоеЗначение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция СписокXDTOИзОбъектXDTO(Знач ОбъектXDTO) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		СписокXDTO = ОбъектXDTO;
	Иначе
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку("<parent><list></list><list></list></parent>");	
		СписокXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML).list;
		СписокXDTO.Очистить();
		СписокXDTO.Добавить(ОбъектXDTO);	
	КонецЕсли;
	
	Возврат СписокXDTO;
	
КонецФункции

// Возвращает строку XML, созданную на основе XDTO объекта.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект на основе которого будет создана строка.
//  ИмяЭлемента - Строка - Имя корневого элемента создаваемой XML строки.
//  Фабрика - ФабрикаXDTO - Фабрика, которая будет использоваться при создании XML строки.
//
// Возвращаемое значение:
//  Строка - Строка, содержащая сериализованный XDTO объект.
//
// Пример:
//  InvoiceXML = СтрокаXMLИзОбъектаXDTO(InvoiceXDTO, "Invoice", ФабрикаЭСФ);
//
Функция СтрокаXMLИзОбъектаXDTO(Знач ОбъектXDTO, Знач ИмяЭлемента, Знач Фабрика) Экспорт
	
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь, Ложь); 
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыЗаписиXML); 
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяЭлемента); 	
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ПустойСписокXDTO() Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку("<parent><list></list><list></list></parent>");	
	НовыйСписокXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML).list;
	НовыйСписокXDTO.Очистить();
	
	Возврат НовыйСписокXDTO;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с регистром сведений АктуальныеЭСФ

// Возвращает актуальный ЭСФ для счета-фактуры.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактура<Направление> -
//   Счет-фактура, для которого необходимо найти актуальный ЭСФ.
//
// Возвращаемое значение:
//  Структура, Неопределено - Данные найденного актуального ЭСФ.
//   |- СчетФактура - ДокументСсылка.СчетФактура<Направление> - Счет-фактура, для которого искался ЭСФ.
//   |- ЭСФ - ДокументСсылка.ЭСФ - ЭСФ, который является актуальным для счета-фактуры.
//   |- Состояние - ПеречислениеСсылка.СостоянияЭСФ - Состояние актуального ЭСФ.
//  Если для счета-фактуры не задан актуальный ЭСФ, то возвращается Неопределено.
//
Функция ДанныеАктуальногоЭСФ(Знач СчетФактура) Экспорт
	
	ДанныеАктуальногоЭСФ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.СчетФактура,
	|	АктуальныеЭСФ.ЭСФ,
	|	АктуальныеЭСФ.Состояние
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура = &СчетФактура";
	
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеАктуальногоЭСФ = Новый Структура;
			ДанныеАктуальногоЭСФ.Вставить("СчетФактура", Выборка.СчетФактура);
			ДанныеАктуальногоЭСФ.Вставить("ЭСФ",         Выборка.ЭСФ);
			ДанныеАктуальногоЭСФ.Вставить("Состояние",   Выборка.Состояние);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеАктуальногоЭСФ;
	
КонецФункции

// Возвращает таблицу ЭСФ, которые могут быть назначены как актуальные для счета-фактуры. 
// Первыми идут ЭСФ, которые лучше подходят для установки в качестве ЭСФ по умолчанию.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактура<Направление> -
//   Счет-фактура, для которого необходимо найти ЭСФ,
//   которые могут стать актуальными для данного счета-фактуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица ЭСФ, которые могут стать актуальными для счета-фактуры.
//   |- ЭСФ - ДокументСсылка.ЭСФ - ЭСФ, который является актуальным для счета-фактуры.
//   |- Состояние - ПеречислениеСсылка.СостоянияЭСФ - Состояние актуального ЭСФ.
//   |- Приоритет - Число - Чем выше, тем ЭСФ лучше подходит для установки в качестве ЭСФ по умолчанию.
//  Таблица отсортирована по убыванию колонки Приоритет.
//
Функция НайтиДокументыЭСФДляЗаполненияАктуальныхЭСФ(Знач СчетФактура) Экспорт
	
	ТаблицаЭСФ = Новый ТаблицаЗначений;
	ТаблицаЭСФ.Колонки.Добавить("ЭСФ", Новый ОписаниеТипов("ДокументСсылка.ЭСФ"));
	ТаблицаЭСФ.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияЭСФ"));
	ТаблицаЭСФ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Состояние,
	|	ЭСФ.ПометкаУдаления
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.СчетФактура = &СчетФактура";
	
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ПометкаУдаления Тогда
				СтрокаТаблицы = ТаблицаЭСФ.Добавить();
				СтрокаТаблицы.ЭСФ = Выборка.ЭСФ;
				СтрокаТаблицы.Состояние = Выборка.Состояние;
				СтрокаТаблицы.Приоритет = ЭСФКлиентСервер.ПриоритетСостоянияЭСФ(Выборка.Состояние);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаЭСФ.Сортировать("Приоритет Убыв");
	
	Возврат ТаблицаЭСФ;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Работа с соответствиями наименований и ссылок

// Сохраняет соответствия "Товар наименование - Товар ссылка".
// Соответствия сохраняются в разрезе контрагентов.
// Если ЭСФ содержит несколько контрагентов, то соответствия сохраняются для каждого из них.  
// Для сохранения соответствия ссылка на контрагента должна быть заполнена, иначе оно не сохранится.
// Соответствие сохраняется только если заполнена ссылка на товар.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив объектов ДокументСсылка.ЭСФ,    
//   для которых необходимо сохранить соответствия "Товар наименование - Товар ссылка".
//
Процедура СохранитьСоответствияНаименованийИСсылокТоваров(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СохранитьСоответствияНаименованийИСсылокТоваров(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// См. Обработки.ОбменЭСФ.СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения()
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// См. Обработки.ОбменЭСФ.СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров()
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(Знач КлючиАналитикиУчетаСоответствий, Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// См. Обработки.ОбменЭСФ.ИнициализироватьКлючиАналитикиУчетаНоменклатуры()
Функция ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Знач МассивЭСФ, Знач СоздатьНовыеПриОтсутствии = Ложь) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивЭСФ, СоздатьНовыеПриОтсутствии);
	
КонецФункции
///////////////////////////////////////////////////////////////////////////////
// Работа с источниками происхождения

//Процедура заполняет пустые признаки происхождения по умолчанию в документах
//
// Параметры:
//  ДокументОбъект - ДокументОбъект документ для заполнения признаков происхождения.
//  ИмяТЧ - Строка - Имя Табличной части для заполнения признаков происхождения.
//  ЗаполнятьВсе - Булево - Флаг заполнения признака происхождения во всех строка табличной части,
//    если значение "Истина" - признак будет заполнен во всех строках табличной части,
//    если "Ложь" только в тех строках где признак не указан.
//
Процедура ЗаполнитьПустыеПризнакиПроисхождения(ДокументОбъект, ИмяТЧ, ЗаполнятьВсе = Ложь) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьПустыеПризнакиПроисхождения(ДокументОбъект, ИмяТЧ, ЗаполнятьВсе);
	
КонецПроцедуры

//Функция возвращает вспомогательную таблицу для дальнейшего заполнения признака происхождения
//
// Параметры:
//  МассивСтрокТоваров - массив строк табличной части Товары документа ЭСФ.
//
Функция ПолучитьТаблицуТоваровСПониженнойСтавкой(МассивСтрокТоваров,Дата) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьТаблицуТоваровСПониженнойСтавкой(МассивСтрокТоваров,Дата);
	
КонецФункции

//Функция возвращает признак происхождения по умолчанию
//
// Параметры:
//  ПониженнаяСтавка - Булево.
//  СпособПроисхождения - Перечисление.СпособыПроисхожденияТоваров.
//
Функция ПолучитьПризнакПроисхождения(Знач ПониженнаяСтавка, Знач СпособПроисхождения) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьПризнакПроисхождения(ПониженнаяСтавка, СпособПроисхождения);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Заполняет ссылочные реквизиты документов ЭСФ по их текстовым или числовым представлениям.
// Заполняет ссылку на товар, ссылку на ставку НДС, ссылку на поставщика и т.д.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив ЭСФ, у которых необходимо заполнить ссылочные реквизиты.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
//
Процедура ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(Знач НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	СоответствиеВалюты = ЭСФСерверПовтИсп.НовоеСоответствиеВалюты();	
	СоответствиеАкцизы = ЭСФСерверПовтИсп.НовоеСоответствиеАкцизы();
	ТаблицаНДС         = ЭСФСерверПовтИсп.НоваяТаблицаНДС();
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(СоответствиеВалюты, СоответствиеАкцизы, ТаблицаНДС, НаправлениеЭСФ, МассивЭСФ);
	
КонецПроцедуры

// Возвращает настройку пользоватля: "Открывать форму синхронизации с ИС ЭСФ при запуске".
//
// Возвращаемое значение:
//  Булево - Истина - Открывать, Ложь - Не открывать.
// 
Функция СинхронизацияСИСЭСФПриЗапуске() Экспорт
	Возврат ЭСФСерверПереопределяемый.СинхронизацияСИСЭСФПриЗапуске();	
КонецФункции

// Очищает документ или элемент справочника.
// Устанавливает значения реквизитов в значения по умолчанию, очищает табличные части.
//
// Параметры:
//  Объект - ДокументОбъект.<Имя>, СправочникОбъект.<Имя> - Объект, который необходимо очистить.
//  ИсключаемыеРеквизиты - Строка - Имена реквизитов, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все реквизиты.
//  ИсключаемыеТабличныеЧасти - Строка - Имена табличных частей, через запятую, которые не будут очищены.
//   Если параметр не задан, то будут очищены все табличные части.
//                               
Процедура ОчиститьОбъект(Объект, ИсключаемыеРеквизиты = Неопределено, ИсключаемыеТабличныеЧасти = Неопределено) Экспорт
	
	// Создать МассивИсключаемыхРеквизитов.
	Если ИсключаемыеРеквизиты = Неопределено Тогда
		МассивИсключаемыхРеквизитов = Новый Массив;
	Иначе
		МассивИсключаемыхРеквизитов = ЭСФКлиентСервер.МассивИмен(ИсключаемыеРеквизиты);	
	КонецЕсли;
	
	// Создать МассивИсключаемыхТабличныхЧастей.
	Если ИсключаемыеТабличныеЧасти = Неопределено Тогда
		МассивИсключаемыхТабличныхЧастей = Новый Массив;
	Иначе
		МассивИсключаемыхТабличныхЧастей = ЭСФКлиентСервер.МассивИмен(ИсключаемыеТабличныеЧасти);	
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();	
	ИмяГруппыОбъекта = Лев(ПолноеИмяОбъекта, Найти(ПолноеИмяОбъекта, ".") - 1);
	
	Если ИмяГруппыОбъекта = "Справочник" Тогда
		ПустойОбъект =  Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка();
	ИначеЕсли ИмяГруппыОбъекта = "Документ" Тогда
		ПустойОбъект =  Документы[МетаданныеОбъекта.Имя].ПустаяСсылка();
	КонецЕсли;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если МассивИсключаемыхРеквизитов.Найти(Реквизит.Имя) = Неопределено Тогда
			Объект[Реквизит.Имя] = ПустойОбъект[Реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если МассивИсключаемыхТабличныхЧастей.Найти(ТабличнаяЧасть.Имя) = Неопределено Тогда
			Объект[ТабличнаяЧасть.Имя].Очистить();	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(Знач ТабЗначОшибки, Знач ТекстИСЭСФ, Знач ПолеИСЭСФ = "", Знач СоответствиеПолей = Неопределено, Знач СоответствиеРазделов = Неопределено) Экспорт
	
	ПредставлениеОшибки = Новый Структура;
	ПредставлениеОшибки.Вставить("ТекстИСЭСФ", ТекстИСЭСФ);
	ПредставлениеОшибки.Вставить("ПолеИСЭСФ", ПолеИСЭСФ);
	ПредставлениеОшибки.Вставить("ТекстИБ", "");
	ПредставлениеОшибки.Вставить("ПолеИБ", "");
	ПредставлениеОшибки.Вставить("ИмяСтраницы", "");
	ПредставлениеОшибки.Вставить("ПодробнаяИнформация", "");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТекстИСЭСФ", ТекстИСЭСФ);
	ПараметрыОтбора.Вставить("ПолеИСЭСФ", ПолеИСЭСФ);	
	МассивНайденныхСтрок = ТабЗначОшибки.НайтиСтроки(ПараметрыОтбора); 
	
	Если МассивНайденныхСтрок.Количество() <> 0 Тогда
		
		ПредставлениеОшибки.ТекстИБ     = МассивНайденныхСтрок[0].ТекстИБ;
		ПредставлениеОшибки.ПолеИБ      = МассивНайденныхСтрок[0].ПолеИБ;
		ПредставлениеОшибки.ИмяСтраницы = МассивНайденныхСтрок[0].ИмяСтраницы;
		
	Иначе
		
		НачалоИндекса = Найти(ПолеИСЭСФ, "[");
		КонецИндекса = Найти(ПолеИСЭСФ, "].");
		Если НачалоИндекса <> 0 И КонецИндекса <> 0 Тогда
			ИндексСтрока = Сред(ПолеИСЭСФ, НачалоИндекса + 1, КонецИндекса - НачалоИндекса - 1);
			Попытка
				НомерСтроки = Число(ИндексСтрока) + 1;
				ПредставлениеОшибки.ТекстИБ = ТекстИСЭСФ + ?(Прав(ТекстИСЭСФ, 1) = ".", " ", ". ") + "Номер строки: " + НомерСтроки + ".";
			Исключение
				ПредставлениеОшибки.ТекстИБ = ТекстИСЭСФ;	
			КонецПопытки;
		Иначе
			ПредставлениеОшибки.ТекстИБ = ТекстИСЭСФ;
		КонецЕсли;
		
		Если СоответствиеПолей <> Неопределено И СоответствиеРазделов <> Неопределено Тогда
			//Разбираем строку ПолеИСЭСФ на поля РазделИС, ПолеИС
			Если НачалоИндекса <> 0 И КонецИндекса <> 0 Тогда
				РазделИС=Лев(ПолеИСЭСФ, НачалоИндекса-1);
				ПолеИС=Прав(ПолеИСЭСФ, СтрДлина(ПолеИСЭСФ)-(КонецИндекса+1));
			Иначе
				ИндексРазделителя = Найти(ПолеИСЭСФ, ".");
				Если ИндексРазделителя <> 0 Тогда
					РазделИС=Лев(ПолеИСЭСФ, ИндексРазделителя-1);
					ПолеИС=Прав(ПолеИСЭСФ, СтрДлина(ПолеИСЭСФ)-ИндексРазделителя);
				Иначе
					ПолеИС = ПолеИСЭСФ;
				КонецЕсли;                               
				
			КонецЕсли;
			
			//Попробуем найти сответствие полям ИБ
			РазделИБ 	= СоответствиеРазделов[РазделИС];
			ПолеИБ 		= СоответствиеПолей[ПолеИС];
			СтрокаПодробнойИнформации = "";
			
			//Заполним строку информации о нахождении ошибки в виде Раздел Строка Поле
			//Раздел (составной элемент)
			Если РазделИБ <> Неопределено Тогда
				СтрокаПодробнойИнформации = СтрокаПодробнойИнформации + РазделИБ.Синоним ;
				ПредставлениеОшибки.ИмяСтраницы = РазделИБ.ИмяСтраницы;
				ПредставлениеОшибки.ПолеИБ = ПредставлениеОшибки.ПолеИБ + РазделИБ.ТабличнаяЧасть;
								
			КонецЕсли;
			//Номер строки
			Если НЕ ПустаяСтрока(НомерСтроки)  Тогда  //И РазделИБ <> Неопределено
				СтрокаПодробнойИнформации = СтрокаПодробнойИнформации + " строка " + НомерСтроки + ": ";
				
				//Подставим номер строки
				Если Найти(ПредставлениеОшибки.ПолеИБ, "[]") > 0 Тогда
					ПредставлениеОшибки.ПолеИБ = СтрЗаменить(ПредставлениеОшибки.ПолеИБ, "[]", "[" + ИндексСтрока + "]");
				КонецЕсли;

			КонецЕсли;
			//Поле
			Если ПолеИБ <> Неопределено Тогда
				СтрокаПодробнойИнформации = СтрокаПодробнойИнформации + ПолеИБ.Синоним;
				Если Не ПустаяСтрока(ПредставлениеОшибки.ПолеИБ) Тогда
					ПредставлениеОшибки.ПолеИБ = ПредставлениеОшибки.ПолеИБ + ".";
				КонецЕсли;
				ПредставлениеОшибки.ПолеИБ = "Объект." + ПредставлениеОшибки.ПолеИБ + ПолеИБ.Поле;
			Иначе
				ПредставлениеОшибки.ПолеИБ = "";
			КонецЕсли;
			
					
			ПозицияДвоеточия = Найти(СтрокаПодробнойИнформации, ":");
			Если СтрДлина(СтрокаПодробнойИнформации) - ПозицияДвоеточия = 1 Тогда
				СтрокаПодробнойИнформации = СтрЗаменить(СтрокаПодробнойИнформации, ":", "");
			КонецЕсли;
			
			ПредставлениеОшибки.ПодробнаяИнформация =  СтрокаПодробнойИнформации;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;
	
КонецФункции

Функция НоваяСтрокаТаблицыОшибокИСЭСФ(
	ТабЗначОшибки, 
	Знач ТекстИСЭСФ = "", 
	Знач ТекстИБ = "", 
	Знач ПолеИСЭСФ = "", 
	Знач ПолеИБ = "",
	Знач ИмяСтраницы = "") Экспорт 
	
	СтрокаТаблицы = ТабЗначОшибки.Добавить();
	
	СтрокаТаблицы.ТекстИСЭСФ  = СокрЛП(ТекстИСЭСФ);
	СтрокаТаблицы.ТекстИБ     = СокрЛП(ТекстИБ);
	СтрокаТаблицы.ПолеИСЭСФ   = СокрЛП(ПолеИСЭСФ);
	СтрокаТаблицы.ПолеИБ      = СокрЛП(ПолеИБ);
	СтрокаТаблицы.ИмяСтраницы = СокрЛП(ИмяСтраницы);
	
	Возврат СтрокаТаблицы;
	
КонецФункции

// Проверяет доступ к серверу ИС ЭСФ.
//
// Возвращаемое значение:
//  Структура
//   |- ТекстВерсияОшибка - Строка - текст ошибки версии ИС ЭСФ
//   |- ТекстВерсияПоддерживает - Строка - текст поддержки версии ИС ЭСФ
//   |- ВерсияИСЭСФ - Строка - номер версии ИС ЭСФ
//   |- ВерсияИСЭСФПоддерживается - Булево - поддержка версии ИС ЭСФ
//   |- ОшибкаСоединения - Строка - строка ошибки соединения с ИС ЭСФ
//   |- ОшибкаВерсии - Строка - строка ошибки версии ИС ЭСФ
//
Функция ПроверитьДоступИВерсиюНаСервере() Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	Возврат ОбработкаОбменЭСФ.ПроверитьДоступИВерсиюНаСервере();
	
КонецФункции

// Разбивает структурную единицу на организацию и структурное подразделение.
//
// Параметры:
//  СтруктурнаяЕдиница - СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций -
//   Структурная единица, из которой необходимо получить организацию и структурное подразделение.
//
// Возвращаемое значение:
//  Структура - Разобранная структурная единица.
//   |- Организация - СправочникСсылка.Организации - Ссылка на организацию.
//   |- СтруктурноеПодразделение - СправочникСсылка.ПодразделенияОрганизаций, Строка - Структурное подразделение.
//
// Примечания:
//  Возвращаемая структура всегда содержит два элемента: Организация и СтруктурноеПодразделение. 
//  Если в конфигурации нет справоничка ПодразделенияОрганизаций, то СтруктурноеПодразделение содержит пустую строку.
//  Если в конфигурации есть справоничк ПодразделенияОрганизаций, то СтруктурноеПодразделение содержит ссылку или пустую ссылку.
//
Функция ОрганизацияИСтруктурноеПодразделение(Знач СтруктурнаяЕдиница) Экспорт
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ПодразделенияОрганизацийПустаяСсылка = Справочники["ПодразделенияОрганизаций"].ПустаяСсылка();
	Иначе
		ПодразделенияОрганизацийПустаяСсылка = "";	
	КонецЕсли;
	
	Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
		Организация = СтруктурнаяЕдиница;
		СтруктурноеПодразделение = ПодразделенияОрганизацийПустаяСсылка;
	Иначе // ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.ПодразделенияОрганизаций")
		Организация = СтруктурнаяЕдиница.Владелец;
		СтруктурноеПодразделение = СтруктурнаяЕдиница;
	КонецЕсли;
	
	Результат = Новый Структура("Организация, СтруктурноеПодразделение", Организация, СтруктурноеПодразделение);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктурнаяЕдиницаЭСФ(ЭСФ) Экспорт
	
	СтруктурнаяЕдиница = Неопределено;
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		
		Если ЗначениеЗаполнено(ЭСФ.СтруктурноеПодразделение) Тогда
			
			СтруктурнаяЕдиница = ЭСФ.СтруктурноеПодразделение;	
			
		ИначеЕсли ЗначениеЗаполнено(ЭСФ.Организация) Тогда
			
			СтруктурнаяЕдиница = ЭСФ.Организация;	
			
		Иначе
			
			СтруктурнаяЕдиница = Неопределено;	
			
		КонецЕсли;		
		
	Иначе
		
		СтруктурнаяЕдиница = ЭСФ.Организация;	
		
	КонецЕсли;
	
	Возврат СтруктурнаяЕдиница;
	
КонецФункции

// Возвращает ClientId, который используется в методах веб-сервисов ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка - ClientId ERP системы.
//
Функция ИдентификаторКлиентаИСЭСФ() Экспорт 
	
	Возврат "0";
	
КонецФункции

// Формирует и возвращает печатную форму ЭСФ для счета-фактуры.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - 
//   Счет-фактура, для которого необходимо сформировать печатную форму связанного ЭСФ.
//
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено - Печатная форма ЭСФ, связанного со счетом-фактурой.
//   ТабличныйДокумент - Если есть ЭСФ связанный со счетом-фактурой и счет-фактура выписан электронно.
//   Неопределено - В противном случае.
//
Функция НоваяПечатнаяФормаЭСФ(Знач СчетФактура) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.НоваяПечатнаяФормаЭСФ(СчетФактура);
	
КонецФункции

// Возвращает ЭСФ, который является актуальным для счета-фактуры.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный - 
//   Счет-фактура, для которого необходимо найти ЭСФ.
//
// Возвращаемое значение:
//  ДокументСсылка.ЭСФ, Неопределено - Ссылка на актуальный ЭСФ.
//   Если актуальный ЭСФ не найден, то Неопределено.
//
Функция АктуальныйЭСФ(Знач СчетФактура) Экспорт
	
	ЭСФ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.ЭСФ КАК ЭСФ
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура = &СчетФактура";
	
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			ЭСФ = Выборка.ЭСФ; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭСФ;
	
КонецФункции

Функция ДатаИБ(Знач ДатаИСЭСФ) Экспорт
	
	Попытка
		Дата = СериализаторXDTO.XMLЗначение(Тип("Дата"), ДатаИСЭСФ);
	Исключение
		Попытка
			День = Лев(ДатаИСЭСФ, 2);
			Месяц = Сред(ДатаИСЭСФ, 4, 2);
			Год = Прав(ДатаИСЭСФ, 4);		
			Дата = Дата(Год, Месяц, День);	
		Исключение
			Дата = Дата(1,1,1);
		КонецПопытки;	
	КонецПопытки;
	
	Возврат Дата;
	
КонецФункции

Функция СостояниеЭСФ(ЭСФ, ЕстьТоварыВССПустымиИдентификаторами = Ложь) Экспорт
	
	//++ НЕ ЭСФ
	Если ЗначениеЗаполнено(ЭСФ.ДокументПодтверждающийПоставкуНомер) Тогда
		Если Найти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "KZ-SNT") ИЛИ Найти(ЭСФ.ДокументПодтверждающийПоставкуНомер, "NON SNT") Тогда
			ЕстьТоварыВССПустымиИдентификаторами = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьТоварыВССПустымиИдентификаторами 
		И (ЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий 
		ИЛИ (ЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий 
			И ЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный)) 
		И ЭСФ.ОтражаетсяВВС 
		И (ЭСФ.Статус = Перечисления.СтатусыЭСФ.Доставленный
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Импортированный
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный 
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Созданный) Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ОжидаетИдентификацииТоваровНаВС;
		Возврат Состояние;
	КонецЕсли;
		
	//-- НЕ ЭСФ	
	
	Если ЭСФ.Статус = Перечисления.СтатусыЭСФ.ПустаяСсылка()
		И ЗначениеЗаполнено(ЭСФ.Идентификатор)
		И ЭСФ.Ошибки.Количество() = 0 Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.ПустаяСсылка()
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Черновик
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Импортированный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.Сформирован;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.Ошибочный
		ИЛИ ЭСФ.Ошибки.Количество() <> 0 Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером;
		
	ИначеЕсли ЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И ЭСФ.Статус = Перечисления.СтатусыЭСФ.Созданный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ПринятСервером;
		
	ИначеЕсли ЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И ЭСФ.Статус = Перечисления.СтатусыЭСФ.Доставленный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю;
		
	ИначеЕсли ЭСФ.Направление = Перечисления.НаправленияЭСФ.Входящий
		И (ЭСФ.Статус = Перечисления.СтатусыЭСФ.Созданный 
		ИЛИ ЭСФ.Статус = Перечисления.СтатусыЭСФ.Доставленный) Тогда
		
			Состояние = Перечисления.СостоянияЭСФ.ПринятОтПоставщика;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.Отозванный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.Отозван;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.Аннулированный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.Аннулирован;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.Отклоненный Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.ОтклоненПолучателем;		
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.АннулированИСЭСФДляОтнесенияВЗачетИНаВычеты;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированПриОтзывеСНТ Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.АннулированПриОтзывеСНТ;
		
	ИначеЕсли ЭСФ.Статус = Перечисления.СтатусыЭСФ.АннулированПриОтклоненииСНТ Тогда
		
		Состояние = Перечисления.СостоянияЭСФ.АннулированПриОтклоненииСНТ;
		
	Иначе
		
		Состояние = Перечисления.СостоянияЭСФ.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Состояние;
КонецФункции

// См. ЭСФСерверПереопределяемый.ЭтоИндивидуальныйПредприниматель()
Функция ЭтоИндивидуальныйПредприниматель(Знач СтруктурнаяЕдиница) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ЭтоИндивидуальныйПредприниматель(СтруктурнаяЕдиница);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////
// Процедуры получения обновления

Функция РаспаковатьФайл(ФайлАрхива, ОписаниеОшибки = Неопределено) Экспорт
	
	// создаем временный каталог
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	
	// определяем временный файл
	ФайлРезультат = ПолучитьИмяВременногоФайла("xml");
	
	// распаковываем во временный каталог
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ФайлАрхива);
		ПервыйЭлементАрхива = ЧтениеЗИП.Элементы.Получить(0);
		ЧтениеЗИП.Извлечь(ПервыйЭлементАрхива, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеЗИП.Закрыть();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	// ищем файл в каталоге распаковки
	РезультатПоиска = НайтиФайлы(ВременныйКаталог, "*.*");
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переименовываем файл из архива
	ПервыйФайл = РезультатПоиска.Получить(0);
	ПереместитьФайл(ПервыйФайл.ПолноеИмя, ФайлРезультат);
	
	// удаляем каталог распаковки
	УдалитьФайлы(ВременныйКаталог);
	
	Возврат ФайлРезультат;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
//Процедуры, связанные с ВС

Функция ВедетсяУчетПоТоварамНаВС(ДатаДокумента) Экспорт
	
	//++ НЕ ЭСФ
	Если Метаданные.Константы.Найти("ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах  = Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах .Получить();
	
		Возврат (ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах  <> Дата(1,1,1) И ДатаДокумента >= ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах);
	КонецЕсли;
	//-- НЕ ЭСФ
	Возврат Ложь;
	
КонецФункции

Функция ИспользоватьНДССчет() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура СкорректироватьРасписаниеСихронизацииИСЭСФ() Экспорт
	
	ТекущееРасписаниеРегламентногоЗадания = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.СинхронизацияСИСЭСФ);
	
	Если ТекущееРасписаниеРегламентногоЗадания <> Неопределено Тогда
		
		Если ТекущееРасписаниеРегламентногоЗадания.Расписание.ПериодПовтораВТечениеДня < 600 Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Расписание = Новый РасписаниеРегламентногоЗадания;
					
			ЗаполнитьЗначенияСвойств(Расписание, ТекущееРасписаниеРегламентногоЗадания.Расписание); 
			//Расписание.ВремяНачала = ТекущееРасписаниеРегламентногоЗадания.Расписание.ВремяНачала + 600;
			//Расписание.ДетальныеРасписанияДня = Новый Массив;
			Расписание.ПериодПовтораВТечениеДня = 600; // изменяем только этот параметр
			
			ТекущееРасписаниеРегламентногоЗадания.Расписание = Расписание;
			ТекущееРасписаниеРегламентногоЗадания.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ТекстСообщения = (НСтр(
			"ru = 'Интервал повтора, установленный в расписании регламентного задания Синхронизации с ИС ЭСФ, менее 600 секунд! Значение интервала повтора изменено на 600 секунд.'"));
			
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение,,,);
			
		КонецЕсли;	
		
	КонецЕсли; 
			
КонецПроцедуры


// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗавершениеОбновления = Ложь;
	ЭСФСерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления);
	Если ЗавершениеОбновления Тогда
		Возврат;
	КонецЕсли;
	
	// Простой вариант
	//ЭСФСерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	//// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия              = ""; // Только для начального заполнения.
	//Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	//Обработчик.ОбщиеДанные         = Истина;
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка общих данных.'");
	//Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обработчик, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.2";
	Обработчик.Процедура           = "ЭСФСервер.СкорректироватьРасписаниеСихронизацииИСЭСФ";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно"; 

	
КонецПроцедуры

Процедура ЗаполнитьНовыйРегистрСоответствияТоваровИЕдиницИзмерения(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	МассивИсходящихЭСФ 	= Новый Массив;
	МассивВходящихЭСФ 	= Новый Массив;
	Если Параметры.Свойство("МассивОбработанныхЭСФ") Тогда
		МассивОбработанныхЭСФ = Параметры.МассивОбработанныхЭСФ;
	Иначе
		МассивОбработанныхЭСФ = Новый Массив;
		Параметры.Вставить("МассивОбработанныхЭСФ", МассивОбработанныхЭСФ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	 Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЭСФ.Ссылка,
	|	ЭСФ.Направление КАК Направление
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	НЕ ЭСФ.Ссылка В (&МассивОбработанныхЭСФ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭСФ.Дата
	|ИТОГИ ПО
	|	Направление";
	
	Запрос.УстановитьПараметр("МассивОбработанныхЭСФ", МассивОбработанныхЭСФ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ВыборкаНаправление = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ОбъектовОбработано = 0;
	Пока ВыборкаНаправление.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаНаправление.Выбрать();
		Если ВыборкаНаправление.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МассивВходящихЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				МассивОбработанныхЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		Иначе
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				МассивИсходящихЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				МассивОбработанныхЭСФ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		ОбъектовОбработано = ОбъектовОбработано + ВыборкаДетальныеЗаписи.Количество();
		
	КонецЦикла;
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Попытка
		КлючиАналитикиУчетаСоответствий = ЭСФСервер.ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивВходящихЭСФ, Истина);
		ЭСФСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, Перечисления.НаправленияЭСФ.Входящий, МассивВходящихЭСФ);
		
		КлючиАналитикиУчетаСоответствий = ЭСФСервер.ИнициализироватьКлючиАналитикиУчетаНоменклатуры(МассивИсходящихЭСФ, Истина);
		ЭСФСервер.СохранитьСоответствияНаименованийИСсылокЕдиницИзмеренийИТоваров(КлючиАналитикиУчетаСоответствий, Перечисления.НаправленияЭСФ.Исходящий, МассивИсходящихЭСФ);
	Исключение
		ТекстСообщения = НСтр("ru='Операция создания соответствий товаров и единиц измерений не выполнена'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЭлементСоответсвия.Ключ, ЭлементСоответсвия.Значение); 	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	