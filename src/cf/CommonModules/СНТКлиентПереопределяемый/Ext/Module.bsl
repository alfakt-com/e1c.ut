// Возвращает признак возможности отправки СНТ от структурных подразделений.
// Для отправки ЭСФ структурное подразделение должно иметь собственный БИН.
//
// Возвращаемое значение:
//  Булево - Истина, если можно отправлять ЭСФ от структурных подразделений. Ложь, в пртивном случае.
//
Функция ИспользуютсяСтруктурныеПодразделения() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработкаОповещенияСНТ_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = Параметр;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		АдресСообщенияПользователю = ЭСФВызовСервера.СообщенияФоновогоЗадания(РезультатРаботыЗадания.ИдентификаторЗадания);
		СообщенияПользователю = ПолучитьИзВременногоХранилища(АдресСообщенияПользователю);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ЭСФКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), Параметр, ЭтаФорма);
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			ЭСФКлиент.ОповеститьФормы(ДополнительноеОповещение.Ключ, Параметр, ЭтаФорма);
		КонецЦикла;			
	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресХранилища);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыДлительнойОперации.ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершениияДлительнойОперацииСНТ", СНТКлиентПереопределяемый, ЭтаФорма);
		
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершениияДлительнойОперацииСНТ(Результат, Источник) Экспорт

	Оповестить(СНТКлиентСервер.ИмяСобытияЗаписьСНТ(), Результат, Источник);
	
	Если Источник.ИмяФормы = "Обработка.ОбменСНТ.Форма.СинхронизацияСВС" Тогда
		Оповестить(СНТКлиентСервер.ИмяСобытияСинхронизацияСНТ(), Результат, Источник);
	КонецЕсли;
	
	Если Источник.ИмяФормы = "Справочник.ВиртуальныеСкладыКонтрагента.Форма.ФормаСписка"
		ИЛИ Источник.ИмяФормы = "Справочник.ВиртуальныеСкладыКонтрагента.Форма.ФормаЭлемента" Тогда
		Оповестить(СНТКлиентСервер.ИмяСобытияЗаписьВСКонтрагента(), Результат, Источник);
	КонецЕсли;
	
	Если Источник.ИмяФормы = "Документ.СопоставлениеСНТиФНО.Форма.ФормаСписка" 
		ИЛИ Источник.ИмяФормы = "Документ.СопоставлениеСНТиФНО.Форма.ФормаДокумента" Тогда
		Оповестить(СНТКлиентСервер.ИмяСобытияЗаписьСопоставленияСНТиФНО(), Результат, Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораСНТ(Знач ФормаЭСФ, Знач ТипСНТ) Экспорт
	
	// Сформировать отбор формы выбора.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ФормаЭСФ.Объект.Организация);
	Отбор.Вставить("РегистрационныйНомерИСЭСФ", ФормаЭСФ.Объект.ДокументПодтверждающийПоставкуНомер);
	Отбор.Вставить("Направление", ТипСНТ);
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	//Устанавливаем отбор по контрагенту
	Если ТипСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		Если ЗначениеЗаполнено(ФормаЭСФ.Объект.Поставщики) И ЗначениеЗаполнено(ФормаЭСФ.Объект.Поставщики[0].Поставщик) Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Поставщик", ФормаЭСФ.Объект.Поставщики[0].Поставщик);
		КонецЕсли;	
	Иначе
		Если ЗначениеЗаполнено(ФормаЭСФ.Объект.Получатели) И ЗначениеЗаполнено(ФормаЭСФ.Объект.Получатели[0].Получатель) Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Получатель", ФормаЭСФ.Объект.Получатели[0].Получатель);
		КонецЕсли;
	КонецЕсли;
		
	ИмяФормыВыбора = "Документ.СНТ.Форма.ФормаВыбораОтражениеВУчете";
		
	// Открыть форму выбора с отбором.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = ПолучитьФорму(ИмяФормыВыбора, , ФормаЭСФ);
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		//доп. настройки
		Для Каждого ЭлементОтбора Из ПользовательскиеНастройки.ДополнительныеСвойства Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		Форма.Открыть();
	#Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ФормаЭСФ);
	#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьИмяФормыВыбораКодСтраны() Экспорт
	
	Возврат "Справочник.СтраныМира.Форма.Классификатор";
	
КонецФункции

Функция ПараметрыФормыКлассификатораСтран() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

#Область ЗаполнениеПоискСозаниеДоговора

// Открывает форму нового, не записанного, элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо заполнить новый элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуНовогоДоговора(Знач ФормаСНТ, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", , ФормаСНТ); 
	
	ЗаполнитьФормуДоговора(ФормаСНТ, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);

	ФормаДоговора.Открыть();
	
КонецПроцедуры

// Открывает форму существующего элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо перезаполнить существующий элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуСтарогоДоговора(Знач ФормаСНТ, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ФормаСНТ.Объект.ДоговорПоставки);
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ФормаСНТ); 
	
	ЗаполнитьФормуДоговора(ФормаСНТ, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);
		
	ФормаДоговора.Открыть();
	ФормаДоговора.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьФормуДоговора(Знач ФормаСНТ, Знач ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры = Неопределено)
	
	Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаДоговора), ФормаДоговора, ФормаДоговора.Объект);

	Объект.Наименование = ЭСФКлиентСервер.НаименованиеДоговора(ФормаСНТ.Объект);
	Объект.НаименованиеДляПечати = Объект.Наименование;
	Объект.Контрагент = ФормаСНТ.Объект[ИмяРеквизитаКонтрагента];
	Объект.Партнер = ЭСФВызовСервера.ПолучитьЗначениеРеквизита(Объект.Контрагент, "Партнер");
	Объект.ВалютаВзаиморасчетов = ФормаСНТ.Объект.Валюта;
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Объект.ПорядокОплаты = ПредопределенноеЗначение("Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях");
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует");
	
	ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ФормаСНТ.Объект.Ссылка);
	Объект.Комментарий = ТекстКомментария;
	
	Объект.Организация = ФормаСНТ.Объект.Организация;
	
	Если ФормаСНТ.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком");
	Иначе
		Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем");
	КонецЕсли;
	
	Объект.Номер = ФормаСНТ.Объект.ДоговорПоставкиНомер;
	Объект.Дата  = ФормаСНТ.Объект.ДоговорПоставкиДата;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоверенныйОператор") Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПоверенныйОператор) Тогда
			Объект.ПоверенныйОператор = ДополнительныеПараметры.ПоверенныйОператор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьЗаполненнуюФормуНовогоКонтрагента (Знач ФормаСНТ, Знач Поставщик) Экспорт
	
	Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", , ФормаСНТ);
	Объект = ?(СНТКлиентСервер.ЭтоОбычнаяФорма(Форма), Форма, Форма.Объект);

	ИмяРеквизитаИИНБИН = "%КонтрагентИНН";
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить(ИмяРеквизитаИИНБИН, "");
	
	СНТВызовСервера.ЗаполнитьСоответствиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов, ИмяРеквизитаИИНБИН);
		
	Объект[ИмяРеквизитаИИНБИН] = Поставщик.Идентификатор;
	Объект.Наименование = Поставщик.Наименование;
	Объект.НаименованиеПолное = Поставщик.Наименование;

	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	Форма.Открыть();
	
КонецПроцедуры

Функция ВводитсяДокументКорректировкаРеализации(Ключ) Экспорт
	
	Если ТипЗнч(Ключ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Ключ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Функция ПроверитьИмяДокументаПТУ(Ключ) Экспорт
	
	Если ТипЗнч(Ключ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаВыбораСНТ(ПТУ, СНТ) Экспорт
	
	СНТВызовСервера.ОбработкаВыбораСНТ(ПТУ, СНТ);
	
КонецПроцедуры

#КонецОбласти

Функция ПустаяСсылкаЗаявлениеОВвозеТоваров() Экспорт
	Возврат ПредопределенноеЗначение("Документ.ЗаявлениеОВвозеТоваров.ПустаяСсылка");
КонецФункции

//Акцизы
Функция СтавкаАкцизаЧислоПриИзменении(СтрокаТабличнойЧасти) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#Область ФормыДокументаСНТ

Процедура ВыборДокументаОснованияВФормеСНТ(Знач ФормаСНТ, ИмяТипаДокумента, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ИмяТипаДокумента) Тогда
		Если СтрНайти(ИмяТипаДокумента, "ПриобретениеТоваров") Тогда
			СтруктураОтбора = Новый Структура("Организация, Проведен, Контрагент", ФормаСНТ.Объект.Организация, Истина, ФормаСНТ.Объект.Поставщик);
			Если ФормаСНТ.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
				СтруктураОтбора.Вставить("ХозяйственнаяОперация",ПолучитьТипыХозяйственныхОперацийИмпортДокументаПТУ());
			КонецЕсли;
		КонецЕсли;
		СтруктураПараметров = Новый Структура("Отбор, РежимВыбора, МножественныйВыбор", СтруктураОтбора, Истина, Ложь);
		ИмяФормыВыбора = "Документ." + ИмяТипаДокумента + ".ФормаВыбора"; 
		ОткрытьФорму(ИмяФормыВыбора, СтруктураПараметров , ФормаСНТ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипыХозяйственныхОперацийИмпортДокументаПТУ()
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути"));
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки"));
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути"));
	Возврат Новый ФиксированныйМассив(МассивОпераций);
	
КонецФункции

#КонецОбласти
