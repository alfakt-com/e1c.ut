////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак возможности отправки ЭСФ от структурных подразделений.
// Для отправки ЭСФ структурное подразделение должно иметь собственный БИН.
//
// Возвращаемое значение:
//  Булево - Истина, если можно отправлять ЭСФ от структурных подразделений. Ложь, в пртивном случае.
//
Функция ИспользуютсяСтруктурныеПодразделения() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак необходимостри отражения отзыва в учете,
// с помощью сторнирования движений счета-фактуры.
//
// Возвращаемое значение:
//  Булево - Истина, если необходимо отражать отзыв в учете. Ложь, в пртивном случае.
//
Функция ОтражатьОтзывВУчете() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ТипДокументСсылкаСчетФактураВыданный() Экспорт
	
	Возврат Тип("ДокументСсылка.СчетФактураВыданный");
	
КонецФункции

Функция ТипДокументСсылкаСчетФактураПолученный() Экспорт
	
	Возврат Тип("ДокументСсылка.СчетФактураПолученный");
	
КонецФункции

Функция ЭтоДокументСсылкаСчетФактураПолученный(ТипДокумента) Экспорт
	
	Если ТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с отборами и параметрами динамических списков.
//

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Возврат МассивЭлементов;
	
КонецФункции

// Удаляет элемент отбора динамического списка.
//
// Параметры:
//  Список - обрабатываемый динамический список.
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает элемент отбор динамического списка.
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора.
//  ПравоеЗначение - Значение отбора.
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ПравоеЗначение);
		ПравоеЗначение = СписокЗначений;		
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;	
		Иначе
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;	
		КонецЕсли;
	КонецЕсли;
		
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Представление = Представление;
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список - Обрабатываемый динамический список.
//  ИмяПоля - Имя поля компоновки, отбор по которому нужно установить.
//  ВидСравнения - Вид сравнения отбора, по умолчанию - Равно.
//  ПравоеЗначение - Значение отбора.
//  Установить - Признак необходимости установить отбор.
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения, , Установить);
	
КонецПроцедуры

Функция ИмяСторнирующегоДокумента() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ИмяРеквизитаСчетФактураСторнирующегоДокумента() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ИмяПропуститьПроверкуЗапретаИзменения() Экспорт
	
	Возврат "ПропуститьПроверкуЗапретаИзменения";
	
КонецФункции

Функция ИмяРеквизитаФизЛицоСправочникаПользователи() Экспорт
	
	Возврат "ФизЛицо";
	
КонецФункции

// Возвращает текущего пользователя ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Текущий пользователь ИБ.
//
Функция УполномоченныйСотрудник() Экспорт
	
	ТекущийПользовательИБ = ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ТекущийПользовательИБ) Тогда
		// будет получен из сертификата
		УполномоченныйСотрудник = "";
	ИначеЕсли Тип("СправочникСсылка.Пользователи") = ТипЗнч(ТекущийПользовательИБ) Тогда
		РеквизитыПользователя = ЭСФВызовСервера.РеквизитыПользователя(ТекущийПользовательИБ);
		Если ЗначениеЗаполнено(РеквизитыПользователя.Фамилия) Тогда 
			УполномоченныйСотрудник = СокрЛП(РеквизитыПользователя.Фамилия + " " + РеквизитыПользователя.Имя + " " + РеквизитыПользователя.Отчество);
		Иначе
			// будет получен из сертификата
			УполномоченныйСотрудник = "";
		КонецЕсли
	Иначе
		УполномоченныйСотрудник = СокрЛП(ТекущийПользовательИБ);
	КонецЕсли;
	
	Возврат УполномоченныйСотрудник;
	
КонецФункции

// Возвращает текущего пользователя ИБ.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - Текущий пользователь ИБ.
//
Функция ТекущийПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

Функция ИспользоватьФоновуюОтправкуЭСФ() Экспорт
	
	Возврат ЭСФВызовСервераПовтИсп.ИспользоватьФоновуюОтправкуЭСФ();
	
КонецФункции

Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	//Возврат ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторФормы", ИдентификаторФормы); 
	Результат.Вставить("ДополнительныйРезультат", Ложь);
	Результат.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = ПредопределенноеЗначение("СкоростьКлиентскогоСоединения.Низкая"), 4, 2));
	Результат.Вставить("НаименованиеФоновогоЗадания", "");
	Результат.Вставить("КлючФоновогоЗадания", "");
	Возврат Результат;
	
КонецФункции

// Функция возвращает наименование строки из макета классификатора по ее коду
//
// Параметры:
//	ТабличныйМакет - табличный документ, содеджащий данные классификатора
//	Область - область табличного документа, по строкам которой осуществляется поиск
//	КодСтроки - строковый код 
//	НомерКолонкиКода - число - номер колонки, в которой содержатся коды строк
//	НомерКолонкиНаименования - число - номер колонки, в которой содержатся наименование строк
//
Функция ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКлассификатора, Область, Знач КодСтроки, НомерКолонкиКода = 1, НомерКолонкиНаименования = 2) Экспорт

	НаименованиеСтроки = "";
	КодСтроки = ВРег(СокрЛП(КодСтроки));

	Для НомерСтроки = Область.Верх По Область.Низ Цикл
		
		Если КодСтроки = ВРег(СокрЛП(МакетКлассификатора.Область(НомерСтроки, НомерКолонкиКода).Текст)) Тогда
			НаименованиеСтроки = МакетКлассификатора.Область(НомерСтроки, НомерКолонкиНаименования).Текст;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;

	Возврат НаименованиеСтроки;

КонецФункции // ПолучитьНаименованиеСтрокиПоКоду()

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  СтрокаПроверки          - Строка - Строка для проверки.
//  УчитыватьЛидирующиеНули - Булево - Флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются.
//  УчитыватьПробелы        - Булево - Флаг учета пробелов, если Истина, то пробелы при проверке игнорируются.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина) Экспорт
	
	//здесь может быть переопределение на ОМ и процедуру типового решения
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
		
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку.
		Пока Сред(СтрокаПроверки, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			СтрокаПроверки, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция ИмяРеквизитаПоставщикаСчетаФактуры() Экспорт
	
	//в БК "Поставщик", в ЕРП "Контрагент"
	Возврат "Контрагент";
	
КонецФункции

#Область СтроковыеФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	СтрокаПодстановки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки,
	Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);	
	
	Возврат СтрокаПодстановки;
КонецФункции
	
#КонецОбласти 

#Область ОбщегоНазначения

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы.
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы).
//  Отказ                      - Булево - Выходной параметр.
//                               Всегда устанавливается в значение Истина.
//
//	Пример:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы.
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным.
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых.
//  3. Установка ссылки без установки поля (и/или пути к данным).
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю,
														КлючДанных,
														Поле,
														ПутьКДанным,
														Отказ);	
КонецПроцедуры

// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//  ИсхСумма   - распределяемая сумма
//  МассивКоэф - массив коэффициентов распределения
//  Точность   - точность округления при распределении. Необязателен.
//
//Возвращает:
//  МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//               суммы в соответствии с весом коэффициента (из массива коэффициентов)
//               В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//               или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт
	
	Возврат ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(ИсхСумма, МассивКоэф, Точность);
	
КонецФункции // РаспределитьПропорционально()

// Возвращает вид ЭСФ по виду счета-факутуры.
//
// Параметры:
//  ВидСчетаФактуры - ПеречислениеСсылка.ВидыСчетовФактур - 
//   Вид счета-фактуры, для которого необходимо получить вид ЭСФ.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыЭСФ - Вид ЭСФ, соответствующий виду счета-фактуры.
//
Функция ВидЭСФ(Знач СсылкаСчетФактураПолученный) Экспорт
	
	ВидЭСФ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Обычный");
	
	Если ТипЗнч(СсылкаСчетФактураПолученный) = ТипДокументСсылкаСчетФактураПолученный() Тогда
		
		Если СсылкаСчетФактураПолученный.Корректировочный Тогда
			ВидЭСФ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный");
		ИначеЕсли СсылкаСчетФактураПолученный.Исправление Тогда
			ВидЭСФ = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЭСФ;
	
КонецФункции

Функция НомерДатаСФ(Знач СсылкаСчетФактураПолученный) Экспорт
	
	НомерДатаСФ = Новый Структура;
	
	Если ТипЗнч(СсылкаСчетФактураПолученный) = ТипДокументСсылкаСчетФактураПолученный() Тогда
		
		Если СсылкаСчетФактураПолученный.Исправление Тогда
			НомерСФ = СсылкаСчетФактураПолученный.НомерИсправления;
			ДатаСФ 	= СсылкаСчетФактураПолученный.ДатаИсправления;
		Иначе	
			НомерСФ = СсылкаСчетФактураПолученный.Номер;
			ДатаСФ 	= СсылкаСчетФактураПолученный.ДатаСоставления;
		КонецЕсли;	
	ИначеЕсли ТипЗнч(СсылкаСчетФактураПолученный) = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
		НомерСФ 	  = "";
		ДатаСФ 		  = СсылкаСчетФактураПолученный.ДатаПолучения;
	КонецЕсли;
	
	НомерДатаСФ.Вставить("НомерСФ"		, НомерСФ);
	НомерДатаСФ.Вставить("ДатаСФ"		, ДатаСФ) ;
	
	Возврат НомерДатаСФ;
	
КонецФункции

#КонецОбласти 

#Область ЗначенияПоУмолчанию

Функция ПолучитьПредопределенноеЗначениеСтраны() Экспорт
	
	Возврат ПредопределенноеЗначение("Справочник.СтраныМира.Казахстан");
	
КонецФункции

#КонецОбласти 

