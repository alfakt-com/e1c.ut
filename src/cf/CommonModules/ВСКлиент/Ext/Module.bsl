// Выполняет методы syncInvoice() API ИС ЭСФ.
// Если отправляются исправленные ЭСФ, то дополнительно выполняет метод еrevokeInvoiceById() API ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//
// Возвращаемое значение:
//  См. ЭСФСервер.ОтправитьИсходящиеInvoice().
//
Процедура ОтправитьИсходящиеЭДВС(Знач МассивИсходящихЭД, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеЭДВС(МассивИсходящихЭД, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбновитьДокументыУТТНИзВС(Знач МассивЭД, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();;	
	Контейнер.ОбновитьДокументыУТТНИзВС(МассивЭД, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбновитьСтатусыЭДВСПоИдентификаторам(Знач МассивЭД, Знач ИспользоватьФоновуюОтправкуЭСФ) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьСтатусыЭДВСПоИдентификаторам(МассивЭД, ИспользоватьФоновуюОтправкуЭСФ);
	
КонецПроцедуры

Процедура ОбновитьСтатусВСПоИдентификатору(Знач ВС, Знач ИспользоватьФоновуюОтправкуЭСФ) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьСтатусВСПоИдентификатору(ВС, ИспользоватьФоновуюОтправкуЭСФ);
	
КонецПроцедуры

Функция ИзменитьСтатусыЭДВС(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыЭДВС(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

Процедура ПолучитьИдентификаторыТоваровУТТНИзВС(Знач МассивЭД, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПолучитьИдентификаторыТоваровУТТНИзВС(МассивЭД, ДополнительныеПараметры);	
КонецПроцедуры

Процедура ПолучитьИдентификаторыТоваровЭСФИзВС(Знач МассивЭСФ, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПолучитьИдентификаторыТоваровЭСФИзВС(МассивЭСФ, ДополнительныеПараметры);	
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовЭДВС(Знач Действие, Знач МассивЭД, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовЭДВС(Действие, МассивЭД, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

// Выполняет Выгрузку данных ЭСФ в XML-файл
//
// Параметры:
//  МассивИсходящихЭДВС - Массив - Массив документов ВС, которые необходимо выгрузить в XML файл.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйДокументВС.
//
Процедура ВыгрузитьИсходящиеЭДВС(Знач МассивИсходящихЭДВС) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ВыгрузитьИсходящиеЭДВС(МассивИсходящихЭДВС);
		
КонецПроцедуры

// Сохраняет XML строку, содержащую пакет документов ВС, в файл.
//
// Параметры:
//  XML - Строка - Пакет документов ВС для импорта в ИС ЭСФ.
//
Процедура СохранитьXMLДляИмпортаВИСЭСФ(XML) Экспорт
	
	ИмяФайла = НСтр("ru = '%ДатаФормирования% Пакет документов ВС'");
	ИмяФайла = СтрЗаменить(ИмяФайла, "%ДатаФормирования%", Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd"));
	
	#Если ВебКлиент Тогда
		
		ПолучитьФайл(ЭСФВызовСервера.ПоместитьДанныеВоВременноеХранилище(XML), ИмяФайла + ".xml");
		
		Сообщить(НСтр("ru = 'Выгруженные документы виртуального склада можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	#Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;	
		ДиалогВыбораФайла.Расширение = "xml";
		ДиалогВыбораФайла.Фильтр = "Пакет электронных документов ВС (*.xml)|*.xml";
		
		ДополнительныеПараметры = Новый Структура("XML", XML);
		СохранитьXMLДляИмпортаВИСЭСФЗав = Новый ОписаниеОповещения("СохранитьXMLДляИмпортаВИСЭСФЗавершение", ВСКлиент, ДополнительныеПараметры);
		ДиалогВыбораФайла.Показать(СохранитьXMLДляИмпортаВИСЭСФЗав);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура СохранитьXMLДляИмпортаВИСЭСФЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныеФайлы.Количество() = 1 Тогда

		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ВыбранныеФайлы[0], "CESU-8"); //UTF-8			
		ЗаписьТекста.Записать(ДополнительныеПараметры.XML);
		ЗаписьТекста.Закрыть();	
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр(
			"ru = 'Выгрузка электронных документов ВС успешно завершена.
			|Выгруженные документы можно импортировать в ИС ЭСФ, а затем отправить получателю средствами ИС ЭСФ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет даты отправляемых документов ВС, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов ВС.
//
// Параметры:
//  МассивЭДВС - Массив - Массив документов ВС, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйДокументВС.
//  Действие - Строка - ВСКлиентСервер.ДействиеОтправка(), ВСКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляЭДВСВопрос(Знач МассивЭДВС, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ТекущаяДата());	
	ИзмененГод  = Ложь;
	МассивЭДВСДругаяДата = ВСВызовСервера.МассивЭДВСДругаяДата(МассивЭДВС, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
		
	Если МассивЭДВСДругаяДата.Количество() = 1 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Дата ""%ЭДВС%"" отличается от текущей (%ТекущаяДата%).
			|%ОтправляемыйВыгружаемый% электронный документ виртуального склада должен иметь текущую дату.
			|Изменить дату электронного документа виртуального склада(%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ЭДВС%",  ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(МассивЭДВСДругаяДата[0]));
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Если Действие = ЭСФКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Отправляемый'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Выгружаемый'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли МассивЭДВСДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Даты %КоличествоЭДВС% электронных документов ВС отличаются от текущей (%ТекущаяДата%):
			|%ОтправляемыеВыгружаемые% электронные документы ВС должны иметь текущую дату.
			|Изменить даты электронных документов ВС на текущую (%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Если Действие = ЭСФКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Отправляемые'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Выгружаемые'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);

		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КоличествоЭДВС%", МассивЭДВСДругаяДата.Количество());
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьОшибкиЭДВСПоИдентификаторам(Знач МассивЭД, Знач ИспользоватьФоновуюОтправкуЭСФ, Знач ОбновитьДокументыВС) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПолучитьОшибкиЭДВСПоИдентификаторам(МассивЭД, ИспользоватьФоновуюОтправкуЭСФ, ОбновитьДокументыВС);
	
КонецПроцедуры

//Загружает номенклатуру ГСВС из сервера ВС
Процедура ЗагрузитьНоменклатуруГСВС(ПараметрыВызова) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.ЗагрузитьНоменклатуруГСВС(ПараметрыВызова);	
КонецПроцедуры

Процедура ОбновитьВиртуальныеСкладыИзВС(Знач МассивСкладов, Знач ДополнительныеПараметры) Экспорт
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();;	
	Контейнер.ОбновитьВиртуальныеСкладыИзВС(МассивСкладов, ДополнительныеПараметры);
КонецПроцедуры

#Область СправочникИсточникиПроисхождения

Функция ПустыеПараметрыВыбораИсточникаПроисхождения() Экспорт
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("Ссылка");
	ПараметрыВыбора.Вставить("Дата");	
	ПараметрыВыбора.Вставить("Организация");
	ПараметрыВыбора.Вставить("РежимОстатков");
	ПараметрыВыбора.Вставить("Номенклатура");
	ПараметрыВыбора.Вставить("ИсточникПроисхождения");
	ПараметрыВыбора.Вставить("Склад");
	
	Возврат ПараметрыВыбора;
	
КонецФункции

Функция ПараметрыВыбораИсточникаПроисхождения(Объект, Склад, ТекущиеДанные, ИмяРеквизитаТовары = "Номенклатура", РежимОстатков = Истина) Экспорт
	
	ПараметрыВыбора = ПустыеПараметрыВыбораИсточникаПроисхождения();
	
	ПараметрыВыбора.Ссылка      = Объект.Ссылка;
	ПараметрыВыбора.Дата        = Объект.Дата;	
	ПараметрыВыбора.Организация = Объект.Организация;
	ПараметрыВыбора.Склад       = Склад;
	ПараметрыВыбора.РежимОстатков = РежимОстатков;
	
	ПараметрыВыбора.Номенклатура  = ТекущиеДанные[ИмяРеквизитаТовары]; 
	ПараметрыВыбора.ИсточникПроисхождения    = ТекущиеДанные.ИсточникПроисхождения;
	
	Возврат ПараметрыВыбора;  
КонецФункции


Процедура ИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбора) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", ПараметрыВыбора.Дата);
	ПараметрыФормы.Вставить("Регистратор", ПараметрыВыбора.Ссылка);
	ПараметрыФормы.Вставить("РежимОстатков", ПараметрыВыбора.РежимОстатков);	
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыВыбора.ИсточникПроисхождения);
	
	Отбор = Новый Структура;
	
	//Если ПараметрыВыбора.ПоказыватьТолькоОстатки Тогда		
		
		Отбор.Вставить("Организация", ПараметрыВыбора.Организация);
		Отбор.Вставить("Номенклатура", ПараметрыВыбора.Номенклатура);
		Отбор.Вставить("Склад", ПараметрыВыбора.Склад);		
	//Иначе
	//	Отбор.Вставить("Номенклатура", ПараметрыВыбора.Номенклатура);
	//КонецЕсли;   	
	 	
	ПараметрыФормы.Вставить("Отбор", Отбор);	

	ОткрытьФорму("Справочник.ИсточникиПроисхождения.Форма.ФормаВыбора", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


#КонецОбласти

// Открывает форму выбора документа - основания из документа ЭДВС.
// Используется в команде "Выбрать документ - основание", подменю "Отражение в учете".
// Обработка выбора выполняется в форме ЭДВС и не требует переопределения.
//
// Параметры:
//  ФормаЭДВС - УправляемаяФорма - Форма документа ЭДВС, 
//   из которой открывается форма выбора документа-основания.
//  ИмяФормыВыбора - Переменная - хранит имя формы того документа,
//   которого нужно открыть.
//
Процедура ОткрытьФормуВыбораДокументаОснования(Знач ФормаЭДВС, Знач ИмяФормыВыбора) Экспорт
	
	// Сформировать отбор формы выбора.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ФормаЭДВС.Объект.Организация);
				
	Если ИмяФормыВыбора = "Документ.ЭСФ.ФормаВыбора" Тогда
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));
	КонецЕсли;
		
	// Открыть форму выбора с отбором.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = ПолучитьФорму(ИмяФормыВыбора, , ФормаЭДВС);
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		Форма.Открыть();
	#Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ФормаЭДВС);		
	#КонецЕсли
	
КонецПроцедуры

#Область КомандаСоздатьЭлектронныйДокументВС

Процедура ВыполнитьКомандуСоздатьЭДВС(ПараметрКоманды) Экспорт
	
	ЭтоВводОстатковИзВходящегоЭСФ = Ложь;
	НомерДетализируемойСтроки = Неопределено;
	ДетализироватьОС = Ложь;
	ЭтоВводНаПеремещениеИзВходящегоСНТ = Ложь;

	Если ТипЗнч(ПараметрКоманды) = Тип("Структура") Тогда		
		
		ТипДокумента = ТипЗнч(ПараметрКоманды.ДокументСсылка);
		
		ЭтоДокументТаможеннойДекларации  = ВСВызовСервера.ТипДокументаТаможеннойДекларации(ТипДокумента);
		СписокДокументовТаможеннойДекларации = ВСВызовСервера.ТипыДокументовТаможеннойДекларации();
		
		Если ЭтоДокументТаможеннойДекларации Тогда
			
			НомерДетализируемойСтроки = ПараметрКоманды.НомерСтроки;

			Если НЕ ТипДокумента = СписокДокументовТаможеннойДекларации[0].Значение Тогда
				ДетализироватьОС = ПараметрКоманды.ДетализироватьОС;
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЭСФ") Тогда
			ЭтоВводОстатковИзВходящегоЭСФ = ПараметрКоманды.ЭтоВводОстатковИзВходящегоЭСФ;
		ИначеЕсли ТипДокумента = ВСВызовСервера.ТипДокументаСНТ() И ПараметрКоманды.Свойство("ЭтоВводНаПеремещениеИзВходящегоСНТ") Тогда
			ЭтоВводНаПеремещениеИзВходящегоСНТ = ПараметрКоманды.ЭтоВводНаПеремещениеИзВходящегоСНТ;
		КонецЕсли; 
	
		МассивДокументыОснования = Новый Массив;
		МассивДокументыОснования.Добавить(ПараметрКоманды.ДокументСсылка);
		ПараметрКоманды = МассивДокументыОснования;
	Иначе
		ТипДокумента = ТипЗнч(ПараметрКоманды[0]);
	КонецЕсли;
	
	СоответствиеТипДокументаВидДвижения = ВСКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения();
	
	ВидДвижения = СоответствиеТипДокументаВидДвижения.Получить(ТипДокумента);
	
	Если ВидДвижения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыДляВыполненияКоманды = ВСВызовСервера.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭДВС(ПараметрКоманды, ВидДвижения);
	
	Если ПараметрыДляВыполненияКоманды = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	МассивыОбрабатываемыхДокументов = ПараметрыДляВыполненияКоманды.МассивыОбрабатываемыхДокументов;
	
	МассивДокументовБезЭДВС 		= МассивыОбрабатываемыхДокументов.МассивДокументовБезЭДВС;
	МассивДокументовСЭДВС 			= МассивыОбрабатываемыхДокументов.МассивДокументовСЭДВС;
	
	ОткрыватьФормуНовогоДокумента = ВСКлиентПереопределяемый.ПроверитьМожноЛиОткрыватьФормуНовогоДокумента(ТипДокумента);
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("ОткрыватьФормуНовогоДокумента"	, ОткрыватьФормуНовогоДокумента);
	ДополнительныеПараметры.Вставить("НомерДетализируемойСтроки"	, НомерДетализируемойСтроки);
	ДополнительныеПараметры.Вставить("ДетализироватьОС"				, ДетализироватьОС);
	ДополнительныеПараметры.Вставить("ЭтоВводОстатковИзВходящегоЭСФ", ЭтоВводОстатковИзВходящегоЭСФ);
	ДополнительныеПараметры.Вставить("ЭтоВводНаПеремещениеИзВходящегоСНТ", ЭтоВводНаПеремещениеИзВходящегоСНТ);
	
	Если ПараметрКоманды.Количество() = 1 И ОткрыватьФормуНовогоДокумента Тогда
		Если МассивДокументовСЭДВС.Количество() <> 0  Тогда
			ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже созданы ЭДВС.
			|Создать новый ЭДВС?'");
			ДополнительныеПараметры.Вставить("МассивДокументов", МассивДокументовСЭДВС);
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЭДВСЗавершение", ЭтотОбъект , ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			СоздатьЭДВС(МассивДокументовБезЭДВС[0],НомерДетализируемойСтроки,ДетализироватьОС,ЭтоВводОстатковИзВходящегоЭСФ,ЭтоВводНаПеремещениеИзВходящегоСНТ);
		КонецЕсли;	
	Иначе
		Если МассивДокументовСЭДВС.Количество() = 0 Тогда
			ДополнительныеПараметры.Вставить("МассивДокументов", МассивДокументовБезЭДВС);
			СоздатьСписокЭДВС(МассивДокументовБезЭДВС);
		Иначе
			ТекстВопроса = НСтр("ru = 'На основании документов: 
			|%1 
			|уже созданы ЭДВС. Создать на основании них новые ЭДВС?'");
			ТекстМассивДокументовСЭДВС = "";
			Для Каждого СтрокаМассива Из МассивДокументовСЭДВС Цикл
				ТекстМассивДокументовСЭДВС = ТекстМассивДокументовСЭДВС + ?(ТекстМассивДокументовСЭДВС = "", "", "; 
																													|") + СтрокаМассива;
			КонецЦикла;	
			ТекстВопроса = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекстМассивДокументовСЭДВС);
			
			ДополнительныеПараметры.Вставить("МассивДокументов"			, ПараметрКоманды);
			ДополнительныеПараметры.Вставить("МассивДокументовБезЭДВС"	, МассивДокументовБезЭДВС);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЭДВСЗавершение",ЭтотОбъект , ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьЭДВСЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивДокументов = ДополнительныеПараметры.МассивДокументов;
	НомерДетализируемойСтроки = ДополнительныеПараметры.НомерДетализируемойСтроки;
	ДетализироватьОС = ДополнительныеПараметры.ДетализироватьОС;
	ЭтоВводОстатковИзВходящегоЭСФ = ДополнительныеПараметры.ЭтоВводОстатковИзВходящегоЭСФ;
	ЭтоВводНаПеремещениеИзВходящегоСНТ = ДополнительныеПараметры.ЭтоВводНаПеремещениеИзВходящегоСНТ;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если МассивДокументов.Количество() = 1 И ДополнительныеПараметры.ОткрыватьФормуНовогоДокумента Тогда
			СоздатьЭДВС(МассивДокументов[0],НомерДетализируемойСтроки,ДетализироватьОС,ЭтоВводОстатковИзВходящегоЭСФ,ЭтоВводНаПеремещениеИзВходящегоСНТ);
		Иначе
			СоздатьСписокЭДВС(ДополнительныеПараметры.МассивДокументов);	
		КонецЕсли;	
			
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет 
			И МассивДокументов.Количество() > 1 
			И ДополнительныеПараметры.МассивДокументовБезЭДВС.Количество() > 0 Тогда
			
		СоздатьСписокЭДВС(ДополнительныеПараметры.МассивДокументовБезЭДВС);
		
	Иначе	
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьСписокЭДВС(МассивДокументов)
	ТекстВопроса = НСтр(
	"ru = 'Для выделенных документов будут созданы и записаны электронные документы ВС.
	|Продолжить?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьСписокЭДВСЗавершение",ЭтотОбъект , МассивДокументов);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры	

Процедура СоздатьСписокЭДВСЗавершение(Ответ, МассивДокументов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Если ВСКлиентПереопределяемый.ПолучитьТипПроизводствоБезЗаказа(МассивДокументов) Тогда
			Возврат;
		КонецЕсли;
		
		ДокументОснование 					= МассивДокументов[0];
		
		ТипДокумента						= ТипЗнч(ДокументОснование);
		
		МассивДокументовПриход				= Новый Массив;
		МассивДокументовЭСФ					= Новый Массив;
		МассивДокументовРасходПриход		= Новый Массив;
		МассивДокументовРасход				= Новый Массив;
		
		МассивВидовДокументаПриход			= Новый Массив;
		МассивВидовДокументаЭСФ				= Новый Массив;
		МассивВидовДокументаРасходПриход	= Новый Массив;
		МассивВидовДокументаРасход			= Новый Массив;
		
		ВидДвижения = ВСКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения().Получить(ТипДокумента);
		Если ВидДвижения = Неопределено Тогда
			Возврат
		КонецЕсли;
		
		Если ВидДвижения = "Приход" Тогда
			МассивДокументовПриход = МассивДокументов;
			МассивВидовДокументаПриход.Добавить(ТипДокумента);
		ИначеЕсли ВидДвижения = "ЭСФ" Тогда
			МассивДокументовЭСФ = МассивДокументов;
			МассивВидовДокументаЭСФ.Добавить(ТипДокумента);
		ИначеЕсли ВидДвижения = "РасходПриход" Тогда
			МассивДокументовРасходПриход = МассивДокументов;
			МассивВидовДокументаРасходПриход.Добавить(ТипДокумента);
		Иначе
			МассивДокументовРасход = МассивДокументов;
			МассивВидовДокументаРасход.Добавить(ТипДокумента);
		КонецЕсли;	
		
		МассивВидовДвижений = Новый Массив;
		МассивВидовДвижений.Добавить("Приход");
		МассивВидовДвижений.Добавить("ЭСФ");
		МассивВидовДвижений.Добавить("РасходПриход");
		МассивВидовДвижений.Добавить("Расход");
		
		СоответсвиеМассивовДокументов = Новый Соответствие;
		СоответсвиеМассивовДокументов.Вставить("Приход"			, МассивДокументовПриход);
		СоответсвиеМассивовДокументов.Вставить("ЭСФ"			, МассивДокументовЭСФ);
		СоответсвиеМассивовДокументов.Вставить("РасходПриход"	, МассивДокументовРасходПриход);
		СоответсвиеМассивовДокументов.Вставить("Расход"			, МассивДокументовРасход);
		
		СоответсвиеМассивовВидовДокумента = Новый Соответствие;
		СоответсвиеМассивовВидовДокумента.Вставить("Приход"			, МассивВидовДокументаПриход);
		СоответсвиеМассивовВидовДокумента.Вставить("ЭСФ"			, МассивВидовДокументаЭСФ);
		СоответсвиеМассивовВидовДокумента.Вставить("РасходПриход"	, МассивВидовДокументаРасходПриход);
		СоответсвиеМассивовВидовДокумента.Вставить("Расход"			, МассивВидовДокументаРасход);
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("СоответсвиеМассивовДокументов"		, СоответсвиеМассивовДокументов);
		ПараметрыСоздания.Вставить("СоответсвиеМассивовВидовДокумента"	, СоответсвиеМассивовВидовДокумента);
		ПараметрыСоздания.Вставить("МассивВидовДвижений"				, МассивВидовДвижений);
		ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
		ПараметрыСоздания.Вставить("ФормироватьСписокДокументов"		, Истина);
		ПараметрыСоздания.Вставить("НеРазбиватьДокумент"				, Ложь);
		ПараметрыСоздания.Вставить("ПодбиратьИсточникиПроисхождения"	, Истина);
		ПараметрыСоздания.Вставить("НомерДетализируемойСтроки"			, Неопределено);
		ПараметрыСоздания.Вставить("ДетализироватьОС"					, Ложь);
		ПараметрыСоздания.Вставить("ЭтоВводОстатковИзВходящегоЭСФ"		, Ложь);
		ПараметрыСоздания.Вставить("ЭтоВводНаПеремещениеИзВходящегоСНТ"	, Ложь);
		
		СписокЭДВС = ВСВызовСервера.СоздатьСписокЭлектронныхДокументовВС(ПараметрыСоздания);
		
		Если СписокЭДВС <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокЭДВС)));
			ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаСписка", ПараметрыФормы,, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭДВС(ДокументОснование,НомерДетализируемойСтроки = Неопределено,ДетализироватьОС = Ложь,ЭтоВводОстатковИзВходящегоЭСФ = Ложь,ЭтоВводНаПеремещениеИзВходящегоСНТ = Ложь)
	
	Если ВСКлиентПереопределяемый.ПолучитьТипПроизводствоБезЗаказа(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ДокументОснование"					, ДокументОснование);
	ЗначенияЗаполнения.Вставить("НомерДетализируемойСтроки"			, НомерДетализируемойСтроки);
	ЗначенияЗаполнения.Вставить("ДетализироватьОС"					, ДетализироватьОС);
	ЗначенияЗаполнения.Вставить("ЭтоВводОстатковИзВходящегоЭСФ"		, ЭтоВводОстатковИзВходящегоЭСФ);
	ЗначенияЗаполнения.Вставить("ЭтоВводНаПеремещениеИзВходящегоСНТ", ЭтоВводНаПеремещениеИзВходящегоСНТ);

	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

//Создает виртуальные склады в ИС ЭСФ
Процедура СоздатьВиртуальныеСклады(Знач МассивВС, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = ВСКлиентСервер.КонтейнерМетодов();	
	Контейнер.СоздатьВиртуальныеСклады(МассивВС, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти
