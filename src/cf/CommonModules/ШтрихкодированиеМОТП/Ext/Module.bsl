#Область ПрограммныйИнтерфейс

// Определяет по значению штрихкода принадлежность к табачной продукции: пачке, блоку, логистической упаковке.
// 
// Параметры:
//  Штрихкод - Строка - Штрихкод маркируемой продукции.
//  УчитыватьЛогистическуюУпаковку - Булево - Логистическая упаковка будет так же будет подвергнута анализу.
// Возвращаемое значение:
//  Булево - Истина - в случае принадлежности штрихкода к табачной продукции, Ложь - в обратном случае.
Функция ЭтоШтрихкодТабачнойПродукции(Штрихкод, УчитыватьЛогистическуюУпаковку = Ложь) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(Штрихкод)
		Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(Штрихкод);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет код маркировки на соответствие шаблону блока табачных пачек
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
//  GTIN          - Строка - GTIN [Исходящий].
//  МРЦ           - Число  - МРЦ [Исходящий].
// Возвращаемое значение:
//  Булево - Истина, если код соответствует блоку табачных пачек.
Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КодМаркировки, EAN, МРЦ);
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону блока или логистической упаковки.
//
// Параметры:
//  КодМаркировки - Строка - Штрихкод.
//  КонтрольПоВидуПродукции - Булево - Истина, если будет выполняться проверка по вложенным видам продукции существующих
//  элементов справочника "Штрихкоды упаковок".
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодУпаковки(КодМаркировки, КонтрольПоВидуПродукции = Ложь) Экспорт
	
	Если ЭтоКодМаркировкиБлока(КодМаркировки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не КонтрольПоВидуПродукции Тогда
		Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодЛогистическойУпаковки(КодМаркировки);
	КонецЕсли;
	
	ВидыПродукции = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ВидыПродукцииЛогистическойУпаковки(КодМаркировки);
	Если ВидыПродукции.Количество() = 1
		И ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")) <> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вычисляет МРЦ из кода маркировки табачной пачки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки табачной пачки.
// Возвращаемое значение:
//  Неопределено, Число - МРЦ.
Функция МРЦКодаМаркировкиТабачнойПачки(КодМаркировки) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
//  Число, Неопределено - МРЦ.
Функция МРЦКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	Возврат ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(КодМаркировки);
	
КонецФункции

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
//  Строка, Неопределено - GTIN.
Функция ШтрихкодEANИзКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	РезультатРазбора = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.МенеджерОборудованияМаркировкаКлиентСервер_РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	
	Если Не РезультатРазбора.Разобран Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Если Идентификатор01 <> Неопределено И СтрДлина(Идентификатор01.Значение) = 14 Тогда
			
			Возврат ШтрихкодEANИзКодаМаркировкиПачки(Идентификатор01.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
//  GTIN - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт
	
	// Пытаемся получить штрихкод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

// Получить штрихкод EAN из кода маркировки табачной пачки.
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//  Строка - Штрихкод EAN8 или EAN13.
Функция ШтрихкодEANИзКодаМаркировкиПачки(КодМаркировки) Экспорт
	
	GTIN = Лев(КодМаркировки, 14);
	
	EAN = ШтрихкодEANИзGTIN(GTIN);
	
	Возврат EAN;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону табачной пачки
// 
// Параметры:
//  КодМаркировки - Строка - Код маркировки.
//  GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
//  Булево - Истина, если код соответствует табачной пачке.
Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено) Экспорт

	Возврат ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN);
	
КонецФункции

// Формирует структуру вложенных штрихкодов по ссылке на документ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - Детализация, с которой
//                           требуется сформировать вложенные штрихкоды.
// Возвращаемое значение:
//  (См. ШтрихкодированиеМОТП.ИнициализацияВложенныхШтрихкодов).
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ДокументСсылка, Детализация, ПараметрыСканирования) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок") = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.';
							|en = 'У документа %1 отсутствует табличная часть ШтрихкодыУпаковок.'");
		ВызватьИсключение СтрШаблон(ТекстОшибки, ДокументСсылка);
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования(ДокументСсылка);
	КонецЕсли;
	
	ЕстьКолонкаЗначениеШтрихкода = МетаданныеДокумента.ТабличныеЧасти.ШтрихкодыУпаковок.Реквизиты.Найти("ЗначениеШтрихкода") <> Неопределено;
	
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	Если ЕстьКолонкаЗначениеШтрихкода Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки  КАК ШтрихкодУпаковки,
		|	ДокументШтрихкодыУпаковок.ЗначениеШтрихкода КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументШтрихкодыУпаковок.ШтрихкодУпаковки                                   КАК ШтрихкодУпаковки,
		|	ЕСТЬNULL(ДокументШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода, """") КАК Штрихкод
		|ИЗ
		|	Документ.%1.ШтрихкодыУпаковок КАК ДокументШтрихкодыУпаковок
		|ГДЕ
		|	ДокументШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	КонецЕсли;
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяДокумента);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить();
	ИзвестныеУпаковки   = Новый Массив;
	НеизвестныеУпаковки = Новый Массив;
	
	Для Каждого Строка Из ШтрихкодыУпаковок Цикл
		
		Если ЗначениеЗаполнено(Строка.ШтрихкодУпаковки) Тогда
			ИзвестныеУпаковки.Добавить(Строка.ШтрихкодУпаковки);
		Иначе
			НеизвестныеУпаковки.Добавить(Строка.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодам = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализацияДанныхПоШтрихкодам();
	Если ИзвестныеУпаковки.Количество() > 0 Тогда
		
		ВложенныеШтрихкодыИзвестныхУпаковок = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ВложенныеШтрихкодыИзвестныхУпаковок(
			ИзвестныеУпаковки, ПараметрыСканирования.ДопустимыеВидыПродукции);
		ДанныеПоШтрихкодам.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования);
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
		
		Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
			Результат.ЕстьОшибки  = Истина;
			Результат.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			Результат.ТребуетсяОбновлениеКлючаСессии = ДанныеПоШтрихкодам.ТребуетсяОбновлениеКлючаСессии;
		Иначе
			Результат.ВложенныеШтрихкоды = ВложенныеШтрихкодыИзвестныхУпаковок;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если НеизвестныеУпаковки.Количество() > 0 Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымМОТП(НеизвестныеУпаковки, ПараметрыСканирования);
		
	КонецЕсли;
	
	ПустаяКоллекция = ИнициализацияВложенныхШтрихкодов();
	Результат       = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
	Результат.ВложенныеШтрихкоды = ПустаяКоллекция;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запрос в систему МОТП, формирует данные по штрихкодам.
//
// Параметры:
//  Штрихкоды - Массив - Перечень штрихкодов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - Ключ - значение штрихкода, значение - данные штрихкода.
Функция ДанныеНеизвестнойМаркируемойПродукции(Штрихкоды, ПараметрыСканирования, ТекстОшибки) Экспорт
	
	ДанныеНеизвестнойМаркируемойПродукции = Новый Соответствие();
	
	ШтрихкодыТабачныхПачек = СписокШтрихкодовТолькоПачки(Штрихкоды);
	
	Если ШтрихкодыТабачныхПачек.Количество() = 0 Тогда
		Возврат ДанныеНеизвестнойМаркируемойПродукции;
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		
		ДанныеНеизвестнойМаркируемойПродукции = ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(ШтрихкодыТабачныхПачек, ПараметрыСканирования); // проверяем на то что это марк товар.
		
	ИначеЕсли ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		РезультатПоДаннымМОТП = ВложенныеШтрихкодыПоДаннымМОТП(ШтрихкодыТабачныхПачек, ПараметрыСканирования);
		Если РезультатПоДаннымМОТП.ЕстьОшибки Тогда
			ТекстОшибки = РезультатПоДаннымМОТП.ТекстОшибки;
			Возврат ДанныеНеизвестнойМаркируемойПродукции;
		КонецЕсли;
		
		ДанныеНеизвестнойМаркируемойПродукции = СформироватьОбработанныеШтрихкоды(
			РезультатПоДаннымМОТП.ВложенныеШтрихкоды.ДеревоУпаковок);
		
	КонецЕсли;
	
	Возврат ДанныеНеизвестнойМаркируемойПродукции;
	
КонецФункции

// Получает данные из государственных информационных систем и заполняет данные для упаковок, о которых нет никакой
// информации в справочнике Штрихкоды упаковок.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ОбработатьШтрихкодыНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП();
		
		Возврат;
	Иначе
		
		КодыМаркировки = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
		
		Результат = ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировки, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда
			
			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
			
			Возврат;
		КонецЕсли;
		
		Если Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
			ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления = Результат.ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления;
			
			Возврат;
		КонецЕсли;
		
		ДанныеПоШтрихкодам.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеПоШтрихкодам.ВидыПродукции);
		ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(Результат.ВложенныеШтрихкоды, ПараметрыСканирования);
		ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ДобавитьВДанныеШтрихкодовВложенныеШтрихкоды(ДанныеПоШтрихкодам, Результат.ВложенныеШтрихкоды);
		ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкоды(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ОбработанныеШтрихкоды, Истина);
		
		ШтрихкодыИзвестныхУпаковок = Новый Массив;
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			ШтрихкодыИзвестныхУпаковок.Добавить(КлючЗначение.Ключ);
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, 
				ШтрихкодыИзвестныхУпаковок);
				
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок,
				ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, Истина);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запрос в сервис МОТП по неизвестным кодам маркировок.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - коллекция видов продукций, входящих в дерево.
// * ВложенныеШтрихкоды - Структура, Неопределено - Включает в себя таблицу значений "Маркированные товары"
//     и "Дерево упаковок".
// * ОбработанныеШтрихкоды - Соответствие - Ключ - Код маркировки, Значение - Данные штрихкода.
Функция СоставНеизвестныхУпаковок(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	СоставУпаковок = Новый Структура;
	ВидыПродукции  = Новый Массив;
	ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
	
	СоставУпаковок.Вставить("ОбработанныеШтрихкоды", Новый Соответствие);
	СоставУпаковок.Вставить("ВложенныеШтрихкоды",    Неопределено);
	СоставУпаковок.Вставить("ВидыПродукции",         ВидыПродукции);
	
	Если Не ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		Возврат СоставУпаковок;
	КонецЕсли;
	
	КодыМаркировки = ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок;
	
	Результат = ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировки, ПараметрыСканирования);
	Если Результат.ЕстьОшибки Тогда
		
		ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
		ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;
		
		Возврат СоставУпаковок;
	КонецЕсли;
	
	СоставУпаковок.ВложенныеШтрихкоды    = Результат.ВложенныеШтрихкоды;
	СоставУпаковок.ОбработанныеШтрихкоды = СформироватьОбработанныеШтрихкоды(СоставУпаковок.ВложенныеШтрихкоды.ДеревоУпаковок);
	ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(СоставУпаковок.ВложенныеШтрихкоды, ПараметрыСканирования);
	
	ШтрихкодыИзвестныхУпаковок = Новый Массив;
	Для Каждого КлючЗначение Из СоставУпаковок.ОбработанныеШтрихкоды Цикл
		
		ШтрихкодыИзвестныхУпаковок.Добавить(КлючЗначение.Ключ);
		ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, 
			ШтрихкодыИзвестныхУпаковок);
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыИзвестныхУпаковок,
			ДанныеПоШтрихкодам.ШтрихкодыНеизвестныхУпаковок, Истина);
		
	КонецЦикла;
	
	Возврат СоставУпаковок;
	
КонецФункции

// Выполняет обработку выбора пользователем уточняющей информации.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой требуется обработка штрихкодов.
//  ИмяЭлементаВыбора - Строка - Идентификатор операции.
//  РезультатВыбора - Структура - Результат выбора данных пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыбор(Форма, ИмяЭлементаВыбора, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения) Экспорт

	Если ИмяЭлементаВыбора = "Номенклатура" Тогда
		РезультатДобавления = ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	КонецЕсли;

	Возврат РезультатДобавления;

КонецФункции

// Выполняет поиск ошибок в данных по штрихкодам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (см. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ВыполнитьПроверкуНаОшибки(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт

	ПравилаПроверкиНаОшибки = Новый Структура;
	
	Если ПараметрыСканирования.ДопустимыеСтатусыМОТП.Количество() > 0
		И ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		
		ПравилоКонтроляСтатусов = Новый Структура;
		ПравилоКонтроляСтатусов.Вставить("ДопустимыеСтатусыМОТП",   ПараметрыСканирования.ДопустимыеСтатусыМОТП);
		ПравилоКонтроляСтатусов.Вставить("КоллекцияСтрокСОшибками", Новый Массив);
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСтатусов", ПравилоКонтроляСтатусов);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ПараметрыУказанияСерий <> Неопределено Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСерий", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольПустыхУпаковок Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольПустыхБлоков", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольОстатков", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыСканирования.КонтрольСоставаУпаковокМОТП
		И ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса <> Неопределено Тогда
		
		ПравилаПроверкиНаОшибки.Вставить("КонтрольСоставаУпаковокМОТП", Новый Массив);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСканирования.Владелец)
		И ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ПравилаПроверкиНаОшибки.Вставить("КонтрольВладельца", Новый Массив);
	КонецЕсли;
	
	ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
	
КонецПроцедуры

// Приводит дерево упаковок и таблицу маркированные товары к детализации, которая указана в параметрах сканирования.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Детализация = ПараметрыСканирования.Детализация;
	
	Если Не ЗначениеЗаполнено(Детализация) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковок       = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары  = ВложенныеШтрихкоды.МаркированныеТовары;
	МассивУдаляемыхСтрок = Новый Массив;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	ОпределитьУдаляемыеСтрокиДереваПоДетализации(ДеревоУпаковок.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
	УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары);
	
	ВложенныеШтрихкоды.МаркированныеТовары = МаркированныеТовары;
	ВложенныеШтрихкоды.ДеревоУпаковок      = ДеревоУпаковок;
	
КонецПроцедуры

// Дополнение полученных данных штрихкодов данными, которые актуальны для табачной продукции.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификой(ДанныеПоШтрихкодам, ПараметрыСканирования) Экспорт
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(ДеревоУпаковок.Строки, МаркированныеТовары);
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	Иначе
		ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования);
	КонецЕсли;

КонецПроцедуры

// Выполняет проверки перед формированием данных по штрихкодам. 
// 
// Параметры:
//  СписокШтрихкодов - Массив - Проверяемые штрихкоды
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Соответствие - В случае удачного прохождения проверок - возвращает пустое соответствие,
//    В случае выявления ошибок или необходимого уточнения информации - возвращает заполненное соответствие с указанием причины.
Функция ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования) Экспорт
	
	РезультатОбработкиШтрихкода = Неопределено;
	
	ЕстьШтрихкодТабачнойПродукции = Ложь;
	Для Каждого Штрихкод Из СписокШтрихкодов Цикл
		
		Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(Штрихкод)
			Или ЭтоКодУпаковки(Штрихкод, Истина) Тогда
			
			ЕстьШтрихкодТабачнойПродукции = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьШтрихкодТабачнойПродукции И ТребуетсяАвторизацияПользователя(ПараметрыСканирования) Тогда
	
		РезультатОбработкиШтрихкода = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
		РезультатОбработкиШтрихкода.ВидыПродукции.Очистить();
		РезультатОбработкиШтрихкода.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		РезультатОбработкиШтрихкода.ТребуетсяАвторизацияМОТП = Истина;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

// Формирует структуру, описывающую результат обработки кода маркировки.
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода)
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования)
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы, во временное хранилище которой
//  надо поместить данные.
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкода.
// Возвращаемое значение:
//  Структура - содержит в себе информацию по результату обработки штрихкодов табачной продукции.
Функция РезультатОбработкиКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор, Форма = Неопределено) Экспорт
	
	РезультатОбработки = ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода);
	РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
	ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
	Если ДанныеШтрихкода.ТребуетсяВыборСерии Тогда
		РезультатОбработки.ТребуетсяУточнениеДанных = Истина;
	КонецЕсли;
	
	Если Не РезультатОбработки.ТребуетсяУточнениеДанных И Форма <> Неопределено Тогда
		
		РезультатОбработки = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	ИначеЕсли РезультатОбработки.ТребуетсяУточнениеДанных Тогда
		
		ПараметрыВыбораСерии = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыВыбораСерии.Номенклатура           = ДанныеШтрихкода.Номенклатура;
		ПараметрыВыбораСерии.Характеристика         = ДанныеШтрихкода.Характеристика;
		ПараметрыВыбораСерии.КодМаркировки          = ДанныеШтрихкода.Штрихкод;
		ПараметрыВыбораСерии.ПараметрыУказанияСерий = ИСМПТВыбытиеКодовМаркировкиСервер.ОбщегоНазначения_СкопироватьРекурсивно(ПараметрыСканирования.ПараметрыУказанияСерий);
		ПараметрыВыбораСерии.Склад                  = ПараметрыСканирования.Склад;
		ПараметрыВыбораСерии.ПараметрыСканирования  = ПараметрыСканирования;
		РезультатОбработки.ПараметрыУточненияДанных = ПараметрыВыбораСерии;
		
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

// Дополнение свойств коллекции Данные штрихкода свойствами специфичными для табачной продукции.
// 
// Параметры:
//  КоллекцияДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода) Экспорт

	ДанныеШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Ложь);
	ДанныеШтрихкода.Вставить("Контрагент",                Неопределено);
	ДанныеШтрихкода.Вставить("ИННВладельца"               "");
	ДанныеШтрихкода.Вставить("Статус",                    Неопределено);
	ДанныеШтрихкода.Вставить("ПредставлениеСтатуса"       "");
	ДанныеШтрихкода.Вставить("КоличествоПачек",           Неопределено);
	ДанныеШтрихкода.Вставить("КоличествоБлоков",          Неопределено);
	ДанныеШтрихкода.Вставить("МРЦ",                       0);
	ДанныеШтрихкода.Вставить("ПолученыДанныеИзМОТП",      Ложь);
	ДанныеШтрихкода.Вставить("ОбработатьБезМаркировки",   Ложь);
	ДанныеШтрихкода.Вставить("GTIN",                      "");
	
КонецПроцедуры

// Инициализирует структуру, которая описывает результат обработки штрихкодов. Состоит из базовых свойств
// (См.ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода), дополненных специфичными свойствами
// (См.ШтрихкодированиеМОТП.ДополнитьСвойстваРезультатаОбработкиШтрихкода).
//
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализироватьРезультатОбработкиШтрихкода(ДанныеШтрихкода = Неопределено) Экспорт

	РезультатОбработкиШтрихкода = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализироватьРезультатОбработкиШтрихкода();
	ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода);

	Возврат РезультатОбработкиШтрихкода;

КонецФункции

// Дополняет базовую коллекцию РезультатОбработкиШтрихкода специфичными данными табачной продукции.
//
// Параметры:
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Процедура ДополнитьСвойстваРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияМОТП",  Ложь);
	РезультатОбработкиШтрихкода.Вставить("ГрупповаяТоварнаяУпаковка", Неопределено);
	РезультатОбработкиШтрихкода.Вставить("ПараметрыВыбораСерии",      Новый Структура);

КонецПроцедуры

// Реализует обработку действий пользователя. Возвращает результат обработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  Действие - Строка - Идентификатор действия.
//  Параметры - (См. ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора).
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСМП.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ВыполнитьДействие(Форма, Действие, Параметры) Экспорт

	Если Действие = "ОбработатьВыборСерии" Тогда
		
		РезультатВыбора             = Параметры.РезультатВыбора;
		РезультатОбработкиШтрихкода = Параметры.РезультатОбработкиШтрихкода;
		КэшированныеЗначения        = Параметры.КэшированныеЗначения;
		РезультатВыбора = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИСМПСлужебный_ОбработатьВыборСерии(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
		
		Возврат РезультатВыбора;
		
	КонецЕсли;
	
КонецФункции

// Возвращает структуру "ВложенныеШтрихкоды" по коллекции кодов марок. Для марок табачных пачек так же формируется дерево
// упаковок. Неизвестные марки будут созданы в базе.
// 
// Параметры:
//  КодыМаркировок - Массив из Строка - список кодов марок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - (См. ШтрихкодированиеМОТП.ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу);
Функция ВложенныеШтрихкоды(КодыМаркировок, ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		Возврат ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировок, ПараметрыСканирования);
		
	Иначе
		
		Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
		
		Для Каждого КодМаркировки Из КодыМаркировок Цикл
			
			Если Не (ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки)
					Или ЭтоКодМаркировкиБлока(КодМаркировки)) Тогда
				
				Результат.ЕстьОшибки  = Истина;
				Результат.ТекстОшибки = ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП();
				
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
		ВложенныеШтрихкоды    = ИнициализацияВложенныхШтрихкодов();
		ОбработанныеШтрихкоды = ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(КодыМаркировок, ПараметрыСканирования);
		
		Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
			
			НоваяСтрокаДерева = ВложенныеШтрихкоды.ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, КлючЗначение.Значение);
			НоваяСтрокаДерева.Штрихкод = КлючЗначение.Значение.Штрихкод;
			
			НоваяСтрокаТаблицы = ВложенныеШтрихкоды.МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, КлючЗначение.Значение);
			НоваяСтрокаТаблицы.Штрихкод = КлючЗначение.Значение.Штрихкод;
			НоваяСтрокаТаблицы.СтрокаДерева = НоваяСтрокаДерева;
			
		КонецЦикла;
		Результат.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Выполняет запрос в МОТП, на основании которого формирует "ВложенныеШтрихкоды".
//
// Параметры:
//  КодыМаркировок - Массив - Коды маркировок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ТекстОшибки - Строка - Текст ошибки получения данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка при попытке получения данных из МОТП.
// * ВложенныеШтрихкоды - Неопределено, Структура - Включает в себя дерево упаковок и маркированные товары.
Функция ВложенныеШтрихкодыПоДаннымМОТП(КодыМаркировок, ПараметрыСканирования) Экспорт
	
	Результат = ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу();
	
	ВложенныеШтрихкоды = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
	
	Детализация = ПараметрыСканирования.Детализация;
	
	ПравилаДетализацииДереваУпаковок = ПравилаДетализацииДереваУпаковок();
	ПравилоДетализации = ПравилаДетализацииДереваУпаковок[Детализация];
	
	Если ЗначениеЗаполнено(ПравилоДетализации) И ПравилоДетализации.РазрешеныПачки Тогда
		Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	КонецЕсли;
	
	РезультатПолученияДерева = ИнтерфейсМОТП.ДеревоУпаковок(КодыМаркировок, Детализация, ПараметрыСканирования.ВариантПолученияМРЦ);
	Если РезультатПолученияДерева.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МОТП.
		                                   |По причине: Требуется обновление ключа сессии.';
		                                   |en = 'Не удалось получить данные из ИС МОТП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
	ИначеЕсли ЗначениеЗаполнено(РезультатПолученияДерева.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = РезультатПолученияДерева.ТекстОшибки;
	КонецЕсли;
	
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаEAN = РезультатПолученияДерева.GTIN;
	ТаблицаEAN.Свернуть("GTIN");
	ВложенныеШтрихкоды.ДеревоУпаковок = РезультатПолученияДерева.ДеревоУпаковок;
	
	ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования);
	
	Результат.ВложенныеШтрихкоды = ВложенныеШтрихкоды;
	
	Возврат Результат;
	
КонецФункции

Функция ТипШтрихкода(Штрихкод) Экспорт
	
	Если ЭтоКодМаркировкиТабачнойПачки(Штрихкод) Тогда
		Возврат Перечисления.ТипыШтрихкодов.DataMatrix;
	ИначеЕсли ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(Штрихкод) Тогда
		Возврат Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
	Иначе
		Возврат Перечисления.ТипыШтрихкодов.GS1_128;
	КонецЕсли;
	
КонецФункции

// Заполняет значение ШтрихкодыПродукцииДляСопоставления структуры ДанныхПоШтрихкодам штрихкодами EAN, которые не найдены
// в ИБ.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
Процедура ЗаполнитьШтрихкодыПродукцииДляСопоставления(ДанныеПоШтрихкодам) Экспорт
	
	МассивШтрихкодовEAN = Новый Массив;
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодам.ДанныеКодовМаркировок Цикл
		
		Если Не СтрокаДанных.МаркируемаяПродукция Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыПродукцииШтрихкода = ДанныеПоШтрихкодам.ЗначенияШтрихкодовПоВидуПродукции.Получить(СтрокаДанных.КодМаркировки);
		Если ВидыПродукцииШтрихкода = Перечисления.ВидыПродукцииИС.Табачная Тогда
			
			ШтрихкодEAN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(СтрокаДанных.КодМаркировки);
			Если ЗначениеЗаполнено(ШтрихкодEAN) Тогда
				МассивШтрихкодовEAN.Добавить(ШтрихкодEAN);
				СтрокаДанных.EAN = ШтрихкодEAN;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СуществующиеШтрихкодыВРегистре = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_СуществующиеВРегистреШтрихкодыEAN(МассивШтрихкодовEAN);
	ШтрикходыДляСопоставления = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивШтрихкодовEAN, СуществующиеШтрихкодыВРегистре);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления, ШтрикходыДляСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает текст ошибки о запрещении запрашивать данные по неизвестным кодам в МОТП.
// 
// Возвращаемое значение:
//  Строка - Текст ошибки.
Функция ТекстОшибкиЗапрещеноЗапрашиватьДанныеВМОТП()
	
	Возврат НСтр("ru = 'Запрещено запрашивать данные по неизвестным штрихкодам в МОТП.';
				|en = 'Запрещено запрашивать данные по неизвестным штрихкодам в МОТП.'");
	
КонецФункции

// Дополняет данные по штрихкодам спецификой, исключая информацию МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойБезЗапросаСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ДеревоУпаковок = Неопределено;
	
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ВложенныеШтрихкоды) Тогда
		
		ДеревоУпаковок      = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
		НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
		НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования);
		
		Для Каждого Строка Из МаркированныеТовары Цикл
			Строка.КоличествоПачек           = Строка.СтрокаДерева.КоличествоПачек;
			Строка.ГрупповаяТоварнаяУпаковка = Строка.СтрокаДерева.ГрупповаяТоварнаяУпаковка;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
		И ЗначениеЗаполнено(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды) Тогда
		
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			КодМаркировки        = КлючЗначение.Ключ;
			ДанныеКодаМаркировки = КлючЗначение.Значение;
			
			ДополнитьСвойстваДанныхШтрихкода(ДанныеКодаМаркировки);
			ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(КодМаркировки);
			
			Если ДеревоУпаковок <> Неопределено Тогда
				ДанныеСтроки = ДеревоУпаковок.Строки.Найти(КодМаркировки, "Штрихкод");
			Иначе
				ДанныеСтроки = Неопределено;
			КонецЕсли;
				
			Если ДанныеСтроки <> Неопределено Тогда
				ДанныеКодаМаркировки.КоличествоПачек  = ДанныеСтроки.КоличествоПачек;
				ДанныеКодаМаркировки.КоличествоБлоков = ДанныеСтроки.КоличествоБлоков;
			Иначе
				ДанныеКодаМаркировки.КоличествоПачек  = 1;
				ДанныеКодаМаркировки.КоличествоБлоков = 0;
			КонецЕсли;
			
			СоставКодаМаркировки = ШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
			Если СоставКодаМаркировки <> Неопределено Тогда
				ДанныеКодаМаркировки.GTIN = СоставКодаМаркировки.GTIN;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует обработанные штрихкоды по первым строкам дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - иерархия упаковок.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Данные кода маркировки.
Функция СформироватьОбработанныеШтрихкоды(ДеревоУпаковок)
	
	ДанныеМаркируемойПродукции = Новый Соответствие;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СтрокаДерева);
		ДанныеКодаМаркировки.МаркируемаяПродукция = Истина;
		ДанныеКодаМаркировки.Штрихкод             = СтрокаДерева.Штрихкод;
		ДанныеКодаМаркировки.ПолученыДанныеИзМОТП = Истина;
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		ДанныеМаркируемойПродукции.Вставить(СтрокаДерева.Штрихкод, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Возврат ДанныеМаркируемойПродукции;
	
КонецФункции

// Получение специфичных данных, используемых только для табачной продукции
// 
// Параметры:
//  ШтрихкодыДляПолученияСпецифики - Массив - Коды маркировок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
//   * СпецификаШтрихкодов - Неопределено, соответствие - Ключ - код маркировки, значение - данные, полученные из МОТП.
//   * ЕстьОшибки - Истина, если при попытке получения данных из МОТП возникла ошибка.
//   * ТекстОшибки - Описание ошибки.
Функция СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики, ПараметрыСканирования)
	
	Результат = Новый Структура;
	Результат.Вставить("СпецификаШтрихкодов",            Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	ДанныеПоШтрихкодамМОТП = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(ШтрихкодыДляПолученияСпецифики);
	
	Если ДанныеПоШтрихкодамМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.';
		                                   |en = 'Не удалось получить данные из ИС МП.
		                                   |По причине: Требуется обновление ключа сессии.'");
		Результат.ТребуетсяОбновлениеКлючаСессии = Истина;
		
		Возврат Результат;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПоШтрихкодамМОТП.ТекстОшибки) Тогда
		Результат.ЕстьОшибки  = Истина;
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить данные из ИС МОТП.
			           |По причине: %1';
			           |en = 'Не удалось получить данные из ИС МОТП.
			           |По причине: %1'"), ДанныеПоШтрихкодамМОТП.ТекстОшибки);
		
		Возврат Результат;
	КонецЕсли;
	
	СтатусыКодовМаркировки = ДанныеПоШтрихкодамМОТП.СтатусыКодовМаркировки;
	
	МассивИНН = Новый Массив;
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл
	
		Если ЗначениеЗаполнено(КлючЗначение.Значение.ИННВладельца) Тогда
			МассивИНН.Добавить(КлючЗначение.Значение.ИННВладельца);
		КонецЕсли;
	
	КонецЦикла;
	
	КонтрагентыПоИНН      = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИСМП_КонтрагентыПоСпискуИНН(МассивИНН);
	ПредставленияСтатусов = ПредставленияСтатусов();
	
	Для Каждого КлючЗначение Из СтатусыКодовМаркировки Цикл

		СпецификаКодаМаркировки = КлючЗначение.Значение;
		 
		Контрагент = КонтрагентыПоИНН.Получить(СпецификаКодаМаркировки.ИННВладельца);
		СпецификаКодаМаркировки.Вставить("Контрагент", Контрагент);
		
		ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СпецификаКодаМаркировки.Статус);
		СпецификаКодаМаркировки.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
		
	КонецЦикла;
	
	Результат.СпецификаШтрихкодов = СтатусыКодовМаркировки;
	
	Возврат Результат;
	
КонецФункции

// Удаляет строки дерева упаковок по массиву удаляемых строк. Удаление происходит путем копирования структуры дерева и
// его заполнения, исключая удаляемые строки.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  МассивУдаляемыхСтрок - Массив - Строки, дерева упаковок, которые нужно удалить.
//  МаркированныеТовары - ТаблицаЗначений - Таблица, которая включает только конечную маркируемая продукцию, исключая
//  упаковки. Исключение может составлять упаковка - табачный блок.
Процедура УдалитьСтрокиДереваУпаковокПоДетализации(ДеревоУпаковок, МассивУдаляемыхСтрок, МаркированныеТовары)
	
	Если МассивУдаляемыхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоУпаковокПриемник = Новый ДеревоЗначений;
	Для Каждого Колонка ИЗ ДеревоУпаковок.Колонки Цикл
		ДеревоУпаковокПриемник.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	МаркированныеТоварыПриемник = МаркированныеТовары.СкопироватьКолонки();
	СоответствиеСтрокИсточникаПриемника = Новый Соответствие;
	СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
		ДеревоУпаковокПриемник.Строки, ДеревоУпаковок.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, Неопределено);
	
	Для Каждого Строка Из МаркированныеТовары Цикл
		
		СсылкаНаСтрокуДерева = СоответствиеСтрокИсточникаПриемника.Получить(Строка.СтрокаДерева);
		Если СсылкаНаСтрокуДерева <> Неопределено Тогда
			НоваяСтрокаПриемник = МаркированныеТоварыПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, Строка);
			НоваяСтрокаПриемник.СтрокаДерева = СсылкаНаСтрокуДерева;
			НоваяСтрокаПриемник.УпаковкаВерхнегоУровня = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоУпаковок      = ДеревоУпаковокПриемник;
	МаркированныеТовары = МаркированныеТоварыПриемник;
	
КонецПроцедуры

// Производит копирование значений строк дерева источника в строки дерева приемника, исключая строки, входящие в
// массив удаляемых строк.
//
// Параметры:
//  СтрокиПриемника - КоллекцияСтрокДереваЗначений - Строки дерева значений приемника.
//  СтрокиИсточника - КоллекцияСтрокДереваЗначений - Строки дерева значений источника.
//  МассивУдаляемыхСтрок - Массив из СтрокаДереваЗначений - Строки дерева, которые должны быть удалены.
//  СоответствиеСтрокИсточникаПриемника - Соответствие - Строки дерева значений источника.
//  ВерхнийУровень - СтрокаДереваЗначений - Верхняя строка иерархии.
Процедура СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(СтрокиПриемника, СтрокиИсточника, МассивУдаляемыхСтрок,
														СоответствиеСтрокИсточникаПриемника, ВерхнийУровень)
	
	Для Каждого СтрокаИсточника Из СтрокиИсточника Цикл
		
		Если МассивУдаляемыхСтрок.Найти(СтрокаИсточника) = Неопределено Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
			СоответствиеСтрокИсточникаПриемника.Вставить(СтрокаИсточника, СтрокаПриемника);
			
			Если Не ЗначениеЗаполнено(ВерхнийУровень) Тогда
				ВерхнийУровень = СтрокаИсточника;
			КонецЕсли;
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокаПриемника.Строки, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		Иначе
			
			СкопироватьСтрокиДереваСУчетомИсключаемыхСтрок(
				СтрокиПриемника, СтрокаИсточника.Строки, МассивУдаляемыхСтрок, СоответствиеСтрокИсточникаПриемника, ВерхнийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет строки дерева, которые необходимо удалить с соответствие с детализацией.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПравилоДетализации - Структура - правило, в соответствие которому требуется удалить строки.
//  МассивУдаляемыхСтрок - Массив - Коллекция строк дерева, которые должны быть удалены.
Процедура ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокиДерева, ПравилоДетализации, МассивУдаляемыхСтрок)
	
	ТекущийУровень = Неопределено;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийУровень) Тогда
			
			Если ЭтоКодМаркировкиТабачнойПачки(СтрокаДерева.Штрихкод) Тогда
				ТекущийУровень = "Пачки";
			ИначеЕсли ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.Штрихкод) Тогда
				ТекущийУровень = "Блоки";
			Иначе
				ТекущийУровень = "Коробки";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийУровень = "Коробки" Тогда
			
			Если ПравилоДетализации.РазрешеныКоробки И Не ПравилоДетализации.РазрешеныБлоки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныКоробки Тогда 
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийУровень = "Блоки" Тогда
			Если ПравилоДетализации.РазрешеныБлоки И Не ПравилоДетализации.РазрешеныПачки Тогда
				СтрокаДерева.Строки.Очистить();
				Продолжить;
			ИначеЕсли Не ПравилоДетализации.РазрешеныБлоки Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
		ОпределитьУдаляемыеСтрокиДереваПоДетализации(СтрокаДерева.Строки, ПравилоДетализации, МассивУдаляемыхСтрок);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует правила детализации.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП, значение - свойство
//      правила. (См. ШтрихкодированиеМОТП.СвойствоПравилаДетализации).
Функция ПравилаДетализацииДереваУпаковок()
	
	ПравилаДетализации = Новый Соответствие;
	
	ДетализацияБлокиСПачками = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ДетализацияКоробки       = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки;
	ДетализацияКоробкиИБлоки = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ДетализацияПолная        = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
	ДетализацияПачки         = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	
	ПравилаДетализации.Вставить(ДетализацияПолная,        СвойствоПравилаДетализации(Истина, Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияКоробки,       СвойствоПравилаДетализации(Истина, Ложь,   Ложь));
	ПравилаДетализации.Вставить(ДетализацияКоробкиИБлоки, СвойствоПравилаДетализации(Истина, Истина, Ложь));
	ПравилаДетализации.Вставить(ДетализацияБлокиСПачками, СвойствоПравилаДетализации(Ложь,   Истина, Истина));
	ПравилаДетализации.Вставить(ДетализацияПачки,         СвойствоПравилаДетализации(Ложь,   Ложь,   Истина));
	
	Возврат ПравилаДетализации;
	
КонецФункции

// Формирует свойство правила детализации.
//
// Параметры:
//  РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
//  РазрешеныБлоки - Булево - Истина, в дереве разрешено показывать табачные блоки.
//  РазрешеныПачки - Булево - Истина, в дереве разрешено показывать пачки.
// Возвращаемое значение:
//  Структура - Описание:
// * РазрешеныКоробки - Булево - Истина, в дереве разрешено показывать упаковки.
// * РазрешеныБлоки - Истина, в дереве разрешено показывать табачные блоки.
// * РазрешеныПачки - Истина, в дереве разрешено показывать пачки.
Функция СвойствоПравилаДетализации(РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки)
	
	Возврат Новый Структура("РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки",
							РазрешеныКоробки, РазрешеныБлоки, РазрешеныПачки);
	
КонецФункции

// Выполняет дополнение дерева упаковок и маркированных товаров, информация по которым была получена из МОТП.
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - коллекция штрихкодов EAN, которые необходимо идентифицировать.
// * ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, присутствующие в дереве упаковок.
// * МаркированныеТовары - ТаблицаЗначений - Таблица с маркированной продукцией.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ТаблицаEAN - Неопределено, ТаблицаЗначений - Описание:
// * GTIN - Строка - штрихкод GTIN.
// * МРЦ - Число - максимальная розничная цена.
//  ПараметрыСканирования - ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ЗаполнитьВложенныеШтрихкодыПолученныеИзСервиса(ВложенныеШтрихкоды, ТаблицаEAN, ПараметрыСканирования)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	ДанныеПоEAN         = ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования);
	
	Если ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления <> Неопределено Тогда
		ВложенныеШтрихкоды.ШтрихкодыПродукцииДляСопоставления = ДанныеПоEAN.ШтрихкодыПродукцииДляСопоставления;
		Возврат;
	КонецЕсли;
	
	ИнформацияПоEAN  = ДанныеПоEAN.ИнформацияПоEAN;
	ДанныеЗаполнения = ИнициализиацияДанныхЗаполненияДереваУпаковок();
	ДанныеЗаполнения.ИнформацияПоEAN = ИнформацияПоEAN;

	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, Неопределено, ДанныеЗаполнения);
	СоздатьДеревоУпаковокПоПолученнымДаннымИзМОТП(ДеревоУпаковок, ПараметрыСканирования);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);

КонецПроцедуры

// Инициализирует структуру заполнения вложенных штрихкодов.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ПредставленияСтатусов - Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, Значение - Представление.
// * Контрагенты - Соответствие - Ключ - ИНН, Значение - Контрагент.
// * УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Верхний уровень иерархии.
// * ИнформацияПоEAN - Неопределено, Соответствие - Информация по штрихкоду EAN.
Функция ИнициализиацияДанныхЗаполненияДереваУпаковок()

	ДанныеЗаполнения = Новый Структура;

	ДанныеЗаполнения.Вставить("ИнформацияПоEAN");
	ДанныеЗаполнения.Вставить("УпаковкаВерхнегоУровня", Неопределено);
	ДанныеЗаполнения.Вставить("Контрагенты",            Новый Соответствие);
	ДанныеЗаполнения.Вставить("ПредставленияСтатусов",  ПредставленияСтатусов());

	Возврат ДанныеЗаполнения;

КонецФункции

// Формирует дерево упаковок на основании данных полученных из МОТП.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура СоздатьДеревоУпаковокПоПолученнымДаннымИзМОТП(ДеревоУпаковок, ПараметрыСканирования)
	
	Возврат;
	
КонецПроцедуры

// Заполняет во всех строках дерева упаковку верхнего уровня.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - верхний уровень дерева.
Процедура ЗаполнитьУпаковкуВерхнегоУровняДерева(ДеревоУпаковок, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьУпаковкуВерхнегоУровняДерева(СтрокаДерева, УпаковкаВерхнегоУровня);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует данные по массиву EAN. Данные формируются на основании информации БД. Если информация в БД отсутствует -
// выполняется попытка получения данных из МОТП.
//
// Параметры:
//  ТаблицаEAN - Неопределено, ТаблицаЗначений - Описание:
// * GTIN - Строка - штрихкод GTIN.
// * МРЦ - Число - максимальная розничная цена.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив - Штрихкоды, по которым не удалось собрать информацию.
// * ИнформацияПоEAN - Соответствие - Ключ - штрихкод EAN, значение - данные по нему.
Функция ДанныеПоEAN(ТаблицаEAN, ПараметрыСканирования)
	
	МассивEAN = ТаблицаEAN.ВыгрузитьКолонку("GTIN");
	ДанныеПоШтрихкодамEAN = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(МассивEAN);
	
	ИнформацияПоКоллекцииEAN = Новый Структура;
	ИнформацияПоEAN          = Новый Соответствие;
	ИнформацияПоКоллекцииEAN.Вставить("ИнформацияПоEAN", ИнформацияПоEAN);
	ИнформацияПоКоллекцииEAN.Вставить("ШтрихкодыПродукцииДляСопоставления");
	
	МассивИзвестныхEAN   = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");
	МассивНеизвестныхEAN = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивEAN, МассивИзвестныхEAN);
	
	Для Каждого Строка Из ДанныеПоШтрихкодамEAN Цикл
		
		ДанныеШтрихкода = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		ИнформацияПоEAN.Вставить(Строка.ШтрихкодEAN, ДанныеШтрихкода);
		
	КонецЦикла;
	
	Если МассивНеизвестныхEAN.Количество() = 0 Тогда
		Возврат ИнформацияПоКоллекцииEAN;
	КонецЕсли;
	
	Если ПараметрыСканирования.СопоставлятьНоменклатуру Тогда
		ИнформацияПоКоллекцииEAN.ШтрихкодыПродукцииДляСопоставления = МассивНеизвестныхEAN;
	Иначе
		ИнформацияНеизвестныхEANПоДаннымМОТП = ИнформацияНеизвестныхEANПоДаннымМОТП(МассивНеизвестныхEAN);
		
		Для Каждого КлючЗначение Из ИнформацияНеизвестныхEANПоДаннымМОТП Цикл
			
			ИнформацияПоШтрихкоду = Новый Структура("Номенклатура, ПредставлениеНоменклатуры");
			Если КлючЗначение.Значение = Неопределено Тогда
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = НСтр("ru = '<Не загружено>';
																		|en = '<Не загружено>'");
			Иначе
				ИнформацияПоШтрихкоду.ПредставлениеНоменклатуры = КлючЗначение.Значение.Наименование;
			КонецЕсли;
			
			ИнформацияПоEAN.Вставить(КлючЗначение.Ключ, ИнформацияПоШтрихкоду);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИнформацияПоКоллекцииEAN;
	
КонецФункции

// Формирует представление для перечисления СтатусыКодовМаркировкиМОТП.
//
// Параметры:
// Возвращаемое значение:
//  Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, значение - представление статуса.
Функция ПредставленияСтатусов()
	
	ПредставленияСтатусов = Новый Соответствие();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыКодовМаркировкиМОТП.Ссылка                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыКодовМаркировкиМОТП.Ссылка) КАК ПредставлениеСтатуса
	|ИЗ
	|	Перечисление.СтатусыКодовМаркировкиМОТП КАК СтатусыКодовМаркировкиМОТП");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставленияСтатусов.Вставить(Выборка.Статус, Выборка.ПредставлениеСтатуса);
	КонецЦикла;
	
	Возврат ПредставленияСтатусов;
	
КонецФункции

// Получает информацию по коллекции EAN из сервиса МОТП.
//
// Параметры:
//  ШтрихкодыEANДляСопоставления - Массив - Штрихкоды EAN.
// Возвращаемое значение:
//  (См. ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN).
Функция ИнформацияНеизвестныхEANПоДаннымМОТП(ШтрихкодыEANДляСопоставления)
	
	ИнформацияНеизвестныхEAN = Новый Соответствие;
	Если ШтрихкодыEANДляСопоставления.Количество() = 0 Тогда
		Возврат ИнформацияНеизвестныхEAN;
	КонецЕсли;
	
	ДанныеМОТП = ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN(ШтрихкодыEANДляСопоставления);
	
	Если ДанныеМОТП.ТребуетсяОбновлениеКлючаСессии Тогда
		ВызватьИсключение НСтр("ru = 'Требуется обновление ключа сессии.';
								|en = 'Требуется обновление ключа сессии.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеМОТП.ТекстОшибки) Тогда
		ВызватьИсключение ДанныеМОТП.ТекстОшибки;
	КонецЕсли;
	
	Возврат ДанныеМОТП.ДанныеПродукцииПоШтрихкодуEAN;
	
КонецФункции

//Проверяет необходимость авторизации пользователя на сервере МОТП.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если пользователю требуется пройти авторизацию.
Функция ТребуетсяАвторизацияПользователя(ПараметрыСканирования)
	
	ТребуетсяАвторизация = Ложь;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП
		Или ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхУпаковокМОТП Тогда
		
		Организация = ПараметрыСканирования.Организация;
		Если ИСМПТВыбытиеКодовМаркировкиВызовСервера.ИнтерфейсАвторизацииИСМПВызовСервера_ТребуетсяОбновлениеКлючаСессии(
			ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация)) Тогда
			ТребуетсяАвторизация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТребуетсяАвторизация;
	
КонецФункции

Функция СписокШтрихкодовТолькоПачки(Штрихкоды)
	
	СписокШтрихкодов = Новый Массив;
	
	Для Каждого КодМаркировки Из Штрихкоды Цикл
		
		Если ЭтоКодМаркировкиТабачнойПачки(КодМаркировки) Тогда
			СписокШтрихкодов.Добавить(КодМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокШтрихкодов;
	
КонецФункции

#Область ПроверкаНаОшибки

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив из Структура:
//     * КоллекцияСтрокСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОПТ - Коллекция строк, где были выявлены
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиПоПравилам(ДанныеПоШтрихкодам, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
		
		ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		
		ПроверитьНаОшибкиСтрокиДерева(ДеревоУпаковок.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = ЕстьОшибки;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1';
															|en = 'Статус: %1'"), СтрокаДерева.ПредставлениеСтатуса);
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков")
			И ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = НСтр("ru = 'Пустая упаковка';
												|en = 'Пустая упаковка'");
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда 
			
			Для Каждого СтрокаДерева Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если СтрокаДерева.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДерева.ТекстОшибки = СтрШаблон(НСтр("ru = 'ИНН владельца: %1';
															|en = 'ИНН владельца: %1'"), СтрокаДерева.ИННВладельца);
				СтрокаДерева.ЕстьОшибки  = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСоставаУпаковокМОТП") Тогда
			
			ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ВыявитьРасхожденияВСоставахДеревьев(
				ДеревоУпаковок, ДанныеПоШтрихкодам.ДеревоПоДаннымСервиса, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПроверитьНаОшибкиОбработанныеШтрихкоды(ДанныеПоШтрихкодам.ОбработанныеШтрихкоды, ПравилаПроверкиНаОшибки, 
			ПараметрыСканирования, ЕстьОшибки);
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов")
			И ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Количество() > 0 Тогда
			
			Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками Цикл
				КлючЗначение.Значение.ТекстОшибки = СтрШаблон(НСтр("ru = 'Статус: %1';
																	|en = 'Статус: %1'"), КлючЗначение.Значение.ПредставлениеСтатуса);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца")
			И ПравилаПроверкиНаОшибки.КонтрольВладельца.Количество() > 0 Тогда
			
			Для Каждого КлючЗначение Из ПравилаПроверкиНаОшибки.КонтрольВладельца Цикл
				
				Если ЗначениеЗаполнено(КлючЗначение.Значение.Контрагент) Тогда
					Владелец = "(" + КлючЗначение.Значение.Контрагент + ")";
				Иначе
					Владелец = "";
				КонецЕсли;
				
				КлючЗначение.Значение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'ИНН владельца: %1 %2';
						|en = 'ИНН владельца: %1 %2'"),
					КлючЗначение.Значение.ИННВладельца, Владелец);
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПроконтролироватьЗаполнениеСерийСУчетомСохраненногоВыбора(
			ПравилаПроверкиНаОшибки, ПараметрыСканирования);
		
	КонецЕсли;
	
	Если Не ЕстьОшибки И ПравилаПроверкиНаОшибки.Свойство("КонтрольОстатков") И ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
		
		ПроконтролироватьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует таблицу значений для контроля остатков табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Табачная марка.
// * Доступно - Число - Остаток маркируемой продукции.
// * БылиПродажи - Булево - Истина, если марка уже была хотя бы раз ранее продана.
// * БылиВозвраты - Булево - Истина, если марка уже была хотя бы раз ранее возвращена.
Функция ИнициализацияТаблицыПроверкиОстатков()

	КвалификаторыЧисла  = Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой);

	ОстаткиМаркируемойПродукции = Новый ТаблицаЗначений;
	ОстаткиМаркируемойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ОстаткиМаркируемойПродукции.Колонки.Добавить("Доступно",         Новый ОписаниеТипов("Число", КвалификаторыЧисла));

	Возврат ОстаткиМаркируемойПродукции;

КонецФункции

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  ЕстьОшибки - Истина, если выявлена хоть одна ошибка.
Процедура ПроконтролироватьДоступныеОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки)

	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Продажа"
		И ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок <> "Возврат" Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиМаркируемойПродукции = ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	ТекстОшибки = НСтр("ru = 'Отсутствует';
						|en = 'Отсутствует'");
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(КлючЗначение.Значение.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			Если Не ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, НайденнаяСтрока.Доступно) Тогда
				
				КлючЗначение.Значение.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаМарки Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			
			НайденнаяСтрока = ОстаткиМаркируемойПродукции.Найти(СтрокаМарки.ШтрихкодУпаковки, "ШтрихкодУпаковки");
			
			Если Не ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, НайденнаяСтрока.Доступно) Тогда
				
				СтрокаМарки.СтрокаДерева.ЕстьОшибки  = Истина;
				СтрокаМарки.СтрокаДерева.ТекстОшибки = ТекстОшибки;
				ЕстьОшибки = Истина;
				ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет инициализацию и заполнение таблицы остатков, необходимых для контроля.
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// Возвращаемое значение:
//  ТаблицаЗначений - (См. ШтрихкодированиеМОТП.ИнициализацияТаблицыПроверкиОстатков)
Функция ОпределитьОстаткиМаркируемойПродукции(ДанныеПоШтрихкодам, ПараметрыСканирования)
	
	ОстаткиМаркируемойПродукции = ИнициализацияТаблицыПроверкиОстатков();
	
	ОстаткиПоУмолчанию = Новый Структура("Продажа, Возврат", 1, -1);
	
	Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды = Неопределено Тогда
		
		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = КлючЗначение.Значение.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары Цикл
			СтрокаОстатки = ОстаткиМаркируемойПродукции.Добавить();
			СтрокаОстатки.ШтрихкодУпаковки = СтрокаТовары.ШтрихкодУпаковки;
			СтрокаОстатки.Доступно = ОстаткиПоУмолчанию[ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок];
		КонецЦикла;
		
	КонецЕсли;
	
	ШтрихкодированиеМОТППереопределяемый.ПриОпределенииОстатковМаркируемойПродукции(
		ОстаткиМаркируемойПродукции, ПараметрыСканирования);
	
	ОстаткиМаркируемойПродукции.Индексы.Добавить("ШтрихкодУпаковки");
	
	Возврат ОстаткиМаркируемойПродукции;
	
КонецФункции

Функция ВыполненоУсловиеКонтроляОстатков(ПараметрыСканирования, Доступно)

	УсловиеВыполнено = Ложь;

	Если ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа" Тогда
		УсловиеВыполнено = Доступно >= 1;
	ИначеЕсли ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Возврат" Тогда
		УсловиеВыполнено = Доступно <= 0;
	КонецЕсли;

	Возврат УсловиеВыполнено;

КонецФункции

// Определяет необходимость указания серии для маркируемой продукции.
// 
// Параметры:
//  ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется указать серию.
Функция ТребуетсяВыборСерии(ДанныеШтрихкода, ПараметрыСканирования)
	
	ТребуетсяВыбор = Ложь;
	
	Если (ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		Или ДанныеШтрихкода.ГрупповаяТоварнаяУпаковка) И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
			
		ПараметрыУказанияСерий = ПараметрыСканирования.ПараметрыУказанияСерий;
		Склад                  = ПараметрыСканирования.Склад;
		Номенклатура           = ДанныеШтрихкода.Номенклатура;
		Характеристика         = ДанныеШтрихкода.Характеристика;
		ДанныеДляРасчетаСерии  = Новый Структура("Склад, Номенклатура, Характеристика", Склад, Номенклатура, Характеристика);
		ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИСПереопределяемый_ПриОпределинииНеобходимостиВыбораСерии(
			ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор);
		
	КонецЕсли;
	
	Возврат ТребуетсяВыбор;
	
КонецФункции

// Выполняет проверку на ошибки по заданным правилам.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПравилаПроверкиНаОшибки - Структура - Описание:
//   * КонтрольСерий - Массив - Коллекция строк, где были выявлены ошибки по контролю серий.
//   * КонтрольСтатусов - Массив из Структура:
//     * КоллекцияСтрокСОшибками - Массив - Коллекция строк, где были выявлены ошибки по контролю статусов.
//     * ДоступныеСтатусы - Массив из ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Коллекция строк, где были выявлены
//                          ошибки по контролю статусов.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если найдена ошибка.
Процедура ПроверитьНаОшибкиОбработанныеШтрихкоды(ОбработанныеШтрихкоды, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			
			СведенияОбОрганизации= Новый Структура();
			СведенияОбОрганизации.Вставить("ИНН", "");
		
			ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИСПереопределяемый_ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
			ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
			
			Если ЗначениеЗаполнено(КлючЗначение.Значение.ИННВладельца)
				И КлючЗначение.Значение.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(КлючЗначение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			Если ДопустимыеСтатусыМОТП.Найти(КлючЗначение.Значение.Статус) = Неопределено Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(КлючЗначение);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСерий") Тогда

			Если ТребуетсяВыборСерии(КлючЗначение.Значение, ПараметрыСканирования) Тогда
				
				ПравилаПроверкиНаОшибки.КонтрольСерий.Добавить(КлючЗначение);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку строк дерева на ошибки.
//
// Параметры:
//  СтрокиДерева - СтрокиДереваЗначений - Строки дерева упаковок.
//  ПравилаПроверкиНаОшибки - Структура - правила, по которым выполняется проверка.
// * КонтрольПустыхБлоков - Массив из СтрокаДереваЗначений - Коллекция строк дерева с ошибками.
// * КонтрольСерий - для дерева заполнение серий не контролируется.
// * КонтрольВладельца - Массив - Коллекция строк дерева, в которых ИНН владельца не соответствует ожидаемому.
// * КонтрольСтатусов - Массив - Коллекция строк дерева, в которых статус не соответствует ожидаемому.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если при проверке выявлены ошибки.
Процедура ПроверитьНаОшибкиСтрокиДерева(СтрокиДерева, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки)
	
	Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
		
		СведенияОбОрганизации= Новый Структура();
		СведенияОбОрганизации.Вставить("ИНН", "");
		
		ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИСПереопределяемый_ЗаполнитьСведенияОбОрганизации(ПараметрыСканирования.Владелец, СведенияОбОрганизации);
		ОжидаемыйИННВладельца = СведенияОбОрганизации.ИНН;
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольПустыхБлоков") Тогда
			
			Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(СтрокаДерева.ТипУпаковки) И СтрокаДерева.Строки.Количество() = 0 Тогда
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольПустыхБлоков.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольСтатусов") Тогда
			ДопустимыеСтатусыМОТП = ПравилаПроверкиНаОшибки.КонтрольСтатусов.ДопустимыеСтатусыМОТП;
			Если ДопустимыеСтатусыМОТП.Найти(СтрокаДерева.Статус) = Неопределено
				Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И ДопустимыеСтатусыМОТП.Найти(Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен) <> Неопределено
				И СтрокаДерева.Статус = Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольСтатусов.КоллекцияСтрокСОшибками.Добавить(СтрокаДерева);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПравилаПроверкиНаОшибки.Свойство("КонтрольВладельца") Тогда
			Если СтрокаДерева.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен
				И СтрокаДерева.ИННВладельца <> ОжидаемыйИННВладельца Тогда
				
				ЕстьОшибки = Истина;
				ПравилаПроверкиНаОшибки.КонтрольВладельца.Добавить(СтрокаДерева);
				
			КонецЕсли;
		КонецЕсли;
		
		ПроверитьНаОшибкиСтрокиДерева(СтрокаДерева.Строки, ПравилаПроверкиНаОшибки, ПараметрыСканирования, ЕстьОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеДанныхШтрихкодовСпецификой

// Дополняет свойства таблицы значений - "МаркированныеТовары" или дерево значение - "ДеревоУпаковок" колонками,
// специфичными для табачной продукции.
//
// Параметры:
//  Коллекция - ТаблицаЗначений, ДеревоЗначений - "МаркированныеТовары" или "ДеревоУпаковок".
Процедура НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(Коллекция)
	
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		
		КоллекцияОбязательныхКолонок = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_КолонкиДереваУпаковок();
		КоллекцияОбязательныхКолонок.Вставить("КоличествоБлоков", Новый ОписаниеТипов("Число"));
		КоллекцияОбязательныхКолонок.Вставить("МРЦ",              Новый ОписаниеТипов("Число"));
		
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда 
		
		КоллекцияОбязательныхКолонок = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_КолонкиТаблицыМаркированныеТовары();
		
	КонецЕсли;
	
	КоллекцияОбязательныхКолонок.Вставить("ИННВладельца",              Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Контрагент",                Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ГрупповаяТоварнаяУпаковка", Новый ОписаниеТипов("Булево"));
	КоллекцияОбязательныхКолонок.Вставить("GTIN",                      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("Статус",                    Неопределено);
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеСтатуса",      Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка"));
	КоллекцияОбязательныхКолонок.Вставить("КоличествоПачек",           Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючЗначение Из КоллекцияОбязательныхКолонок Цикл
		
		Если Коллекция.Колонки.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			Коллекция.Колонки.Добавить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет базовую коллекцию обработанные штрихкоды данными, специфичными для табачной продукции.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  СпецификаШтрихкодов - Неопределено, Соответствие - Ключ - Код маркировки, значение - данные специфики.
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
Процедура ДополнитьСпецификойОбработанныеШтрихкоды(ДанныеПоШтрихкодам, СпецификаШтрихкодов, ДеревоУпаковок)
	
	Если Не ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды") Или СпецификаШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеШтрихкоды = ДанныеПоШтрихкодам.ОбработанныеШтрихкоды;
	
	Для Каждого КлючЗначение Из ОбработанныеШтрихкоды Цикл
		
		КодМаркировки        = КлючЗначение.Ключ;
		ДанныеКодаМаркировки = КлючЗначение.Значение;
		ДополнитьСвойстваДанныхШтрихкода(ДанныеКодаМаркировки);
		
		Если ДанныеКодаМаркировки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ДанныеКодаМаркировки.КоличествоПачек           = 1;
			ДанныеКодаМаркировки.КоличествоБлоков          = 0;
			ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = Ложь;
		КонецЕсли;
		
		Если ДеревоУпаковок <> Неопределено Тогда
			НайденнаяСтрока = ДеревоУпаковок.Строки.Найти(КодМаркировки, "Штрихкод");
			Если НайденнаяСтрока <> Неопределено Тогда
				ДанныеКодаМаркировки.КоличествоПачек           = НайденнаяСтрока.КоличествоПачек;
				ДанныеКодаМаркировки.КоличествоБлоков          = НайденнаяСтрока.КоличествоБлоков;
				ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = НайденнаяСтрока.ГрупповаяТоварнаяУпаковка;
			КонецЕсли;
		КонецЕсли;
		
		СпецификаШтрихкода = СпецификаШтрихкодов.Получить(КодМаркировки);
		Если СпецификаШтрихкода <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеКодаМаркировки, СпецификаШтрихкода);
			ДанныеКодаМаркировки.Контрагент = СпецификаШтрихкода.Контрагент;
		КонецЕсли;
		
		СоставКодаМаркировки = ШтрихкодированиеМОТПКлиентСервер.СоставКодаМаркировки(КодМаркировки);
		Если СоставКодаМаркировки <> Неопределено Тогда
			ДанныеКодаМаркировки.GTIN = СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область НормализацияДанныхВложенныхШтрихкодов

// Дополняет входящие в состав "Вложенных штрихкодов" коллекции - "Дерево упаковок" и "Маркированные товары" свойствами
// специфичными для табачной продукции и заполняет на основании данных - "Специфика штрихкодов".
//
// Параметры:
//  ВложенныеШтрихкоды - Структура - Включает в себя таблицу значений "Маркированные товары" и "Дерево упаковок".
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено)
	
	ДеревоУпаковок      = ВложенныеШтрихкоды.ДеревоУпаковок;
	МаркированныеТовары = ВложенныеШтрихкоды.МаркированныеТовары;
	НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов);
	НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары);
	
КонецПроцедуры

// Дополняет таблицу значений "Маркированные товары" свойствами специфичными для табачной продукции и заполняет
// на основании данных - "Дерева упаковок".
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
Процедура НормализоватьДанныеТаблицыМаркированныеТовары(ДеревоУпаковок, МаркированныеТовары)
	
	МаркированныеТовары.Очистить();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(МаркированныеТовары);
	ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(ДеревоУпаковок.Строки, МаркированныеТовары);
	
КонецПроцедуры

// Заполняет таблицу "Маркированные товары" на основании данных дерева упаковок. При заполнении исключаются упаковки.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  МаркированныеТовары - ТаблицаЗначений - Таблица с маркируемой продукцией.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
Процедура ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)
	
	МаркированныйТовар = Перечисления.ТипыУпаковок.МаркированныйТовар;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева;
		КонецЕсли;
		
		Если СтрокаДерева.ГрупповаяТоварнаяУпаковка Или СтрокаДерева.ТипУпаковки = МаркированныйТовар Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева           = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТаблицуМаркированныеТоварыПоСтрокамДереваУпаковок(СтрокаДерева.Строки, МаркированныеТовары);
		
	КонецЦикла;
	
КонецПроцедуры

#Область НормализацияДанныхДереваУпаковок

// Дополняет дерево упаковок колонками, специфичными для табачной продукции. Заполняет значения специфичных колонок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением в справочнике ШтрихкодыУпаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  СпецификаШтрихкодов - Неопределено, Соответствие - Ключ - код маркировки, значение - данные специфики.
//  ДанныеЗаполнения - Неопределено, Структура - Описание:
// * ПредставленияСтатусов - Соответствие - Ключ - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП, значение - представление.
// * Контрагенты - Соответствие - Ключ - ИНН, значение - контрагент.
// * УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Строка дерева верхнего уровня.
// * ИнформацияПоEAN - Неопределено, соответствие - Информация по штрихкоду EAN.
Процедура НормализоватьДанныеДереваУпаковок(ДеревоУпаковок, ПараметрыСканирования, СпецификаШтрихкодов = Неопределено, ДанныеЗаполнения = Неопределено)
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	КэшНоменклатуры = Новый Соответствие;
	ЗаполнитьСтрокиДерева(ДеревоУпаковок.Строки, ПараметрыСканирования, СпецификаШтрихкодов, ДанныеЗаполнения, КэшНоменклатуры);
	
КонецПроцедуры

// Заполняет строки дерева упаковок данными специфичными для табачной продукции.
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
//  СпецификаШтрихкодов - Неопределено, Соответствие - Данные, специфичные для табачной продукции.
//  ДанныеЗаполнения - (См. ШтрихкодированиеМОТП.ИнициализиацияДанныхЗаполненияДереваУпаковок).
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка иерархии дерева упаковок.
Процедура ЗаполнитьСтрокиДерева(СтрокиДерева, ПараметрыСканирования, СпецификаШтрихкодов, ДанныеЗаполнения,
	КэшНоменклатуры, УпаковкаВерхнегоУровня = Неопределено, ЭтоПервыйУровень = Истина)
	
	ПервыйОбходСтрокУровня = Истина;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.ВидПродукции)
			И СтрокаДерева.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табачная Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПервыйУровень Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;
		
		СтрокаДерева.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		ЗаполнитьСтрокиДерева(
			СтрокаДерева.Строки, ПараметрыСканирования, СпецификаШтрихкодов,
			ДанныеЗаполнения, КэшНоменклатуры, УпаковкаВерхнегоУровня, Ложь);
		
		РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева);
		ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения);
		ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня);
		ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
		ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры);
		ЗаполнитьGTINСтрокиДерева(СтрокаДерева);
		
		ПервыйОбходСтрокУровня = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значение GTIN в строке дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура ЗаполнитьGTINСтрокиДерева(СтрокаДерева)
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		СтрокаДерева.GTIN = ШтрихкодированиеМОТПКлиентСервер.EANПоКодуМаркировки(СтрокаДерева.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет вычисление МРЦ по коду маркировки, в случае неудачи - запрашивает МРЦ в ИС МОТП.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ЗаполнитьМРЦСтрокиДерева(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры)
	
	Если ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		МРЦПачки = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиТабачнойПачки(СтрокаДерева.Штрихкод);
		
		Если МРЦПачки = Неопределено Тогда
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				
				Если СтрокаДерева.Родитель.МРЦ <> 0 Тогда
					
					СтрокаДерева.МРЦ = СтрокаДерева.Родитель.МРЦ;
					
				Иначе
					
					МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДерева.Родитель.Штрихкод);
					
					Если МРЦБлока <> Неопределено Тогда
						
						СтрокаДерева.Родитель.МРЦ = МРЦБлока;
						СтрокаДерева.МРЦ          = МРЦБлока;
						
					Иначе
						
						МРЦПоДаннымМОТП = МРЦПоДаннымМОТП(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры); 
						
						СтрокаДерева.Родитель.МРЦ = МРЦПоДаннымМОТП;
						СтрокаДерева.МРЦ          = МРЦПоДаннымМОТП;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				СтрокаДерева.МРЦ = МРЦПоДаннымМОТП(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры);
				
			КонецЕсли;
		
		Иначе
			
			СтрокаДерева.МРЦ = МРЦПачки;
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				
				МРЦБлока = ШтрихкодированиеМОТПКлиентСервер.МРЦКодаМаркировкиБлока(СтрокаДерева.Родитель.Штрихкод);
				
				Если МРЦБлока = Неопределено Тогда
					
					СтрокаДерева.Родитель.МРЦ = МРЦПачки;
					
				Иначе
					
					СтрокаДерева.Родитель.МРЦ = МРЦБлока;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПервыйОбход = Истина;
		Для Каждого СтрокаПотомок Из СтрокаДерева.Строки Цикл
			
			Если ПервыйОбход Тогда
				СтрокаДерева.МРЦ = СтрокаПотомок.МРЦ;
				ПервыйОбход = Ложь;
			Иначе
				
				Если СтрокаДерева.МРЦ <> СтрокаПотомок.МРЦ Тогда
					СтрокаДерева.МРЦ = 0;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает МРЦ из сервиса МОТП.
//
// Параметры:
//  КодМаркировки - Строка - Значение штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  Число - МРЦ.
Функция МРЦПоДаннымМОТП(СтрокаДерева, ПараметрыСканирования, КэшНоменклатуры)
	
	КодМаркировки     = СтрокаДерева.Штрихкод;
	МРЦКодаМаркировки = 0;
	
	Если ПараметрыСканирования.ВариантПолученияМРЦ = "Вычисление" Тогда
		Возврат МРЦКодаМаркировки;
	КонецЕсли;
	
	ТребуетсяЗапрос = Ложь;
	Если ПараметрыСканирования.ВариантПолученияМРЦ = "ВычислениеИЗапросСПроверкойНеобходимости"
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		
		ТребуетсяЗапрос = КэшНоменклатуры.Получить(СтрокаДерева.Номенклатура);
		Если ТребуетсяЗапрос = Неопределено Тогда
			ШтрихкодированиеМОТППереопределяемый.ПриОпределенииНеобходимостиЗапросаМРЦ(СтрокаДерева.Номенклатура, ТребуетсяЗапрос);
			КэшНоменклатуры.Вставить(СтрокаДерева.Номенклатура, ТребуетсяЗапрос);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСканирования.ВариантПолученияМРЦ = "ВычислениеИЗапрос" Или ТребуетсяЗапрос Тогда
	
		Результат = ИнтерфейсМОТП.ЗапроситьМРЦДляКодаМаркировки(КодМаркировки);
		Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
			МРЦКодаМаркировки = Результат.ДанныеПродукции.МРЦ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МРЦКодаМаркировки;
	
КонецФункции

// Заполняет строку дерева на основании данных дополнения.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ДанныеЗаполнения - (См. ШтрихкодированиеМОТП.ИнициализиацияДанныхЗаполненияДереваУпаковок).
Процедура ЗаполнитьСтрокуДереваПоДаннымЗаполнения(СтрокаДерева, ДанныеЗаполнения)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияПоКоллекцииEAN  = ДанныеЗаполнения.ИнформацияПоEAN;
	Контрагенты               = ДанныеЗаполнения.Контрагенты;
	ПредставленияСтатусов     = ДанныеЗаполнения.ПредставленияСтатусов;
	
	Если ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
		
		ИнформацияПоEAN = ИнформацияПоКоллекцииEAN[СтрокаДерева.GTIN];
		Если ИнформацияПоEAN <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, ИнформацияПоEAN);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.ПредставлениеСтатуса = ПредставленияСтатусов.Получить(СтрокаДерева.Статус);
	
	Контрагент = Контрагенты.Получить(СтрокаДерева.ИННВладельца);
	Если Контрагент = Неопределено Тогда
		Контрагент = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИСМП_КонтрагентПоИНН(СтрокаДерева.ИННВладельца);
		ДанныеЗаполнения.Контрагенты.Вставить(СтрокаДерева.ИННВладельца, Контрагент);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет спецификой все строки дерева.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  СпецификаШтрихкодов - Соответствие, Неопределено - Ключ - код маркировки, Значение - специфика.
Процедура ЗаполнитьСпецификуСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов)
	
	Если СпецификаШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификаШтрихкода = СпецификаШтрихкодов.Получить(СтрокаДерева.Штрихкод);
	
	Если СпецификаШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.ИННВладельца         = СпецификаШтрихкода.ИННВладельца;
	СтрокаДерева.Контрагент           = СпецификаШтрихкода.Контрагент;
	СтрокаДерева.Статус               = СпецификаШтрихкода.Статус;
	СтрокаДерева.ПредставлениеСтатуса = Строка(СпецификаШтрихкода.Статус);
	
	ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
	ЗаполнитьСпецификойПотомковСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов);
	
КонецПроцедуры

// Заполняет спецификой подчиненных строк дерева упаковок.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура ЗаполнитьСпецификойПотомковСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов)
	
	Если СтрокаДерева.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПотомок Из СтрокаДерева.Строки Цикл
		
		СпецификаШтрихкода = СпецификаШтрихкодов.Получить(СтрокаПотомок.Штрихкод);
		Если СпецификаШтрихкода <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаПотомок.Контрагент = СтрокаДерева.Контрагент
			И СтрокаДерева.Статус = СтрокаДерева.Статус Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПотомок.ИННВладельца         = СтрокаДерева.ИННВладельца;
		СтрокаПотомок.Контрагент           = СтрокаДерева.Контрагент;
		СтрокаПотомок.Статус               = СтрокаДерева.Статус;
		СтрокаПотомок.ПредставлениеСтатуса = СтрокаДерева.ПредставлениеСтатуса;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет спецификой строки-родителя строки дерева упаковок.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева, СпецификаШтрихкодов)
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпецификаШтрихкода = СпецификаШтрихкодов.Получить(СтрокаДерева.Родитель.Штрихкод);
	Если СпецификаШтрихкода <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель.Контрагент = СтрокаДерева.Контрагент
		И СтрокаДерева.Родитель.Статус    = СтрокаДерева.Статус Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева.Родитель.ИННВладельца         = СтрокаДерева.ИННВладельца;
	СтрокаДерева.Родитель.Контрагент           = СтрокаДерева.Контрагент;
	СтрокаДерева.Родитель.Статус               = СтрокаДерева.Статус;
	СтрокаДерева.Родитель.ПредставлениеСтатуса = СтрокаДерева.ПредставлениеСтатуса;
	
	ЗаполнитьСпецификойРодителяСтрокиДерева(СтрокаДерева.Родитель, СпецификаШтрихкодов);
	
КонецПроцедуры

// Выполняет расчет количественных показателей строки дерева, таких как: КоличествоПачек, КоличествоБлоков.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
Процедура РассчитатьКоличественныеПоказателиСтрокиДерева(СтрокаДерева)
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		СтрокаДерева.КоличествоПачек = 1;
	КонецЕсли;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСКлиентСервер_ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.Штрихкод) = Истина Тогда
		СтрокаДерева.ГрупповаяТоварнаяУпаковка = Истина;
		СтрокаДерева.КоличествоБлоков = 1;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		СтрокаДерева.Родитель.КоличествоПачек = СтрокаДерева.Родитель.КоличествоПачек
			+ СтрокаДерева.КоличествоПачек;
		
		СтрокаДерева.Родитель.КоличествоБлоков = СтрокаДерева.Родитель.КоличествоБлоков
			+ СтрокаДерева.КоличествоБлоков;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену значений строки дерева со значениями Неопределено на пустые ссылки.
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Описание
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	ПустаяНоменклатура   = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	ПустаяСерия          = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = ПустаяНоменклатура;
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = ПустаяХарактеристика;
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = ПустаяСерия;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет характеристики упаковки строки дерева, такие как: "ЭтоЛогистическаяУпаковка", "ТипШтрихкода".
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева упаковок.
//  ПервыйОбходСтрокУровня - Булево - Истина, если выполняет первый обход строк дерева.
Процедура ЗаполнитьХарактеристикиУпаковкиСтрокиДерева(СтрокаДерева, ПервыйОбходСтрокУровня)
	
	СтрокаДерева.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_128;
	СтрокаДерева.ВидПродукции              = Перечисления.ВидыПродукцииИС.Табачная;
	СтрокаДерева.ГрупповаяТоварнаяУпаковка = Ложь;
	
	ЭтоЛогистическаяУпаковка = Истина;
	
	Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ЭтоКодМаркировкиТабачнойПачки(СтрокаДерева.Штрихкод) Тогда
		
		СтрокаДерева.ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;
		СтрокаДерева.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
		ЭтоЛогистическаяУпаковка  = Ложь;
		ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева);
		
	ИначеЕсли ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.Штрихкод) Тогда
		
		СтрокаДерева.ГрупповаяТоварнаяУпаковка = Истина;
		СтрокаДерева.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		ЭтоЛогистическаяУпаковка               = Ложь;
		
	КонецЕсли;
	
	Родитель = СтрокаДерева.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель.ТипУпаковки) Тогда
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	Если ПервыйОбходСтрокУровня И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.GTIN           = СтрокаДерева.GTIN;
		Родитель.Номенклатура   = СтрокаДерева.Номенклатура;
		Родитель.Характеристика = СтрокаДерева.Характеристика;
		Родитель.Серия          = СтрокаДерева.Серия;
		
		Возврат;
		
	КонецЕсли;
	
	Если Родитель.GTIN <> СтрокаДерева.GTIN
		И Родитель.Номенклатура <> СтрокаДерева.Номенклатура
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Номенклатура = Неопределено;
		Родитель.GTIN         = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Характеристика <> СтрокаДерева.Характеристика
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Характеристика = Неопределено;
		Родитель.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
		
	КонецЕсли;
	
	Если Родитель.Серия <> СтрокаДерева.Серия
		И ЭтоЛогистическаяУпаковка Тогда
		
		Родитель.Серия = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Получает базовую структуру ДанныеШтрихкода и дополняет ее специфичными свойствами табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода), (См. ШтрихкодированиеМОТП.ДополнитьСвойстваДанныхШтрихкода).
Функция ИнициализироватьДанныеКодаМаркировки()
	
	ДанныеШтрихкода = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализироватьДанныеШтрихкода();
	ДополнитьСвойстваДанныхШтрихкода(ДанныеШтрихкода);
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

// Выполняет обработку выбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  РезультатВыбора - Структура - результат выбора номенклатуры пользователем.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  КэшированныеЗначения - Структура - закэшированные данные формы.
// Возвращаемое значение:
//  Неопределено, Структура - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьВыборНоменклатуры(Форма, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Формирует данные по штрихкодам без обращения в сервис МОТП.
//
// Параметры:
//  Штрихкоды - Массив - перечень штрихкодов.
// Возвращаемое значение:
//  Соответствие - Ключ соответствия - значение штрихкода, значение соответствия - данные штрихкода.
Функция ДанныеНеизвестнойМаркируемойПродукцииБезЗапросаСтатусаМОТП(КодыМаркировки, ПараметрыСканирования)
	
	ОбработанныеШтрихкоды       = Новый Соответствие;
	МассивEANДляПолученияДанных = Новый Массив;
	СоответствиеШтрихкодов      = Новый Соответствие;
	
	Для Каждого КодМаркировки Из КодыМаркировки Цикл
		
		ЗначениеEAN = "";
		
		Если ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, ЗначениеEAN) Или ЭтоКодМаркировкиБлока(КодМаркировки, ЗначениеEAN) Тогда
			
			СоответствиеШтрихкодов.Вставить(КодМаркировки, ЗначениеEAN);
			МассивEANДляПолученияДанных.Добавить(ЗначениеEAN);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоШтрихкодамEAN = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ДанныеПоШтрихкодамEAN(МассивEANДляПолученияДанных);
	СуществующиеУпаковки = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ШтрихкодыУпаковок(КодыМаркировки);
	
	МассивОшибок = Новый Массив;
	ШаблонОшибки = НСтр("ru = 'Штрихкод %1 требуется сопоставить с номенклатурой';
						|en = 'Штрихкод %1 требуется сопоставить с номенклатурой'");
	
	ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено;
	
	Для Каждого КлючЗначение Из СоответствиеШтрихкодов Цикл
		
		КодМаркировки = КлючЗначение.Ключ;
		ШтрихкодEAN   = КлючЗначение.Значение;
		
		ПараметрыОтбора = Новый Структура("ШтрихкодEAN", ШтрихкодEAN);
		НайденныеСтроки = ДанныеПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			Номенклатура   = НайденныеСтроки[0].Номенклатура;
			Характеристика = НайденныеСтроки[0].Характеристика;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			Номенклатура   = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("Номенклатура");
			Характеристика = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
			
		Иначе
			
			Если ДанныеМаркируемойНоменклатурыПоДаннымУПД = Неопределено Тогда
				ДанныеМаркируемойНоменклатурыПоДаннымУПД = ДанныеМаркируемойНоменклатурыПоДаннымУПД(ПараметрыСканирования.СсылкаНаОбъект);
			КонецЕсли;
			
			НоменклатураХарактеристика = ДанныеМаркируемойНоменклатурыПоДаннымУПД.Получить(КодМаркировки);
			
			Если НоменклатураХарактеристика = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(ШаблонОшибки, ШтрихкодEAN);
				МассивОшибок.Добавить(ТекстОшибки);
				
				Продолжить;
			КонецЕсли;
			
			Номенклатура   = НоменклатураХарактеристика.Номенклатура;
			Характеристика = НоменклатураХарактеристика.Характеристика;
			
		КонецЕсли;
		
		ЭтоТабачнаяПачка = ЭтоКодМаркировкиТабачнойПачки(КодМаркировки);
		
		ДанныеКодаМаркировки = ИнициализироватьДанныеКодаМаркировки();
		ДанныеКодаМаркировки.Номенклатура              = Номенклатура;
		ДанныеКодаМаркировки.Характеристика            = Характеристика;
		ДанныеКодаМаркировки.Серия                     = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
		ДанныеКодаМаркировки.ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табачная);
		ДанныеКодаМаркировки.МаркируемаяПродукция      = Истина;
		ДанныеКодаМаркировки.ТипУпаковки               = ?(ЭтоТабачнаяПачка, Перечисления.ТипыУпаковок.МаркированныйТовар,
			Перечисления.ТипыУпаковок.МонотоварнаяУпаковка);
		Если ЭтоТабачнаяПачка Тогда
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.DataMatrix;
		Иначе
			ДанныеКодаМаркировки.ТипШтрихкода              = Перечисления.ТипыШтрихкодов.GS1_DataMatrix;
		КонецЕсли;
		ДанныеКодаМаркировки.Штрихкод                  = КодМаркировки;
		ДанныеКодаМаркировки.КоличествоПачек           = ?(ЭтоТабачнаяПачка, 1, 10);
		ДанныеКодаМаркировки.КоличествоБлоков          = ?(ЭтоТабачнаяПачка, 0, 1);
		ДанныеКодаМаркировки.ГрупповаяТоварнаяУпаковка = ?(ЭтоТабачнаяПачка, Ложь, Истина);
		ДанныеСуществующейУпаковки = СуществующиеУпаковки.Найти(КодМаркировки, "Штрихкод");
		Если ДанныеСуществующейУпаковки = Неопределено Тогда
			ДанныеКодаМаркировки.ШтрихкодУпаковки = СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(
				ДанныеКодаМаркировки, ПараметрыСканирования);
		Иначе
			ДанныеКодаМаркировки.ШтрихкодУпаковки = ДанныеСуществующейУпаковки.Ссылка;
		КонецЕсли;
		
		ОбработанныеШтрихкоды.Вставить(КодМаркировки, ДанныеКодаМаркировки);
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат ОбработанныеШтрихкоды;

КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   УПД учетного документа.
// 
// Параметры:
//  УчетныйДокумент - ЛюбаяСсылка - Документ, формируемый на основании УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымУПД(УчетныйДокумент)
	
	Возврат Новый Соответствие;
	
КонецФункции

// Получает данные кодов маркировки и соответствующую кодам номенклатуру и характеристику информационной базы по данным
//   дерева, сформированного по УПД.
// 
// Параметры:
//  ДеревоДокумента - ДеревоЗначений - Дерево по данным УПД.
// Возвращаемое значение:
//  Соответствие - Ключ - Код маркировки, значение - Структура:
//   * Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура кода маркировки по данным ИБ.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика по данным ИБ.
Функция ДанныеМаркируемойНоменклатурыПоДаннымДереваУПД(ДеревоДокумента)
	
	НоменклатураКодыМаркировки = Новый Соответствие;
	СведенияОТоварах = ДеревоДокумента.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Если СведенияОТоварах = Неопределено Тогда
		Возврат НоменклатураКодыМаркировки;
	КонецЕсли;
	
	ПутьККодуМаркировки155 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок.НомерСтроки.КодУпаковки";
	ПутьККодуМаркировки820 = "СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код";
	ПутьКНоменклатуре    = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
	ПутьКХарактеристике  = "СведенияОТоварах.НомерСтроки.Сопоставление.ХарактеристикаИБ";
	
	Для Каждого СтрокаТовары Из СведенияОТоварах.Строки Цикл
		
		КодУпаковки = СтрокаТовары.Строки.Найти(ПутьККодуМаркировки820, "ПолныйПуть", Истина);
		Если КодУпаковки = Неопределено Тогда
			
			КодУпаковки = СтрокаТовары.Строки.Найти(ПутьККодуМаркировки155, "ПолныйПуть", Истина);
			Если КодУпаковки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		КодМаркировки = КодУпаковки.Значение;
		
		НоменклатураИБ = СтрокаТовары.Строки.Найти(ПутьКНоменклатуре, "ПолныйПуть", Истина);
		Если НоменклатураИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Номенклатура = НоменклатураИБ.Значение;
		
		ХарактеристикаИБ = СтрокаТовары.Строки.Найти(ПутьКХарактеристике, "ПолныйПуть", Истина);
		Если ХарактеристикаИБ = Неопределено Тогда
			Характеристика = ИСМПТВыбытиеКодовМаркировкиСервер.ИнтеграцияИС_ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
		Иначе
			Характеристика = ХарактеристикаИБ.Значение;
		КонецЕсли;
		
		ДанныеНоменклатуры = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
		
		НоменклатураКодыМаркировки.Вставить(КодМаркировки, ДанныеНоменклатуры);
		
	КонецЦикла;
	
	Возврат НоменклатураКодыМаркировки;
	
КонецФункции

// Создает элемент справочника "ШтрихкодыУпаковокТоваров" на основании данных кода маркировки.
// 
// Параметры:
//  ДанныеКодаМаркировки - 
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
// Возвращаемое значение:
//  СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на созданный элемент справочника.
Функция СоздатьШтрихкодУпаковкиПоДаннымКодаМаркировки(ДанныеКодаМаркировки, ПараметрыСканирования)
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
	
	Если Не ПараметрыСканирования.СоздаватьШтрихкодУпаковки Тогда
		Возврат СсылкаНаЭлемент;
	КонецЕсли;
	
	ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
	ЗаполнитьЗначенияСвойств(ДанныеНовойУпаковки, ДанныеКодаМаркировки);
	
	//В рос.библиотеке используется название параметра Штрихкод вместо ЗначениеШтрихкода
	//Сохранено название параметра из старой версии
	ДанныеНовойУпаковки.ЗначениеШтрихкода    = ДанныеКодаМаркировки.Штрихкод;
	ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	ДанныеНовойУпаковки.Количество  = 1;
	
	СсылкаНаЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки);
	
	Возврат СсылкаНаЭлемент;
	
КонецФункции

// Определяет тип кода маркировки по его значению.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод маркируемой продукции.
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// Формирует вложенные штрихкоды путем получения базовых коллекций "ДеревоУпаковок" и "МаркированныеТовары" и дополнения
// их колонками специфичными для табачной продукции.
//
// Параметры:
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов)
//   и (См. ШтрихкодированиеМОТП.НормализоватьСвойстваКоллекцииВложенныхШтрихкодов).
Функция ИнициализацияВложенныхШтрихкодов()
	
	ВложенныеШтрихкоды = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализацияВложенныхШтрихкодов();
	
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.ДеревоУпаковок);
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ВложенныеШтрихкоды.МаркированныеТовары);
	
	Возврат ВложенныеШтрихкоды;
	
КонецФункции

// Инициализирует дерево упаковок для табачной продукции.
//
// Возвращаемое значение:
//  ДеревоЗначений - Иерархия упаковок.
Функция ИнициализироватьДеревоУпаковок() Экспорт
	
	ДеревоУпаковок = ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ИнициализироватьДеревоУпаковок();
	НормализоватьСвойстваКоллекцииВложенныхШтрихкодов(ДеревоУпаковок);
	
	Возврат ДеревоУпаковок;
	
КонецФункции

// Инициализирует структуру, описывающую результат получения вложенных штрихкодов по данным МОТП.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * ТекстОшибки - Строка - Ошибка, возникшая в результате запроса данных из МОТП.
// * ЕстьОшибки - Булево - Истина, если возникла ошибка.
// * ВложенныеШтрихкоды - См. ШтрихкодированиеМОТП.ИнициализацияВложенныхШтрихкодов.
Функция ИнициализацияРезультатаПолученияВложенныхШтрихкодовПоДокументу()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВложенныеШтрихкоды",             Неопределено);
	Результат.Вставить("ЕстьОшибки",                     Ложь);
	Результат.Вставить("ТекстОшибки",                    "");
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Дополняет таблицу "Маркированные товары" табачными блоками, которые присутствуют в "Дереве упаковок".
//
// Параметры:
//  СтрокиДерева - КоллекцияСтрокДереваЗначений - Строки "Дерева упаковок".
//  МаркированныеТовары - ТаблицаЗначений - таблица с маркированными товарами.
//  УпаковкаВерхнегоУровня - СтрокаДереваЗначений - Самая верхняя строка в иерархии.
Процедура ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокиДерева, МаркированныеТовары, УпаковкаВерхнегоУровня = Неопределено)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровня = СтрокаДерева.ШтрихкодУпаковки;
		КонецЕсли;

		Если ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(СтрокаДерева.Штрихкод) Тогда
			НоваяСтрока = МаркированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.СтрокаДерева = СтрокаДерева;
			НоваяСтрока.УпаковкаВерхнегоУровня = УпаковкаВерхнегоУровня;
		КонецЕсли;

		ДополнитьМаркированныеТоварыБлокамиПоСтрокамДерева(СтрокаДерева.Строки, МаркированныеТовары, УпаковкаВерхнегоУровня);

	КонецЦикла;

КонецПроцедуры

// Дополняет данные по штрихкодам спецификой табачной продукции, полученной из МОТП.
//
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ИСМПТВыбытиеКодовМаркировкиСервер.ШтрихкодированиеИС_ПараметрыСканирования).
Процедура ДополнитьДанныеПоШтрихкодамСпецификойСЗапросомСтатусовМОТП(ДанныеПоШтрихкодам, ПараметрыСканирования)

	ШтрихкодыДляПолученияСпецифики = Новый Массив;

	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
			И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда

		МаркированныеТовары = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.МаркированныеТовары;
		Для Каждого СтрокаТовары Из МаркированныеТовары Цикл
			ШтрихкодыДляПолученияСпецифики.Добавить(СтрокаТовары.Штрихкод);
		КонецЦикла;
	
	КонецЕсли;
	
	Если ДанныеПоШтрихкодам.Свойство("ОбработанныеШтрихкоды")
			И ДанныеПоШтрихкодам.ОбработанныеШтрихкоды <> Неопределено Тогда

		Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл

			Если КлючЗначение.Значение.Свойство("ПолученыДанныеИзМОТП") И КлючЗначение.Значение.ПолученыДанныеИзМОТП Тогда
				Продолжить;
			КонецЕсли;

			Если ШтрихкодыДляПолученияСпецифики.Найти(КлючЗначение.Значение.Штрихкод) = Неопределено Тогда
				ШтрихкодыДляПолученияСпецифики.Добавить(КлючЗначение.Значение.Штрихкод);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если ШтрихкодыДляПолученияСпецифики.Количество() = 0 Тогда
		СпецификаШтрихкодов = Неопределено;
	Иначе
		Результат = СпецификаДляДополненияДанныхПоШтрихкодам(ШтрихкодыДляПолученияСпецифики, ПараметрыСканирования);
		Если Результат.ЕстьОшибки Тогда

			ДанныеПоШтрихкодам.ЕстьОшибки  = Истина;
			ДанныеПоШтрихкодам.ТекстОшибки = Результат.ТекстОшибки;

			Возврат;
		Иначе
			СпецификаШтрихкодов = Результат.СпецификаШтрихкодов;
		КонецЕсли;
	КонецЕсли;

	ДеревоУпаковок = Неопределено;
	Если ДанныеПоШтрихкодам.Свойство("ВложенныеШтрихкоды")
		И ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда

		ВложенныеШтрихкоды = ДанныеПоШтрихкодам.ВложенныеШтрихкоды;
		НормализоватьДанныеВложенныхШтрихкодов(ВложенныеШтрихкоды, ПараметрыСканирования, СпецификаШтрихкодов);
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;

	КонецЕсли;

	Если СпецификаШтрихкодов <> Неопределено Тогда
		ДополнитьСпецификойОбработанныеШтрихкоды(ДанныеПоШтрихкодам, СпецификаШтрихкодов, ДеревоУпаковок);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти