////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Клиентские и серверные процедуры и функции общего назначения:
// - для поддержки формирования печатных форм;
// - для работы с файлами;
// - для работы с управляемыми формами; 
// - для работы с почтовыми адресами;
// - для работы с отборами динамических списков;
// - прочее.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с отборами и параметрами динамических списков.
//

// Найти элемент или группу отбора по заданному имени поля или представлению.
//
// Параметры:
//  ОбластьПоиска - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля       - Строка - имя поля компоновки (не используется для групп).
//  Представление - Строка - представление поля компоновки.
//
Функция НайтиЭлементыИГруппыОтбора(Знач ОбластьПоиска,
									Знач ИмяПоля = Неопределено,
									Знач Представление = Неопределено) Экспорт
	
		
	Возврат ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОбластьПоиска,ИмяПоля, Представление) ;
	
КонецФункции

// Добавить группу отбора в коллекцию КоллекцияЭлементов.
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например.
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы          - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление      - Строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(Знач КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
		
	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы);
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
								
	МассивЭлементов = ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(ИмяПоля, Представление,
								 ПравоеЗначение,
								 ВидСравнения,
								 Использование,
								 РежимОтображения,
								ИдентификаторПользовательскойНастройки);
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОбластьДобавления,
									ИмяПоля,
									ВидСравнения,
									ПравоеЗначение,
									Представление,
									Использование,
									РежимОтображения,
									ИдентификаторПользовательскойНастройки);
	
КонецФункции

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
								
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								ИмяПоля,
								ПравоеЗначение,
								ВидСравнения,
								Представление,
								Использование,
								РежимОтображения,
								ИдентификаторПользовательскойНастройки);
	
КонецПроцедуры

// Добавить или заменить существующий элемент отбора динамического списка.
//
// Параметры:
//   ДинамическийСписок - ДинамическийСписок - Список, в котором требуется установить отбор.
//   ИмяПоля            - Строка - Поле, по которому необходимо установить отбор.
//   ПравоеЗначение     - Произвольный - Значение отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Внимание! Если передать Неопределено, то значение не будет изменено.
//   ВидСравнения  - ВидСравненияКомпоновкиДанных - Условие отбора.
//   Представление - Строка - Представление элемента компоновки данных.
//       Необязательный. Значение по умолчанию: Неопределено.
//       Если указано, то выводится только флажок использования с указанным представлением (значение не выводится).
//       Для очистки (чтобы значение снова выводилось) следует передать пустую строку.
//   Использование - Булево - Флажок использования этого отбора.
//       Необязательный. Значение по умолчанию: Неопределено.
//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - Способ отображения этого отбора
//                                                                          пользователю.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ - В группе быстрых настроек над списком.
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный       - В настройка списка (в подменю Еще).
//       * РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный   - Запретить пользователю менять этот отбор.
//   ИдентификаторПользовательскойНастройки - Строка - Уникальный идентификатор этого отбора.
//       Используется для связи с пользовательскими настройками.
//
// См. также:
//   Одноименные свойства объекта "ЭлементОтбораКомпоновкиДанных" в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
	ПравоеЗначение = Неопределено,
	ВидСравнения = Неопределено,
	Представление = Неопределено,
	Использование = Неопределено,
	РежимОтображения = Неопределено,
	ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля,
		ПравоеЗначение,
		ВидСравнения,
		Представление,
		Использование,
		РежимОтображения,
		ИдентификаторПользовательскойНастройки);
	
		
КонецПроцедуры

// Установить или обновить значение параметра ИмяПараметра динамического списка Список.
//
// Параметры:
//  Список          - ДинамическийСписок - реквизит формы, для которого требуется установить параметр.
//  ИмяПараметра    - Строка             - имя параметра динамического списка.
//  Значение        - Произвольный        - новое значение параметра.
//  Использование   - Булево             - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

Функция ТипПодразделенияОрганизаций() Экспорт
	
	//Возврат Тип("СправочникСсылка.ПодразделенияОрганизаций");
	//УПК
	Возврат Тип("СправочникСсылка.СтруктураПредприятия");
	
КонецФункции

Функция ТипКонтрагент() Экспорт
	
	Возврат Тип("СправочникСсылка.Контрагенты");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы с управляемыми формами.
//

// Выполняет поиск элемента отбора в коллекции по заданному представлению.
//
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например.
//                      Список.Отбор.Элементы или группа в отборе.
//  Представление строка - представление группы.
// 
Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(КоллекцияЭлементов, Представление);
	
КонецФункции

Функция ИмяСобытияЗаписьСНТ() Экспорт
	//Возврат "";
	Возврат СНТКлиентСервер.ИмяСобытияЗаписьСНТ();
КонецФункции

#КонецОбласти

#Область ВзаимодействияКлиентСервер

// Определяет отбор динамического списка в зависимости от наличия режима совместимости.
//
// Параметры:
//  Список  - ДинамическийСписок - список, для которого надо определить отбор.
//
// Возвращаемое значение:
//   Отбор   - требуемый отбор.
//
Функция ОтборДинамическогоСписка(Список) Экспорт

	Возврат ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(Список);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ПолучитьСоответствиеТипДокументаВидДвижения() Экспорт 
	
	СоответствиеТипДокументаВидДвижения = Новый Соответствие;
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")	, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")		, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")	, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПрочееОприходованиеТоваров")	, "Приход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг")		, "Приход");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.СборкаТоваров")     , "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПеремещениеТоваров"), "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПересортицаТоваров"), "РасходПриход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ВводОстатков")					, "Приход");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ЭСФ"), "ЭСФ");
	
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.СписаниеНедостачТоваров")			, "Расход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")		, "Расход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.ПорчаТоваров")						, "Расход");
	СоответствиеТипДокументаВидДвижения.Вставить(Тип("ДокументСсылка.СНТ")								, "Расход");
	
	Возврат СоответствиеТипДокументаВидДвижения;
	
КонецФункции	

Функция ПолучитьСписокДокументовОснованияДляЭДВС(ТипФормыВС) Экспорт
	
	// Получить список документов ЭДВС по типу формы.
	
	ДокументыВыбора = Новый СписокЗначений;
	
	Если ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ДекларацияНаТовары") Тогда
		ДокументыВыбора.Добавить("ТаможеннаяДекларацияИмпорт", "ГТД по импорту");
		ДокументыВыбора.Добавить("ЗаявлениеОВвозеТоваров"	 , "Заявление о ввозе товаров и уплате косвенных налогов");
	
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Детализация") Тогда 
		ДокументыВыбора.Добавить("СборкаТоваров", "Сборка товаров");
		ДокументыВыбора.Добавить("ПересортицаТоваров", "Пересортица товаров");
		
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ВнутреннееПеремещение") Тогда 
		ДокументыВыбора.Добавить("ПеремещениеТоваров", "Перемещение товаров");
		ДокументыВыбора.Добавить("ЭСФ","Электронный счет-фактура (полученные)");
		
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Остатки") 
		ИЛИ ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.КорректировкаОстатков") Тогда 
		ДокументыВыбора.Добавить("ОприходованиеИзлишковТоваров"		, "Оприходование излишков товаров");
		ДокументыВыбора.Добавить("ПрочееОприходованиеТоваров"		, "Прочее оприходование товаров");
		
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.Списание") Тогда 
		ДокументыВыбора.Добавить("СписаниеНедостачТоваров"			, "Списание недостач товаров");
		ДокументыВыбора.Добавить("ВнутреннееПотреблениеТоваров"		, "Внутреннее потребление товаров");
		ДокументыВыбора.Добавить("ПорчаТоваров"						, "Порча товаров");
		
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами") Тогда 
		ДокументыВыбора.Добавить("ПеремещениеТоваров", "Перемещение товаров");	
		
	ИначеЕсли ТипФормыВС = ПредопределенноеЗначение("Перечисление.ТипыФормВС.ПустаяСсылка") Тогда 
		ДокументыВыбора.Добавить("ТаможеннаяДекларацияИмпорт"		, "ГТД по импорту");
		ДокументыВыбора.Добавить("ЗаявлениеОВвозеТоваров"			, "Заявление о ввозе товаров и уплате косвенных налогов");
		ДокументыВыбора.Добавить("СборкаТоваров"					, "Сборка товаров");
		ДокументыВыбора.Добавить("ПеремещениеТоваров"				, "Перемещение товаров");
		ДокументыВыбора.Добавить("ПересортицаТоваров"				, "Пересортица товаров");
		ДокументыВыбора.Добавить("ПрочееОприходованиеТоваров"		, "Прочее оприходование товаров");
		ДокументыВыбора.Добавить("ОприходованиеИзлишковТоваров"		, "Оприходование излишков товаров");
		ДокументыВыбора.Добавить("СписаниеНедостачТоваров"			, "Списание недостач товаров");
		ДокументыВыбора.Добавить("ВнутреннееПотреблениеТоваров"		, "Внутреннее потребление товаров");
		ДокументыВыбора.Добавить("ПорчаТоваров"						, "Порча товаров");
		
	КонецЕсли;	
	
	Возврат ДокументыВыбора;
	
КонецФункции

Функция ПолучитьПустуюСсылкуОрганизации() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");	
КонецФункции

Функция ПолучитьПустуюСсылкуПодразделения() Экспорт
	
	//СсылкаПодразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	//УПК
	СсылкаПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Возврат СсылкаПодразделение;
	
КонецФункции

Функция ИмяРеквизитаКодАльфа2СправочникаКлассификаторСтранМира() Экспорт
	
	Возврат "КодАльфа2";
	
КонецФункции

Функция ИмяСправочникаКлассификаторСтранМира() Экспорт
	
	Возврат "СтраныМира";
	
КонецФункции

#КонецОбласти
