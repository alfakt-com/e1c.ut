

Функция ПроверитьДоступ(Источник, Пользователь, ДатаНачала, ДатаОкнчания)Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_ДоступыПользователей.Ссылка КАК Ссылка,
		|	кт_ДоступыПользователей.ДатаНачало КАК ДатаНачало,
		|	кт_ДоступыПользователей.ДатаКонец КАК ДатаКонец
		|ИЗ
		|	Справочник.кт_ДоступыПользователей КАК кт_ДоступыПользователей
		|ГДЕ
		|	кт_ДоступыПользователей.Пользователь = &Пользователь
		|	И кт_ДоступыПользователей.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("ТипДокумента", Источник);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ДатаНачала > Выборка.ДатаНачало И ?(ЗначениеЗаполнено(Выборка.ДатаКонец), ДатаОкнчания < КонецДня(Выборка.ДатаКонец), Истина) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
	    Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции	
	
//++Аян_К++ 241221 старт
Процедура ПроверитьОснованиеПлатежа(Отказ, Объект) Экспорт
	
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Для Каждого Стр Из Объект.РасшифровкаПлатежа Цикл
			Если ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Или ТипЗнч(Стр.ОснованиеПлатежа) = Тип("ДокументСсылка.ПредзаказКлиента") Тогда
				Если Объект.Контрагент <> Стр.ОснованиеПлатежа.Контрагент Тогда
					Сообщить("Контрагент в заказе отличается!", СтатусСообщения.ОченьВажное); 
					Отказ = Истина;
				КонецЕсли;
				
				//Если Объект.СуммаДокумента <> Стр.ОснованиеПлатежа.СуммаДокумента Тогда
				//	Сообщить("Сумма в заказе отличается!", СтатусСообщения.ОченьВажное);
				//	Отказ = Истина;
				//КонецЕсли; 
				//Отказ = ПроверитьЗаказ(Стр.ОснованиеПлатежа, Стр);
			Иначе 
				Сообщить("Необходимо указать заказ клиента", СтатусСообщения.ОченьВажное);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаказ(Заказ, Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа,
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.СуммаДокумента КАК СуммаДокумента
		|ИЗ
		|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеРасшифровкаПлатежа
		|ГДЕ
		|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа";
	
	Запрос.УстановитьПараметр("ОснованиеПлатежа", Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СуммаОстаток = Заказ.СуммаДокумента;
	
	Пока Выборка.Следующий() Цикл 
		Если Объект.ОснованиеПлатежа <> Выборка.ОснованиеПлатежа Тогда
			СуммаОстаток = СуммаОстаток - Выборка.СуммаДокумента; 
		КонецЕсли;
	КонецЦикла;
		
	Если Объект.Сумма > СуммаОстаток Тогда
		Сообщить("В " + Строка(Объект.ОснованиеПлатежа) + " нельзя вносить больше суммы заказа:" + Строка(Заказ.СуммаДокумента) + "; Сформируйте АКТ сверки.");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
//++Аян_К++ 190122 финиш

Функция ПроверитьВТБ_Банк(БанковскийСчет) Экспорт
	
	//++Аян_К++ 110322 срочная задача от ЕЮ старт
	Если БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию("KZ734322215398C01050  Банк ВТБ (Депозит)") 
		Или БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию("KZ824322203398C01961 Банк ВТБ (Казахстан) в г. ") 
		Или БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию("KZ824322203398C01961 в Банк ВТБ (Казахстан) в г.А")
		Или БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.НайтиПоНаименованию("USD KZ224322203840C00683 Банк ВТБ") Тогда
		Сообщить("Счета ВТБ Банка использовать запрещено!", СтатусСообщения.ОченьВажное);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	//++Аян_К++ 110322 срочная задача от ЕЮ финиш
	
КонецФункции

Процедура УстановитьДоговорКонтрагента(Объект) Экспорт
	
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Партнер = &Партнер
		|	И ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
		|	И ДоговорыКонтрагентов.Статус = &Статус";
		
		Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
		Запрос.УстановитьПараметр("ТипДоговора", Перечисления.ТипыДоговоров.СПокупателем);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Объект.Договор.ДатаОкончанияДействия) Тогда
				Если Объект.Договор.ДатаОкончанияДействия < ТекущаяДата() Тогда
					ЗакрытьДоговор(Выборка.Ссылка);
					СоздатьДоговорКОнтрагента(Объект);
				Иначе
					Объект.Договор = Выборка.Ссылка;
				КонецЕсли;
			Иначе
				Объект.Договор = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			СоздатьДоговорКОнтрагента(Объект);
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(Объект.Договор.Подразделение) Тогда
			ОбъектДоговор = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДоговор.Подразделение          = ?(ЗначениеЗаполнено(Объект.Менеджер.Подразделение), Объект.Менеджер.Подразделение, Объект.Подразделение);
			Попытка
				ОбъектДоговор.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
		
КонецПроцедуры		

Процедура ЗакрытьДоговор(ДоговорКонтрагента)
	
	ОбъектДоговор = ДоговорКонтрагента.ПолучитьОбъект();
	ОбъектДоговор.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
	Попытка 
		ОбъектДоговор.Записать();
	Исключение КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьДоговорКОнтрагента(Объект)
		
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.Наименование 			= "Без договора";
	НовыйДоговор.Партнер	 			= Объект.Партнер;
	НовыйДоговор.Контрагент	 			= Объект.Контрагент;
	НовыйДоговор.Организация  			= Объект.Организация;
	НовыйДоговор.ТипДоговора            = Перечисления.ТипыДоговоров.СПокупателем;
	НовыйДоговор.Статус					= Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	НовыйДоговор.Подразделение          = ?(ЗначениеЗаполнено(Объект.Менеджер.Подразделение), Объект.Менеджер.Подразделение, Объект.Подразделение);
	НовыйДоговор.НалогообложениеНДС     = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	НовыйДоговор.СтавкаНДС              = Справочники.СтавкиНДС.НДС12;
	
	НовыйДоговор.ВалютаВзаиморасчетов	= Объект.Валюта;
	НовыйДоговор.ПорядокРасчетов		= Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	НовыйДоговор.ПорядокОплаты			= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	
	НовыйДоговор.Записать();
	Объект.Договор = НовыйДоговор.Ссылка;
	
КонецПроцедуры

Функция ПолучитьСтатусОтгрузкиВМС(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Infor_СтатусыОбъектов.СтатусОбъекта КАК СтатусОбъекта
		|ИЗ
		|	РегистрСведений.Infor_СтатусыОбъектов КАК Infor_СтатусыОбъектов
		|ГДЕ
		|	Infor_СтатусыОбъектов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
		
//Ербол-старт
Функция ПолучитьУсловиеОплаты(Объект) Экспорт
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйКассовыйОрдер.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Вт1
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.Проведен = ИСТИНА
		|	И (ПриходныйКассовыйОрдер.Дата >= ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -2)
		|			ИЛИ ПриходныйКассовыйОрдер.Дата <= ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, 2))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт1.Ссылка КАК Ссылка,
		|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ПОМЕСТИТЬ Вт2
		|ИЗ
		|	Вт1 КАК Вт1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
		|		ПО Вт1.Ссылка = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт2.Ссылка КАК Ссылка,
		|	Вт2.ОснованиеПлатежа КАК ОснованиеПлатежа
		|ИЗ
		|	Вт2 КАК Вт2
		|ГДЕ
		|	Вт2.ОснованиеПлатежа = &ОснованиеПлатежа";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ОснованиеПлатежа", Объект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Перечисления.swУсловияОплаты.НаличныйРасчет;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	Док = Объект.ПолучитьОбъект();
	Док.swУсловияОплаты = Перечисления.swУсловияОплаты.БезналичныйРасчет;
	Док.Записать(РежимЗаписиДокумента.Запись);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Перечисления.swУсловияОплаты.БезналичныйРасчет;
КонецФункции
//Ербол-Финиш
