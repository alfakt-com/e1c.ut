
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. Обработка.ОбменЭСФ.СоздатьXMLДляИмпортаВИСЭСФ()
Функция СоздатьXMLДляИмпортаВИСЭСФ(Знач МассивЭСФ) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьXMLДляИмпортаВИСЭСФ(МассивЭСФ);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с API ИС ЭСФ

// См. ЭСФСервер.ОткрытьСессию()
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияИСЭСФ = Неопределено) Экспорт
	
	Возврат ЭСФСервер.ОткрытьСессию(ПрофильИСЭСФ, ВерсияИСЭСФ);
	
КонецФункции

// См. ЭСФСервер.ЗакрытьСессию()
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияИСЭСФ = Неопределено) Экспорт
	
	ЭСФСервер.ЗакрытьСессию(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияИСЭСФ);
	
КонецПроцедуры

// См. ЭСФСервер.ПроверитьДоступИВерсиюНаСервере
Функция ПроверитьДоступИВерсиюНаСервере() Экспорт
	Возврат ЭСФСервер.ПроверитьДоступИВерсиюНаСервере();	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Изменение статусов ЭСФ (declineInvoiceById, revokeInvoiceById и т.д.)

Функция ИзменитьСтатусыЭСФ(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ) Экспорт
	
	Результат = СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ДанныеКлючаЭЦП.ОткрытыйСертификатBase64);
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();
	
	ПодписьЗапроса = Контейнер.СоздатьЭЦП(
		Результат.СтрокаДляПодписи, 
		ДанныеКлючаЭЦП.КлючBase64, 
		ДанныеКлючаЭЦП.Пароль);
	
	ТекстЗапроса = Результат.ТекстЗапроса; 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[signature]", ПодписьЗапроса);
	
	Возврат ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ДанныеПрофиляИСЭСФ);	
	
КонецФункции

// См. ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов()
Функция СоздатьЗапросНаИзменениеСтатусов(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	Возврат ЭСФСервер.СоздатьЗапросНаИзменениеСтатусов(Действие, КоллецияДляИзмененияСтатусов, ОткрытыйКлючЭЦП);
	
КонецФункции

// См. ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов()
Функция ВыполнитьЗапросНаИзменениеСтатусов(Знач Действие, Знач ТекстЗапроса, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	Возврат ЭСФСервер.ВыполнитьЗапросНаИзменениеСтатусов(Действие, ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

// Возвращает массив актуальных электронных счетов-фактур, которые возможно отозвать.
// Сообщает о тех счетах-фактурах, для которых невозможно отозвать актуальные ЭСФ.
//
// Параметры:
//  МассивСчетовФактур - Массив - Массив счетов-фактур, для которых необходимо найти актуальные ЭСФ, которые возможно отозвать.
//   Каждый элемент массива должен иметь тип ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный.
//
// Возвращаемое значение:
//  Массив - Актуальные ЭСФ, которые возможно отозвать.
//
Функция НовыйМассивОтзываемыхЭСФ(Знач МассивСчетовФактур) Экспорт
	
	// Массив ЭСФ, для которых возможно выполнить отзыв.
	МассивОтзываемыхЭСФ = Новый Массив;
	
	// Массив счетов-фактру, у которых нет актуальных ЭСФ.
	ОтсутствуетАктуальныйЭСФ = Новый Массив;
	
	// Массив счетов-фактру, которые имеют актуальные ЭСФ в состоянии, недопустимом для отзыва. 
	НедопустимоеСостояниеЭСФ = Новый Массив;
	
	// Найти актуальные ЭСФ для счетов-фактур.
	СоответствиеАктуальныхЭСФ = ЭСФВызовСервера.НайтиАктуальныеЭСФПоСчетамФактурам(МассивСчетовФактур, "Состояние");
	
	// Заполнить коллекции МассивОтзываемыхЭСФ, ОтсутствуетАктуальныйЭСФ, НедопустимоеСостояниеЭСФ.
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхЭСФ Цикл
		
		СсылкаСчетФактура = ЭлементСоответствия.Ключ;
		ДанныеЭСФ = ЭлементСоответствия.Значение;
		
		Если ДанныеЭСФ = Неопределено Тогда
			ОтсутствуетАктуальныйЭСФ.Добавить(СсылкаСчетФактура);
		ИначеЕсли НЕ (ДанныеЭСФ.Состояние = Перечисления.СостоянияЭСФ.ПринятСервером
			ИЛИ ДанныеЭСФ.Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю) Тогда
			НедопустимоеСостояниеЭСФ.Добавить(СсылкаСчетФактура);
		Иначе
			МассивОтзываемыхЭСФ.Добавить(ДанныеЭСФ.ЭСФ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать и показать текст сообщения, если нельзя обновить все ЭСФ.
	Если МассивОтзываемыхЭСФ.Количество() <> МассивСчетовФактур.Количество() Тогда
		
		ТекстСообщения = "";
		
		// Сформировать текст по счетам-фактурам, у которых нет актуальных ЭСФ.
		Если ОтсутствуетАктуальныйЭСФ.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно отозвать актуальные электронные счета-фактуры для счетов-фактур:
                 |%СписокСчетовФактур%
                 |Так как счета-фактуры не имеют актуальных электронных счетов-фактур.'");
				
			СписокСчетовФактур = "";
			Для Каждого СсылкаСчетФактура Из ОтсутствуетАктуальныйЭСФ Цикл
				СписокСчетовФактур = СписокСчетовФактур + "- " + СсылкаСчетФактура + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокСчетовФактур%", СокрЛП(СписокСчетовФактур));
				
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по счетам-фактурам, у которых есть актуальные ЭСФ с недопустимым состоянием.
		Если НедопустимоеСостояниеЭСФ.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно отозвать актуальные электронные счета-фактуры для счетов-фактур:
                 |%СписокСчетовФактур%
                 |Так как актуальные электронные счета-фактуры находятся в состояниях, недопустимых для отзыва.
                 |Возможен отзыв электронных счетов фактур только в состоянии ""%ПринятСервером%"", ""%ДоставленПолучателю%"".'");
				
			СписокСчетовФактур = "";
			Для Каждого СсылкаСчетФактура Из НедопустимоеСостояниеЭСФ Цикл
				СписокСчетовФактур = СписокСчетовФактур + "- " + СсылкаСчетФактура + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокСчетовФактур%", СокрЛП(СписокСчетовФактур));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПринятСервером%", Перечисления.СостоянияЭСФ.ПринятСервером);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоставленПолучателю%", Перечисления.СостоянияЭСФ.ДоставленПолучателю);
			
		КонецЕсли;
		
		Сообщить(СокрЛП(ТекстСообщения));
		
	КонецЕсли;
	
	Возврат МассивОтзываемыхЭСФ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пользователи и профили ИС ЭСФ

// См. ЭСФСервер.ПользователиИСЭСФБезПароляАутентификации()
Функция ПользователиИСЭСФБезПароляАутентификации(Знач МассивПрофилейИСЭСФ) Экспорт
	                           
	Возврат ЭСФСервер.ПользователиИСЭСФБезПароляАутентификации(МассивПрофилейИСЭСФ);
	
КонецФункции

// См. ЭСФСервер.ДанныеПрофиляИСЭСФ()
Функция ДанныеПрофиляИСЭСФ(Знач ПрофильИСЭСФ) Экспорт
	        
	Возврат ЭСФСервер.ДанныеПрофиляИСЭСФ(ПрофильИСЭСФ);   
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Сторнирование счетов-фактур 

// См. ЭСФСерверПереопределяемый.ДокументыСторнирующиеСчетФактуру()
Функция ДокументыСторнирующиеСчетФактуру(Знач СчетФактура) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ДокументыСторнирующиеСчетФактуру(СчетФактура);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Отправка ЭСФ 

// См. ЭСФКлиент.ПроверитьИсходящиеЭСФ().
Процедура ПроверитьИсходящиеЭСФ(Знач МассивИсходящихЭСФ) Экспорт
	
	ЭСФСервер.ПроверитьИсходящиеЭСФ(МассивИсходящихЭСФ);
	
КонецПроцедуры

// См. ЭСФСервер.ПроверитьВозможностьОтправкиДокументовЭСФ()
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
Функция ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры) Экспорт
	
	Возврат ЭСФСервер.ПроверитьВозможностьОтправкиДокументовПоставитьВОчередьОтправкиЭСФ(МассивИсходящихЭСФ, ДополнительныеПараметры);
	
КонецФункции

// См. ЭСФСервер.ПроверитьВозможностьСозданияДокументовЭСФ()
Функция ПроверитьВозможностьСозданияДокументовЭСФ(Знач МассивСчетовФактур, Знач ПоказыватьСообщения = Истина, ТекстыСообщений = Неопределено) Экспорт
	
	Возврат ЭСФСервер.ПроверитьВозможностьСозданияДокументовЭСФ(МассивСчетовФактур, ПоказыватьСообщения, ТекстыСообщений);
	
КонецФункции

// См. ЭСФСервер.СоздатьИсходящиеInvoice()
Процедура СоздатьИсходящиеInvoice(Знач МассивЭСФ, Знач УстанавливатьПодпись, Знач ТипПодписиЭСФ, АдресКоллекцииInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ) Экспорт
	
	КоллекцияInvoiceXML = Неопределено;                                               
	ЭСФСервер.СоздатьИсходящиеInvoice(МассивЭСФ, УстанавливатьПодпись, ТипПодписиЭСФ, КоллекцияInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
	
	// После того, как переменная АдресКоллекцииInvoiceXML станет не нужна, 
	// необходимо самостоятельно очистить временное хранилище,
	// иначе значение будет удалено только после перезапуска сервера.
	АдресКоллекцииInvoiceXML = ПоместитьВоВременноеХранилище(КоллекцияInvoiceXML, Новый УникальныйИдентификатор);
	
КонецПроцедуры

// См. ЭСФСервер.ОтправитьИсходящиеInvoice()
Функция ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, Знач КоллекцияДанныеКоллекцииInvoiceXML, Знач КоллекцияПодписейЭСФ, Знач ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник = Неопределено, НеПерезаполнятьОчередьОтправки = Ложь) Экспорт
	
	Для Каждого СгруппированнаяInvoiceXML Из КоллекцияДанныеКоллекцииInvoiceXML Цикл
		
		СтруктурнаяЕдиница = СгруппированнаяInvoiceXML.Ключ;
		ДанныеКоллекцииInvoiceXML = СгруппированнаяInvoiceXML.Значение;
		
		Если ТипЗнч(ДанныеКоллекцииInvoiceXML) = Тип("Соответствие") Тогда
			КоллекцияInvoiceXML = ДанныеКоллекцииInvoiceXML;
		Иначе
			КоллекцияInvoiceXML = ПолучитьИзВременногоХранилища(ДанныеКоллекцииInvoiceXML);
		КонецЕсли;
		
		ДанныеСтруктурнойЕдиницы = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		ОткрытыйКлючЭЦП = ДанныеСтруктурнойЕдиницы.ОткрытыйСертификатBase64;
		КоллекцияПодписей = КоллекцияПодписейЭСФ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		Если КоллекцияУполномоченныйСотрудник = Неопределено Тогда
			УполномоченныйСотрудник = Неопределено;
		Иначе
			УполномоченныйСотрудник = КоллекцияУполномоченныйСотрудник.Получить(СтруктурнаяЕдиница);
		КонецЕсли;
		
		Результат = ЭСФСервер.ОтправитьИсходящиеInvoice(ВерсияИСЭСФ, КоллекцияInvoiceXML, КоллекцияПодписей, ДанныеПрофиляИСЭСФ, ОткрытыйКлючЭЦП, , УполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);

	КонецЦикла;
	
КонецФункции

// Находит в МассивЭСФ документы, у которых дата отличается от параметра Дата.
//
// Параметры:
//  МассивЭСФ - Массив - Массив ЭСФ, среди которых необходимо найти ЭСФ с отличающейся датой.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  Дата - Дата - Будут найдены ЭСФ, дата которых отличается от этой даты.
//
// Возвращаемое значение:
//   Массив - Массив ЭСФ, дата которых отличается от Дата.
//    Каждый элемент массива имеет тип ДокументСсылка.ЭСФ.
//
Функция МассивЭСФДругаяДата(МассивЭСФ, Дата, ИзмененГод = Ложь) Экспорт
	
	МассивЭСФДругаяДата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ГОД(ЭСФ.Дата) <> ГОД(&Дата) КАК ИзмененГод,
	|	ЭСФ.ДатаВыпискиНаБумажномНосителе КАК ДатаВыписки,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(ЭСФ.Дата, ДЕНЬ) <> &Дата, ЛОЖЬ) КАК ДатаЭСФОтличнаОтТекущей,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(СчетФактураВыданный.%СчетФактураДата, ДЕНЬ) <> &Дата, ЛОЖЬ) КАК ДатаСФОтличнаОтТекущей,
	|	СчетФактураВыданный.Ссылка КАК СФ
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ЭСФ.СчетФактура.Ссылка = СчетФактураВыданный.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивЭСФ)
	|	И (НАЧАЛОПЕРИОДА(ЭСФ.Дата, ДЕНЬ) <> &Дата
	|			ИЛИ НАЧАЛОПЕРИОДА(СчетФактураВыданный.%СчетФактураДата, ДЕНЬ) <> &Дата
	|				И ЭСФ.ДатаВыпискиНаБумажномНосителе = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И ЭСФ.Состояние В(&МассивСостояний)";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%СчетФактураДата", "");
	
	ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);

	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(Запрос.Текст, СоответсвиеИменРеквизитов);
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);	
	Запрос.УстановитьПараметр("Дата", Дата);	
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияЭСФ.Сформирован);
	МассивСостояний.Добавить(Перечисления.СостоянияЭСФ.ОтклоненСервером);
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();	
		Пока Выборка.Следующий() Цикл
			СтруктураЭСФ = Новый Структура();
			СтруктураЭСФ.Вставить("ЭСФ", Выборка.ЭСФ);
			Если ЗначениеЗаполнено(Выборка.ДатаВыписки) Тогда
				ПризнакВыписки = Истина;
			Иначе 
				ПризнакВыписки = Ложь;
			КонецЕсли;
			СтруктураЭСФ.Вставить("ПризнакВыписки", ПризнакВыписки);
			СтруктураЭСФ.Вставить("ДатаЭСФОтличнаОтТекущей", Выборка.ДатаЭСФОтличнаОтТекущей);
			СтруктураЭСФ.Вставить("ДатаСФОтличнаОтТекущей", Выборка.ДатаСФОтличнаОтТекущей);
			СтруктураЭСФ.Вставить("СФ", Выборка.СФ);
			МассивЭСФДругаяДата.Добавить(СтруктураЭСФ);
			Если Выборка.ИзмененГод Тогда
				ИзмененГод = Выборка.ИзмененГод;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Возврат МассивЭСФДругаяДата;
	
КонецФункции

// Устанавливает дату для документов ЭСФ и связанных счетов фактур.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, для которых необходимо установить дату.
//   Если у ЭСФ указан счет-фактура, то для счета-фактуры тоже будет установлена эта дата.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  ТекущаяДата - Дата - Дата, которую необходимо установить для документов ЭСФ и счетов-фактур.
//   Должна быть началом дня.
//
Процедура УстановитьТекущуюДатуДляЭСФИСчетовФакутур(Знач МассивЭСФ, Знач ТекущаяДата) Экспорт
	
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Дата КАК ДатаЭСФ,
	|	ЭСФ.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ЭСФ.СчетФактура.%СчетФактураДата, ДЕНЬ) КАК ДатаСчетаФактуры,
	|	ЭСФ.ДатаВыпискиНаБумажномНосителе КАК ДатаВыпискиБумажно
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивЭСФ)";
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%СчетФактураДата", "");
	
	ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектСчетФактура = Неопределено;
			ИзмененНомерСФ    = Ложь;
			Если ЗначениеЗаполнено(Выборка.СчетФактура) И Выборка.ДатаСчетаФактуры <> ТекущаяДата Тогда
				Если Не ЗначениеЗаполнено(Выборка.ДатаВыпискиБумажно) Тогда
					
					ОбъектСчетФактура = Выборка.СчетФактура.ПолучитьОбъект();
					
					Если Год(ОбъектСчетФактура.Дата) <> Год(ТекущаяДата) Тогда
						ОбъектСчетФактура.Номер = "";
						ИзмененНомерСФ          = Истина;
					КонецЕсли;
					
					ОбъектСчетФактура[СоответсвиеИменРеквизитов["%СчетФактураДата"]] = ТекущаяДата;
					ОбъектСчетФактура.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
					ОбъектСчетФактура.Записать();
				КонецЕсли;
			КонецЕсли;
			
			Если НачалоДня(Выборка.ДатаЭСФ) <> ТекущаяДата Тогда
				ОбъектЭСФ = Выборка.ЭСФ.ПолучитьОбъект();
				ОбъектЭСФ.Дата = ТекущаяДата;
				
				Если ОбъектСчетФактура <> Неопределено И ИзмененНомерСФ Тогда
					ОбъектЭСФ.Номер = ЭСФСерверПереопределяемый.ПолучитьНомерНаПечать(ОбъектСчетФактура);
				КонецЕсли;
				
				ОбъектЭСФ.ДополнительныеСвойства.Вставить(ЭСФКлиентСерверПереопределяемый.ИмяПропуститьПроверкуЗапретаИзменения(), Истина);
				ОбъектЭСФ.ОбменДанными.Загрузка = Истина;
				ОбъектЭСФ.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭСФВызовСервера.УстановитьТекущуюДатуДляЭСФИСчетовФакутур'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьИОтправитьКоллекциюInvoice(КоллекцияСгруппированныхЭСФ, ДанныеПрофилейИСЭСФ, ДополнительныеПараметры, ВерсияИСЭСФ) Экспорт

	КоллекцияПодписейИСЭСФ = Новый Соответствие;
	КоллекцияАдресКоллекцииInvoiceXML = Новый Соответствие;
	КоллекцияСоответствиеЭСФ = Новый Соответствие;
	КоллекцияУполномоченныйСотрудник =  ДополнительныеПараметры.КоллекцияУполномоченныйСотрудник;
	ЗапускатьФоновоеЗадание =  ДополнительныеПараметры.ЗапускатьФоновоеЗадание;
		
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		МассивЭСФ = СгруппированныеЭСФ.Значение;
		
		ДанныеКлючаЭЦП = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФВызовСервера.ДанныеПрофиляИСЭСФ(ДанныеКлючаЭЦП.ПрофильИСЭСФ);

		АдресКоллекцииInvoiceXML = Неопределено;
		КоллекцияSignedContentXML = Неопределено;
		
		ТипПодписиЭСФ = ЭСФКлиентСервер.ТипПодписиЭСФ(ДанныеКлючаЭЦП, ДанныеПрофиляИСЭСФ);
		
		УполномоченныйСотрудник = КоллекцияУполномоченныйСотрудник.Получить(СтруктурнаяЕдиница);
		
		СоздатьИсходящиеInvoice(МассивЭСФ, Истина, ТипПодписиЭСФ, АдресКоллекцииInvoiceXML, КоллекцияSignedContentXML, УполномоченныйСотрудник, ВерсияИСЭСФ);
		
		КоллекцияПодписей = ЭСФКлиентСервер.НоваяКоллекцияПодписейЭСФ(КоллекцияSignedContentXML, ДанныеКлючаЭЦП);
		СоответствиеЭСФ = ПолучитьИзВременногоХранилища(АдресКоллекцииInvoiceXML);
		
		КоллекцияСоответствиеЭСФ.Вставить(СтруктурнаяЕдиница, СоответствиеЭСФ);
		КоллекцияПодписейИСЭСФ.Вставить(СтруктурнаяЕдиница, КоллекцияПодписей);
		КоллекцияАдресКоллекцииInvoiceXML.Вставить(СтруктурнаяЕдиница, АдресКоллекцииInvoiceXML);
		
	КонецЦикла;
	
	Если ЗапускатьФоновоеЗадание Тогда
		
		КлючФоновогоЗадания = Новый УникальныйИдентификатор;
		
		ПараметрыЗадания = Новый Структура("ВерсияИСЭСФ, КоллекцияСоответствиеЭСФ, КоллекцияПодписейЭСФ, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания", ВерсияИСЭСФ, КоллекцияСоответствиеЭСФ, КоллекцияПодписейИСЭСФ, ДанныеПрофилейИСЭСФ, КоллекцияУполномоченныйСотрудник, КлючФоновогоЗадания);
		ПараметрыВыполнения = ЭСФКлиентСерверПереопределяемый.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
		
		Если ДополнительныеПараметры.Свойство("НеПерезаполнятьОчередьОтправки") Тогда
			ПараметрыЗадания.Вставить("НеПерезаполнятьОчередьОтправки", ДополнительныеПараметры.НеПерезаполнятьОчередьОтправки);
		КонецЕсли;
		
		РезультатОтправки = ЭСФСерверПереопределяемый.ВыполнитьВФоне("ЭСФВызовСервера.ОтправитьИсходящиеInvoiceВФоне", ПараметрыЗадания, ПараметрыВыполнения);

	Иначе
	
		РезультатОтправки = ОтправитьИсходящиеInvoice(
			ВерсияИСЭСФ,
			КоллекцияАдресКоллекцииInvoiceXML, 
			КоллекцияПодписейИСЭСФ, 
			ДанныеПрофилейИСЭСФ			
			);	
			
	КонецЕсли;
	
	// Принудительное удаление, иначе значение не удалится.
	УдалитьИзВременногоХранилища(АдресКоллекцииInvoiceXML);

	Возврат РезультатОтправки;
		
КонецФункции

Функция ВыполнитьВФоне(Знач ИмяПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт

	Возврат ЭСФСерверПереопределяемый.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Процедура ОчиститьОчередьОтправкиЭСФ(Знач КоллекцияМассивЭСФ) Экспорт
	
	ЭСФСервер.ОчиститьОчередьОтправкиЭСФ(КоллекцияМассивЭСФ);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с внешней обработкой ОбменЭСФ.

Функция ИспользоватьВнешнююОбработку() Экспорт
	Возврат ЭСФСерверПереопределяемый.ИспользоватьВнешнююОбработку();	
КонецФункции

Функция ПодключитьВнешнююОбработку() Экспорт
	Возврат ЭСФСерверПереопределяемый.ПодключитьВнешнююОбработку();	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Универсальные служебные процедуры и функции

Функция ПоместитьДанныеВоВременноеХранилище(ПомещаемыеДанные) Экспорт 
	
	Возврат ПоместитьВоВременноеХранилище(ПомещаемыеДанные);
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(Знач Ссылка, Знач Реквизит) Экспорт
	
	Возврат ЭСфСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

// См. описание метода глобального контекста ЗаписьЖурналаРегистрации() 
Процедура СоздатьЗаписьЖурналаРегистрации(
	ИмяСобытия, 
	УровеньСтрокой = "", 
	ОбъектМетаданных = Неопределено, 
	Данные = Неопределено, 
	Комментарий = "", 
	РежимТранзакции = Неопределено) Экспорт
	
	Если УровеньСтрокой = "Информация" Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;	
	ИначеЕсли УровеньСтрокой = "Ошибка" Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;	
	ИначеЕсли УровеньСтрокой = "Предупреждение" Тогда
		Уровень = УровеньЖурналаРегистрации.Предупреждение;	
	ИначеЕсли УровеньСтрокой = "Примечание" Тогда
		Уровень = УровеньЖурналаРегистрации.Примечание;	
	Иначе
		Уровень = УровеньЖурналаРегистрации.Информация;	
	КонецЕсли;	
		
	ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, ОбъектМетаданных, Данные, Комментарий, РежимТранзакции); 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Записывает ссылку на счет-фактуру в реквизит СчетФактура, документа ЭСФ.
//
// Параметры:
//  СчетФактура - ДокументСсылка.СчетФактураПолученный, ДокументСсылка.СчетФактураВыданный - 
//   Счет-фактура, который необходимо записать в реквизит СчетФактура, документа ЭСФ.
//  ЭСФ - ДокументСсылка.ЭСФ - ЭСФ, у которого необходимо записать ссылку в реквизит СчетФактура.
//
Процедура СвязатьЭСФСоСчетомФактурой(Знач СчетФактура, ЭСФ) Экспорт 
	
	ОбъектЭСФ = ЭСФ.ПолучитьОбъект();
	ОбъектЭСФ.СчетФактура = СчетФактура;
	ОбъектЭСФ.Записать();
	
КонецПроцедуры

// Возвращает актуальные электронные счета-фактуры, которые возможно обновить.
// Сообщает о тех счетах-фактурах, для которых невозможно обновить актуальные ЭСФ.
//
// Параметры:
//  МассивСчетовФактур - Массив - Массив счетов-фактур, для которых необходимо найти актуальные ЭСФ, которые возможно обновить.
//   Каждый элемент массива должен иметь тип ДокументСсылка.СчетФактураВыданный, ДокументСсылка.СчетФактураПолученный.
//
// Возвращаемое значение:
//  Соответствие - Актуальные ЭСФ, которые можно обновить.
//   |- Ключ - ДокументСсылка.СчетФактура<Направление> - Счет-фактура из МассивСчетовФактур.
//   |- Значение - ДокументСсылка.ЭСФ - Актуальный ЭСФ, который возможно обновить.
// Возвращаемое значение содержит не все счета-фактуры из МассивСчетовФактур,
// а только те, для которых можно обновить актуальные электронные счета-фактуры.
//
Функция НовоеСоответствиеДляОбновленияАктуальныхЭСФ(Знач МассивСчетовФактур) Экспорт
	
	// Соответствие счетов-фактур и актуальных ЭСФ, для которых возможно обновить актуальный ЭСФ.
	СоответствиеДляОбновленияАктуальныхЭСФ = Новый Соответствие;
	
	// Массив счетов-фактру, у которых нет актуальных ЭСФ.
	ОтсутствуетАктуальныйЭСФ = Новый Массив;
	
	// Массив счетов-фактру, которые имеют актуальные ЭСФ в недопустимом состоянии. 
	НедопустимоеСостояниеЭСФ = Новый Массив;
	
	// Найти актуальные ЭСФ для счетов-фактур.
	СоответствиеАктуальныхЭСФ = ЭСФВызовСервера.НайтиАктуальныеЭСФПоСчетамФактурам(МассивСчетовФактур, "Состояние");
	
	// Заполнить коллекции СоответствиеДляОбновленияАктуальныхЭСФ, ОтсутствуетАктуальныйЭСФ, НедопустимоеСостояниеЭСФ.
	Для Каждого ЭлементСоответствия Из СоответствиеАктуальныхЭСФ Цикл
		
		СсылкаСчетФактура = ЭлементСоответствия.Ключ;
		ДанныеЭСФ = ЭлементСоответствия.Значение;
		
		Если ДанныеЭСФ = Неопределено Тогда
			ОтсутствуетАктуальныйЭСФ.Добавить(СсылкаСчетФактура);
		ИначеЕсли НЕ (ДанныеЭСФ.Состояние = Перечисления.СостоянияЭСФ.Сформирован
			ИЛИ ДанныеЭСФ.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером) Тогда
			НедопустимоеСостояниеЭСФ.Добавить(СсылкаСчетФактура);
		Иначе
			СоответствиеДляОбновленияАктуальныхЭСФ.Вставить(СсылкаСчетФактура, ДанныеЭСФ.ЭСФ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать и показать текст сообщения, если нельзя обновить все ЭСФ.
	Если СоответствиеДляОбновленияАктуальныхЭСФ.Количество() <> МассивСчетовФактур.Количество() Тогда
		
		ТекстСообщения = "";
		
		// Сформировать текст по счетам-фактурам, у которых нет актуальных ЭСФ.
		Если ОтсутствуетАктуальныйЭСФ.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно обновить актуальные электронные счета-фактуры для счетов-фактур:
	            |%СписокСчетовФактур%
	            |Так как счета-фактуры не имеют актуальных электронных счетов-фактур.'");
				
			СписокСчетовФактур = "";
			Для Каждого СсылкаСчетФактура Из ОтсутствуетАктуальныйЭСФ Цикл
				СписокСчетовФактур = СписокСчетовФактур + "- " + СсылкаСчетФактура + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокСчетовФактур%", СокрЛП(СписокСчетовФактур));
				
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по счетам-фактурам, у которых есть актуальные ЭСФ с недопустимым состоянием.
		Если НедопустимоеСостояниеЭСФ.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Невозможно обновить актуальные электронные счета-фактуры для счетов-фактур:
				|%СписокСчетовФактур%
				|Так как актуальные электронные счета-фактуры находятся в состояниях, недопустимых для обновления.
				|Возможно обновление электронных счетов фактур только в состоянии ""%Сформирован%"", ""%ОтклоненСервером%"".'");
				
			СписокСчетовФактур = "";
			Для Каждого СсылкаСчетФактура Из НедопустимоеСостояниеЭСФ Цикл
				СписокСчетовФактур = СписокСчетовФактур + "- " + СсылкаСчетФактура + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокСчетовФактур%", СокрЛП(СписокСчетовФактур));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сформирован%", Перечисления.СостоянияЭСФ.Сформирован);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтклоненСервером%", Перечисления.СостоянияЭСФ.ОтклоненСервером);
			
		КонецЕсли;
		
		ТекстСообщения = СокрЛП(ТекстСообщения) + Символы.ПС + Символы.ПС;
		
		// Сформировать текст по счетам-фактурам, у которых можно обновить актуальные ЭСФ.
		Если СоответствиеДляОбновленияАктуальныхЭСФ.Количество() <> 0 Тогда
			
			ТекстСообщения = ТекстСообщения + НСтр(
				"ru = 'Обновление актуальных электронных счетов-фактур возможно только для счетов-фактур:
                 |%СписокСчетовФактур%'");
				
			СписокСчетовФактур = "";
			Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхЭСФ Цикл
				СписокСчетовФактур = СписокСчетовФактур + "- " + ЭлементСоответствия.Ключ + Символы.ПС;	
			КонецЦикла;
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СписокСчетовФактур%", СокрЛП(СписокСчетовФактур));
			
		КонецЕсли;
		
		Сообщить(СокрЛП(ТекстСообщения));
		
	КонецЕсли;
	
	Возврат СоответствиеДляОбновленияАктуальныхЭСФ;
	
КонецФункции

Процедура ОбновитьАктуальныеЭСФ(Знач СоответствиеДляОбновленияАктуальныхЭСФ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ЭлементСоответствия Из СоответствиеДляОбновленияАктуальныхЭСФ Цикл
			СсылкаСчетФактура = ЭлементСоответствия.Ключ;
			ОбъектЭСФ = ЭлементСоответствия.Значение.ПолучитьОбъект();
			ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ);
			ЭСФСервер.ЗаполнитьИсходящийЭСФ(СсылкаСчетФактура, ОбъектЭСФ);
			ОбъектЭСФ.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭСФВызовСервера.ОбновитьАктуальныеЭСФ'"), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьСтатусыЭСФПоИдентификаторам(Знач КоллекцияСгруппированныхЭСФ, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		СгруппированныйМассивЭСФ = СгруппированныеЭСФ.Значение;
		
		ДанныеСтруктурнойЕдиницы = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		// Получить МассивИдентификаторовВходящихЭСФ и МассивИдентификаторовИсходящихЭСФ из МассивЭСФ.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭСФ.Направление,
		|	ЭСФ.Идентификатор
		|ИЗ
		|	Документ.ЭСФ КАК ЭСФ
		|ГДЕ
		|	ЭСФ.Ссылка В(&МассивЭСФ)";	
		Запрос.УстановитьПараметр("МассивЭСФ", СгруппированныйМассивЭСФ);	
		Выборка = Запрос.Выполнить().Выбрать();	
		МассивИдентификаторовВходящихЭСФ = Новый Массив;
		МассивИдентификаторовИсходящихЭСФ = Новый Массив;	
		Пока Выборка.Следующий() Цикл
			Если Выборка.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
				МассивИдентификаторовВходящихЭСФ.Добавить(Выборка.Идентификатор);
			Иначе // Выборка.Направление = Перечисления.НаправленияЭСФ.Исходящий
				МассивИдентификаторовИсходящихЭСФ.Добавить(Выборка.Идентификатор);	
			КонецЕсли;
		КонецЦикла;
		
		ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
		
		Если МассивИдентификаторовВходящихЭСФ.Количество() <> 0 Тогда
			ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовВходящихЭСФ, Перечисления.НаправленияЭСФ.Входящий, ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
		КонецЕсли;
		
		Если МассивИдентификаторовИсходящихЭСФ.Количество() <> 0 Тогда
			ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторовИсходящихЭСФ, Перечисления.НаправленияЭСФ.Исходящий, ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
		КонецЕсли;
		
		ЭСФСервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьДокументыЭСФИзИСЭСФ(Знач КоллекцияСгруппированныхЭСФ, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		СгруппированныйМассивЭСФ = СгруппированныеЭСФ.Значение;
		
		ДанныеСтруктурнойЕдиницы = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		ОбработкаОбменЭСФ.ОбновитьДокументыЭСФИзИСЭСФ(СгруппированныйМассивЭСФ, ДанныеПрофиляИСЭСФ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(Знач КоллекцияСгруппированныхЭСФ, Знач ДанныеПрофилейИСЭСФ) Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	
	Для Каждого СгруппированныеЭСФ Из КоллекцияСгруппированныхЭСФ Цикл
		
		СтруктурнаяЕдиница = СгруппированныеЭСФ.Ключ;
		СгруппированныйМассивЭСФ = СгруппированныеЭСФ.Значение;
		
		ДанныеСтруктурнойЕдиницы = ДанныеПрофилейИСЭСФ.Получить(СтруктурнаяЕдиница);
		
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ДанныеСтруктурнойЕдиницы.ПрофильИСЭСФ);
		
		ДанныеПрофиляИСЭСФ.ТекущийПарольАутентификации = ДанныеСтруктурнойЕдиницы.ПарольИСЭСФ;
		
		ОбработкаОбменЭСФ.ОбновитьДокументыЭСФПоНомеруИДате(СгруппированныйМассивЭСФ, ДанныеПрофиляИСЭСФ);
		
	КонецЦикла;
	
КонецПроцедуры

// При начале работы системы, в файловом варианте отбираем ЭСФ очереди только по текущему пользователю,
// в данном режиме работы нет возможности отследить процесс отправки других пользователей
// В серверном варианте работы отображаем 
// - ЭСФ, зависшие на этапе подписания текущего пользователя
// - ЭСФ, завершенных аварийно или отмененных фоновых заданий текущего пользователя
// - ЭСФ, завершенных аварийно или отмененных фоновых заданий всех пользователей, если доступна роль безусловного редактирования
Функция ПараметрыПриНачалеРаботыСистемы() Экспорт
	
	Параметры = Новый Структура;
	
	ИмяПараметра = ЭСФКлиентСервер.ИмяПараметраСинхронизацияСИСЭСФПриЗапуске();
	ЗначениеПараметра = ЭСФСерверПереопределяемый.СинхронизацияСИСЭСФПриЗапуске();
	Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	Возврат Параметры;
	
КонецФункции

Функция СгруппироватьЭСФПоСтруктурнымЕдиницам(Знач МассивЭСФ) Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	КоллекцияСгруппированныхЭСФ = ОбработкаОбменЭСФ.Переопределяемый_СгруппироватьЭСФПоСтруктурнымЕдиницам(МассивЭСФ);
	Возврат КоллекцияСгруппированныхЭСФ;
	
КонецФункции

// См. НайтиАктуальныеЭСФПоСчетамФактурам()
Функция НайтиАктуальныеЭСФПоСчетамФактурам(Знач МассивСчетовФактур, Знач ИменаРеквизитов = Неопределено) Экспорт
	
	Возврат ЭСФСервер.НайтиАктуальныеЭСФПоСчетамФактурам(МассивСчетовФактур, ИменаРеквизитов);
	
КонецФункции

Функция НоваяКоллекцияСостоянийЭСФ(МассивДанныхСчетовФактур) Экспорт
	
	КоллекцияСостоянийЭСФ = Новый Соответствие;
	
	МассивСчетовФактур = Новый Массив;
	Для Каждого ДанныеСчетаФактуры Из МассивДанныхСчетовФактур Цикл
		МассивСчетовФактур.Добавить(ДанныеСчетаФактуры.СчетФактура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктуальныеЭСФ.СчетФактура КАК СчетФактура,
	|	АктуальныеЭСФ.Состояние КАК Состояние,
	|	ПРЕДСТАВЛЕНИЕ(АктуальныеЭСФ.Состояние) КАК Представление
	|ИЗ
	|	РегистрСведений.АктуальныеЭСФ КАК АктуальныеЭСФ
	|ГДЕ
	|	АктуальныеЭСФ.СчетФактура В(&МассивСчетовФактур)";
	
	Запрос.УстановитьПараметр("МассивСчетовФактур", МассивСчетовФактур);
	ТаблицаСтатусовЭСФ = Запрос.Выполнить().Выгрузить();
	
	КоллекцияСостоянийЭСФ = Новый Соответствие;
	
	ПараметрыОтбора = Новый Структура;
	Для Каждого ДанныеСчетаФактуры Из МассивДанныхСчетовФактур Цикл
		
		ПараметрыОтбора.Вставить("СчетФактура", ДанныеСчетаФактуры.СчетФактура);
		МассивНайденныхСтрок = ТаблицаСтатусовЭСФ.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхСтрок.Количество() <> 0 Тогда
			СостояниеЭСФ = Новый Структура;
			СостояниеЭСФ.Вставить("Состояние",     МассивНайденныхСтрок[0].Состояние);
			СостояниеЭСФ.Вставить("Представление", МассивНайденныхСтрок[0].Представление);
		Иначе
			СостояниеЭСФ = Новый Структура;
			СостояниеЭСФ.Вставить("Состояние",     Перечисления.СостоянияЭСФ.ПустаяСсылка());
			СостояниеЭСФ.Вставить("Представление", "");	
		КонецЕсли;
		
		КоллекцияСостоянийЭСФ.Вставить(ДанныеСчетаФактуры.СчетФактура, СостояниеЭСФ);
		
	КонецЦикла;
	
	Возврат КоллекцияСостоянийЭСФ;
	
КонецФункции

Функция НовыйОтборФормыВыбораЭСФ(Знач СсылкаСчетФактураПолученный) Экспорт
	
	СтруктураОтборов = Новый Структура("Отбор, ПользовательскиеНастройки");
	
	Отбор = Новый Структура;
	
	// Отбор по направлению: Входящий.
	Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));
	
	// Отбор по виду ЭСФ: Обычный, Дополнительный, Исправленный.
	ВидЭСФ = ЭСФКлиентСерверПереопределяемый.ВидЭСФ(СсылкаСчетФактураПолученный);
	Отбор.Вставить("Вид", ВидЭСФ);
	
	// Отбор по номеру и дате.
	НомерДатаСФ = ЭСФКлиентСерверПереопределяемый.НомерДатаСФ(СсылкаСчетФактураПолученный);
	
	Если ЗначениеЗаполнено(НомерДатаСФ.НомерСФ) Тогда
		Отбор.Вставить("Номер", НомерДатаСФ.НомерСФ);
	КонецЕсли;
	
	Отбор.Вставить("Дата" , НомерДатаСФ.ДатаСФ);
	
	// Отбор по организации и структурному подразделению.
	Отбор.Вставить("Организация", СсылкаСчетФактураПолученный.Организация);
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Отбор.Вставить("СтруктурноеПодразделение", СсылкаСчетФактураПолученный.СтруктурноеПодразделение);
	КонецЕсли;
	                                                                 
	// Отбор по счету-фактуре: Пустой счет-фактура.
	МассивПустыхСчетовФактур = Новый Массив;
	МассивПустыхСчетовФактур.Добавить(Неопределено);
	МассивПустыхСчетовФактур.Добавить(ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка"));
	МассивПустыхСчетовФактур.Добавить(ПредопределенноеЗначение("Документ.СчетФактураПолученный.ПустаяСсылка"));
	Отбор.Вставить("СчетФактура", МассивПустыхСчетовФактур);
	
	СтруктураОтборов.Отбор = Отбор;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	Если ЗначениеЗаполнено(СсылкаСчетФактураПолученный.Контрагент) Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Контрагент",  ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СсылкаСчетФактураПолученный, ЭСФКлиентСерверПереопределяемый.ИмяРеквизитаПоставщикаСчетаФактуры()));
	КонецЕсли;

	СтруктураОтборов.ПользовательскиеНастройки = ПользовательскиеНастройки;
	
	Возврат СтруктураОтборов;
	
КонецФункции

Функция ВалютаРегламентированногоУчета() Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ВалютаРегламентированногоУчета();
	
КонецФункции

Функция ИнфомацияПоФайлу(Знач ПолноеИмяФайла) Экспорт
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Структура = Новый Структура;	
	Структура.Вставить("Имя", Файл.Имя);
	Структура.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	Структура.Вставить("ПолноеИмя", Файл.ПолноеИмя);
	Структура.Вставить("Путь", Файл.Путь);
	Структура.Вставить("Расширение", Файл.Расширение);
	
	Возврат Структура
	
КонецФункции

// Функция написана для соблюдения стандарта Работа в разных часовых поясах
//
Функция ТекущаяДатаНаСервере() Экспорт

	Возврат ТекущаяДатаСеанса(); 

КонецФункции

Функция СоздатьСписокИсходящихЭСФ(МассивСчетовФактур) Экспорт
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьСписокИсходящихЭСФ(МассивСчетовФактур);	
КонецФункции

Функция РеквизитыПользователя(Пользователь) Экспорт

	Возврат ЭСФСерверПереопределяемый.РеквизитыПользователя(Пользователь);

КонецФункции

//++ НЕ ЭСФ

// Проверяет наличие ЭДВС у документа основания
//
Функция НаличиеЭДВС(ДокументСсылка) Экспорт
	
	Возврат ВССерверПереопределяемый.НаличиеЭДВС(ДокументСсылка);
	
КонецФункции

//-- НЕ ЭСФ

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов) Экспорт
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции фоновых заданий

// Вызывает процедуру ПолучитьНовыеЭСФ для фоновых заданий
Функция ПолучитьНовыеЭСФ(Знач ПараметрыВыгрузки, Знач АдресХранилища = Неопределено) Экспорт
	
	Возврат ЭСФСервер.ПолучитьНовыеЭСФ(ПараметрыВыгрузки);
	
КонецФункции

Процедура ОбновитьДокументыЭСФИзИСЭСФВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт
	
	ОбновитьДокументыЭСФИзИСЭСФ(ПараметрыВыгрузки.КоллекцияСгруппированныхЭСФ, ПараметрыВыгрузки.ДанныеПрофилейИСЭСФ);
	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДатеВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт

	ОбновитьДокументыЭСФИзИСЭСФПоНомеруИДате(ПараметрыВыгрузки.КоллекцияСгруппированныхЭСФ, ПараметрыВыгрузки.ДанныеПрофилейИСЭСФ);

КонецПроцедуры

Функция ОтправитьИсходящиеInvoiceВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт

	ЭСФСервер.ЗаполнитьДанныеФоновогоЗаданияВОчередиОтправкиЭСФ(ПараметрыВыгрузки.КоллекцияСоответствиеЭСФ, ПараметрыВыгрузки.КлючФоновогоЗадания);
	
	НеПерезаполнятьОчередьОтправки = ПараметрыВыгрузки.Свойство("НеПерезаполнятьОчередьОтправки");
	
	Результат = ОтправитьИсходящиеInvoice(ПараметрыВыгрузки.ВерсияИСЭСФ, ПараметрыВыгрузки.КоллекцияСоответствиеЭСФ, ПараметрыВыгрузки.КоллекцияПодписейЭСФ, ПараметрыВыгрузки.ДанныеПрофилейИСЭСФ, ПараметрыВыгрузки.КоллекцияУполномоченныйСотрудник, НеПерезаполнятьОчередьОтправки);
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьСтатусыЭСФПоИдентификаторамВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт
	
	Результат = Неопределено;
	МассивЭСФ = ПараметрыВыгрузки.МассивЭСФ;
	ДанныеПрофиляИСЭСФ = ПараметрыВыгрузки.ДанныеПрофиляИСЭСФ;
	
	// Получить МассивИдентификаторовВходящихЭСФ и МассивИдентификаторовИсходящихЭСФ из МассивЭСФ.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Направление,
	|	ЭСФ.Идентификатор
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка В(&МассивЭСФ)";	
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);	
	МассивИдентификаторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");	
	
	ИдентификаторСессии = ЭСФСервер.ОткрытьСессию(ДанныеПрофиляИСЭСФ);
	
	Если МассивИдентификаторов.Количество() <> 0 Тогда
		ЭСФСервер.ОбновитьСтатусыЭСФПоИдентификаторам(МассивИдентификаторов, ПараметрыВыгрузки.НаправлениеЭСФ, ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	КонецЕсли;
	
	ЭСФСервер.ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии);
	
	Возврат Результат;
		
КонецФункции

Функция ВыполнитьЗапросНаИзменениеСтатусовВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт
	
	ДанныеИзмененияСтатусов = ВыполнитьЗапросНаИзменениеСтатусов(ПараметрыВыгрузки.Действие, ПараметрыВыгрузки.ТекстЗапроса, ПараметрыВыгрузки.ДанныеПрофиляИСЭСФ);
	ПоместитьВоВременноеХранилище(ДанныеИзмененияСтатусов, АдресХранилища);
	Возврат ДанныеИзмененияСтатусов;

КонецФункции

Функция ИзменитьСтатусыЭСФВФоне(Знач ПараметрыВыгрузки, Знач АдресХранилища) Экспорт

	ДанныеИзмененияСтатусов = ИзменитьСтатусыЭСФ(ПараметрыВыгрузки.Действие, ПараметрыВыгрузки.КоллецияДляИзмененияСтатусов, ПараметрыВыгрузки.ДанныеКлючаЭЦП, ПараметрыВыгрузки.ДанныеПрофиляИСЭСФ);
	ПоместитьВоВременноеХранилище(ДанныеИзмененияСтатусов, АдресХранилища);
	Возврат ДанныеИзмененияСтатусов;
	
КонецФункции
	
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания) Экспорт
	
	СообщениеПользователю = ЭСФСерверПереопределяемый.СообщенияФоновогоЗадания(ИдентификаторЗадания);

	Адрес = ПоместитьВоВременноеХранилище(СообщениеПользователю);
	
	Возврат Адрес;
	
КонецФункции

Функция ПолучитьКодТНВЭДВызовСервера(СтрокаКодТНВЭД) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ПолучитьКодТНВЭДСервер(СтрокаКодТНВЭД);
	
КонецФункции

Функция ПолучитьДанныеЕдиницыИзмерения(Ссылка) Экспорт
	
	Возврат ЭСФСерверПереопределяемый.ПолучитьДанныеЕдиницыИзмерения(Ссылка);
	
КонецФункции
