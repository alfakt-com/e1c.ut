////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеТорговлейДляКазахстана.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеТорговлейДляКазахстана" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "3.4.4.91";
	Описание.ТребуемыеПодсистемы.Добавить("УправлениеТорговлей" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", ""));
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно

#Область НачальноеЗаполнение

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;

#КонецОбласти

#Область Обработчики_3_2_1

	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "3.2.1.1"; 
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОтключитьНеиспользуемыеРегламентныеЗадания";

#КонецОбласти

#Область Версия_3_2_2

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ЗаполнитьРеквизитыСправочникаНомераГТД";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьНомераГТДКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Справочник.НомераГТД";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет стандартный реквизит ""Наименование"" в справочнике ""Номера ГТД"" по данным реквизита ""Код"" и реквизит ""Способ происхождения"" значением ""ЕТТ"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ВыкупВозвратнойТарыУПоставщикаПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьВыкупВозвратнойТарыУПоставщикаКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.ВыкупВозвратнойТарыУПоставщика";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.КорректировкаПриобретенияПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьКорректировкаПриобретенияКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.КорректировкаПриобретения";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОтчетПереработчикаПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьОтчетПереработчикаКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.ОтчетПереработчика";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ПередачаТоваровМеждуОрганизациямиПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьПередачаТоваровМеждуОрганизациямиКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.ПередачаТоваровМеждуОрганизациями";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");


	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ПриобретениеТоваровУслугПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьПриобретениеТоваровУслугКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.ПриобретениеТоваровУслуг";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");


	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.23";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ПриобретениеУслугПрочихАктивовПересчитатьСуммуНДСВзаиморасчетов";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистироватьПриобретениеУслугПрочихАктивовКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.БлокируемыеОбъекты = "Документ.ПриобретениеУслугПрочихАктивов";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет пересчет реквизита ""Сумма НДС взаиморасчетов"" для документов, в которых валюта документа совпадает с валютой взаиморасчетов.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.29";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.СкорректироватьДлинуБИКвКлассификатореБанков";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует длину БИК в справочнике ""Классификатор банков"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.2.30";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиАктивовПассивов.УстановитьПризнакАктивПассивУПредопределенныхЭлементов";
	Обработчик.Комментарий = НСтр("ru = 'Установливает признак активности/пассивности для препределенных элементов плана видов характеристик ""Статьи активов/пассивов"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.47";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьДанныеЗаявлениеОВвозеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеЗаявлениеОВвозеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит НомерТД в документе ""Заявление о ввозе"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.47";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьДанныеСчетФактураНалоговыйАгентДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеСчетФактураНалоговыйАгентКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 5;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураНалоговыйАгент";
	Обработчик.ИзменяемыеОбъекты = "Документ.СчетФактураНалоговыйАгент";
	Обработчик.БлокируемыеОбъекты = "Документ.СчетФактураНалоговыйАгент";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит НомерТД в документе ""Регистрация НДС налогового агента"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

#КонецОбласти

#Область Версия_3_4_4

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.1";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.СтавкиНДС.ЗаполнитьСтавкуБезНДСНеРК";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ставку НДС ""Без НДС - не РК"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.2";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.СтавкиНДС.ЗаполнитьСтавкуБезНДСНеРК";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет ставку НДС ""Без НДС - не РК"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.2";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьДанныеПартииТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеПартииТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров,"
		+ "РегистрНакопления.ПартииТоваровОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииТоваровОрганизаций";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Очищает движения по регистру ""Партии товаров организаций"" в документе ""Заявление о ввозе товаров из ЕАЭС"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьПодключаемоеОборудованиеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеПодключаемоеОборудованиеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ПодключаемоеОборудование";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ПодключаемоеОборудование";
	Обработчик.БлокируемыеОбъекты = "Справочник.ПодключаемоеОборудование";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет настройки подключаемого обрудования типа ""Webkassa"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьДанныеЗаявленияОВвозеБезТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеЗаявленияОВвозеБезТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров,"
		+ "РегистрНакопления.ТоварыОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ТоварыОрганизаций";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ТоварыОрганизаций";
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения по регистру ""Товары организаций"" в документе ""Заявление о ввозе товаров из ЕАЭС"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбработатьДанныеДатыПоступленияТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУТК.ЗарегистрироватьДанныеДатыПоступленияТоваровОрганизацийДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЗаявлениеОВвозеТоваров,"
		+ "РегистрСведений.ДатыПоступленияТоваровОрганизаций";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ДатыПоступленияТоваровОрганизаций";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ДатыПоступленияТоваровОрганизаций";
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения по регистру ""Даты поступления товаров организаций"" по документам ""Заявление о ввозе товаров из ЕАЭС"".'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.47";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ОбновитьПоставляемыеДрайвераWebkassa";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет поставляемые драйвера Webkassa и помечает устаревшие драйвера на удаление.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.4.91";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.УстановитьЗначенияСвязанныхОпцийВестиУчетТабачнойПродукции";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет настройки ведения учета табачной продукции.'");
	
#КонецОбласти

#КонецОбласти

#Область Отложенно



#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейДляКазахстанаБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУТК.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейДляКазахстанаБазовая" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
//
// Подробнее: см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УТ 3.
//
Процедура ПервыйЗапуск() Экспорт

	ЗаполнитьКонстантыПоУмолчанию();
	
	Справочники.СтавкиНДС.ЗаполнитьРеквизитыПредопределенныхСтавокНДС();
	
	ОбновитьПоставляемыеДрайвера();
	
КонецПроцедуры

// Заполняет константы значениями по умолчанию.
// Вызывается при первоначальном заполнении ИБ после заполнения следующих данных
//	- Справочник.ЕдиницыИзмерения
//
Процедура ЗаполнитьКонстантыПоУмолчанию()
	
	УстановитьВалютуРегламентированногоУчета();
	УстановитьВалютуУправленческогоУчета();
	ЗаполнитьКонстантуГеографическаяСхемаДляОтчетов();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Процедура устанавливает значение валюты регламентированного учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРегламентированногоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРегламентированногоУчета.Получить()) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Код = ""398""");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
			КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			
			Справочники.Валюты.ЗаполнитьВалютыПоУмолчанию();
			УстановитьВалютуРегламентированногоУчета();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Константы.ВалютаРегламентированногоУчета.Установить(Выборка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает значение валюты управленческого учета.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуУправленческогоУчета()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаУправленческогоУчета.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления
			|	И Валюты.Код = ""398""");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаУправленческогоУчета.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет новую константу "ГеографическаяСхемаДляОтчетов"
//
Процедура ЗаполнитьКонстантуГеографическаяСхемаДляОтчетов() Экспорт
	
	Название = НСтр("ru = 'Регионы Казахстана'");
	МакетГеоСхемы = ПолучитьОбщийМакет("ГеографическаяСхемаКазахстанРегионыИСтолицы");
	ГеоСхема = Новый ГеографическаяСхема;
	ГеоСхема.Вывести(МакетГеоСхемы);
	СтруктураХраненияСхемы = Новый Структура("Название, ГеоСхема");
	СтруктураХраненияСхемы.Вставить("Название", Название);
	СтруктураХраненияСхемы.Вставить("ГеоСхема", ГеоСхема);
	Константы.ГеографическаяСхемаДляОтчетов.Установить(Новый ХранилищеЗначения(СтруктураХраненияСхемы));
	
КонецПроцедуры

//Обновляет поставляемые драйверы в составе конфигурации (добавление драйвера WebKassa).
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаВерсиюПроф

// Обработчик перехода на версию ПРОФ.
//
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

Процедура ОтключитьНеиспользуемыеРегламентныеЗадания() Экспорт
	
	НеиспользуемыеЗадания = Новый Структура("ЗагрузкаКлассификатораБанков");
	
	МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	
	Для Каждого Задание Из МассивЗаданий Цикл
		
		Если НеиспользуемыеЗадания.Свойство(Задание.Метаданные.Имя) И Задание.Использование Тогда
			Задание.Использование = Ложь;
			Задание.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбработчикиПереходаНаВерсию_3_2_2

Процедура ЗарегистироватьНомераГТДКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомераГТД.Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.СпособПроисхождения = &ПустойСпособПроисхождения
	|";
	
	Запрос.УстановитьПараметр("ПустойСпособПроисхождения", Перечисления.СпособыПроисхожденияТоваров.ПустаяСсылка());
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСправочникаНомераГТД(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.НомераГТД";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомераГТД.Ссылка КАК Ссылка,
	|	НомераГТД.Код КАК Код,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС) КАК СпособПроисхождения
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТДляОбработки КАК ДанныеКОбработке
	|	ПО
	|		НомераГТД.Ссылка = ДанныеКОбработке.Ссылка
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Код) Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.НомераГТД");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			СправочникОбъект.Наименование = Выборка.Код;
			СправочникОбъект.СпособПроисхождения = Выборка.СпособПроисхождения;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать номер ГТД: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.НомераГТД, 
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистироватьВыкупВозвратнойТарыУПоставщикаКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика.Товары КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ВыкупВозвратнойТарыУПоставщика КАК Операция
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Строки.СуммаНДС <> Строки.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ВыкупВозвратнойТарыУПоставщикаПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ВыкупВозвратнойТарыУПоставщика";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ВыкупВозвратнойТарыУПоставщика");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ДокументОбъект, "Товары");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ВыкупВозвратнойТарыУПоставщика,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистироватьКорректировкаПриобретенияКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.КорректировкаПриобретения.Расхождения КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаПриобретения КАК Операция
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Строки.СуммаНДС <> Строки.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура КорректировкаПриобретенияПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.КорректировкаПриобретения";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаПриобретения");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ДокументОбъект, "Расхождения");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.КорректировкаПриобретения,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистироватьОтчетПереработчикаКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ОтчетПереработчика КАК Операция
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Операция.СуммаНДС <> Операция.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОтчетПереработчикаПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ОтчетПереработчика";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОтчетПереработчика");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			Если ДокументОбъект.СуммаСНДС = ДокументОбъект.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаНДСВзаиморасчетов = ДокументОбъект.СуммаНДС;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ОтчетПереработчика,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистироватьПередачаТоваровМеждуОрганизациямиКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК Операция
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Строки.СуммаНДС <> Строки.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПередачаТоваровМеждуОрганизациямиПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ДокументОбъект, "Товары");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПередачаТоваровМеждуОрганизациями,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


Процедура ЗарегистироватьПриобретениеТоваровУслугКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеТоваровУслуг КАК Операция
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Строки.СуммаНДС <> Строки.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПриобретениеТоваровУслугПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриобретениеТоваровУслуг";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриобретениеТоваровУслуг");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ДокументОбъект, "Товары");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриобретениеТоваровУслуг,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры


Процедура ЗарегистироватьПриобретениеУслугПрочихАктивовКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операция.Ссылка
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПриобретениеУслугПрочихАктивов КАК Операция
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|ГДЕ
	|	Операция.Валюта = Операция.ВалютаВзаиморасчетов
	|	И Строки.СуммаНДС <> Строки.СуммаНДСВзаиморасчетов
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ПриобретениеУслугПрочихАктивовПересчитатьСуммуНДСВзаиморасчетов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриобретениеУслугПрочихАктивов";
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВТ);
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКОбработке.Ссылка
	|ИЗ
	|	ВТДляОбработки КАК ДанныеКОбработке
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ПриобретениеУслугПрочихАктивов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект = Неопределено Тогда
				
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				Продолжить;
				
			КонецЕсли;
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ДокументОбъект, "Расходы");
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%",  Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ПриобретениеУслугПрочихАктивов,
				Выборка.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура СкорректироватьДлинуБИКвКлассификатореБанков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Банки.Ссылка КАК Ссылка,
	|	Банки.Код КАК Код
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если РезультатЗапроса.Код = СокрЛП(РезультатЗапроса.Код) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.Код = СокрЛП(РезультатЗапроса.Код);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеЗаявлениеОВвозеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваровТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваровТовары
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровТовары.НомерТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И НЕ ЗаявлениеОВвозеТоваровТовары.УдалитьНомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеЗаявлениеОВвозеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.ЗаявлениеОВвозеТоваров;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки( Параметры.Очередь,
																						ПолноеИмяОбъекта,
																						МенеджерВременныхТаблиц,
																						ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	Товары.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.УдалитьНомерГТД КАК УдалитьНомерГТД
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|		ПО (Товары.Ссылка = ОбъектыДляОбработки.Ссылка)
	|ГДЕ
	|	Товары.НомерТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И НЕ Товары.УдалитьНомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВерсияДанных, Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	ВыборкаПоВерсиям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВерсиям.Следующий() Цикл
		ВыборкаПоДокументам = ВыборкаПоВерсиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(ВыборкаПоДокументам.Ссылка);
				Продолжить;
			КонецПопытки;
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(ВыборкаПоДокументам.Ссылка, 
																					ВыборкаПоДокументам.ВерсияДанных, 
																					Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
		
			Попытка
				Выборка = ВыборкаПоДокументам.Выбрать();
				Пока Выборка.Следующий() Цикл
					ДокументОбъект.Товары[Выборка.НомерСтроки - 1].НомерТД = Выборка.УдалитьНомерГТД;
					ДокументОбъект.Товары[Выборка.НомерСтроки - 1].УдалитьНомерГТД = Неопределено;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоДокументам.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеСчетФактураНалоговыйАгентКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураНалоговыйАгент.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК СчетФактураНалоговыйАгент
	|ГДЕ
	|	СчетФактураНалоговыйАгент.ДокументОснование = Неопределено";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеСчетФактураНалоговыйАгентДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.СчетФактураНалоговыйАгент;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки( Параметры.Очередь,
																						ПолноеИмяОбъекта,
																						МенеджерВременныхТаблиц,
																						ДополнительныеПараметры);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка,
	|	ДокументыПоступления.Ссылка.ВерсияДанных КАК ВерсияДанных,
	|	ДокументыПоступления.Документ КАК Документ
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураНалоговыйАгент.УдалитьДокументыПоступления КАК ДокументыПоступления
	|		ПО (ДокументыПоступления.Ссылка = ОбъектыДляОбработки.Ссылка)
	|			И (ДокументыПоступления.НомерСтроки = 1)
	|ГДЕ
	|	ОбъектыДляОбработки.Ссылка.ДокументОснование = Неопределено
	|ИТОГИ ПО
	|	ВерсияДанных, Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	ВыборкаПоВерсиям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоВерсиям.Следующий() Цикл
		ВыборкаПоДокументам = ВыборкаПоВерсиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
				Блокировка.Заблокировать();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(ВыборкаПоДокументам.Ссылка);
				Продолжить;
			КонецПопытки;
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(ВыборкаПоДокументам.Ссылка, 
																					ВыборкаПоДокументам.ВерсияДанных, 
																					Параметры.Очередь);
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
		
			Попытка
				Выборка = ВыборкаПоДокументам.Выбрать();
				Пока Выборка.Следующий() Цикл
					ДокументОбъект.ДокументОснование = Выборка.Документ;
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, , , РежимЗаписиДокумента.Запись);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаПоДокументам.Ссылка);
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПереходаНаВерсию_3_4_4

Процедура ЗарегистрироватьДанныеПартииТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПартииТоваровОрганизаций";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииТоваровОрганизаций КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ЗаявлениеОВвозеТоваров)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеПартииТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПартииТоваровОрганизаций";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ПартииТоваровОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры


Процедура ЗарегистрироватьДанныеПодключаемоеОборудованиеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|		ПО ПодключаемоеОборудование.ДрайверОборудования = ДрайверыОборудования.Ссылка
	|ГДЕ
	|	ДрайверыОборудования.ОбработчикДрайвера = &ОбработчикДрайвера";
	
	Запрос.УстановитьПараметр("ОбработчикДрайвера", Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьПодключаемоеОборудованиеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ПодключаемоеОборудование";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Идентификатор = ОбъектыДляОбработки.Ссылка;
			ДанныеУстройства = МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
			ПараметрыОборудования = ДанныеУстройства.Параметры;
			
			Если Не ПараметрыОборудования.Свойство("ИспользоватьПринтерЧеков") Тогда
				
				времАвтоматическаяПечатьЧека  = Неопределено;
				времШиринаЛенты               = Неопределено;
				
				ПараметрыОборудования.Свойство("АвтоматическаяПечатьЧека", времАвтоматическаяПечатьЧека);
				ПараметрыОборудования.Свойство("ШиринаЛенты"             , времШиринаЛенты);
				
				АвтоматическаяПечатьЧека = ?(времАвтоматическаяПечатьЧека  = Неопределено, Ложь, времАвтоматическаяПечатьЧека);
				ШиринаЛенты = ?(времШиринаЛенты = Неопределено, "24", времШиринаЛенты);
				ШиринаЛенты = ?(АвтоматическаяПечатьЧека, ШиринаЛенты, "24");
				
				НовыеПараметрыОборудования = Новый Структура;
				НовыеПараметрыОборудования.Вставить("АвтоматическаяПечатьЧека", АвтоматическаяПечатьЧека);
				НовыеПараметрыОборудования.Вставить("ШиринаЛенты"             , ШиринаЛенты);
				//принтеры чеков
				НовыеПараметрыОборудования.Вставить("ПринтерЧеков"            , Неопределено);
				НовыеПараметрыОборудования.Вставить("ИспользоватьПринтерЧеков", Ложь);
				
				Объект.Параметры = Новый ХранилищеЗначения(НовыеПараметрыОборудования);
				
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеЗаявленияОВвозеБезТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизацийОбороты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ДанныеРегистра
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Обороты(, , Регистратор, ) КАК ТоварыОрганизацийОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТоварыОрганизацийОбороты.Регистратор) = ТИП(Документ.ЗаявлениеОВвозеТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеОВвозеТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ЗаявлениеОВвозеТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|
	|ГДЕ
	|	ЗаявлениеОВвозеТоваров.Ссылка.Проведен
	|	И НЕ ЗаявлениеОВвозеТоваров.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_ДанныеРегистра.Регистратор КАК Регистратор
	|				ИЗ
	|					ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра)
	|	И СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеЗаявленияОВвозеБезТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ТоварыОрганизаций";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Регистратор,
	|	Товары.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Товары.Ссылка.Организация КАК Организация,
	|	Товары.АналитикаУчетаНоменклатуры.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.НомерТД КАК НомерГТД,
	|	Товары.Количество КАК Количество,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ОрганизацияОтгрузки,
	|	ИСТИНА КАК Первичное
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|
	|ГДЕ
	|	Товары.Ссылка = &Регистратор
	|	И СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			
			Набор = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Регистратор);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.КорректировкаОбособленногоУчетаЗапасов,
				,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеДатыПоступленияТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ОбработатьДанныеДатыПоступленияТоваровОрганизацийДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ДатыПоступленияТоваровОрганизаций";
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "Документ.ЗаявлениеОВвозеТоваров") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = "РегистрСведений.ДатыПоступленияТоваровОрганизаций";
	
	Параметры.ОбработкаЗавершена = Истина;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявлениеТаблицаТовары.Ссылка.Дата КАК ДатаПоступления,
	|	ЗаявлениеТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЗаявлениеТаблицаТовары.Характеристика КАК Характеристика,
	|	ЗаявлениеТаблицаТовары.Серия КАК Серия,
	|	ЗаявлениеТаблицаТовары.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	ЗаявлениеТаблицаТовары.ВидЗапасов КАК ВидЗапасов,
	|	ЗаявлениеТаблицаТовары.НомерТД КАК НомерГТД
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК ЗаявлениеТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (ЗаявлениеТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|		ПО (ЗаявлениеТаблицаТовары.ВидЗапасов = ПоступленияТоваров.ВидЗапасов)
	|			И (ЗаявлениеТаблицаТовары.Номенклатура = ПоступленияТоваров.Номенклатура)
	|			И (ЗаявлениеТаблицаТовары.Характеристика = ПоступленияТоваров.Характеристика)
	|			И (ЗаявлениеТаблицаТовары.Серия = ПоступленияТоваров.Серия)
	|			И (ЗаявлениеТаблицаТовары.НомерТД = ПоступленияТоваров.НомерГТД)
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (ПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|			ИЛИ ПоступленияТоваров.ДатаПоступления < ЗаявлениеТаблицаТовары.Ссылка.Дата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеТаблицаТовары.ВидЗапасов,
	|	ЗаявлениеТаблицаТовары.Номенклатура,
	|	ЗаявлениеТаблицаТовары.Характеристика,
	|	ЗаявлениеТаблицаТовары.Серия,
	|	ЗаявлениеТаблицаТовары.АналитикаУчетаНоменклатуры.Назначение,
	|	ЗаявлениеТаблицаТовары.НомерТД";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Выборка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Выборка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Серия", Выборка.Серия);
			ЭлементБлокировки.УстановитьЗначение("Назначение", Выборка.Назначение);
			ЭлементБлокировки.УстановитьЗначение("ВидЗапасов", Выборка.ВидЗапасов);
			ЭлементБлокировки.УстановитьЗначение("НомерГТД", Выборка.НомерГТД);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ДатыПоступленияТоваровОрганизаций.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика);
			НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия);
			НаборЗаписей.Отбор.Назначение.Установить(Выборка.Назначение);
			НаборЗаписей.Отбор.ВидЗапасов.Установить(Выборка.ВидЗапасов);
			НаборЗаписей.Отбор.НомерГТД.Установить(Выборка.НомерГТД);
			
			СтрокаРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРегистра, Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать регистр ДатыПоступленияТоваровОрганизаций по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.РегистрыСведений.ДатыПоступленияТоваровОрганизаций,,
									ТекстСообщения);
			Параметры.ОбработкаЗавершена = ЛОЖЬ;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПоставляемыеДрайвераWebkassa() Экспорт
	
	//шаг 1 - создаем новый элемент с верной связкой с идентификатором
	Попытка
		НовыйДрайвер = ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать элемент %ИмяОбъекта% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", "Справочник.ДрайверыОборудования");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.ДрайверыОборудования,
			,
			ТекстСообщения);
	КонецПопытки;
	
	//шаг 2 - ищем существующие драйверы не равные новому
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДрайверыОборудования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДрайверыОборудования КАК ДрайверыОборудования
	|ГДЕ
	|	ДрайверыОборудования.Ссылка <> &НовыйДрайвер
	|	И ДрайверыОборудования.ОбработчикДрайвера = &ОбработчикДрайвера";
	Запрос.УстановитьПараметр("НовыйДрайвер", НовыйДрайвер);
	Запрос.УстановитьПараметр("ОбработчикДрайвера", Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтарыеДрайвера = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	//шаг 3 - обновляем ссылки на драйверы в оборудовании
	ПолноеИмяОбъекта = "Справочник.ПодключаемоеОборудование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.ДрайверОборудования В(&ДрайверыОборудования)";
	Запрос.УстановитьПараметр("ДрайверыОборудования", СтарыеДрайвера);
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбъектыДляОбработки = Запрос.Выполнить().Выбрать();
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			ОбъектОборудование = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если ОбъектОборудование = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектОборудование.ДрайверОборудования = НовыйДрайвер;
			ОбъектОборудование.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ПодключаемоеОборудование,
				,
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	//Шаг 4 - помечаем старые драйвера на удаление
	Для каждого Драйвер Из СтарыеДрайвера Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ДрайверыОборудования");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Драйвер);
			
			Блокировка.Заблокировать();
			
			ОбъектДрайвер = Драйвер.ПолучитьОбъект();
			Если ОбъектДрайвер = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектДрайвер.ИмяПредопределенныхДанных = "";
			
			Если НЕ ОбъектДрайвер.ПометкаУдаления Тогда
				ОбъектДрайвер.ПометкаУдаления = Истина;
			КонецЕсли;
			
			ОбъектДрайвер.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", "Справочник.ДрайверыОборудования");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Драйвер);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ДрайверыОборудования,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьПредопределенныйЭлемент(ОбработчикДрайвера, ИдентификаторОбъекта = Неопределено, ИмяМакетаДрайвера = Неопределено, 
	ПоставляетсяДистрибутивом = Ложь, ВерсияДрайвера = Неопределено, СнятСПоддержки = Ложь) Экспорт
	
	Параметры = МенеджерОборудованияВызовСервера.ПолучитьПараметрыДрайвераПоОбработчику(Строка(ОбработчикДрайвера));
	
	ВремИмяЭлемента = СтрЗаменить(Параметры.Имя, "Обработчик", "Драйвер");
	
	Попытка
		Драйвер = МенеджерОборудованияВызовСервера.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования." + ВремИмяЭлемента);
	Исключение
		Сообщение = НСтр("ru = 'Предопределенный элемент ""%Параметр%"" не найден.'");
		Сообщение = СтрЗаменить(Сообщение, "%Параметр%", "Справочник.ДрайверыОборудования." + ВремИмяЭлемента);
		ВызватьИсключение Сообщение;
	КонецПопытки;
		
	Если Драйвер = Неопределено Тогда  
		Драйвер = Справочники.ДрайверыОборудования.СоздатьЭлемент();
		Драйвер.ИмяПредопределенныхДанных = ВремИмяЭлемента;     
		Драйвер.ТипОборудования           = Параметры.ТипОборудования;
		Драйвер.ОбработчикДрайвера        = ОбработчикДрайвера;
	Иначе 
		Драйвер = Драйвер.ПолучитьОбъект();
	КонецЕсли;
	
	Драйвер.Наименование              = Параметры.Наименование;
	Драйвер.ИдентификаторОбъекта      = ИдентификаторОбъекта;
	Драйвер.ИмяМакетаДрайвера         = ИмяМакетаДрайвера; 
	Драйвер.ПоставляетсяДистрибутивом = ПоставляетсяДистрибутивом;
	Драйвер.ВерсияДрайвера            = ВерсияДрайвера;
	Драйвер.СнятСПоддержки            = СнятСПоддержки;
	Драйвер.Записать();
	
	Возврат Драйвер.Ссылка;
	
КонецФункции

Процедура УстановитьЗначенияСвязанныхОпцийВестиУчетТабачнойПродукции() Экспорт
	
	ИСМПТВыбытиеКодовМаркировкиСервер.УстановитьЗначенияСвязанныхОпцийВестиУчетТабачнойПродукции();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
