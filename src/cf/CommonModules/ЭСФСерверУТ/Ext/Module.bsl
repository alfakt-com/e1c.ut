////////////////////////////////////////////////////////////////////////////////
// ЭСФСерверУТ: переопределяемый интерфейс обмена с электронными счетами-фактурами с ИС ЭСФ в УТ/КА/УП
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСДокументамиУчетнойСистемой

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML")) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснованиеСчетаФактурыПолученногоПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	СчетФактураПолученныйПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	СчетФактураВыданныйПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML")) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснованиеСчетаФактурыПолученногоПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	ДокументЗаписьКнигиПокупокПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI")
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML")) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснованиеСчетаФактурыПолученногоПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
	СчетФактураПолученныйПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
	СчетФактураВыданныйПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ОбновитьДвиженияДокументаПоРегиструЖурналУчетаСчетовФактур(СчетФактура) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналУчетаСчетовФактур");
		ЭлементБлокировки.УстановитьЗначение("СчетФактура", СчетФактура);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СчетФактура);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.КодСпособаВыставленияПолучения = 2;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СчетФактура);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры(), УровеньЖурналаРегистрации.Предупреждение,
			СчетФактура.Метаданные(), СчетФактура, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьТекстСостоянияЭД(СсылкаНаВладельца, Форма = Неопределено) Экспорт
	
	Гиперссылка = Ложь;
	АктуальныйЭСФ = Неопределено;
	ТекстСостоянияЭД = ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка, АктуальныйЭСФ);
	
	ЗаполнитьЗначенияСвойств(Форма, Новый Структура("АктуальныйЭСФ", АктуальныйЭСФ));
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

Процедура ЭСФДокументыОбработкаЗаполнения(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения <> Тип("ДокументСсылка.ЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("СсылкаНаЭСФ", ДанныеЗаполнения);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ЗаполнитьПоступлениеТоваровУслугПоЭСФ(Источник, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КорректировкаПриобретения") Тогда
		ЗаполнитьКорректировкаЭСФ(Источник, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗаполнитьСчетФактуруПолученный(ДанныеЗаполнения, Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда	
		ЗаполнитьПоступлениеУслугПрочихАктивовПоЭСФ(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭСФДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	СсылкаНаЭСФ = Неопределено;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("СсылкаНаЭСФ", СсылкаНаЭСФ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументУжеУказанВСчетФактуре(СсылкаНаЭСФ.СчетФактура, Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РежимЗаписиСчетаФактуры = РежимЗаписиДокумента.Запись;
	Если Источник.ДополнительныеСвойства.Свойство("РежимЗаписи") Тогда
		РежимЗаписиСчетаФактуры = Источник.ДополнительныеСвойства.РежимЗаписи;
	КонецЕсли;
	
	СоздатьСчетФактуру = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ЭСФ_СоздатьСчетФактуру", СоздатьСчетФактуру);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭСФ.СчетФактура) И СоздатьСчетФактуру <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если СоздатьСчетФактуру = Истина Тогда
			СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
			СчетФактура.Заполнить(СсылкаНаЭСФ);
		Иначе
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(СсылкаНаЭСФ.СчетФактура.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаЭСФ.СчетФактура);
			Блокировка.Заблокировать();
			
			СчетФактура = СсылкаНаЭСФ.СчетФактура.ПолучитьОбъект();
		КонецЕсли;
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если СчетФактура = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если СчетФактура.ДокументыОснования.Найти(Источник.Ссылка) = Неопределено Тогда
			СтрокаОснования = СчетФактура.ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = Источник.Ссылка;
		КонецЕсли;
		
		СчетФактура.Записать(РежимЗаписиСчетаФактуры);
		
		Если СоздатьСчетФактуру = Истина Тогда
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(СсылкаНаЭСФ.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаЭСФ);
			Блокировка.Заблокировать();
			
			ОбъектЭСФ = СсылкаНаЭСФ.ПолучитьОбъект();
			Если ОбъектЭСФ = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ОбъектЭСФ.СчетФактура = СчетФактура.Ссылка;
			
			ОбъектЭСФ.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось добавить документ-основание в счет-фактуру %Документ% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СсылкаНаЭСФ.СчетФактура);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации("ЭСФ. Создание документов", УровеньЖурналаРегистрации.Предупреждение,
			Источник.Метаданные(), Источник.Ссылка, ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

Функция КодТНВЭДВключенВПеречень(Знач КодТНВЭД) Экспорт
	
	Если ТипЗнч(КодТНВЭД) = Тип("СправочникСсылка.КлассификаторТНВЭД")
		И ПравоДоступа("Чтение", Метаданные.Справочники.КлассификаторТНВЭД) Тогда
		КодТНВЭД = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(КодТНВЭД, "Код");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПереченьИзъятий = ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий();
	КодДляПоиска = СтрЗаменить(КодТНВЭД, " ", "");
	
	Возврат ПереченьИзъятий.Найти(КодДляПоиска) <> Неопределено;
	
КонецФункции

#Область ПереопределяемыеПроцедурыИФункцииИзМодуляОбъектаОбработкиОбменЭСФ

////////////////////////////////////////////////////////////////////////////////
// Создание документов "ЭСФ" на основе документов "СчетФактураВыданный"

// См. ЭСФСервер.ЗаполнитьИсходящийЭСФ()
Процедура ЗаполнитьИсходящийЭСФ(Знач ДанныеЗаполнения, ОбъектЭСФ) Экспорт
	
	Если ТипЗнч(ОбъектЭСФ) <> Тип("ДокументОбъект.ЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		СтруктураВерсий = ЭСФСервер.ПолучитьТекущуюВерсиюЭСФиAPI(ДанныеЗаполнения.Дата);
	   	ВерсияЭСФ = ?(ЗначениеЗаполнено(СтруктураВерсий.ВерсияЭСФ), СтруктураВерсий.ВерсияЭСФ, 1);
		ВыставленВЭлектронномВиде = ДанныеЗаполнения.ВыставленВЭлектронномВиде;
		ДатаСФ = ДанныеЗаполнения.ДатаВыставления;
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	Иначе
		
		СсылкаНаДокументИБ = ДанныеЗаполнения.ДокументОснование;
		РеквизитыДокумента = ДанныеЗаполнения.СтруктураДанныхСФ.ДанныеКурсаИОснования.Получить(ДанныеЗаполнения.ДокументОснование);
		СтруктураВерсий = ЭСФСервер.ПолучитьТекущуюВерсиюЭСФиAPI(РеквизитыДокумента.Дата);
	   	ВерсияЭСФ = ?(ЗначениеЗаполнено(СтруктураВерсий.ВерсияЭСФ), СтруктураВерсий.ВерсияЭСФ, 1);
		ВыставленВЭлектронномВиде = Ложь;
		ДатаСФ = РеквизитыДокумента.Дата;
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Шапка", Новый Структура);
	СтруктураЗаполнения.Вставить("Поставщики", ОбъектЭСФ.Поставщики.ВыгрузитьКолонки());
	СтруктураЗаполнения.Вставить("Получатели", ОбъектЭСФ.Получатели.ВыгрузитьКолонки());
	СтруктураЗаполнения.Вставить("Товары", ОбъектЭСФ.Товары.ВыгрузитьКолонки());
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Ссылка");
	ИсходныеДанные.Колонки.Добавить("ДокументОснование");
	ИсходныеДанные.Колонки.Добавить("ИсходныйДокумент");
	ИсходныеДанные.Колонки.Добавить("НомерСчетаФактуры");
	ИсходныеДанные.Колонки.Добавить("ДатаСчетаФактуры");
	ИсходныеДанные.Колонки.Добавить("НомерИсправленияСчетаФактуры");
	ИсходныеДанные.Колонки.Добавить("ДатаИсправленияСчетаФактуры");
	
	СтруктураЗаполнения.Вставить("ИсходныеДанные", ИсходныеДанные);
	
	МассивСообщений = Новый СписокЗначений;
	//+
	СтруктураСтавкиНДСМестоРеализацииНеРК = Новый Структура;
	СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ВсеСтавкиНДСМестоРеализацииНеРК" , Истина);
	СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ЕстьСтавкаНДСМестоРеализацииНеРК", Ложь);	
	СтруктураЗаполнения.Вставить("СтруктураСтавкиНДСМестоРеализацииНеРК", СтруктураСтавкиНДСМестоРеализацииНеРК);
	//-
	СобратьДанныеДляЗаполненияИсходящегоЭСФ(ДанныеЗаполнения, СтруктураЗаполнения, МассивСообщений, ВерсияЭСФ);
	
	Если СтруктураЗаполнения.Шапка.Количество() = 0 Тогда
		ОбъектЭСФ.Направление = Перечисления.НаправленияЭСФ.Исходящий;
		Возврат;
	КонецЕсли;
	
	//+
	Если Не ВыставленВЭлектронномВиде Тогда
		ОбъектЭСФ.ДатаВыпискиНаБумажномНосителе = ДатаСФ;
	КонецЕсли;		
	//-
	
	ЗаполнитьЗначенияСвойств(ОбъектЭСФ, СтруктураЗаполнения.Шапка);

	ОбъектЭСФ.ВерсияБланкаЭСФ = ВерсияЭСФ;
		
	// Заполняем таблицу Поставщики.
	ОбъектЭСФ.Поставщики.Очистить();
	Для Каждого ТекСтрока Из СтруктураЗаполнения.Поставщики Цикл
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ.Поставщики.Добавить(), ТекСтрока);
	КонецЦикла;
	
	// Заполняем таблицу Поставщики.
	ОбъектЭСФ.Получатели.Очистить();
	Для Каждого ТекСтрока Из СтруктураЗаполнения.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ.Получатели.Добавить(), ТекСтрока);
	КонецЦикла;
	
	ОсновнойСчетФактура = Неопределено;
	Если ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный И СтруктураЗаполнения.ИсходныеДанные.Количество() > 0 Тогда
		// Заполним данные основного ЭСФ. Основной ЭСФ получаем по первому основному СФ.
		ОсновнойСчетФактура = СтруктураЗаполнения.ИсходныеДанные[0].ИсходныйДокумент;
	ИначеЕсли ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Исправленный Тогда
		ОсновнойСчетФактура = СтруктураЗаполнения.Шапка.СчетФактураОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойСчетФактура) Тогда
		ЗаполнитьДанныеСвязанногоЭСФ(ОсновнойСчетФактура, ОбъектЭСФ, ВерсияЭСФ);
		
		Если ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
			Если ЗначениеЗаполнено(ОбъектЭСФ.СвязанныйЭСФ) Тогда
				РеквизитыВыпискиНаБумаге = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектЭСФ.СвязанныйЭСФ, "ДатаВыпискиНаБумажномНосителе, ПричинаВыпискиНаБумажномНосителе");
				
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, РеквизитыВыпискиНаБумаге); 
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;
	
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ТекущаяДатаСеанса());
	Если ВедетсяУчетПоТоварамНаВС Тогда
		
		//рассчитаем заново
		СтруктураСтавкиНДСМестоРеализацииНеРК.ВсеСтавкиНДСМестоРеализацииНеРК = Истина;
		СтруктураСтавкиНДСМестоРеализацииНеРК.ЕстьСтавкаНДСМестоРеализацииНеРК = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Склад", ОбъектЭСФ.Склад);
		ПараметрыФормы.Вставить("Дата", СтруктураЗаполнения.Шапка.Дата);
		ПараметрыФормы.Вставить("Регистратор", СтруктураЗаполнения.Шапка.СчетФактура);
		ПараметрыФормы.Вставить("Организация", СтруктураЗаполнения.Шапка.Организация);
		ПараметрыФормы.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(СтруктураЗаполнения.Товары));	
		ПараметрыФормы.Вставить("ИмяСписка", "Товары");	
		ПараметрыФормы.Вставить("ЭтоЗаполнениеЭСФ", Истина);
		
		Если ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный И ОбъектЭСФ <> Неопределено Тогда
			ТаблицаТовары = ЗаполнитьТоварыДаннымиИПОсновногоЭСФ(ПараметрыФормы, ОбъектЭСФ.СвязанныйЭСФ)
		ИначеЕсли ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Исправленный И ОбъектЭСФ <> Неопределено Тогда
			ПараметрыФормы.Вставить("СвязанныйЭСФ", ОбъектЭСФ.СвязанныйЭСФ); 
			ТаблицаТовары = ВССервер.ЗаполнитьИсточникиПроисхождения(ПараметрыФормы, Ложь);
		Иначе
			ТаблицаТовары = ВССервер.ЗаполнитьИсточникиПроисхождения(ПараметрыФормы, Ложь);
		КонецЕсли;
		
		ТаблицаТовары = ПолучитьИзВременногоХранилища(ТаблицаТовары);
		ЕстьТоварыВС = Ложь;
		// Заполнить реквизит СуммаБезНалогов. 
		Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл 
			СтрокаТЧ.СуммаБезНалогов = Окр(СтрокаТЧ.Сумма - СтрокаТЧ.СуммаАкциза - СтрокаТЧ.СуммаНДС, 2);
			
			//+
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПризнакПроисхождения) Тогда
				Если СтрокаТЧ.ЭтоТовар Тогда
					СтрокаТЧ.ПризнакПроисхождения = "5";
				Иначе
					СтрокаТЧ.ПризнакПроисхождения = "6";
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧ.СтавкаНДС.МестоРеализацииНеРК Тогда
				СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ЕстьСтавкаНДСМестоРеализацииНеРК", Истина);
			Иначе
				СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ВсеСтавкиНДСМестоРеализацииНеРК" , Ложь);
			КонецЕсли;
			//-
			
			Если СтрокаТЧ.ПризнакУчетаНаВиртуальномСкладе Тогда
				СтрокаТЧ.ИдентификаторТовара = "1";
				ЕстьТоварыВС = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьТоварыВС Тогда
			ОбъектЭСФ.ДокументПодтверждающийПоставкуНомер = "NON SNT";
		КонецЕсли;
		
		СтруктураЗаполнения.Вставить("Товары", ТаблицаТовары);
		
	КонецЕсли;
	
	//+
	ОбъектЭСФ.МестоРеализацииНеРК = СтруктураСтавкиНДСМестоРеализацииНеРК.ВсеСтавкиНДСМестоРеализацииНеРК;
	
	Если НЕ СтруктураСтавкиНДСМестоРеализацииНеРК.ВсеСтавкиНДСМестоРеализацииНеРК 
		И СтруктураСтавкиНДСМестоРеализацииНеРК.ЕстьСтавкаНДСМестоРеализацииНеРК Тогда 
		
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
		НСтр("ru='В документе: %1 , одновременно присутствуют строки с разным признаком ставки НДС ""Местом реализации не является РК!""'"),
		ОбъектЭСФ);
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;	
	//-
	
	// Заполняем таблицу Товары.
	ОбъектЭСФ.Товары.Очистить();
	Для Каждого ТекСтрока Из СтруктураЗаполнения.Товары Цикл
		ЗаполнитьЗначенияСвойств(ОбъектЭСФ.Товары.Добавить(), ТекСтрока);
	КонецЦикла;
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().УдалитьЗапрещенныеСимволыИзНазначенияПлатежа(ОбъектЭСФ);
	ОбъектЭСФ.Состояние = ЭСФСервер.СостояниеЭСФ(ОбъектЭСФ);
	
	// Очистить таблицу "Ошибки".
	ОбъектЭСФ.Ошибки.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭСФ.Автор) Тогда
		ОбъектЭСФ.Автор = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Если ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный И ЗначениеЗаполнено(ОбъектЭСФ.СвязанныйЭСФ) Тогда
		Если НЕ ВедетсяУчетПоТоварамНаВС Тогда
			ДозаполнтьТаблицуТоваровДополнительногоСчетаФактуры(ОбъектЭСФ, ОбъектЭСФ.СвязанныйЭСФ, ВерсияЭСФ);
		КонецЕсли;	
		СкорректироватьСуммыТоваровПриВозврате(ОбъектЭСФ);
	КонецЕсли;
	
	ПоказатьСообщения(МассивСообщений.ВыгрузитьЗначения(), ОбъектЭСФ.СчетФактура);
	
	// Показать различные предупреждения после заполнения ЭСФ.
	
	// Проверить, что БИК ГУ равен "KKMFKZ2A".
	ГосучреждениеБИК = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ГосучреждениеБИК();
	Если ЗначениеЗаполнено(ОбъектЭСФ.ГосучреждениеБИК)
		И ОбъектЭСФ.ГосучреждениеБИК <> ГосучреждениеБИК Тогда
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(
			СтрЗаменить(
				НСтр("ru = 'БИК госучреждения отличается от ""[СтандартныйБИК]"".'"),
				"[СтандартныйБИК]",
				ГосучреждениеБИК),
			,
			"Объект.ГосучреждениеБИК"
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция создает несколько ЭСФ на основании нескольких счетов-фактур.
//
Функция СоздатьСписокИсходящихЭСФ(МассивСчетовФактур) Экспорт
	
	СписокСозданныхЭСФ = Новый Массив;
	
	СтруктураДанныхСФ = Новый Структура;
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСчетовФактур, "Валюта, Дата, СчетФактураОснование");
	СтруктураДанныхСФ.Вставить("ДанныеКурсаИОснования", РеквизитыДокументов);
	
	СтруктураДанныхСФ.Вставить("ПереченьИзъятий", ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий());
	
	ПараметрыПечати = Новый Структура("ПечатьВВалюте, ДанныеДоговораГЗ", Истина, Истина);
	СтруктураДанныхСФ.Вставить("ДанныеДляЗаполненияЭСФ", 
		Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивСчетовФактур));
	
	Для Каждого СчетФактураОснование Из МассивСчетовФактур Цикл
		
		Попытка
			
			ДанныеЗаполнения = Новый Структура("ДокументОснование, СтруктураДанныхСФ", СчетФактураОснование, СтруктураДанныхСФ);
			
			НовыйДокументЭСФ = Документы.ЭСФ.СоздатьДокумент();
			НовыйДокументЭСФ.Заполнить(ДанныеЗаполнения);
			
			СделатьАктуальным = ЭСФКлиентСервер.СделатьАктуальным();
			НовыйДокументЭСФ.ДополнительныеСвойства.Вставить(СделатьАктуальным, Истина);
			
			НовыйДокументЭСФ.Записать();
			СписокСозданныхЭСФ.Добавить(НовыйДокументЭСФ.Ссылка);
			
		Исключение
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании документа ЭСФ: %1.'"),
				ИнформацияОбОшибке().Описание);
				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СписокСозданныхЭСФ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание счетов-фактур

// См. ЭСФСервер.ЗаполнитьСчетФактуруПолученный()
Процедура ЗаполнитьСчетФактуруПолученный(Знач СсылкаЭСФ, ОбъектСчетФактура) Экспорт
	
	ЭСФСервер.ОчиститьОбъект(ОбъектСчетФактура, , "ДокументыОснования");
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить данные для заполнения счета-фактуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.Валюта КАК Валюта,
	|	ЭСФ.Номер КАК Номер,
	|	ЭСФ.Дата КАК Дата,
	|	ЭСФ.Дата КАК ДатаСоставления,
	|	ЭСФ.Контрагент КАК Контрагент,
	|	ЭСФ.Организация КАК Организация,
	|	ЭСФ.СвязанныйЭСФ.СчетФактура КАК СчетФактураОснование,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Исправленный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Исправление,
	|	ВЫБОР
	|		КОГДА ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Корректировочный,
	|	ИСТИНА КАК ПолученВЭлектронномВиде,
	|	ИСТИНА КАК ВыставленВЭлектронномВиде
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|ГДЕ
	|	ЭСФ.Ссылка = &СсылкаЭСФ";
	
	Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизиты счета-фактуры
	
	ЗаполнитьЗначенияСвойств(ОбъектСчетФактура, ВыборкаРеквизиты);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных реквизитов ЭСФ

Процедура ЗаполнитьСсылкиНаЕдиницыИзмерения(НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	
	// Создать и заполнить таблицу наименований единиц измерения для поиска ссылок.
	
	ТаблицаНаименованийЕдиницИзмерения = Новый ТаблицаЗначений;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТипЕдиницаИзмеренияНаименование = Метаданные.РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.Измерения.ЕдиницаИзмеренияНаименование.Тип;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("ЕдиницаИзмеренияНаименование", ТипЕдиницаИзмеренияНаименование);
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("Товар", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
			И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				СтрокаТаблицыНаименованийЕдиницИзмерения = ТаблицаНаименованийЕдиницИзмерения.Добавить();
				СтрокаТаблицыНаименованийЕдиницИзмерения.Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод) Тогда
					СтрокаТаблицыНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование = СтрокаТаблицыТовары.ЕдиницаИзмеренияКод;
				Иначе
					СтрокаТаблицыНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование = СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование;
				КонецЕсли;	
				СтрокаТаблицыНаименованийЕдиницИзмерения.Товар = СтрокаТаблицыТовары.Товар;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на единицы измерения в документах ЭСФ.
	ТаблицаСоответствий = ПолучитьСохраненныеСоответствияНаименованийИСсылокЕдиницИзмерения(ТаблицаНаименованийЕдиницИзмерения);
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
			И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Контрагент", ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]);
				
				//По умолчанию ищем по коду. Если код не заполнен (н-р, это старый документ, который отправлялся с наименованиями), то ищем по наименованию
				Если ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияКод) Тогда
					ПараметрыОтбора.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТаблицыТовары.ЕдиницаИзмеренияКод);
				Иначе	
					ПараметрыОтбора.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование);
				КонецЕсли;	
					
				ПараметрыОтбора.Вставить("Товар", СтрокаТаблицыТовары.Товар);
				МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТаблицыТовары.ЕдиницаИзмерения = МассивНайденныхСтрок[0].ЕдиницаИзмерения;
					
					//заполним наименование ЕИ
					Если Не ЗначениеЗаполнено(СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование) Тогда
						СтрокаТаблицыТовары.ЕдиницаИзмеренияНаименование = МассивНайденныхСтрок[0].ЕдиницаИзмеренияНаименованиеИзСправочника;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаТовары(Знач НаправлениеЭСФ, МассивЭСФ) Экспорт
	
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	
	// Создать и заполнить таблицу наименований товаров для поиска ссылок.
	
	ТаблицаНаименованийТоваров = Новый ТаблицаЗначений;
	ТаблицаНаименованийТоваров.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТипТоварНаименование = Метаданные.РегистрыСведений.СоответствияНаименованийИСсылокТоваров.Измерения.ТоварНаименование.Тип;
	ТаблицаНаименованийТоваров.Колонки.Добавить("ТоварНаименование", ТипТоварНаименование);
	
	ЕстьНомераГТД = Ложь;
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
			И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				СтрокаТаблицыНаименованийТоваров = ТаблицаНаименованийТоваров.Добавить();
				СтрокаТаблицыНаименованийТоваров.Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
				СтрокаТаблицыНаименованийТоваров.ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
				Если НЕ ПустаяСтрока(СтрокаТаблицыТовары.НомерЗаявленияВРамкахТС) Тогда
					ЕстьНомераГТД = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	ТаблицаСоответствий = ПолучитьСохраненныеСоответствияНаименованийИСсылокТоваров(ТаблицаНаименованийТоваров);
	
	ЕстьНезаполненныеСтроки = Ложь;
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
			И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Контрагент", ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]);
				ТоварНаименование = ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.ТоварНаименование), СтрокаТаблицыТовары.ТоварНаименование, СтрокаТаблицыТовары.ТоварНаименованиеВРамкахТС);
				ПараметрыОтбора.Вставить("ТоварНаименование", ТоварНаименование);
				МассивНайденныхСтрок = ТаблицаСоответствий.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТаблицыТовары.Товар = МассивНайденныхСтрок[0].Товар;
				КонецЕсли;
				
				ЕстьНезаполненныеСтроки = ЕстьНезаполненныеСтроки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыТовары.Товар);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНомераГТД Тогда
		ЗаполнитьСсылкиНаНомераГТД(МассивЭСФ);
	КонецЕсли;
	
	Если НЕ ЕстьНезаполненныеСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяНоменклатураПоставщиков = Ложь;
	
	Запрос = Новый Запрос;
	Если ИспользуетсяНоменклатураПоставщиков Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Таблица.%ИмяРеквизитаКонтрагента% КАК Контрагент,
		|	Таблица.%ИмяРеквизитаКонтрагента%.Партнер КАК ВладелецНоменклатуры
		|ПОМЕСТИТЬ ВТ_ВладельцыНоменклатуры
		|ИЗ
		|	Документ.ЭСФ.%ИмяТаблицыКонтрагентов% КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЭСФ)
		|;
		|ВЫБРАТЬ
		|	ВТ_ВладельцыНоменклатуры.Контрагент КАК ВладелецНоменклатуры
		|	НоменклатураПоставщиков.Ссылка КАК Ссылка,
		|	НоменклатураПоставщиков.Наименование КАК Наименование,
		|	НоменклатураПоставщиков.Наименование КАК НаименованиеПоиск,
		|	НоменклатураПоставщиков.Артикул КАК Артикул,
		|	НоменклатураПоставщиков.Артикул КАК АртикулПоиск
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВТ_ВладельцыНоменклатуры КАК ВТ_ВладельцыНоменклатуры
		|	ПО
		|		ВТ_ВладельцыНоменклатуры.ВладелецНоменклатуры = НоменклатураПоставщиков.Владелец
		|
		|ГДЕ
		|	НЕ НоменклатураПоставщиков.ЭтоГруппа
		|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРеквизитаКонтрагента%", ИмяРеквизитаКонтрагента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицыКонтрагентов%", ИмяТаблицыКонтрагентов);
		
		Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Ссылка       КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|";
		
	КонецЕсли;
	
	НоменклатураПоставщиков = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из НоменклатураПоставщиков Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Если ЭСФ[ИмяТаблицыКонтрагентов].Количество() <> 0
		   И ЗначениеЗаполнено(ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента]) Тогда
			
			Контрагент = ЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
			Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
				
				ПараметрыОтбора = Новый Структура;
				Если ИспользуетсяНоменклатураПоставщиков Тогда
					ПараметрыОтбора.Вставить("ВладелецНоменклатуры", Контрагент);
				КонецЕсли;
				ПараметрыОтбора.Вставить("НаименованиеПоиск", ВРег(СтрЗаменить(СтрокаТаблицыТовары.ТоварНаименование, " ", "")));
				МассивНайденныхСтрок = НоменклатураПоставщиков.НайтиСтроки(ПараметрыОтбора);
				Если МассивНайденныхСтрок.Количество() <> 0 Тогда
					СтрокаТаблицыТовары.Товар = МассивНайденныхСтрок[0].Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаНомераГТД(МассивЭСФ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Т.Код            КАК НомерГТДСтрока,
	|	Т.Код            КАК НомерГТДСтрокаПоиск,
	|	Т.НомерСтрокиГТД КАК НомерСтрокиГТД,
	|	Т.Ссылка         КАК Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|";
	
	НомераГТД = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из НомераГТД Цикл
		
		ТекСтрока.НомерГТДСтрокаПоиск = ВРег(СтрЗаменить(ТекСтрока.НомерГТДСтрока, " ", ""));
		
	КонецЦикла;
	
	// Найти соответствия наименований и ссылок, заполнить на их основе ссылки на товары в документах ЭСФ.
	
	Для Каждого ЭСФ Из МассивЭСФ Цикл
		
		Для Каждого СтрокаТаблицыТовары Из ЭСФ.Товары Цикл
			
			Если ПустаяСтрока(СтрокаТаблицыТовары.НомерЗаявленияВРамкахТС) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтрокиГТД = СтрокаТаблицыТовары.ДополнительныеДанные;
			Попытка
				НомерСтрокиГТДЧисло = Число(НомерСтрокиГТД)
			Исключение
				НомерСтрокиГТДЧисло = 0;
			КонецПопытки;
			
			ПараметрыОтбора = Новый Структура;
			Если НомерСтрокиГТДЧисло <> 0 Тогда
				ПараметрыОтбора.Вставить("НомерСтрокиГТД", НомерСтрокиГТДЧисло);
			КонецЕсли;
			ПараметрыОтбора.Вставить("НомерГТДСтрокаПоиск", ВРег(СтрЗаменить(СтрокаТаблицыТовары.НомерЗаявленияВРамкахТС, " ", "")));
			МассивНайденныхСтрок = НомераГТД.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() <> 0 Тогда
				СтрокаТаблицыТовары.Товар = МассивНайденныхСтрок[0].Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит ДоговорПоставки в документах ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Массив документов ЭСФ, в которых необходимо заполнить реквизит ДоговорПоставки.
//   Каждый элемент массива должен иметь тип ДокументОбъект.ЭСФ.
// 
Процедура ЗаполнитьСсылкиНаДоговорыПоставки(МассивЭСФ) Экспорт
	
	// Очистить старые ссылки на договры поставки.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		ОбъектЭСФ.ДоговорПоставки = Неопределено;
	КонецЦикла;
	
	// Сформировать пустые параметры поиска договоров поставки.
	ИменаРеквизитов = "Контрагент, Организация, Номер, Дата";
	ОбъектМетаданных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПараметрыПоискаДоговоровПоставки = ЭСФСервер.НовыеПараметрыПоискаСсылок(ИменаРеквизитов, ОбъектМетаданных);
	
	// Заполнить параметры поиска договоров поставки.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(ОбъектЭСФ.Направление);
		ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(ОбъектЭСФ.Направление);
		Контрагент = ОбъектЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(ОбъектЭСФ.Организация)
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер)
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Контрагент", Контрагент);
			ПараметрыПоиска.Вставить("Организация", ОбъектЭСФ.Организация);
			ПараметрыПоиска.Вставить("Номер", ОбъектЭСФ.ДоговорПоставкиНомер);
			ПараметрыПоиска.Вставить("Дата", ОбъектЭСФ.ДоговорПоставкиДата);
			
			МассивНайденныхСтрок = ПараметрыПоискаДоговоровПоставки.НайтиСтроки(ПараметрыПоиска);
			
			Если МассивНайденныхСтрок.Количество() = 0 Тогда
				СтрокаПараметровПоиска = ПараметрыПоискаДоговоровПоставки.Добавить();
				СтрокаПараметровПоиска.Контрагент = Контрагент;
				СтрокаПараметровПоиска.Организация = ОбъектЭСФ.Организация;
				СтрокаПараметровПоиска.Номер = СокрЛП(ОбъектЭСФ.ДоговорПоставкиНомер);
				СтрокаПараметровПоиска.Дата = СокрЛП(ОбъектЭСФ.ДоговорПоставкиДата);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Найти договора поставки.
	НайденныеСсылки = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().НайтиСсылкиПоЗначениямРеквизитов(ПараметрыПоискаДоговоровПоставки, ОбъектМетаданных);
	
	// Заполнить договоры поставки в МассивЭСФ.
	Для Каждого ОбъектЭСФ Из МассивЭСФ Цикл
		
		ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(ОбъектЭСФ.Направление);
		ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(ОбъектЭСФ.Направление);
		Контрагент = ОбъектЭСФ[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
		
		Если ЗначениеЗаполнено(Контрагент)
			И ЗначениеЗаполнено(ОбъектЭСФ.Организация)
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиНомер) 
			И ЗначениеЗаполнено(ОбъектЭСФ.ДоговорПоставкиДата) Тогда
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Контрагент", Контрагент);
				ПараметрыПоиска.Вставить("Организация", ОбъектЭСФ.Организация);
				ПараметрыПоиска.Вставить("Номер", ОбъектЭСФ.ДоговорПоставкиНомер);
				ПараметрыПоиска.Вставить("Дата", ОбъектЭСФ.ДоговорПоставкиДата);
				
				МассивНайденныхСтрок = НайденныеСсылки.НайтиСтроки(ПараметрыПоиска);
				
				Если МассивНайденныхСтрок.Количество() = 1 Тогда
					ОбъектЭСФ.ДоговорПоставки = МассивНайденныхСтрок[0].НайденнаяСсылка;
				КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, ТоварВходитВПеречень) Экспорт
	
	НовыйПризнакПроисхождения = ПризнакПроисхождения;
	
	Если ТоварВходитВПеречень Тогда
		Если ПризнакПроисхождения = "2" Тогда
			НовыйПризнакПроисхождения = "1";			
		ИначеЕсли ПризнакПроисхождения = "4" Тогда
			НовыйПризнакПроисхождения = "3";
		КонецЕсли;
	Иначе
		Если ПризнакПроисхождения = "1" Тогда
			НовыйПризнакПроисхождения = "2";
		ИначеЕсли ПризнакПроисхождения = "3" Тогда
			НовыйПризнакПроисхождения = "4";
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат НовыйПризнакПроисхождения;		
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Соответствия наименований и ссылок товаров и единиц измерения

// Сохраняет соответствия "Единица измерения наименование - Единица измерения ссылка".
// Соответствия сохраняются в разрезе контрагентов.
// Если ЭСФ содержит несколько контрагентов, то соответствия сохраняются для каждого из них.  
// Для сохранения соответствия ссылка на контрагента должна быть заполнена, иначе оно не сохранится.
// Соответствие сохраняется только если заполнена ссылка на единицу измерения.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление всех ЭСФ в МассивЭСФ.
//  МассивЭСФ - Массив - Массив объектов ДокументСсылка.ЭСФ,    
//   для которых необходимо сохранить соответствия "Единица измерения наименование - Единица измерения ссылка".
//
Процедура СохранитьСоответствияНаименованийИСсылокЕдиницИзмерения(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Исходящий Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента] КАК Контрагент,
	|	ЭСФТовары.Товар,
	|	ЭСФТовары.ЕдиницаИзмеренияНаименование,
	|	ЭСФТовары.ЕдиницаИзмеренияКод,
	|	ЭСФТовары.ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЭСФ.[ИмяТаблицыКонтрагентов] КАК ЭСФКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ПО ЭСФКонтрагенты.Ссылка = ЭСФТовары.Ссылка
	|ГДЕ
	|	ЭСФКонтрагенты.Ссылка В(&МассивЭСФ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент)
			И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(Выборка.Товар)
			// в УП, если единица измерения в документе, не отличается от единицы хранения остатков в номенклатуре, то ссылка в документе на единицу измерения пуста
			// поэтому, в ситуации, когда пользователь "не выбрал" единицу измерения нужно принимать как "выбрана единица хранения остатков номенклатуры
			//И ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) условие закомментировано специально
			Тогда
			
			Запись = РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.СоздатьМенеджерЗаписи();
			Запись.Контрагент = Выборка.Контрагент;
			Запись.Товар = Выборка.Товар;
			ЕдиницаИзмеренияКод = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ЕдиницаИзмеренияКод);
			Если ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
				Запись.ЕдиницаИзмеренияНаименование = ЕдиницаИзмеренияКод;
			Иначе
				Запись.ЕдиницаИзмеренияНаименование = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ЕдиницаИзмеренияНаименование);
			КонецЕсли;	
			Запись.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭСФСервер.СохранитьСоответствияНаименованийИСсылокТоваров()
Процедура СохранитьСоответствияНаименованийИСсылокТоваров(Знач НаправлениеЭСФ, Знач МассивЭСФ) Экспорт
	
	Если НаправлениеЭСФ = Перечисления.НаправленияЭСФ.Исходящий Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаКонтрагента = ЭСФВызовСервераПовтИсп.ИмяРеквизитаКонтрагента(НаправлениеЭСФ);
	ИмяТаблицыКонтрагентов = ЭСФВызовСервераПовтИсп.ИмяТаблицыКонтрагентов(НаправлениеЭСФ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФКонтрагенты.[ИмяРеквизитаКонтрагента] КАК Контрагент,
	|	ВЫБОР 
	|		КОГДА ЭСФТовары.ТоварНаименование <> &ПустаяСтрока 
	|			ТОГДА ЭСФТовары.ТоварНаименование
	|		ИНАЧЕ ЭСФТовары.ТоварНаименованиеВРамкахТС
	|	КОНЕЦ КАК ТоварНаименование,
	|	ЭСФТовары.Товар
	|ИЗ
	|	Документ.ЭСФ.[ИмяТаблицыКонтрагентов] КАК ЭСФКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ.Товары КАК ЭСФТовары
	|		ПО ЭСФКонтрагенты.Ссылка = ЭСФТовары.Ссылка
	|ГДЕ
	|	ЭСФКонтрагенты.Ссылка В(&МассивЭСФ)
	|	И (ЭСФТовары.ТоварНаименование <> &ПустаяСтрока ИЛИ ЭСФТовары.ТоварНаименованиеВРамкахТС <> &ПустаяСтрока)
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяТаблицыКонтрагентов]", ИмяТаблицыКонтрагентов);
	Запрос.УстановитьПараметр("МассивЭСФ", МассивЭСФ);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контрагент)
			И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты") 
			И ЗначениеЗаполнено(Выборка.Товар) Тогда
			
			Запись = РегистрыСведений.СоответствияНаименованийИСсылокТоваров.СоздатьМенеджерЗаписи();
			Запись.Контрагент = Выборка.Контрагент;
			Запись.ТоварНаименование = ЭСФКлиентСервер.ПреобразованноеНаименование(Выборка.ТоварНаименование);
			Запись.Товар = Выборка.Товар;
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание контрагентов, договоров и т.д.

Функция НайтиДоговорыПоставкиПоДаннымЭСФ(Знач ОбъектЭСФ, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	|	И ДоговорыКонтрагентов.Дата = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("НомерДоговора", ОбъектЭСФ.ДоговорПоставкиНомер);
	Запрос.УстановитьПараметр("ДатаДоговора", ОбъектЭСФ.ДоговорПоставкиДата);
	
	Если ИмяТаблицыКонтрагента = "Поставщики" Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Поставщик);
	Иначе // ИмяТаблицыКонтрагента = "Получатели"
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Получатель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ОбъектЭСФ.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ОбъектЭСФ.Валюта);
	Запрос.УстановитьПараметр("ДоговорСовместнойДеятельности", СтрокаКонтрагент.УчастникСовместнойДеятельности);
	Запрос.УстановитьПараметр("УчастникСРП", СтрокаКонтрагент.УчастникСРП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДоговоров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЭСФ ПО ТОВАРАМ ИЗ ПЕРЕЧНЯ

Функция ЗаполнитьПроверитьИсходящийЭСФПоТоварамИзПеречня(ОбъектЭСФ, Знач СсылкаСчетФактура, Знач Заполнить) Экспорт
	
	ВерсияЭСФ = ?(ЗначениеЗаполнено(ОбъектЭСФ.ВерсияБланкаЭСФ), ОбъектЭСФ.ВерсияБланкаЭСФ, 1);
	
	// Товары.
	СтруктураДанныхГТД = Новый Структура(
		"РегНомераЭСФ, СтраныПроисхождения, СпособыПроисхождения, ПризнакПроисхождения",
		Новый Массив, Новый Массив, Новый Массив, Новый Массив);
	
	СтруктураФлаги = Новый Структура(
		"ЕстьТоварыИзПеречня, ЕстьОшибкиТоварыИзПеречня, ВсеТоварыВходятВПеречень, ЕстьИмпортныеТовары", Ложь, Ложь, Истина, Ложь);
	
	Товары = ОбъектЭСФ.Товары.Выгрузить();
	Товары.Колонки.Добавить("ВключенВПереченьИзъятий", Новый ОписаниеТипов("Булево"));
	Товары.Колонки.Добавить("СпособПроисхождения");
	
	ПереченьИзъятий = ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомераГТД", Товары.ВыгрузитьКолонку("НомерГТД"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НомераГТД.Ссылка КАК Ссылка,
	|	НомераГТД.КодТНВЭД КАК КодТНВЭД,
	|	НомераГТД.Код КАК НомерЗаявленияВРамкахТС,
	|	НомераГТД.НомерСтрокиГТД КАК НомерСтрокиГТД,
	|	НомераГТД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	НомераГТД.СпособПроисхождения КАК СпособПроисхождения,
	|	НомераГТД.РегистрационныйНомерЭСФ КАК РегистрационныйНомерЭСФ,
	|	НомераГТД.ПризнакПроисхождения КАК ПризнакПроисхождения
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.Ссылка В(&НомераГТД)";
	
	ВыборкаНомераГТД = Запрос.Выполнить().Выбрать();
	ПоискГТД = Новый Структура("Ссылка", Неопределено);
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерГТД) Тогда
			СтруктураФлаги.ЕстьИмпортныеТовары = Истина;
			
			ПоискГТД.Ссылка = СтрокаТаблицы.НомерГТД;
			ВыборкаНомераГТД.Сбросить();
			Если ВыборкаНомераГТД.НайтиСледующий(ПоискГТД) Тогда
				СтрокаТаблицы.СпособПроисхождения       = ВыборкаНомераГТД.СпособПроисхождения;
				СтрокаТаблицы.ВключенВПереченьИзъятий   = (ПереченьИзъятий.Найти(СтрокаТаблицы.КодТНВЭД) <> Неопределено);
				
				СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И СтрокаТаблицы.ВключенВПереченьИзъятий;
				
				Если СтрокаТаблицы.ВключенВПереченьИзъятий Тогда
					СтруктураФлаги.ЕстьТоварыИзПеречня = Истина;
					СтруктураФлаги.ЕстьОшибкиТоварыИзПеречня = НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособПроисхождения);
					
					СтруктураДанныхГТД.РегНомераЭСФ.        Добавить(ВыборкаНомераГТД.РегистрационныйНомерЭСФ);
					СтруктураДанныхГТД.СтраныПроисхождения. Добавить(ВыборкаНомераГТД.СтранаПроисхождения);
					СтруктураДанныхГТД.СпособыПроисхождения.Добавить(ВыборкаНомераГТД.СпособПроисхождения);
					
					Если ВерсияЭСФ = 2 Тогда
						// ПризнакПроисхождения товаров для услуг
						Если НЕ ПустаяСтрока(ВыборкаНомераГТД.ПризнакПроисхождения) Тогда
							ПризнакПроисхождения = ВыборкаНомераГТД.ПризнакПроисхождения;
						ИначеЕсли НЕ (ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Товар, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Товар) Тогда
							ПризнакПроисхождения = "6"; // «6» – в случае выполнения работ, оказания услуг.
						Иначе
							ПризнакПроисхождения = "5"; // «5» – товары, если не ведется учет по источникам происхождения
						КонецЕсли;
						
						СтрокаТаблицы.ПризнакПроисхождения = ПризнакПроисхождения;
						СтруктураДанныхГТД.ПризнакПроисхождения.Добавить(ПризнакПроисхождения);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;			
		
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.КодТНВЭД) Тогда
			СтрокаТаблицы.ВключенВПереченьИзъятий   = (ПереченьИзъятий.Найти(СтрокаТаблицы.КодТНВЭД) <> Неопределено);
			СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И СтрокаТаблицы.ВключенВПереченьИзъятий;
			Если СтрокаТаблицы.ВключенВПереченьИзъятий Тогда
				СтруктураФлаги.ЕстьТоварыИзПеречня = Истина;
				СтруктураФлаги.ЕстьОшибкиТоварыИзПеречня = Истина;
			КонецЕсли;
		Иначе
			СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	МассивСообщений = ПроверитьКорректностьЗаполненияТоваровЭСФ(СсылкаСчетФактура, Товары, СтруктураФлаги, СтруктураДанныхГТД, ВерсияЭСФ);
	
	Возврат МассивСообщений.ВыгрузитьЗначения();
	
КонецФункции

Функция ПроверитьКорректностьЗаполненияТоваровЭСФ(СчетФактура, Товары, СтруктураФлаги, СтруктураДанныхГТД, ВерсияЭСФ)
	
	МассивСообщений = Новый СписокЗначений;
	
	Если ТипЗнч(СчетФактура) <> Тип("Структура") Тогда
		РеквизитыСчетФактуры = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(СчетФактура, "СтранаНазначения, Дата");
	Иначе
		РеквизитыСчетФактуры = СчетФактура;
	КонецЕсли;
	
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(РеквизитыСчетФактуры.Дата);
	
	СтранаНазначенияЕАЭС = УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(РеквизитыСчетФактуры.СтранаНазначения, ТекущаяДатаСеанса());
		
	Если ВерсияЭСФ = 1 Тогда
		//////////////////////////////////////////////////////////////////////////////
		// Предполагается, что СФ должен содержать либо все товары из Перечня, либо все не из Перечня.
		// Сообщить о товарах, которые не входят в Перечень.
		Если СтруктураФлаги.ЕстьТоварыИзПеречня И (НЕ СтруктураФлаги.ВсеТоварыВходятВПеречень) Тогда
			
			Сообщение = НСтр(
			"ru = 'Документ содержит одновременно товары, входящие в Перечень товаров с пониженной ставкой пошлин и не входящие.
			|В данной ситуации может потребоваться оформить два документа, один по товарам входящим в Перечень, второй по не входящим.
			|Товары не входящие в Перечень:
			|%1'");
			
			ОписаниеВсехТоваров = "";
			Для Каждого СтрокаТовары Из Товары Цикл
				Если НЕ СтрокаТовары.ВключенВПереченьИзъятий Тогда
					ОписаниеТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru = '""%1"" (номер строки: %2).'"),
						СтрокаТовары.Товар,
						СтрокаТовары.НомерСтроки);
					ОписаниеВсехТоваров = ОписаниеВсехТоваров + ОписаниеТовара + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
			
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Сообщение, СокрЛП(ОписаниеВсехТоваров));
			МассивСообщений.Добавить(Сообщение, "0");
			
		КонецЕсли;
		
		// Сообщить, если есть товары входящие в Печень с незаполненным способом происхождения.
		// Проверка выполняется только для товаров входящих в Перечнь.
		Если СтруктураФлаги.ЕстьОшибкиТоварыИзПеречня Тогда
			
			Сообщение = НСтр(
			"ru = 'В документе имеются товары, входящие в Перечень товаров с пониженной ставкой пошлин, у которых не заполнен способ происхождения.
			|При реализации товаров входящих в Перечень необходимо, чтобы у этих товаров был заполнен способ происхождения.
			|Список товаров с пустым способом происхождения:
			|%1'");
			
			ОписаниеВсехТоваров = "";
			Для Каждого СтрокаТовары Из Товары Цикл
				Если СтрокаТовары.ВключенВПереченьИзъятий И НЕ ЗначениеЗаполнено(СтрокаТовары.СпособПроисхождения) Тогда
					ОписаниеТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						НСтр("ru = '   - ""%1"" (номер строки: %2).'"),
						СтрокаТовары.Товар,
						СтрокаТовары.НомерСтроки);
					ОписаниеВсехТоваров = ОписаниеВсехТоваров + ОписаниеТовара + Символы.ПС;
				КонецЕсли;
			КонецЦикла;
			
			Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Сообщение, СокрЛП(ОписаниеВсехТоваров));
			МассивСообщений.Добавить(Сообщение, "1");
			
		КонецЕсли;
			
		Для Каждого КлючЗначение Из СтруктураДанныхГТД Цикл
			СтруктураДанныхГТД.Вставить(КлючЗначение.Ключ, ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючЗначение.Значение));
		КонецЦикла;
		
		СтруктураДанныхГТД.Вставить("КодыСтранПроисхождения", Новый Массив);
		Для Каждого СтранаПроисхождения Из СтруктураДанныхГТД.СтраныПроисхождения Цикл 
			СтруктураДанныхГТД.КодыСтранПроисхождения.Добавить(ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтранаПроисхождения, "КодАльфа3"));
		КонецЦикла;
		
		Если СтруктураДанныхГТД.СпособыПроисхождения.Количество() > 1 Тогда
			Сообщение = НСтр(
			"ru = 'Документ содержит товары с различными способами происхождения.
			|В данной ситуации может потребоваться оформить отдельные документы для каждого способа происхождения.'");
			
			МассивСообщений.Добавить(Сообщение, "4");
		КонецЕсли;
		
		Если СтруктураДанныхГТД.РегНомераЭСФ.Количество() > 1 Тогда
			
			Сообщение = НСтр(
			"ru = 'Документ содержит товары с различными регистрационными номерами полученных ЭСФ.
			|В данной ситуации может потребоваться оформить отдельный документ для каждого регистрационного номера ЭСФ.'");		
			
			МассивСообщений.Добавить(Сообщение, "5");
			
		КонецЕсли;
		
		// Проверим заполнение колонок таблицы Товары для импортных товаров и/или включенных в Перечень.
		Если СтруктураФлаги.ЕстьИмпортныеТовары ИЛИ СтруктураФлаги.ЕстьТоварыИзПеречня Тогда
			Для Каждого СтрокаТовары Из Товары Цикл
				
				Если НЕ (СтрокаТовары.ВключенВПереченьИзъятий ИЛИ ЗначениеЗаполнено(СтрокаТовары.НомерГТД)) Тогда
					Продолжить;
				КонецЕсли;
				
				// Колонка "КодТНВЭД" должна быть заполнена.
				Если ПустаяСтрока(СтрокаТовары.КодТНВЭД)
					И ((СтрокаТовары.ВключенВПереченьИзъятий И СтранаНазначенияЕАЭС)
						ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС
						ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ВТО) Тогда
					
					Сообщение = НСтр(
					"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
					|Код ТН ВЭД необходимо обязательно указывать если товар был импортирован и/или входит в Перечень товаров с пониженной ставкой пошлин.'");
					
					Если СтрокаТовары.ВключенВПереченьИзъятий Тогда
						Причина = НСтр("ru = 'входит в перечень товаров с пониженной ставкой пошлин'");
					Иначе
						Причина = НСтр("ru = 'был импортирован на территорию РК'");
					КонецЕсли;
					
					Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						Сообщение,
						СтрокаТовары.ТоварНаименование,
						СтрокаТовары.НомерСтроки,
						Причина);
						
					МассивСообщений.Добавить(Сообщение, "3");
					
				КонецЕсли;
				
				// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
				Если ПустаяСтрока(СокрЛП(СтрокаТовары.НомерЗаявленияВРамкахТС)) Тогда
					
					Если СтрокаТовары.ВключенВПереченьИзъятий
						ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ТС
						ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ВТО
						ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС Тогда
						
						Сообщение = НСтр(
						"ru = 'Для товара ""%1"" (номер строки: %2) не заполнена колонка №14 в таблице ""Товары"".
						|Колонка №14 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
						|Колонку №14 в таблице ""Товары"" необходимо заполнять если товар входит в перечень или был ввезен из других стран.'");
						
						Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Сообщение,
							СтрокаТовары.ТоварНаименование,
							СтрокаТовары.НомерСтроки);
						
						МассивСообщений.Добавить(Сообщение, "3");
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Показать сообщение, что НомерСтрокиГТД не заполнен.
				Если ПустаяСтрока(СтрокаТовары.ДополнительныеДанные) Тогда
					
					Если СтрокаТовары.ВключенВПереченьИзъятий
						И (СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ВТО
							ИЛИ СтрокаТовары.СпособПроисхождения = Перечисления.СпособыПроисхожденияТоваров.ЕТТЕАЭС) Тогда
						
						Сообщение = НСтр(
						"ru = 'Для товара ""%1"" (номер строки: %2) не заполнен номер строки ГТД в таблице ""Товары"".
						|Номер строки ГТД необходимо заполнять, так как данный товар входит в перечень товаров с пониженной ставкой пошлин и был импортирован на территорию РК.'");
						
						Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Сообщение,
							СтрокаТовары.ТоварНаименование,
							СтрокаТовары.НомерСтроки);
						
						МассивСообщений.Добавить(Сообщение, "3");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ВедетсяУчетПоТоварамНаВС Тогда
			
			Для Каждого СтрокаТовары Из Товары Цикл
				
				Если СтрокаТовары.ВключенВПереченьИзъятий Тогда
				
					Если СтрокаТовары.ПризнакПроисхождения = "1" ИЛИ СтрокаТовары.ПризнакПроисхождения = "2" 
						ИЛИ СтрокаТовары.ПризнакПроисхождения = "3" ИЛИ (СтрокаТовары.ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС) Тогда
						
						Если ПустаяСтрока(СтрокаТовары.КодТНВЭД) Тогда
							
							Сообщение = НСтр(
							"ru = 'Товар ""%1"" (номер строки: %2) %3 и для него не указан код ТН ВЭД.
							|Код ТН ВЭД необходимо обязательно указывать если товар отностися к Признаку ""1"", ""2"", ""3"" а так же ""4"" при экспорте товаров в государства-члены ЕАЭС.'");
							
							Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								Сообщение,
								СтрокаТовары.ТоварНаименование,
								СтрокаТовары.НомерСтроки);
								
							МассивСообщений.Добавить(Сообщение);
							
						КонецЕсли;
					КонецЕсли;	
					
					Если СтрокаТовары.ПризнакПроисхождения = "1" Или (СтрокаТовары.ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС) Тогда 
						
						// Показать сообщение, что НомерГТД или НомерЗаявления или НомерСертификата не заполнен.
						Если ПустаяСтрока(СокрЛП(СтрокаТовары.НомерЗаявленияВРамкахТС)) Тогда
							
							Сообщение = НСтр(
							"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить колонку №15 в таблице ""Товары"".
							|Колонка №15 в таблице ""Товары"" содержит Номер заявления в рамках ТС или Номер декларации на товары или Номер сертификата происхождения товара.
							|Колонку №15 в таблице ""Товары"" необходимо обязательно заполнять, если товар отностися к Признаку ""1"", а так же ""3"" при экспорте товаров в государства-члены ЕАЭС.'");
							
							Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								Сообщение,
								СтрокаТовары.ТоварНаименование,
								СтрокаТовары.НомерСтроки);
							
							МассивСообщений.Добавить(Сообщение);
								
						КонецЕсли;
					КонецЕсли;	
					
					Если СтрокаТовары.ПризнакПроисхождения = "1" Тогда
						
						// Показать сообщение, что НомерСтрокиГТД не заполнен.
						Если ПустаяСтрока(СтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении) Тогда
							
								Сообщение = НСтр(
								"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить номер строки ГТД или Заявления о ввозе товаров в таблице ""Товары"".
								|Номер строки необходимо заполнять, так как данный товар относится к Признаку ""1"".'");
							
								Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
									Сообщение,
									СтрокаТовары.ТоварНаименование,
									СтрокаТовары.НомерСтроки);
								
								МассивСообщений.Добавить(Сообщение);
						
						КонецЕсли;
					КонецЕсли;	
					
					Если СтрокаТовары.ПризнакПроисхождения = "1" ИЛИ СтрокаТовары.ПризнакПроисхождения = "2" Тогда
						
						// Показать сообщение, что Наименование товара в рамках ТС не заполнено.
						Если ПустаяСтрока(СтрокаТовары.ТоварНаименованиеВРамкахТС) Тогда
							
							Сообщение = НСтр(
							"ru = 'Для товара ""%1"" (номер строки: %2) не удалось заполнить Наименование в соответствии с Декларацией на товары или Заявлением о ввозе товаров.
							|Данная графа подлежит обязательному заполнению по товарам, относящимся к Признакам ""1"", ""2"".'");
						
							Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
								Сообщение,
								СтрокаТовары.ТоварНаименование,
								СтрокаТовары.НомерСтроки);
							
							МассивСообщений.Добавить(Сообщение);
										
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
					// Показать сообщение, что ПризнакПроисхождения не заполнен.
					Если СтрокаТовары.ПризнакПроисхождения = "5" И НЕ ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда//И Не ВыборкаПоТоварамИзПеречня.Услуга Тогда
						
						Сообщение = НСтр(
						"ru = 'Для товара ""%1"" не указан Признак в источнике происхождения либо источник происхождения не определен.
						|По умолчанию графа ""Признак происхождения"" заполнен значением ""5"", так как данная графа обязательна к заполнению. 
						|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
					
						Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
							Сообщение,
							СтрокаТовары.ТоварНаименование);
													
						МассивСообщений.Добавить(Сообщение);
						
					КонецЕсли;
										
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
		
	МассивСообщений.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат МассивСообщений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СобратьДанныеДляЗаполненияИсходящегоЭСФ(ДанныеЗаполнения, СтруктураЗаполнения, МассивСообщений = Неопределено, ВерсияЭСФ) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		СсылкаНаДокументИБ = ДанныеЗаполнения;
		РеквизитыДокумента = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(СсылкаНаДокументИБ, "Валюта, Дата, СчетФактураОснование, ДатаСовершенияОборотаПоРеализации");
		ПараметрыПечати = Новый Структура("ПечатьВВалюте, ДанныеДоговораГЗ, ПредставлениеНаборов", РеквизитыДокумента.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить(), Истина, Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие);
		КурсВалюты = 1;
		Если ПараметрыПечати.ПечатьВВалюте Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДокумента.Валюта, РеквизитыДокумента.ДатаСовершенияОборотаПоРеализации);
			КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
		КонецЕсли;
		
		ПереченьИзъятий = ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий();
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(СсылкаНаДокументИБ);
		
		СтруктураДанных = Документы[СсылкаНаДокументИБ.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыСчетФактура(
			ПараметрыПечати,
			МассивОбъектов);
	Иначе
		СсылкаНаДокументИБ = ДанныеЗаполнения.ДокументОснование;
		РеквизитыДокумента = ДанныеЗаполнения.СтруктураДанныхСФ.ДанныеКурсаИОснования.Получить(СсылкаНаДокументИБ);
		КурсВалюты = 1;
		Если РеквизитыДокумента.Валюта <> ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДокумента.Валюта, РеквизитыДокумента.Дата);
			КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
		КонецЕсли;
		
		ПереченьИзъятий = ДанныеЗаполнения.СтруктураДанныхСФ.ПереченьИзъятий;
		
		СтруктураДанных = ДанныеЗаполнения.СтруктураДанныхСФ.ДанныеДляЗаполненияЭСФ;
	КонецЕсли;
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	Если ПараметрыЭСФ.Свойство("ПерезаполнитьПризнакПроисхождения") Тогда
        ПерезаполнитьПризнакПроисхождения = ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения;
	Иначе
		ПерезаполнитьПризнакПроисхождения = Ложь;
	КонецЕсли;
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	Если НЕ ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		Возврат;
	КонецЕсли;
	
	СтранаНазначенияЕАЭС = УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(ДанныеШапки.СтранаНазначения, ТекущаяДатаСеанса());
	
	СтруктураЗаполнения.Шапка.Вставить("СчетФактура",                    ДанныеШапки.Ссылка);
	СтруктураЗаполнения.Шапка.Вставить("Направление",                    Перечисления.НаправленияЭСФ.Исходящий);
	СтруктураЗаполнения.Шапка.Вставить("ДатаОборота",                    ДанныеШапки.ДатаОборотаПоРеализации);
	СтруктураЗаполнения.Шапка.Вставить("Дата",                           ТекущаяДатаСеанса());
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(ДанныеШапки.Дата);
	Если НЕ ДанныеШапки.Исправление Тогда
		СтруктураЗаполнения.Шапка.Вставить("Номер", СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеШапки.Номер, Истина, Истина)));
	Иначе
		СтруктураЗаполнения.Шапка.Вставить("Номер", СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеШапки.Номер, Истина, Истина)));
	КонецЕсли;
	
	ВидЭСФ = Перечисления.ВидыЭСФ.Обычный;
	Если ДанныеШапки.КорректировочныйСчетФактура Тогда
		ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный;
	ИначеЕсли ДанныеШапки.Исправление Тогда
		ВидЭСФ = Перечисления.ВидыЭСФ.Исправленный;
	КонецЕсли;
	СтруктураЗаполнения.Шапка.Вставить("Вид",                            ВидЭСФ);
	СтруктураЗаполнения.Шапка.Вставить("СчетФактураОснование",           РеквизитыДокумента.СчетФактураОснование);
	
	СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
	СтруктураЗаполнения.Шапка.Вставить("ГрузоотправительИдентификатор",  СведенияОГрузоотправителе.ИНН);
	СтруктураЗаполнения.Шапка.Вставить("ГрузоотправительНаименование",   СведенияОГрузоотправителе.Представление);
	СтруктураЗаполнения.Шапка.Вставить("Грузоотправитель",               ДанныеШапки.Грузоотправитель);
	СтруктураЗаполнения.Шапка.Вставить("АдресОтправки",                  СведенияОГрузоотправителе.ЮридическийАдрес);
	
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Грузополучатель, ДанныеШапки.Дата);
	СтруктураЗаполнения.Шапка.Вставить("ГрузополучательИдентификатор",   СведенияОГрузополучателе.ИНН);
	СтруктураЗаполнения.Шапка.Вставить("ГрузополучательНаименование",    СведенияОГрузополучателе.Представление);
	СтруктураЗаполнения.Шапка.Вставить("Грузополучатель",                ДанныеШапки.Грузополучатель);
	СтруктураЗаполнения.Шапка.Вставить("АдресДоставки",                  ДанныеШапки.АдресДоставки);
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставкиУсловияПоставки", ДанныеШапки.УсловияПоставки);
	СтруктураЗаполнения.Шапка.Вставить("СпособОтправленияПоКлассификатору", ДанныеШапки.СпособОтправленияПоКлассификатору);
	
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если ЗначениеЗаполнено(ДанныеШапки.Договор) Тогда
		Договор = ДанныеШапки.Договор;
	КонецЕсли;
	ДанныеДоговора = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Договор, "Номер, Дата, ТипДоговора");
	
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставки",                ДанныеШапки.Договор);
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставкиНомер",           ДанныеДоговора.Номер);
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставкиДата",            ДанныеДоговора.Дата);
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставкиУсловияОплаты",   УсловияОплатыПоФормеОплаты(ДанныеШапки.ФормаОплаты));
	СтруктураЗаполнения.Шапка.Вставить("ДоговорПоставкиСпособОтправления", ДанныеШапки.СпособДоставки);
	
	СтруктураЗаполнения.Шапка.Вставить("ДоверенностьНаПоставкуНомер",    ДанныеШапки.ДоверенностьНомер);
	СтруктураЗаполнения.Шапка.Вставить("ДоверенностьНаПоставкуДата",     ДанныеШапки.ДоверенностьДата);
	СтруктураЗаполнения.Шапка.Вставить("СтранаНазначения",               ДанныеШапки.СтранаНазначения);
	СтруктураЗаполнения.Шапка.Вставить("ПунктНазначения",                ДанныеШапки.АдресДоставки);
	Если ДанныеШапки.ГосударственноеУчреждение = Истина Тогда
		СтруктураЗаполнения.Шапка.Вставить("ГосучреждениеКодТоваров",        ДанныеШапки.ГосучреждениеКодТоваров);
		СтруктураЗаполнения.Шапка.Вставить("ГосучреждениеНазначениеПлатежа", ДанныеШапки.ГосучреждениеНазначениеПлатежа);
	КонецЕсли;
	СтруктураЗаполнения.Шапка.Вставить("Валюта",                         РеквизитыДокумента.Валюта);
	СтруктураЗаполнения.Шапка.Вставить("ВалютаКод",                      РеквизитыДокумента.Валюта.Наименование);
	СтруктураЗаполнения.Шапка.Вставить("КурсВалюты",                     КурсВалюты);
	СтруктураЗаполнения.Шапка.Вставить("Организация",                    ДанныеШапки.Организация);
	СтруктураЗаполнения.Шапка.Вставить("Контрагент",                     ДанныеШапки.Контрагент);
	СтруктураЗаполнения.Шапка.Вставить("ГрузополучательКодСтраны",       "KZ");
	
	//++ НЕ ЭСФ
	
	// Заполнить виртуальный склад из документа основания
	Если ВедетсяУчетПоТоварамНаВС Тогда
		Склад = ВССервер.ПолучитьСоответствиеСклада(ДанныеШапки.Склад, ДанныеШапки.Организация); 
		Если Склад <> Неопределено Тогда
			//перезапишем виртуальный склад
			СтруктураЗаполнения.Шапка.Вставить("Склад", Склад);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ЭСФ
	
	// Поставщик
	ТаблицаПоставщиков = СтруктураЗаполнения.Поставщики;
	СтрокаПоставщик = ТаблицаПоставщиков.Добавить();
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Организация, ДанныеШапки.Дата, , ДанныеШапки.БанковскийСчетОрганизации);
	Если  СведенияОПоставщике.ОбособленноеПодразделение И ДанныеШапки.Организация.УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуре Тогда
		СведенияОГоловнойОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СведенияОПоставщике.ГоловнаяОрганизация, ДанныеШапки.Дата, ,);
		СтрокаПоставщик.Поставщик               = СведенияОПоставщике.ГоловнаяОрганизация;
		СтрокаПоставщик.ПоставщикИдентификатор  = СведенияОГоловнойОрганизации.ИНН;
		СтрокаПоставщик.БИНФилиала  			= СведенияОПоставщике.ИНН;
		СтрокаПоставщик.ПоставщикНаименование   = СведенияОГоловнойОрганизации.Представление;
		СтрокаПоставщик.Адрес                   = СведенияОГоловнойОрганизации.ЮридическийАдрес;
		СтрокаПоставщик.СерияСвидетельстваПоНДС = СведенияОГоловнойОрганизации.СерияСвидетельстваПоНДС;
		СтрокаПоставщик.НомерСвидетельстваПоНДС = СведенияОГоловнойОрганизации.НомерСвидетельстваПоНДС;
		СтрокаПоставщик.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСерверПереопределяемый.ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(СведенияОПоставщике.ГоловнаяОрганизация);
	Иначе
		СтрокаПоставщик.Поставщик               = ДанныеШапки.Организация;
		СтрокаПоставщик.ПоставщикИдентификатор  = СведенияОПоставщике.ИНН;
		СтрокаПоставщик.ПоставщикНаименование   = СведенияОПоставщике.Представление;
		СтрокаПоставщик.Адрес                   = СведенияОПоставщике.ЮридическийАдрес;
		СтрокаПоставщик.СерияСвидетельстваПоНДС = СведенияОПоставщике.СерияСвидетельстваПоНДС;
		СтрокаПоставщик.НомерСвидетельстваПоНДС = СведенияОПоставщике.НомерСвидетельстваПоНДС;
		СтрокаПоставщик.ЯвляетсяСтруктурнымПодразделениемНерезидента = ЭСФСерверПереопределяемый.ПолучитьПризнакЯвляетсяСтруктурнымПодразделениемНерезидента(ДанныеШапки.Организация);
	КонецЕсли;
	СтрокаПоставщик.КБЕ                     = СведенияОПоставщике.КБЕ;
	СтрокаПоставщик.ИИК                     = СведенияОПоставщике.НомерСчета;
	СтрокаПоставщик.БИК                     = СведенияОПоставщике.БИК;
	СтрокаПоставщик.НаименованиеБанка       = СведенияОПоставщике.Банк;
	СтрокаПоставщик.Комитент                = (ДанныеДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером);
	СтрокаПоставщик.Комиссионер             = (ДанныеДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом);
	//новые реквизиты в версии №2
	СтрокаПоставщик.УчастникСРП 			= Ложь;
	СтрокаПоставщик.Экспортер 				= Ложь;
	СтрокаПоставщик.МеждународныйПеревозчик = Ложь;
	СтрокаПоставщик.Доверитель 				= Ложь;
	
	
	ПоставщикЭкспортер = ЗначениеЗаполнено(ДанныеШапки.СтранаНазначения) И ДанныеШапки.СтранаНазначения <> Справочники.СтраныМира.Казахстан;
	СтранаНазначенияКодАльфа2 = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ДанныеШапки.СтранаНазначения, "КодАльфа2");
		
	Если ЗначениеЗаполнено(ДанныеШапки.СтранаНазначения) Тогда
		Если ВерсияЭСФ = 1 Тогда
			Если ПоставщикЭкспортер Тогда
				СтрокаПоставщик.ЭкспортерИлиУчастникСРП = Истина;
			КонецЕсли;
		Иначе
			Если ПоставщикЭкспортер Тогда
				СтрокаПоставщик.Экспортер = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВерсияЭСФ = 2 Тогда
			Если ПоставщикЭкспортер Тогда
				СтруктураЗаполнения.Шапка.Вставить("ГрузополучательКодСтраны", СтранаНазначенияКодАльфа2);
			КонецЕсли;
		КонецЕсли;	
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураЗаполнения.Шапка.АдресОтправки) Тогда
		СтруктураЗаполнения.Шапка.Вставить("АдресОтправки", СведенияОПоставщике.ЮридическийАдрес);
	КонецЕсли;
	
	ДокументыПоставкиИтоги = СтруктураДанных.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДокументыПоставкиИтоги.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		ДокументыПоставкиДетально = ДокументыПоставкиИтоги.Выбрать();
		Если ДокументыПоставкиДетально.Следующий() И ЗначениеЗаполнено(ДокументыПоставкиДетально.ДокументОснование) Тогда
			Если ТипЗнч(ДокументыПоставкиДетально.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				ДанныеДокументаПоставки = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ДокументыПоставкиДетально.ДокументОснование.ДокументОснование, "Номер, Дата");
			Иначе	
				ДанныеДокументаПоставки = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ДокументыПоставкиДетально.ДокументОснование, "Номер, Дата");
			КонецЕсли;
			
			Если ВерсияЭСФ = 1 Тогда
				Если ЗначениеЗаполнено(ДанныеДокументаПоставки.Номер) Тогда
					СтрокаПоставщик.ДокументПодтверждающийПоставкуНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументаПоставки.Номер, Ложь, Истина);
				КонецЕсли;
				СтрокаПоставщик.ДокументПодтверждающийПоставкуДата  = ДанныеДокументаПоставки.Дата;
			Иначе
				Если ЗначениеЗаполнено(ДанныеШапки.НомерДокументаГЗ) И ЗначениеЗаполнено(ДанныеШапки.ДатаДокументаГЗ) Тогда
					СтруктураЗаполнения.Шапка.Вставить("ДокументПодтверждающийПоставкуНомер", ДанныеШапки.НомерДокументаГЗ);
					СтруктураЗаполнения.Шапка.Вставить("ДокументПодтверждающийПоставкуДата", ДанныеШапки.ДатаДокументаГЗ);
				Иначе
					СтруктураЗаполнения.Шапка.Вставить("ДокументПодтверждающийПоставкуНомер", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеДокументаПоставки.Номер, Ложь, Истина));
					СтруктураЗаполнения.Шапка.Вставить("ДокументПодтверждающийПоставкуДата", ДанныеДокументаПоставки.Дата);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получатель
	ТаблицаПолучателей = СтруктураЗаполнения.Получатели;
	СтрокаПолучатель = ТаблицаПолучателей.Добавить();
	
	СведенияОПолучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеШапки.Контрагент, ДанныеШапки.Дата, , ДанныеШапки.БанковскийСчетКонтрагента);
	СтрокаПолучатель.Получатель              = ДанныеШапки.Контрагент;
	СтрокаПолучатель.ПолучательИдентификатор = СведенияОПолучателе.ИНН;
	СтрокаПолучатель.ПолучательНаименование  = СведенияОПолучателе.Представление;
	СтрокаПолучатель.Адрес                   = СведенияОПолучателе.ЮридическийАдрес;
	СтрокаПолучатель.СерияСвидетельстваПоНДС = СведенияОПолучателе.СерияСвидетельстваПоНДС;
	СтрокаПолучатель.НомерСвидетельстваПоНДС = СведенияОПолучателе.НомерСвидетельстваПоНДС;
	СтрокаПолучатель.Комитент                = (ДанныеДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СКомиссионером);
	СтрокаПолучатель.Комиссионер             = (ДанныеДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СКомитентом);
	СтрокаПолучатель.ГосударственноеУчреждение = ДанныеШапки.ГосударственноеУчреждение;
	ЭСФСерверПереопределяемый.ЗаполнитьБИНФилиалаПокупателя(СтрокаПолучатель, ДанныеШапки);
	Если СтрокаПолучатель.ГосударственноеУчреждение Тогда
		СтруктураЗаполнения.Шапка.Вставить("ГосучреждениеИИК", СведенияОПолучателе.НомерСчета);
		СтруктураЗаполнения.Шапка.Вставить("ГосучреждениеБИК", СведенияОПолучателе.БИК);
	КонецЕсли;
	
	// в случае, если данных нет в документе-основания, заполним юридическим адресом контрагента
	Если СтруктураЗаполнения.Шапка.Свойство("АдресДоставки") И НЕ ЗначениеЗаполнено(СтруктураЗаполнения.Шапка.АдресДоставки) Тогда
		 СтруктураЗаполнения.Шапка.АдресДоставки = СведенияОПолучателе.ЮридическийАдрес;
	КонецЕсли;
	
	ПолучательРезидентРК = ЗначениеЗаполнено(ДанныеШапки.СтранаНазначения) И ДанныеШапки.СтранаНазначения = Справочники.СтраныМира.Казахстан;
	
	Если ДанныеШапки.Контрагент = Справочники.Контрагенты.РозничныйПокупатель Тогда
		СтрокаПолучатель.ПолучательНаименование = НСтр("ru = 'физические лица'");
		СтрокаПолучатель.Адрес = НСтр("ru = 'розничная торговля'");
		Если ВерсияЭСФ = 1 Тогда
			СтрокаПолучатель.Нерезидент = Истина;
		Иначе
			СтрокаПолучатель.РозничнаяРеализация = Истина;
		КонецЕсли;
		СтруктураЗаполнения.Шапка.Вставить("ГрузополучательНаименование",    СтрокаПолучатель.ПолучательНаименование);
		СтруктураЗаполнения.Шапка.Вставить("АдресДоставки",                  СтрокаПолучатель.Адрес);
	Иначе	
		// если вне условия на розничного покупателя, то могут возникнуть случаи установки обоих признаков
		Если ВерсияЭСФ = 1 Тогда
			СтрокаПолучатель.Нерезидент = НЕ ПолучательРезидентРК;		
		Иначе	
			СтрокаПолучатель.НерезидентВерсия2 = НЕ ПолучательРезидентРК;		
		КонецЕсли;	
	КонецЕсли;
	
	Если ВерсияЭСФ = 2 Тогда
		Если ПоставщикЭкспортер Тогда
			СтрокаПолучатель.КодСтраны = СтранаНазначенияКодАльфа2;
		Иначе	
			СтрокаПолучатель.КодСтраны = "KZ";
		КонецЕсли;
	КонецЕсли;
	
	// Товары.
	СтруктураДанныхГТД = Новый Структура(
		"РегНомераЭСФ, СтраныПроисхождения, СпособыПроисхождения, ПризнакПроисхождения",
		Новый Массив, Новый Массив, Новый Массив, Новый Массив);
	
	СтруктураФлаги = Новый Структура(
		"ЕстьТоварыИзПеречня, ЕстьОшибкиТоварыИзПеречня, ВсеТоварыВходятВПеречень, ЕстьИмпортныеТовары", Ложь, Ложь, Истина, Ложь);
	СтруктураЗаполнения.Товары.Колонки.Добавить("ВключенВПереченьИзъятий", Новый ОписаниеТипов("Булево"));
	СтруктураЗаполнения.Товары.Колонки.Добавить("СпособПроисхождения");
	СтруктураЗаполнения.Товары.Колонки.Добавить("ЭтоТовар");
	СтруктураЗаполнения.Товары.Колонки.Добавить("ЭтоУслуга");
	
	ВыборкаТоварыИтоги = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если МассивСообщений = Неопределено Тогда
		МассивСообщений = Новый СписокЗначений;
	КонецЕсли;
	
	НомерСтрокиТовары = 0;
	
	СтруктураСтавкиНДСМестоРеализацииНеРК = СтруктураЗаполнения.СтруктураСтавкиНДСМестоРеализацииНеРК;
	
	Если ВыборкаТоварыИтоги.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		ВыборкаТовары = ВыборкаТоварыИтоги.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			НомерСтрокиТовары = НомерСтрокиТовары + 1;
			
			СтрокаТовары = СтруктураЗаполнения.Товары.Добавить();
			СтрокаТовары.Товар                        = ВыборкаТовары.Номенклатура;
			СтрокаТовары.ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(СтрокаТовары.Товар);
			
			// при заполнении из разных документов в указанных полях может находиться тип отличный от Строки,
			// при таких ситуациях будет возникать ошибка при использовании процедуры ПредставлениеНоменклатурыДляПечати
			Если ТипЗнч(ВыборкаТовары.НоменклатураНаименование) = Тип("Строка") 
				И ТипЗнч(ВыборкаТовары.ХарактеристикаНаименование) = Тип("Строка") Тогда
					
				СтрокаТовары.ТоварНаименование            = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаТовары.НоменклатураНаименование,
					ВыборкаТовары.ХарактеристикаНаименование
					+ ?(ВыборкаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), ""));
					
			Иначе
					
				СтрокаТовары.ТоварНаименование = Строка(ВыборкаТовары.Номенклатура);
					
			КонецЕсли;
			
			СтрокаТовары.ЕдиницаИзмеренияНаименование = ВыборкаТовары.ЕдиницаИзмеренияНаименование;
			СтрокаТовары.ЕдиницаИзмерения             = ВыборкаТовары.ЕдиницаИзмерения;
			СтрокаТовары.ЕдиницаИзмеренияКод          = ВыборкаТовары.ЕдиницаИзмеренияКодЭСФ;
			Если ЗначениеЗаполнено(ВыборкаТовары.ИдентификаторТовара) Тогда
				СтрокаТовары.ИдентификаторТовара = ВыборкаТовары.ИдентификаторТовара;
			Иначе	
				СтрокаТовары.ИдентификаторТовара = "1";
			КонецЕсли;	
	
			СтрокаТовары.Количество                   = ВыборкаТовары.Количество;
			СтрокаТовары.Цена                         = ВыборкаТовары.Цена;
			СтрокаТовары.СуммаБезНалогов              = ВыборкаТовары.СуммаБезНДС;
			СтрокаТовары.ОборотПоРеализации           = ?(СтруктураДанных.РезультатПоТабличнойЧасти.Колонки.Найти("БазаНДСРегл") = Неопределено, ВыборкаТовары.СуммаБезНДС,ВыборкаТовары.БазаНДСРегл);
			СтрокаТовары.СтавкаНДС                    = ВыборкаТовары.СтавкаНДС;
			СтрокаТовары.СтавкаНДСЧисло               = ВыборкаТовары.СтавкаНДС.Ставка;
			СтрокаТовары.БезНДС                       = (ВыборкаТовары.СтавкаНДС.ДляОсвобожденногоОборота ИЛИ ВыборкаТовары.СтавкаНДС.МестоРеализацииНеРК);
			СтрокаТовары.СуммаНДС                     = ВыборкаТовары.СуммаНДС;
			СтрокаТовары.Сумма                        = ВыборкаТовары.СуммаСНДС;
			СтрокаТовары.ЭтоТовар                     = ВыборкаТовары.ЭтоТовар;
			СтрокаТовары.КодТНВЭД                     = ВыборкаТовары.КодТНВЭД;
			
			//+
			Если ВыборкаТовары.СтавкаНДС.МестоРеализацииНеРК Тогда
				СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ЕстьСтавкаНДСМестоРеализацииНеРК", Истина);
			Иначе
				СтруктураСтавкиНДСМестоРеализацииНеРК.Вставить("ВсеСтавкиНДСМестоРеализацииНеРК" , Ложь);
			КонецЕсли;
			//-
			
			Если НЕ ВедетсяУчетПоТоварамНаВС Тогда
				
				Если ЗначениеЗаполнено(ВыборкаТовары.НомерГТД) Тогда
					СтруктураФлаги.ЕстьИмпортныеТовары = Истина;
					
					РеквизитыНомераГТД = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(
						ВыборкаТовары.НомерГТД,
						"Код, КодТНВЭД, СпособПроисхождения, НаименованиеТовара, НомерСтрокиГТД, РегистрационныйНомерЭСФ, СтранаПроисхождения, ПризнакПроисхождения");
					
					ВключенВПереченьИзъятий = (ПереченьИзъятий.Найти(РеквизитыНомераГТД.КодТНВЭД) <> Неопределено);
					СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И ВключенВПереченьИзъятий;
					СтрокаТовары.ВключенВПереченьИзъятий = ВключенВПереченьИзъятий;
					
					ПризнакПроисхождения = "";
					
					Если ВерсияЭСФ = 2 Тогда
							
						ПризнакПроисхождения = РеквизитыНомераГТД.ПризнакПроисхождения;
						
						Если ПустаяСтрока(ПризнакПроисхождения) Тогда
							// ПризнакПроисхождения товаров для услуг
							Если НЕ ВыборкаТовары.ЭтоТовар Тогда
								ПризнакПроисхождения = "6"; // «6» – в случае выполнения работ, оказания услуг.
							Иначе
								ПризнакПроисхождения = "5"; // «5» – товары, если не ведется учет по источникам происхождения
							КонецЕсли;
						КонецЕсли;
						
						СтрокаТовары.ПризнакПроисхождения = ПризнакПроисхождения;
						
						Если ПерезаполнитьПризнакПроисхождения Тогда
							
							//Перезаполним Признаки происхождения в соответствии с вхождением в актуальный перечень
										
							НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(ПризнакПроисхождения, СтрокаТовары.ВключенВПереченьИзъятий);
							Если ПризнакПроисхождения <> НовыйПризнакПроисхождения Тогда
								
								Сообщение = НСтр("ru = 'Для товара ""%1"" (номер строки: %2) был переопределен Признак происхождения с ""%3"" (указан в источнике происх.) на ""%4"" (определен по тек. вхождению в Товары с пониж.ставкой).'");
								
								Сообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
									Сообщение,
									СтрокаТовары.ТоварНаименование,
									НомерСтрокиТовары,
									ПризнакПроисхождения,
									НовыйПризнакПроисхождения);
									
								МассивСообщений.Добавить(Сообщение);
							КонецЕсли;
							
							ПризнакПроисхождения = НовыйПризнакПроисхождения;
							СтрокаТовары.ПризнакПроисхождения = НовыйПризнакПроисхождения;	
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаТовары.НомерГТД = ВыборкаТовары.НомерГТД;
					
					Если ВключенВПереченьИзъятий Тогда
						
						СтруктураФлаги.ЕстьТоварыИзПеречня = Истина;
						СтруктураФлаги.ЕстьОшибкиТоварыИзПеречня = НЕ ЗначениеЗаполнено(РеквизитыНомераГТД.СпособПроисхождения);
						
						Если ВерсияЭСФ = 1 Тогда
							СтрокаТовары.ДополнительныеДанные = РеквизитыНомераГТД.НомерСтрокиГТД;
						Иначе
							

						КонецЕсли;
						
						СтрокаТовары.СпособПроисхождения  = РеквизитыНомераГТД.СпособПроисхождения;
						
						СтруктураДанныхГТД.РегНомераЭСФ.        Добавить(РеквизитыНомераГТД.РегистрационныйНомерЭСФ);
						СтруктураДанныхГТД.СтраныПроисхождения. Добавить(РеквизитыНомераГТД.СтранаПроисхождения);
						СтруктураДанныхГТД.СпособыПроисхождения.Добавить(РеквизитыНомераГТД.СпособПроисхождения);
						Если ВерсияЭСФ = 2 Тогда
							СтруктураДанныхГТД.ПризнакПроисхождения.Добавить(ПризнакПроисхождения);
						КонецЕсли;
					КонецЕсли;
					
					Если ВерсияЭСФ = 1 Тогда
						
						Если ЗначениеЗаполнено(РеквизитыНомераГТД.НаименованиеТовара) Тогда
							СтрокаТовары.ТоварНаименование    = РеквизитыНомераГТД.НаименованиеТовара;
						КонецЕсли;
						
						СтрокаТовары.КодТНВЭД = РеквизитыНомераГТД.КодТНВЭД;
						СтрокаТовары.НомерЗаявленияВРамкахТС  = РеквизитыНомераГТД.Код;
						
					Иначе
						
						//В версии ЭСФ - 2 код ТНВЭД заполняется только в тех случаях, когда он д.б. обязательно заполнен
						//поэтому если в предыдущих процедурах данный код заполнился, то здесь сначала очистим его.
						//Очистка вынесена в данную процедуру преднамеренно, т.е. если учет оп ГТД не ведется, то КОД заполняется всегда из спр. Номерклатура, без каких-либо условий
						СтрокаТовары.КодТНВЭД = "";

						Если ПризнакПроисхождения = "1" ИЛИ ПризнакПроисхождения = "2" 
							ИЛИ ПризнакПроисхождения = "3" ИЛИ (ПризнакПроисхождения = "4" И СтранаНазначенияЕАЭС)
							ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
								//Заполняем с приоритетом кода из ГТД
								СтрокаТовары.КодТНВЭД = ?(ЗначениеЗаполнено(РеквизитыНомераГТД.КодТНВЭД), РеквизитыНомераГТД.КодТНВЭД, ВыборкаТовары.КодТНВЭД);
						КонецЕсли;
						
						Если ПризнакПроисхождения = "1" ИЛИ (ПризнакПроисхождения = "3" И СтранаНазначенияЕАЭС)
							ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда 
							СтрокаТовары.НомерЗаявленияВРамкахТС  = РеквизитыНомераГТД.Код;
						КонецЕсли;
						
						Если ПризнакПроисхождения = "1"
							ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
							СтрокаТовары.НомерПозицииВДекларацииИлиЗаявлении = Формат(РеквизитыНомераГТД.НомерСтрокиГТД, "ЧГ=");
						КонецЕсли;
						
						Если ПризнакПроисхождения = "1" ИЛИ ПризнакПроисхождения = "2"
							ИЛИ (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
							Если ЗначениеЗаполнено(РеквизитыНомераГТД.НаименованиеТовара) Тогда
								СтрокаТовары.ТоварНаименованиеВРамкахТС = РеквизитыНомераГТД.НаименованиеТовара;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;	

				ИначеЕсли ЗначениеЗаполнено(ВыборкаТовары.Номенклатура) Тогда

					РеквизитыНоменклатуры = Неопределено;
					
					Если ВыборкаТовары.КодТНВЭД <> Неопределено Тогда
						КодТНВЭДНоменклатуры = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаТовары.КодТНВЭД, "Код");
						СтрокаТовары.КодТНВЭД  = КодТНВЭДНоменклатуры;
					КонецЕсли;
					
					Если ВерсияЭСФ = 2 Тогда
							
						// ПризнакПроисхождения товаров для услуг
						Если НЕ ВыборкаТовары.ЭтоТовар Тогда
							ПризнакПроисхождения = "6"; // «6» – в случае выполнения работ, оказания услуг.
						Иначе
							ПризнакПроисхождения = "5"; // «5» – товары, если не ведется учет по источникам происхождения
						КонецЕсли;
						
						СтрокаТовары.ПризнакПроисхождения = ПризнакПроисхождения;
						
						Если (ПараметрыЭСФ <> Неопределено И ПараметрыЭСФ.ЗаполнитьИсточникиПроисхожденияБезусловно) Тогда
							
							Если ВыборкаТовары.КодТНВЭД = Неопределено ИЛИ
								ВыборкаТовары.КодТНВЭД = ПредопределенноеЗначение("Справочник.КлассификаторТНВЭД.ПустаяСсылка") Тогда
								
								РеквизитыНоменклатуры  = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ВыборкаТовары.Номенклатура, "КодТНВЭД");
								КодТНВЭДНоменклатуры   = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(РеквизитыНоменклатуры.КодТНВЭД, "Код");
								СтрокаТовары.КодТНВЭД  = КодТНВЭДНоменклатуры;
							Иначе
								КодТНВЭДНоменклатуры = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаТовары.КодТНВЭД, "Код");
								СтрокаТовары.КодТНВЭД  = КодТНВЭДНоменклатуры;
							КонецЕсли;
							
						КонецЕсли;	

					КонецЕсли;
					
					ВключенВПереченьИзъятий = (ПереченьИзъятий.Найти(КодТНВЭДНоменклатуры) <> Неопределено);
					
					ВестиУчетСертификатовНоменклатуры = Ложь;
					
					РеквизитыНоменклатуры = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ВыборкаТовары.Номенклатура, "ВестиУчетСертификатовНоменклатуры , ВидНоменклатуры");
								
					ВестиУчетСертификатовНоменклатуры = РеквизитыНоменклатуры.ВестиУчетСертификатовНоменклатуры;
					
					Если ВестиУчетСертификатовНоменклатуры Тогда
						ПараметрыПолученияНомераСертификата = Новый Структура;
						ПараметрыПолученияНомераСертификата.Вставить("Номенклатура"	  , ВыборкаТовары.Номенклатура);
						ПараметрыПолученияНомераСертификата.Вставить("Характеристика" , ВыборкаТовары.Характеристика);
						ПараметрыПолученияНомераСертификата.Вставить("Серия"		  , Неопределено);
						ПараметрыПолученияНомераСертификата.Вставить("ВидНоменклатуры", РеквизитыНоменклатуры.ВидНоменклатуры);
						ПараметрыПолученияНомераСертификата.Вставить("ДатаДокумента"  , ДанныеШапки.Дата);
						
						СтрокаТовары.НомерЗаявленияВРамкахТС = ПолучитьНомерСертификатаНоменклатуры(ПараметрыПолученияНомераСертификата);
						

						Если ВключенВПереченьИзъятий Тогда
							СтрокаТовары.ПризнакПроисхождения = "3";
						Иначе
							СтрокаТовары.ПризнакПроисхождения = "4";
						КонецЕсли;
						
					КонецЕсли;

					СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И ВключенВПереченьИзъятий;
					СтрокаТовары.ВключенВПереченьИзъятий = ВключенВПереченьИзъятий;
					Если ВключенВПереченьИзъятий Тогда
						СтруктураФлаги.ЕстьТоварыИзПеречня = Истина;
						СтруктураФлаги.ЕстьОшибкиТоварыИзПеречня = Истина;
					КонецЕсли;
					
				Иначе
					СтруктураФлаги.ВсеТоварыВходятВПеречень = СтруктураФлаги.ВсеТоварыВходятВПеречень И Ложь;
					Если ВыборкаТовары.КодТНВЭД <> Неопределено Тогда
						КодТНВЭДНоменклатуры = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаТовары.КодТНВЭД, "Код");
						СтрокаТовары.КодТНВЭД  = КодТНВЭДНоменклатуры;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
	
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВерсияЭСФ = 1 Тогда
		Если НЕ (СтруктураФлаги.ЕстьТоварыИзПеречня И СтранаНазначенияЕАЭС) Тогда
			СтруктураЗаполнения.Шапка.ПунктНазначения = "";
		КонецЕсли;
	Иначе
		Если ПолучательРезидентРК Тогда
			СтруктураЗаполнения.Шапка.ПунктНазначения = "";	
		КонецЕсли;
	КонецЕсли;
	
	МассивСообщений = ПроверитьКорректностьЗаполненияТоваровЭСФ(
		СтруктураЗаполнения.Шапка, СтруктураЗаполнения.Товары, СтруктураФлаги, СтруктураДанныхГТД, ВерсияЭСФ);
	
	Если ВерсияЭСФ = 1 И СтруктураФлаги.ЕстьТоварыИзПеречня Тогда	
		
		СтруктураЗаполнения.Шапка.Вставить("ДополнительныеСведения",
			СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(СтруктураДанныхГТД.РегНомераЭСФ, ",", Истина));
			
		СтрокаПоставщик.ДополнительныеСведения =
			СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(СтруктураДанныхГТД.СпособыПроисхождения, ",", Истина);

		СтрокаПолучатель.ДополнительныеСведения = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ДанныеШапки.СтранаНазначения, "КодАльфа3");
		
	КонецЕсли;
	
	// Заполняем исходные данные для дополнительных и исправительных счетов-фактур.
	ВыборкаИсходныеДанныеИтоги = СтруктураДанных.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИсходныеДанныеИтоги.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		ВыборкаИсходныеДанные = ВыборкаИсходныеДанныеИтоги.Выбрать();
		Пока ВыборкаИсходныеДанные.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.ИсходныеДанные.Добавить(), ВыборкаИсходныеДанные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерСертификатаНоменклатуры(ПараметрыПолученияНомераСертификата)
	
	НомерСертификата = "";
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.Ссылка КАК СертификатНоменклатурыСсылка,
	|	ВЫБОР
	|		КОГДА ОбластиДействияСертификатовНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОбластиДействияСертификатовНоменклатуры.Номенклатура <> &Номенклатура
	|					ТОГДА 5
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОбластиДействияСертификатовНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|							ТОГДА ВЫБОР
	|									КОГДА ОбластиДействияСертификатовНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|										ТОГДА 3
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ОбластиДействияСертификатовНоменклатуры.Серия = &Серия
	|												ТОГДА 3
	|											ИНАЧЕ 5
	|										КОНЕЦ
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ОбластиДействияСертификатовНоменклатуры.Характеристика <> &Характеристика
	|									ТОГДА 5
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ОбластиДействияСертификатовНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ОбластиДействияСертификатовНоменклатуры.Серия = &Серия
	|													ТОГДА 1
	|												ИНАЧЕ 5
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ вт_ВсеСертификаты
	|ИЗ
	|	РегистрСведений.ОбластиДействияСертификатовНоменклатуры КАК ОбластиДействияСертификатовНоменклатуры
	|ГДЕ
	|	ОбластиДействияСертификатовНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|	И ОбластиДействияСертификатовНоменклатуры.СертификатНоменклатуры.ТипСертификата = ""СТ-1(СТ-KZ)""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СертификатНоменклатурыСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	вт_ВсеСертификаты.СертификатНоменклатурыСсылка КАК СертификатНоменклатурыСсылка,
	|	вт_ВсеСертификаты.Приоритет КАК Приоритет,
	|	Сертификат.ДатаНачалаСрокаДействия КАК ДатаНачалаСрокаДействия,
	|	Сертификат.Номер КАК Номер
	|ИЗ
	|	вт_ВсеСертификаты КАК вт_ВсеСертификаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК Сертификат
	|		ПО вт_ВсеСертификаты.СертификатНоменклатурыСсылка = Сертификат.Ссылка
	|ГДЕ
	|	Сертификат.ПометкаУдаления = ЛОЖЬ
	|	И НАЧАЛОПЕРИОДА(Сертификат.ДатаНачалаСрокаДействия, ДЕНЬ) <= &ДатаДокумента
	|	И Сертификат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСертификатовНоменклатуры.Действующий)
	|	И ВЫБОР
	|			КОГДА Сертификат.Бессрочный
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НАЧАЛОПЕРИОДА(Сертификат.ДатаОкончанияСрокаДействия, ДЕНЬ) >= &ДатаДокумента
	|		КОНЕЦ
	|	И вт_ВсеСертификаты.Приоритет <> 5
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ДатаНачалаСрокаДействия";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры"	, ПараметрыПолученияНомераСертификата.ВидНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура"	, ПараметрыПолученияНомераСертификата.Номенклатура);
	Запрос.УстановитьПараметр("Серия"			, ПараметрыПолученияНомераСертификата.Серия);		
	Запрос.УстановитьПараметр("Характеристика"	, ПараметрыПолученияНомераСертификата.Характеристика);		
	Запрос.УстановитьПараметр("ДатаДокумента"	, НачалоДня(ПараметрыПолученияНомераСертификата.ДатаДокумента));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УстловиеХарактеристики", 
					?(ЗначениеЗаполнено(ПараметрыПолученияНомераСертификата.Характеристика), " И ОбластиДействияСертификатовНоменклатуры.Характеристика = &Характеристика", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УстловиеСерии", 
					?(ЗначениеЗаполнено(ПараметрыПолученияНомераСертификата.Характеристика), " И ОбластиДействияСертификатовНоменклатуры.Серия = &Серия", ""));
					
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() Тогда
		НомерСертификата = ВыборкаЗапроса.Номер;
	КонецЕсли;
	
	Возврат НомерСертификата;
	
КонецФункции	

Функция УсловияОплатыПоФормеОплаты(ФормаОплаты)
	
	СоответствиеФормОплаты = Новый Соответствие;
	СоответствиеФормОплаты.Вставить(Перечисления.ФормыОплаты.Наличная,       НСтр("ru = 'Оплата наличными'"));
	СоответствиеФормОплаты.Вставить(Перечисления.ФормыОплаты.Безналичная,    НСтр("ru = 'Безналичная оплата'"));
	СоответствиеФормОплаты.Вставить(Перечисления.ФормыОплаты.ПлатежнаяКарта, НСтр("ru = 'Оплата платежной картой'"));
	СоответствиеФормОплаты.Вставить(Перечисления.ФормыОплаты.Взаимозачет,    НСтр("ru = 'Взаимозачет задолженности'"));
	СоответствиеФормОплаты.Вставить(Перечисления.ФормыОплаты.ПустаяСсылка(), НСтр("ru = 'Оплата наличными/безналичными'"));
	
	Результат = СоответствиеФормОплаты[ФормаОплаты];
	Если Результат = Неопределено Тогда
		Возврат СоответствиеФормОплаты[Перечисления.ФормыОплаты.Наличная];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сохраненные соответствия "Единица измерения наименование - Единица измерения ссылка".
//
// Параметры:
//  ТаблицаНаименованийЕдиницИзмерения - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единиц измерений, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Единица измерения наименование - Единица измерения ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ЕдиницаИзмеренияНаименование - Строка - Наименования единицы измерения, как в параметре ТаблицаНаименованийЕдиницИзмерения.
//   |- ЕдиницаИзмерения - См. РегистрыСведений.СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения - Ссылка на единицу измерения.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокЕдиницИзмерения(ТаблицаНаименованийЕдиницИзмерения)
	
	// Добавить и заполнить колонку "ЕдиницаИзмеренияНаименованиеПреобразованное".
	ТипЕдиницаИзмеренияНаименование = ТаблицаНаименованийЕдиницИзмерения.Колонки.ЕдиницаИзмеренияНаименование.ТипЗначения;
	ТаблицаНаименованийЕдиницИзмерения.Колонки.Добавить("ЕдиницаИзмеренияНаименованиеПреобразованное", ТипЕдиницаИзмеренияНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийЕдиницИзмерения Цикл
		СтрокаТаблицы.ЕдиницаИзмеренияНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ЕдиницаИзмеренияНаименование);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийЕдиницИзмерения.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийЕдиницИзмерения.Товар КАК Товар,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименованиеИсходное,
	|	ТаблицаНаименованийЕдиницИзмерения.ЕдиницаИзмеренияНаименованиеПреобразованное КАК ЕдиницаИзмеренияНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийЕдиницИзмерения КАК ТаблицаНаименованийЕдиницИзмерения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ЕдиницаИзмеренияНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.Товар КАК Товар,
	|	ВременнаяТаблица.ЕдиницаИзмеренияНаименованиеИсходное КАК ЕдиницаИзмеренияНаименование,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименованиеИзСправочника
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокЕдиницИзмерения КАК СоответствияНаименованийИСсылокЕдиницИзмерения
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокЕдиницИзмерения.Контрагент
	|			И ВременнаяТаблица.Товар = СоответствияНаименованийИСсылокЕдиницИзмерения.Товар
	|			И ВременнаяТаблица.ЕдиницаИзмеренияНаименование = СоответствияНаименованийИСсылокЕдиницИзмерения.ЕдиницаИзмеренияНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийЕдиницИзмерения", ТаблицаНаименованийЕдиницИзмерения);	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("Контрагент, Товар, ЕдиницаИзмеренияНаименование");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Возвращает сохраненные соответствия "Товар наименование - Товар ссылка".
//
// Параметры:
//  ТаблицаНаименованийТоваров - ТаблицаЗначений - Таблица для поиска ссылок.
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагенты, для которых необходимо найти соответствия.
//   |- ТоварНаименование - Строка - Наименования товаров, для которых необходимо найти соответствия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Найденные соответствия "Товар наименование - Товар ссылка".
//   |- Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому принадлежит соответствие.  
//   |- ТоварНаименование - Строка - Наименования товара, как в параметре ТаблицаНаименованийТоваров.
//   |- Товар - См. РегистрыСведений.СоответствияНаименованийИСсылокТоваров.Товар - Ссылка на товар.
//
Функция ПолучитьСохраненныеСоответствияНаименованийИСсылокТоваров(ТаблицаНаименованийТоваров)
	
	// Добавить и заполнить колонку "ТоварНаименованиеПреобразованное".
	ТипТоварНаименование = ТаблицаНаименованийТоваров.Колонки.ТоварНаименование.ТипЗначения;
	ТаблицаНаименованийТоваров.Колонки.Добавить("ТоварНаименованиеПреобразованное", ТипТоварНаименование);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНаименованийТоваров Цикл
		СтрокаТаблицы.ТоварНаименованиеПреобразованное = ЭСФКлиентСервер.ПреобразованноеНаименование(СтрокаТаблицы.ТоварНаименование);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаНаименованийТоваров.Контрагент КАК Контрагент,
	|	ТаблицаНаименованийТоваров.ТоварНаименование КАК ТоварНаименованиеИсходное,
	|	ТаблицаНаименованийТоваров.ТоварНаименованиеПреобразованное КАК ТоварНаименование
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаНаименованийТоваров КАК ТаблицаНаименованийТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ТоварНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблица.Контрагент,
	|	ВременнаяТаблица.ТоварНаименованиеИсходное КАК ТоварНаименование,
	|	СоответствияНаименованийИСсылокТоваров.Товар КАК Товар
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияНаименованийИСсылокТоваров КАК СоответствияНаименованийИСсылокТоваров
	|		ПО ВременнаяТаблица.Контрагент = СоответствияНаименованийИСсылокТоваров.Контрагент
	|			И ВременнаяТаблица.ТоварНаименование = СоответствияНаименованийИСсылокТоваров.ТоварНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийТоваров", ТаблицаНаименованийТоваров);
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("Контрагент, ТоварНаименование");
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

Процедура ЗаполнитьДанныеСвязанногоЭСФ(ОсновнойСчетФактура, ОбъектЭСФ, ВерсияЭСФ)
	
	АктуальныйОсновнойЭСФ = ЭСФСервер.АктуальныйЭСФ(ОсновнойСчетФактура);
	ОбъектЭСФ.СвязанныйЭСФ = АктуальныйОсновнойЭСФ;
	Если ЗначениеЗаполнено(ОбъектЭСФ.СвязанныйЭСФ) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ОбъектЭСФ.СвязанныйЭСФ);
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Операция.Ссылка,
		|	Операция.Дата КАК СвязанныйЭСФДата,
		|	Операция.Номер КАК СвязанныйЭСФНомер,
		|	Операция.ДатаОборота,
		|	Операция.РегистрационныйНомер КАК СвязанныйЭСФРегистрационныйНомер,
		|	Операция.ПунктНазначения,
		|	Операция.ДоверенностьНаПоставкуНомер,
		|	Операция.ДоверенностьНаПоставкуДата,
		|	Операция.ДоговорПоставкиУсловияОплаты,
		|	Операция.ДоговорПоставкиСпособОтправления,
		|	Операция.ГрузоотправительИдентификатор,
		|	Операция.ГрузоотправительНаименование,
		|	Операция.АдресОтправки,
		|	Операция.ГрузополучательИдентификатор,
		|	Операция.ГрузополучательНаименование,
		|	Операция.АдресДоставки," + ?(ВерсияЭСФ = 1, "
		|	Строки.ДокументПодтверждающийПоставкуНомер,
		|	Строки.ДокументПодтверждающийПоставкуДата", "
		|	Операция.ДокументПодтверждающийПоставкуНомер,
		|	Операция.ДокументПодтверждающийПоставкуДата") + "
		|ИЗ
		|	Документ.ЭСФ.Поставщики КАК Строки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК Операция
		|		ПО Строки.Ссылка = Операция.Ссылка
		|ГДЕ
		|	Операция.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Строки.НомерСтроки";
		
		РеквизитыЭСФ = Запрос.Выполнить().Выбрать();
		Если РеквизитыЭСФ.Следующий() Тогда

			ОбъектЭСФ.СвязанныйЭСФДата = РеквизитыЭСФ.СвязанныйЭСФДата;
			ОбъектЭСФ.СвязанныйЭСФНомер = РеквизитыЭСФ.СвязанныйЭСФНомер;
			ОбъектЭСФ.СвязанныйЭСФРегистрационныйНомер = РеквизитыЭСФ.СвязанныйЭСФРегистрационныйНомер;
			
			Для Каждого СтрокаТаблицы Из ОбъектЭСФ.Поставщики Цикл
				СтрокаТаблицы.ДокументПодтверждающийПоставкуНомер = РеквизитыЭСФ.ДокументПодтверждающийПоставкуНомер;
				СтрокаТаблицы.ДокументПодтверждающийПоставкуДата  = РеквизитыЭСФ.ДокументПодтверждающийПоставкуДата;
			КонецЦикла;
			
			Если ОбъектЭСФ.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
				ЗаполнитьЗначенияСвойств(ОбъектЭСФ, РеквизитыЭСФ,, "ДатаОборота, ДокументПодтверждающийПоставкуНомер, ДокументПодтверждающийПоставкуДата");
			Иначе
				ОбъектЭСФ.ДатаОборота = РеквизитыЭСФ.ДатаОборота;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнтьТаблицуТоваровДополнительногоСчетаФактуры(ОбъектЭСФ, СвязанныйЭСФ, ВерсияЭСФ)
	
	ТоварыОсновногоЭСФ = СвязанныйЭСФ.Товары.Выгрузить();
	ТаблицаТоваров = ОбъектЭСФ.Товары.Выгрузить();
	
	// очистим Товары и далее перезаполним их с учетом сортировки основного СФ
	ОбъектЭСФ.Товары.Очистить();
	
	ПереченьИзъятий = ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий();
	
	ПараметрыЭСФ = ЭСФСерверПовтИсп.ПолучитьПараметрыЭСФ();
	Если ПараметрыЭСФ.Свойство("ПерезаполнитьПризнакПроисхождения") Тогда
        ПерезаполнитьПризнакПроисхождения = ПараметрыЭСФ.ПерезаполнитьПризнакПроисхождения;
    Иначе
        ПерезаполнитьПризнакПроисхождения = Ложь;
    КонецЕсли;
	
	Для Каждого СтрокаТоваровОсновногоЭСФ Из ТоварыОсновногоЭСФ Цикл
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ТоварНаименование",            СокрЛП(СтрокаТоваровОсновногоЭСФ.ТоварНаименование));
		ПараметрыПоиска.Вставить("ЕдиницаИзмеренияНаименование", СтрокаТоваровОсновногоЭСФ.ЕдиницаИзмеренияНаименование);
		
		Если ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаТоваровОсновногоЭСФ.Товар, "ВестиУчетПоГТД") Тогда
			ПараметрыПоиска.Вставить("НомерГТД", СтрокаТоваровОсновногоЭСФ.НомерГТД);
		КонецЕсли;	
		
		НайденныеСтроки = ТаблицаТоваров.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрокаТовары = ОбъектЭСФ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТоваровОсновногоЭСФ, "ТоварНаименование, Товар, КодТНВЭД, ЕдиницаИзмеренияНаименование, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, НомерЗаявленияВРамкахТС, НомерГТД, ПризнакПроисхождения, ИдентификаторТовара, СтавкаНДС, СтавкаНДСЧисло, НомерПозицииВДекларацииИлиЗаявлении, ТоварНаименованиеВРамкахТС");
			
		Иначе
			
			// исправленные строки заполним из документа основания
			СтрокаОснования = НайденныеСтроки[0];
			
			НоваяСтрокаТовары = ОбъектЭСФ.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаОснования);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрокаТовары.ИдентификаторТовара) Тогда
				НоваяСтрокаТовары.ИдентификаторТовара = "1";
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(СтрокаТоваровОсновногоЭСФ.НомерГТД) Тогда
				
				Если ВерсияЭСФ = 2 Тогда
					
					ВключенВПереченьИзъятий = (ПереченьИзъятий.Найти(СтрокаТоваровОсновногоЭСФ.КодТНВЭД) <> Неопределено);
					
					Если ПерезаполнитьПризнакПроисхождения Тогда
						
						//Перезаполним Признаки происхождения в соответствии с вхождением в актуальный перечень
						НовыйПризнакПроисхождения = ПроверитьЗаполнитьПризнакПроисхождения(СтрокаТоваровОсновногоЭСФ.ПризнакПроисхождения, ВключенВПереченьИзъятий);
						
						ПризнакПроисхождения = НовыйПризнакПроисхождения;
						СтрокаТоваровОсновногоЭСФ.ПризнакПроисхождения = НовыйПризнакПроисхождения;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ОбъектЭСФ.Товары.Количество() <> ТоварыОсновногоЭСФ.Количество() Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(
			НСтр("ru = 'Дополнительный электронный счет-фактура и связанный с ним основной электронный счет-фактура содержат разное количество строк в разделе G. ""Товары""'"));
	КонецЕсли;
	
КонецПроцедуры


//Процедура корректировки ошибок округления при возврате товаров
Процедура СкорректироватьСуммыТоваровПриВозврате(ОбъектЭСФ)
	
	Если ОбъектЭСФ.СвязанныйЭСФ.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ЭтоВозврат = Ложь;
	//Проверка на тип документа (так как явного признака нет, проверяем по отрицательному количеству)
	Для каждого Строка из ОбъектЭСФ.Товары цикл
		Если Строка.Количество < 0 Тогда
			ЭтоВозврат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоВозврат Тогда	
		
		ПараметрыЭСФ = ЭСФСервер.ПолучитьПараметрыЭСФ();
		ПорогОкругленияСумм = ПараметрыЭСФ.ПорогОкругленияСумм;
		
		Если ПорогОкругленияСумм = 0 Тогда
			Возврат;	
		КонецЕсли;
		
		//Заполним список товаров, по которым будем получать данные
		МассивТоваров = Новый СписокЗначений;
		Для каждого Строка из ОбъектЭСФ.Товары цикл
			Если МассивТоваров.НайтиПоЗначению(Строка.Товар) = Неопределено И НЕ ЭСФСерверПереопределяемый.ЭтоУслуга(Строка.Товар) Тогда  
				МассивТоваров.Добавить(Строка.Товар);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
				   
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации КАК БалансОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество КАК БалансКоличество,
		               |	ЭСФТовары.СуммаБезНалогов КАК БалансСуммаБезНалогов,
		               |	ЭСФТовары.Сумма КАК БалансСуммаСНалогами,
		               |	ЭСФТовары.СуммаАкциза КАК БалансСуммаАкциза
		               |ПОМЕСТИТЬ ВТ_ОсновнойИДополнительные
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Обычный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |			И (ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ПринятСервером)
		               |				ИЛИ ЭСФ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЭСФ.ДоставленПолучателю))
		               |ГДЕ
		               |	ЭСФТовары.Ссылка = &Ссылка
		               //|	И ЭСФТовары.Товар.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		               |	И ЭСФ.Ссылка = &Ссылка
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               |	И ЭСФТовары.Товар В(&МассивТоваров)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЭСФТовары.ОборотПоРеализации,
		               |	ЭСФТовары.СуммаНДС,
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	ЭСФТовары.Количество,
		               |	ЭСФТовары.СуммаБезНалогов,
		               |	ЭСФТовары.Сумма,
		               |	ЭСФТовары.СуммаАкциза
		               |ИЗ
		               |	Документ.ЭСФ.Товары КАК ЭСФТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
		               |		ПО ЭСФТовары.Ссылка = ЭСФ.Ссылка
		               |			И (ЭСФ.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЭСФ.Дополнительный))
		               |			И (ЭСФ.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий))
		               |ГДЕ
		               |	ЭСФТовары.Товар В(&МассивТоваров)
		               |	И ЭСФ.Ссылка <> &СсылкаТекущегоЭСФ
		               //|	И ЭСФТовары.Товар.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		               |	И ЭСФ.СвязанныйЭСФ = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СУММА(ЭСФТовары.БалансОборотПоРеализации) КАК БалансОборотПоРеализации,
		               |	СУММА(ЭСФТовары.БалансСуммаНДС) КАК БалансСуммаНДС,
		               |	ЭСФТовары.Товар КАК Товар,
		               |	ЭСФТовары.НомерСтроки,
		               |	СУММА(ЭСФТовары.БалансКоличество) КАК БалансКоличество,
		               |	СУММА(ЭСФТовары.БалансСуммаБезНалогов) КАК БалансСуммаБезНалогов,
		               |	СУММА(ЭСФТовары.БалансСуммаСНалогами) КАК БалансСуммаСНалогами,
		               |	СУММА(ЭСФТовары.БалансСуммаАкциза) КАК БалансСуммаАкциза
		               |ИЗ
		               |	ВТ_ОсновнойИДополнительные КАК ЭСФТовары
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЭСФТовары.Товар,
		               |	ЭСФТовары.НомерСтроки";
					   
		Запрос.УстановитьПараметр("Ссылка",	ОбъектЭСФ.СвязанныйЭСФ);	 //Электронный счет-фактура
		Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
		Запрос.УстановитьПараметр("СсылкаТекущегоЭСФ", ОбъектЭСФ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() цикл
			//Возьмем из текущего ЭСФ строку с товаром. Так как порядок должен быть таким же - просто берем по индексу.
			Если РезультатЗапроса.НомерСтроки <= ОбъектЭСФ.Товары.Количество() Тогда
				СтрокаТовара = ОбъектЭСФ.Товары[РезультатЗапроса.НомерСтроки-1];
			Иначе
				СтрокаТовара = Неопределено;
			КонецЕсли;
			Если СтрокаТовара <> Неопределено Тогда
				
				Если НЕ СтрокаТовара.Количество = 0 И ((РезультатЗапроса.БалансКоличество + СтрокаТовара.Количество) = 0) Тогда
					
					//Сумма НДС
					
					БалансСуммыНДС = РезультатЗапроса.БалансСуммаНДС + СтрокаТовара.СуммаНДС;
					
					Если НЕ БалансСуммыНДС = 0 И БалансСуммыНДС <= ПорогОкругленияСумм И БалансСуммыНДС >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаНДС = СтрокаТовара.СуммаНДС - БалансСуммыНДС;
					КонецЕсли;	
					
					//Сумма оборота
					
					БалансСуммыОборота = РезультатЗапроса.БалансОборотПоРеализации + СтрокаТовара.ОборотПоРеализации;
					Если НЕ БалансСуммыОборота = 0 И БалансСуммыОборота <= ПорогОкругленияСумм И БалансСуммыОборота >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.ОборотПоРеализации = СтрокаТовара.ОборотПоРеализации - БалансСуммыОборота;
					КонецЕсли;	
					
					//Сумма без налогов
					
					БалансСуммыБезНалогов = РезультатЗапроса.БалансСуммаБезНалогов + СтрокаТовара.СуммаБезНалогов;
					Если НЕ БалансСуммыБезНалогов = 0 И БалансСуммыБезНалогов <= ПорогОкругленияСумм И БалансСуммыБезНалогов >= -ПорогОкругленияСумм  Тогда 
						СтрокаТовара.СуммаБезНалогов = СтрокаТовара.СуммаБезНалогов - БалансСуммыБезНалогов;
					КонецЕсли;
					
					//Сумма с налогами
					
					БалансСуммыСНалогами = РезультатЗапроса.БалансСуммаСНалогами + СтрокаТовара.Сумма;
					Если НЕ БалансСуммыСНалогами = 0 И БалансСуммыСНалогами <= ПорогОкругленияСумм И БалансСуммыСНалогами >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.Сумма = СтрокаТовара.Сумма - БалансСуммыСНалогами;	
					КонецЕсли;
					
					//Сумма акциза
					
					БалансСуммыАкциза = РезультатЗапроса.БалансСуммаАкциза + СтрокаТовара.СуммаАкциза;
					Если НЕ БалансСуммыАкциза = 0 И БалансСуммыАкциза <= ПорогОкругленияСумм И БалансСуммыАкциза >= -ПорогОкругленияСумм Тогда 
						СтрокаТовара.СуммаАкциза = СтрокаТовара.СуммаАкциза - БалансСуммыАкциза;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка, АктуальныйЭСФ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезXML") Тогда
			
			ИмяСчетаФактурыВыданного = "СчетФактураВыданный";
			ИмяСчетаФактурыПолученного = "СчетФактураПолученный";
			Если ИмяСчетаФактурыВыданного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного) Тогда
				
				ДанныеЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(СсылкаНаВладельца);
				Если ЗначениеЗаполнено(ДанныеЭСФ) Тогда
					АктуальныйЭСФ = ДанныеЭСФ.ЭСФ;
					ТекстСостоянияЭД = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
						ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ДанныеЭСФ.ЭСФ),
						ДанныеЭСФ.Состояние);
				ИначеЕсли СсылкаНаВладельца.ВыставленВЭлектронномВиде Тогда
					ТекстСостоянияЭД = Нстр("ru = 'Не сформирован'");
				Иначе		
					ТекстСостоянияЭД = Нстр("ru = 'Сформировать ЭСФ для счета-фактуры, выписанного на бумаге'");
				КонецЕсли;
			ИначеЕсли ИмяСчетаФактурыПолученного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного)
				ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЗаписьКнигиПокупок") Тогда
				
				ДанныеЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(СсылкаНаВладельца);
				Если ЗначениеЗаполнено(ДанныеЭСФ) Тогда
					АктуальныйЭСФ = ДанныеЭСФ.ЭСФ;
					ТекстСостоянияЭД = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
						ЭСФКлиентСервер.КраткоеПредставлениеЭСФ(ДанныеЭСФ.ЭСФ),
						ДанныеЭСФ.Состояние);
						
				ИначеЕсли СсылкаНаВладельца.ПолученВЭлектронномВиде Тогда
					ТекстСостоянияЭД = Нстр("ru = 'Выбрать ЭСФ'");		
				Иначе
					ТекстСостоянияЭД = Нстр("ru = 'Выбрать ЭСФ для счета-фактуры, выписанного на бумаге'");
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекстСостоянияЭД = НСтр("ru = 'Настроить обмен электронными счетами-фактурами'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

#Область СозданиеДокументовОтраженияВУчете

Процедура ЗаполнитьПоступлениеТоваровУслугПоЭСФ(Источник, СсылкаЭСФ)
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить данные для заполнения счета-фактуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.ДатаОборота КАК Дата,
	|	ЭСФ.Валюта КАК Валюта,
	|	ЭСФ.Валюта КАК ВалютаВзаиморасчетов,
	|	ЭСФ.ДокументПодтверждающийПоставкуДата КАК ДатаВходящегоДокумента,
	|	ЭСФ.ДоговорПоставки КАК Договор,
	|	ЭСФ.ГрузоотправительИдентификатор КАК ГрузоотправительИНН,
	|	ЭСФПоставщики.Поставщик КАК Контрагент,
	|	ЭСФПоставщики.Поставщик.Партнер КАК Партнер,
	|	ЭСФПоставщики.Комитент КАК ЭтоПриемНаКомиссию,
	|	ЭСФПоставщики.ИИК КАК НомерСчетаПоставщика,
	|	ЭСФ.ДокументПодтверждающийПоставкуНомер КАК НомерВходящегоДокумента,
	|	ЭСФ.Организация КАК Организация
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО (ЭСФПолучатели.НомерСтроки = 1)
	|			И ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &СсылкаЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК ЭСФ,
	|	ЭСФТовары.Товар КАК Номенклатура,
	|	ЭСФТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭСФТовары.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭСФТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЭСФТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЭСФТовары.СуммаНДС,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза КАК Сумма,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза + ЭСФТовары.СуммаНДС КАК СуммаСНДС,
	|	ЭСФТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|ГДЕ
	|	ЭСФТовары.Ссылка = &СсылкаЭСФ";
	
	Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	ВыборкаТовары = МассивРезультатов[1].Выбрать();
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизиты счета-фактуры
	
	ЗаполнитьЗначенияСвойств(Источник, ВыборкаРеквизиты);
	Источник.ЦенаВключаетНДС = Ложь;
	
	Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Если ВыборкаРеквизиты.ЭтоПриемНаКомиссию = Истина Тогда
		Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаРеквизиты.ГрузоотправительИНН) Тогда
		Источник.Грузоотправитель = ЭлектронноеВзаимодействиеУТ.НайтиСсылкуНаОбъектПоРеквизиту(
		"Контрагенты", "ИНН", ВыборкаРеквизиты.ГрузоотправительИНН);
	КонецЕсли;
	
	Источник.БанковскийСчетГрузоотправителя = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Источник.Грузоотправитель);
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить табличную часть поступления.
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура);
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТаблицы = Источник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаТовары);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Источник.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"), Истина);
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Источник.Товары, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкаЭСФ(Источник, СсылкаЭСФ)
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить данные для заполнения счета-фактуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.ДатаОборота КАК Дата,
	|	ЭСФ.Вид КАК ВидЭСФ,
	|	ЭСФ.Валюта КАК Валюта,
	|	ЭСФ.Валюта КАК ВалютаВзаиморасчетов,
	|	ЭСФ.Дата КАК ДатаВходящегоДокумента,
	|	ЭСФ.ДоговорПоставки КАК Договор,
	|	ЭСФ.ГрузоотправительИдентификатор КАК ГрузоотправительИНН,
	|	ЭСФПоставщики.Поставщик КАК Контрагент,
	|	ЭСФПоставщики.Поставщик.Партнер КАК Партнер,
	|	ЭСФПоставщики.Комитент КАК ЭтоПриемНаКомиссию,
	|	ЭСФПоставщики.ИИК КАК НомерСчетаПоставщика,
	|	ЭСФ.Номер КАК НомерВходящегоДокумента,
	|	ЭСФ.Организация КАК Организация
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО (ЭСФПолучатели.НомерСтроки = 1)
	|			И ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &СсылкаЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК ЭСФ,
	|	ЭСФТовары.Товар КАК Номенклатура,
	|	ЭСФТовары.ЕдиницаИзмерения КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭСФТовары.Количество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЭСФТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ЭСФТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	ЭСФТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЭСФТовары.СуммаНДС,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза КАК Сумма,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза + ЭСФТовары.СуммаНДС КАК СуммаСНДС,
	|	ЭСФТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|ГДЕ
	|	ЭСФТовары.Ссылка = &СсылкаЭСФ";
	
	Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	ВыборкаТовары = МассивРезультатов[1].Выбрать();
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизиты счета-фактуры
	
	ЗаполнитьЗначенияСвойств(Источник, ВыборкаРеквизиты);
	Источник.ЦенаВключаетНДС = Ложь;
	
	Если ВыборкаРеквизиты.ВидЭСФ = Перечисления.ВидыЭСФ.Дополнительный Тогда
		Источник.ВидКорректировки = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
	Иначе
		Источник.ВидКорректировки = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить табличную часть поступления.
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура);
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТаблицы = Источник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаТовары);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоступлениеУслугПрочихАктивовПоЭСФ(Источник, СсылкаЭСФ)
	
	//////////////////////////////////////////////////////////////////////////////
	// Получить данные для заполнения счета-фактуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФ.Ссылка КАК ЭСФ,
	|	ЭСФ.ДатаОборота КАК Дата,
	|	ЭСФ.Валюта КАК Валюта,
	|	ЭСФ.Валюта КАК ВалютаВзаиморасчетов,
	|	ЭСФ.ДокументПодтверждающийПоставкуДата КАК ДатаВходящегоДокумента,
	|	ЭСФ.ДоговорПоставки КАК Договор,
	|	ЭСФПоставщики.Поставщик КАК Контрагент,
	|	ЭСФПоставщики.Поставщик.Партнер КАК Партнер,
	|	ЭСФПоставщики.Комитент КАК ЭтоПриемНаКомиссию,
	|	ЭСФПоставщики.ИИК КАК НомерСчетаПоставщика,
	|	ЭСФ.ДокументПодтверждающийПоставкуНомер КАК НомерВходящегоДокумента,
	|	ЭСФ.Организация КАК Организация
	|ИЗ
	|	Документ.ЭСФ КАК ЭСФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Поставщики КАК ЭСФПоставщики
	|		ПО ЭСФ.Ссылка = ЭСФПоставщики.Ссылка
	|			И (ЭСФПоставщики.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ.Получатели КАК ЭСФПолучатели
	|		ПО (ЭСФПолучатели.НомерСтроки = 1)
	|			И ЭСФ.Ссылка = ЭСФПолучатели.Ссылка
	|ГДЕ
	|	ЭСФ.Ссылка = &СсылкаЭСФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭСФТовары.Ссылка КАК ЭСФ,
	|	ЭСФТовары.Товар КАК Номенклатура,
	|	ЭСФТовары.Количество КАК Количество,
	|	ЭСФТовары.Цена КАК Цена,
	|	ЭСФТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЭСФТовары.СуммаНДС,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза КАК Сумма,
	|	ЭСФТовары.СуммаБезНалогов + ЭСФТовары.СуммаАкциза + ЭСФТовары.СуммаНДС КАК СуммаСНДС,
	|	ЭСФТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТовары
	|ГДЕ
	|	ЭСФТовары.Ссылка = &СсылкаЭСФ";
	
	Запрос.УстановитьПараметр("СсылкаЭСФ", СсылкаЭСФ);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = МассивРезультатов[0].Выбрать();
	ВыборкаРеквизиты.Следующий();
	
	ВыборкаТовары = МассивРезультатов[1].Выбрать();
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить реквизиты счета-фактуры
	
	ЗаполнитьЗначенияСвойств(Источник, ВыборкаРеквизиты);
	Источник.ЦенаВключаетНДС = Ложь;
	
	Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Если ВыборкаРеквизиты.ЭтоПриемНаКомиссию = Истина Тогда
		Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Заполнить табличную часть поступления.
	
	СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура);
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТаблицы = Источник.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаТовары);
		СтрокаТаблицы.Содержание = ВыборкаТовары.Номенклатура;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСДокументамиУчетнойСистемойСлужебныеПроцедурыИФункции

#Область ПриСозданииНаСервере

Процедура ДокументОснованиеСчетаФактурыПолученногоПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Если Не ФормаЯвляетсяФормойДокументаОснованияСчетаФактурыПолученного(Форма.ИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	НовыеРеквизитыФормы = Новый Структура("ЭСФ_СсылкаНаЭСФ, ЭСФ_СоздатьСчетФактуру");
	ДобавитьРеквизитыЭСФНаФорму(Форма, НовыеРеквизитыФормы);
	
КонецПроцедуры

Процедура СчетФактураПолученныйПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Если СтрНайти(Форма.ИмяФормы, "Документ.СчетФактураПолученный") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "АктуальныйЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	НовыеРеквизитыФормы = Новый Структура("ЭСФ_СсылкаНаЭСФ");
	ДобавитьРеквизитыЭСФНаФорму(Форма, НовыеРеквизитыФормы);
	
КонецПроцедуры

Процедура СчетФактураВыданныйПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Если СтрНайти(Форма.ИмяФормы, "Документ.СчетФактураВыданный") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "АктуальныйЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	НовыеРеквизитыФормы = Новый Структура("ЭСФ_СсылкаНаЭСФ");
	ДобавитьРеквизитыЭСФНаФорму(Форма, НовыеРеквизитыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПередЗаписьюНаСервере

Процедура ДокументОснованиеСчетаФактурыПолученногоПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ФормаЯвляетсяФормойДокументаОснованияСчетаФактурыПолученного(Форма.ИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СсылкаНаЭСФ", Форма.ЭСФ_СсылкаНаЭСФ);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭСФ_СоздатьСчетФактуру", Форма.ЭСФ_СоздатьСчетФактуру);
	
КонецПроцедуры

Процедура ДокументЗаписьКнигиПокупокПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
	
	Если НЕ МассивИмениФормы.Получить(0) = "Документ" 
		ИЛИ НЕ МассивИмениФормы.Получить(1) = "ЗаписьКнигиПокупок" Тогда
		Возврат;	
	КонецЕсли;	

		// признак снят в форме и есть закрепленный ЭСФ
	Если НЕ Форма.Объект.ПолученВЭлектронномВиде И ЗначениеЗаполнено(Форма.АктуальныйЭСФ) Тогда
		
		Попытка
			АктуальныйЭСФ = Форма.АктуальныйЭСФ.ПолучитьОбъект();
			АктуальныйЭСФ.СчетФактура = Неопределено;
			АктуальныйЭСФ.Записать();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПослеЗаписиНаСервере

Процедура ДокументОснованиеСчетаФактурыПолученногоПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ФормаЯвляетсяФормойДокументаОснованияСчетаФактурыПолученного(Форма.ИмяФормы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ЭСФ_СоздатьСчетФактуру") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ЭСФ_СоздатьСчетФактуру <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭСФ_СсылкаНаЭСФ", Форма.ЭСФ_СсылкаНаЭСФ);
	
КонецПроцедуры

Процедура СчетФактураПолученныйПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СтрНайти(Форма.ИмяФормы, "Документ.СчетФактураПолученный") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "АктуальныйЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.АктуальныйЭСФ = Форма.ЭСФ_СсылкаНаЭСФ;
	
КонецПроцедуры

Процедура СчетФактураВыданныйПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СтрНайти(Форма.ИмяФормы, "Документ.СчетФактураВыданный") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ЭСФ_СсылкаНаЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "АктуальныйЭСФ") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.АктуальныйЭСФ = Форма.ЭСФ_СсылкаНаЭСФ;
	
КонецПроцедуры

#КонецОбласти

Процедура ДобавитьРеквизитыЭСФНаФорму(Форма, ДобавляемыеРеквизиты)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Реквизит.Ключ, Новый ОписаниеТипов()));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ДобавляемыеРеквизиты, Форма.Параметры);
	ЗаполнитьЗначенияСвойств(Форма, ДобавляемыеРеквизиты);
	
КонецПроцедуры

Функция ФормаЯвляетсяФормойДокументаОснованияСчетаФактурыПолученного(ИмяФормы)
	
	РезультатПроверки = Ложь;
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивИмениФормы.Получить(0) = "Документ" Тогда
		ТипДокументаФормы = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1));
		
		ФормаЯвляетсяОсновнойФормойДокумента = МассивИмениФормы.Получить(3) = "ФормаДокумента";
		
		Если ЭтотТипДокументаЯвляетсяОснованиемСчетаФактурыПолученного(ТипДокументаФормы) И ФормаЯвляетсяОсновнойФормойДокумента Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЭтотТипДокументаЯвляетсяОснованиемСчетаФактурыПолученного(ТипДокумента)
	
	ОписаниеТиповДокументов = Метаданные.Документы.СчетФактураПолученный.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип;
	Возврат ОписаниеТиповДокументов.СодержитТип(ТипДокумента);
	
КонецФункции

Функция ДокументУжеУказанВСчетФактуре(СчетФактура, ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ПоказатьСообщения(Знач МассивСообщений, Знач СсылкаСчетФактура)
	
	Если МассивСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИтоговоеСообщение = НСтр("ru = 'Заполнение электронного счета-фактуры по документу ""%1"":
		|
		|%2'");
	
	ВсеСообщения = "";
	Для Каждого Сообщение Из МассивСообщений Цикл
		ВсеСообщения = ВсеСообщения + СокрЛП(Сообщение) + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	ИтоговоеСообщение = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИтоговоеСообщение, СсылкаСчетФактура, ВсеСообщения);
	ИтоговоеСообщение = СокрЛП(ИтоговоеСообщение) + Символы.ПС;
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ИтоговоеСообщение, СсылкаСчетФактура);
	
КонецПроцедуры

Функция ЗаполнитьТоварыДаннымиИПОсновногоЭСФ(Параметры, ОсновнойЭСФ)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновнойЭСФ", ОсновнойЭСФ);
	Запрос.УстановитьПараметр("СчетФактураОснование", Параметры.Регистратор);
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&СчетФактураОснование КАК Ссылка,
	|	ЭСФТоварыОсновной.НомерСтроки КАК НомерСтроки,
	|	ЭСФТоварыОсновной.ТоварНаименование КАК ТоварНаименование,
	|	ЭСФТоварыОсновной.Товар КАК Товар,
	|	ЭСФТоварыОсновной.КодТНВЭД КАК КодТНВЭД,
	|	ЭСФТоварыОсновной.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	ЭСФТоварыОсновной.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЭСФТоварыОсновной.Количество КАК Количество,
	|	ЭСФТоварыОсновной.Цена КАК Цена,
	|	ЭСФТоварыОсновной.СуммаБезНалогов КАК СуммаБезНалогов,
	|	ЭСФТоварыОсновной.СтавкаАкцизаЧисло КАК СтавкаАкцизаЧисло,
	|	ЭСФТоварыОсновной.СтавкаАкциза КАК СтавкаАкциза,
	|	ЭСФТоварыОсновной.СуммаАкциза КАК СуммаАкциза,
	|	ЭСФТоварыОсновной.ОборотПоРеализации КАК ОборотПоРеализации,
	|	ЭСФТоварыОсновной.СтавкаНДСЧисло КАК СтавкаНДСЧисло,
	|	ЭСФТоварыОсновной.БезНДС КАК БезНДС,
	|	ЭСФТоварыОсновной.СтавкаНДС КАК СтавкаНДС,
	|	ЭСФТоварыОсновной.СуммаНДС КАК СуммаНДС,
	|	ЭСФТоварыОсновной.Сумма КАК Сумма,
	|	ЭСФТоварыОсновной.НомерЗаявленияВРамкахТС КАК НомерЗаявленияВРамкахТС,
	|	ЭСФТоварыОсновной.ДополнительныеДанные КАК ДополнительныеДанные,
	|	ЭСФТоварыОсновной.ПризнакПроисхождения КАК ПризнакПроисхождения,
	|	ЭСФТоварыОсновной.ТоварНаименованиеВРамкахТС КАК ТоварНаименованиеВРамкахТС,
	|	ЭСФТоварыОсновной.НомерПозицииВДекларацииИлиЗаявлении КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭСФТоварыОсновной.ИдентификаторТовара КАК ИдентификаторТовара,
	|	ЭСФТоварыОсновной.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ЭСФТоварыОсновной.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ЕстьNull(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕстьNull(СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий, Ложь) КАК ГСВСВходитВПеречень,
	|	ЕстьNull(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕстьNull(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕстьNull(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ЕстьNull(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртуальномСкладе
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ЭСФТоварыОсновной
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ЭСФТоварыОсновной.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
	|		ПО (ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС)
	|			И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
	|ГДЕ
	|	ЭСФТоварыОсновной.Ссылка = &ОсновнойЭСФ";			   
				   
	ТаблицаИПОсновогоЭСФ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТоваровПоИП = ТаблицаТовары.Скопировать();
	ТаблицаТоваровПоИП.Очистить();
	
	
	Для Каждого СтрокаТовары Из ТаблицаТовары Цикл 
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Товар", СтрокаТовары.Товар);
		ПараметрыОтбора.Вставить("ТоварНаименование", СтрокаТовары.ТоварНаименование);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовары.ЕдиницаИзмерения);

		МассивСтрокПоИП = ТаблицаИПОсновогоЭСФ.НайтиСтроки(ПараметрыОтбора);
		
		КоличествоОсталосьПогасить = СтрокаТовары.Количество;
		
		ОбщаяСуммаРаспределенных				= 0;
		ОбщаяСуммаАкцизаРаспределенных			= 0;
		ОбщаяСуммаНДСРаспределенных				= 0;
		ОбщийОборотПоРеализацииРаспределенных	= 0;
		
		ПерваяСтрокаЗаполнена = Ложь;
		Для Каждого СтрокаИП Из МассивСтрокПоИП Цикл
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				Продолжить;
			КонецЕсли;
				
				Если СтрокаИП.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
					
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				
				ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(НоваяСтрока.Товар);
				НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
				
				Если ТипЗнч(НоваяСтрока.Товар) = Тип("СправочникСсылка.Номенклатура") И ЭтоУслуга Тогда
					НоваяСтрока.ПризнакПроисхождения = "6";
				ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаИП.ТипПроисхождения) ИЛИ НЕ ЗначениеЗаполнено(СтрокаИП.ГСВСВходитВПеречень) Тогда
					
					НоваяСтрока.ПризнакПроисхождения = "5";
					
					ТекстОшибки = НСтр(
					"ru = 'Для товара ""%1"" (номер строки: %2) не указан Тип происхождения или отсутствуют данные по ГСВС в источнике происхождения.
					|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению. 
					|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");

					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
																							ТекстОшибки,
																							НоваяСтрока.Товар,
																							НоваяСтрока.НомерСтроки);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ПризнакПроисхождения, "Объект");	

				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "1";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "2";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "3";
				ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
					НоваяСтрока.ПризнакПроисхождения = "4";
				Иначе
					НоваяСтрока.ПризнакПроисхождения = "5";
				КонецЕсли;
				
				//Заполнение полей из ИП
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП);
				КодГСВС = "";
				ФизическаяМетка = "";
				ИдентификаторСклада = "";
				КлючевыеПоляЗаполнены = Истина;
				СписокНезаполненныхПолей = "";
				ДополнительныйИдентификатор = "";
				
				Если ЗначениеЗаполнено(СтрокаИП.ГСВС) Тогда
					КодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаИП.ГСВС, "Наименование");
				КонецЕсли;
								
				Если ЗначениеЗаполнено(СтрокаИП.ФизическаяМетка) Тогда
					ФизическаяМетка = "[" + СтрокаИП.ФизическаяМетка + "]";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИП.ДополнительныйИдентификатор) Тогда
					ДополнительныйИдентификатор = "<" + Формат(СтрокаИП.ДополнительныйИдентификатор,"ЧГ=") + ">";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Параметры.Склад) Тогда
					ИдентификаторСклада = Формат(ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "ИдентификаторСклада"), "ЧГ=");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(КодГСВС) Тогда
					КлючевыеПоляЗаполнены = Ложь;
					СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Код ГСВС, ";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ИдентификаторСклада) Тогда
					КлючевыеПоляЗаполнены = Ложь;
					СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Идентификатор склада";
				КонецЕсли;
							
				Если КлючевыеПоляЗаполнены Тогда
					ИдентификаторТовара = "%1%2%3(%4)";
					ИдентификаторТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИдентификаторТовара, КодГСВС, ФизическаяМетка, ДополнительныйИдентификатор, ИдентификаторСклада); 
					НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
				Иначе
					НоваяСтрока.ИдентификаторТовара = "1";
				КонецЕсли;
				
				//заполнение числовых значений
				КоличествоСтроки = -Мин(СтрокаИП.Количество, -КоличествоОсталосьПогасить);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить + КоличествоСтроки*-1;	
				
				НоваяСтрока.Количество  		= КоличествоСтроки;
				
				//Пересчет суммовых значений  
				ДоляКоличестваНовойСтроки 				= КоличествоСтроки / ?(СтрокаТовары.Количество = 0, 1, СтрокаТовары.Количество);
							
				НоваяСтрока.Сумма 						= СтрокаТовары.Сумма * ДоляКоличестваНовойСтроки;
				
				НоваяСтрока.СуммаАкциза 				= СтрокаТовары.СуммаАкциза * ДоляКоличестваНовойСтроки;
				НоваяСтрока.СуммаНДС					= СтрокаТовары.СуммаНДС * ДоляКоличестваНовойСтроки;
				НоваяСтрока.ОборотПоРеализации 			= СтрокаТовары.ОборотПоРеализации * ДоляКоличестваНовойСтроки;
				
				ОбщаяСуммаРаспределенных				= ОбщаяСуммаРаспределенных + НоваяСтрока.Сумма;				        				
				
				ОбщаяСуммаАкцизаРаспределенных			= ОбщаяСуммаАкцизаРаспределенных + НоваяСтрока.СуммаАкциза;
				ОбщаяСуммаНДСРаспределенных				= ОбщаяСуммаНДСРаспределенных + НоваяСтрока.СуммаНДС;
				ОбщийОборотПоРеализацииРаспределенных	= ОбщийОборотПоРеализацииРаспределенных + НоваяСтрока.ОборотПоРеализации;
				
				//НоваяСтрока.Ссылка = СтрокаТовары.Ссылка;
		КонецЦикла;
		
		//Суммовые значения последней строки для корректировки ошибок округления
		Если НоваяСтрока <> Неопределено Тогда
			Если СтрокаТовары.Сумма <> ОбщаяСуммаРаспределенных Тогда
				НоваяСтрока.Сумма 					= СтрокаТовары.Сумма - ОбщаяСуммаРаспределенных;
			КонецЕсли;
			Если СтрокаТовары.СуммаАкциза <> ОбщаяСуммаАкцизаРаспределенных Тогда
				НоваяСтрока.СуммаАкциза 			= СтрокаТовары.СуммаАкциза - ОбщаяСуммаАкцизаРаспределенных;
			КонецЕсли;
			Если СтрокаТовары.СуммаНДС <> ОбщаяСуммаНДСРаспределенных Тогда
				НоваяСтрока.СуммаНДС				= СтрокаТовары.СуммаНДС - ОбщаяСуммаНДСРаспределенных;  
			КонецЕсли;
			Если СтрокаТовары.ОборотПоРеализации <> ОбщийОборотПоРеализацииРаспределенных Тогда
				НоваяСтрока.ОборотПоРеализации 		= СтрокаТовары.ОборотПоРеализации - ОбщийОборотПоРеализацииРаспределенных;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТаблицаТоваровДополнительный = ТаблицаТовары.Скопировать();
	ТаблицаТоваровДополнительный.Очистить();
	
	ДанныеЗаполнены = ЛОЖЬ;
	Для Каждого СтрокаТоварыОсн Из ТаблицаИПОсновогоЭСФ Цикл 
		
		СтрокаТоваровДоп = ТаблицаТоваровДополнительный.Добавить();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Товар", 								СтрокаТоварыОсн.Товар);
		ПараметрыОтбора.Вставить("ТоварНаименование",					СтрокаТоварыОсн.ТоварНаименование);
		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", 					СтрокаТоварыОсн.ЕдиницаИзмерения);
		ПараметрыОтбора.Вставить("НомерЗаявленияВРамкахТС", 			СтрокаТоварыОсн.НомерЗаявленияВРамкахТС);
		ПараметрыОтбора.Вставить("ТоварНаименованиеВРамкахТС",          СтрокаТоварыОсн.ТоварНаименованиеВРамкахТС);
	    ПараметрыОтбора.Вставить("НомерПозицииВДекларацииИлиЗаявлении", СтрокаТоварыОсн.НомерПозицииВДекларацииИлиЗаявлении);
	    ПараметрыОтбора.Вставить("ИсточникПроисхождения",               СтрокаТоварыОсн.ИсточникПроисхождения);

		МассивСтрокПоИП = ТаблицаТоваровПоИП.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрокПоИП.Количество() <> 0 Тогда
			СтрокаДляЗаполнения = МассивСтрокПоИП[0];
			ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаДляЗаполнения);
		Иначе
			
			ПараметрыОтбора = Новый Структура;
    		ПараметрыОтбора.Вставить("Товар", СтрокаТоварыОсн.Товар);
    		ПараметрыОтбора.Вставить("ЕдиницаИзмерения", СтрокаТоварыОсн.ЕдиницаИзмерения);
 
    		МассивСтрокТоваров = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
    		Если МассивСтрокТоваров.Количество() <> 0 Тогда
    			СтрокаДляЗаполнения = МассивСтрокТоваров[0];
				
				Если СтрокаДляЗаполнения.Количество > 0 Тогда
    				ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаДляЗаполнения);
    				ДанныеЗаполнены = Истина;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаТоварыОсн,, "Цена, СуммаБезНалогов, СуммаАкциза, ОборотПоРеализации, СуммаНДС, Сумма");
					
					//Установить номер строки из основной СФ
					СтрокаТоваровДоп.НомерСтроки = СтрокаТоварыОсн.НомерСтроки;
					
					//принудительно запишем 0, иначе значение будет Неопределено и в дальнейшем в алгоритмах это может приводить к исключительным ситуациям
					СтрокаТоваровДоп.Количество = 0;
					СтрокаТоваровДоп.Цена = 0;
					СтрокаТоваровДоп.СуммаБезНалогов = 0;
					СтрокаТоваровДоп.СуммаАкциза = 0;
					СтрокаТоваровДоп.ОборотПоРеализации = 0;
					СтрокаТоваровДоп.СуммаНДС = 0;
					СтрокаТоваровДоп.Сумма = 0;

				КонецЕсли;	
    		Иначе
				ЗаполнитьЗначенияСвойств(СтрокаТоваровДоп, СтрокаТоварыОсн,, "Цена, СуммаБезНалогов, СуммаАкциза, ОборотПоРеализации, СуммаНДС, Сумма");
				
				//Установить номер строки из основной СФ
				СтрокаТоваровДоп.НомерСтроки = СтрокаТоварыОсн.НомерСтроки;
				
				СтрокаТоваровДоп.ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(СтрокаТоварыОсн.Товар);
				
				//принудительно запишем 0, иначе значение будет Неопределено и в дальнейшем в алгоритмах это может приводить к исключительным ситуациям
				СтрокаТоваровДоп.Количество = 0;
				СтрокаТоваровДоп.Цена = 0;
				СтрокаТоваровДоп.СуммаБезНалогов = 0;
				СтрокаТоваровДоп.СуммаАкциза = 0;
				СтрокаТоваровДоп.ОборотПоРеализации = 0;
				СтрокаТоваровДоп.СуммаНДС = 0;
				СтрокаТоваровДоп.Сумма = 0;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаТоваровДополнительный); 
	
КонецФункции

#КонецОбласти

#КонецОбласти