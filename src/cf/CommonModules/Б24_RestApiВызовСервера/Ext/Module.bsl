
#Область Общее

Функция ОтправкаДанныхНаПортал(ОбщиеНастройки, АдресРесурса, ТелоЗапроса) Экспорт
	
	#ЕСЛИ НЕ СЕРВЕР ТОГДА 	
		Состояние(ОбщиеНастройки.Измерение3);
	#КОНЕЦЕСЛИ
	
	Соединение = УстановитьСоединениеССервером(ОбщиеНастройки.НастройкиПодключения);
	
	ПараметрВременногоТокена 	= "q=1&auth=" + ОбщиеНастройки.НастройкиПодключенияАвторизации.ВременныйТокен;
	                                        
	ПараметрКоннектора = "&" + ОбщиеНастройки.ПараметрКоннектора; 
	
	ПустойПараметр = "&LastParam=last";    //1С может резать символы, поэтому добавляем параметр, который можно спокойно резать.
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = АдресРесурса;
	
	ТелоHTTPЗапроса = ПараметрВременногоТокена + ПараметрКоннектора + ТелоЗапроса + ПустойПараметр;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type"	,"application/x-www-form-urlencoded; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Length"	, Формат(СтрДлина(ТелоHTTPЗапроса), "ЧГ=0"));
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоHTTPЗапроса);
	
	ТелоЗапросаДляЛога = РаскодироватьСтрокуСервер(РаскодироватьСтрокуСервер(ТелоHTTPЗапроса));
	
	Попытка   
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Отправка запроса по методу:" + АдресРесурса);
		
		Если ОбщиеНастройки.РежимОтладки тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Тело запроса HTTP запроса: " + ТелоЗапросаДляЛога);
		КонецЕсли;
		
		Ответ 			= Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
		ОтветСтрокой 	= Ответ.ПолучитьТелоКакСтроку();
		ОтветСПорталаДляЛога = РаскодироватьJSON(ОтветСтрокой);
		
		Если ОбщиеНастройки.РежимОтладки тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Ответ с портала: " + ОтветСПорталаДляЛога);
		КонецЕсли;
		
		Если Ответ.КодСостояния = 403 тогда
			
			Если СтрНайти(ОтветСтрокой, "WRONG_LICENSE") > 0 тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ПолучениеОшибкиПоЛицензииБитрикс24());
			Иначе
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Ключ, который вы указывали в модуле обмена 1С нужно получать под администратором портала");
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Ответ.КодСостояния = 503 тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Превышено количество запросов в секунду. Синхронизация встанет в паузу на 10 секунд");
			Б24_ОбщегоНазначенияСервер.Таймаут(10);    //для того, чтобы почистилась очередь.
			ОчередьЗапросовЗабита = Истина;	
		Иначе
			ОчередьЗапросовЗабита = Ложь;	
		КонецЕсли;
		
		ТокенУстарел = ПроверитьНаАктуальностьВременныйТовен(ОбщиеНастройки, ОтветСтрокой);
		
		Если ТокенУстарел ИЛИ ОчередьЗапросовЗабита тогда
			
			ОтправкаДанныхНаПортал(ОбщиеНастройки, АдресРесурса, ТелоЗапроса);
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ИнформацияОбОшибке().Описание);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		
		лСтруктураОтвета = ПрочитатьJSONНаСервере(ОтветСтрокой, Истина);
		
		error 				= лСтруктураОтвета.Получить("error");
		error_description 	= лСтруктураОтвета.Получить("error_description");
		
		Если error_description = "Unable to set event handler: Handler already binded" тогда
			Возврат лСтруктураОтвета;
		КонецЕсли;
		
		Если error = "ERROR_TRANSFORMATION" тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(error) тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Ошибки при отправлении на портал: " + Строка(error));
			Если ЗначениеЗаполнено(error_description) тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Ошибки при отправлении на портал: " + Строка(error_description));
			КонецЕсли;	
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ТелоЗапросаДляЛога);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Исключение           
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ОписаниеОшибки());
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось разобрать JSON");
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Пришедший JSON: " + ОтветСПорталаДляЛога);
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Отправленный запрос на портал: " + ТелоЗапросаДляЛога);
		
		ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен);
	
	Возврат лСтруктураОтвета;
	
КонецФункции  

Функция ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоЗапроса) Экспорт
	
	Соединение = УстановитьСоединениеССервером(ОбщиеНастройки.НастройкиПодключения);
	
	ПараметрВременногоТокена = "q=1&auth="		+ ОбщиеНастройки.НастройкиПодключенияАвторизации.ВременныйТокен;
	
	ПараметрКоннектора = "&" + ОбщиеНастройки.ПараметрКоннектора; 
	
	ПустойПараметр = "&TestParam=test";    //1С может резать символы, поэтому добавляем параметр, который можно спокойно резать.
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = "/rest/batch";
	
	ТелоHTTPЗапроса = ПараметрВременногоТокена + ПараметрКоннектора + ТелоЗапроса + ПустойПараметр;
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type"		,"application/x-www-form-urlencoded; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Length"		, Формат(СтрДлина(ТелоHTTPЗапроса), "ЧГ=0"));
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоHTTPЗапроса);
	
	ТелоЗапросаДляЛога = РаскодироватьСтрокуСервер(РаскодироватьСтрокуСервер(ТелоHTTPЗапроса));
	
	Попытка   
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Отправка пакета запросов на портал");
		
		Если ОбщиеНастройки.РежимОтладки тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Тело запроса HTTP запроса: " + ТелоЗапросаДляЛога);
		КонецЕсли;
		
		Ответ 			= Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
		ОтветСтрокой 	= Ответ.ПолучитьТелоКакСтроку();
		ОтветСПорталаДляЛога = РаскодироватьJSON(ОтветСтрокой);
		
		Если ОбщиеНастройки.РежимОтладки тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Ответ с портала: " + ОтветСПорталаДляЛога);
		КонецЕсли;
		
		Если Ответ.КодСостояния = 403 тогда
			
			Если СтрНайти(ОтветСтрокой, "WRONG_LICENSE") > 0 тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ПолучениеОшибкиПоЛицензииБитрикс24());
			Иначе
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Ключ, который вы указывали в модуле обмена 1С нужно получать под администратором портала");
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Ответ.КодСостояния = 503 тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Превышено количество запросов в секунду. Синхронизация встанет в паузу на 10 секунд");
			Б24_ОбщегоНазначенияСервер.Таймаут(10);    //для того, чтобы почистилась очередь.
			ОчередьЗапросовЗабита = Истина;	
		Иначе
			ОчередьЗапросовЗабита = Ложь;	
		КонецЕсли;
		
		ТокенУстарел = ПроверитьНаАктуальностьВременныйТовен(ОбщиеНастройки, ОтветСтрокой);
		
		Если ТокенУстарел ИЛИ ОчередьЗапросовЗабита тогда
			
			ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоЗапроса);
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
	лСоответствиеОтвета = Неопределено;
	
	Попытка
		
		лСоответствиеОтвета = ПрочитатьJSONНаСервере(ОтветСтрокой, Истина);
		
		Если лСоответствиеОтвета.Получить("result") = Неопределено тогда
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось получить результат о выполнении");
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Пришедший JSON: " + ОтветСПорталаДляЛога);
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Отправленный запрос на портал: " + РаскодироватьСтрокуСервер(ТелоЗапросаДляЛога));
			
			ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен);
			
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение                     
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось разобрать JSON");
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Пришедший JSON: " + ОтветСПорталаДляЛога);
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Отправленный запрос на портал: " + РаскодироватьСтрокуСервер(ТелоЗапросаДляЛога));
		
		ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен);
	
	Возврат лСоответствиеОтвета;
	
КонецФункции    

Функция ПолучитьДвоичныеДанныеФайла(ОбщиеНастройки, АдресФайла) 
	
	HTTPСоединение = УстановитьСоединениеССервером(ОбщиеНастройки.НастройкиПодключения);
	
	Попытка   
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.Информация, "Получение файла по адресу: " + АдресФайла);
		
		НТТРОтвет = HTTPСоединение.Получить(АдресФайла);
		Возврат НТТРОтвет.ПолучитьТелоКакДвоичныеДанные();
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, ИнформацияОбОшибке().Описание);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьТокенДляСоединения(ОбщиеНастройки) Экспорт
	
	лТокен = ПолучитьТокен(ОбщиеНастройки.НастройкаСинхронизации);	
	
	Соединение = УстановитьСоединениеССервером(ОбщиеНастройки.НастройкиПодключенияАвторизации);
	
	Если Соединение = Неопределено Тогда
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Авторизация не выполнена");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = "/oauth/token/?grant_type=refresh_token&client_id=" + ОбщиеНастройки.НастройкиПодключенияАвторизации.КодПриложения + "&client_secret=" + ОбщиеНастройки.НастройкиПодключенияАвторизации.СекретныйКодПриложения + "&refresh_token=" + лТокен;
	
	Попытка
		
		HTTPОтвет 		= Соединение.Получить(HTTPЗапрос);
		
		ОтветСтрокой 	= HTTPОтвет.ПолучитьТелоКакСтроку();
		
		сОтвета = ПрочитатьJSONНаСервере(ОтветСтрокой, Ложь);
		
		Если сОтвета.Свойство("error") = истина тогда
			
			Если сОтвета.error = "invalid_grant" тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось произвести авторизацию. Некорректен постоянный ключ авторизации.");
			КонецЕсли;
			
			Возврат Ложь;
			
		Иначе
			ОбщиеНастройки.НастройкиПодключения.АдресСайта 					= СокрЛП(сОтвета.client_endpoint);
			
			ОбщиеНастройки.НастройкиПодключенияАвторизации.ВременныйТокен 	= СокрЛП(сОтвета.access_token);
			ОбщиеНастройки.НастройкиПодключенияАвторизации.НовыйТокен 		= СокрЛП(сОтвета.refresh_token);
			
			ЗаписатьНовыйТокен(ОбщиеНастройки.НастройкаСинхронизации, СокрЛП(сОтвета.refresh_token));
		КонецЕсли;
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось произвести авторизацию. Возможно неверно указан постоянный ключ.");
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеССервером(ОбщиеНастройки) Экспорт   
	
	Соединение = Неопределено;
	
	Попытка
		
		Если НЕ ОбщиеНастройки.ЗащищенноеСоединение тогда
			ssl = Неопределено;
		Иначе
			
			ssl = Новый ЗащищенноеСоединениеOpenSSL(
			Неопределено,
			Неопределено);   
			
		КонецЕсли;
		
		Прокси = Неопределено;
 		Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(?(ОбщиеНастройки.ЗащищенноеСоединение, "HTTPS", "HTTP"));	
	
		Соединение = Новый HTTPСоединение(ОбщиеНастройки.Сервер, ОбщиеНастройки.Порт,,, Прокси, ,ssl);
		
	Исключение
		
		лТекстОшибки = НСтр("ru = 'Не удалось установить соединение с серовером'") + ОбщиеНастройки.Сервер + ":" + Строка(ОбщиеНастройки.Порт) 
		+ НСтр("ru = '.Проверьте правильность токена.'");
		
		Сообщить(лТекстОшибки);
		
		Соединение = Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПолучитьНастройкиПодключения(ОбщиеНастройки) Экспорт
	
	НастройкиПодключения = Новый Структура;
	лАдрес = ОбщиеНастройки.НастройкиПодключения.АдресСайта;
	
	НастройкиПодключения.Вставить("КодПриложения"			, "app.574416a3e4c0b3.20492342");
	НастройкиПодключения.Вставить("СекретныйКодПриложения"	, "bmF6rILJ3890FwgTcZGQrQuNJvXcmvMAk2dLD6Yr4mFIcIil8I");
	НастройкиПодключения.Вставить("ОбластьВидимости"		, "user,department,log,sonet_group");
	НастройкиПодключения.Вставить("АдресСайта"				, лАдрес);
	
	Если НЕ Б24_RestApiКлиентСервер.РазобратьАдресСайта(лАдрес, НастройкиПодключения) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Прокси = Неопределено;
	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(?(НастройкиПодключения.ЗащищенноеСоединение, "HTTPS", "HTTP"));	
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Возврат НастройкиПодключения;
	
КонецФункции

Функция ПроверитьНаАктуальностьВременныйТовен(ОбщиеНастройки, ОтветСтрокой)
	
	Если СтрНайти(НРег(ОтветСтрокой), "expired_token") > 0 тогда
		
		Если ПолучитьТокенДляСоединения(ОбщиеНастройки) тогда
			Возврат Истина;
		Иначе
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(НРег(ОтветСтрокой), "invalid_token") > 0 тогда
		
		Если ПолучитьТокенДляСоединения(ОбщиеНастройки) тогда
			Возврат Истина;
		Иначе
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если СтрНайти(НРег(ОтветСтрокой), "The access token provided has expired") > 0 тогда
		
		Если ПолучитьТокенДляСоединения(ОбщиеНастройки) тогда
			Возврат Истина;
		Иначе
			Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, Перечисления.Б24_ТипыСообщений.КритическаяОшибка, "Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПрочитатьJSONНаСервере(JSON, ПрочитатьВСоответствие) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	
	Возврат ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
	
КонецФункции

Функция ПолучениеОшибкиПоЛицензииБитрикс24()
	
	Возврат "На тарифном плане ""Проект"" и ""Проект+"" модуль синхронизации недоступен.";
	
КонецФункции

Функция ПроверитьНеобходимостьРегистрацииСобытийНаПорталеПоТипуДанных(Портал, ТипДанных) Экспорт
	
	Результат = Ложь;
	Выборка = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Портал <> Портал тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат = Ложь тогда
			
			Если ТипДанных = "Контрагенты" тогда
				Результат = Выборка.СинхронизацияКонтрагентов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(Выборка.Ссылка, "ЗагружатьКонтрагентов") = Истина;
			ИначеЕсли ТипДанных = "Товары" тогда
				Результат = Выборка.СинхронизацияТоваров И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(Выборка.Ссылка, "ЗагружатьТовары") = Истина;
			ИначеЕсли ТипДанных = "Счета" тогда
				Результат = Выборка.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(Выборка.Ссылка, "ЗагружатьСчета") = Истина;
			ИначеЕсли ТипДанных = "Сделки" тогда
				Результат = Выборка.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(Выборка.Ссылка, "ЗагружатьСделки") = Истина;
			ИначеЕсли ТипДанных = "Заказы" тогда
				Результат = Выборка.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(Выборка.Ссылка, "ЗагружатьЗаказы") = Истина;
			ИначеЕсли ТипДанных = "Оплаты" тогда
				Результат = Выборка.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(Выборка.Ссылка, "ЗагружатьЗаказы") = Истина 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(Выборка.Ссылка, "ЗагружатьОплаты") = Истина;
			ИначеЕсли ТипДанных = "Отгрузки" тогда
				Результат = Выборка.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(Выборка.Ссылка, "ЗагружатьЗаказы") = Истина 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(Выборка.Ссылка, "ЗагружатьОтгрузки") = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область РаботаСТокенами

Процедура ЗаписатьНовыйТокен(НастройкаСинхронизации, НовыйТокен) Экспорт
	
	НоваяЗапись = РегистрыСведений.Б24_ТокеныОбмена.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период 					= ТекущаяДата();
	НоваяЗапись.НастройкаСинхронизации 	= НастройкаСинхронизации;
	НоваяЗапись.Токен 					= НовыйТокен;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьТокен(НастройкаСинхронизации) Экспорт
	
	Возврат РегистрыСведений.Б24_ТокеныОбмена.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("НастройкаСинхронизации", НастройкаСинхронизации)).Токен;
	
КонецФункции

#КонецОбласти


#Область РаботаСКодировками

Функция РаскодироватьСтрокуСервер(ТелоHTTPЗапроса) Экспорт
	
	Возврат РаскодироватьСтроку(ТелоHTTPЗапроса,СпособКодированияСтроки.URLВКодировкеURL);	
	
КонецФункции

Функция ЗакодироватьСтрокуСервер(ЗначениеСтроки) Экспорт
	
	Возврат КодироватьСтроку(XMLСтрока(ЗначениеСтроки), СпособКодированияСтроки.КодировкаURL, "UTF8");
	
КонецФункции

Функция РаскодироватьJSON(URL)
	
	Результат = URL; 
	
	СписокСимволов = Новый СписокЗначений;
	СписокСимволов.Добавить("\u0430", "а");
	СписокСимволов.Добавить("\u0431", "б");
	СписокСимволов.Добавить("\u0432", "в");
	СписокСимволов.Добавить("\u0433", "г");
	СписокСимволов.Добавить("\u0434", "д");
	СписокСимволов.Добавить("\u0435", "е");
	СписокСимволов.Добавить("\u0451", "ё");
	СписокСимволов.Добавить("\u0436", "ж");
	СписокСимволов.Добавить("\u0437", "з");
	СписокСимволов.Добавить("\u0438", "и");
	СписокСимволов.Добавить("\u0439", "й");
	СписокСимволов.Добавить("\u043a", "к");
	СписокСимволов.Добавить("\u043b", "л");
	СписокСимволов.Добавить("\u043c", "м");
	СписокСимволов.Добавить("\u043d", "н");
	СписокСимволов.Добавить("\u043e", "о");
	СписокСимволов.Добавить("\u043f", "п");
	СписокСимволов.Добавить("\u0440", "р");
	СписокСимволов.Добавить("\u0441", "с");
	СписокСимволов.Добавить("\u0442", "т");
	СписокСимволов.Добавить("\u0443", "у");
	СписокСимволов.Добавить("\u0444", "ф");
	СписокСимволов.Добавить("\u0445", "х");
	СписокСимволов.Добавить("\u0446", "ц");
	СписокСимволов.Добавить("\u0447", "ч");
	СписокСимволов.Добавить("\u0448", "ш");
	СписокСимволов.Добавить("\u0448", "щ");
	СписокСимволов.Добавить("\u044a", "ъ");
	СписокСимволов.Добавить("\u044b", "ы");
	СписокСимволов.Добавить("\u044c", "ь");
	СписокСимволов.Добавить("\u044d", "э");
	СписокСимволов.Добавить("\u044e", "ю");
	СписокСимволов.Добавить("\u044f", "я");
	
	СписокСимволов.Добавить("\u0410", "А");
	СписокСимволов.Добавить("\u0411", "Б");
	СписокСимволов.Добавить("\u0412", "В");
	СписокСимволов.Добавить("\u0413", "Г");
	СписокСимволов.Добавить("\u0414", "Д");
	СписокСимволов.Добавить("\u0415", "Е");
	СписокСимволов.Добавить("\u0401", "Ё");
	СписокСимволов.Добавить("\u0416", "Ж");
	СписокСимволов.Добавить("\u0417", "З");
	СписокСимволов.Добавить("\u0418", "И");
	СписокСимволов.Добавить("\u0419", "Й");
	СписокСимволов.Добавить("\u041a", "К");
	СписокСимволов.Добавить("\u041b", "Л");
	СписокСимволов.Добавить("\u041c", "М");
	СписокСимволов.Добавить("\u041d", "Н");
	СписокСимволов.Добавить("\u041e", "О");
	СписокСимволов.Добавить("\u041f", "П");
	СписокСимволов.Добавить("\u0420", "Р");
	СписокСимволов.Добавить("\u0421", "С");
	СписокСимволов.Добавить("\u0422", "Т");
	СписокСимволов.Добавить("\u0423", "У");
	СписокСимволов.Добавить("\u0424", "Ф");
	СписокСимволов.Добавить("\u0425", "Х");
	СписокСимволов.Добавить("\u0426", "Ц");
	СписокСимволов.Добавить("\u0427", "Ч");
	СписокСимволов.Добавить("\u0428", "Ш");
	СписокСимволов.Добавить("\u0428", "Щ");
	СписокСимволов.Добавить("\u042a", "Ъ");
	СписокСимволов.Добавить("\u042b", "Ы");
	СписокСимволов.Добавить("\u042c", "Ь");
	СписокСимволов.Добавить("\u042d", "Э");
	СписокСимволов.Добавить("\u042e", "Ю");
	СписокСимволов.Добавить("\u042f", "Я");
	
	
	СписокСимволов.Добавить("\u0022", "'");
	
	СписокСимволов.Добавить("\u003E", ">");
	СписокСимволов.Добавить("\u003е", ">");
	
	СписокСимволов.Добавить("\u003C", "<");
	СписокСимволов.Добавить("\u003c", "<");
	
	Для Каждого текЭлемент из СписокСимволов Цикл
		
		Результат = СтрЗаменить(Результат,текЭлемент.Значение, текЭлемент.Представление);	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область ОбластьLongPulling

Функция ПолучитьДанныеLongPulling(ОбщиеНастройки, НастройкиПодключенияLongPulling, РазобранныйАдресХостинга, ПараметрыДляПродолженияМониторинга) Экспорт
	
	Попытка
		
		Если РазобранныйАдресХостинга.ЗащищенноеСоединение тогда
			ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено); 
		Иначе
			ssl = Неопределено;	
		КонецЕсли;
		
		Прокси = Неопределено;
	 	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(?(РазобранныйАдресХостинга.ЗащищенноеСоединение, "HTTPS", "HTTP"));	
		
		Соединение = Новый HTTPСоединение(РазобранныйАдресХостинга.Сервер, РазобранныйАдресХостинга.Порт,, , Прокси, ,ssl);	
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не удалось установить соединение с сервером. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.");
		
		Соединение = Неопределено;
		
	Конецпопытки;
	
	
	ДанныеСБитрикс24 =  Неопределено;
	
	Если Соединение = Неопределено Тогда
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Авторизация не выполнена.");
		Возврат ДанныеСБитрикс24;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = РазобранныйАдресХостинга.АдресСкрипта + "?CHANNEL_ID=" + НастройкиПодключенияLongPulling.ИдКанала + ПараметрыДляПродолженияМониторинга;;
	
	Попытка   
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Отправка запроса по методу:" + НастройкиПодключенияLongPulling.АдресПодключения + "XXXXX");
		
		Ответ 			= Соединение.Получить(HTTPЗапрос);	
		ДанныеСБитрикс24= Ответ.ПолучитьТелоКакСтроку();
		
	Исключение
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не удалось подключиться к серверу Long Pulling для загрузки данных в режиме в реального времени.");
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат ДанныеСБитрикс24;
	
КонецФункции

#КонецОбласти

