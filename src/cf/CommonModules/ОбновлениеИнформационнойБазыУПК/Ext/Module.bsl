////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки УправлениеПредприятиемДляКазахстана.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "УправлениеПредприятиемДляКазахстана";
	Описание.Версия = "2.4.4.92";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область Монопольно

#Область НачальноеЗаполнение

	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПервыйЗапуск";
	Обработчик.Комментарий = НСтр("ru = 'Иницализация настроек программы при первом запуске.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыПоступления.ЗаполнитьПредопределенныеВидыПоступлений";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет предопределенные элементы справочника ""Виды поступления ТМЗ (работ, услуг)"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыРеализации.ЗаполнитьПредопределенныеВидыРеализаций";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет предопределенные элементы справочника ""Виды реализации ТМЗ (работ, услуг)"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПереносаСальдоНаСчетахБухгалтерскогоУчета.ЗаполнитьНастройкиПереносаСальдоНаПроизводственныхСчетах";
	Обработчик.Комментарий = НСтр("ru = 'Иницализация настроек переноса сальдо на счетах бухгалтерского учета.'");
	
#КонецОбласти

#Область Версия_2_1_2

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыПоступления.ЗаполнитьВидНДС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыРеализации.ЗаполнитьВидНДС";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Версия = "2.1.2.15";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.УдалитьРеглОтчетыРФ";
	
#КонецОбласти

#Область Версия_2_1_2_39

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.39";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьСтатьиРасходовПоНУ";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов плана видов характеристик ""Статьи расходов"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.39";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиДоходов.ЗаполнитьСтатьюДоходыОтВыбытияФА";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов плана видов характеристик ""Статьи доходов"".'");

#КонецОбласти

#Область Версия_2_1_2_59

	Обработчик.Версия = "2.1.2.59";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.Комментарий = НСтр("ru = 'Заменяет использование внешней обработки ЭСФ на встроенную");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.59";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитПризнакПроисхожденияВСправочникеНомераГТД";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизит ""Признак происхождения"" элементов справочника ""Номера ГТД"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.59";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитНомерСтрокиГТДВСправочникеНомераГТД";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизит ""Номер строки ГТД"" элементов справочника ""Номера ГТД"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.60";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ЭСФСервер.ЗаполнитьДатыНачалаСинхронизации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет параметры методов ИС ЭСФ.'");

#КонецОбласти

#Область Версия_2_1_3_12

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаменитьВнешниеРегламентированныеОтчетыНаВнутренние";
	Обработчик.Комментарий = НСтр("ru = 'Замена внешних регламентированных отчетов на внутренние'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.12";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПодготовитьСчетаНДСКПРедакции24";
	Обработчик.Комментарий = НСтр("ru = 'Подготовка счетов НДС для использования в редакции 2.4'");
	                                          		
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "2.1.3.12";
	Обработчик.Процедура = "РегистрыСведений.СтавкаРефинансированияЦБ.ЗаполнитьЗначенияСтавкиРефинансированияЦБ";
	Обработчик.ОбщиеДанные = Истина;

	
#КонецОбласти

#Область Версия_2_1_3_13

	Обработчик.Версия = "2.1.3.13";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.Комментарий = НСтр("ru = 'Заменяет использование внешней обработки ЭСФ на встроенную");  

#КонецОбласти

#Область Версия_2_1_3_14

	Обработчик.Версия = "2.1.3.14";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбновитьКодыСтрокДекларацииПоНДС";
	Обработчик.Комментарий = НСтр("ru = 'Обновление кодов строк декларации по НДС");  

	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия = "2.1.3.14";
	Обработчик.Процедура = "РегистрыСведений.СтавкаРефинансированияЦБ.ЗаполнитьЗначенияСтавкиРефинансированияЦБ";
	Обработчик.Комментарий = НСтр("ru = 'Обновление ставок рефинансирования");  
	Обработчик.ОбщиеДанные = Истина;

#КонецОбласти

#Область Версия_2_4

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПодготовитьСчетаНДСРедакция24";
	Обработчик.Комментарий = НСтр("ru = 'Подготовка счетов НДС для использования в редакции 2.4'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.Справочники_УчетныеПолитикиОрганизаций_ОбработатьДанныеДляПереходаНаНовуюВерсию24";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые реквизиты:
	|- ПрименяетсяОсвобождениеОтУплатыНДС по данным реквизита ПлательщикНДС.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбновитьПоставляемыеДрайвера";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет обновление поставляемых драйверов.'");
	
#Область Справочники_КлассификаторБанков_ЗаполнениеДанных
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.КлассификаторБанков.ОбновлениеКлассификатора_ОбработатьДанные";
	Обработчик.ОбщиеДанные = Истина;
	
#КонецОбласти 

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.50";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбновитьВидыОперацийРасчетаЗарплаты";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет данные справочника ""Виды операций расчета зарплаты""");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.65";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.РегламентированныеОтчеты.ЗаполнитьСписокРегламентированныхОтчетов";
	Обработчик.ОбщиеДанные = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.86";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбновитьНаименованиеСубъектаПоКлассификатору";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет наименование столицы РК в регистре сведений ""Адресные объекты""");

#КонецОбласти

#КонецОбласти

#Область Отложенно

#Область Версия_2_1_2_41

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.41";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСПриобретениеТоваровУслуг";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСПриобретениеТоваровУслугКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "Документ.ПриобретениеТоваровУслуг";
	Обработчик.Комментарий = НСтр("ru = 'В табличной части ""Товары"" в документе ""Приобретение товаров и услуг"" заполняется 
	| ""Вид поступления (НДС)"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.41";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСПриобретениеУслугПрочихАктивов";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСПриобретениеУслугПрочихАктивовКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "Документ.ПриобретениеУслугПрочихАктивов";
	Обработчик.Комментарий = НСтр("ru = 'В табличной части ""Расходы и прочие активы"" в документе ""Приобретение услуг и прочих активов"" заполняется 
	| ""Вид поступления (НДС)"".'");
	
#КонецОбласти

#Область Версия_2_1_2

	// Пример
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "2.1.1.2";
	//Обработчик.Процедура = "Документы.ЗаказНаРемонт.ЗаполнитьСвободныеОстаткиПоЗаказам";
	
#КонецОбласти

#Область Версия_2_1_2_50
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.50";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитНалогообложениеНДСПересортицаТоваров";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитНалогообложениеНДСПересортицаТоваровКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.БлокируемыеОбъекты = "Документ.ПересортицаТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет заполнение реквизита ""Налогообложение"" в документе ""Пересортица товаров"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.50";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "Справочники.ВидыРеализации.ЗаполнитьВидНДСПоЭкспорту";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет заполнение предопределенных элементов справочника ""Виды реализации"".'");
	
#КонецОбласти

#Область Версия_2_1_3_2

	Если ТехнологияСервисаИнтеграцияСБСП.РазделениеВключено() Тогда
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.ОбщиеДанные      = Истина;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВМоделиСервиса";
	Иначе
		Обработчик                  = Обработчики.Добавить();
		Обработчик.Версия           = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура        = "ИнформационныйЦентрСлужебный.ОбновитьИнформационныеСсылкиДляФормВЛокальномРежиме";
	КонецЕсли;
	
#КонецОбласти

#Область Версия_2_1_3_4

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.4";
	Обработчик.Процедура = "ЭСФСерверПереопределяемый.ЗаполнитьКодыЭСФЕдиницИзмерения";

#КонецОбласти

#Область Версия_2_4

#Область РегистрыСведений_ПорядокОтраженияНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПорядокОтраженияНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПорядокОтраженияНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 701;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПорядокОтраженияНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПорядокОтраженияНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ПорядокОтраженияНоменклатуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые счета регистра сведений ""ПорядокОтраженияНоменклатуры"".'");

#КонецОбласти

#Область Справочники_ГруппыФинансовогоУчетаНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ГруппыФинансовогоУчетаНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ГруппыФинансовогоУчетаНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 701;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаНоменклатуры";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаНоменклатуры";
	Обработчик.БлокируемыеОбъекты = "Справочник.ГруппыФинансовогоУчетаНоменклатуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет новые счета справочника ""ГруппыФинансовогоУчетаНоменклатуры""'");

#КонецОбласти

#Область РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений 

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_ОбработкаДанных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений," + "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения," + "РегистрБухгалтерии.Хозрасчентый," + "Справочник.Резервы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений," + "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения," + "Константа.ИспользоватьДополнительныеРеквизитыИСведения," + "Константа.ФормироватьРезервыПредстоящихРасходов," + "Справочник.Резервы";
	Обработчик.БлокируемыеОбъекты = "Справочник.НаборыДополнительныхРеквизитовИСведений," + "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения," + "Константа.ИспользоватьДополнительныеРеквизитыИСведения," + "Константа.ФормироватьРезервыПредстоящихРасходов," + "Справочник.Резервы," + "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Создает таблицу дополнительных реквизитов Договор и Контрагент у элемента справочника ""Резервы"", переносит в нее старую аналитику счетов для каждого создаваемого элемента справочника.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных";
	НоваяСтрока.Порядок = "До";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_ОбработкаДанных";
	НоваяСтрока.Порядок = "До";

#КонецОбласти

#Область РезервыРБП_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрБухгалтерии_Хозрасчетный_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный," + "Справочник.Резервы";
	Обработчик.ИзменяемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет счета в существующих проводках регистра, заменяя их на новые с новой аналитикой в виде элемента справочника ""Резервы""'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_ОбработкаДанных";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_ОбработкаДанных";
	НоваяСтрока.Порядок = "До";


#КонецОбласти

#Область РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_ОбработкаДанных

	// ПорядокОтраженияРасчетовСПартнерами
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_ОбработкаДанных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами";
	Обработчик.Комментарий = НСтр("ru = 'Перезаполняет счета учета РС ""Порядок отражения расчетов с партнерами"" в настройках отражения в регл учете.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_ОбработкаДанных";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.РезервыРБП_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти 

#Область ДокументыЭСФ_УстанавкаПризнакаПроведен

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.15";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбновитьДокументыЭСФОтложенно";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ОбновитьДокументыЭСФОтложенно_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 702;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ЭСФ";
	Обработчик.ИзменяемыеОбъекты = "Документ.ЭСФ";
	Обработчик.БлокируемыеОбъекты = "Документ.ЭСФ";
	Обработчик.Комментарий = НСтр("ru = 'Для документов электронных-счетов фактур, не помеченных на удаление,  устанавливается признак ""Проведен"".'");

#КонецОбласти

#Область ОбновлениеПланаСчетов_Хозрасчетный_ОбработкаДанных

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.16";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ПланыСчетов.Хозрасчетный.ОбновлениеПланаСчетов_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыСчетов.Хозрасчетный.ОбновлениеПланаСчетов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 901;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.ИзменяемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет настройки новых счетов в плане счетов бухгалтерского учета'");

#КонецОбласти

#Область Обновление_Справочник_НастройкиХозяйственныхОпераций

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.17";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.НастройкиХозяйственныхОпераций.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 902;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.НастройкиХозяйственныхОпераций";
	Обработчик.ИзменяемыеОбъекты = "Справочник.НастройкиХозяйственныхОпераций";
	Обработчик.БлокируемыеОбъекты = "Справочник.НастройкиХозяйственныхОпераций";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует настройки хозяйственных операций'");

#КонецОбласти

#Область ОбновлениеПланаСчетов_Хозрасчетный_ОбработкаДанных

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.19";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ПланыСчетов.Хозрасчетный.ОбновлениеПланаСчетовПоИзмененнымСчетам_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ПланыСчетов.Хозрасчетный.ОбновлениеПланаСчетовПоИзмененнымСчетам_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 903;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.ИзменяемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет настройки измененных счетов в плане счетов бухгалтерского учета'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.19";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную";
	Обработчик.Комментарий = НСтр("ru = 'Заменяет использование внешней обработки ЭСФ на встроенную");
#КонецОбласти

#Область ОбновлениеСтатейРасходов_ОбработкаДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.24";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходов_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 902;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = ""
		+ "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.БлокируемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные реквизиты статей расходов'");
	
#КонецОбласти

#Область КонстантыЭСФ_ПереопределениеКонстант

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.30";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаменитьКонстантыЭСФ";
	Обработчик.Комментарий = НСтр("ru = 'Обновление параметров учета ЭСФ'");

#КонецОбласти

#Область ДвиженияПеремещениеНМА2_4

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПараметрыАмортизацииНМАБУ_ПеремещениеНМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПараметрыАмортизацииНМАБУ_ПеремещениеНМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеНМА2_4,"
			+ "РегистрСведений.ПараметрыАмортизацииНМАБУ";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПараметрыАмортизацииНМАБУ";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ПараметрыАмортизацииНМАБУ";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует движения регистра свдений ""Параметры амортизации НМА (БУ)"" документов ""Перемещение НМА"": метод начисления амортизации, ликвидационная стоимость'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПервоначальныеСведения_ПеремещениеНМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПервоначальныеСведения_ПеремещениеНМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеНМА2_4,"
			+ "РегистрСведений.ПервоначальныеСвеенияНМА";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ПервоначальныеСвеенияНМА";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ПервоначальныеСвеенияНМА";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует движения регистра свдений ""Первоначальные сведения НМА"" документов ""Перемещение НМА"": амортизационная группа'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбъектыНалоговогоУчетаФА_ПеремещениеНМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ОбъектыНалоговогоУчетаФА_ПеремещениеНМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеНМА2_4,"
			+ "РегистрСведений.ОбъектыНалоговогоУчетаФА";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ОбъектыНалоговогоУчетаФА";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ОбъектыНалоговогоУчетаФА";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет данные по регистру сведений ""Фиксированные активы организации"" документов ""Перемещение НМА""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ФиксированныеАктивыУчитываемыеОтдельно_ПеремещениеНМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ФиксированныеАктивыУчитываемыеОтдельно_ПеремещениеНМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПеремещениеНМА2_4,"
			+ "РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет данные по регистру сведений ""Фиксированные активы, учитываемые отдельно"" документов ""Перемещение НМА""'");

#КонецОбласти

 	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.32";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.СубконтоСтатьДДСПоПлануСчетов_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.СубконтоСтатьДДСПоПлануСчетов_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.ИзменяемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает признак ""Только обороты"" для субконто ""Статьи движения денежных средств"" в плане счетов бухгалтерского учета'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.34";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриобретениеУслугПрочихАктивов,"
						+ "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Очищает движения по регистру накопления ""Партии прочих расходов"" для документов ""Приобретение услуг и прочих активов"" для статей расходов с вариантом распределения ""На внеоборотные активы""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.34";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаданияКЗакрытиюМесяца_РаспределениеНДС_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаданияКЗакрытиюМесяца_РаспределениеНДС_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	Обработчик.Комментарий = НСтр("ru = 'Очищает движения по регистру сведений ""Задания к закрытию месяца"" вида операции ""Распределение НДС"" документов ""Принятие к учету ОС"", ""Принятие к учету НМА"" и ""Приобретение услуг и прочих активов"" для статей расходов с вариантом распределения ""На внеоборотные активы""'");

#Область ОбновлениеСтатейДоходов_ОбработкаДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.44";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.СтатьиДоходов_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.СтатьиДоходов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиДоходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиДоходов";
	Обработчик.БлокируемыеОбъекты = "ПланВидовХарактеристик.СтатьиДоходов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные реквизиты статей доходов'");
	
#КонецОбласти

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.44";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЖурналУчетаСчетовФактур_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЖурналУчетаСчетовФактур_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СчетФактураВыданный,"
			+ "РегистрСведений.ЖурналУчетаСчетовФактур";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ЖурналУчетаСчетовФактур";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ЖурналУчетаСчетовФактур";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует движения регистра свдений ""Журнал учета счетов-фактур"" документов ""Счет-фактура выданный"": период движений скорректирован в соответствии с датой собвершения оборота по реализации'");


    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.49";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_ПолныеДанные_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Очищает движения по регистру накопления ""Партии прочих расходов"" для статей расходов с вариантом распределения ""На внеоборотные активы""'");
    
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.53";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_РегистрБухгалтерии_Хозрасчетный_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.ИзменяемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "РегистрБухгалтерии.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет счета в существующих проводках регистра, заменяя аналитику счета 3040.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_ПланСчетов_Хозрасчетный_ОбработкаДанных";
	НоваяСтрока.Порядок = "До";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.53";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_ПланСчетов_Хозрасчетный_ОбработкаДанных";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_ПланСчетов_Хозрасчетный_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.ИзменяемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.БлокируемыеОбъекты = "ПланСчетов.Хозрасчетный";
	Обработчик.Комментарий = НСтр("ru = 'Добавляет счету 3040 код быстрого выбора, счет Я304.1 (старый 3040) переводит в категорию неиспользуемых.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "ОбновлениеИнформационнойБазыУПК.Начисление_Дивидендов_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных";
	НоваяСтрока.Порядок = "После";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.54";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.Документы_НачислениеДивидендов_ОбработатьДанныеДляПерехода";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.Документы_НачислениеДивидендов_ЗарегистироватьДанныеКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.НачислениеДивидендов";
	Обработчик.ИзменяемыеОбъекты = "Документ.НачислениеДивидендов";
	Обработчик.БлокируемыеОбъекты = "Документ.НачислениеДивидендов";
	Обработчик.Комментарий = НСтр("ru = 'Обновление документов ""Начисление дивидендов"".'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.54";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ТребуетсяОформлениеСчетаФактуры_ВозвратОтКлиента_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ТребуетсяОформлениеСчетаФактуры_ВозвратОтКлиента_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрСведений.ТребуетсяОформлениеСчетаФактуры";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ТребуетсяОформлениеСчетаФактуры";
	Обработчик.БлокируемыеОбъекты = "РегистрСведений.ТребуетсяОформлениеСчетаФактуры";
	Обработчик.Комментарий = НСтр("ru = 'Заполняе параметр ""Тип счета-фактуры"" в регистре сведений ""Требуется оформление счета-фактуры"" для записей с видом основания ""Возврат товаров от клиента"".'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.54";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ПартииПрочихРасходов_ОС_НМА_ПолныеДанные_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриобретениеУслугПрочихАктивов,"
						+ "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.ПартииПрочихРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Очищает движения по регистру накопления ""Партии прочих расходов"" для документов ""Приобретение услуг и прочих активов"" для статей расходов с вариантом распределения ""На внеоборотные активы""'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.54";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.НДСПредъявленный_НМА_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.НДСПредъявленный_НМА_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриобретениеУслугПрочихАктивов,"
						+ "РегистрНакопления.НДСПредъявленный";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.НДСПредъявленный";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.НДСПредъявленный";
	Обработчик.Комментарий = НСтр("ru = 'Изменяет вид деятельности НДС в движениях по регистру накопления ""НДС предъявленных"" для документов ""Приобретение услуг и прочих активов"", с помощью которых оформлено приобретение услуг по статьям расходов с вариантом распределения ""На внеоборотные активы""'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.54";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходов_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходов_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.БлокируемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Корректирует реквизит ""Вариант раздельного учета НДС"" и ""Вариант распределения расходов (регл.)"" для статей расходов'");
    
    Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.54";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ПланыВидовХарактеристик.СтатьиРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26d2c401-6f15-4fb1-98bd-5689fb96260f");
    Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru = 'В статьях расходов заполняются новые реквизиты ""Тип расходов"", ""Вариант распределения расходов упр"" и ""Характер производственных затрат"". Создает новые элементы справочника ""Правила распределения расходов"" компонуя правила распределения указанные в статье расходов. Заполняет реквизиты значениями по умолчанию для новой статьи ""Расходы при конвертации валюты"".'");

    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.59";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитДатаПодписанияАктВыполненныхРабот";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитДатаПодписанияАктВыполненныхРаботКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.ИзменяемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.БлокируемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты ""Дата подписания"" и ""Способ выписки актов выполненных работ"" в документах ""Акт выполненных работ для клиента""'");
    
    Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.59";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитСпособВыпискиАктовоДоговорам";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитСпособВыпискиАктовоДоговорамКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ДоговорыКонтрагентов";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ДоговорыКонтрагентов";
	Обработчик.БлокируемыеОбъекты = "Справочник.ДоговорыКонтрагентов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Способ выписки актов выполненных работ"" в справочнике ""Договоры контрагентов""'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.63";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.НДС_НалоговыйПериод_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.НДС_НалоговыйПериод_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.НДС";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.НДС";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.НДС";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Налоговый период"" в движениях по регистру накопления ""НДС""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.63";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.НДСКВозмещению_НалоговыйПериод_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.НДСКВозмещению_НалоговыйПериод_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "РегистрНакопления.НДСКВозмещению";
	Обработчик.ИзменяемыеОбъекты = "РегистрНакопления.НДСКВозмещению";
	Обработчик.БлокируемыеОбъекты = "РегистрНакопления.НДСКВозмещению";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""Налоговый период"" в движениях по регистру накопления ""НДС к возмещению""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.64";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ОбработатьДанныеТребуетсяОформлениеЭАВР";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗарегистрироватьДанныеКОбработкеТребуетсяОформлениеЭАВР";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.АктВыполненныхРабот";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ТребуетсяОформлениеЭАВР";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр сведений ""Требуется оформление электронного акта выполненных работ""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.67";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходовУбытковПрошлыхЛет_ОбработкаДанных";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.СтатьиРасходовУбытковПрошлыхЛет_РегистрацияДанных";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.ИзменяемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.БлокируемыеОбъекты = "ПланВидовХарактеристик.СтатьиРасходов";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизиты передопределенных статей расходов по списанию убытков прошлых лет'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.70";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСВПорче";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСВПорчеКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПорчаТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПорчаТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.ПорчаТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид поступления (НДС)"" в документах ""Списание недостач товаров"", ""Порча товаров""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.70";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСВСписанииНедостач";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитВидПоступленияНДСВСписанииНедостачКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.СписаниеНедостачТоваров";
	Обработчик.ИзменяемыеОбъекты = "Документ.СписаниеНедостачТоваров";
	Обработчик.БлокируемыеОбъекты = "Документ.СписаниеНедостачТоваров";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Вид поступления (НДС)"" в документах ""Списание недостач товаров"", ""Порча товаров""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.4.4.70";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитСтавкаНДСВКлючахАналитикиУчетаПартий";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыУПК.ЗаполнитьРеквизитСтавкаНДСВКлючахАналитикиУчетаПартийКОбработке";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.КлючиАналитикиУчетаПартий";
	Обработчик.ИзменяемыеОбъекты = "Справочник.КлючиАналитикиУчетаПартий";
	Обработчик.БлокируемыеОбъекты = "Справочник.КлючиАналитикиУчетаПартий";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Ставка НДС"" в справочнике ""Ключи аналитики учета партий""'");
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ВыводитьОписаниеОбновлений = НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлейДляКазахстана";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизацияДляКазахстана";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУПК.ПервыйЗапуск";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлейДляКазахстана" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = "0.0.0.0";
	КонецЕсли;
	
	Если ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизацияДляКазахстана" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		Параметры.ВерсияКонфигурации = "0.0.0.0";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
//
// Подробнее: см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	//ОписаниеПодсистемы = Новый Структура("Имя, Версия");
	//ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	// Пример
	//ОбщегоНазначения.ДобавитьПереименование(Итог,
	//	"2.1.1.1",
	//	"Роль.ПодсистемаМеждународныйФинансовыйУчет",
	//	"Роль.РазделМеждународныйФинансовыйУчет",
	//	ОписаниеПодсистемы.Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УПК (ERP).
//
Процедура ПервыйЗапуск() Экспорт
	
	РегистрыСведений.СведенияОГруппахФиксированныхАктивов.НачальноеЗаполнение();
	РегистрыСведений.АналитикаУчетаВнеоборотныхАктивов.НачальноеЗаполнение();
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеНовыхВерсийИБ

#Область Версия_2_1_2

// Обработчик обновления БРО. Удаление регламентированных отчетов РФ.
//
// Вызывается при обновлении УПК 2.1.2.14.
//
Процедура УдалитьРеглОтчетыРФ() Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка КАК Ссылка,
	|	РегламентированныеОтчеты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ПометкаУдаления
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УдаляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если НЕ УдаляемыйОбъект = Неопределено Тогда
			УдаляемыйОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВидПоступленияНДСПриобретениеТоваровУслуг(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриобретениеТоваровУслуг";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка КАК Документ.ПриобретениеТоваровУслуг) КАК Ссылка
	|ПОМЕСТИТЬ ВТСписокДокументов
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляОбработки.Ссылка              КАК Ссылка,
	|	ДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСписокДокументов КАК ДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = МассивРезультатов.Количество();
	
	Выборка                = МассивРезультатов[КоличествоПакетов-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
				Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.НДС0 Тогда
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗпоНулевойСтавке;
				ИначеЕсли СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗБезНДС;
				Иначе
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗ;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПриобретениеТоваровУслуг,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВидПоступленияНДСПриобретениеУслугПрочихАктивов(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриобретениеУслугПрочихАктивов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка КАК Документ.ПриобретениеУслугПрочихАктивов) КАК Ссылка
	|ПОМЕСТИТЬ ВТСписокДокументов
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляОбработки.Ссылка              КАК Ссылка,
	|	ДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСписокДокументов КАК ДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = МассивРезультатов.Количество();
	
	Выборка                = МассивРезультатов[КоличествоПакетов-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
				Если СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.НДС0 Тогда
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗпоНулевойСтавке;
				ИначеЕсли СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗБезНДС;
				Иначе
					СтрокаТабличнойЧасти.ВидОперацииПоступления = Справочники.ВидыПоступления.ПриобретениеТМЗ;
				КонецЕсли;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПриобретениеУслугПрочихАктивов,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВидПоступленияНДСПриобретениеТоваровУслугКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.ВидОперацииПоступления = ЗНАЧЕНИЕ(Справочник.ВидыПоступления.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВидПоступленияНДСПриобретениеУслугПрочихАктивовКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументРасходы.Ссылка
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ДокументРасходы
	|ГДЕ
	|	ДокументРасходы.ВидОперацииПоступления = ЗНАЧЕНИЕ(Справочник.ВидыПоступления.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитНалогообложениеНДСПересортицаТоваров(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПересортицаТоваров";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка КАК Документ.ПересортицаТоваров) КАК Ссылка
	|ПОМЕСТИТЬ ВТСписокДокументов
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляОбработки.Ссылка              КАК Ссылка,
	|	ДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСписокДокументов КАК ДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = МассивРезультатов.Количество();
	
	Выборка = МассивРезультатов[КоличествоПакетов-1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Объект.УдалитьНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПриобретениеТоваровУслуг,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитНалогообложениеНДСПересортицаТоваровКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументПересортица.Ссылка
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ДокументПересортица
	|ГДЕ
	|	ДокументПересортица.УдалитьНалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПризнакПроисхожденияВСправочникеНомераГТД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НомераГТД.Ссылка,
		|	НомераГТД.СпособПроисхождения,
		|	НомераГТД.СтранаПроисхождения,
		|	НомераГТД.КодТНВЭД,
		|	ВЫБОР
		|		КОГДА НомераГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ЕТТЕАЭС)
		|				ИЛИ НомераГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ВТО)
		|				ИЛИ НомераГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ТС)
		|			ТОГДА 1
		|		КОГДА НомераГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.СТ1)
		|			ТОГДА ВЫБОР
		|					КОГДА НомераГТД.КодТНВЭД В (&ПереченьИзъятий)
		|						ТОГДА 3
		|					ИНАЧЕ 4
		|				КОНЕЦ
		|		КОГДА НомераГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА НомераГТД.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|							И НомераГТД.СтранаПроисхождения <> NULL
		|							И НомераГТД.СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.КАЗАХСТАН)
		|						ТОГДА ВЫБОР
		|								КОГДА НомераГТД.КодТНВЭД В (&ПереченьИзъятий)
		|									ТОГДА 1
		|								ИНАЧЕ 2
		|							КОНЕЦ
		|					КОГДА НомераГТД.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.КАЗАХСТАН)
		|						ТОГДА ВЫБОР
		|								КОГДА НомераГТД.КодТНВЭД В (&ПереченьИзъятий)
		|									ТОГДА 3
		|								ИНАЧЕ 4
		|							КОНЕЦ
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|	КОНЕЦ КАК ПризнакПроисхождения,
		|	НомераГТД.КодТНВЭД,
		|	ВЫБОР
		|		КОГДА НомераГТД.КодТНВЭД В (&ПереченьИзъятий)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВходитВПереченьИзъятий
		|ИЗ
		|	Справочник.НомераГТД КАК НомераГТД
		|ГДЕ
		|	НЕ НомераГТД.ПометкаУдаления
		|	И НомераГТД.ПризнакПроисхождения = """"";
	
	Запрос.УстановитьПараметр("ПереченьИзъятий", ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерГТДОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НомерГТДОбъект.ПризнакПроисхождения = ВыборкаДетальныеЗаписи.ПризнакПроисхождения;
		Попытка
			НомерГТДОбъект.Записать();
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать элемент справочника: %элемент% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%элемент%", ВыборкаДетальныеЗаписи.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Справочники.НомераГТД,
									ВыборкаДетальныеЗаписи.Ссылка,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьРеквизитНомерСтрокиГТДВСправочникеНомераГТД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Ссылка.Дата КАК Дата,
		|	Товары.НомерГТД,
		|	Товары.НомерГТД.НомерСтрокиГТД КАК НомерСтрокиГТД,
		|	ВЫБОР
		|		КОГДА НЕ ТоварыСДулирующимсяНомеромГТДВПределахДокумента.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА Товары.НомерГТД.НомерСтрокиГТД <> 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК КОбработке,
		|	ТоварыСДулирующимсяНомеромГТДВПределахДокумента.НомерСтроки КАК НомерКонфликтнойСтроки
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваров.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваров.Товары КАК ТоварыСДулирующимсяНомеромГТДВПределахДокумента
		|		ПО Товары.Ссылка = ТоварыСДулирующимсяНомеромГТДВПределахДокумента.Ссылка
		|			И Товары.НомерСтроки <> ТоварыСДулирующимсяНомеромГТДВПределахДокумента.НомерСтроки
		|			И Товары.НомерГТД = ТоварыСДулирующимсяНомеромГТДВПределахДокумента.НомерГТД
		|ГДЕ
		|	НЕ Товары.Ссылка.ПометкаУдаления
		|	И Товары.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|	И НЕ (Товары.НомерГТД.НомерСтрокиГТД=Товары.НомерСтроки И ТоварыСДулирующимсяНомеромГТДВПределахДокумента.НомерСтроки ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
	
	Запрос.УстановитьПараметр("ПереченьИзъятий", ЭСФСерверПовтИсп.ПолучитьАктуальныйПереченьИзъятий());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДокументы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбработанныеНомераГТД = Новый Соответствие;
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаДокументы.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
			
		ДанныеПоДублирующимсяНомерамГТД = Новый Соответствие;
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.КОбработке Тогда
				
				// определим, был ли данный номер ГТД уже обработан в рамках данной процедуры
				// если да - то повторное изменение не требуется
				ДанныеПоОбработаннымНомерамГТД = ОбработанныеНомераГТД.Получить(ВыборкаДетальныеЗаписи.НомерГТД);
				
				Если ДанныеПоОбработаннымНомерамГТД<>Неопределено Тогда
					// если номер строки, присвоенный ранее в рамках данной процедуры, не свопадает с номером строки в обрабатываемом документе
					Если ДанныеПоОбработаннымНомерамГТД <> ВыборкаДетальныеЗаписи.НомерСтроки Тогда
						ТекстСообщения = НСтр("ru = 'Номер строки ""%НомерСтрокиГТД%"" источника ""%НомерГТД%"" не соответствует строке ""%НомерСтроки%"" заявления ""%Документ%""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерГТД%", ВыборкаДетальныеЗаписи.НомерГТД);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтрокиГТД%", ДанныеПоОбработаннымНомерамГТД);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаДетальныеЗаписи.НомерСтроки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДокументы.Ссылка);
						
						ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
							Метаданные.Справочники.НомераГТД, ВыборкаДетальныеЗаписи.НомерГТД, ТекстСообщения);
						КонецЕсли;
						
					Продолжить;
				КонецЕсли;
				
				НачатьТранзакцию();
				
				Попытка
					
					// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.НомераГТД.ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.НомерГТД);
					Блокировка.Заблокировать();
					
					ОбъектДляОбработки = ВыборкаДетальныеЗаписи.НомерГТД.ПолучитьОбъект();
					Если ОбъектДляОбработки = Неопределено Тогда
						ОтменитьТранзакцию();
						Продолжить;
					КонецЕсли;
					
					ОбъектДляОбработки.НомерСтрокиГТД = ВыборкаДетальныеЗаписи.НомерСтроки;
					
					//Если ОбъектДляОбработки.ПризнакПроисхождения = "" Тогда
					//	ОтменитьТранзакцию();
					//	Продолжить;
					//КонецЕсли;
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектДляОбработки);
					
					ОбработанныеНомераГТД.Вставить(ВыборкаДетальныеЗаписи.НомерГТД,ВыборкаДетальныеЗаписи.НомерСтроки);
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					ТекстСообщения = НСтр("ru = 'Не удалось обработать %Ссылка% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаДетальныеЗаписи.НомерГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
						Метаданные.Справочники.НомераГТД, ВыборкаДетальныеЗаписи.НомерГТД, ТекстСообщения);
					
				КонецПопытки;
		
			Иначе
				Если ВыборкаДетальныеЗаписи.НомерКонфликтнойСтроки <> Null Тогда
					МассивСтрокСДублирующимсяНомеромГТД = ДанныеПоДублирующимсяНомерамГТД.Получить(ВыборкаДетальныеЗаписи.НомерГТД);
					Если МассивСтрокСДублирующимсяНомеромГТД = Неопределено Тогда
						МассивСтрокСДублирующимсяНомеромГТД = Новый Массив;
					КонецЕсли;
					Если МассивСтрокСДублирующимсяНомеромГТД.Найти(ВыборкаДетальныеЗаписи.НомерСтроки)=Неопределено Тогда
						МассивСтрокСДублирующимсяНомеромГТД.Добавить(ВыборкаДетальныеЗаписи.НомерСтроки);
						ДанныеПоДублирующимсяНомерамГТД.Вставить(ВыборкаДетальныеЗаписи.НомерГТД,МассивСтрокСДублирующимсяНомеромГТД);
					КонецЕсли;
				ИначеЕсли ВыборкаДетальныеЗаписи.НомерСтрокиГТД <> ВыборкаДетальныеЗаписи.НомерСтроки Тогда
					ТекстСообщения = НСтр("ru = 'Номер строки ""%НомерСтрокиГТД%"" источника ""%НомерГТД%"" не соответствует строке ""%НомерСтроки%"" заявления ""%Документ%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерГТД%", ВыборкаДетальныеЗаписи.НомерГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтрокиГТД%", ВыборкаДетальныеЗаписи.НомерСтрокиГТД);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаДетальныеЗаписи.НомерСтроки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДокументы.Ссылка);
					
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.НомераГТД, ВыборкаДетальныеЗаписи.НомерГТД, ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементДанныхДублей Из ДанныеПоДублирующимсяНомерамГТД Цикл
			НомераСтрок = "";
			Для Каждого НомерСтрокиДокумента Из ЭлементДанныхДублей.Значение Цикл
				НомераСтрок = НомераСтрок + + Строка(НомерСтрокиДокумента)+ ",";
			КонецЦикла;
			Если НомераСтрок <> "" Тогда
				НомераСтрок = Лев(НомераСтрок,СтрДлина(НомераСтрок) - 1);
				ТекстСообщения = НСтр("ru = 'Не удалось обработать номер строки источника ""%НомерГТД%"" по причине: 
				|	источник присутствует в нескольких строках: ""%НомераСтрок%"" документа ""%Документ%""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерГТД%", ЭлементДанныхДублей.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДокументы.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомераСтрок%", НомераСтрок);
				
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.НомераГТД, ВыборкаДетальныеЗаписи.НомерГТД, ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаменитьВнешнююОбработкуОбменЭСФНаВстроенную() Экспорт
	
	Попытка 
		
		Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Установить(Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""Использовать внешний модуль обмена с ИС ЭСФ"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
								
	КонецПопытки; 
	
КонецПроцедуры

Процедура ЗаменитьВнешниеРегламентированныеОтчетыНаВнутренние() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
						  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета,
						  |	РегламентированныеОтчеты.Наименование КАК Наименование
						  |ИЗ
						  |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
						  |ГДЕ
						  |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
						  
						  
	Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
			Попытка
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			Исключение
			ТекстСообщения = НСтр("ru = 'при записи отчета %1  произошла ошибка: %2'");
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                     	ТекстСообщения, Выборка.Наименование, ОписаниеОшибки()),
									УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Версия_2_1_3

Процедура ПодготовитьСчетаНДСКПРедакции24() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НДСНалоговогоАгента = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента.ПолучитьОбъект();
		
		СубконтоДокументыОплаты = НДСНалоговогоАгента.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыОплаты, "ВидСубконто");
		
		Если СубконтоДокументыОплаты <> Неопределено Тогда
			
			НДСНалоговогоАгента.ВидыСубконто.Удалить(СубконтоДокументыОплаты);
			
		КонецЕсли;

		НДСНалоговогоАгента.Записать();
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление счета %1 не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			"3132.4");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ОбновитьКодыСтрокДекларацииПоНДС() Экспорт 
	
	Запрос 			= Новый Запрос; 
	Запрос.Текст 	= "ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДСКЗачету.Период,
	|	КодыСтрокДекларацииПоНДСКЗачету.КодСтроки,
	|	КодыСтрокДекларацииПоНДСКЗачету.ВидОперации,
	|	КодыСтрокДекларацииПоНДСКЗачету.ВидОборота,
	|	""КодыСтрокДекларацииПоНДСКЗачету"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНДСКЗачету КАК КодыСтрокДекларацииПоНДСКЗачету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыСтрокДекларацииПоНДС.Период,
	|	КодыСтрокДекларацииПоНДС.КодСтроки,
	|	КодыСтрокДекларацииПоНДС.ВидОперации,
	|	NULL,
	|	""КодыСтрокДекларацииПоНДС""
	|ИЗ
	|	РегистрСведений.КодыСтрокДекларацииПоНДС КАК КодыСтрокДекларацииПоНДС";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	МенеджерЗаписиКодыСтрокДекларацииПоНДС 			= РегистрыСведений.КодыСтрокДекларацииПоНДС.СоздатьМенеджерЗаписи();
	МенеджерЗаписиКодыСтрокДекларацииПоНДСКЗачету 	= РегистрыСведений.КодыСтрокДекларацииПоНДСКЗачету.СоздатьМенеджерЗаписи();
	Пока ВыборкаЗапроса.Следующий() Цикл
		КодСтроки 		= СокрЛП(ВыборкаЗапроса.КодСтроки);
		ИмяРегистра 	= ВыборкаЗапроса.ИмяРегистра;
		КодПодСтроки = Прав(КодСтроки,СтрДлина(КодСтроки) - 11);
		Если ПустаяСтрока(КодПодСтроки) Тогда
			Продолжить;
		КонецЕсли;	
		
		НовыйКодСтроки = Лев(КодСтроки,11) + СтрЗаменить(КодПодСтроки, ".", "-");
		
		Если ИмяРегистра = "КодыСтрокДекларацииПоНДСКЗачету" Тогда
			НаборЗаписей = РегистрыСведений.КодыСтрокДекларацииПоНДСКЗачету.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидОборота.Установить(ВыборкаЗапроса.ВидОборота);
		Иначе	
			НаборЗаписей = РегистрыСведений.КодыСтрокДекларацииПоНДС.СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.Отбор.ВидОперации.Установить(ВыборкаЗапроса.ВидОперации);
        НаборЗаписей.Отбор.Период.Установить(ВыборкаЗапроса.Период);
		
		НовЗапись 					= НаборЗаписей.Добавить();
		
		Если ИмяРегистра = "КодыСтрокДекларацииПоНДСКЗачету" Тогда
			НовЗапись.ВидОборота 			= ВыборкаЗапроса.ВидОборота;
		КонецЕсли;
		
		НовЗапись.ВидОперации 		= ВыборкаЗапроса.ВидОперации;
		НовЗапись.КодСтроки 		= НовыйКодСтроки;
		НовЗапись.Период 			= ВыборкаЗапроса.Период;
        
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи кода строки ""%1"" регистра сведений ""%2"" произошла ошибка: %3'");
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, КодСтроки, ИмяРегистра, ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

#КонецОбласти

#Область Версия_2_4

Процедура ПодготовитьСчетаНДСРедакция24() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НДСТаможенныйСоюзКУплате = ПланыСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате.ПолучитьОбъект();
		НДСТаможенныйСоюзКУплате.Код = "3132.3";
		НДСТаможенныйСоюзКУплате.КодБыстрогоВыбора = "31323";
		НДСТаможенныйСоюзКУплате.Порядок = "3132.3";
		НДСТаможенныйСоюзКУплате.ЗапретитьИспользоватьВПроводках = Ложь;
		НДСТаможенныйСоюзКУплате.НалоговыйУчет = Истина;
		НДСТаможенныйСоюзКУплате.ОбменДанными.Загрузка = Истина;
		НДСТаможенныйСоюзКУплате.Записать();
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление счета %1 не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			"3132.3");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Попытка
		
		НДСНалоговогоАгента = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента.ПолучитьОбъект();
		
		СубконтоСФПолученные = НДСНалоговогоАгента.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные, "ВидСубконто");
		
		Если СубконтоСФПолученные = Неопределено Тогда
			
			СубконтоСФПолученные = НДСНалоговогоАгента.ВидыСубконто.Добавить();
			СубконтоСФПолученные.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные;
			СубконтоСФПолученные.Суммовой = Истина;
			
		КонецЕсли;

		НДСНалоговогоАгента.Код = "3132.4";
		НДСНалоговогоАгента.КодБыстрогоВыбора = "31324";
		НДСНалоговогоАгента.Порядок = "3132.4";
		НДСНалоговогоАгента.ЗапретитьИспользоватьВПроводках = Ложь;
		НДСНалоговогоАгента.НалоговыйУчет = Истина;
		НДСНалоговогоАгента.ОбменДанными.Загрузка = Истина;
		НДСНалоговогоАгента.Записать();
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление счета %1 не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			"3132.4");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
			,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// В справочнике Учетные политики организаций заполняет новые реквизиты
Процедура Справочники_УчетныеПолитикиОрганизаций_ОбработатьДанныеДляПереходаНаНовуюВерсию24() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетныеПолитикиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.УчетныеПолитикиОрганизаций КАК УчетныеПолитикиОрганизаций
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.ПрименяетсяОсвобождениеОтУплатыНДС = УчетныеПолитикиОрганизаций.УдалитьПлательщикНДС 
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
						
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.УчетныеПолитикиОрганизаций");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СпрОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			СпрОбъект.ПрименяетсяОсвобождениеОтУплатыНДС = НЕ СпрОбъект.УдалитьПлательщикНДС;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);

			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать учетную политику организации: %Ключ% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Выборка.Ссылка.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГруппыФинансовогоУчетаНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъекта.Ссылка КАК Ссылка 
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ТаблицаОбъекта
	|ГДЕ
	|	ТаблицаОбъекта.СчетУчетаНДСПриПродаже = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ИЛИ ТаблицаОбъекта.СчетУчетаНДСПриПродаже <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	ИЛИ ТаблицаОбъекта.СчетУчетаНДСПриЗакупке = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ИЛИ ТаблицаОбъекта.СчетУчетаНДСПриЗакупке <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПриПокупке)
	|	ИЛИ ТаблицаОбъекта.СчетУчетаНДСВПути = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) ИЛИ ТаблицаОбъекта.СчетУчетаНДСВПути <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ГруппыФинансовогоУчетаНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ГруппыФинансовогоУчетаНоменклатуры";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСПриЗакупке) ИЛИ Не Объект.СчетУчетаНДСПриЗакупке = ПланыСчетов.Хозрасчетный.НДСНачисленныйПриПокупке Тогда
				Объект.СчетУчетаНДСПриЗакупке = ПланыСчетов.Хозрасчетный.НДСНачисленныйПриПокупке;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСПриПродаже) ИЛИ Не Объект.СчетУчетаНДСПриПродаже = ПланыСчетов.Хозрасчетный.НДС Тогда
				Объект.СчетУчетаНДСПриПродаже = ПланыСчетов.Хозрасчетный.НДС;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СчетУчетаНДСВПути) ИЛИ Не Объект.СчетУчетаНДСВПути = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению Тогда
				Объект.СчетУчетаНДСВПути = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

Процедура ПорядокОтраженияНоменклатуры_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПорядокОтраженияНоменклатуры";
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация,
	|	Т.Склад,
	|	Т.ГруппаФинансовогоУчета
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНоменклатуры КАК Т
	|ГДЕ
	|	Т.СчетУчетаНДСПриПродаже = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И Т.СчетУчетаНДСПриПродаже <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС)
	|	ИЛИ Т.СчетУчетаНДСПриЗакупке = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И Т.СчетУчетаНДСПриЗакупке <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНачисленныйПриПокупке)
	|	ИЛИ Т.СчетУчетаНДСВПути = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И Т.СчетУчетаНДСВПути <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению)";
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПорядокОтраженияНоменклатуры_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Подготовим выборку данных.
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ИмяВременнойТаблицы = "ВТДанныеПустыхСчетов";
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		"РегистрСведений.ПорядокОтраженияНоменклатуры",
		МенеджерВременныхТаблиц,
		ДополнительныеПараметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.ГруппаФинансовогоУчета,
	|	ДанныеРегистра.СчетУчетаНаСкладе,
	|	ДанныеРегистра.СчетУчетаВыручкиОтПродаж,
	|	ДанныеРегистра.СчетУчетаСебестоимостиПродаж,
	|	ДанныеРегистра.СчетУчетаНДСПриПродаже,
	|	ДанныеРегистра.СтатьяДоходовОСНО,
	|	ДанныеРегистра.СтатьяДоходовОСНО КАК СтатьяДоходовЕНВД,
	|	ДанныеРегистра.СчетУчетаНДСПриЗакупке,
	|	ДанныеРегистра.СчетУчетаВПути,
	|	ДанныеРегистра.СчетУчетаНДСВПути,
	|	ДанныеРегистра.СчетУчетаВыручкиОтПродаж КАК СчетУчетаВыручкиОтПродажЕНВД,
	|	ДанныеРегистра.СчетУчетаСебестоимостиПродаж КАК СчетУчетаСебестоимостиПродажЕНВД
	|ИЗ
	|	ВТДанныеПустыхСчетов КАК ДанныеПустыхСчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНоменклатуры КАК ДанныеРегистра
	|	ПО ДанныеПустыхСчетов.Организация = ДанныеРегистра.Организация
	|		И ДанныеПустыхСчетов.Склад = ДанныеРегистра.Склад
	|		И ДанныеПустыхСчетов.ГруппаФинансовогоУчета = ДанныеРегистра.ГруппаФинансовогоУчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокОтраженияНоменклатуры");
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировки.УстановитьЗначение("Склад", Выборка.Склад);
			ЭлементБлокировки.УстановитьЗначение("ГруппаФинансовогоУчета", Выборка.ГруппаФинансовогоУчета);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ПорядокОтраженияНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.Склад.Установить(Выборка.Склад);
			НаборЗаписей.Отбор.ГруппаФинансовогоУчета.Установить(Выборка.ГруппаФинансовогоУчета);
			
			СтрокаРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРегистра, Выборка);
			
			СтрокаРегистра.СчетУчетаНДСПриПродаже = ПланыСчетов.Хозрасчетный.НДС;
			СтрокаРегистра.СчетУчетаНДСПриЗакупке = ПланыСчетов.Хозрасчетный.НДСНачисленныйПриПокупке;
			СтрокаРегистра.СчетУчетаНДСВПути = ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось записать данные в регистр %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", "РегистрСведений.ПорядокОтраженияНоменклатуры");
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.ПорядокОтраженияНоменклатуры, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = НЕ ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "РегистрСведений.ПорядокОтраженияНоменклатуры");
	
КонецПроцедуры

//Обновляет поставляемые драйверы в составе конфигурации (добавление драйвера WebKassa).
Процедура ОбновитьПоставляемыеДрайвера() Экспорт
	
	Справочники.ДрайверыОборудования.ЗаполнитьПредопределенныйЭлемент(Перечисления.ОбработчикиДрайверовПодключаемогоОборудования.ОбработчикWebkassaФискальныеРегистраторы);
	
КонецПроцедуры

Процедура РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_РегистрацияДанных(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Создаем элементы дополнительных реквизитов для последующего переноса в них аналитики со старых счетов учета,
// создает элементы справочника Виды резервов по записям РБ Хозрасчетный для сохранения старой аналитики счетов.
//
Процедура РезервыРБП_Справочник_НаборыДополнительныхРеквизитовИСведений_ОбработкаДанных(Параметры) Экспорт
	
	// Подключение констант
	// Создание дополнительных реквизитов в справочнике Виды резервов
	МассивДоступныхТиповКонтрагент = Новый Массив();
	МассивДоступныхТиповКонтрагент.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивДоступныхТиповКонтрагент.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТиповКонтрагент = Новый ОписаниеТипов(МассивДоступныхТиповКонтрагент);
	
	МассивДоступныхТиповДоговор = Новый Массив;
	МассивДоступныхТиповДоговор.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивДоступныхТиповДоговор.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	МассивДоступныхТиповДоговор.Добавить(Тип("СправочникСсылка.ДоговорыЛизинга"));
	МассивДоступныхТиповДоговор.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	ОписаниеТиповДоговор = Новый ОписаниеТипов(МассивДоступныхТиповДоговор);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
	ЭлементБлокировки = Блокировка.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
	ЭлементБлокировки = Блокировка.Добавить("Константа.ФормироватьРезервыПредстоящихРасходов");
	ЭлементБлокировки = Блокировка.Добавить("Константа.ИспользоватьДополнительныеРеквизитыИСведения");
	Блокировка.Заблокировать();
	
	Попытка
		
		// Включаем, чтобы пользователю был доступен выбор дополнительных реквизитов
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
			ЗначениеКонстанты = Истина;
			Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(ЗначениеКонстанты);
		КонецЕсли;
		
		// Включаем, чтобы пользователю был доступен просмотр деталей справочника Резервы
		Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьРезервыПредстоящихРасходов") Тогда
			ЗначениеКонстанты = Истина;
			Константы.ФормироватьРезервыПредстоящихРасходов.Установить(ЗначениеКонстанты);
		КонецЕсли;
		
		НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Резервы;
		
		// Контрагент
		НовоеДополнительноеСвойствоКонтрагент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		НовоеДополнительноеСвойствоКонтрагент.НаборСвойств = НаборСвойств;
		НовоеДополнительноеСвойствоКонтрагент.Заголовок = "Контрагент (упраздненная аналитика)";
		НовоеДополнительноеСвойствоКонтрагент.Наименование = "Контрагент (упраздненная аналитика)";
		НовоеДополнительноеСвойствоКонтрагент.ТипЗначения = ОписаниеТиповКонтрагент;
		НовоеДополнительноеСвойствоКонтрагент.ЭтоДополнительноеСведение = Ложь;
		НовоеДополнительноеСвойствоКонтрагент.Записать();
		
		// Договор
		НовоеДополнительноеСвойствоДоговор = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		НовоеДополнительноеСвойствоДоговор.НаборСвойств = НаборСвойств;
		НовоеДополнительноеСвойствоДоговор.Заголовок = "Договор (упраздненная аналитика)";
		НовоеДополнительноеСвойствоДоговор.Наименование = "Договор (упраздненная аналитика)";
		НовоеДополнительноеСвойствоДоговор.ТипЗначения = ОписаниеТиповДоговор;
		НовоеДополнительноеСвойствоДоговор.ЭтоДополнительноеСведение = Ложь;
		НовоеДополнительноеСвойствоДоговор.Записать();
		
		НаборСвойствОбъект = НаборСвойств.ПолучитьОбъект();
		ДополнительныеСвойства = НаборСвойствОбъект.ДополнительныеРеквизиты;
		НовоеСвойство = ДополнительныеСвойства.Добавить();
		НовоеСвойство.Свойство = НовоеДополнительноеСвойствоКонтрагент.Ссылка;
		
		НовоеСвойство = ДополнительныеСвойства.Добавить();
		НовоеСвойство.Свойство = НовоеДополнительноеСвойствоДоговор.Ссылка;
		
		НаборСвойствОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПолноеИмяОбъекта = "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения";
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать элемент справочника ""Наборы дополнительных реквизитов"" по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеОбъекта, ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	// Создание элементов справочника Виды резервов для переноса аналитики
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОбороты.Организация КАК Организация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Счет В(&СтарыеСчетаУчета)";
	
	Запрос.УстановитьПараметр("СтарыеСчетаУчета", СтарыеСчетаУчетаРезервов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСчетовБезСубконто = Новый Массив();
	МассивСчетовБезСубконто.Добавить(ПланыСчетов.Хозрасчетный.УдалитьПрочиеКраткосрочныеОценочныеОбязательства);
	МассивСчетовБезСубконто.Добавить(ПланыСчетов.Хозрасчетный.УдалитьПрочиеДолгосрочныеОценочныеОбязательства);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();		
		
		Попытка	
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Резервы");
			ЭлементБлокировки = Блокировка.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			Блокировка.Заблокировать();
			
			Если Выборка.Счет.Код = "Я341" Тогда
				// 3410
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.КраткосрочныеГарантийныеОбязательстваРезервы;
			ИначеЕсли Выборка.Счет.Код = "Я342" Тогда
				// 3420
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.КраткосрочныеОбязательстваПоЮридическимПретензиямРезервы;
			ИначеЕсли Выборка.Счет.Код = "Я344" Тогда
				// 3440
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.ПрочиеКраткосрочныеОценочныеОбязательстваРезервы;
			ИначеЕсли Выборка.Счет.Код = "Я421" Тогда
				// 4210
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.ДолгосрочныеГарантийныеОбязательстваРезервы;
			ИначеЕсли Выборка.Счет.Код = "Я422" Тогда
				// 4220
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.ДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиямРезервы;
			ИначеЕсли Выборка.Счет.Код = "Я424" Тогда
				// 4240
				СчетВидаРезерва = ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОценочныеОбязательстваРезервы;
			КонецЕсли;
			
			НовыйЭлемент = Справочники.Резервы.СоздатьЭлемент();
			
			// У счетов 3440 и 4240 не было аналитики, значит создание видов резервов по ним не укладывается в выбранный шаблон
			Если МассивСчетовБезСубконто.Найти(Выборка.Счет) = Неопределено  Тогда
				
				Если Не ЗначениеЗаполнено(Выборка.Субконто1) Тогда
					НаименованиеКонтрагент = "Без контрагента";
				Иначе
					НаименованиеКонтрагент = Выборка.Субконто1.Наименование;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Выборка.Субконто2) Тогда
					НаименованиеДоговор = "Без договора";
				Иначе
					НаименованиеДоговор = Выборка.Субконто2.Наименование;
				КонецЕсли;
				
				// Создаем элементы по шаблону "Контрагент/Договор"
				НовыйЭлемент.Наименование = НаименованиеКонтрагент + "/" + НаименованиеДоговор; 
				
				НаборСвойствКонтрагент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Контрагент (упраздненная аналитика)");
				СтрокаКонтрагент = НовыйЭлемент.ДополнительныеРеквизиты.Добавить();
				СтрокаКонтрагент.Свойство = НаборСвойствКонтрагент.Ссылка;
				СтрокаКонтрагент.Значение = Выборка.Субконто1;
				
				НаборСвойствДоговор = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Договор (упраздненная аналитика)");
				СтрокаДоговор = НовыйЭлемент.ДополнительныеРеквизиты.Добавить();
				СтрокаДоговор.Свойство = НаборСвойствДоговор.Ссылка;
				СтрокаДоговор.Значение = Выборка.Субконто2;
				
			Иначе 
				
				НовыйЭлемент.Наименование = "Прочие резервы: " + Выборка.Счет.Код + "/" + Выборка.Организация.НаименованиеСокращенное;
				
			КонецЕсли;
			
			НовыйЭлемент.СчетУчета = СчетВидаРезерва;
			
			НовыйЭлемент.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПолноеИмяОбъекта = "Справочник.Резервы";
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось создать вид резервов по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

Функция СтарыеСчетаУчетаРезервов()
	
	// Формируем массив ссылок на старые счета учета резервов - группы 3400 и 4200 (за исключением счетов 3430 и 4230), теперь ""не используемые""	
	ИзменяемыеСчета = Новый Массив();
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеГарантийныеОбязательства);
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеОбязательстваПоЮридическимПретензиям);
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьПрочиеКраткосрочныеОценочныеОбязательства);
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеГарантийныеОбязательства);
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьПрочиеДолгосрочныеОценочныеОбязательства);
	ИзменяемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиям);
	
	Возврат ИзменяемыеСчета;
	
КонецФункции

//Заменяет в регистре бухгалтерии ссылки на старые, удаляемые счета ссылками на новые счета с перезаполнением субконто
//
Процедура РезервыРБП_РегистрБухгалтерии_Хозрасчетный_РегистрацияДанных(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура РезервыРБП_РегистрБухгалтерии_Хозрасчетный_ОбработкаДанных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	(ХозрасчетныйДвиженияССубконто.СчетДт В (&СтарыеСчетаУчета)
	|			ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт В (&СтарыеСчетаУчета))";
	
	Запрос.УстановитьПараметр("СтарыеСчетаУчета", СтарыеСчетаУчетаРезервов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		Блокировка.Заблокировать();
		
		Попытка
			
			НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();    
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Если Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеГарантийныеОбязательства  Тогда
					//3410
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.КраткосрочныеГарантийныеОбязательстваРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоДт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоДт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеОбязательстваПоЮридическимПретензиям Тогда
					//3420
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.КраткосрочныеОбязательстваПоЮридическимПретензиямРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоДт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоДт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьПрочиеКраткосрочныеОценочныеОбязательства Тогда
					//3440
					СтарыйСчет = Запись.СчетДт.Код;
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеКраткосрочныеОценочныеОбязательстваРезервы;
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию("Прочие резервы: " + СтарыйСчет + "/" + Запись.Организация.НаименованиеСокращенное);
					
				ИначеЕсли Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеГарантийныеОбязательства Тогда
					//4210
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.ДолгосрочныеГарантийныеОбязательстваРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоДт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоДт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
				ИначеЕсли Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиям Тогда
					//4220
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.ДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиямРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоДт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоДт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоДт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетДт = ПланыСчетов.Хозрасчетный.УдалитьПрочиеДолгосрочныеОценочныеОбязательства Тогда
					//4240
					СтарыйСчет = Запись.СчетДт.Код;
					Запись.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОценочныеОбязательстваРезервы;
					Запись.СубконтоДт.Резервы = Справочники.Резервы.НайтиПоНаименованию("Прочие резервы: " + СтарыйСчет + "/" + Запись.Организация.НаименованиеСокращенное);
				КонецЕсли;
				
				Если Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеГарантийныеОбязательства  Тогда
					//3410
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.КраткосрочныеГарантийныеОбязательстваРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоКт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоКт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеОбязательстваПоЮридическимПретензиям Тогда
					//3420
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.КраткосрочныеОбязательстваПоЮридическимПретензиямРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоКт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоКт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьПрочиеКраткосрочныеОценочныеОбязательства Тогда
					//3440
					СтарыйСчет = Запись.СчетКт.Код;
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеКраткосрочныеОценочныеОбязательстваРезервы;
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию("Прочие резервы: " + СтарыйСчет + "/" + Запись.Организация.НаименованиеСокращенное);
				ИначеЕсли Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеГарантийныеОбязательства Тогда
					//4210
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.ДолгосрочныеГарантийныеОбязательстваРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоКт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоКт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиям Тогда
					//4220
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.ДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиямРезервы;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Контрагенты) Тогда
						НаименованиеКонтрагент = "Без контрагента";
					Иначе
						НаименованиеКонтрагент = Запись.СубконтоКт.Контрагенты.Наименование;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Запись.СубконтоКт.Договоры) Тогда
						НаименованиеДоговор = "Без договора";
					Иначе
						НаименованиеДоговор = Запись.СубконтоКт.Договоры.Наименование;
					КонецЕсли;
					
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию(НаименованиеКонтрагент + "/" + НаименованиеДоговор);
					
				ИначеЕсли Запись.СчетКт = ПланыСчетов.Хозрасчетный.УдалитьПрочиеДолгосрочныеОценочныеОбязательства Тогда
					//4240
					СтарыйСчет = Запись.СчетКт.Код;
					Запись.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОценочныеОбязательстваРезервы;
					Запись.СубконтоКт.Резервы = Справочники.Резервы.НайтиПоНаименованию("Прочие резервы: " + СтарыйСчет + "/" + Запись.Организация.НаименованиеСокращенное);
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПолноеИмяОбъекта = "РегистрБухгалтерии.Хозрасчетный";
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось скорректировать запись регистра по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры 

//Заменяет счета учета в настройках отражения в регл учете со старых на аналогичные новые
//
Процедура РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_РегистрацияДанных(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура РезервыРБП_РегистрСведений_ПорядокОтраженияРасчетовСПартнерами_ОбработкаДанных(Параметры) Экспорт
	
	СтарыеСчетаУчета = СтарыеСчетаУчетаРезервов();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПорядокОтраженияРасчетовСПартнерами");
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПорядокОтраженияРасчетовСПартнерами.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();    
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Параметры.ОбработкаЗавершена = Истина;
			
		Иначе
			
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Для каждого Счет Из СтарыеСчетаУчета Цикл
					
					Если Запись.СчетУчетаАвансовВыданных = Счет Тогда 
						Запись.СчетУчетаАвансовВыданных = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаАвансовПолученных = Счет Тогда 
						Запись.СчетУчетаАвансовПолученных = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаНеотфактурованныеПоставки = Счет Тогда 
						Запись.СчетУчетаНеотфактурованныеПоставки = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовПоПретензиям = Счет Тогда 
						Запись.СчетУчетаРасчетовПоПретензиям = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСДебиторамиКомиссия = Счет Тогда 
						Запись.СчетУчетаРасчетовСДебиторамиКомиссия = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСДебиторамиОсновнойДолг = Счет Тогда 
						Запись.СчетУчетаРасчетовСДебиторамиОсновнойДолг = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСДебиторамиПроценты = Счет Тогда 
						Запись.СчетУчетаРасчетовСДебиторамиПроценты = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСКлиентами = Счет Тогда 
						Запись.СчетУчетаРасчетовСКлиентами = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСКлиентамиТара = Счет Тогда 
						Запись.СчетУчетаРасчетовСКлиентамиТара = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСКредиторамиКомиссия = Счет Тогда 
						Запись.СчетУчетаРасчетовСКредиторамиКомиссия = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСКредиторамиОсновнойДолг = Счет Тогда 
						Запись.СчетУчетаРасчетовСКредиторамиОсновнойДолг = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСКредиторамиПроценты = Счет Тогда 
						Запись.СчетУчетаРасчетовСКредиторамиПроценты = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСПоставщиками = Счет Тогда 
						Запись.СчетУчетаРасчетовСПоставщиками = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
					Если Запись.СчетУчетаРасчетовСПоставщикамиТара = Счет Тогда 
						Запись.СчетУчетаРасчетовСПоставщикамиТара = СоответствиеСчетовУчета(Счет);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПолноеИмяОбъекта = "РегистрСведений.ПорядокОтраженияРасчетовСПартнерами";
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
		ТекстСообщения = НСтр("ru = 'Не удалось скорректировать запись регистра по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеОбъекта, ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры 

Функция СоответствиеСчетовУчета(СтарыйСчет)
	
	Если СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеГарантийныеОбязательства  Тогда
		//3410
		НовыйСчет = ПланыСчетов.Хозрасчетный.КраткосрочныеГарантийныеОбязательстваРезервы;
	ИначеЕсли СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьКраткосрочныеОбязательстваПоЮридическимПретензиям Тогда
		//3420
		НовыйСчет = ПланыСчетов.Хозрасчетный.КраткосрочныеОбязательстваПоЮридическимПретензиямРезервы;
	ИначеЕсли СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьПрочиеКраткосрочныеОценочныеОбязательства Тогда
		//3440
		НовыйСчет = ПланыСчетов.Хозрасчетный.ПрочиеКраткосрочныеОценочныеОбязательстваРезервы;
	ИначеЕсли СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеГарантийныеОбязательства Тогда
		//4210
		НовыйСчет = ПланыСчетов.Хозрасчетный.ДолгосрочныеГарантийныеОбязательстваРезервы;
	ИначеЕсли СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиям Тогда
		//4220
		НовыйСчет = ПланыСчетов.Хозрасчетный.ДолгосрочныеОценочныеОбязательстваПоЮридическимПретензиямРезервы;
	ИначеЕсли СтарыйСчет = ПланыСчетов.Хозрасчетный.УдалитьПрочиеДолгосрочныеОценочныеОбязательства Тогда
		//4240
		НовыйСчет = ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОценочныеОбязательстваРезервы;
	КонецЕсли;
	
	Возврат НовыйСчет;
	
КонецФункции

Процедура СтатьиРасходов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	НЕ СтатьиРасходов.ЭтоГруппа
	|			И (СтатьиРасходов.ВидДеятельностиРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиРасходов.ПустаяСсылка)
	|				ИЛИ СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)
	|				ИЛИ НЕ СтатьиРасходов.СчетСписанияЕНВД = СтатьиРасходов.СчетУчета
	|				ИЛИ НЕ СтатьиРасходов.СчетСписанияОСНО = СтатьиРасходов.СчетУчета
	|				ИЛИ СтатьиРасходов.ПравилоРаспределенияНаСебестоимость = ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПустаяСсылка))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СтатьиРасходов_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельностиРасходов) Тогда
				Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
				Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ПравилоРаспределенияНаСебестоимость) Тогда
				Объект.ПравилоРаспределенияНаСебестоимость = Перечисления.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если НЕ Объект.СчетСписанияОСНО = Объект.СчетУчета Тогда
				Объект.СчетСписанияОСНО = Объект.СчетУчета;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если НЕ Объект.СчетСписанияЕНВД = Объект.СчетУчета Тогда
				Объект.СчетСписанияЕНВД = Объект.СчетУчета;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

Процедура ОбновитьДокументыЭСФОтложенно(Параметры) Экспорт
	                  	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1000
	                |	ЭСФ.Ссылка КАК ССылка,
	                |	ЭСФ.Представление КАК Представление
	                |ИЗ
	                |	Документ.ЭСФ КАК ЭСФ
	                |ГДЕ
	                |	НЕ ЭСФ.Проведен
	                |	И НЕ ЭСФ.ПометкаУдаления
	                |	И НЕ ЭСФ.Статус В (&ИсключаемыеСтатусы)" ;
									
	ИсключаемыеСтатусы = Новый Массив;
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Отклоненный);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Ошибочный);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Черновик);
	ИсключаемыеСтатусы.Добавить(Перечисления.СтатусыЭСФ.Удаленный);
	
	Запрос.УстановитьПараметр("ИсключаемыеСтатусы", ИсключаемыеСтатусы);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаРезультат  ИЗ ТаблицаРезультат Цикл
		
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
    	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭСФ");
    	ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаРезультат.Ссылка);

		ДокументОбъект = СтрокаРезультат.Ссылка.ПолучитьОбъект();
			
		Попытка
			Блокировка.Заблокировать(); 			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Проведен = Истина;

			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию(); 

		Исключение
			
			ОтменитьТранзакцию(); 
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ТекстСообщения = НСтр("ru = 'При записи документа ЭСФ ""%1"" произошла ошибка: %3'");
			ЗаписьЖурналаРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения, СтрокаРезультат.Представление, ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
				
		КонецПопытки;			
		
	КонецЦикла;  
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;

		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Процедуре Обновления ЭСФ (отложенно)
					|не удалось установить у документов ЭСФ  признак ""Проведен"":  у %1 документов.'"), 
					ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Процедура  Обновления ЭСФ (отложенно)
						|обработала очередную порцию документов ЭСФ: %1 документов'"), 
						ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Информация,
				,
				,
				ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбновитьДокументыЭСФОтложенно_РегистрацияДанных(Параметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаменитьКонстантыЭСФ() Экспорт
	
	Попытка
		Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными.Установить(Ложь);
	Исключение
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""Использовать внешний модуль обмена с ИС ЭСФ"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
	КонецПопытки;
	
	//Значение константы Удалить_ЭСФБиблиотекаКриптографии переносим в константу ЭСФВнешнийМодуль
	ЭСФВнешнийМодуль = Константы.Удалить_ЭСФБиблиотекаКриптографии.Получить();	
	
	Попытка
		Константы.ЭСФВнешнийМодуль.Установить(ЭСФВнешнийМодуль);
	Исключение
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""Внешний модуль документооборота с ИС ЭСФ"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
	КонецПопытки;

	//Значение константы Удалить_ЭСФВерсияБиблиотекиКриптографии переносим в константу ЭСФВерсияВнешнегоМодуля
	ЭСФВерсияВнешнегоМодуля = Константы.Удалить_ЭСФВерсияБиблиотекиКриптографии.Получить();	
	
	Попытка
		Константы.ЭСФВерсияВнешнегоМодуля.Установить(ЭСФВерсияВнешнегоМодуля);
	Исключение
		ТекстСообщения = НСтр(
		"ru = 'Не удалось обновить значение константы ""Версия внешнего модуля документооборота с ИС ЭСФ"",
		|так как при обновлении произошла ошибка:
		|%1'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
								УровеньЖурналаРегистрации.Предупреждение,
								Метаданные.Константы.ЭСФИспользоватьВнешнийМодульОбменаДанными,
								ТекстСообщения,
								ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#Область ПеремещениеНМА2_4

Процедура ПараметрыАмортизацииНМАБУ_ПеремещениеНМА_РегистрацияДанных(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПараметрыАмортизацииНМАБУ";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПараметрыАмортизацииНМАБУ.Регистратор КАК Документ.ПеремещениеНМА2_4) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыПеремещенияНМА
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАБУ КАК ПараметрыАмортизацииНМАБУ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПараметрыАмортизацииНМАБУ.Регистратор) = ТИП(Документ.ПеремещениеНМА2_4)
	|	И ПараметрыАмортизацииНМАБУ.МетодНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПеремещенияНМА.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ДокументыПеремещенияНМА КАК ВТ_ДокументыПеремещенияНМА
	|ГДЕ
	|	ВТ_ДокументыПеремещенияНМА.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс)");

	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПараметрыАмортизацииНМАБУ_ПеремещениеНМА_ОбработкаДанных(Параметры) Экспорт
	      
	ПолноеИмяРегистра = "РегистрСведений.ПараметрыАмортизацииНМАБУ";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииНМАБУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ВЫРАЗИТЬ(ПараметрыАмортизацииНМАБУ.Регистратор КАК Документ.ПеремещениеНМА2_4).Организация КАК Организация
	|ПОМЕСТИТЬ Вт_ТаблицаНМА
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАБУ КАК ПараметрыАмортизацииНМАБУ
	|ГДЕ
	|	ПараметрыАмортизацииНМАБУ.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ТаблицаНМА.Организация КАК Организация,
	|	Вт_ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ПараметрыАмортизацииНМАБУСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииНМАБУСрезПоследних.МетодНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) КАК МетодНачисленияАмортизации
	|ИЗ
	|	Вт_ТаблицаНМА КАК Вт_ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(&Период, Регистратор <> &Регистратор) КАК ПараметрыАмортизацииНМАБУСрезПоследних
	|		ПО Вт_ТаблицаНМА.Организация = ПараметрыАмортизацииНМАБУСрезПоследних.Организация
	|			И Вт_ТаблицаНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУСрезПоследних.НематериальныйАктив";
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Запрос.УстановитьПараметр("Период", Регистратор.Дата);
			ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
			
			Набор = РегистрыСведений.ПараметрыАмортизацииНМАБУ.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ЕстьИзменения = Ложь;
			Для каждого ЗаписьРегистра Из Набор Цикл
				СтрокаПараметров = ТаблицаПараметров.Найти(ЗаписьРегистра.НематериальныйАктив, "НематериальныйАктив");
				Если СтрокаПараметров <> Неопределено Тогда
					ЗаписьРегистра.МетодНачисленияАмортизации = СтрокаПараметров.МетодНачисленияАмортизации;
					ЗаписьРегистра.ЛиквидационнаяСтоимость    = СтрокаПараметров.ЛиквидационнаяСтоимость;
					ЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ЕстьИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									ВыборкаПоДокументам.Регистратор.Метаданные(),
									ВыборкаПоДокументам.Регистратор,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ПервоначальныеСведения_ПеремещениеНМА_РегистрацияДанных(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ПервоначальныеСведенияНМА";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПервоначальныеСведенияНМА.Регистратор КАК Документ.ПеремещениеНМА2_4) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыПеремещенияНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПервоначальныеСведенияНМА.Регистратор) = ТИП(Документ.ПеремещениеНМА2_4)
	|	И ПервоначальныеСведенияНМА.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПеремещенияНМА.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ДокументыПеремещенияНМА КАК ВТ_ДокументыПеремещенияНМА
	|ГДЕ
	|	ВТ_ДокументыПеремещенияНМА.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПервоначальныеСведения_ПеремещениеНМА_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ПервоначальныеСведенияНМА";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ВЫРАЗИТЬ(ПервоначальныеСведенияНМА.Регистратор КАК Документ.ПеремещениеНМА2_4).Организация КАК Организация
	|ПОМЕСТИТЬ Вт_ТаблицаНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
	|ГДЕ
	|	ПервоначальныеСведенияНМА.Регистратор = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ТаблицаНМА.Организация КАК Организация,
	|	Вт_ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАСрезПоследних.АмортизационнаяГруппа, ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ПустаяСсылка)) КАК АмортизационнаяГруппа
	|ИЗ
	|	Вт_ТаблицаНМА КАК Вт_ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&Период, Регистратор <> &Регистратор) КАК ПервоначальныеСведенияНМАСрезПоследних
	|		ПО Вт_ТаблицаНМА.Организация = ПервоначальныеСведенияНМАСрезПоследних.Организация
	|			И Вт_ТаблицаНМА.НематериальныйАктив = ПервоначальныеСведенияНМАСрезПоследних.НематериальныйАктив";
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Запрос.УстановитьПараметр("Период", Регистратор.Дата);
			ТаблицаПараметров = Запрос.Выполнить().Выгрузить();
			
			Набор = РегистрыСведений.ПервоначальныеСведенияНМА.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ЕстьИзменения = Ложь;
			Для каждого ЗаписьРегистра Из Набор Цикл
				СтрокаПараметров = ТаблицаПараметров.Найти(ЗаписьРегистра.НематериальныйАктив, "НематериальныйАктив");
				Если СтрокаПараметров <> Неопределено Тогда
					ЗаписьРегистра.АмортизационнаяГруппа = СтрокаПараметров.АмортизационнаяГруппа;
					ЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ЕстьИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									ВыборкаПоДокументам.Регистратор.Метаданные(),
									ВыборкаПоДокументам.Регистратор,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбъектыНалоговогоУчетаФА_ПеремещениеНМА_РегистрацияДанных(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ОбъектыНалоговогоУчетаФА";

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПеремещениеНМА2_4.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеНМА2_4 КАК ПеремещениеНМА2_4
	|ГДЕ
	|	ПеремещениеНМА2_4.Проведен
	|	И ПеремещениеНМА2_4.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбъектыНалоговогоУчетаФА_ПеремещениеНМА_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ОбъектыНалоговогоУчетаФА";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапросаОбъектыФА = "ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|
	|	&Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК ФиксированныйАктив,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.Выбыл) КАК СостояниеФиксированногоАктива
	|
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	|		ПО ТаблицаНМА.НематериальныйАктив = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И НЕ ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL
	|	И ОбъектыНалоговогоУчетаФАСрезПоследних.СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|
	|	&ОрганизацияПолучатель КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК ФиксированныйАктив,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету) КАК СостояниеФиксированногоАктива
	|
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыНалоговогоУчетаФА.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация) КАК ОбъектыНалоговогоУчетаФАСрезПоследних
	|		ПО ТаблицаНМА.НематериальныйАктив = ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И НЕ ОбъектыНалоговогоУчетаФАСрезПоследних.ФиксированныйАктив ЕСТЬ NULL
	|	И ОбъектыНалоговогоУчетаФАСрезПоследних.СостояниеФиксированногоАктива = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийФА.ПринятКУчету)";
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапросаОбъектыФА);
			Запрос.УстановитьПараметр("Ссылка", Регистратор);
			Запрос.УстановитьПараметр("Дата", Регистратор.Дата);
			Запрос.УстановитьПараметр("Организация", Регистратор.Организация);
			Запрос.УстановитьПараметр("ОрганизацияПолучатель", Регистратор.ОрганизацияПолучатель);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Набор = РегистрыСведений.ОбъектыНалоговогоУчетаФА.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Очистить();
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли; 
			
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									ВыборкаПоДокументам.Регистратор.Метаданные(),
									ВыборкаПоДокументам.Регистратор,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ФиксированныеАктивыУчитываемыеОтдельно_ПеремещениеНМА_РегистрацияДанных(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно";

	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПеремещениеНМА2_4.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеНМА2_4 КАК ПеремещениеНМА2_4
	|ГДЕ
	|	ПеремещениеНМА2_4.Проведен
	|	И ПеремещениеНМА2_4.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ФиксированныеАктивыУчитываемыеОтдельно_ПеремещениеНМА_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	ТекстЗапросаОбъектыФА = "ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|
	|	&Организация КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК ФиксированныйАктив,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.Выбытие) КАК Событие,
	|	ФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА КАК ВидЛьготыФА
	|
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация) КАК ФиксированныеАктивыУчитываемыеОтдельно
	|		ПО ТаблицаНМА.НематериальныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И НЕ ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL
	|	И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|
	|	&Дата КАК Период,
	|	&Ссылка КАК Регистратор,
	|
	|	&ОрганизацияПолучатель КАК Организация,
	|	ТаблицаНМА.НематериальныйАктив КАК ФиксированныйАктив,
	|
	|	ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету) КАК Событие,
	|	ФиксированныеАктивыУчитываемыеОтдельно.ВидЛьготыФА КАК ВидЛьготыФА
	|
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФиксированныеАктивыУчитываемыеОтдельно.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация) КАК ФиксированныеАктивыУчитываемыеОтдельно
	|		ПО ТаблицаНМА.НематериальныйАктив = ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив
	|
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|	И НЕ ФиксированныеАктивыУчитываемыеОтдельно.ФиксированныйАктив ЕСТЬ NULL
	|	И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияФАУчитываемыхОтдельно.ПринятиеКУчету)";
		
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Запрос = Новый Запрос(ТекстЗапросаОбъектыФА);
			Запрос.УстановитьПараметр("Ссылка", Регистратор);
			Запрос.УстановитьПараметр("Дата", Регистратор.Дата);
			Запрос.УстановитьПараметр("Организация", Регистратор.Организация);
			Запрос.УстановитьПараметр("ОрганизацияПолучатель", Регистратор.ОрганизацияПолучатель);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Набор = РегистрыСведений.ФиксированныеАктивыУчитываемыеОтдельно.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Очистить();
			
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли; 
			
			Набор.Загрузить(Результат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									ВыборкаПоДокументам.Регистратор.Метаданные(),
									ВыборкаПоДокументам.Регистратор,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура СубконтоСтатьДДСПоПлануСчетов_РегистрацияДанных(Параметры) Экспорт

		Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаУчетаДС)";
	
	СчетаУчетаДС = Новый Массив;
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВКассе);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПути);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваВПутиКассы);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваНаТекущихБанковскихСчетах);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваНаСберегательныхСчетах);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваНаКорреспондентскихСчетах);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ДенежныеСредстваОграниченныеВИспользовании);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.УчетЭлектронныхДенежныхСредств);
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДенежныеСредства);
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СубконтоСтатьДДСПоПлануСчетов_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланСчетов.Хозрасчетный";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	МакетОбновленияПС = ПланыСчетов.Хозрасчетный.ПолучитьМакет("ПФ_MXL_ИзменяемыеСчета2019");
	ОбластьИзмененныхСчетов = МакетОбновленияПС.Области.Найти("СписокИзмененныхСчетов");
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Субконто      = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
			НетСтатьиДДС = (Субконто = Неопределено);
			
			Если НетСтатьиДДС Тогда
				НовыйВид = Объект.ВидыСубконто.Добавить();
				
				НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.ТолькоОбороты  = Истина;
				НовыйВид.Суммовой       = Истина;
				НовыйВид.Валютный       = Истина;
				НовыйВид.Количественный = Истина;
				
				ОбъектИзменен = Истина;
			Иначе
				Если НЕ Субконто.ТолькоОбороты Тогда
					Субконто.ТолькоОбороты = Истина;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ПартииПрочихРасходов_ОС_НМА_РегистрацияДанных(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПартииПрочихРасходов";

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК ДанныеРегистра
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	|	И ДанныеРегистра.АналитикаУчетаПартий.ВидЦенности В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
	|	И НЕ ДанныеРегистра.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПартииПрочихРасходов_ОС_НМА_ПолныеДанные_РегистрацияДанных(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПартииПрочихРасходов";

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПартииПрочихРасходов КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.СтатьяРасходов.ВидЦенностиНДС В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
	|	И НЕ ДанныеРегистра.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры


Процедура ПартииПрочихРасходов_ОС_НМА_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПартииПрочихРасходов";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.ПартииПрочихРасходов.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
            
            МетаданныеРегистратора = Регистратор.Метаданные();
            Если НЕ МетаданныеРегистратора.Реквизиты.Найти("ЗакупкаПодДеятельность") = Неопределено 
                И Регистратор.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ОпределяетсяРаспределением Тогда
                НовыйВидДеятельностиНДС = Регистратор.ЗакупкаПодДеятельность;
            Иначе
                НовыйВидДеятельностиНДС = Неопределено;
            КонецЕсли;
            
			ОбъектИзменен = Ложь;
			МассивЗаписейКУдалению = Новый Массив;
			
			Для Каждого ЗаписьРегистра Из Набор Цикл
				Если (ЗаписьРегистра.АналитикаУчетаПартий.ВидЦенности = Перечисления.ВидыЦенностей.ОС 
					ИЛИ ЗаписьРегистра.АналитикаУчетаПартий.ВидЦенности = Перечисления.ВидыЦенностей.НМА
                    ИЛИ ЗаписьРегистра.СтатьяРасходов.ВидЦенностиНДС = Перечисления.ВидыЦенностей.ОС 
					ИЛИ ЗаписьРегистра.СтатьяРасходов.ВидЦенностиНДС = Перечисления.ВидыЦенностей.НМА) Тогда
                    Если НЕ НовыйВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ОпределяетсяРаспределением Тогда
    					МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
                    ИначеЕсли НЕ НовыйВидДеятельностиНДС = ЗаписьРегистра.ВидДеятельностиНДС Тогда 
                        ЗаписьРегистра.ВидДеятельностиНДС = НовыйВидДеятельностиНДС;
                        //заполним аналитику учета партий при ведении партионного учета 2.1
                        СтарыйКлючАналитикиПартий = ЗаписьРегистра.АналитикаУчетаПартий;
                        Если ЗначениеЗаполнено(СтарыйКлючАналитикиПартий.НалогообложениеНДС) И НЕ СтарыйКлючАналитикиПартий.НалогообложениеНДС = НовыйВидДеятельностиНДС Тогда
                            РеквизитыНовойАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			                СтарыйКлючАналитикиПартий,
			                    "ГруппаФинансовогоУчета, Поставщик, Контрагент, СтавкаНДС, ВидЦенности, КодСтроки");
                            РеквизитыНовойАналитики.Вставить("НалогообложениеНДС", НовыйВидДеятельностиНДС);
                            РеквизитыНовойАналитики.Вставить("Дата", Дата(1, 1, 1));
                            НоваяАналитика = Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(РеквизитыНовойАналитики);
                            ЗаписьРегистра.АналитикаУчетаПартий = НоваяАналитика;
                        КонецЕсли;
                        ОбъектИзменен = Истина;
                    КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
				Набор.Удалить(ЗаписьРегистра);
				ОбъектИзменен = Истина;
			КонецЦикла;

			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ЗаданияКЗакрытиюМесяца_РаспределениеНДС_РегистрацияДанных(Параметры) Экспорт
	
	// В УТ пустой обработчик
	
КонецПроцедуры

Процедура ЗаданияКЗакрытиюМесяца_РаспределениеНДС_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ЗаданияКЗакрытиюМесяца";
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

Процедура СтатьиДоходов_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	СтатьиДоходов.ЭтоГруппа = ЛОЖЬ
	|	И СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СтатьиДоходов_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиДоходов";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
				Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

Процедура ЖурналУчетаСчетовФактур_РегистрацияДанных(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ЖурналУчетаСчетовФактур";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ЖурналУчетаСчетовФактур.Регистратор) = ТИП(Документ.СчетФактураВыданный)
	|	И ЖурналУчетаСчетовФактур.Период > &ДатаОбновленияДанных
	|	И НЕ НАЧАЛОПЕРИОДА(ЖурналУчетаСчетовФактур.Период, ДЕНЬ) = ВЫРАЗИТЬ(ЖурналУчетаСчетовФактур.Регистратор КАК Документ.СчетФактураВыданный).ДатаСовершенияОборотаПоРеализации");

	Запрос.УстановитьПараметр("ДатаОбновленияДанных", Дата(2019,01,01));
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЖурналУчетаСчетовФактур_ОбработкаДанных(Параметры) Экспорт
	      
	ПолноеИмяРегистра = "РегистрСведений.ЖурналУчетаСчетовФактур";
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ВыборкаПоДокументам = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Регистратор =  ВыборкаПоДокументам.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.ЖурналУчетаСчетовФактур.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ЕстьИзменения = Ложь;
			Для каждого ЗаписьРегистра Из Набор Цикл
				ЗаписьРегистра.Период = Регистратор.ДатаСовершенияОборотаПоРеализации;
				ЕстьИзменения = Истина;
			КонецЦикла; 
			
			Если ЕстьИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать движения документа: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									ВыборкаПоДокументам.Регистратор.Метаданные(),
									ВыборкаПоДокументам.Регистратор,
									ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбновитьВидыОперацийРасчетаЗарплаты() Экспорт
	
	НачислениеВзносов = Справочники.ВидыОперацийРасчетаЗарплаты.НайтиПоНаименованию("Начисление взносов");
	
	Если НЕ НачислениеВзносов = Неопределено
		И НЕ НачислениеВзносов = Справочники.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка() Тогда
		ОбъектНачислениеВзносов = НачислениеВзносов.ПолучитьОбъект();
		ОбъектНачислениеВзносов.Наименование = "Расчет налогов, взносов, отчислений";
		ОбъектНачислениеВзносов.НалогиВзносыОтчисления = Истина;
		ОбъектНачислениеВзносов.Взносы = Ложь;
		ОбъектНачислениеВзносов.Записать();
	КонецЕсли;
	
	РасчетУдержаний = Справочники.ВидыОперацийРасчетаЗарплаты.НайтиПоНаименованию("Расчет удержаний");
	
	Если НЕ РасчетУдержаний = Неопределено
		И НЕ РасчетУдержаний = Справочники.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка() Тогда
		ОбъектРасчетУдержаний = РасчетУдержаний.ПолучитьОбъект();
		ОбъектРасчетУдержаний.НДФЛ = Ложь;
		ОбъектРасчетУдержаний.Записать();
	КонецЕсли;
	
	РасчетНачислений = Справочники.ВидыОперацийРасчетаЗарплаты.НайтиПоНаименованию("Расчет начислений");
	
	Если НЕ РасчетНачислений = Неопределено
		И НЕ РасчетНачислений = Справочники.ВидыОперацийРасчетаЗарплаты.ПустаяСсылка() Тогда
		ОбъектРасчетНачислений = РасчетУдержаний.ПолучитьОбъект();
		ОбъектРасчетНачислений.НалогиВзносыОтчисления = Истина;
		ОбъектРасчетНачислений.Пособия = Ложь;
		ОбъектРасчетНачислений.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТребуетсяОформлениеСчетаФактуры_ВозвратОтКлиента_РегистрацияДанных(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
    |   ТребуетсяОформлениеСчетаФактуры.Основание КАК Основание,
    |   ТребуетсяОформлениеСчетаФактуры.Организация КАК Организация,
    |   ТребуетсяОформлениеСчетаФактуры.Контрагент КАК Контрагент,
    |   ТребуетсяОформлениеСчетаФактуры.ТипСчетаФактуры КАК ТипСчетаФактуры
    |ИЗ
    |   РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяОформлениеСчетаФактуры
    |ГДЕ
    |   ТИПЗНАЧЕНИЯ(ТребуетсяОформлениеСчетаФактуры.Основание) = ТИП(Документ.ВозвратТоваровОтКлиента)
    |   И ТребуетсяОформлениеСчетаФактуры.ТипСчетаФактуры = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметкиОбработки.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = "РегистрСведений.ТребуетсяОформлениеСчетаФактуры";
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат, ДополнительныеПараметрыОтметкиОбработки);
	
КонецПроцедуры

Процедура ТребуетсяОформлениеСчетаФактуры_ВозвратОтКлиента_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ТребуетсяОформлениеСчетаФактуры";
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура НДСПредъявленный_НМА_РегистрацияДанных(Параметры) Экспорт

	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.НДСПредъявленный";

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)");
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Регистраторы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НДСПредъявленный_НМА_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.НДСПредъявленный";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.НДСПредъявленный;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(Параметры.Очередь, Неопределено, ПолноеИмяРегистра);

	Пока Выборка.Следующий() Цикл
		
		Регистратор = Выборка.Регистратор;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			Блокировка.Заблокировать();
			
			Набор = РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Регистратор);
			Набор.Прочитать();
			
			ОбъектИзменен = Ложь;
			МассивЗаписейКУдалению = Новый Массив;
            МетаданныеРегистратора = Регистратор.Метаданные();
            Если НЕ МетаданныеРегистратора.Реквизиты.Найти("ЗакупкаПодДеятельность") = Неопределено 
                И НЕ Регистратор.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию Тогда
                НовыйВидДеятельностиНДС = Регистратор.ЗакупкаПодДеятельность;
            Иначе
                НовыйВидДеятельностиНДС = Неопределено;
            КонецЕсли;
            
			Для Каждого ЗаписьРегистра Из Набор Цикл
                Если ЗаписьРегистра.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию
                    И НЕ НовыйВидДеятельностиНДС = Неопределено Тогда
					ЗаписьРегистра.ВидДеятельностиНДС = НовыйВидДеятельностиНДС;
                    ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Регистратор);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Регистратор.Метаданные(), ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура СтатьиРасходов_РегистрацияДанных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
    |   СтатьиРасходов.Ссылка КАК Ссылка
    |ИЗ
    |   ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
    |ГДЕ
    |   НЕ СтатьиРасходов.ЭтоГруппа
    |   И (НЕ СтатьиРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ИзДокумента)
    |           ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.ПустаяСсылка))
    |   И НЕ СтатьиРасходов.ПометкаУдаления";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СтатьиРасходов_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если НЕ Объект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента Тогда
				Объект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
				ОбъектИзменен = Истина;
            КонецЕсли;
            
            Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.ПустаяСсылка() Тогда
                Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
                Объект.ВариантРаспределенияРасходовУпр  = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
                Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
                ОбъектИзменен = Истина;
            КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Объект);
			КонецЕсли;
			
		    ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитДатаПодписанияАктВыполненныхРаботКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктВыполненныхРабот.Ссылка
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.ДатаПодписанияГЗ = ДАТАВРЕМЯ(1,1,1) 
    |   ИЛИ АктВыполненныхРабот.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры
    
Процедура ЗаполнитьРеквизитДатаПодписанияАктВыполненныхРабот(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.АктВыполненныхРабот;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(Объект.ДатаПодписанияГЗ) Тогда
                Объект.ДатаПодписанияГЗ = Объект.Дата;
            КонецЕсли;
            
            Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда
                Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
            КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект,,, РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПриобретениеУслугПрочихАктивов,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСпособВыпискиАктовоДоговорамКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры
    
Процедура ЗаполнитьРеквизитСпособВыпискиАктовоДоговорам(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.ДоговорыКонтрагентов";
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.СпособВыпискиАктовВыполненныхРабот) Тогда
				СправочникОбъект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
				ОбъектИзменен = Истина;
			КонецЕсли;
		
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеТребуетсяОформлениеЭАВР(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктВыполненныхРабот.Ссылка КАК Основание
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО АктВыполненныхРабот.Ссылка = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ПО АктВыполненныхРабот.Ссылка = ТребуетсяОформлениеЭАВР.Основание
	|ГДЕ
	|	АктВыполненныхРабот.ПометкаУдаления = ЛОЖЬ
	|	И АктВыполненныхРабот.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)
	|	И ЭлектронныйАктВыполненныхРабот.Ссылка ЕСТЬ NULL
	|	И ТребуетсяОформлениеЭАВР.Основание ЕСТЬ NULL";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ТребуетсяОформлениеЭАВР";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить(), ДополнительныеПараметры);
	
КонецПроцедуры


Процедура ОбработатьДанныеТребуетсяОформлениеЭАВР(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		"РегистрСведений.ТребуетсяОформлениеЭАВР",
		МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                     КАК Основание,
	|	ДанныеДокумента.Контрагент                                 КАК Контрагент,
	|	ДанныеДокумента.Организация                                КАК Организация
	|	
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = СсылкиДляОбработки.Основание
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК АктВыполненныхРаботЗаблокировано
	|	ПО АктВыполненныхРаботЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	АктВыполненныхРаботЗаблокировано.Ссылка ЕСТЬ NULL
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	
	ТаблицыДляЧтения = Новый Массив;
	ТаблицыДляЧтения.Добавить("Документ.АктВыполненныхРабот");
	
	РезультатЗаблокировано = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		ТаблицыДляЧтения,
		МенеджерВременныхТаблиц);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			НаборЗаписей = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Основание.Установить(Выборка.Основание);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось сделать запись в регистре сведений ""Требуется оформление электронного акта выполненных работ"" по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.ТребуетсяОформлениеЭАВР";
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Основание
	|ИЗ
	|	&ВТДляОбработкиСсылка КАК СсылкиДляОбработки
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВТДляОбработкиСсылка", Результат.ИмяВременнойТаблицы);
	ТаблицаОснований = Запрос.Выполнить().Выгрузить();
	Если ТаблицаОснований.Количество() Тогда
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ТаблицаОснований, ДополнительныеПараметры, Параметры.Очередь);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь,
		"РегистрСведений.ТребуетсяОформлениеЭАВР");
	
КонецПроцедуры

Процедура СтатьиРасходовУбытковПрошлыхЛет_РегистрацияДанных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.СписаниеУбытковПрошлыхЛетЗаСчетПрибыли),
	|							 ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.СписаниеУбытковПрошлыхЛетПоИстечениюСрокаДавности))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура СтатьиРасходовУбытковПрошлыхЛет_ОбработкаДанных(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	
	ОбъектыДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ОбъектыДляОбработки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектыДляОбработки.Ссылка);
			
			Блокировка.Заблокировать();
			
			Объект = ОбъектыДляОбработки.Ссылка.ПолучитьОбъект();
			
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбъектыДляОбработки.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Объект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность;
			Если Не ЗначениеЗаполнено(Объект.ТипРасходов) Тогда
				Объект.ТипРасходов = Перечисления.ТипыРасходов.ПрочиеРасходы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.ВариантРаспределенияРасходовУпр) Тогда
				Объект.ВариантРаспределенияРасходовУпр = Объект.ВариантРаспределенияРасходовРегл;
			КонецЕсли;
			Объект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
			Объект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Истина);

			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать %ИмяОбъекта%: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ПолноеИмяОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ОбъектыДляОбработки.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Предупреждение,
										МетаданныеОбъекта,
										ОбъектыДляОбработки.Ссылка,
										ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитСтавкаНДСВКлючахАналитикиУчетаПартийКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПартий.КлючАналитики КАК Ссылка
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ГДЕ
	|	АналитикаУчетаПартий.КлючАналитики.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И НЕ АналитикаУчетаПартий.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И НЕ АналитикаУчетаПартий.КлючАналитики = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитСтавкаНДСВКлючахАналитикиУчетаПартий(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.КлючиАналитикиУчетаПартий";
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	ВыборкаПоСправочнику = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПартий.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ГДЕ
	|	НЕ АналитикаУчетаПартий.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И АналитикаУчетаПартий.КлючАналитики = &Ссылка";
	
	Пока ВыборкаПоСправочнику.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоСправочнику.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = ВыборкаПоСправочнику.Ссылка.ПолучитьОбъект();
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСправочнику.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", ВыборкаПоСправочнику.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.СтавкаНДС) И Выборка.Следующий() Тогда
				СправочникОбъект.СтавкаНДС = Выборка.СтавкаНДС;
				ОбъектИзменен = Истина;
			КонецЕсли;
		
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект, Истина);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаПоСправочнику.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоСправочнику.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДатаПодписанияРеализацияУслугПрочихАктивовКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияУслугПрочихАктивов.Ссылка
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|ГДЕ
	|	РеализацияУслугПрочихАктивов.ДатаПодписанияГЗ = ДАТАВРЕМЯ(1,1,1) 
	|	ИЛИ РеализацияУслугПрочихАктивов.СпособВыпискиАктовВыполненныхРабот = ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитДатаПодписанияРеализацияУслугПрочихАктивов(Параметры) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы.РеализацияУслугПрочихАктивов;
	ПолноеИмяОбъекта = МетаданныеДокумента.ПолноеИмя();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаПодписанияГЗ) Тогда
				Объект.ДатаПодписанияГЗ = Объект.Дата;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособВыпискиАктовВыполненныхРабот) Тогда
				Объект.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект,,, РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ПриобретениеУслугПрочихАктивов,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

Процедура ОбновитьНаименованиеСубъектаПоКлассификатору() Экспорт
	
	НачальноеЗаполнениеИОбновлениеДанных = Истина;
	Классификатор = РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ();
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Параметр.КодСубъектаРФ КАК КодСубъектаРФ
	|ПОМЕСТИТЬ
	|	Классификатор
	|ИЗ
	|	&Классификатор КАК Параметр
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСубъектаРФ
	|;
	|
	|ВЫБРАТЬ
	|	Классификатор.КодСубъектаРФ КАК КодСубъектаРФ
	|ИЗ
	|	Классификатор КАК Классификатор
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ПО
	|	  АдресныеОбъекты.Уровень                    = 1
	|	И АдресныеОбъекты.КодСубъектаРФ              = Классификатор.КодСубъектаРФ
	|	И АдресныеОбъекты.КодОкруга                  = 0
	|	И АдресныеОбъекты.КодРайона                  = 0
	|	И АдресныеОбъекты.КодГорода                  = 0
	|	И АдресныеОбъекты.КодВнутригородскогоРайона  = 0
	|	И АдресныеОбъекты.КодНаселенногоПункта       = 0
	|	И АдресныеОбъекты.КодУлицы                   = 0
	|	И АдресныеОбъекты.КодДополнительногоЭлемента = 0
	|	И АдресныеОбъекты.КодПодчиненногоЭлемента    = 0
	|ГДЕ
	|	АдресныеОбъекты.Идентификатор = &ИдентификаторДляОбновления
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодСубъектаДляОбновления
	|");
	Запрос.УстановитьПараметр("Классификатор", Классификатор);
	
	КодСубъектаДляОбновления = 71;
	СтрокаКлассификатора = Классификатор.Найти(КодСубъектаДляОбновления, "КодСубъектаРФ");
	ИдентификаторСубъекта = Неопределено;
	Если ЗначениеЗаполнено(СтрокаКлассификатора) Тогда
		ИдентификаторСубъекта = СтрокаКлассификатора.Идентификатор;
	КонецЕсли;
	Запрос.УстановитьПараметр("КодСубъектаДляОбновления", КодСубъектаДляОбновления);
	Запрос.УстановитьПараметр("ИдентификаторДляОбновления", ИдентификаторСубъекта);
	НовыеСубъектыРФ = Запрос.Выполнить().Выгрузить();
	
	// Обновляем по данным макета.
	Набор = РегистрыСведений.АдресныеОбъекты.СоздатьНаборЗаписей();
	Отбор = Набор.Отбор.КодСубъектаРФ;
	
	Для Каждого СубъектРФ Из НовыеСубъектыРФ Цикл
		Отбор.Установить(СубъектРФ.КодСубъектаРФ);
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		
		ИсходныеДанные = Классификатор.Найти(СубъектРФ.КодСубъектаРФ, "КодСубъектаРФ");
		ЗаполнитьЗначенияСвойств(Запись, ИсходныеДанные, "Наименование");
		
		Если НачальноеЗаполнениеИОбновлениеДанных Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
		Иначе
			Набор.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
