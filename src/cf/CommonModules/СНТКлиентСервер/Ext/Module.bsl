
#Область ПрограммныйИнтерфейс

// Возвращает номер версии библиотеки СНТ.
//
// Возвращаемое значение:
//  Строка - номер сборки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.0.2.2";
	
КонецФункции

Функция ЭтоОповещениеПодсистемыСНТ(Знач ИмяСобытия) Экспорт
	
	Если ИмяСобытия = СНТКлиентСервер.ИмяСобытияЗаписьСНТ() ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ() Тогда		
		ОповещениеСНТ = Истина;		
	Иначе		
		ОповещениеСНТ = Ложь;		
	КонецЕсли;
	
	Возврат ОповещениеСНТ;
	
КонецФункции

Функция КонтейнерМетодов() Экспорт
	
	Контейнер = Неопределено;	
	ИспользоватьВнешнююОбработку = СНТВызовСервера.ИспользоватьВнешнююОбработку();	
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		// Если база клиент-серверная, то это точно только клиент.
		// Если база файловая, то это может быть как клиент, так и сервер.		
		
		// Если выполняется препроцессоре ТолстыйКлиентОбычноеПриложение, 
		// то код ВнешниеОбработки.Подключить() вызовет ошибку,
		// поэтому внешняя обработка для данного режима подлкючается через файл.
		
		//Если ИспользоватьВнешнююОбработку Тогда
		//	ВнешняяОбработка = СНТСерверПереопределяемый.СоздатьВнешнююОбработкуИзФайла();
		//	Контейнер = ВнешняяОбработка.ПолучитьФорму("КлиентОбычная");
		//Иначе
		//	Контейнер = Обработки.ОбменСНТ.ПолучитьФорму("КлиентОбычная");
		//КонецЕсли;
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = СНТВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.КлиентУправляемая"); 	
		Иначе
			Контейнер = ПолучитьФорму("Обработка.ОбменСНТ.Форма.КлиентУправляемая");
		КонецЕсли;
		
	#Иначе // Сервер ИЛИ ВнешнееСоединение
		
		// Это сервер и только сервер, без разницы управляемое приложение или обычное.
				
		Если ИспользоватьВнешнююОбработку Тогда
			ИмяВнешнейОбработки = СНТВызовСервера.ПодключитьВнешнююОбработку();
			Контейнер = ВнешниеОбработки.Создать(ИмяВнешнейОбработки);
		Иначе
			Контейнер = Обработки.ОбменСНТ.Создать();
		КонецЕсли;	

	#КонецЕсли
	
	Возврат Контейнер;
	
КонецФункции

Функция НоваяКоллекцияПодписейСНТ(Знач КоллекцияSignedContent, Знач ДанныеКлючаЭЦП) Экспорт
	
	Контейнер = СНТКлиентСервер.КонтейнерМетодов();
	
	КоллекцияПодписейСНТ = Новый Соответствие;
	Для Каждого Элемент Из КоллекцияSignedContent Цикл
		Подпись = Контейнер.СоздатьЭЦП(Элемент.Значение, ДанныеКлючаЭЦП.КлючBase64, ДанныеКлючаЭЦП.Пароль);
		КоллекцияПодписейСНТ.Вставить(Элемент.Ключ, Подпись);
	КонецЦикла;
		
	Возврат КоллекцияПодписейСНТ;
	
КонецФункции

Функция ИмяВнешнейОбработкиОбменСНТ() Экспорт
	
	Возврат "ОбменСНТ";
	
КонецФункции

Функция ДействиеОтправка() Экспорт
	Возврат "Отправка";
КонецФункции

Функция ДействиеВыгрузка() Экспорт
	Возврат "Выгрузка";
КонецФункции

Функция ДействиеОтзыв() Экспорт
	Возврат "Отзыв";	
КонецФункции

Функция ДействиеОтклонение() Экспорт	
	Возврат "Отклонение";	
КонецФункции

Функция ДействиеПодтверждение() Экспорт
	Возврат "Подтверждение";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоОбычнаяФорма(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		ОбычнаяФорма = Ложь;	
	Иначе
		ОбычнаяФорма = Истина;	
	КонецЕсли;
	
	Возврат ОбычнаяФорма;
	
КонецФункции

Функция КраткоеПредставлениеСНТ(Знач СсылкаСНТ) Экспорт
	
	СтрокаСНТ = Строка(СсылкаСНТ);
	СтрокаСНТ = СтрЗаменить(СтрокаСНТ, НСтр("ru = 'Сопроводительная накладная на товары'"), НСтр("ru = 'СНТ'"));	
	СтрокаСНТ = СтрЗаменить(СтрокаСНТ, НСтр("ru = ' 0:00:00'"), "");
	Возврат СтрокаСНТ;
	
КонецФункции

Функция ИмяСобытияЗаписьСНТ() Экспорт 
	Возврат "Запись_СНТ";
КонецФункции

Функция ИмяСобытияОтсоединениеСНТ() Экспорт 
	Возврат "ОтсоединениеСНТ";
КонецФункции

Функция ИмяСобытияЗаписьСопоставленияСНТиФНО() Экспорт 
	Возврат "Запись_СопоставлениеСНТиФНО";
КонецФункции

Функция ИмяСобытияСинхронизацияСНТ() Экспорт 
	Возврат "Синхронизация_СНТ";	
КонецФункции

Функция ИмяСобытияЗаписьВСКонтрагента() Экспорт
	Возврат "Запись_ВиртуальныйСкладКонтрагента";
КонецФункции

// Проверяет корректность указанного идентификатора. 
// В качестве идентификатора должна быть указана строка, содержащая только цифры.
//
// Параметры:
//  Идентификатор  - Строка - идентификатор для проверки.
//  ТекстСообщения - Строка - если идентификатор некорректен, то в данный параметр будет помещен текст с причиной некорректности
//
// Возвращаемое значение:
//  Истина       - идентификатор содержит только цифры или пустой;
//  Ложь         - идентификатор содержит не только цифры.
//
Функция ИдентификаторКорректен(Идентификатор, ТекстСообщения = "") Экспорт
	
	Если ТипЗнч(Идентификатор) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		ТекстСообщения = НСтр("ru = 'Идентификатор не указан'");
		Возврат Истина;
	КонецЕсли;
	
	Для а = 1 По СтрДлина(Идентификатор) Цикл
		КодСимвола = КодСимвола(Сред(Идентификатор, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			ТекстСообщения = НСтр("ru = 'Идентификатор ""%Идентификатор%"" содержит нецифровые символы'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Идентификатор%", Идентификатор);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает новый массив строк, созданный на основании параметра ИменаЧерезЗапятую.
//
// Параметры:
//  ИменаЧерезЗапятую - Строка - Имена объектов, переменных, реквизитов и т.д.
//
// Возвращаемое значение:
//  Массив - Массив имен, созданный на основании параметра ИменаЧерезЗапятую.
//
// Пример:
//  // Переменная МассивИмен будет массивом, содержащим три элемента:
//  // "Идентификатор", "РегистрационныйНомер", "УполномоченныйСотрудник".
//  МассивИмен = МассивИмен("Идентификатор, РегистрационныйНомер, УполномоченныйСотрудник")
//
Функция МассивИмен(Знач ИменаЧерезЗапятую) Экспорт
	
	МассивПодстрок = Новый Массив;
	
	// Удалить все пробелы, оставив только запятые.
	Пока Найти(ИменаЧерезЗапятую, " ") <> 0 Цикл
		ИменаЧерезЗапятую = СтрЗаменить(ИменаЧерезЗапятую, " ", "");	
	КонецЦикла;
	
	// Разбить строку и заполнить массив.	
	Позиция = Найти(ИменаЧерезЗапятую, ",");
	Пока Позиция <> 0 Цикл
		МассивПодстрок.Добавить(Лев(ИменаЧерезЗапятую, Позиция - 1));
		ИменаЧерезЗапятую = Сред(ИменаЧерезЗапятую, Позиция + 1);
		Позиция = Найти(ИменаЧерезЗапятую, ",");
	КонецЦикла;	
	Если НЕ ПустаяСтрока(ИменаЧерезЗапятую) Тогда
		МассивПодстрок.Добавить(ИменаЧерезЗапятую);	
	КонецЕсли;
	
	Возврат МассивПодстрок;
	
КонецФункции

// Устанавливает свойство ИмяСвойства элемента формы с именем ИмяЭлемента в значение Значение.
// Применяется в тех случаях, когда элемент формы может не быть на форме из-за отсутствия прав у пользователя
// на объект, реквизит объекта или команду.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяЭлемента - Строка - имя элемента формы
//  ИмяСвойства - Строка - имя устанавливаемого свойства элемента формы
//  Значение - Произвольный - новое значение элемента
// 
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
    
    ЭлементФормы = ЭлементыФормы.Найти(ИмяЭлемента);
    Если ЭлементФормы <> Неопределено Тогда
        ЭлементФормы[ИмяСвойства] = Значение;
    КонецЕсли;
    
КонецПроцедуры

Функция ЦветСостоянияСНТ(Знач СостояниеСНТ) Экспорт
	
	Если СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.Сформирован")
	 ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ОбрабатываетсяСервером") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ПринятСервером")
	      ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ДоставленПолучателю")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ПодтвержденПолучателем")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ПодтвержденОГД")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ПринятОтПоставщика") Тогда
		
		Цвет = ЭСФКлиентСервер.ЦветЗеленый();
		
	ИначеЕсли СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ОтклоненСервером")
	      ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.Отозван")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.Аннулирован")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ОтклоненОГД")
		  ИЛИ СостояниеСНТ = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ОтклоненПолучателем") Тогда
		  
		Цвет = ЭСФКлиентСервер.ЦветКрасный();
		
	Иначе
		
		Цвет = ЭСФКлиентСервер.ЦветСиний();
		
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеЗначенийДляОбмена_с_ИСЭСФ

Функция ТипИСЭСФ(Знач ТипИБ) Экспорт
	
	Если ТипИБ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная") Тогда
		Тип = "PRIMARY_SNT";
		
	ИначеЕсли ТипИБ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
		Тип = "RETURNED_SNT";
		
	ИначеЕсли ТипИБ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная") Тогда
		Тип = "FIXED_SNT";
		
	Иначе
		Тип = "";
		
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

Функция СтатусСНТ_ИБ(Знач СтатусСНТ) Экспорт
	
	ВРегСтатусСНТ = ВРег(СтатусСНТ);
	
	Если ВРегСтатусСНТ = "NOT_VIEWED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.НеПросмотрен");
		
	ИначеЕсли ВРегСтатусСНТ = "DRAFT" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Черновик");
		
	ИначеЕсли ВРегСтатусСНТ = "DELIVERED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Доставленный");
		
	ИначеЕсли ВРегСтатусСНТ = "CREATED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Созданный");
		
	ИначеЕсли ВРегСтатусСНТ = "IMPORTED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Импортированный");
				
	ИначеЕсли ВРегСтатусСНТ = "FAILED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Ошибочный");

	ИначеЕсли ВРегСтатусСНТ = "CONFIRMED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Подтвержден");
		
	ИначеЕсли ВРегСтатусСНТ = "DECLINED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Отклонен");
		
	ИначеЕсли ВРегСтатусСНТ = "CONFIRMED_BY_OGD" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.ПодтвержденИнспекторомОГД");	
		
	ИначеЕсли ВРегСтатусСНТ = "DECLINED_BY_OGD" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.ОтклоненИнспекторомОГД");	
		
	ИначеЕсли ВРегСтатусСНТ = "CANCELED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Аннулирован");

	ИначеЕсли ВРегСтатусСНТ = "REVOKED" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.Отозван");
		
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыСНТ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция СтатусСопоставлениеСНТсФНО_ИБ(Знач СтатусСопСНТсФНО) Экспорт
	
	ВРегСтатусСНТ = ВРег(СтатусСопСНТсФНО);
	
	Если ВРегСтатусСНТ = "DRAFT" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Черновик");
		
	ИначеЕсли ВРегСтатусСНТ = "CREATED" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Созданный");
		
	ИначеЕсли ВРегСтатусСНТ = "PROCESSED" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Обработанный");
		
	ИначеЕсли ВРегСтатусСНТ = "IMPORTED" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Импортированный");
		
	ИначеЕсли ВРегСтатусСНТ = "FAILED" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Ошибочный");
		
	ИначеЕсли ВРегСтатусСНТ = "CANCELED" Тогда
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.Отмененный"); // Закрыт
		
	Иначе
		СтатусСопСНТсФНО = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленийСНТиФНО.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат СтатусСопСНТсФНО;
	
КонецФункции

Функция ВидЭкспортаИБ(Знач ВидЭкспортаИСЭСФ) Экспорт
	
	ВидЭкспортаИБ = Неопределено;
	
	Если ВРЕГ(ВидЭкспортаИСЭСФ) = "EXPORT" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.Экспорт");		
	ИначеЕсли ВРЕГ(ВидЭкспортаИСЭСФ) = "EXPORT_FOR_PROCESSING" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозНаПереработку") ;
	ИначеЕсли ВРЕГ(ВидЭкспортаИСЭСФ) = "TEMPORARY_EXPORT" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВременныйВывоз") ;
	ИначеЕсли ВРЕГ(ВидЭкспортаИСЭСФ) = "EXPORT_OF_TEMPORARY_IMPORTED_PRODUCT" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозВременноВвезенногоТовара");
	ИначеЕсли ВРЕГ(ВидЭкспортаИСЭСФ) = "EXPORT_FROM_SEZ" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ");
	ИначеЕсли ВРЕГ(ВидЭкспортаИСЭСФ) = "AIRCRAFT_REFUELING" Тогда
		ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна");
	Иначе ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидЭкспортаИБ;
	
КонецФункции

Функция ВидЭкспортаИСЭСФ(Знач ВидЭкспортаИБ) Экспорт
	
	ВидЭкспортаИСЭСФ = Неопределено;
	
	Если ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.Экспорт") Тогда
		ВидЭкспортаИСЭСФ = "EXPORT";
	ИначеЕсли ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозНаПереработку") Тогда
		ВидЭкспортаИСЭСФ = "EXPORT_FOR_PROCESSING";
	ИначеЕсли ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВременныйВывоз") Тогда
		ВидЭкспортаИСЭСФ = "TEMPORARY_EXPORT";
	ИначеЕсли ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозВременноВвезенногоТовара") Тогда
		ВидЭкспортаИСЭСФ = "EXPORT_OF_TEMPORARY_IMPORTED_PRODUCT";
	ИначеЕсли ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ") Тогда
		ВидЭкспортаИСЭСФ = "EXPORT_FROM_SEZ";
	ИначеЕсли ВидЭкспортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ЗаправкаВоздушногоСудна") Тогда
		ВидЭкспортаИСЭСФ = "AIRCRAFT_REFUELING";
	КонецЕсли;
	
	Возврат ВидЭкспортаИСЭСФ;
	
КонецФункции

Функция ВидИмпортаИБ(Знач ВидИмпортаИСЭСФ) Экспорт
	
	ВидИмпортаИБ = Неопределено;
	
	Если ВРЕГ(ВидИмпортаИСЭСФ) = "IMPORT" Тогда
		ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт");
	ИначеЕсли ВРЕГ(ВидИмпортаИСЭСФ) = "IMPORT_FOR_PROCESSING" Тогда
		ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозНаПереработку") ;
	ИначеЕсли ВРЕГ(ВидИмпортаИСЭСФ) = "TEMPORARY_IMPORT" Тогда
		ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВременныйВвоз") ;
	ИначеЕсли ВРЕГ(ВидИмпортаИСЭСФ) = "IMPORT_OF_TEMPORARY_EXPORTED_PRODUCT" Тогда
		ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозВременноВывезенногоТовара");
	ИначеЕсли ВРЕГ(ВидИмпортаИСЭСФ) = "IMPORT_IN_SEZ" Тогда
		ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ");
	Иначе ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидИмпортаИБ;
	
КонецФункции

Функция ВидИмпортаИСЭСФ(Знач ВидИмпортаИБ) Экспорт
	
	ВидИмпортаИСЭСФ = "";
	
	Если ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт") Тогда
		ВидИмпортаИСЭСФ = "IMPORT";
	ИначеЕсли ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВременныйВвоз") Тогда
		ВидИмпортаИСЭСФ = "TEMPORARY_IMPORT";
	ИначеЕсли ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозНаПереработку") Тогда
		ВидИмпортаИСЭСФ = "IMPORT_FOR_PROCESSING";
	ИначеЕсли ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозВременноВывезенногоТовара") Тогда
		ВидИмпортаИСЭСФ = "IMPORT_OF_TEMPORARY_EXPORTED_PRODUCT";
	ИначеЕсли ВидИмпортаИБ = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ") Тогда
		ВидИмпортаИСЭСФ = "IMPORT_IN_SEZ";
	КонецЕсли;
	
	Возврат ВидИмпортаИСЭСФ;
	
КонецФункции

Функция ВидПеремещенияИБ(Знач ВидПеремещенияИСЭСФ) Экспорт
	
	ВидПеремещенияИБ = Неопределено;
	
	Если ВРЕГ(ВидПеремещенияИСЭСФ) = "ONE_PERSON_IN_EAEU" Тогда
		ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС");		
	ИначеЕсли ВРЕГ(ВидПеремещенияИСЭСФ) = "ONE_PERSON_IN_KZ" Тогда
		ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаРК");
	//это перемещение товара в третьи страны (не ЕАЭС)
	ИначеЕсли ВРЕГ(ВидПеремещенияИСЭСФ) = "OTHER" Тогда 
		ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ИноеПеремещение");
	Иначе ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ВидПеремещенияИБ;
	
КонецФункции

Функция ВидПеремещенияИСЭСФ(Знач ВидПеремещенияИБ) Экспорт
		
	Если ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаЕАЭС") Тогда
		ВидПеремещенияИСЭСФ = "ONE_PERSON_IN_EAEU";
	ИначеЕсли ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ВПределахОдногоЛицаРК") Тогда
		ВидПеремещенияИСЭСФ = "ONE_PERSON_IN_KZ";
	//это перемещение товара в третьи страны (не ЕАЭС)
	ИначеЕсли ВидПеремещенияИБ = ПредопределенноеЗначение("Перечисление.ВидыПеремещенияСНТ.ИноеПеремещение") Тогда
		ВидПеремещенияИСЭСФ = "OTHER";
	КонецЕсли;
	
	Возврат ВидПеремещенияИСЭСФ; 
	
КонецФункции

Функция ТипИБ(Знач ТипИСЭСФ) Экспорт
	
	ВРегВидИСЭСФ = ВРег(ТипИСЭСФ);
	
	Если ВРегВидИСЭСФ = "PRIMARY_SNT" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная");
		
	ИначеЕсли ВРегВидИСЭСФ = "FIXED_SNT" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Исправленная");
		
	ИначеЕсли ВРегВидИСЭСФ = "RETURNED_SNT" Тогда
		Вид = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров");
		
	Иначе
		Вид = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция ПричинаВыпискиНаБумагеИБ(Знач ПричинаВыпискиИСЭСФ) Экспорт
	
	ПричинаВыпискиИСЭСФ = ВРег(ПричинаВыпискиИСЭСФ);
	
	Если ПричинаВыпискиИСЭСФ = "UNLAWFUL_REMOVAL_REGISTRATION" Тогда
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа");
	ИначеЕсли ПричинаВыпискиИСЭСФ = "DOWN_TIME" Тогда
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы");
	ИначеЕсли ПричинаВыпискиИСЭСФ = "MISSING_REQUIREMENT" Тогда
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке");
	Иначе
		ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ПричинаВыпискиИБ;
	
КонецФункции

Функция ПричинаВыпискиНаБумагеИСЭСФ(Знач ПричинаВыпискиИБ) Экспорт
	
	Если ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа") Тогда
		ПричинаВыпискиИСЭСФ = "UNLAWFUL_REMOVAL_REGISTRATION";
	ИначеЕсли ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы") Тогда
		ПричинаВыпискиИСЭСФ = "DOWN_TIME";
	ИначеЕсли ПричинаВыпискиИБ = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке") Тогда
		ПричинаВыпискиИСЭСФ = "MISSING_REQUIREMENT";
	КонецЕсли;
	
	Возврат ПричинаВыпискиИСЭСФ;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитов

Функция ПустыеПараметрыФормыИзменениеСтатусовСНТ() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "");
	ПараметрыФормы.Вставить("МассивСНТ", Новый Массив);
	ПараметрыФормы.Вставить("ЗапускатьФоновоеЗадание", Ложь);
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ТекстКомментарияСозданПоДаннымСНТ(СсылкаСНТ) Экспорт
	
	КраткоеПредставлениеСНТ = СНТКлиентСервер.КраткоеПредставлениеСНТ(СсылкаСНТ);
	
	ТекстКомментария = НСтр("ru = 'Создан по данным документа ""[СНТ]"".'");
	ТекстКомментария = СтрЗаменить(ТекстКомментария, "[СНТ]", КраткоеПредставлениеСНТ);

	Возврат ТекстКомментария;
	
КонецФункции

#КонецОбласти  