
#Область ЗаполнениеДоговора

// Открывает форму нового, не записанного, элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо заполнить новый элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуНовогоДоговора(Знач ФормаАВР, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", , ФормаАВР); 
	
	ЗаполнитьФормуДоговора(ФормаАВР, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);

	ФормаДоговора.Открыть();
	
КонецПроцедуры

// Открывает форму существующего элемента справочника "ДоговорыКонтрагентов".
// Элемент должен быть заполнен по данным параметра ФормаЭСФ.
// В качестве владельца открываемой формы должен быть указан параметр ФормаЭСФ.
//
// Параметры:
//  ФормаЭСФ - УправляемаяФорма - Форма по которой необходимо перезаполнить существующий элемент.
//   Таблица ИмяТаблицыКонтрагентов обязательно содержит хотя бы одну строку.
//   Все поля в колонке ИмяРеквизитаКонтрагента обязательно заполнены.
//  ИмяТаблицыКонтрагентов - Стркоа - Имя таблицы, в которой содержатся контрагенты для создания догвора.
//  ИмяРеквизитаКонтрагента - Стркоа - Имя реквизита, в которой содержатся ссылка на контрагента.
//
Процедура ОткрытьЗаполненнуюФормуСтарогоДоговора(Знач ФормаЭСФ, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ФормаЭСФ.Объект.Договор);
	ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ФормаЭСФ); 
	
	ЗаполнитьФормуДоговора(ФормаЭСФ, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры);
		
	ФормаДоговора.Открыть();
	ФормаДоговора.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьФормуДоговора(Знач ФормаАВР, Знач ИмяТаблицыКонтрагентов, Знач ИмяРеквизитаКонтрагента, ФормаДоговора, ДополнительныеПараметры = Неопределено)
	
	Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаДоговора), ФормаДоговора, ФормаДоговора.Объект);

	Объект.Наименование = АВРКлиентСервер.НаименованиеДоговора(ФормаАВР.Объект);
	Объект.НаименованиеДляПечати = Объект.Наименование;
	Объект.Контрагент = ФормаАВР.Объект[ИмяТаблицыКонтрагентов][0][ИмяРеквизитаКонтрагента];
	Объект.Партнер = ЭСФВызовСервера.ПолучитьЗначениеРеквизита(Объект.Контрагент, "Партнер");
	Объект.ВалютаВзаиморасчетов = ФормаАВР.Объект.Валюта;
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокРасчетов) Тогда
		Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		Объект.ПорядокОплаты = ПредопределенноеЗначение("Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях");
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует");
	
	ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ФормаАВР.Объект.Ссылка);
	Объект.Комментарий = ТекстКомментария;
	
	Объект.Организация = ФормаАВР.Объект.Организация;
	
	Если ФормаАВР.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПоставщиком");
	Иначе
		Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем");
	КонецЕсли;
	
	Объект.Номер = ФормаАВР.Объект.НомерДоговора;
	Объект.Дата = ФормаАВР.Объект.ДатаДоговора;

	//++ НЕ ЭСФ
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПоверенныйОператор") Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПоверенныйОператор) Тогда
			Объект.ПоверенныйОператор = ДополнительныеПараметры.ПоверенныйОператор;
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ЭСФ
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЭАВР

// Событие "Начало выбора" поля Услуга ТЧ "Услуги" документа ЭАВР
//
// Параметры:
//  ПараметрыФормы - Структура - параметры открытия формы.
//  Элемент - Элемент формы ЭАВР.
//
Процедура УслугаАВРНачалоВыбора(ПараметрыФормы, Элемент) Экспорт
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Заполняет параметры выбора элемента Поставщик/Получатель при выборе структурного подразделения
//
// Параметры:
//  ВыбранноеЗначение - ВыбранноеЗначение элемента формы.
//  Элемент - Элемент формы ЭАВР.
//
Функция ЗаполнитьПараметрыВыбораПоставщикаПолучателяДляСП(ВыбранноеЗначение, Элемент) Экспорт
	
	//Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") И НЕ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты")
	//	Тогда
	//	
	//	МассивПараметровВыбора = Новый Массив;
	//	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	//	
	//	Возврат Истина;
	//	
	//КонецЕсли;
	//
	Возврат Истина;
	
КонецФункции

// Открывает форму новой, не записанной, услуги,
//  заполненного данными из СтрокаУслуги.
// Форма должна открываться в модальном режиме или в режиме блокирования окна владельца,
//  так как в форме АВР может быть изменена текущая строка таблицы "Услуги".
// В качестве владельца формы должно быть указано значение параметра ФормаАВР.
//
// Параметры:
//  ФормаАВР - УправляемаяФорма - Форма по которой необходимо создать услугу.
//  СтрокаУслуги - ДанныеФормыЭлементКоллекции - Строка таблицы услуги,
//   по данным которой необходимо создать новую услугу.
//
Процедура ОткрытьЗаполненнуюФормуНовойУслуги(Знач ФормаАВР, Знач СтрокаУслуги) Экспорт
	
	//ФормаУслуги = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", , ФормаАВР);
	//Объект = ФормаУслуги.Объект;
	//
	//Объект.Наименование = СтрокаУслуги.УслугаНаименование;
	//Объект.БазоваяЕдиницаИзмерения = СтрокаУслуги.ЕдиницаИзмерения;
	//Объект.Комментарий = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(Объект.Ссылка);;
	//Объект.НаименованиеПолное = СтрокаУслуги.УслугаНаименование;
	//Объект.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
	//Объект.Услуга = Истина;
	//
	//ФормаУслуги.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	//ФормаУслуги.Открыть();
	
	//+
	//ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(ФормаЭСФ.Объект.Ссылка);
	
	ФормаТовара = ПолучитьФорму("Справочник.Номенклатура.ФормаОбъекта", , ФормаАВР);
	Объект = ?(ЭСФКлиентСервер.ЭтоОбычнаяФорма(ФормаТовара), ФормаТовара, ФормаТовара.Объект);
	
	Объект.Наименование = СтрокаУслуги.УслугаНаименование;
	Объект.ЕдиницаИзмерения = СтрокаУслуги.ЕдиницаИзмерения;
	//Объект.Описание = ТекстКомментария;
	Объект.НаименованиеПолное = СтрокаУслуги.УслугаНаименование;
	Объект.СтавкаНДС = СтрокаУслуги.СтавкаНДС;
	Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга");
	//Объект.КодТНВЭД = ЭСФВызовСервера.ПолучитьКодТНВЭДВызовСервера(СтрокаТовары.КодТНВЭД);
		
	ФормаТовара.Открыть();

	//-
КонецПроцедуры

#КонецОбласти

