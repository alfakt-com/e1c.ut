#Область ОбщегоНазначенияКлиент

Функция ОбщегоНазначенияКлиент_СкопироватьСтруктуру(СтруктураИсточник, ФиксироватьДанные) Экспорт 
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураИсточник Цикл
		СтруктураРезультат.Вставить(КлючИЗначение.Ключ, 
			ОбщегоНазначенияКлиент_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СтруктураИсточник) = Тип("ФиксированнаяСтруктура") Тогда 
		Возврат Новый ФиксированнаяСтруктура(СтруктураРезультат);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ОбщегоНазначенияКлиент_СкопироватьСоответствие(СоответствиеИсточник, ФиксироватьДанные) Экспорт 
	
	СоответствиеРезультат = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеИсточник Цикл
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, 
			ОбщегоНазначенияКлиент_СкопироватьРекурсивно(КлючИЗначение.Значение, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(СоответствиеИсточник) = Тип("ФиксированноеСоответствие") Тогда 
		Возврат Новый ФиксированноеСоответствие(СоответствиеРезультат);
	КонецЕсли;
	
	Возврат СоответствиеРезультат;
	
КонецФункции

Функция ОбщегоНазначенияКлиент_СкопироватьМассив(МассивИсточник, ФиксироватьДанные) Экспорт 
	
	МассивРезультат = Новый Массив;
	
	Для Каждого Элемент Из МассивИсточник Цикл
		МассивРезультат.Добавить(ОбщегоНазначенияКлиент_СкопироватьРекурсивно(Элемент, ФиксироватьДанные));
	КонецЦикла;
	
	Если ФиксироватьДанные = Истина 
		Или ФиксироватьДанные = Неопределено
		И ТипЗнч(МассивИсточник) = Тип("ФиксированныйМассив") Тогда 
		Возврат Новый ФиксированныйМассив(МассивРезультат);
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция ОбщегоНазначенияКлиент_СкопироватьРекурсивно(Источник, ФиксироватьДанные = Неопределено) Экспорт
	
	Перем Приемник;
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("Структура")
		Или ТипИсточника = Тип("ФиксированнаяСтруктура") Тогда
		Приемник = ОбщегоНазначенияКлиент_СкопироватьСтруктуру(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Соответствие")
		Или ТипИсточника = Тип("ФиксированноеСоответствие") Тогда
		Приемник = ОбщегоНазначенияКлиент_СкопироватьСоответствие(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("Массив")
		Или ТипИсточника = Тип("ФиксированныйМассив") Тогда
		Приемник = ОбщегоНазначенияКлиент_СкопироватьМассив(Источник, ФиксироватьДанные);
	ИначеЕсли ТипИсточника = Тип("СписокЗначений") Тогда
		Приемник = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(Источник, ФиксироватьДанные);
	Иначе
		Приемник = Источник;
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область МенеджерОборудованияУТКлиент

Функция МенеджерОборудованияУТКлиент_ЕстьНеобработанноеСобытие() Экспорт
	
	Возврат (глПодключаемоеОборудованиеСобытиеОбработано = Ложь);
	
КонецФункции

#КонецОбласти

#Область СобытияФормКлиент

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура СобытияФормКлиент_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормКлиентЛокализация_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении".
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормКлиент_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	СобытияФормКлиентЛокализация_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормКлиентЛокализация

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормКлиентЛокализация_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	СобытияФормИСКлиент_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура СобытияФормКлиентЛокализация_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСКлиент

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура СобытияФормИСКлиент_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			СобытияФормИСМПКлиент_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СобытияФормИСКлиент_СообщитьОбОшибке(РезультатВыполнения) Экспорт
	
	ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".';
							|en = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//   Ограничения: не предполагает контекстный серверный вызов
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСКлиент_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			СобытияФормИСМПКлиент_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при сканировании штрихкода в форме объекта.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая при завершении обработки,
//  Форма - УправляемаяФорма - форма, в которой отсканирован штрихкод,
//  Источник - Строка - источник внешнего события,
//  Событие - Строка - наименование события,
//  Данные - Строка - данные для события,
//  ПараметрыСканирования - Структура - параметры сканирования акцизных марок.
//
Процедура СобытияФормИСКлиент_ВнешнееСобытиеПолученыШтрихкоды(ОповещениеПриЗавершении, Форма, Источник, Событие, Данные, ПараметрыСканирования = Неопределено) Экспорт
	
	Если Не Форма.ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия);
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,"ОбщийМодуль.СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды");
		
		ДанныеШтрихкода = СобытияФормИСКлиент_ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		ШтрихкодированиеИСКлиент_ОбработатьДанныеШтрихкода(
			ОповещениеПриЗавершении, Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Параметр - Массив - входящие данные.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//   * Штрихкод
//   * Количество
Функция СобытияФормИСКлиент_ПреобразоватьДанныеСоСканераВСтруктуру(Параметр) Экспорт
	
	Результат = Новый Структура("Штрихкод,Количество");
	СобытияФормИСКлиентПереопределяемый_ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр);
	Возврат Результат;
	
КонецФункции

Процедура СобытияФормИСКлиент_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		СобытияФормИСКлиентПереопределяемый_ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма	- УправляемаяФорма - форма, в которой расположена команда
//  Команда	- КомандаФормы - команда формы
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура СобытияФормИСКлиент_ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		
		Если СтрНачинаетсяС(Команда.Имя, "ПодобратьИПроверитьПродукциюГосИС")
			Или СтрНачинаетсяС(Команда.Имя, "ВозобновитьПроверкуПродукцииГосИС") Тогда
			
			ИндексВидаПродукции     = Число(Сред(Команда.Имя, СтрНайти(Команда.Имя, "ГосИС")+5));
			ВидМаркируемойПродукции = ИнтеграцияИСКлиент_ИндексВидаПродукцииИС(ИндексВидаПродукции);
			
			Если СтрНачинаетсяС(Команда.Имя, "ПодобратьИПроверитьПродукциюГосИС") Тогда
				ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(Форма, ВидМаркируемойПродукции);
			Иначе
				ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(Форма, ВидМаркируемойПродукции);
			КонецЕсли;
			
		КонецЕсли;
	
		СобытияФормИСКлиентПереопределяемый_ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры);
		
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
			СобытияФормИСМПКлиент_ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСМПКлиент

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура СобытияФормИСМПКлиент_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСМПКлиент_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура СобытияФормИСМПКлиент_ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Если СтрНачинаетсяС(Команда.Имя, "ПроверитьАкцизныеМаркиГосИС") Тогда
		
		ВидПродукцииПоИндексу = ИнтеграцияИСКлиент_ИндексВидаПродукцииИС(Число(СтрЗаменить(Команда.Имя,"ПроверитьАкцизныеМаркиГосИС","")));
		ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(Форма, ВидПродукцииПоИндексу);
		
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый_ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормИСМПКлиентПереопределяемый

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт

	Возврат;
	
КонецПроцедуры

// Клиентская переопределяемая процедура, вызываемая из обработчика события элемента.
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Строка           - имя элемента-источника события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении подобранного количества в строке таблицы формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииКоличества(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия") Тогда
		ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
	
		Если Не ПустаяСтрока(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			
			Склад = ИсточникЗначенийВФорме[ПараметрыУказанияСерий.ИмяПоляСклад];
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
				Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
				
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
		ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
	
		Склад = Неопределено;
		Если Не ПустаяСтрока(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
			Склад = ИсточникЗначенийВФорме[ПараметрыУказанияСерий.ИмяПоляСклад];
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Артикул") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СтавкаНДС") Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   Новый Структура("НалогообложениеНДС, Дата", 
			ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС")));
	КонецЕсли;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "СуммаСНДС") Тогда
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Сумма") Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КодТНВЭД") Тогда
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при создании номенклатуры из формы МОТП. Требуется определить и открыть форму (диалога) создания номенклатуры.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - Форма владелец.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится создание.
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриСозданииНоменклатуры(Владелец, ДанныеСтроки, СтандартнаяОбработка, ВидПродукцииИС) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		ПараметрыФормы.Вставить("ОсобенностьУчета",  ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
		ПараметрыФормы.Вставить("ТабачнаяПродукция", Истина);
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ПредставлениеНоменклатуры") Тогда
		ПараметрыФормы.Вставить("Наименование", ДанныеСтроки.ПредставлениеНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Владелец);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при начале выбора номенклатуры. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - Форма владелец.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ВидыПродукцииИС - Массив Из Перечисления.ВидыПродукцийИСМП - Виды продукции.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриНачалеВыбораНоменклатуры(Владелец, ДанныеСтроки, СтандартнаяОбработка, ВидыПродукцииИС, Описание=Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	ОсобенностиУчета = Новый Массив;
	
	Если ШтрихкодированиеИСКлиент_ПрисутствуетТабачнаяПродукция(ВидыПродукцииИС) Тогда
		ОсобенностиУчета.Добавить(
			ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция"));
	КонецЕсли;
		
	Если ОсобенностиУчета.Количество() > 0 Тогда
		ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностиУчета);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыФормы.Вставить("Отбор",                ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Владелец,,,, Описание);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип..Номенклатура - Результат выбора.
//  ИсточникВыбора          - УправляемаяФорма - Форма, в которой произведен выбор.
Процедура СобытияФормИСМПКлиентПереопределяемый_ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ГОСИС
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняется при создании характеристики из формы МОТП. Требуется пепеопределить и открыть форму (диалога)
// создания характеристики при необходимости.
//
// Параметры:
//  Владелец             - УправляемаяФорма            - Форма владелец.
//  ДанныеСтроки         - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится создание.
//  Элемент              - ПолеВвода                   - элемент в котором создается характеристика.
//  СтандартнаяОбработка - Булево                      - Признак стандартной обработки.
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриСозданииХарактеристики(Владелец, ДанныеСтроки, Элемент, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - УправляемаяФорма            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	
	ПараметрыХарактеристики = Новый Структура;
	ПараметрыХарактеристики.Вставить("Номенклатура", ДанныеСтроки[ИмяКолонкиНоменклатура]);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, Владелец,,,, Описание);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора характеристики.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.ХарактеристикаНоменклатуры - результат выбора.
//  ИсточникВыбора          - УправляемаяФорма - Форма, в которой произведен выбор.
Процедура СобытияФормИСМПКлиентПереопределяемый_ОбработкаВыбораХарактеристики(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	//++ НЕ ГОСИС
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.ХарактеристикиНоменклатуры") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура СобытияФормИСМПКлиентПереопределяемый_ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - УправляемаяФорма - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - УправляемаяФорма - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - (См. ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий).
Процедура СобытияФормИСМПКлиентПереопределяемый_ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий) Экспорт
	
	//++ НЕ ГОСИС
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура СобытияФормИСМПКлиентПереопределяемый_ВыполнитьПереопределяемуюКоманду(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры
#КонецОбласти

#Область СобытияФормИСКлиентПереопределяемый

// В процедуре нужно реализовать алгоритм преобразования данных из подсистемы подключаемого оборудования.
//
// Параметры:
//  Результат - Структура - со свойствами Штрихкод, Количество
//  Параметр  - Массив    - входящие данные.
Процедура СобытияФормИСКлиентПереопределяемый_ПреобразоватьДанныеСоСканераВСтруктуру(Результат, Параметр) Экспорт
	
	//++ НЕ ГОСИС
	Результат = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура СобытияФормИСКлиентПереопределяемый_ПриПолученииДанныхИзТСД(ОписаниеОповещения, Форма, РезультатВыполнения) Экспорт
	
	//++ НЕ ГОСИС
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		СобытияФормИСКлиент_СообщитьОбОшибке(РезультатВыполнения);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Обработчики БГосИС элементов прикладных форм
//   Ограничения: не предполагает контекстный серверный вызов
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - ЭлементФормы     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура СобытияФормИСКлиентПереопределяемый_ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		Если Элемент = "ТоварыПоискПоШтрихкоду" Тогда
			
			Если Форма.ИспользоватьАкцизныеМарки Тогда
				
				ШтрихкодированиеИСКлиент_ОбработатьВводШтрихкода(
					Форма,
					ДополнительныеПараметры.ДанныеШтрихкода,
					ДополнительныеПараметры.КэшированныеЗначения);
				ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
			
			КонецЕсли;
			
		ИначеЕсли Элемент = "ПроверитьКоличествоВДокументе" Тогда
			
			Если Форма.ИспользоватьАкцизныеМарки Тогда
				Для Каждого СтрокаТЧ Из Форма.Объект.Товары Цикл
					Если ПустаяСтрока(СтрокаТЧ.ИдентификаторСтроки) И СтрокаТЧ.МаркируемаяПродукция = 1 Тогда
						СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДополнительныеПараметры.Вставить("ИспользоватьАкцизныеМарки", Форма.ИспользоватьАкцизныеМарки);
			ДополнительныеПараметры.Вставить("ОрганизацияЕГАИС",          Форма.Объект.ОрганизацияЕГАИС);
			
		ИначеЕсли Элемент = "Товары" Тогда
			
			Если ДополнительныеПараметры.Свойство("ПередУдалением") Тогда
				Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Ложь;
				Для Каждого СтрокаТовары Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
					Если Форма.Элементы.Товары.ДанныеСтроки(СтрокаТовары).МаркируемаяПродукция Тогда
						Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок = Истина;
					КонецЕсли;
				КонецЦикла;
				Возврат;
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ПослеУдаления") Тогда
				ДополнительныеПараметры.ТребуетсяСерверныйВызов = Форма.ТребуетсяПересчетМарокПослеУдаленияСтрок
					И Форма.Объект.АкцизныеМарки.Количество();
				Возврат;
			КонецЕсли;
			
			ТекущаяСтрока = Форма.Элементы.Товары.ТекущиеДанные;
			Если (ТекущаяСтрока = Неопределено) Тогда
				Возврат;
			КонецЕсли;
			
			НужноПересчитатьКеш = ПроверкаИПодборПродукцииИСКлиент_ПрименитьКешПоСтроке(
				Форма, Форма.Объект.Товары, ТекущаяСтрока, Форма.ТоварыКешТекущейСтроки);
			
			Если НужноПересчитатьКеш Тогда
				ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Обработчики событий обрабатываемых БГосИС в прикладных формах
//
// Параметры:
//  Форма                   - УправляемаяФорма - оповещаемая форма,
//  ИмяСобытия              - Строка           - имя события,
//  Параметр                - Произвольный     - параметр сообщения. Могут быть переданы любые необходимые данные,
//  Источник                - Произвольный     - источник события.
//  ДополнительныеПараметры - Структура        - дополнительные параметры обработки
Процедура СобытияФормИСКлиентПереопределяемый_ОбработкаОповещенияИС(Форма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "ОбщаяФорма.ПроверкаЗаполненияДокументов"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
			
		Если Источник = "ПодключаемоеОборудование" И Форма.ВводДоступен() Тогда
			Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
				Если Форма.ИспользоватьАкцизныеМарки Тогда
					
					ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
					МенеджерОборудованияКлиентПереопределяемый.ОбработатьСобытие();
					ДанныеШтрихкода = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма);
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, ДанныеШтрихкода);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяСобытия, "ЗакрытиеФормыПроверкиИПодбораГосИС") Тогда
		Если ДополнительныеПараметры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если Источник = Форма.УникальныйИдентификатор Тогда
			ДополнительныеПараметры.СтандартнаяОбработка = Ложь;
			ДополнительныеПараметры.ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Выполняет переопределяемую команду
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой расположена команда
//  Команда                 - КомандаФормы     - команда формы
//  ДополнительныеПараметры - Структура        - дополнительные параметры.
//
Процедура СобытияФормИСКлиентПереопределяемый_ВыполнитьПереопределяемуюКомандуИС(Форма, Команда, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
	
		Если Форма.Объект.Товары.Количество() Тогда
			ДобавленныеВидыПродукции = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ИнтеграцияИСВызовСервераУТ_ВидыПродукцииВТоварах(Форма.Объект.Товары);
		Иначе
			ДобавленныеВидыПродукции = Новый Массив;
		КонецЕсли;
		
		АлкогольнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
		ТабачнаяПродукция    = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная");
		ОбувнаяПродукция     = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная");
		
		Если ДобавленныеВидыПродукции.Количество() = 0 Тогда
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
				ДобавленныеВидыПродукции.Добавить(АлкогольнаяПродукция);
			КонецЕсли;
			Если Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП")<>Неопределено Тогда
				Для Каждого ВидПродукции Из Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП").ВидыПродукции Цикл
					ДобавленныеВидыПродукции.Добавить(ВидПродукции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленныеВидыПродукции.Количество() = 1 Тогда
			
			Если ДобавленныеВидыПродукции.Найти(АлкогольнаяПродукция) <> Неопределено Тогда
				Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиЕГАИС");
			ИначеЕсли ДобавленныеВидыПродукции.Найти(ТабачнаяПродукция) <> Неопределено Тогда
				Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиГосИС1");
			ИначеЕсли ДобавленныеВидыПродукции.Найти(ОбувнаяПродукция) <> Неопределено Тогда
				Команда = Новый Структура("Имя", "ПроверитьАкцизныеМаркиГосИС2");
			КонецЕсли;
			
		Иначе
			
			Команда = Новый Структура("Имя", "");
			
			Если ДобавленныеВидыПродукции.Количество() Тогда
				
				СписокВыбора = Новый СписокЗначений;
				Если ДобавленныеВидыПродукции.Найти(АлкогольнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(АлкогольнаяПродукция, НСтр("ru = 'Алкогольная продукция';
																	|en = 'Алкогольная продукция'"));
				КонецЕсли;
				Если ДобавленныеВидыПродукции.Найти(ТабачнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(ТабачнаяПродукция, НСтр("ru = 'Табачная продукция';
																	|en = 'Табачная продукция'"));
				КонецЕсли;
				Если ДобавленныеВидыПродукции.Найти(ОбувнаяПродукция) <> Неопределено Тогда
					СписокВыбора.Добавить(ОбувнаяПродукция, НСтр("ru = 'Обувь';
																|en = 'Обувь'"));
				КонецЕсли;
				
				ПараметрыФормы = Новый Структура("СписокВыбора", СписокВыбора);
				
				ДополнительныеПараметры = Новый Структура("Форма", Форма);
				ОповещениеОВыборе = Новый ОписаниеОповещения("ИнтеграцияИСУТКлиент_ОбработатьВыборФормыСканирования", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("ОбщаяФорма.ФормаВыбораВидовПродукцииГосИС",
					ПараметрыФормы,
					Форма,,,,
					ОповещениеОВыборе,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПользователиКлиент

// См. Пользователи.АвторизованныйПользователь.
Функция ПользователиКлиент_АвторизованныйПользователь() Экспорт
	
	Возврат СтандартныеПодсистемыКлиент.ПараметрКлиента("АвторизованныйПользователь");
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСМПКлиент

// Возвращает пользовательское представление заголовка формы загрузки кодов маркировки
//
// Параметры:
//   Владелец         - УправляемаяФорма - источник вызова.
//   ДоступнаИерархия - Булево           - режим иерархической загрузки (из форм проверки и подбора).
//
// Возвращаемое значение:
//   Строка - заголовок
//
Функция ИнтеграцияИСМПКлиент_ЗаголовокФормыЗагрузкиКодовМаркировки(Владелец, ДоступнаИерархия = Ложь) Экспорт
	
	ВозвращаемоеЗначение = НСтр("ru = 'Загрузка кодов маркировки';
								|en = 'Загрузка кодов маркировки'");
	Если Не ДоступнаИерархия И ЗначениеЗаполнено(Владелец.Объект.Ссылка) Тогда
		ВозвращаемоеЗначение = СтрШаблон(НСтр("ru = 'Загрузка кодов маркировки в %1';
												|en = 'Загрузка кодов маркировки в %1'"), Владелец.Объект.Ссылка);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСКлиент 

// Открывает форму загрузки кодов маркировки из таблицы.
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма источник события.
// 	ДоступнаИерархия - Булево - Признак доступности иерархии.
// 	Заголовок - Строка - Заголовок открываемой формы.
//
Процедура ИнтеграцияИСКлиент_ОткрытьФормуЗагрузкиКодовМаркировки(Форма, ДоступнаИерархия, Заголовок) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает признак того, что владелец формы является формой загрузки кодов маркировки.
// 
// Параметры:
// 	Форма - УправляемаяФомра - форма-источник события.
// 	Владелец - УправляемаяФорма - владелец формы для проверки.
// Возвращаемое значение:
// 	Булево - Признак формы загрузки кодов маркировки.
//
Функция ИнтеграцияИСКлиент_ЭтоЗагрузкаКодовМаркировки(Форма, Владелец) Экспорт
	
	Возврат ТипЗнч(Форма) = Тип("УправляемаяФорма")
		И Форма.ИмяФормы = "ОбщаяФорма.ЗагрузкаКодовМаркировкиИС"
		И Форма.ВладелецФормы = Владелец;
	
КонецФункции

Процедура ИнтеграцияИСКлиент_ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки) Экспорт
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции" Тогда
		
		Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
		Форма.ДанныеВыбораПоМаркируемойПродукции  = Неопределено;
		ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
		Форма.Модифицированность = Истина;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНоменклатуру" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Номенклатура);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьХарактеристику" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Характеристика);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСерию" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.Серия);

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьШаблонЭтикетки" Тогда
		
		ПоказатьЗначение(, Форма.ДанныеВыбораПоМаркируемойПродукции.ШаблонЭтикетки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтеграцияИСКлиент_ОткрытьПодборСерий(Форма, ПараметрыУказанияСерий = "", Текст, СтандартнаяОбработка, ТекущиеДанные = Неопределено) Экспорт
	
	ПодборНеВыполнен = Ложь;

	ИнтеграцияИСКлиентПереопределяемый_ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
		ПодборНеВыполнен,
		Форма,
		?(ПараметрыУказанияСерий = "",Форма.ПараметрыУказанияСерий, ПараметрыУказанияСерий),
		Текст,
		ТекущиеДанные,
		СтандартнаяОбработка);
	
	Если ПодборНеВыполнен Тогда
		
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.';
			|en = 'Ошибка при попытке указать серии - 
			| в этом документе для указания серий нужен контекстный серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура ИнтеграцияИСКлиент_СкопироватьШтрихКодВБуферОбмена(ЭлементФормы, Знач Штрихкод) Экспорт
	
	Попытка
		HTMLДокумент = ЭлементФормы.document;
		ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
		АктивныйЭлемент = HTMLДокумент.activeElement;
		ВременноеПолеВвода.value = Штрихкод;
		HTMLДокумент.body.appendChild(ВременноеПолеВвода);
		ВременноеПолеВвода.select();
		HTMLДокумент.execCommand("copy");
		HTMLДокумент.body.removeChild(ВременноеПолеВвода);
		АктивныйЭлемент.focus();
		
		ТекстСообщения = НСтр("ru = 'Штрихкод скопирован в буфер обмена.';
								|en = 'Штрихкод скопирован в буфер обмена.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.УспешнаяПроверкаНаличияЕГАИС);
	Исключение
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Штрихкод);
	КонецПопытки;

КонецПроцедуры

// Возвращает индекси вида продукции по переданному параметру и наоборот, а именно:
//  - Алкогольная - 0.
//  - Табачная - 1.
//  - Обувная - 2.
// 
// Параметры:
// 	ВидПродукцииИлиИндекс - Число, Перечисление.ВидыПродукцииИС - Параметр расчета индекса или значения по индексу.
// Возвращаемое значение:
// 	Число, ПеречислениеСсылка.ВидыПродукцииИС - Индекс или значение по индексу.
//
Функция ИнтеграцияИСКлиент_ИндексВидаПродукцииИС(ВидПродукцииИлиИндекс) Экспорт
	
	Если ВидПродукцииИлиИндекс = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	ИначеЕсли ВидПродукцииИлиИндекс = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная");
	ИначеЕсли ВидПродукцииИлиИндекс = 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная");
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Возврат 0;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		Возврат 1;
	ИначеЕсли ВидПродукцииИлиИндекс = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувная") Тогда
		Возврат 2;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияИСУТКлиент

Процедура ИнтеграцияИСУТКлиент_ОбработатьВыборФормыСканирования(Выбор, ДополнительныеПараметры) Экспорт
	
	Если Выбор <> Неопределено Тогда
		
		ВыбранныйВидПродукции = Выбор.Значение;
		Если НЕ ВыбранныйВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
			ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ДополнительныеПараметры.Форма, ВыбранныйВидПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИСКлиентПереопределяемый

// процедура проверяет необходимость указания серий в строке, если возможно, открывает форму указания,
//  если форма указания не требует контекстного вызова сервера.
//
// Параметры:
//  Нужен                  - Булево              - (исходящий) признак необходимости контекстного вызова сервера;
//  Форма                  - УправляемаяФорма    - форма документа, в которой инициировано указание серий;
//  ПараметрыУказанияСерий - Произвольный        - параметры указания серий строки;
//  Текст                  - Строка              - текст, введенный в поле ввода (параметр событий ОкончаниеВводаТекста 
//                                                 и АвтоПодборВводаТекста).
//  ТекущиеДанные          - Структура, ДанныеФормыЭлементКоллекции - данные строки, в которой указывается серия,
//                         - Неопределено        - текущие данные табличного поля с именем ПараметрыУказанияСерий.ИмяТЧТовары;
//  СтандартнаяОбработка   - Булево              - открытие формы выбора серий по умолчанию.
//
Процедура ИнтеграцияИСКлиентПереопределяемый_ЗаполнитьДляУказанияСерийНуженСерверныйВызов(
	Нужен, Форма, ПараметрыУказанияСерий, Текст, ТекущиеДанные, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	Нужен = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(Форма, ПараметрыУказанияСерий, Текст, ТекущиеДанные);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Обработчик специфических сценариев записи объекта в форме (например, после дополнительных ответов пользователя)
//   При переопределении действия:
//     ** Вызвать обработчик ДействиеПослеЗаписи после окончания записи
//     ** Установить признак СтандартнаяОбработка в значение Ложь
//
// Параметры:
//   Форма                - УправляемаяФорма     - источник события записи
//   Объект               - ДанныеФормыСтруктура - записываемый из формы объект
//   ДействиеПослеЗаписи  - ОписаниеОповещения   - действие которое требуется выполнить после записи объекта из формы
//   СтандартнаяОбработка - Булево               - признак стандартной обработки события (запись без блокирующих вызовов)
//
Процедура ИнтеграцияИСКлиентПереопределяемый_ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	Если Объект.Проведен Тогда
		ОбщегоНазначенияУТКлиент.Провести(Форма, Истина, ДействиеПослеЗаписи);
	Иначе
		ОбщегоНазначенияУТКлиент.Записать(Форма, Истина, ДействиеПослеЗаписи);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсАвторизацииИСМПКлиент

//Инициализировать структуру параметров запроса в ИС МОТП (ИС МП) для получения ключа сессии.
//
//Параметры:
//   Организация - ОпределяемыйТип.Организация - Организация.
//   ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции (для уточнения сервиса).
//
//Возвращаемое значение:
//   (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
Функция ИнтерфейсАвторизацииИСМПКлиент_ПараметрыЗапросаКлючаСессии(Организация = Неопределено, ВидПродукцииИС = Неопределено) Экспорт
	
	Если ВидПродукцииИС = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		Возврат ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
	КонецЕсли;
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтерфейсАвторизацииИСМПКлиентСервер_ПараметрыЗапросаКлючаСессии();
	
КонецФункции

// Запросить новый ключ сессии для авторизации в ИС МП.
// 
// Параметры:
// 	ПараметрыЗапроса        - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
// 	ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения после получения результата.
Процедура ИнтерфейсАвторизацииИСМПКлиент_ЗапроситьКлючСессии(ПараметрыЗапроса, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	РезультатЗапроса = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ИнтерфейсАвторизацииИСМПВызовСервера_ЗапроситьПараметрыАвторизации(ПараметрыЗапроса);
	
	ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
	
	Если ПараметрыАвторизации = Неопределено Тогда
		Если ОповещениеПриЗавершении <> Неопределено Тогда
			ВозвращаемоеЗначение = Новый Соответствие;
			ВозвращаемоеЗначение.Вставить(ПараметрыЗапроса.Организация, РезультатЗапроса.ТекстОшибки);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВозвращаемоеЗначение);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Описание = СтрШаблон(
		НСтр("ru = 'Авторизация в %1 для %2';
			|en = 'Авторизация в %1 для %2'"),
		ПараметрыЗапроса.ПредставлениеСервиса,
		ПараметрыЗапроса.Организация);
	
	Сообщения = Новый Массив;
	Сообщения.Добавить(
		ИнтерфейсАвторизацииИСМПСлужебныйКлиент_РезультатПодписания(
			ПараметрыЗапроса,
			Описание,
			ПараметрыАвторизации));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыЗапроса",        ПараметрыЗапроса);
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	ИнтерфейсАвторизацииИСМПСлужебныйКлиент_Подписать(
		Сообщения,
		ПараметрыЗапроса,
		Новый ОписаниеОповещения("ИнтерфейсАвторизацииИСМПКлиент_ПослеПодписания", ЭтотОбъект, Контекст));
	
КонецПроцедуры

// Обработчик оповещения после подписания данных для авторизации в сервисе ИС МОТП
// 
// Параметры:
// 	Результат - Массив Из (См. ИнтерфейсАвторизацииИСМПСлужебныйКлиент.РезультатПодписания).
// 	ДополнительныеПараметры - Структура:
//   * ПараметрыЗапроса        - (См. ПараметрыЗапросаКлючаСессии).
//   * ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения при завершении процедуры.
Процедура ИнтерфейсАвторизацииИСМПКлиент_ПослеПодписания(ПараметрыЗапросовПоОрганизациям, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗапросовПоОрганизациям = Неопределено Тогда
		
		Результат = Новый Соответствие();
		Результат.Вставить(ДополнительныеПараметры.ПараметрыЗапроса.Организация, Неопределено);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		
	Иначе
		
		Результат = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ИнтерфейсАвторизацииИСМПВызовСервера_ЗапроситьКлючиСессий(ПараметрыЗапросовПоОрганизациям);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсАвторизацииИСМПСлужебныйКлиент

// Возвращает структуру с результатом подписания.
// 
// Параметры:
// 	ПараметрыЗапроса     - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
// 	Описание             - Строка - Описание.
// 	ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыЗапроса     - (См. ПараметрыЗапросаКлючаСессии).
// * Описание             - Строка - Описание.
// * ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// * СвойстваПодписи      - Структура, Неопределено - Свойства подписи.
Функция ИнтерфейсАвторизацииИСМПСлужебныйКлиент_РезультатПодписания(ПараметрыЗапроса, Описание, ПараметрыАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыЗапроса",     ПараметрыЗапроса);
	ВозвращаемоеЗначение.Вставить("Описание",             Описание);
	ВозвращаемоеЗначение.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ВозвращаемоеЗначение.Вставить("СвойстваПодписи",      Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подпись сообщений обмена с ИС МОТП от имени организации.
//
// Параметры:
//  Сообщения               - Массив Из Структура               - Массив сообщений, которые необходимо подписать.
//  ПараметрыЗапроса        - (См. ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии.
//  ОповещениеПриЗавершении - ОписаниеОповещения                - Оповещение, которое будет выполнено после завершения процесса подписи.
//
Процедура ИнтерфейсАвторизацииИСМПСлужебныйКлиент_Подписать(Сообщения, ПараметрыЗапроса, ОповещениеПриЗавершении) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик оповещения нажатия на гиперссылку описания подписываемых данных в форме подписания БСП.
Процедура ПодписатьПоказатьТекстСообщенияXML(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ПараметрыАвторизации") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ДополнительныеПараметры.ПараметрыАвторизации.Данные);
		ТекстовыйДокумент.Показать(ДополнительныеПараметры.Описание);
	ИначеЕсли ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекстСообщенияJSON") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ДополнительныеПараметры.ТекстСообщенияJSON);
		ТекстовыйДокумент.Показать(ДополнительныеПараметры.Описание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Успех Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			
			Сообщение = ТекущийЭлементНабораДанных.Данные.Сообщение;
			Сообщение.Вставить("СвойстваПодписи", СвойстваПодписи);
			
			Сообщения.Добавить(Сообщение);
			
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииИСКлиент

// Обновляет статус проверки маркируемой продукции при изменении количества/состава строк по кешированным данным
//   состава табличной части "Штрихкоды упаковок".
// 
// Параметры:
//   Форма - УправляемаяФорма - редактируемая форма.
//   ТабличнаяЧастьТовары - ДанныеФормыКоллекция - редактируемая таблица.
//   ДанныеСтроки - ДанныеФормыЭлементКоллекции - редактируемая строка.
//   ДанныеКешаСтроки - Структура - данные строки перед редактированием.
//   ВсеТоварыМаркируемые - Булево - Обработка всех маркируемых товаров.
// Возвращаемое значение:
//   Булево - требуется пересчет кеша для всей табличной части.
Функция ПроверкаИПодборПродукцииИСКлиент_ПрименитьКешПоСтроке(Форма, ТабличнаяЧастьТовары, ДанныеСтроки, ДанныеКешаСтроки, ВсеТоварыМаркируемые = Ложь) Экспорт
	
	КлючСвязиИзменен = ДанныеСтроки.Номенклатура<>ДанныеКешаСтроки.Номенклатура
		ИЛИ (ДанныеКешаСтроки.Свойство("Характеристика")
			И ДанныеСтроки.Характеристика<>ДанныеКешаСтроки.Характеристика)
		ИЛИ (ДанныеКешаСтроки.Свойство("Серия")
			И ДанныеСтроки.Серия<>ДанныеКешаСтроки.Серия);
	
	МассивКлючейСвязи = Новый Массив;
	МассивКлючейСвязи.Добавить("Номенклатура");
	Если ДанныеКешаСтроки.Свойство("Характеристика") Тогда
		МассивКлючейСвязи.Добавить("Характеристика");
	КонецЕсли;
	Если ДанныеКешаСтроки.Свойство("Серия") Тогда
		МассивКлючейСвязи.Добавить("Серия");
	КонецЕсли;
	СтруктураПоиска = Новый Структура(СтрСоединить(МассивКлючейСвязи,","));

	Если КлючСвязиИзменен И (ВсеТоварыМаркируемые Или ДанныеКешаСтроки.МаркируемаяПродукция) Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеКешаСтроки);
		
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиКеша.Количество() Тогда
			
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			Если НЕ СтрокиТовары.Количество() Тогда
				Возврат Истина; //требуется удалить штрихкоды из табличной части штрихкодов и пересчитать кеш
			КонецЕсли;
			
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
			КонецЦикла;
			Если КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
				СтатусПроверкиГосИС = 1;
			Иначе
				СтатусПроверкиГосИС = 2;
			КонецЕсли;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				СтрокаПоКлючу.СтатусПроверкиГосИС = СтатусПроверкиГосИС;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВсеТоварыМаркируемые Или ДанныеСтроки.МаркируемаяПродукция Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
		СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
		КоличествоПоКлючу = 0;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
		КонецЦикла;
		Если СтрокиКеша.Количество() = 0 Тогда
			СтатусПроверкиГосИС = 2;
		ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
			СтатусПроверкиГосИС = 1;
		Иначе
			СтатусПроверкиГосИС = 2;
		КонецЕсли;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			СтрокаПоКлючу.СтатусПроверкиГосИС = СтатусПроверкиГосИС;
		КонецЦикла;
		
	Иначе
		ДанныеСтроки.СтатусПроверкиГосИС = 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверкаИПодборПродукцииИСКлиент_ЗаполнитьЗначенияСтрокДереваДляРасчетаХешСумм(ЗначенияСтрокДерева, СтрокиДереваУпаковок) Экспорт
	
	Для Каждого СтрокаДереваУпаковок Из СтрокиДереваУпаковок Цикл
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("ИдентификаторСтроки", СтрокаДереваУпаковок.ПолучитьИдентификатор());
		ДанныеСтроки.Вставить("ТипУпаковки",         СтрокаДереваУпаковок.ТипУпаковки);
		ДанныеСтроки.Вставить("СтатусПроверки",      СтрокаДереваУпаковок.СтатусПроверки);
		ДанныеСтроки.Вставить("Штрихкод",            СтрокаДереваУпаковок.Штрихкод);
		ДанныеСтроки.Вставить("ХешСумма",            "");
		ДанныеСтроки.Вставить("Строки",              Новый Массив());
		
		ПодчиненныеСтрокиДереваУпаковок = СтрокаДереваУпаковок.ПолучитьЭлементы();
		
		Если ПодчиненныеСтрокиДереваУпаковок.Количество() > 0 Тогда
			ПроверкаИПодборПродукцииИСКлиент_ЗаполнитьЗначенияСтрокДереваДляРасчетаХешСумм(ДанныеСтроки.Строки, ПодчиненныеСтрокиДереваУпаковок);
		КонецЕсли;
		
		ЗначенияСтрокДерева.Добавить(ДанныеСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСКлиент_ЗаполнитьХешСуммыВСтрокахДереваУпаковок(ЗначенияСтрокДерева, ДеревоУпаковок) Экспорт
	
	Для Каждого ДанныеСтроки Из ЗначенияСтрокДерева Цикл
		СтрокаДереваУпаковок = ДеревоУпаковок.НайтиПоИдентификатору(ДанныеСтроки.ИдентификаторСтроки);
		
		Если СтрокаДереваУпаковок <> Неопределено Тогда
			СтрокаДереваУпаковок.ХешСумма = ДанныеСтроки.ХешСумма;
		КонецЕсли;
		
		Если ДанныеСтроки.Строки.Количество() > 0 Тогда
			ПроверкаИПодборПродукцииИСКлиент_ЗаполнитьХешСуммыВСтрокахДереваУпаковок(ДанныеСтроки.Строки, ДеревоУпаковок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииИСМПУТКлиент

// Добавляет зависящие от владельца формы проверки и подбора значения в параметры указания серий номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма с товарами, для которой необходимо определить параметры указания серий.
//	ПараметрыУказанияСерий - Структура - дополняемые параметры указания серий.
//
Процедура ПроверкаИПодборПродукцииИСМПУТКлиент_ДополнитьПараметрыУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	ВладелецФормы = Форма.ВладелецФормы;
	
	Если ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСУТКлиентСервер_ЭтоДокументПоНаименованию(ВладелецФормы, "ЧекККМ") Тогда
		ПроверяемыйДокумент = "ЧекККМ";
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаВРозницу"));
	ИначеЕсли ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ИнтеграцияИСУТКлиентСервер_ЭтоДокументПоНаименованию(ВладелецФормы, "ЧекККМВозврат") Тогда
		ПроверяемыйДокумент = "ЧекККМВозврат";
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента"));
	ИначеЕсли Форма.РежимПодбораСуществующихУпаковок Тогда
		ПроверяемыйДокумент = "";
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКлиенту"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаПоПеремещению"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки"));
	Иначе
		ПроверяемыйДокумент = "";
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаОтПоставщика"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоПеремещению"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоПрочемуОприходованию"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки"));
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаСобранныхКомплектов"));
	КонецЕсли;
	
	ПараметрыУказанияСерий.Вставить("ПроверяемыйДокумент", ПроверяемыйДокумент);
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСМПУТКлиент_ОткрытьФормуАктаОРасхождениях(ДокументСсылка, ВладелецФормы) Экспорт
	
	ПараметрыФормы = Новый Структура("Ключ", ДокументСсылка);
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.ФормаОбъекта", ПараметрыФормы, ВладелецФормы);
	
КонецПроцедуры

Процедура ПроверкаИПодборПродукцииИСМПУТКлиент_ПриЗакрытииФормыПроверкиИПодбора(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Событие = СтрШаблон("ЗакрытиеФормыПроверкиИПодбораГосИС%1", ИнтеграцияИСКлиент_ИндексВидаПродукцииИС(ДополнительныеПараметры.ВидПродукции));
	Оповестить(Событие, Результат, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСКлиент

// Инициализирует параметры открытия формы невозможности добавления отсканированного.
//
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресДереваУпаковок - АдресВременногоХранилища - адрес хранилища, где находится дерево упаковок.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - алкогольная продукция.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * ТекстОшибки - Строка - Описание причины невозможности обработки отсканированного штрихкода.
// * Штрихкод - Строка - Штрихкод строкой.
// * ПредставлениеНоменклатуры - Строка - Представление маркируемой продукции.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
Функция ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции = Неопределено) Экспорт

	ИнформацияПроблемы = Новый Структура;
	
	ИнформацияПроблемы.Вставить("ВидПродукции",              ВидПродукции);
	//Информация по маркированному товару.
	ИнформацияПроблемы.Вставить("ПредставлениеНоменклатуры", Неопределено);
	ИнформацияПроблемы.Вставить("Штрихкод",                  Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибки",               Неопределено);
	ИнформацияПроблемы.Вставить("ТипШтрихкода",              Неопределено);
	ИнформацияПроблемы.Вставить("АлкогольнаяПродукция",      Неопределено);
	//Информация по дереву упаковок.
	ИнформацияПроблемы.Вставить("АдресДереваУпаковок",       Неопределено);

	Возврат ИнформацияПроблемы;

КонецФункции

// Преобразует массив штрихкодов в формат Base64.
// 
// Параметры:
//  ШтрихкодыТСД - Массив из Строка - список штрихкодов.
Процедура ШтрихкодированиеИСКлиент_ПреобразоватьШтрихкодыТСДВBase64(ШтрихкодыТСД) Экспорт
	
	Для Каждого ЭлементМассива Из ШтрихкодыТСД Цикл
		Если ЭлементМассива.Свойство("ШтрихкодыПреобразованы") Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементМассива.Штрихкод) Тогда
			ЭлементМассива.Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВBase64(ЭлементМассива.Штрихкод);
		КонецЕсли;
		Если ЭлементМассива.Свойство("ШтрихкодУпаковки") И ЗначениеЗаполнено(ЭлементМассива.ШтрихкодУпаковки) Тогда
			ЭлементМассива.ШтрихкодУпаковки = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВBase64(ЭлементМассива.ШтрихкодУпаковки);
		КонецЕсли;
		ЭлементМассива.Вставить("ШтрихкодыПреобразованы");
	КонецЦикла;
	
КонецПроцедуры

// Открывает форму с описанием ошибки о невозможности обработать отсканированный штрихкод.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного).
Процедура ШтрихкодированиеИСКлиент_ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная") Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		МодульШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы, ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает окно оповещения об окончании обработки данных ТСД.
//
// Параметры:
Процедура ШтрихкодированиеИСКлиент_ОповеститьОбОкончанииОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(
		ШтрихкодированиеИСКлиент_ЗаголовокОповещенияТСД(),,
		НСтр("ru = 'Закончена обработка полученных из ТСД данных.';
			|en = 'Закончена обработка полученных из ТСД данных.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает окно оповещения о начале обработки данных ТСД.
//
// Параметры:
Процедура ШтрихкодированиеИСКлиент_ОповеститьОНачалеОбработкиДанныхТСД() Экспорт
	
	ПоказатьОповещениеПользователя(
		ШтрихкодированиеИСКлиент_ЗаголовокОповещенияТСД(),,
		НСтр("ru = 'Начата обработка полученных из ТСД данных.';
			|en = 'Начата обработка полученных из ТСД данных.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Возвращает текст заголовка оповещения для ТСД.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Текст заголовка.
Функция ШтрихкодированиеИСКлиент_ЗаголовокОповещенияТСД()
	
	Возврат НСтр("ru = 'Загрузка из ТСД';
				|en = 'Загрузка из ТСД'");
	
КонецФункции

// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - (См. ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода).
Процедура ШтрихкодированиеИСКлиент_ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода   = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода;
	ВидыПродукцииШтрихкода        = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода.ВидыПродукции;
	Форма                         = ПараметрыЗавершенияОбработкиШтрихкода.Форма;
	ПараметрыСканирования         = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
	ОповещениеОбработкиШтрихкода  = ПараметрыЗавершенияОбработкиШтрихкода.ОповещениеОбработкиШтрихкода;
	ОповещениеЗавершениеОбработки = ПараметрыЗавершенияОбработкиШтрихкода.ОповещениеЗавершениеОбработки;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка = Истина Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОшибкаДопустимостиВидовПродукции Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиент_ПрисутствуетТабачнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияОбработкиШтрихкода);
		ШтрихкодированиеИСКлиент_УточнитьДанныеУПользователя(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ОповещениеЗавершениеОбработки <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру данных, собранных после уточнения сведений у пользователя.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ИсходныеДанные - Структура
//    * Штрихкод - Строка - Штрихкод.
//    * Количество - Число - Количество.
// * КэшированныеЗначения - Произвольный - кэш обработанных ранее штрихкодов.
// * РезультатВыбора - Произвольный - результат уточнения данных пользователем.
// * РезультатОбработкиШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.
// * Действие - Строка - Действие, которое необходимо выполнить с данными.
Функция ШтрихкодированиеИСКлиент_ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий() Экспорт
	
	РезультатУточненияДанных = Новый Структура;
	
	РезультатУточненияДанных.Вставить("Действие");
	РезультатУточненияДанных.Вставить("РезультатОбработкиШтрихкода");
	РезультатУточненияДанных.Вставить("РезультатВыбора");
	РезультатУточненияДанных.Вставить("КэшированныеЗначения");
	РезультатУточненияДанных.Вставить("ИсходныеДанные");
	РезультатУточненияДанных.Вставить("ПараметрыСканирования");
	
	Возврат РезультатУточненияДанных;
	
КонецФункции

// Выполняет обработку оповещения "ОповещениеВыполнитьДействие" и передает результат уточнения данных у пользователя.
// 
// Параметры:
//  РезультатВыбора - Произвольный - результат уточнения данных у пользователя.
//  ДополнительныеПараметры - дополнительные параметры описания оповещения.
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеВыполнитьДействие <> Неопределено Тогда
		
		РезультатУточненияДанных = ШтрихкодированиеИСКлиент_ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий();
		РезультатУточненияДанных.Действие                    = "ОбработатьУточнениеДанных";
		РезультатУточненияДанных.РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
		РезультатУточненияДанных.РезультатВыбора             = РезультатВыбора;
		РезультатУточненияДанных.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		РезультатУточненияДанных.ИсходныеДанные              = ДополнительныеПараметры.ДанныеШтрихкода;
		РезультатУточненияДанных.ПараметрыСканирования       = ДополнительныеПараметры.ПараметрыСканирования;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВыполнитьДействие, РезультатУточненияДанных);
		
	ИначеЕсли ДополнительныеПараметры.ВызовИзФормыДокумента Тогда //Ветка для старого механизма.
		
		Форма = ДополнительныеПараметры.Форма;
		
		Действие = "ОбработатьУточнениеДанных";
		РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
			Действие,
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиВводаШтрихкода();
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
		ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении", ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении);
		ШтрихкодированиеИСКлиент_ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму уточнения номенклатуры и серии.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОписаниеОповещения - ОписаниеОвещения - Оповещение после закрытия формы.
Процедура ШтрихкодированиеИСКлиент_УточнитьДанныеУПользователя(ФормаВладелец, ПараметрыОткрытияФормы, ОповещениеПовторнойОбработки) Экспорт
	
	Если ПараметрыОткрытияФормы.Операция = "СопоставлениеНоменклатуры" Тогда
		
		ШтрихкодыКСопоставлению = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ШтрихкодыКСопоставлению;
		ИсходныеДанные          = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ДополнительныеПараметры = Новый Структура("ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПовторнойОбработки, ИсходныеДанные, ШтрихкодированиеИСКлиент_ПараметрыСканирования(ФормаВладелец));
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения("СопоставлениеНоменклатурыШтрихкодамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый_ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(ШтрихкодыКСопоставлению, ФормаВладелец, ОповещениеОЗавершенииСопоставления);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки" Тогда
		
		ШтрихкодированиеИСКлиент_ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ОповещениеПовторнойОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// В случае успешного сопоставления номенклатуры неизвестным штрихкодам выполняет повторную попытку обработки штрихкода.
// 
// Параметры:
//  Результат - Произвольный - результат сопоставления неизветсной номенклатуры штрихкодам формата EAN.
//  ДополнительныеПараметры - параметры описания оповещения.
Процедура СопоставлениеНоменклатурыШтрихкодамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИСМПТВыбытиеКодовМаркировкиВызовСервера.ШтрихкодированиеИСВызовСервера_ОчиститьОтложенныеКодыМаркировки(
			ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПовторнойОбработки, ДополнительныеПараметры.ИсходныеДанные);
	
КонецПроцедуры

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, ДокументСсылка, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - Неопределено - Описание
//  ВидПродукции - Неопределено - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать
//                                                       об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией.
// * ДопустимыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции,
//                                                                                                 которые поддерживает контекст.
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД.
// * ДокументОснование - Неопределено, ДокументСсылка - Документ основание.
// * СоздаватьШтрихкодУпаковки - Булево - Истина, если необходимо создавать элемент справочника штрихкоды упаковок.
// * АдресСоответствияАкцизныхМарок - Строка - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам.
// * АдресДанныхДокументаОснования - Строка - адрес во временном хранилище, где хранятся данные документа основания.
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - Истина, если реквизит на форме СоответствиеШтрихкодовСтрокДерева.
// * ДанныеВыбораПоМаркируемойПродукции - Структура - последние данные выбора, которые требовалось запомнить для последующего сканирования.
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются.
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов.
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
//                                            отражает расход по складу, "Возврат" - для документов, отражающих приход.
Функция ШтрихкодированиеИСКлиент_ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_БазовыеПараметрыСканирования();
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	ШтрихкодированиеИСКлиент_ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСерверПереопределяемый_ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
Процедура ШтрихкодированиеИСКлиент_ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")
			Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму ввода кода маркировки.
//
//Параметры:
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой необходимо выполнить открытие.
//   ПараметрыОткрытия - См. ПараметрыОткрытияФормыВводаКодаМаркировки.
//   ОповещениеОЗавершении - ОписаниеОповещения, Неопределено - действие после закрытия формы ввода кода маркировки
//
Процедура ШтрихкодированиеИСКлиент_ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытия, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если Не ПараметрыОткрытия.МаркируемаяПродукция Тогда
		
		ПоказатьПредупреждение(
			Неопределено, НСтр("ru = 'Для данной строки не указываются акцизные марки';
								|en = 'Для данной строки не указываются акцизные марки'"));
		
		Возврат;
	КонецЕсли;
	
	Если ОповещениеОЗавершении = Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ФормаВладелец, ОповещениеОЗавершении);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления табачная продукция.
Функция ШтрихкодированиеИСКлиент_ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Возврат ВидыПродукции.Найти(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")) <> Неопределено;
	
КонецФункции

// Получает данные из кэша, необходимые для уточнения сведений у пользователя. Открывает форму уточнения сведений.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - оповещение, которое будет выполнено после получения сведений.
Процедура ШтрихкодированиеИСКлиент_Подключаемый_ОткрытьФормуУточненияДанных(Форма, ОписаниеОповещенияОЗавершении) Экспорт
	
	ДанныеДляУточненияСведений = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ШтрихкодированиеИСВызовСервера_ДанныеДляУточненияСведенийПользователя(Форма.КэшМаркируемойПродукции);
	
	Если ПустаяСтрока(ДанныеДляУточненияСведений.Операция) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыОткрытияФормыУточненияДанных.Операция = ДанныеДляУточненияСведений.Операция;
	ПараметрыОткрытияФормыУточненияДанных.ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведений.Данные;
	
	ШтрихкодированиеИСКлиент_УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования).
// * Склад - ОпределяемыйТип.Склад - Склад, используемый для серий.
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатура - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
Функция ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыУточненияДанных();
	
КонецФункции

// Обновляет отображение адреса данных документа основания на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработка штрихкода(ов).
//  ПараметрыСканирования - (см. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ШтрихкодированиеИСКлиент_ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования)
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	ФормаСоЗначением = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма;
	ИначеЕсли Форма.ВладелецФормы <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ВладелецФормы, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма.ВладелецФормы;
	КонецЕсли;
	
	Если ФормаСоЗначением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаСоЗначением["АдресДанныхДокументаОснования"] <> ПараметрыСканирования.АдресДанныхДокументаОснования Тогда
		ФормаСоЗначением["АдресДанныхДокументаОснования"] = ПараметрыСканирования.АдресДанныхДокументаОснования
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку штрихкода. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - оповещение, которое произойдет при завершении обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод.
//  ДанныеШтрихкода - Структура - структура с ключами:
//   * Штрихкод - Строка - считанный штрихкод,
//   * Количество - Число - количество упаковок.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//
Процедура ШтрихкодированиеИСКлиент_ОбработатьДанныеШтрихкода(ОповещениеПриЗавершении, Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ИСМПТВыбытиеКодовМаркировкиКлиент.ШтрихкодированиеИСКлиент_ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент_ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	ДанныеШтрихкода.Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	
	РезультатОбработкиШтрихкода = ИСМПТВыбытиеКодовМаркировкиВызовСервера.ШтрихкодированиеИСВызовСервера_ОбработатьШтрихкод(
		ДанныеШтрихкода.Штрихкод, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или ШтрихкодированиеИСКлиент_ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
			
			ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиВводаШтрихкода();
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода; 
			ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении     = ОповещениеПриЗавершении;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Ложь;
			
			ШтрихкодированиеИСКлиент_ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработкиШтрихкода.АдресДанныхШтрихкода);
			ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Анализирует результат проверки на необходимость уточнения каких-либо данных у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// Возвращаемое значение:
//  Булево - Истина, если требуется уточнить какие-либо данные у пользователя.
Функция ШтрихкодированиеИСКлиент_ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования)
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;

	Если ШтрихкодированиеИСКлиент_ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Возврат МодульШтрихкодированиеМОТПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Устарела. Следует использовать ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода.
// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// * ОповещениеПриЗавершении - ОписениеОповещения - Оповещение, которое необходимо выполнить при завершении обработки.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
Функция ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиВводаШтрихкода() Экспорт
	
	Параметры = ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиШтрихкода();
	Параметры.Вставить("ОповещениеПриЗавершении");
	Параметры.Вставить("ВызовИзФормыДокумента");
	
	Возврат Параметры;
	
КонецФункции

// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// * ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
// * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение, которое необходимо выполнить при завершении обработки.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
Функция ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ОповещениеОбработкиШтрихкода");
	Параметры.Вставить("ОповещениеВыполнитьДействие");
	Параметры.Вставить("ОповещениеЗавершениеОбработки");
	
	Возврат Параметры;
	
КонецФункции

// Устарела. См. ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода
// Выполняет обработку штрихкода. Вызывается из формы документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ИсходныеДанные - Структура - Исходные данные, включающие только значение штрихкода и количество,
//  	либо уже полноценные заполненные данные штрихкода, которые нуждаются в обработке.
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования
//                                       и ШтрихкодированиеИС.ПараметрыСканирования).
//  Оповещение - ОписаниеОповещения - будет выполнена обработка оповещения с результатом обработки кода маркировки.
Процедура ШтрихкодированиеИСКлиент_ОбработатьВводШтрихкода(Форма, ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования = Неопределено, Оповещение = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Или ТипЗнч(ИсходныеДанные) <> Тип("Структура") Тогда	
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеИСКлиент_ПараметрыСканирования(Форма);
	КонецЕсли;
	
	ДанныеШтрихкода = ОбщегоНазначенияКлиент_СкопироватьРекурсивно(ИсходныеДанные, Ложь);
	Если Не ДанныеШтрихкода.Свойство("ШтрихкодыПреобразованы") Тогда
		ДанныеШтрихкода.Штрихкод = ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
	КонецЕсли;
	
	РезультатОбработкиШтрихкода = Форма.Подключаемый_ОбработатьВводШтрихкода(
		ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент_ПараметрыЗавершенияОбработкиВводаШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = КэшированныеЗначения;
	ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования       = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода             = ДанныеШтрихкода;
	ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента       = Истина;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении     = Оповещение;
	
	ШтрихкодированиеИСКлиент_ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

// Устарела. Следует использовать "ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода".
// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияВводаШтрихкода - (См. ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиВводаШтрихкода).
Процедура ШтрихкодированиеИСКлиент_ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода;
	ВидыПродукцииШтрихкода      = ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода.ВидыПродукции;
	Форма                       = ПараметрыЗавершенияВводаШтрихкода.Форма;
	ПараметрыСканирования       = ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования;
	Оповещение                  = ПараметрыЗавершенияВводаШтрихкода.ОповещениеПриЗавершении;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		
		ШтрихкодированиеИСКлиентПереопределяемый_ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			РезультатОбработкиШтрихкода.ШтрихкодыПродукцииДляСопоставления, Форма, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыВводаКодаМаркировки();
		ПараметрыОткрытия.ВидПродукции = ВидыПродукцииШтрихкода[0];
		ПараметрыОткрытия.МаркируемаяПродукция   = Истина;
		ПараметрыОткрытия.ПараметрыСканирования  = ПараметрыСканирования;
		ПараметрыОткрытия.Номенклатура           = РезультатОбработкиШтрихкода.ДополнительныеПараметры.Номенклатура;
		ПараметрыОткрытия.Характеристика         = РезультатОбработкиШтрихкода.ДополнительныеПараметры.Характеристика;
		ПараметрыОткрытия.ДанныеШтрихкода        = РезультатОбработкиШтрихкода.ИсходныеДанные;
		ПараметрыОткрытия.Документ               = Форма.Объект.Ссылка;
		
		ШтрихкодированиеИСКлиент_ОткрытьФормуСчитыванияКодаМаркировки(Форма, ПараметрыОткрытия, Оповещение);
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ПослеОбработкиШтрихкодов", 0.1, Истина);
		
		Возврат;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка = Истина Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод    = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОшибкаДопустимостиВидовПродукции Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиент_ПрисутствуетТабачнаяПродукция(ВидыПродукцииШтрихкода) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияВводаШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, ПараметрыЗавершенияВводаШтрихкода);
		ИСМПТВыбытиеКодовМаркировкиКлиент.ШтрихкодированиеИСКлиент_ОткрытьФормуУточненияДанных(
			Форма, РезультатОбработкиШтрихкода.ПараметрыУточненияДанных, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если Оповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, РезультатОбработкиШтрихкода);
	КонецЕсли;
	
КонецПроцедуры

// Устарела. Использовать СопоставлениеНоменклатурыШтрихкодамЗавершение.
// Выполняется после сопоставления номенклатуры штрихкодам. В случае успешного сопоставления штрихкодов запускает заново
// процесс обработки штрихкодов.
//
// Параметры:
//  РезультатВыбора
//  ДополнительныеПараметры
Процедура СопоставлениеНоменклатурыЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Если ДополнительныеПараметры.ВызовИзФормыДокумента Тогда
		
			ШтрихкодированиеИСКлиент_ОбработатьВводШтрихкода(
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.КэшированныеЗначения);
			
		Иначе
			
			ШтрихкодированиеИСКлиент_ОбработатьДанныеШтрихкода(
				ДополнительныеПараметры.ОповещениеПриЗавершении,
				ДополнительныеПараметры.Форма,
				ДополнительныеПараметры.ДанныеШтрихкода,
				ДополнительныеПараметры.ПараметрыСканирования)
			
		КонецЕсли;
			
	КонецЕсли;
	
	ИСМПТВыбытиеКодовМаркировкиВызовСервера.ШтрихкодированиеИСВызовСервера_ОчиститьОтложенныеКодыМаркировки(
		ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		
КонецПроцедуры

//Структура параметров, необходимых для открытия формы считывания кода маркировки.
//
//Возвращаемое значение:
//  Структура - требуемые параметры:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// * МаркируемаяПродукция - Булево - Истина, если продукция маркируемая.
// * ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
// * ДанныеШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода.
// * Документ - Произвольный - .
// * РазрешатьДобавлениеБезКодаМарки - Булево - разрешать добавление строки при отказе от ввода кода маркировки.
//
Функция ШтрихкодированиеИСКлиент_ПараметрыОткрытияФормыВводаКодаМаркировки() Экспорт
	
	Возврат ИСМПТВыбытиеКодовМаркировкиКлиентСервер.ШтрихкодированиеИСКлиентСервер_ПараметрыОткрытияФормыВводаКодаМаркировки();
	
КонецФункции

// Устарела. Следует использовать УточнитьДанныеУПользователя
// Открывает форму уточнения номенклатуры и серии.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОписаниеОповещения - ОписаниеОвещения - Оповещение после закрытия формы.
Процедура ШтрихкодированиеИСКлиент_ОткрытьФормуУточненияДанных(ФормаВладелец, ПараметрыОткрытияФормы, ОписаниеОповещения) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСКлиентПереопределяемый

// В процедуре необходимо реализовать открытие формы, в которой будет возможность сопоставить неизвестные штрихкоды с номенклатурой.
//
// Параметры:
//  НеизвестныеШтрихкоды - Массив - Штрихкоды для сопоставления.
//  ФормаВладелец - УправляемаяФорма - Форма владелец.
//  ОповещениеОЗакрытии - ОписаниеОповещения - Оповещение, которое должно быть вызвано после сопоставления номенклатуры.
Процедура ШтрихкодированиеИСКлиентПереопределяемый_ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(НеизвестныеШтрихкоды, ФормаВладелец = Неопределено, ОповещениеОЗакрытии = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	Если ФормаВладелец <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "ДанныеДляОбработки")
		И ОповещениеОЗакрытии = Неопределено Тогда
		
		ДанныеДляОбработки = ШтрихкодированиеНоменклатурыКлиентСервер.ПараметрыОбработкиШтрихкодов();
		ДанныеДляОбработки.НеизвестныеШтрихкоды = НеизвестныеШтрихкоды;
		ДанныеДляОбработки.ДействияСНеизвестнымиШтрихкодами = "ОткрытьФормуСопоставленияНоменклатуры";
		ФормаВладелец.ДанныеДляОбработки        = ДанныеДляОбработки;
		ФормаВладелец.ПодключитьОбработчикОжидания("Подключаемый_ПослеОбработкиШтрихкодов", 0.1, Истина);
		
	Иначе

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды);
		ОткрытьФорму("Обработка.РаботаСНоменклатурой.Форма.ПоискНоменклатурыПоШтрихкоду",
			СтруктураПараметров, ФормаВладелец, Новый УникальныйИдентификатор, , , ОповещениеОЗакрытии);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

// В процедуре нужно показать диалоговое окно для ввода штрихкода и передать полученные данные в описание оповещения.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - процедура, которую нужно вызвать после ввода штрихкода.
Процедура ШтрихкодированиеИСКлиентПереопределяемый_ПоказатьВводШтрихкода(Оповещение, СтандартнаяОбработка = Истина) Экспорт
	
	//++ НЕ ГОСИС
	СтандартнаяОбработка = Ложь;
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти