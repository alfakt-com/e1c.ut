
#Область НастройкаПараметровПодключения

Функция ПустыеПараметрыПодключенияКСерверуВС() Экспорт
	
	ПустыеПараметрыПодключения = Новый Структура;
	
	// Параметры сервера ИС ЭСФ.
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	АдресСервераВС = ОбработкаОбменЭСФ.АдресСервераAPIВС();
	
	ПустыеПараметрыПодключения.Вставить("СерверВС_ПолныйАдрес", АдресСервераВС);
	
	ПараметрыПодключения = ПараметрыПодключенияКСерверуВС(АдресСервераВС);
	ПустыеПараметрыПодключения.Вставить("СерверВС_HTTPS", ПараметрыПодключения.HTTPS);
	ПустыеПараметрыПодключения.Вставить("СерверВС_Адрес", ПараметрыПодключения.Адрес);
	ПустыеПараметрыПодключения.Вставить("СерверВС_Порт", ПараметрыПодключения.Порт);
	ПустыеПараметрыПодключения.Вставить("СерверВС_Ресурс", ПараметрыПодключения.Ресурс);
	ПустыеПараметрыПодключения.Вставить("СерверВС_Таймаут", 0);

	//// Параметры прокси-сервера ИС ЭСФ.
	//ПустыеПараметрыПодключения.Вставить("ПроксиСервер_ВариантИспользования", ЭСФКлиентСервер.ПроксиНеИспользовать());
	//ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Сервер", "");
	//ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Порт", "");
	//ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Пользователь", "");
	//ПустыеПараметрыПодключения.Вставить("ПроксиСервер_Пароль", "");
	
	Возврат ПустыеПараметрыПодключения;
	
КонецФункции

Функция ПолучитьПараметрыПодключенияКСерверуВС() Экспорт
	
	ХранилищеЗначения = Константы.ПараметрыПодключенияКСерверуВС.Получить();
	ПараметрыПодключения = ХранилищеЗначения.Получить();
	
	Если ПараметрыПодключения = Неопределено Тогда
		
		ПараметрыПодключения = ПустыеПараметрыПодключенияКСерверуВС();
		
	Иначе
		// обработаем ситуации, когда в релизах добавлялись новые параметры структуры
		ПустыеПараметрыПодключения = ПустыеПараметрыПодключенияКСерверуВС();
		
		Для Каждого СтрокаСтруктуры Из ПустыеПараметрыПодключения Цикл
			
			Если ПараметрыПодключения.Свойство(СтрокаСтруктуры.Ключ) = Ложь Тогда
				ПараметрыПодключения.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ПараметрыПодключенияКСерверуВС(Знач АдресСервераВС) Экспорт
	
	ПараметрыПодключения = Новый Структура;
	
	РазобранныйАдрес = ЭСФКлиентСервер.СтруктураURI(АдресСервераВС);
	
	ПараметрыПодключения.Вставить("HTTPS", ?(ВРег(РазобранныйАдрес.Схема) = "HTTPS", Истина, Ложь));
	ПараметрыПодключения.Вставить("Адрес", РазобранныйАдрес.Хост);
	ПараметрыПодключения.Вставить("Порт", РазобранныйАдрес.Порт);
	ПараметрыПодключения.Вставить("Ресурс", РазобранныйАдрес.ПутьНаСервере);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Проверяет доступ к серверу ИС ЭСФ.
//
// Возвращаемое значение:
//  Структура
//   |- ТекстВерсияОшибка - Строка - текст ошибки версии ИС ЭСФ
//   |- ТекстВерсияПоддерживает - Строка - текст поддержки версии ИС ЭСФ
//   |- ВерсияИСЭСФ - Строка - номер версии ИС ЭСФ
//   |- ВерсияИСЭСФПоддерживается - Булево - поддержка версии ИС ЭСФ
//   |- ОшибкаСоединения - Строка - строка ошибки соединения с ИС ЭСФ
//   |- ОшибкаВерсии - Строка - строка ошибки версии ИС ЭСФ
//
Функция ПроверитьДоступИВерсиюВСНаСервере() Экспорт
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	Возврат ОбработкаОбменЭСФ.ПроверитьДоступИВерсиюВСНаСервере();
	
КонецФункции

// Возвращает текущую версию ИС ЭСФ.
//
// Параметры:
//  ТекстОшибки - Строка - Содержит текст ошибки, если не удалось получить версию ИС ЭСФ.
//
// Возвращаемое значение:
//  Строка, Неопределено - Текушая версия ИС ЭСФ.
//   Строка, если удалось получить текущую версию ИС ЭСФ.
//   Неопределено в противном случае.
//
Функция ВерсияВС(ТекстОшибки) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ВерсияВС(ТекстОшибки);
	
КонецФункции

Функция ПустыеПараметрыВС() Экспорт
	
	ПустыеПараметрыВС = Новый Структура;
	
	ТекстОшибки = "";
	ВерсияВС = ВерсияВС(ТекстОшибки);
	
	Если ВерсияВС = Неопределено Тогда
		ВерсияВС = "5.0.0";
	КонецЕсли;	
	ПустыеПараметрыВС.Вставить("ВерсияВС", ВерсияВС);
	
	Возврат ПустыеПараметрыВС;
	
КонецФункции

Функция СохранитьПараметрыПодключенияКСерверуВС(Знач СохраняемыеНастройки) Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияКСерверуВС();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, СохраняемыеНастройки);
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыПодключения);
	Константы.ПараметрыПодключенияКСерверуВС.Установить(ХранилищеЗначения);
	
КонецФункции

Функция ПолучитьПараметрыВС() Экспорт
	
	//пока не храним доп. параметры
	ПараметрыВС = Неопределено;
	
	Если ПараметрыВС = Неопределено Тогда
		
		ПараметрыВС = ПустыеПараметрыВС();
		
	Иначе
		// обработаем ситуации, когда в релизах добавлялись новые параметры структуры
		ПустыеПараметрыВС = ПустыеПараметрыВС();
		
		Для Каждого СтрокаСтруктуры Из ПустыеПараметрыВС Цикл
			
			Если ПараметрыВС.Свойство(СтрокаСтруктуры.Ключ) = Ложь Тогда
				ПараметрыВС.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыВС;
	
КонецФункции

#КонецОбласти

#Область РаботаССессией

// Возвращает идентификатор новой сессии с ИС ЭСФ. 
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, от имени которого необходимо открыть новую сессию.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//
// Возвращаемое значение:
//  Строка - Идентификатор новой открытой сессии.
//
Функция ОткрытьСессию(Знач ПрофильИСЭСФ, ВерсияВС = Неопределено) Экспорт
	   
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОткрытьСессиюВС(ПрофильИСЭСФ, ВерсияВС);
	
КонецФункции

// Закрывает открытую сессию с ИС ЭСФ.
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, от имени которого необходимо открыть новую сессию.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ИдентификаторСессии - Строка - Идентификатор сессии, которую необходимо закрыть.
//
Процедура ЗакрытьСессию(Знач ПрофильИСЭСФ, Знач ИдентификаторСессии, ВерсияВС = Неопределено) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗакрытьСессиюВС(ПрофильИСЭСФ, ИдентификаторСессии, ВерсияВС);
	
КонецПроцедуры

// Проверяет статус активности сессии по ее идентификатору для указанного профиля. 
//
// Параметры:
//  Идентификатор - Строка - ID ранее открытой сессии
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, от имени которого ранее была открыта сессия.
//
// Возвращаемое значение:
//  Истина - Сессия активна.
//  Ложь - Сессия не активна
Функция СессияВСАктивна(Знач ИдентификаторСессии, Знач ПрофильИСЭСФ, Знач ВерсияВС = Неопределено) Экспорт	   
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СессияВСАктивна(ИдентификаторСессии, ПрофильИСЭСФ, ВерсияВС);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбменаAPI

// Создает коллекцию XML строк Invoice и коллекцию XML строк SignedContent на основе документов ЭСФ.
//
// Параметры:
//  МассивЭСФ - Массив - Входящий - Массив ЭСФ, на основе которых необходимо создать 
//   коллекцию XML строк Invoice и коллекцию XML строк SignedContent. 
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭСФ.
//  КоллекцияInvoiceXML - Соответствие - Возвращаемый - Созданная коллекция XML строк Invoice.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка Invoce.
//   |- Значение - Стркоа - Созданная XML строка Invoce.
//  КоллекцияSignedContentXML - Соответствие - Возвращаемый - Созданная коллекция XML строк SignedContent.
//   |- Ключ - ДокументСсылка.ЭСФ - ЭСФ, которому принадлежит XML строка SignedContent.
//   |- Значение - Стркоа - Созданная XML строка SignedContent.
//
Процедура СоздатьИсходящиеUForm(Знач МассивЭД, Знач УстанавливатьПодпись, Знач ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML, ВерсияВС) Экспорт
	
	ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьИсходящиеUForm(МассивЭД, УстанавливатьПодпись, ТипПодписи, КоллекцияInvoiceXML, КоллекцияSignedContentXML, ВерсияВС);
	
КонецПроцедуры

Функция ОтправитьИсходящиеUTTN(ВерсияВС, Знач КоллекцияДанныеКоллекцииUttnXML, Знач КоллекцияПодписей, Знач ДанныеПрофилейИСЭСФ) Экспорт
	//ВерсияВС, Знач КоллекцияДанныеКоллекцииUttnXML, Знач КоллекцияПодписей, Знач ДанныеПрофилейИСЭСФ
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОтправитьUTTN(ВерсияВС, КоллекцияДанныеКоллекцииUttnXML, КоллекцияПодписей, ДанныеПрофилейИСЭСФ);
	
КонецФункции

Функция ПолучитьСклады(Знач ПрофильИСЭСФ, ВерсияВС = Неопределено) Экспорт
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьСклады(ПрофильИСЭСФ, ВерсияВС);	
КонецФункции

// Синхронизация справочников
Функция ПолучитьДанныеСправочникаГСВС(знач ИдентификаторСессии, ПараметрыМетода) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьДанныеСправочникаГСВС(ИдентификаторСессии, ПараметрыМетода);
	
КонецФункции

// Выполняет метод queryUpdates() API ИС ЭСФ.
// Обновляет существующие и создает новые документы ВС, заполняет ссылочные реквизиты.
// Сохраняет lastEventDate и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭДВС будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭДВС, создаст новые ЭДВС, создаст и обновит присоединенные файлы ЭДВС.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых документов ВС.
//
Функция ПолучитьНовыеУТТН(ПараметрыВыгрузки) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьНовыеУТТН(ПараметрыВыгрузки);
	
КонецФункции

// Выполняет метод queryUFormById() API ИС ВС.
// Получает новые данные об документе ВС: статусы, состояния, рег. номера и т.д.
// Обновляет документы ВС.
//
// Параметры:
//  МассивИдентификаторовЭДВС - Массив - Идентификаторы документов ВС, для которых необходимо вызвать queryUFormByIdRequest().
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Соответствие - Полученные данные об документе ВС: статусы, состояния, рег. номера и т.д.
//   |- Ключ - Строка - Идентификатор ЭСФ.
//   |- Значение - Структура, Неопределено. 
//       Структура, если ЭСФ с указанным идентификатором найден, см. Обработки.ОбменЭСФ.ДанныеСтатусаInvoice().
//       Неопределено, в противном случае.
//
Функция ОбновитьСтатусыЭДВСПоИдентификаторам(Знач МассивИдентификаторовЭДВС, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	            
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОбновитьСтатусыЭДВСПоИдентификаторам(МассивИдентификаторовЭДВС, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

Функция ОбновитьСтатусВСПоИдентификатору(Знач ИдентификаторСтатус, Знач ПрофильИСЭСФ, ИдентификаторСессии) Экспорт
	            
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ОбновитьСтатусВСПоИдентификатору(ИдентификаторСтатус, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

// Выполняет методы ИС ВС для изменения статусов, например: canceluFormById и т.д..
// Обновляет документы ВС. Возвращает результат работы выполненного метода.
//
// Параметры:
//  Действие - Строка - Определяет, какой метод ИС ВС будет выполняться.
//   Должно быть ВСКлиентСервер.ДействиеОтмена().
//  ТекстЗапроса - Строка - Текст XML запроса на изменение статусов, 
//   формируется функцией ЭСФСервер.СоздатьЗапросНаИзменениеСтатусовВС().
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ - Профиль для установки сессии с ИС ВС.
//  ИдентификаторСессии - Строка - Идентификатор сессии, для выполения запроса к ИС ВС.
//
// Возвращаемое значение:
//  Соответствие - Результат выполнения метода ИС ВС. Содержит данные по всем идентификаторам из ТекстЗапроса.
//   |- Ключ - Строка - Идентификатор ЭСФ, для которого изменялся статус.
//   |- Значение - Структура - Результат изменения статуса.
//       |- СтатусИзменился - Булево - Признак того, что выполненный запрос изменил статус ЭСФ.
//       |- ТекущийСтатус - Структура, Неопределено - Текущий статус документа ВС. См. Обработки.ОбменВС.ДанныеСтатусаuForm(). 
//           Если в ИС ВС нет документа ВС с идентификатором из поля Ключ, то имеет значение Неопределено. 
//
Функция ВыполнитьЗапросНаИзменениеСтатусовВС(Знач Действие, Знач ТекстЗапроса, Знач ПрофильИСЭСФ, ИдентификаторСессии = Неопределено) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ВыполнитьЗапросНаИзменениеСтатусовВС(Действие, ТекстЗапроса, ПрофильИСЭСФ, ИдентификаторСессии);
	
КонецФункции

//Выполняет запрос uFormErrorById() API ИС ВС
Функция ПолучитьОшибкиЭДВСПоИдентификаторам(Знач МассивИдентификаторовЭДВС, Знач ПрофильИСЭСФ, ИдентификаторСессии, Знач ОбновитьДокументыВС) Экспорт
	            
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьОшибкиЭДВСПоИдентификаторам(МассивИдентификаторовЭДВС, ПрофильИСЭСФ, ИдентификаторСессии, ОбновитьДокументыВС);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Изменение статусов ЭСФ (Отзыв, Отклонение и т.д.)

// Возвращает текст XML запроса для изменения статуса ЭДВС,
// а также текст для формирования подписи запроса.
//
// Параметры:
//  Действие - Строка - Определяет, какой запрос будет создан.
//   Должно быть ВСКлиентСервер.ДействиеОтмена().
//  КоллецияДляИзмененияСтатусов - Соответствие - Данные для формирования запроса:
//   |- Ключ - Строка - Идентификатор ЭДВС, у которого будет изменен статус.
//   |- Значение - Строка - Причина изменения статуса.
//  ОткрытыйКлючЭЦП - Строка - Открытый ключ ЭЦП в формате Base64.
//
// Возвращаемое значение:
//  Структура - Сформированный запрос на изменение статуса.
//   |- ТекстЗапроса - Строка - Текст запроса на изменение статуса.
//   |- СтрокаДляПодписи - Строка - Строка, на основе которой будет сформирована ЭЦП запроса.
//
Функция СоздатьЗапросНаИзменениеСтатусовВС(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ОткрытыйКлючЭЦП) Экспорт
	
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьЗапросНаИзменениеСтатусовВС(Действие, КоллецияДляИзмененияСтатусов, ОткрытыйКлючЭЦП);
	
КонецФункции

#КонецОбласти 

#Область ЗаполнениеДокументаЭДВС

#Область Запросы

Функция ПолучитьТекстПакетовЗапросаДляЗаполненияЭДВС() Экспорт
	
	СтруктураДокумента 	= ВССерверПовтИсп.ПолучитьПустуюСтруктуруДокументаЭДВС();
	
	ТекстЗапроса = "";
	Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл 
		Если ЭлементСтруктуры.Ключ = "ТоварыВС" ИЛИ ЭлементСтруктуры.Ключ = "ИсходныеТоварыВС" Тогда
			Продолжить;	
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ" + ?(ЭлементСтруктуры.Ключ = "Реквизиты",  " РАЗЛИЧНЫЕ", "") + " 
		|";
		
		
		КолонкиТЧ 			= ЭлементСтруктуры.Значение.Колонки;
		НомерКолонки 		= 0;
		КоличествоКолонок 	= КолонкиТЧ.Количество();
		Для Каждого КолонкаТЧ Из КолонкиТЧ Цикл
			НомерКолонки = НомерКолонки + 1;
			ТекстЗапроса = ТекстЗапроса + "
					|вт_ДанныеДляЗаполнения." + КолонкаТЧ.Имя + ?(НомерКолонки = КоличествоКолонок, "", ",");
		КонецЦикла;	
		ТекстЗапроса = ТекстЗапроса + "
		    |
			|ИЗ вт_ДанныеДляЗаполнения КАК вт_ДанныеДляЗаполнения";
		
		Если ЭлементСтруктуры.Ключ = "Товары"  ИЛИ ЭлементСтруктуры.Ключ = "ИсходныеТовары" Тогда
			ВССерверПереопределяемый.ПрисоединитьВременнуюТаблицуЦеныНоменклатуры(ТекстЗапроса, ЭлементСтруктуры.Ключ);
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "
			|					
			|	УПОРЯДОЧИТЬ ПО
			|		ДатаИсходногоДокумента,
			|		ДокументОснование,
			|		ТипФормы,
			|		СкладОтправитель";
			
		Если ЭлементСтруктуры.Ключ = "Товары" ИЛИ ЭлементСтруктуры.Ключ = "ИсходныеТовары" Тогда	
			ТекстЗапроса = ТекстЗапроса + ",
			|		ПолеДляСортировки УБЫВ";
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "вт_ДанныеДляЗаполнения.Сумма" , "ВЫБОР
																			|		КОГДА вт_ДанныеДляЗаполнения.ТипФормы В (&ТипыФормЦены)
																			|				И ТИПЗНАЧЕНИЯ(вт_ДанныеДляЗаполнения.ДокументОснование) В (&ТипыДокументовСПерезаполнениемЦены)
																			|			ТОГДА ЕСТЬNULL(вт_ЦеныНоменклатуры.ЦенаНоменклатуры, 0) * вт_ДанныеДляЗаполнения.Количество
																			|		ИНАЧЕ вт_ДанныеДляЗаполнения.Сумма
																			|	КОНЕЦ КАК Сумма"); 
												
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "вт_ДанныеДляЗаполнения.Цена", "ВЫБОР
																			|		КОГДА вт_ДанныеДляЗаполнения.ТипФормы В (&ТипыФормЦены)
																			|				И ТИПЗНАЧЕНИЯ(вт_ДанныеДляЗаполнения.ДокументОснование) В (&ТипыДокументовСПерезаполнениемЦены)
																			|			ТОГДА ЕСТЬNULL(вт_ЦеныНоменклатуры.ЦенаНоменклатуры, 0)
																			|		ИНАЧЕ вт_ДанныеДляЗаполнения.Цена
																			|	КОНЕЦ КАК Цена"); 
	
	Возврат ТекстЗапроса; 
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияЭДВС(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение,
	|	вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель,
	|	вт_ДанныеДокумента.ОрганизацияПолучатель,
	|	вт_ДанныеДокумента.ДатаИсходногоДокумента,
	|	вт_ДанныеДокумента.Дата,
	|	вт_ДанныеДокумента.Номер,
	|	вт_ДанныеДокумента.Номер КАК НомерУчетногоДокумента,
	|	вт_ДанныеДокумента.ИмяДокумента,
	|	вт_ДанныеДокумента.ТипФормы,
	|	вт_ДанныеДокумента.ПричинаСписания,
	|	вт_ДанныеДокумента.ВидДетализации,
	|	вт_ДанныеДокумента.Статус,
	|	вт_ДанныеДокумента.Комментарий,
	|	вт_ДанныеДокумента.ДокументОснование,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДекларацияНаТовары)
	|			ТОГДА ВиртуальныйСкладНераспределенныхТоваров.Ссылка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладОтправитель) = ТИП(Справочник.ВиртуальныеСклады)
	|					ТОГДА вт_ДанныеДокумента.СкладОтправитель
	|				ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляОтправителя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|			КОНЕЦ
	|	КОНЕЦ КАК СкладОтправитель,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДекларацияНаТовары)
	|			ТОГДА ЕСТЬNULL(ВиртуальныйСкладНераспределенныхТоваров.Наименование, """")
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладОтправитель) = ТИП(Справочник.ВиртуальныеСклады)
	|					ТОГДА вт_ДанныеДокумента.СкладОтправитель.Наименование
	|				ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляОтправителя.ВиртуальныйСклад.Наименование, """")
	|			КОНЕЦ
	|	КОНЕЦ КАК СкладОтправительНаименование,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладПолучатель) = ТИП(Справочник.ВиртуальныеСклады)
	|			ТОГДА вт_ДанныеДокумента.СкладПолучатель
	|		ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляПолучателя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|	КОНЕЦ КАК СкладПолучатель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладПолучатель) = ТИП(Справочник.ВиртуальныеСклады)
	|			ТОГДА вт_ДанныеДокумента.СкладПолучатель.Наименование
	|		ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляПолучателя.ВиртуальныйСклад.Наименование, """")
	|	КОНЕЦ КАК СкладПолучательНаименование,
	|	ЕСТЬNULL(КонтактнаяИнформацияОтправителя.Наименование, """") КАК ОтправительНаименование,
	|	ЕСТЬNULL(КонтактнаяИнформацияОтправителя.ИдентификационныйНомер, """") КАК ОтправительИдентификатор,
	|	ЕСТЬNULL(КонтактнаяИнформацияОтправителя.АдресОрганизации, """") КАК ОтправительАдрес,
	|	ЕСТЬNULL(КонтактнаяИнформацияПолучателя.Наименование, """")  КАК ПолучательНаименование,
	|	ЕСТЬNULL(КонтактнаяИнформацияПолучателя.ИдентификационныйНомер, """") КАК ПолучательИдентификатор,
	|	ЕСТЬNULL(КонтактнаяИнформацияПолучателя.АдресОрганизации, """") КАК ПолучательАдрес,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.ТоварНаименование,
	|	вт_ДанныеДокумента.ТоварНаименованиеВРамкахТС,
	|	вт_ДанныеДокумента.КодТНВЭД,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения,
	|	вт_ДанныеДокумента.ЕдиницаИзмеренияКод,
	|	вт_ДанныеДокумента.Количество,
	|	вт_ДанныеДокумента.Сумма,
	|	вт_ДанныеДокумента.Цена,
	|	вт_ДанныеДокумента.СтранаПроисхожденияТовара,
	|	вт_ДанныеДокумента.СтранаПроисхожденияТовараКод,
	|	вт_ДанныеДокумента.ПризнакПроисхождения,
	|	вт_ДанныеДокумента.НомерЗаявленияВРамкахТС,
	|	вт_ДанныеДокумента.НомерПозицииВДекларацииИлиЗаявлении,
	|	вт_ДанныеДокумента.ИмяТабличнойЧасти,
	|	вт_ДанныеДокумента.ТипПошлины,
	|	вт_ДанныеДокумента.ТипПроисхождения,
	|	вт_ДанныеДокумента.ВозможенЭкспорт,
	|	вт_ДанныеДокумента.ЗапрещеноРазбиватьДокумент,
	|	вт_ДанныеДокумента.РаспределятьТоварыПоИП,
	|	вт_ДанныеДокумента.РаспределятьИсходныеТоварыПоИП,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ИсточникПроисхождения = ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(вт_ДанныеДокумента.ИсточникПроисхождения.МеткаТовара, """")
	|	КОНЕЦ КАК ФизическаяМетка,
	|	вт_ДанныеДокумента.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	0 КАК ДополнительныйИдентификатор,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ИсточникПроисхождения = ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ГСВС.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(вт_ДанныеДокумента.ИсточникПроисхождения.ГСВС, """")
	|	КОНЕЦ КАК ГСВС,
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ИсточникПроисхождения = ЗНАЧЕНИЕ(Справочник.ИсточникиПроисхождения.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ГСВС.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(вт_ДанныеДокумента.ИсточникПроисхождения.ГСВС, """")
	|	КОНЕЦ КАК СоставнойКодГСВС,
	// Было добавлено условие для ТипФормыВС - ДетализацияИмпорта, для документов "СНТ" с ТипФормыВС - ВнутреннееПеремещение или с ВидДетализации - КонвертацияМеждуЕИ,
	// чтобы ПризнакУчетаНаВиртуальномСкладе всегда был ИСТИНА, для остальных ТипФормВС условие осталось прежним. 
	|	ВЫБОР
	|		КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ДетализацияИмпорта) ИЛИ  вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.СписаниеТоваровНеВС)
	|			ИЛИ (ИмяДокумента = ""СНТ"" И ВидДетализации = ЗНАЧЕНИЕ(Перечисление.ВидДетализации.КонвертацияМеждуЕИ))
	|			ИЛИ (ИмяДокумента = ""СНТ"" И вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ)
	|	КОНЕЦ КАК ПризнакУчетаНаВиртуальномСкладе,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВС.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПолеДляСортировки,
	|	вт_ДанныеДокумента.ПрефиксВидаДокумента,
	|	вт_ДанныеДокумента.НомерУчетногоДокумента,
	|	вт_ДанныеДокумента.НомерПакета"
	+
	ВССерверПереопределяемый.ПолучитьДополнительныеПереопределяемыеПоля()
	+ "
	|ПОМЕСТИТЬ вт_ДанныеДляЗаполнения
	|ИЗ
	|	вт_ДанныеДокумента КАК вт_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КонтактнаяИнформация КАК КонтактнаяИнформацияОтправителя
	|		ПО (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|			ТОГДА вт_ДанныеДокумента.Организация = КонтактнаяИнформацияОтправителя.Организация
	|			ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = КонтактнаяИнформацияОтправителя.Организация КОНЕЦ)	
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_КонтактнаяИнформация КАК КонтактнаяИнформацияПолучателя
	|		ПО (ВЫБОР
	|				КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение) Или вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами)
	|				ТОГДА (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = &ПодразделенияОрганизацийПустаяСсылка
	|						ТОГДА вт_ДанныеДокумента.ОрганизацияПолучатель = КонтактнаяИнформацияПолучателя.Организация
	|						ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = КонтактнаяИнформацияПолучателя.Организация КОНЕЦ)	
	|				ИНАЧЕ	(ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|						ТОГДА вт_ДанныеДокумента.Организация = КонтактнаяИнформацияПолучателя.Организация
	|						ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = КонтактнаяИнформацияПолучателя.Организация КОНЕЦ)КОНЕЦ)	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляОтправителя
	|		ПО (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|			ТОГДА вт_ДанныеДокумента.Организация = СоответствиеСкладовДляОтправителя.Организация
	|			ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = СоответствиеСкладовДляОтправителя.Организация КОНЕЦ)	
	|			И вт_ДанныеДокумента.СкладОтправитель = СоответствиеСкладовДляОтправителя.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовДляПолучателя
	|		ПО (ВЫБОР
	|				КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение) Или вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПеремещениеМеждуФилиалами)
	|					ТОГДА (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = &ПодразделенияОрганизацийПустаяСсылка
	|							ТОГДА вт_ДанныеДокумента.ОрганизацияПолучатель = СоответствиеСкладовДляПолучателя.Организация
	|							ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделениеПолучатель = СоответствиеСкладовДляПолучателя.Организация КОНЕЦ)
	|				ИНАЧЕ (ВЫБОР КОГДА вт_ДанныеДокумента.СтруктурноеПодразделение = &ПодразделенияОрганизацийПустаяСсылка
	|							ТОГДА вт_ДанныеДокумента.Организация = СоответствиеСкладовДляПолучателя.Организация
	|							ИНАЧЕ вт_ДанныеДокумента.СтруктурноеПодразделение = СоответствиеСкладовДляПолучателя.Организация КОНЕЦ)КОНЕЦ)
	|			И вт_ДанныеДокумента.СкладПолучатель = СоответствиеСкладовДляПолучателя.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК ГСВС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(
	|					&ДатаСреза,
	|					НоменклатураГСВС.КодГСВС В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							вт_ДанныеДокумента.КодТНВЭД
	|						ИЗ
	|							вт_ДанныеДокумента КАК вт_ДанныеДокумента)) КАК СведенияОНоменклатуреГСВС
	|			ПО ГСВС.Ссылка = СведенияОНоменклатуреГСВС.НоменклатураГСВС.Ссылка
	|		ПО вт_ДанныеДокумента.КодТНВЭД = ГСВС.КодГСВС
	|			И (ГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|			И (СведенияОНоменклатуреГСВС.ПризнакАктивности)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныйСкладНераспределенныхТоваров
	|		ПО вт_ДанныеДокумента.Организация = ВиртуальныйСкладНераспределенныхТоваров.Организация
	|			И (ВиртуальныйСкладНераспределенныхТоваров.ПризнакОприходования = ИСТИНА)
	|ГДЕ
	|	вт_ДанныеДокумента.Количество > 0
	|	И ВЫБОР
	|			КОГДА вт_ДанныеДокумента.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ВнутреннееПеремещение)
	|				ТОГДА ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладОтправитель) = ТИП(Справочник.ВиртуальныеСклады)
	|							ТОГДА вт_ДанныеДокумента.СкладОтправитель
	|						ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляОтправителя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|					КОНЕЦ <> ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(вт_ДанныеДокумента.СкладПолучатель) = ТИП(Справочник.ВиртуальныеСклады)
	|							ТОГДА вт_ДанныеДокумента.СкладПолучатель
	|						ИНАЧЕ ЕСТЬNULL(СоответствиеСкладовДляПолучателя.ВиртуальныйСклад, ЗНАЧЕНИЕ(Справочник.ВиртуальныеСклады.ПустаяСсылка))
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";

	Возврат ТекстЗапроса + ПолучитьТекстПакетовЗапросаДляЗаполненияЭДВС();
	
КонецФункции

Функция ДополнитьТекстЗапросЗаполненияЭДВС_Расход(ТекстЗапроса) Экспорт
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение,
	|	вт_ДанныеДокумента.СкладОтправитель КАК Склад,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумента,
	|	%ДанныеДокументаЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(вт_ДанныеДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	вт_ДанныеДляЗаполнения КАК вт_ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ДанныеДокумента.ЕдиницаИзмерения,
	|	%ДанныеДокументаЕдиницаИзмерения,
	|	вт_ДанныеДокумента.Товар,
	|	вт_ДанныеДокумента.СкладОтправитель,
	|	вт_ДанныеДокумента.Организация,
	|	вт_ДанныеДокумента.СтруктурноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаВиртуальныхСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыНаВиртуальныхСкладах.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	(ТоварыНаВиртуальныхСкладах.КоличествоОстаток - ЕСТЬNULL(ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток, 0)) КАК КоличествоОстаток,
	|	ТоварыНаВиртуальныхСкладах.Организация КАК Организация,
	|	ТоварыНаВиртуальныхСкладах.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ЕстьNULL(СведенияОНоменклатуреГСВС.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий,
	|	ИсточникиПроисхождения.ТипПроисхождения КАК ТипПроисхождения,
	|	ЕСТЬNull(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе, Ложь) КАК ПризнакУчетаНаВиртСкладе,
	|	ТоварыНаВиртуальныхСкладах.Склад КАК Склад
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&ДатаОстатка,
	|			(Организация, СтруктурноеПодразделение, Склад, Номенклатура, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.Организация,
	|					Товары.СтруктурноеПодразделение,
	|					Товары.Склад,
	|					Товары.Товар,
	|					Товары.ЕдиницаИзмерения
	|				ИЗ
	|					вт_Товары КАК Товары)) КАК ТоварыНаВиртуальныхСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|			ПО ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.Срезпоследних(&ДатаОстатка) КАК СведенияОНоменклатуреГСВС
	|			ПО ИсточникиПроисхождения.ГСВС = СведенияОНоменклатуреГСВС.НоменклатураГСВС
	|			И СведенияОНоменклатуреГСВС.ПризнакАктивности = ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&ДатаОстатка,
	|			(Организация, СтруктурноеПодразделение, Склад, Номенклатура, ЕдиницаИзмерения) В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Товары.Организация,
	|					Товары.СтруктурноеПодразделение,
	|					Товары.Склад,
	|					Товары.Товар,
	|					Товары.ЕдиницаИзмерения
	|				ИЗ
	|					вт_Товары КАК Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|			ПО ТоварыНаВиртуальныхСкладах.Организация = ТоварыВиртуальногоСкладаВРезерве.Организация
	|			И ВЫБОР КОГДА &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|				ТОГДА ТоварыНаВиртуальныхСкладах.СтруктурноеПодразделение = ТоварыВиртуальногоСкладаВРезерве.СтруктурноеПодразделение
	|				ИНАЧЕ ИСТИНА КОНЕЦ 
	|			И ТоварыНаВиртуальныхСкладах.Склад = ТоварыВиртуальногоСкладаВРезерве.Склад
	|			И ТоварыНаВиртуальныхСкладах.Номенклатура = ТоварыВиртуальногоСкладаВРезерве.Номенклатура
	|			И ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения = ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения
	|			И ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения = ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СтруктурноеПодразделение,
	|	Склад,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.СтруктурноеПодразделение,
	|	Товары.Склад,
	|	Товары.Товар,
	|	Товары.ЕдиницаИзмерения,
	|	Товары.ЕдиницаИзмеренияДокумента,
	|	ОстаткиГТД.ДатаДокументПартии,
	|	ОстаткиГТД.ИсточникПроисхождения,
	|	ОстаткиГТД.ПризнакПеречняИзьятий,
	|	ОстаткиГТД.ТипПроисхождения,
	|	ОстаткиГТД.ПризнакУчетаНаВиртСкладе,
	|	ЕСТЬNULL(ОстаткиГТД.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	вт_Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|		ПО Товары.Организация = ОстаткиГТД.Организация
	|			И ВЫБОР КОГДА &ПоддержкаРаботыСоСтруктурнымиПодразделениями
	|				ТОГДА Товары.СтруктурноеПодразделение = ОстаткиГТД.СтруктурноеПодразделение
	|				ИНАЧЕ ИСТИНА КОНЕЦ
	|			И Товары.Склад = ОстаткиГТД.Склад
	|			И Товары.Товар = ОстаткиГТД.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ОстаткиГТД.ЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиГТД.ДатаДокументПартии,
	|	ОстаткиГТД.ИсточникПроисхождения";

	СоответсвиеПолейЗапросов = Новый Соответствие;
	СоответсвиеПолейЗапросов.Вставить("%ДанныеДокументаЕдиницаИзмерения", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеПолейЗапросов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеПолейЗапросов);

	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область ПодготовкаТаблицДанных

Функция ПодготовитьТаблицыДанныхДляЗаполненияЭДВС(ПараметрыЗаполнения) Экспорт 
	
	ТекстЗапроса = ВССерверПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияЭДВС(ПараметрыЗаполнения);
	
	Запрос 		 = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЭДВС(ТекстЗапроса);
	
	Если Не ПараметрыЗаполнения.ПоДвижениямДокумента 
		ИЛИ Не ПараметрыЗаполнения.ЗаполнятьЦены
		ИЛИ ПараметрыЗаполнения.СпособЗаполненияЦены <> Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.ДокументОснование = вт_ЦеныНоменклатуры.Регистратор", "");	
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением ИЛИ НЕ ПараметрыЗаполнения.ЗаполнятьЦены Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоОрганизации", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.Организация = вт_ЦеныНоменклатуры.Организация", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	ИначеЕсли ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоТипуЦены ИЛИ Не ПараметрыЗаполнения.СебестоимостьПоСкладам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	КонецЕсли;
	
	Запрос.Текст =  ТекстЗапроса;
	
	ДатаОформления	= ПараметрыЗаполнения.ДатаОформления;
	Если Не ЗначениеЗаполнено(ДатаОформления) Тогда
		ДатаОформления = ВСОбщегоНазначения.ТекущаяДатаПользователя();
		ПараметрыЗаполнения.Вставить("ДатаОформления", ДатаОформления);
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);	
	КонецЦикла;	
	
	Если Не ПараметрыЗаполнения.Свойство("ТипыДокументовСПерезаполнениемЦены") Тогда
		Запрос.УстановитьПараметр("ТипыДокументовСПерезаполнениемЦены", ВССерверПереопределяемый.ТипыДокументовСПерезаполнениемЦены());
	КонецЕсли;	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияЭДВС = Новый Структура;	
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаРеквизитов"		, РезультатЗапроса[КоличествоПакетов - 3].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаТовары"			, РезультатЗапроса[КоличествоПакетов - 2].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаИсходныеТовары"	, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	
	ВССерверПереопределяемый.ДополнитьТаблицыДанныхДляЗаполненияЭДВС(ТаблицыДанныхДляЗаполненияЭДВС, Запрос.МенеджерВременныхТаблиц);
	
	Возврат ТаблицыДанныхДляЗаполненияЭДВС;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияЭДВС_Расход(ПараметрыЗаполнения) Экспорт 
	
	ДокументыОснования = ПараметрыЗаполнения.МассивДокументов;
	
	Запрос 		 = Новый Запрос;
	ТекстЗапроса = ВССерверПереопределяемый.ПодготовитьТекстЗапросаДляЗаполненияЭДВС(ПараметрыЗаполнения);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЭДВС(ТекстЗапроса);
	ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЭДВС_Расход(ТекстЗапроса);
	
	Если Не ПараметрыЗаполнения.ПоДвижениямДокумента 
		ИЛИ Не ПараметрыЗаполнения.ЗаполнятьЦены
		ИЛИ ПараметрыЗаполнения.СпособЗаполненияЦены <> Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.ДокументОснование = вт_ЦеныНоменклатуры.Регистратор", "");	
	КонецЕсли;
	
	Если ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением ИЛИ НЕ ПараметрыЗаполнения.ЗаполнятьЦены Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.Организация = вт_ЦеныНоменклатуры.Организация", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	ИначеЕсли ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоТипуЦены ИЛИ Не ПараметрыЗаполнения.СебестоимостьПоСкладам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	Если Не ПараметрыЗаполнения.Свойство("ТипыДокументовСПерезаполнениемЦены") Тогда
		Запрос.УстановитьПараметр("ТипыДокументовСПерезаполнениемЦены", ВССерверПереопределяемый.ТипыДокументовСПерезаполнениемЦены());
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаПереходаНаВиртСклад" , Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить());
	//Запрос.УстановитьПараметр("ЭСФДата"					, КонецДня(ДокументыОснования.Дата));
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияЭДВС = Новый Структура;
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаРеквизитов"		, РезультатЗапроса[КоличествоПакетов - 6].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаТовары"			, РезультатЗапроса[КоличествоПакетов - 5].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаИсходныеТовары"	, РезультатЗапроса[КоличествоПакетов - 4].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаОстатков"		, РезультатЗапроса[КоличествоПакетов - 1].Выгрузить());
	
	Возврат ТаблицыДанныхДляЗаполненияЭДВС;
	
КонецФункции

Функция ПодготовитьТаблицыДанныхДляЗаполненияЭДВСДляЗаполненияВводаНачальныхОстатков(ПараметрыЗаполнения) Экспорт
	
	МассивОрганизаций 	= ПараметрыЗаполнения.МассивОрганизаций;
	МассивСкладов 		= ПараметрыЗаполнения.МассивСкладов;
	МассивСтруктурныхПодразделений = ПараметрыЗаполнения.МассивСтруктурныхПодразделений;
	Запрос = Новый Запрос;
	
	Если  ПараметрыЗаполнения.ЗаполнятьПоТоварамОрганизации Тогда
		ТекстЗапроса = ВССерверПереопределяемый.ТекстЗапросаВводаОстаток(ПараметрыЗаполнения);
		ТекстЗапроса = ДополнитьТекстЗапросЗаполненияЭДВС(ТекстЗапроса);
	Иначе
		ТекстЗапроса = ВССерверПереопределяемый.ТекстЗапросаВводаОстатокПоДаннымБУ(ПараметрыЗаполнения);
	КонецЕсли;	
	ПроверятьСклад = Ложь;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса	, "УПОРЯДОЧИТЬ ПО вт_ДанныеДляЗаполнения.ДокументОснование,"
											, "УПОРЯДОЧИТЬ ПО вт_ДанныеДляЗаполнения.Организация,");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.ДокументОснование = вт_ЦеныНоменклатуры.Регистратор", "");	
	
	Если ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением ИЛИ НЕ ПараметрыЗаполнения.ЗаполнятьЦены Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоОрганизации", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.Организация = вт_ЦеныНоменклатуры.Организация", "");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	ИначеЕсли ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоТипуЦены ИЛИ Не ПараметрыЗаполнения.СебестоимостьПоСкладам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"ТекстСоединенияЦеныПоСкладу", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса	,"И вт_ДанныеДляЗаполнения.СкладОтправитель = вт_ЦеныНоменклатуры.Склад", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого ЭлементСтруктуры Из ПараметрыЗаполнения Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);	
	КонецЦикла;
	
	Если Не ПараметрыЗаполнения.Свойство("ТипыДокументовСПерезаполнениемЦены") Тогда
		Запрос.УстановитьПараметр("ТипыДокументовСПерезаполнениемЦены", ВССерверПереопределяемый.ТипыДокументовСПерезаполнениемЦены());
	КонецЕсли;	
	

	Если Не ПараметрыЗаполнения.ЗаполнятьПоТоварамОрганизации 
		И ПараметрыЗаполнения.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости Тогда
		
		ТипыДокументовСПерезаполнениемЦены = Запрос.Параметры.ТипыДокументовСПерезаполнениемЦены;
	
		ИндексЭлементаМассива = ТипыДокументовСПерезаполнениемЦены.Найти(Тип("Неопределено"));
		Если ИндексЭлементаМассива <> Неопределено Тогда
			ТипыДокументовСПерезаполнениемЦены.Удалить(ИндексЭлементаМассива);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТипыДокументовСПерезаполнениемЦены", ТипыДокументовСПерезаполнениемЦены);
		
	КонецЕсли;	
	
	ДатаДокумента = НачалоДня(ПараметрыЗаполнения.ДатаПереходаНаУчетТоваровВС);
	//Запрос.УстановитьПараметр("ДатаОстатка"	 , Новый Граница(ДатаДокумента, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатка"	 , ДатаДокумента);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ДатаСреза"	 , ДатаДокумента);
	
	
	РезультатЗапроса  = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицыДанныхДляЗаполненияЭДВС = Новый Структура;
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаРеквизитов"		, РезультатЗапроса[КоличествоПакетов-3].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаТовары"			, РезультатЗапроса[КоличествоПакетов-2].Выгрузить());
	ТаблицыДанныхДляЗаполненияЭДВС.Вставить("ТаблицаИсходныеТовары"	, РезультатЗапроса[КоличествоПакетов-1].Выгрузить());
	
	Возврат ТаблицыДанныхДляЗаполненияЭДВС;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляЗаполненияЭДВС

Функция ПодготовитьДанныеДляЗаполненияЭДВС(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияЭДВС = ПодготовитьТаблицыДанныхДляЗаполненияЭДВС(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияЭДВС = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ЭтоДооформлениеПоОтклонению") Тогда
		УдалитьНенужныеСтроки(ТаблицыДанныхДляЗаполненияЭДВС, ПараметрыЗаполнения);	
	КонецЕсли;
	
	СоответсвиеДляОтбораПоСкладу = Неопределено;
	Если ПараметрыЗаполнения.Свойство("СоответсвиеДляОтбораПоСкладу") Тогда
		СоответсвиеДляОтбораПоСкладу = ПараметрыЗаполнения.СоответсвиеДляОтбораПоСкладу;
	КонецЕсли;	
	
	НеРазбиватьДокумент = Ложь;	
	Если ПараметрыЗаполнения.Свойство("НеРазбиватьДокумент") Тогда
		НеРазбиватьДокумент = ПараметрыЗаполнения.НеРазбиватьДокумент;
	КонецЕсли;	
		
	ТаблицаРеквизитов 	  = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаРеквизитов;
	ТаблицаТовары 		  = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаТовары;
	ТаблицаИсходныеТовары = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаИсходныеТовары;
	СтруктураДокумента 	  = ВССерверПовтИсп.ПолучитьПустуюСтруктуруДокументаЭДВС();
	
	СоответствиеДокументОснованиеСклад = Новый Соответствие;
	
	Реквизиты		= СтруктураДокумента.Реквизиты;
	Товары 			= СтруктураДокумента.Товары;
	ТоварыВС		= СтруктураДокумента.ТоварыВС;
	ИсходныеТовары	= СтруктураДокумента.ИсходныеТовары;
	ИсходныеТоварыВС= СтруктураДокумента.ИсходныеТоварыВС;
	
	
	СобщениеВыведено 		= Ложь;
	ТекущийДокументОснования= Неопределено;
	ТекущийТипФормы         = Неопределено;
	
	ТипыДокументовСоСкладомВТабличнойЧасти = ВССерверПереопределяемый.ТипыДокументовСоСкладомВТабличнойЧасти();
	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование 
				ИЛИ ТекущийТипФормы <> СтрокаРеквизитов.ТипФормы Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
			
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		Если ТекущийТипФормы <> СтрокаРеквизитов.ТипФормы Тогда
			ТекущийТипФормы = СтрокаРеквизитов.ТипФормы;
		КонецЕсли;
		
		ТипДокументаОснования = ТипЗнч(ТекущийДокументОснования);
		ЭтоИмпорт 			  = ВССерверПереопределяемый.ТипДокументаТаможеннойДекларации(ТипДокументаОснования);
		
		Если ПараметрыЗаполнения.Свойство("ПроверятьСклад")  Тогда
			ПроверятьСклад = ПараметрыЗаполнения.ПроверятьСклад;
		Иначе	
			ПроверятьСклад = ТипыДокументовСоСкладомВТабличнойЧасти.НайтиПоЗначению(ТипДокументаОснования) <> Неопределено;
		КонецЕсли;	
		
		Если СоответсвиеДляОтбораПоСкладу <> Неопределено Тогда
			МассивСкладовДокумента = СоответсвиеДляОтбораПоСкладу.Получить(ТекущийДокументОснования);
			Если ЭтоИмпорт Тогда
				Если МассивСкладовДокумента.Найти(СтрокаРеквизитов.СкладПолучатель) = Неопределено Тогда 
					Продолжить;
				КонецЕсли;			
			Иначе
				Если МассивСкладовДокумента.Найти(СтрокаРеквизитов.СкладОтправитель) = Неопределено Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;   			
		КонецЕсли;
				
		СкладДокументаОснования = СоответствиеДокументОснованиеСклад.Получить(ТекущийДокументОснования);
	
		Если ПроверятьСклад И СкладДокументаОснования <> Неопределено  Тогда
			Если Не СобщениеВыведено Тогда
				ТекстСообщения = НСтр("ru='В документе: %1 несколько разных складов. В электронном документе ВС будет указан склад: ""%2"" !'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокументОснования, СкладДокументаОснования); 
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				СобщениеВыведено = Истина;	
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		СобщениеВыведено = Ложь;
		Если ЭтоИмпорт Тогда
			СоответствиеДокументОснованиеСклад.Вставить(ТекущийДокументОснования, СтрокаРеквизитов.СкладПолучатель);
		Иначе			
			СоответствиеДокументОснованиеСклад.Вставить(ТекущийДокументОснования, СтрокаРеквизитов.СкладОтправитель);
		КонецЕсли;
		
		Реквизиты.Очистить();
		Товары.Очистить();
		ТоварыВС.Очистить();
		ИсходныеТовары.Очистить();
		ИсходныеТоварыВС.Очистить();
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		НоваяСтрокаРеквизитов.Дата 	= ПараметрыЗаполнения.ДатаОформления;
		НоваяСтрокаРеквизитов.Номер = "";
		
		НоваяСтрокаРеквизитов.НомерУчетногоДокумента 	= СтрокаРеквизитов.Номер;
		НоваяСтрокаРеквизитов.ПрефиксВидаДокумента 		= ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
		НоваяСтрокаРеквизитов.НомерПакета 				= ПолучитьНомерПакетаФорматированный(НомерПакета);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		ПараметрыОтбора.Вставить("ТипФормы"			, СтрокаРеквизитов.ТипФормы);
		
		Если Не ПроверятьСклад	Тогда
			Если ЭтоИмпорт Тогда
				ПараметрыОтбора.Вставить("СкладПолучатель"	, СтрокаРеквизитов.СкладПолучатель);
			Иначе	
				ПараметрыОтбора.Вставить("СкладОтправитель"	, СтрокаРеквизитов.СкладОтправитель);
			КонецЕсли;	
		КонецЕсли;	
		
		МассивСтрокТовары 		  = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		МассивСтрокИсходныеТовары = ТаблицаИсходныеТовары.НайтиСтроки(ПараметрыОтбора);
		
		Если НеРазбиватьДокумент Тогда
			Если МассивСтрокТовары.Количество() > 200 ИЛИ МассивСтрокИсходныеТовары.Количество() > 200 Тогда
				ТекстСообщения = НСтр("ru='В документе: %1 в одной из табличных частей содержится более 200 строк. В случае, если документ содержит товары виртуального склада, то рекомендуем разделить документ на несколько документов!'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокументОснования); 
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;	
			Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл	
				Если СтрокаМассива.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ = ТоварыВС.Добавить();	
				Иначе
					НоваяСтрокаТЧ = Товары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
				
				Если ТипДокументаОснования = ВССерверПереопределяемый.ТипДокументаГТДИмпорт() Тогда
					НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении = Формат(НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=") + "/1"; 
				Иначе	
					НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении = Формат(НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=");
				КонецЕсли;	
				
			КонецЦикла;
			
			Для Каждого СтрокаМассива Из МассивСтрокИсходныеТовары Цикл
				Если СтрокаМассива.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ = ИсходныеТоварыВС.Добавить();
				Иначе
					НоваяСтрокаТЧ = ИсходныеТовары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
			КонецЦикла;
			
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
			СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			
		Иначе	
			
			НомерСтроки = 0;
			ЕстьТовары 	= Ложь;
			Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл	
				ЕстьТовары 	  = Истина;
				Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ = ТоварыВС.Добавить();
					НомерСтроки = НомерСтроки + 1;
				Иначе
					НоваяСтрокаТЧ = Товары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТовары);
				
				Если ТипДокументаОснования = ВССерверПереопределяемый.ТипДокументаГТДИмпорт() Тогда
					НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении = Формат(НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=") + "/1"; 
				Иначе	
					НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении = Формат(НоваяСтрокаТЧ.НомерПозицииВДекларацииИлиЗаявлении, "ЧН=0; ЧГ=");
				КонецЕсли;	
				
				Если НомерСтроки = 200 Тогда
					Если СтрокаРеквизитов.ЗапрещеноРазбиватьДокумент Тогда
						ТекстСообщения = НСтр("ru='В документе: %1 в одной из табличных частей содержится более 200 строк. В случае, если документ содержит товары виртуального склада, то рекомендуем разделить документ на несколько документов!'");
						ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокументОснования); 
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
					Иначе	
						НомерСтроки = 0;
						НомерПакета = НомерПакета + 1;
						ЕстьТовары 	= Ложь;
						
						СтруктураДляПередачи = Новый Структура;
						СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
						СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
						СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
						СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
						СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
						ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
						
						Реквизиты.Очистить();
						Товары.Очистить();
						ТоварыВС.Очистить();
						ИсходныеТовары.Очистить();
						ИсходныеТоварыВС.Очистить();

						НоваяСтрокаРеквизитов = Реквизиты.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
						
						НоваяСтрокаРеквизитов.Дата = ПараметрыЗаполнения.ДатаОформления;
											
						НоваяСтрокаРеквизитов.ПрефиксВидаДокумента   = ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
						НоваяСтрокаРеквизитов.НомерУчетногоДокумента = СтрокаРеквизитов.Номер;
						НоваяСтрокаРеквизитов.НомерПакета 			 = ПолучитьНомерПакетаФорматированный(НомерПакета);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			Для Каждого СтрокаМассива Из МассивСтрокИсходныеТовары Цикл
				Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ = ИсходныеТоварыВС.Добавить();
				Иначе
					НоваяСтрокаТЧ = ИсходныеТовары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
			КонецЦикла;
			
			Если ЕстьТовары Тогда 
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
				СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;	
	
	ВССерверПереопределяемый.ДополнитьДанныеДляЗаполненияЭДВС(ДанныеДляЗаполнения, ТаблицыДанныхДляЗаполненияЭДВС);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияЭДВС_Расход(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияЭДВС = ПодготовитьТаблицыДанныхДляЗаполненияЭДВС_Расход(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияЭДВС = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ЭтоДооформлениеПоОтклонению") Тогда
		УдалитьНенужныеСтроки(ТаблицыДанныхДляЗаполненияЭДВС, ПараметрыЗаполнения);	
	КонецЕсли;
	
	СоответсвиеДляОтбораПоСкладу = Неопределено;
	Если ПараметрыЗаполнения.Свойство("СоответсвиеДляОтбораПоСкладу") Тогда
		СоответсвиеДляОтбораПоСкладу = ПараметрыЗаполнения.СоответсвиеДляОтбораПоСкладу;
	КонецЕсли;	
	
	НеРазбиватьДокумент = Ложь;	
	Если ПараметрыЗаполнения.Свойство("НеРазбиватьДокумент") Тогда
		НеРазбиватьДокумент = ПараметрыЗаполнения.НеРазбиватьДокумент;
	КонецЕсли;	
	
	ПодбиратьИсточникиПроисхождения = Ложь;
	Если ПараметрыЗаполнения.Свойство("ПодбиратьИсточникиПроисхождения") Тогда
		ПодбиратьИсточникиПроисхождения = ПараметрыЗаполнения.ПодбиратьИсточникиПроисхождения;
	КонецЕсли;	
	
	ТаблицаРеквизитов 		= ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаРеквизитов;
	ТаблицаТовары 			= ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаТовары;
	ТаблицаИсходныеТовары 	= ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаИсходныеТовары;
	ТаблицаОстатков         = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаОстатков;
	СтруктураДокумента 		= ВССерверПовтИсп.ПолучитьПустуюСтруктуруДокументаЭДВС();
	
	СоответствиеДокументОснованиеСклад 	= Новый Соответствие;
	
	Реквизиты		= СтруктураДокумента.Реквизиты;
	Товары 			= СтруктураДокумента.Товары;
	ТоварыВС		= СтруктураДокумента.ТоварыВС;
	ИсходныеТовары 	= СтруктураДокумента.ИсходныеТовары;
	ИсходныеТоварыВС= СтруктураДокумента.ИсходныеТоварыВС;
	
	СобщениеВыведено = Ложь;
	
	ТекущийДокументОснования = Неопределено;
	ТекущийТипФормы          = Неопределено;
	
	ТипыДокументовСоСкладомВТабличнойЧасти = ВССерверПереопределяемый.ТипыДокументовСоСкладомВТабличнойЧасти();
	Для Каждого СтрокаРеквизитов ИЗ  ТаблицаРеквизитов Цикл
		
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование 
				ИЛИ ТекущийТипФормы <> СтрокаРеквизитов.ТипФормы Тогда
			НомерПакета = 1;		
		Иначе
			НомерПакета = НомерПакета + 1;		
		КонецЕсли;		
			
		Если ТекущийДокументОснования <> СтрокаРеквизитов.ДокументОснование Тогда
			ТекущийДокументОснования = СтрокаРеквизитов.ДокументОснование;
		КонецЕсли;
		
		Если ТекущийТипФормы <> СтрокаРеквизитов.ТипФормы Тогда
			ТекущийТипФормы = СтрокаРеквизитов.ТипФормы;
		КонецЕсли;
		
		ТипДокумента   = ТипЗнч(ТекущийДокументОснования);
		ПроверятьСклад = ТипыДокументовСоСкладомВТабличнойЧасти.НайтиПоЗначению(ТипДокумента) <> Неопределено;
		
		Если СоответсвиеДляОтбораПоСкладу <> Неопределено Тогда
			МассивСкладовДокумента = СоответсвиеДляОтбораПоСкладу.Получить(ТекущийДокументОснования);
			Если МассивСкладовДокумента.Найти(СтрокаРеквизитов.СкладОтправитель) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		СкладДокументаОснования = СоответствиеДокументОснованиеСклад.Получить(ТекущийДокументОснования);
	
		Если ПроверятьСклад  И СкладДокументаОснования <> Неопределено  Тогда
			Если Не СобщениеВыведено Тогда
				ТекстСообщения = НСтр("ru='В документе: %1 несколько разных складов. В электронном документе ВС будет указан склад: ""%2"" !'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокументОснования, СкладДокументаОснования); 
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				СобщениеВыведено = Истина;	
			КонецЕсли;	
			Продолжить;
		КонецЕсли;
		
		СобщениеВыведено = Ложь;
		СоответствиеДокументОснованиеСклад.Вставить(ТекущийДокументОснования, СтрокаРеквизитов.СкладОтправитель);
		
		Реквизиты.Очистить();
		Товары.Очистить();
		ТоварыВС.Очистить();
		ИсходныеТовары.Очистить();
		ИсходныеТоварыВС.Очистить();
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
	
		НоваяСтрокаРеквизитов.Дата 	= ПараметрыЗаполнения.ДатаОформления;
		НоваяСтрокаРеквизитов.Номер = "";
		
		// удаляем лидирующие нули из номера объекта
		Если СтрДлина(СтрокаРеквизитов.Номер) > 25 Тогда
			НомерОбъекта = ВССерверПереопределяемый.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаРеквизитов.Номер);
		Иначе
			НомерОбъекта = СтрокаРеквизитов.Номер;
		КонецЕсли;
		НоваяСтрокаРеквизитов.НомерУчетногоДокумента = НомерОбъекта;
		
		НоваяСтрокаРеквизитов.ПрефиксВидаДокумента 	 = ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
		НоваяСтрокаРеквизитов.НомерПакета 			 = ПолучитьНомерПакетаФорматированный(НомерПакета);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ДокументОснование", ТекущийДокументОснования);
		ПараметрыОтбора.Вставить("ТипФормы"			, СтрокаРеквизитов.ТипФормы);
		
		Если Не ПроверятьСклад	Тогда
			ПараметрыОтбора.Вставить("СкладОтправитель"	, СтрокаРеквизитов.СкладОтправитель);
		КонецЕсли;	
		
		МассивСтрокТовары 			= ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		МассивСтрокИсходныеТовары 	= ТаблицаИсходныеТовары.НайтиСтроки(ПараметрыОтбора);
		
		ТоварыИП 			= Товары.СкопироватьКолонки();
		ИсходныеТоварыИП 	= ИсходныеТовары.СкопироватьКолонки();
		
		КоличествоСтрокТоварыВС = 0;
		Для Каждого СтрокаТовары Из МассивСтрокТовары Цикл
			Если ПодбиратьИсточникиПроисхождения И СтрокаРеквизитов.РаспределятьТоварыПоИП Тогда
				
				ЕдиницаИзмеренияОтбора = ВССерверПереопределяемый.ПолучитьЕдиницуИзмеренияОтбора(СтрокаТовары);
				
				ПараметрыОтбораОстатков = Новый Структура;
				ПараметрыОтбораОстатков.Вставить("Организация"		, СтрокаТовары.Организация);
				ПараметрыОтбораОстатков.Вставить("Склад"			, СтрокаТовары.СкладОтправитель);
				ПараметрыОтбораОстатков.Вставить("Товар"			, СтрокаТовары.Товар);
				ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"	, ЕдиницаИзмеренияОтбора);
				
				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
				
				КоличествоОсталосьПогасить = СтрокаТовары.Количество;
				Для Каждого СтрокаИП Из МассивСтрокОстатков Цикл			
					Если КоличествоОсталосьПогасить <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаИП.КоличествоОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСтроки = Мин(СтрокаИП.КоличествоОстаток, КоличествоОсталосьПогасить);
					
					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить -  КоличествоСтроки;	
					НоваяСтрока = ТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары,,"ЕдиницаИзмерения");
					
					Если ЗначениеЗаполнено(СтрокаИП.ИсточникПроисхождения) Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП.ИсточникПроисхождения);
					КонецЕсли;	
					
					НоваяСтрока.ЕдиницаИзмерения = СтрокаИП.ЕдиницаИзмеренияДокумента;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.ТоварНаименование) Тогда
						НоваяСтрока.ТоварНаименование = СтрокаТовары.ТоварНаименование;	
					КонецЕсли;	
					
					НоваяСтрока.ФизическаяМетка 	  = СтрокаИП.ИсточникПроисхождения.МеткаТовара;
					НоваяСтрока.ИсточникПроисхождения = СтрокаИП.ИсточникПроисхождения; 
					НоваяСтрока.СоставнойКодГСВС	  = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(НоваяСтрока.ГСВС, "Наименование");
					НоваяСтрока.Количество  		  = КоличествоСтроки;		
					НоваяСтрока.Сумма 				  = НоваяСтрока.Количество * НоваяСтрока.Цена;
					СтрокаИП.КоличествоОстаток = СтрокаИП.КоличествоОстаток - КоличествоСтроки; 
					НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе = СтрокаИП.ПризнакУчетаНаВиртСкладе;

					Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
						КоличествоСтрокТоварыВС = КоличествоСтрокТоварыВС + 1;
					КонецЕсли;
					
					Если СтрокаРеквизитов.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение  Тогда
						ПараметрыОтбораОстатков = Новый Структура;
						ПараметрыОтбораОстатков.Вставить("Организация"			, НоваяСтрока.ОрганизацияПолучатель);
						ПараметрыОтбораОстатков.Вставить("Склад"				, НоваяСтрока.СкладПолучатель);
						ПараметрыОтбораОстатков.Вставить("Товар"				, НоваяСтрока.Товар);
						ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"		, ЕдиницаИзмеренияОтбора);
						ПараметрыОтбораОстатков.Вставить("ИсточникПроисхождения", НоваяСтрока.ИсточникПроисхождения);
						МассивСтрокОстатковПриход = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
						
						СтрокаОстатковПриход = ?(МассивСтрокОстатковПриход.Количество() = 0, ТаблицаОстатков.Добавить(), МассивСтрокОстатковПриход[0]);
						
						СтрокаОстатковПриход.ДатаДокументПартии		= Дата(1,1,1);
						Если ЗначениеЗаполнено(НоваяСтрока.ИсточникПроисхождения) Тогда
							ДокументПарти = НоваяСтрока.ИсточникПроисхождения.ДокументПартии;
							Если ЗначениеЗаполнено(ДокументПарти) Тогда
								СтрокаОстатковПриход.ДатаДокументПартии = ДокументПарти.Дата;
							КонецЕсли;	
						КонецЕсли;	
						СтрокаОстатковПриход.ЕдиницаИзмерения			= ЕдиницаИзмеренияОтбора;
						СтрокаОстатковПриход.ЕдиницаИзмеренияДокумента	= НоваяСтрока.ЕдиницаИзмерения;
						СтрокаОстатковПриход.ИсточникПроисхождения		= НоваяСтрока.ИсточникПроисхождения;
						СтрокаОстатковПриход.КоличествоОстаток			= ?(ЗначениеЗаполнено(СтрокаОстатковПриход.КоличествоОстаток), СтрокаОстатковПриход.КоличествоОстаток, 0)  + НоваяСтрока.Количество;
						СтрокаОстатковПриход.Организация				= НоваяСтрока.ОрганизацияПолучатель;
						СтрокаОстатковПриход.Склад						= НоваяСтрока.СкладПолучатель;
						СтрокаОстатковПриход.ТипПроисхождения			= НоваяСтрока.ТипПроисхождения;
						СтрокаОстатковПриход.Товар 						= НоваяСтрока.Товар;
					КонецЕсли;	
						
				КонецЦикла;
				
				Если КоличествоОсталосьПогасить > 0 Тогда
					НоваяСтрока 						= ТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					НоваяСтрока.Количество 				= КоличествоОсталосьПогасить;
					НоваяСтрока.Сумма 					= НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.ИсточникПроисхождения 	= ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
					
					ТекстОшибки = НСтр("ru='В Документе <%1> не распределено по источникам происхождения товара <%2> в количестве %3 %4 по организации <%5> на складе <%6>.' ");
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекущийДокументОснования, НоваяСтрока.Товар,
					КоличествоОсталосьПогасить, СтрокаТовары.ЕдиницаИзмерения, СтрокаТовары.Организация,СтрокаТовары.СкладОтправитель);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
					Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
						КоличествоСтрокТоварыВС = КоличествоСтрокТоварыВС + 1;
					КонецЕсли;
					
					Если СтрокаРеквизитов.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение  Тогда
						ПараметрыОтбораОстатков = Новый Структура;
						ПараметрыОтбораОстатков.Вставить("Организация"			, НоваяСтрока.ОрганизацияПолучатель);
						ПараметрыОтбораОстатков.Вставить("Склад"				, НоваяСтрока.СкладПолучатель);
						ПараметрыОтбораОстатков.Вставить("Товар"				, НоваяСтрока.Товар);
						ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"		, ЕдиницаИзмеренияОтбора);
						ПараметрыОтбораОстатков.Вставить("ИсточникПроисхождения", НоваяСтрока.ИсточникПроисхождения);
						МассивСтрокОстатковПриход = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
						
						СтрокаОстатковПриход = ?(МассивСтрокОстатковПриход.Количество() = 0, ТаблицаОстатков.Добавить(), МассивСтрокОстатковПриход[0]);
						
						СтрокаОстатковПриход.ДатаДокументПартии		= Дата(1,1,1);
						Если ЗначениеЗаполнено(НоваяСтрока.ИсточникПроисхождения) Тогда
							ДокументПарти = НоваяСтрока.ИсточникПроисхождения.ДокументПартии;
							Если ЗначениеЗаполнено(ДокументПарти) Тогда
								СтрокаОстатковПриход.ДатаДокументПартии = ДокументПарти.Дата;
							КонецЕсли;	
						КонецЕсли;	
						СтрокаОстатковПриход.ЕдиницаИзмерения			= ЕдиницаИзмеренияОтбора;
						СтрокаОстатковПриход.ЕдиницаИзмеренияДокумента	= НоваяСтрока.ЕдиницаИзмерения;
						СтрокаОстатковПриход.КоличествоОстаток			= ?(ЗначениеЗаполнено(СтрокаОстатковПриход.КоличествоОстаток), СтрокаОстатковПриход.КоличествоОстаток, 0) + НоваяСтрока.Количество;
						СтрокаОстатковПриход.Организация				= НоваяСтрока.ОрганизацияПолучатель;
						СтрокаОстатковПриход.Склад						= НоваяСтрока.СкладПолучатель;
						СтрокаОстатковПриход.ТипПроисхождения			= НоваяСтрока.ТипПроисхождения;
						СтрокаОстатковПриход.Товар 						= НоваяСтрока.Товар;
					КонецЕсли;	
					
				КонецЕсли;	
				
			Иначе
				НоваяСтрока = ТоварыИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
					КоличествоСтрокТоварыВС = КоличествоСтрокТоварыВС + 1;
				КонецЕсли;	
				
				Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе И ЗначениеЗаполнено(СтрокаТовары.ИсточникПроисхождения) И Не ЗначениеЗаполнено(НоваяСтрока.ДополнительныйИдентификатор)  Тогда
					//заполним доп. ИД
					//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары.ИсточникПроисхождения);
					НоваяСтрока.ДополнительныйИдентификатор = СтрокаТовары.ИсточникПроисхождения.ДополнительныйИдентификатор
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;
		
		КоличествоСтрокИсходныеТоварыВС = 0;
		Для Каждого СтрокаИсходныеТовары Из МассивСтрокИсходныеТовары Цикл
			Если ПодбиратьИсточникиПроисхождения И СтрокаРеквизитов.РаспределятьИсходныеТоварыПоИП Тогда
				
				ЕдиницаИзмеренияОтбора = ВССерверПереопределяемый.ПолучитьЕдиницуИзмеренияОтбора(СтрокаИсходныеТовары);
				
				ПараметрыОтбораОстатков = Новый Структура;
				ПараметрыОтбораОстатков.Вставить("Организация"		, СтрокаИсходныеТовары.Организация);
				ПараметрыОтбораОстатков.Вставить("Склад"			, СтрокаИсходныеТовары.СкладОтправитель);
				ПараметрыОтбораОстатков.Вставить("Товар"			, СтрокаИсходныеТовары.Товар);
				ПараметрыОтбораОстатков.Вставить("ЕдиницаИзмерения"	, ЕдиницаИзмеренияОтбора);
				
				МассивСтрокОстатков = ТаблицаОстатков.НайтиСтроки(ПараметрыОтбораОстатков);
				
				КоличествоОсталосьПогасить = СтрокаИсходныеТовары.Количество;
				Для Каждого СтрокаИП Из МассивСтрокОстатков Цикл			
					Если КоличествоОсталосьПогасить <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаИП.КоличествоОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					КоличествоСтроки = Мин(СтрокаИП.КоличествоОстаток, КоличествоОсталосьПогасить);
					
					КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСтроки;	
					НоваяСтрока = ИсходныеТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходныеТовары);
					
					Если ЗначениеЗаполнено(СтрокаИП.ИсточникПроисхождения) Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП.ИсточникПроисхождения);
					КонецЕсли;
					
					НоваяСтрока.ЕдиницаИзмерения = СтрокаИП.ЕдиницаИзмеренияДокумента;
					
					Если Не ЗначениеЗаполнено(НоваяСтрока.ТоварНаименование) Тогда
						НоваяСтрока.ТоварНаименование = СтрокаИсходныеТовары.ТоварНаименование;	
					КонецЕсли;
					
					НоваяСтрока.СтранаПроисхожденияТовараКод = ВССерверПереопределяемый.ПолучитьКодСтраныПроисхожденияТовара(НоваяСтрока.СтранаПроисхожденияТовара);
					НоваяСтрока.ПризнакПроисхождения		 = ВСКлиентСервер.ОпределитьПризнакПроисхожденияТовара(СтрокаИП.ТипПроисхождения, СтрокаИП.ПризнакПеречняИзьятий);	
					НоваяСтрока.ФизическаяМетка				 = СтрокаИП.ИсточникПроисхождения.МеткаТовара;
					НоваяСтрока.ИсточникПроисхождения 		 = СтрокаИП.ИсточникПроисхождения;
					НоваяСтрока.СоставнойКодГСВС	  		 = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(НоваяСтрока.ГСВС, "Наименование");
					НоваяСтрока.Количество  				 = КоличествоСтроки;		
					НоваяСтрока.Сумма 						 = НоваяСтрока.Количество * НоваяСтрока.Цена;
					СтрокаИП.КоличествоОстаток 				 = СтрокаИП.КоличествоОстаток - КоличествоСтроки; 
					НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе = СтрокаИП.ПризнакУчетаНаВиртСкладе;
			
					Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
						КоличествоСтрокИсходныеТоварыВС = КоличествоСтрокИсходныеТоварыВС + 1;
					КонецЕсли;					
				КонецЦикла;
				
				Если КоличествоОсталосьПогасить > 0 Тогда
					НоваяСтрока 						= ИсходныеТоварыИП.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходныеТовары);
					НоваяСтрока.Количество 				= КоличествоОсталосьПогасить;
					НоваяСтрока.Сумма 					= НоваяСтрока.Количество * НоваяСтрока.Цена;
					НоваяСтрока.ИсточникПроисхождения 	=  ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
					
					ТекстОшибки = НСтр("ru='В Документе <%1> не распределено по источникам происхождения товара <%2> в количестве %3 %4 по организации <%5> на складе <%6>.' ");
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекущийДокументОснования, НоваяСтрока.Товар,
					КоличествоОсталосьПогасить, СтрокаИсходныеТовары.ЕдиницаИзмерения, СтрокаИсходныеТовары.Организация,СтрокаИсходныеТовары.СкладОтправитель);
					
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
					Если НоваяСтрока.ПризнакУчетаНаВиртуальномСкладе Тогда
						КоличествоСтрокИсходныеТоварыВС = КоличествоСтрокИсходныеТоварыВС + 1;
					КонецЕсли;
				КонецЕсли;
				
			Иначе	
				НоваяСтрокаТЧ = ИсходныеТоварыИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИсходныеТовары);
				Если НоваяСтрокаТЧ.ПризнакУчетаНаВиртуальномСкладе Тогда
					КоличествоСтрокИсходныеТоварыВС = КоличествоСтрокИсходныеТоварыВС + 1;
				КонецЕсли;
				
				Если НоваяСтрокаТЧ.ПризнакУчетаНаВиртуальномСкладе И ЗначениеЗаполнено(СтрокаИсходныеТовары.ИсточникПроисхождения) 
					И Не ЗначениеЗаполнено(НоваяСтрокаТЧ.ДополнительныйИдентификатор) Тогда
					//заполним доп. ИД
					НоваяСтрокаТЧ.ДополнительныйИдентификатор = СтрокаИсходныеТовары.ИсточникПроисхождения.ДополнительныйИдентификатор;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;

		//
			
		Если НеРазбиватьДокумент ИЛИ СтрокаРеквизитов.ЗапрещеноРазбиватьДокумент Тогда
			Если (КоличествоСтрокТоварыВС > 200 ИЛИ КоличествоСтрокИсходныеТоварыВС > 200) Тогда
				ТекстСообщения = НСтр("ru='В документе: %1 в одной из табличных частей содержится более 200 строк. Рекомендуем разделить документ на несколько!'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущийДокументОснования); 
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;	
			
			Для Каждого СтрокаТовары Из ТоварыИП Цикл
				ЕстьТовары 		= Истина;
				Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ 	= ТоварыВС.Добавить();
				Иначе
					НоваяСтрокаТЧ 	= Товары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТовары);
			КонецЦикла;
			
			Для Каждого СтрокаИсходныеТовары Из ИсходныеТоварыИП Цикл
				ЕстьТовары 		= Истина;
				Если СтрокаИсходныеТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ 	= ИсходныеТоварыВС.Добавить();
				Иначе
					НоваяСтрокаТЧ 	= ИсходныеТовары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИсходныеТовары);
			КонецЦикла;
			
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
			СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		Иначе
			НомерСтроки = 0;
			ЕстьТовары = Ложь;
			Для Каждого СтрокаТовары Из ТоварыИП Цикл
				Если СтрокаТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрока = ТоварыВС.Добавить();
					НомерСтроки = НомерСтроки + 1;
				Иначе
					НоваяСтрока = Товары.Добавить();
				КонецЕсли;	
				ЕстьТовары 	= Истина;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				
				Если НомерСтроки = 200 Тогда
					НомерПакета = НомерПакета + 1;
					НомерСтроки = 0;
					ЕстьТовары 	= Ложь;
					СтруктураДляПередачи = Новый Структура;
					СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
					СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
					СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
					СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
					СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
					ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
					
					Реквизиты.Очистить();
					Товары.Очистить();
					ТоварыВС.Очистить();
					ИсходныеТовары.Очистить();
					ИсходныеТоварыВС.Очистить();

					НоваяСтрокаРеквизитов = Реквизиты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
					
					НоваяСтрокаРеквизитов.Дата 					= ПараметрыЗаполнения.ДатаОформления;
					НоваяСтрокаРеквизитов.НомерПакета 			= ПолучитьНомерПакетаФорматированный(НомерПакета);
					НоваяСтрокаРеквизитов.ПрефиксВидаДокумента 	= ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
					НоваяСтрокаРеквизитов.НомерУчетногоДокумента= СтрокаРеквизитов.Номер;
					
				КонецЕсли;	
			КонецЦикла;
			
			Для Каждого СтрокаИсходныеТовары Из ИсходныеТоварыИП Цикл
				ЕстьТовары 		= Истина;
				Если СтрокаИсходныеТовары.ПризнакУчетаНаВиртуальномСкладе Тогда
					НоваяСтрокаТЧ 	= ИсходныеТоварыВС.Добавить();
				Иначе
					НоваяСтрокаТЧ 	= ИсходныеТовары.Добавить();
				КонецЕсли;	
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаИсходныеТовары);
			КонецЦикла;
			
			Если ЕстьТовары Тогда 
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
				СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
			КонецЕсли;	
	
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;	
КонецФункции

Функция ПодготовитьДанныеДляЗаполненияЭДВС_ВводНачальныхОстатков(ПараметрыЗаполнения) Экспорт
	
	ДанныеДляЗаполнения = Новый Массив;
	
	ТаблицыДанныхДляЗаполненияЭДВС = ПодготовитьТаблицыДанныхДляЗаполненияЭДВСДляЗаполненияВводаНачальныхОстатков(ПараметрыЗаполнения);
	Если ТаблицыДанныхДляЗаполненияЭДВС = Неопределено Тогда
		Возврат ДанныеДляЗаполнения;
	КонецЕсли;
	
	ТаблицаРеквизитов 	  = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаРеквизитов;
	ТаблицаТовары 		  = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаТовары;
	ТаблицаИсходныеТовары = ТаблицыДанныхДляЗаполненияЭДВС.ТаблицаИсходныеТовары;
	СтруктураДокумента 	  = ВССерверПовтИсп.ПолучитьПустуюСтруктуруДокументаЭДВС();
	
	СоответствиеДокументОснованиеСклад 	= Новый Соответствие;
	
	Реквизиты			= СтруктураДокумента.Реквизиты;
	Товары 				= СтруктураДокумента.Товары;
	ТоварыВС			= СтруктураДокумента.ТоварыВС;
	ИсходныеТовары 		= СтруктураДокумента.ИсходныеТовары;
	ИсходныеТоварыВС	= СтруктураДокумента.ИсходныеТоварыВС;
	ТекущаяОрганизация 	= Неопределено;
	
	Для Каждого СтрокаРеквизитов ИЗ ТаблицаРеквизитов Цикл
		
		Если ТекущаяОрганизация = Неопределено 
				ИЛИ ТекущаяОрганизация <> СтрокаРеквизитов.Организация Тогда
			ТекущаяОрганизация 	= СтрокаРеквизитов.Организация;
		КонецЕсли;	
		
		Реквизиты.Очистить();
		Товары.Очистить();
		ТоварыВС.Очистить();
		ИсходныеТовары.Очистить();
		ИсходныеТоварыВС.Очистить();
		
		НоваяСтрокаРеквизитов = Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
		
		НоваяСтрокаРеквизитов.Дата = СтрокаРеквизитов.Дата;
		
		НоваяСтрокаРеквизитов.НомерУчетногоДокумента = СтрокаРеквизитов.Номер;
		НоваяСтрокаРеквизитов.ПрефиксВидаДокумента 	 = ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
		НоваяСтрокаРеквизитов.НомерПакета 			 = ПолучитьНомерПакетаФорматированный(1);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Организация"		, СтрокаРеквизитов.Организация);
		ПараметрыОтбора.Вставить("СкладОтправитель"	, СтрокаРеквизитов.СкладОтправитель);
		
		МассивСтрокТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		
		НомерСтроки = 0;
		НомерПакета = 1;
		ЕстьТовары	= Ложь;
		
		МаксНомерСтрокиТЧ = 10000;
		НомерСтрокиТЧ = 0;
		
		Для Каждого СтрокаМассива Из МассивСтрокТовары Цикл
			Если СтрокаМассива.ПризнакУчетаНаВиртуальномСкладе Тогда
				НоваяСтрокаТЧ = ТоварыВС.Добавить();
			Иначе
				НоваяСтрокаТЧ = Товары.Добавить();
			КонецЕсли;	
			ЕстьТовары 	  = Истина;
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаМассива);
			Если НоваяСтрокаТЧ.ПризнакУчетаНаВиртуальномСкладе Тогда
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			
			Если НомерСтроки = 200 Или НомерСтрокиТЧ = МаксНомерСтрокиТЧ Тогда
				ЕстьТовары 	= Ложь;
				НомерСтроки = 0;
				НомерПакета = НомерПакета + 1;
				СтруктураДляПередачи = Новый Структура;
				СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
				СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
				СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
				СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
				ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
				
				Реквизиты.Очистить();
				Товары.Очистить();
				ТоварыВС.Очистить();
				ИсходныеТовары.Очистить();
				ИсходныеТоварыВС.Очистить();
				
				НоваяСтрокаРеквизитов = Реквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРеквизитов, СтрокаРеквизитов);
				
				НоваяСтрокаРеквизитов.Дата 	= СтрокаРеквизитов.Дата;
				
				НоваяСтрокаРеквизитов.ПрефиксВидаДокумента   = ВССерверПереопределяемый.ПолучитьПрефиксВидаДокумента(СтрокаРеквизитов.ИмяДокумента);
				НоваяСтрокаРеквизитов.НомерУчетногоДокумента = СтрокаРеквизитов.Номер;
				НоваяСтрокаРеквизитов.НомерПакета 			 = ПолучитьНомерПакетаФорматированный(НомерПакета);

			КонецЕсли;	
		КонецЦикла;
		
		Если ЕстьТовары Тогда 
			СтруктураДляПередачи = Новый Структура;
			СтруктураДляПередачи.Вставить("Реквизиты"		, Реквизиты.Скопировать());
			СтруктураДляПередачи.Вставить("Товары"			, Товары.Скопировать());
			СтруктураДляПередачи.Вставить("ТоварыВС"		, ТоварыВС.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТовары"	, ИсходныеТовары.Скопировать());
			СтруктураДляПередачи.Вставить("ИсходныеТоварыВС", ИсходныеТоварыВС.Скопировать());
			ДанныеДляЗаполнения.Добавить(СтруктураДляПередачи);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

Процедура УдалитьНенужныеСтроки(ПараметрыДляЗаполнения, ПараметрыСоздания)
	
	ТоварыПоложительноеОтклонение 			= ПараметрыСоздания.ТоварыПоложительноеОтклонение;
	ИсходыеТоварыПоложительноеОтклонение 	= ПараметрыСоздания.ТоварыПоложительноеОтклонение;
	
    Документ 						= ПараметрыСоздания.Документ;
	ТипДокумента 					= ТипЗнч(Документ);
	ЭтоИмпорт 						= ВССерверПереопределяемый.ТипДокументаТаможеннойДекларации(ТипДокумента);
	ЭтоРеализацияСП 				= ВССерверПереопределяемый.ТипДокументаРеализацияСтруктурномуПодразделению(ТипДокумента);
	ТаблицаТовары					= ПараметрыДляЗаполнения.ТаблицаТовары;
	ВременнаяТаблицаТовары 			= ТаблицаТовары.СкопироватьКолонки();
	ТаблицаИсходныеТовары			= ПараметрыДляЗаполнения.ТаблицаИсходныеТовары;
	ВременнаяТаблицаИсходныеТовары 	= ТаблицаИсходныеТовары.СкопироватьКолонки();
	
	МассивСкладовДокумента = ПараметрыСоздания.СоответсвиеДляОтбораПоСкладу.Получить(Документ);
	Для Каждого СтрокаМассив Из МассивСкладовДокумента Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Склад", СтрокаМассив);
		
		СтрокиТоварыПоложительноеОтклонение 		= ТоварыПоложительноеОтклонение.НайтиСтроки(ПараметрыОтбора);
		СтрокиИсходыеТоварыПоложительноеОтклонение 	= ИсходыеТоварыПоложительноеОтклонение.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТЧ Из СтрокиТоварыПоложительноеОтклонение Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить(?(ЭтоИмпорт, "СкладПолучатель", "СкладОтправитель"), СтрокаМассив);
			ПараметрыОтбора.Вставить("Товар"			, СтрокаТЧ.Товар);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения"	, СтрокаТЧ.ЕдиницаИзмерения);
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				НоваяСтрока = ВременнаяТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				НоваяСтрока.Количество  = Мин(СтрокаТЧ.Количество, НоваяСтрока.Количество);
				СтрокаТЧ.Количество 	= СтрокаТЧ.Количество - НоваяСтрока.Количество;
				НоваяСтрока.Сумма		= НоваяСтрока.Количество * НоваяСтрока.Цена;
				Если СтрокаТЧ.Количество = 0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиИсходыеТоварыПоложительноеОтклонение Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить(?(ЭтоИмпорт, "СкладПолучатель", "СкладОтправитель"), СтрокаМассив);
			ПараметрыОтбора.Вставить("Товар"			, СтрокаТЧ.Товар);
			ПараметрыОтбора.Вставить("ЕдиницаИзмерения"	, СтрокаТЧ.ЕдиницаИзмерения);
			СтрокиИсходныеТовары = ТаблицаИсходныеТовары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаИсходныеТовары Из СтрокиИсходныеТовары Цикл
				НоваяСтрока = ВременнаяТаблицаИсходныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				НоваяСтрока.Количество = Мин(СтрокаТЧ.Количество, НоваяСтрока.Количество);
				СтрокаТЧ.Количество = СтрокаТЧ.Количество - НоваяСтрока.Количество;
				НоваяСтрока.Сумма	= НоваяСтрока.Количество * НоваяСтрока.Цена;
				Если СтрокаТЧ.Количество = 0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыДляЗаполнения.ТаблицаТовары 			= ВременнаяТаблицаТовары;
	ПараметрыДляЗаполнения.ТаблицаИсходныеТовары 	= ВременнаяТаблицаИсходныеТовары;
	
КонецПроцедуры

Функция ПолучитьМаксимальныйНомерПакета(ДокументОснование) Экспорт 
	НомерПакета = 1;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлектронныйДокументВС.НомерПакета КАК НомерПакета
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПакета УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ВыборкаЗапрса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапрса.Следующий() Тогда
		НомерПакета = Число(ВыборкаЗапрса.НомерПакета) + 1;
	КонецЕсли;	
	
	Возврат ПолучитьНомерПакетаФорматированный(НомерПакета);
	
КонецФункции	

Функция ПолучитьЗначениеВремеммойТаблицыЗапроса(МенеджерВременныхТаблиц,ИмяВремеммойТаблицы ="") Экспорт

	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= МенеджерВременныхТаблиц;
	Запрос.Текст 					=
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВременнаяТаблица КАК ВременнаяТаблица";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВременнаяТаблица",ИмяВремеммойТаблицы); 

	Возврат Запрос.Выполнить().Выгрузить(); 

КонецФункции

//Функция возвращает параметры заполнения ЭДВС настроеные по умолчанию
//
Функция ПолучитьПараметрыЗаполненияЭДВСПоУмолчанию() Экспорт
	
	ПараметрыЗаполненияЭДВС = Новый Структура;	
	
	//Получаем Параметры заполнения цены. Предпологаемые параметры:
	//	СпособЗаполненияЦены 	- Способ заполнения цены в расходных документах. Может принимать значения "По сибистоимости", "По типу цены", "Фиксированным значением"
	//  ПоДвижениямДокумента	- Цена расчитывается исходя из движений первичного документа
	//	ТипЦены					- Тип цены номенклатуры. (Используется при способе заполнения равным "По типу цены"),
	// 	Значение                - Фиксированное значение цены. (Используется при способе заполнения равным "Фиксированным значением"),
	//  ЗаполнятьЦены			- Нужно ли заполнять цену в ЭДВС, в приходных документах заполняется из первичного документа
	//  ТипыФормЦены			- массив типов форм ЭДВС, в которых необходимо заполнять цену
	ПараметрыЭДВС = ПолучитьПараметрыЭДВС();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыЭДВС Цикл
		ПараметрыЗаполненияЭДВС.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	ПараметрыЗаполненияЭДВС.Вставить("ЗаполнятьЦены"						, Ложь);
	ПараметрыЗаполненияЭДВС.Вставить("ТипыФормЦены"							, ВССерверПереопределяемый.ТипыФормЭДВСВКоторыхУстанавливаютсяЦены());
	ПараметрыЗаполненияЭДВС.Вставить("ТипыДокументовСПерезаполнениемЦены" 	, ВССерверПереопределяемый.ТипыДокументовСПерезаполнениемЦены());
	
	ПараметрыЗаполненияЭДВС.Вставить("ПоДвижениямДокумента", ПараметрыЗаполненияЭДВС.СпособЗаполненияЦены = Перечисления.СпособЗаполненияЦеныЭДВС.ПоСебестоимости);
	
	ДополнительныеПараметрыЗапросаБУ = ВССерверПереопределяемый.ПолучитьДополнительныеПараметрыЗапросаБУ();
	Для Каждого ЭлементСтрукуры  Из ДополнительныеПараметрыЗапросаБУ Цикл
		ПараметрыЗаполненияЭДВС.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	ПредопределенноеЗначениеСтраны = ЭСФКлиентСерверПереопределяемый.ПолучитьПредопределенноеЗначениеСтраны();
	ПараметрыЗаполненияЭДВС.Вставить("КазахстанСсылкаСтранаПроисхождения"	, ПредопределенноеЗначениеСтраны);
	ПараметрыЗаполненияЭДВС.Вставить("КазахстанКодАльфа2"					, ПредопределенноеЗначениеСтраны.КодАльфа2);
	
	ДатаОформления = ВСОбщегоНазначения.ТекущаяДатаПользователя();
	ПараметрыЗаполненияЭДВС.Вставить("ДатаОформления"					, ДатаОформления);
	ПараметрыЗаполненияЭДВС.Вставить("НеРазбиватьДокумент"				, Истина);
	ПараметрыЗаполненияЭДВС.Вставить("ПодбиратьИсточникиПроисхождения"	, Истина);
	
	ПараметрыЗаполненияЭДВС.Вставить("ДатаСреза"	, КонецДня(ДатаОформления));
	ПараметрыЗаполненияЭДВС.Вставить("ДатаОстатка"	, Новый Граница(КонецДня(ДатаОформления), ВидГраницы.Включая));
	ПараметрыЗаполненияЭДВС.Вставить("ДатаДокумента", ДатаОформления);
	
	ПараметрыЗаполненияЭДВС.Вставить("ПроводитьСозданныеДокументы"	 	, Ложь);
	ПараметрыЗаполненияЭДВС.Вставить("ФормироватьСписокДокументов" 		, Ложь);
	
	ПараметрыЗаполненияЭДВС.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ВССерверПереопределяемый.ПоддерживаетсяРаботаСоСтруктурнымиПодразделениями());
	
	ПараметрыЗаполненияЭДВС.Вставить("ПодразделенияОрганизацийПустаяСсылка", ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	ПараметрыЗаполненияЭДВС.Вставить("ПустоеПодразделение", ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения());
	
	Возврат ПараметрыЗаполненияЭДВС;
	
КонецФункции

#Область КомандаСоздатьЭлектронныйДокументВС

Функция ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭДВС(ПараметрКоманды, ВидДвижения) Экспорт
	//отсечь из массива документов-оснований ПТУ с неподходящими видами операции или с существующим связанным ЭСФ
	ВССерверПереопределяемый.СкорректироватьМассивДокументовОснований(ПараметрКоманды);	
	
	Если ВидДвижения = "ЭСФ" Тогда
		ВССерверПереопределяемый.ИсключитьЭСФНеОтраженныеВУчете(ПараметрКоманды, Истина)
	КонецЕсли;	

	Если ПараметрКоманды.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	//Проверить на наличие ранее созданных ЭДВС
	ПараметрыДляВыполненияКоманды = Новый Структура;
	ПараметрыДляВыполненияКоманды.Вставить("МассивыОбрабатываемыхДокументов", ПроверитьНаличиеРанееВведеныхЭДВС(ПараметрКоманды, ВидДвижения = "ЭСФ"));
	ПараметрыДляВыполненияКоманды.Вставить("ПараметрКоманды"				, ПараметрКоманды);
	Возврат ПараметрыДляВыполненияКоманды;
	
КонецФункции

Функция ПроверитьНаличиеРанееВведеныхЭДВС(Основание, ЭтоЭСФ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ЭтоЭСФ"	 , ЭтоЭСФ);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_документыОснования
	|ИЗ
	|	Документ.ГТДИмпорт КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Основание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_документыОснования.Документ,
	|	СУММА(ВЫБОР
	|			КОГДА ЭлектронныйДокументВС.Ссылка ЕСТЬ NULL 
	|					ИЛИ &ЭтоЭСФ
	|						И ЕСТЬNULL(ЭлектронныйДокументВС.ТипФормы, ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Детализация)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЭДВС
	|ПОМЕСТИТЬ вт_КоличествоЭДВС
	|ИЗ
	|	вт_документыОснования КАК вт_документыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|		ПО вт_документыОснования.Документ = ЭлектронныйДокументВС.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_документыОснования.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыБезЭДВС.Документ
	|ИЗ
	|	вт_КоличествоЭДВС КАК ДокументыБезЭДВС
	|ГДЕ
	|	ДокументыБезЭДВС.КоличествоЭДВС = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыБезЭДВС.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСЭДВС.Документ
	|ИЗ
	|	вт_КоличествоЭДВС КАК ДокументыСЭДВС
	|ГДЕ
	|	ДокументыСЭДВС.КоличествоЭДВС <> 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГТДИмпорт", Основание[0].Метаданные().Имя);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса 		= Запрос.ВыполнитьПакет();
	
	МассивДокументовБезЭДВС = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовСЭДВС 	= РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Документ");
	
	МассивыОбрабатываемыхДокументов = Новый Структура;
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовБезЭДВС"	, МассивДокументовБезЭДВС);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовСЭДВС"	, МассивДокументовСЭДВС);
	
	Возврат МассивыОбрабатываемыхДокументов;
	
КонецФункции

Процедура ЗаполнитьМассивЭДВС(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокЭДВС, Отказ, ВидДвижения = "")
	
	ПроводитьСозданныеДокументы	= ПараметрыСоздания.ПроводитьСозданныеДокументы;
	ФормироватьСписокДокументов = ПараметрыСоздания.ФормироватьСписокДокументов;
	
	Для каждого ЭлементМассива Из МассивДанныхДляЗаполнения Цикл
		
		ЭДВС = Документы.ЭлектронныйДокументВС.СоздатьДокумент();
		
		//Заполняем шапку документа
		ЗаполнитьЗначенияСвойств(ЭДВС,ЭлементМассива.Реквизиты[0]);
		//Заполняем табличную часть "Товары"
		Для Каждого СтрокаТЧ Из ЭлементМассива.Товары Цикл
			НоваяСтрокаТЧ = ЭДВС.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			//+
			Если ЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
				НоваяСтрокаТЧ.ИсточникПроисхожденияПолучатель = НоваяСтрокаТЧ.ИсточникПроисхождения;
				НоваяСтрокаТЧ.ДополнительныйИдентификаторПолучатель = НоваяСтрокаТЧ.ДополнительныйИдентификатор;
			КонецЕсли;				
			//-
		КонецЦикла;	
		
		//Заполняем табличную часть "Товары ВС"
		Для Каждого СтрокаТЧ Из ЭлементМассива.ТоварыВС Цикл
			НоваяСтрокаТЧ = ЭДВС.ТоварыВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
			
			//+
			Если ЭДВС.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение Тогда
				НоваяСтрокаТЧ.ИсточникПроисхожденияПолучатель = НоваяСтрокаТЧ.ИсточникПроисхождения;
				НоваяСтрокаТЧ.ДополнительныйИдентификаторПолучатель = НоваяСтрокаТЧ.ДополнительныйИдентификатор;
			КонецЕсли;				
			//-
			
			//Если у ГСВС есть записи третьего уровня - не заполняем 
			Если ВидДвижения = "Приход" Тогда
				Если ЗначениеЗаполнено(СтрокаТЧ.ГСВС) Тогда
					ГСВССодержитДополнительныйУровень = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ГСВС, "СодержитДополнительныйУровень");
				Иначе
					ГСВССодержитДополнительныйУровень = Ложь;
				КонецЕсли;
				
				Если ГСВССодержитДополнительныйУровень Тогда
					НоваяСтрокаТЧ.СоставнойКодГСВС = "";
					НоваяСтрокаТЧ.ГСВС = Справочники.НоменклатураГСВС.ПустаяСсылка();
					ТекстСообщения = НСтр("ru='Документ %1. Табличная часть ""Товары Виртуального склада"", раздел Е2. Товары, строка %2. ГСВС, найденный по коду ТН ВЭД товара, содержит коды третьего уровня, в связи с этим поле ГСВС не заполнено. Рекомендуется выбрать ГСВС самостоятельно'");
					ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, НоваяСтрокаТЧ.НомерСтроки); 
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;	
		
		//Заполняем табличную часть "Исходные товары"
		Для Каждого СтрокаТЧ Из ЭлементМассива.ИсходныеТовары Цикл
			НоваяСтрокаТЧ = ЭДВС.ИсходныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
		КонецЦикла;	
		
		//Заполняем табличную часть "Исходные товары ВС"
		Для Каждого СтрокаТЧ Из ЭлементМассива.ИсходныеТоварыВС Цикл
			НоваяСтрокаТЧ = ЭДВС.ИсходныеТоварыВС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрокаТЧ);
		КонецЦикла;	
		
		Попытка 
			Если НЕ ПараметрыСоздания.Свойство("ДатаПереходаНаУчетТоваровВС") Тогда
				ЭДВС.УстановитьВремя();
			КонецЕсли;	
			ЭДВС.УстановитьНовыйНомер();
			ЭДВС.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если ПроводитьСозданныеДокументы  И Не ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗапрещеноПроводитьЭДВС(ЭДВС) Тогда
			КлючевыеПоляЗаполнены = ЭДВС.ПроверитьЗаполнение();
			Если КлючевыеПоляЗаполнены Тогда
				Попытка 
					ЭДВС.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			Если Отказ Тогда
				ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка. Выполнение ввода документов ЭДВС прервано'");
				ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС);
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				
				//Далее документы не проводим, т.к. при вводе и проведении документов пакетом важно чтобы все ранее введенные документы были проведены
				//
				ПроводитьСозданныеДокументы = Ложь;
				
				//Прервать;
			КонецЕсли;	
		КонецЕсли;
		
		Если ФормироватьСписокДокументов Тогда
			СписокЭДВС.Добавить(ЭДВС.Ссылка);
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры	

Функция ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания) Экспорт
	ПараметрыЗаполненияЭДВС = ПолучитьПараметрыЗаполненияЭДВСПоУмолчанию();
	
	Для Каждого ЭлементСтрукуры  Из ПараметрыСоздания Цикл
		ПараметрыЗаполненияЭДВС.Вставить(ЭлементСтрукуры.Ключ, ЭлементСтрукуры.Значение);	
	КонецЦикла;	
	
	Если ПараметрыСоздания.Свойство("ДатаОформления") Тогда
		ДатаОформления = ПараметрыСоздания.ДатаОформления;
		ПараметрыЗаполненияЭДВС.Вставить("ДатаСреза"	, КонецДня(ДатаОформления));
		ПараметрыЗаполненияЭДВС.Вставить("ДатаОстатка"	, Новый Граница(КонецДня(ДатаОформления), ВидГраницы.Включая));
	КонецЕсли;
	
	Возврат ПараметрыЗаполненияЭДВС;
	
КонецФункции

//Создает множество Электронных документов ВС
//
Функция СоздатьСписокЭлектронныхДокументовВС(ПараметрыСоздания) Экспорт
	
	СписокЭДВС  = Новый Массив;
	Отказ 		= Ложь;
	
	Если ПараметрыСоздания.Свойство("ДатаПереходаНаУчетТоваровВС") Тогда
		МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЭДВС_ВводНачальныхОстатков(ПараметрыСоздания);
		ЗаполнитьМассивЭДВС(ПараметрыСоздания, МассивДанныхДляЗаполнения, СписокЭДВС, Отказ);
	Иначе	
		
		ПараметрыЗаполненияЭДВС = ПолучитьПараметрыЗаполненияЭДВС(ПараметрыСоздания);
		
		СоответсвиеМассивовДокументов 		= ПараметрыЗаполненияЭДВС.СоответсвиеМассивовДокументов;
		СоответсвиеМассивовВидовДокумента 	= ПараметрыЗаполненияЭДВС.СоответсвиеМассивовВидовДокумента;
		МассивВидовДвижений					= ПараметрыЗаполненияЭДВС.МассивВидовДвижений;
		
		Для Каждого ВидДвижения ИЗ МассивВидовДвижений Цикл 
			
			МассивДокументов = СоответсвиеМассивовДокументов.Получить(ВидДвижения);
			Если МассивДокументов = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			Если ТипЗнч(МассивДокументов) = Тип("Массив")
				 И МассивДокументов.Количество() = 0 Тогда
				 Продолжить;
			 КонецЕсли;
			 
			ПараметрыЗаполненияЭДВС.Вставить("МассивДокументов"	 	, МассивДокументов);
			ПараметрыЗаполненияЭДВС.Вставить("МассивВидовДокумента"	, СоответсвиеМассивовВидовДокумента.Получить(ВидДвижения));
			
			НетДатыНачала 		= Не ПараметрыЗаполненияЭДВС.Свойство("ДатаНачала");
			НетДатыОкончания 	= Не ПараметрыЗаполненияЭДВС.Свойство("ДатаОкончания");
			
			Если НетДатыНачала ИЛИ НетДатыОкончания Тогда
				ТаблицаДокументов = Новый ТаблицаЗначений;
				ТаблицаДокументов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
				Для Каждого ЭлементМассив Из МассивДокументов Цикл
					НоваяСтрокаТЧ 		= ТаблицаДокументов.Добавить();
					НоваяСтрокаТЧ.Дата	= ЭлементМассив.Дата;
				КонецЦикла;	
				Запрос = Новый Запрос;                                            
				Запрос.Текст = "ВЫБРАТЬ
				         |	ТаблицаДокументов.Дата КАК Дата
				         |ПОМЕСТИТЬ вт_ТаблицаДокументов
				         |ИЗ
				         |	&ТаблицаДокументов КАК ТаблицаДокументов
				         |;
				         |
				         |////////////////////////////////////////////////////////////////////////////////
				         |ВЫБРАТЬ ПЕРВЫЕ 1
				         |	МИНИМУМ(вт_ТаблицаДокументов.Дата) КАК Дата
				         |ИЗ
				         |	вт_ТаблицаДокументов КАК вт_ТаблицаДокументов
				         |;
				         |
				         |////////////////////////////////////////////////////////////////////////////////
				         |ВЫБРАТЬ
				         |	МАКСИМУМ(вт_ТаблицаДокументов.Дата) КАК Дата
				         |ИЗ
				         |	вт_ТаблицаДокументов КАК вт_ТаблицаДокументов";
						 
				Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
				Результат = Запрос.ВыполнитьПакет();
				ПакетМинимум 	= Результат[1].Выбрать();
				ПакетМаксимум 	= Результат[2].Выбрать();
			КонецЕсли;	
			
			Если МассивДокументов.Количество() = 1 Тогда
				Если НетДатыНачала Тогда
					ПараметрыЗаполненияЭДВС.Вставить("ДатаНачала"	, МассивДокументов[0].Дата);
				КонецЕсли;	
				Если НетДатыОкончания Тогда	
					ПараметрыЗаполненияЭДВС.Вставить("ДатаОкончания", МассивДокументов[0].Дата);
				КонецЕсли;	
			ИначеЕсли МассивДокументов.Количество() > 1 Тогда
				Если НетДатыНачала и ПакетМинимум.Следующий() Тогда
					ПараметрыЗаполненияЭДВС.Вставить("ДатаНачала"	, ПакетМинимум.Дата);	
				КонецЕсли;	
				Если НетДатыОкончания и ПакетМаксимум.Следующий() Тогда
					ПараметрыЗаполненияЭДВС.Вставить("ДатаОкончания", ПакетМаксимум.Дата);	
				КонецЕсли;
			Иначе
			    ПараметрыЗаполненияЭДВС.Вставить("ДатаНачала"	, Дата(1,1,1));
				ПараметрыЗаполненияЭДВС.Вставить("ДатаОкончания", Дата(1,1,1));
			КонецЕсли;
			
			ПараметрыЗаполненияЭДВС.Вставить("ВидДвижения", ВидДвижения);
			
			Если ВидДвижения = "Приход" Тогда
				ПараметрыЗаполненияЭДВС.Вставить("ЗаполнятьЦены"			, Ложь);
				ПараметрыЗаполненияЭДВС.Вставить("ПоДвижениямДокумента" 	, Ложь);
				МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЭДВС(ПараметрыЗаполненияЭДВС);
			Иначе
				ПараметрыЗаполненияЭДВС.Вставить("ЗаполнятьЦены"			, ВидДвижения <> "ЭСФ");
				ПараметрыЗаполненияЭДВС.Вставить("ПоДвижениямДокумента" 	, ВидДвижения <> "ЭСФ");
				МассивДанныхДляЗаполнения = ПодготовитьДанныеДляЗаполненияЭДВС_Расход(ПараметрыЗаполненияЭДВС);	
			КонецЕсли;	
			
			Если МассивДанныхДляЗаполнения = Неопределено Тогда
				Возврат СписокЭДВС;	
			КонецЕсли;	
			
			НачатьТранзакцию();
			
			ЗаполнитьМассивЭДВС(ПараметрыЗаполненияЭДВС, МассивДанныхДляЗаполнения, СписокЭДВС, Отказ, ВидДвижения);
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Возврат СписокЭДВС; 
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	

	Возврат СписокЭДВС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИзменениеСтатусаОформленияПервичныхУчетныхДокументов

Процедура ПриПроведенииСтатусОформленияДокументовОбработчик(Источник) Экспорт
	
	Если НЕ ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Источник.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	//Отсечение записи ЭСФ и Заявлений о ввозе в случае включенного учета по СНТ 
	Если ИспользоватьСНТ() Тогда
		ЭтоЭСФНаОсновеСНТ = Ложь;
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭСФ") Тогда
			Если ЗначениеЗаполнено(Источник.СНТ) ИЛИ СтрНайти(Источник.ДокументПодтверждающийПоставкуНомер, "SNT") > 0 Тогда 
				ЭтоЭСФНаОсновеСНТ = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Источник) = ВССерверПереопределяемый.ДокументОбъектЗаявлениеОВвозеТоваров() ИЛИ ЭтоЭСФНаОсновеСНТ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТЗНаборЗаписей = ВССерверПереопределяемый.ПолучитьНаборЗаписейРегистраСведенийСтатусыОформленияДокументов(Источник);
	
	СформироватьДвиженияСтатусыОформленияДокументов(ТЗНаборЗаписей, Источник);
	
КонецПроцедуры

Процедура ПриОтменеПроведенияСтатусОформленияДокументовОбработчик(Источник) Экспорт
	ОчиститьСтатусыОформленияДокументов(Источник);
КонецПроцедуры

Процедура ОчиститьСтатусыОформленияДокументов(Источник)
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
	НаборЗаписей.Записать();
КонецПроцедуры	

Процедура СформироватьДвиженияСтатусыОформленияДокументов(ТЗНаборЗаписей, Источник = Неопределено) Экспорт
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументов.СоздатьНаборЗаписей();
	
	Если Источник <> Неопределено Тогда
		НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТЗНаборЗаписей Цикл
		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Сбросить();
		
		НаборЗаписей.Отбор.Организация.Установить(СтрокаТЧ.Организация);
		НаборЗаписей.Отбор.Документ.Установить(СтрокаТЧ.Документ);
		НаборЗаписей.Отбор.Склад.Установить(СтрокаТЧ.Склад);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТЧ);
		НаборЗаписей.Записать();
		
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеИсточниковПроисхождения

Функция ЗаполнитьИсточникиПроисхождения(Параметры, Отказ)  Экспорт
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(Параметры.АдресТовары);
	ЕстьТипПроисхождения = (ТаблицаТовары.Колонки.Найти("ПризнакПроисхождения") <> Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары); 
	Запрос.УстановитьПараметр("Организация",Параметры.Организация); 
	Запрос.УстановитьПараметр("Склад",Параметры.Склад); 
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	МоментВремени = Новый МоментВремени(Параметры.Дата, Параметры.Регистратор);
	Если Параметры.Свойство("ЭтоЗаполнениеЭСФ") И Параметры.ЭтоЗаполнениеЭСФ Тогда
		ЭтоЭСФ = Истина;
	Иначе
		ЭтоЭСФ = ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ЭСФ");
	КонецЕсли;
	
	Если ЭтоЭСФ И Параметры.Свойство("СвязанныйЭСФ") Тогда
		СвязанныйЭСФ = Параметры.СвязанныйЭСФ;
		УчитыватьТоварыИсправленногоЭСФ = Истина;
	Иначе
		СвязанныйЭСФ = Неопределено;
		УчитыватьТоварыИсправленногоЭСФ = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Склад)  Тогда
		КонтролироватьОстатокПоСкладу = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "КонтролироватьОстатки");
	Иначе
		//для нераспределенного склада остатки контролируем
		КонтролироватьОстатокПоСкладу = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Регистратор) Тогда		
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Включая));
	Иначе  	
		Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени, ВидГраницы.Исключая));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустойИсточник", Справочники.ИсточникиПроисхождения.ПустаяСсылка());
	Запрос.УстановитьПараметр("СвязанныйЭСФ", СвязанныйЭСФ);
	Запрос.УстановитьПараметр("УчитыватьТоварыИсправленногоЭСФ", УчитыватьТоварыИсправленногоЭСФ);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Товар КАК Номенклатура,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумента,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	%ТекстПоляТипИзмеряемойВеличины КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	вт_Товары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Номенклатура,
	|	%ТекстПоляТипИзмеряемойВеличины,
	|	ТаблицаТовары.ЕдиницаИзмеренияКод,
	|	ТаблицаТовары.ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаВиртуальныхСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыНаВиртуальныхСкладах.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыНаВиртуальныхСкладах.КоличествоОстаток - ЕСТЬNULL(Товары.Количество, 0) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиГТДПромежуточный
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И (Номенклатура, ЕдиницаИзмерения) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.Номенклатура,
	|						Товары.ЕдиницаИзмерения
	|					ИЗ
	|						Товары КАК Товары)) КАК ТоварыНаВиртуальныхСкладах
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО ТоварыНаВиртуальныхСкладах.Номенклатура = Товары.Номенклатура
	|			И ТоварыНаВиртуальныхСкладах.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|			И ТоварыНаВиртуальныхСкладах.ИсточникПроисхождения = Товары.ИсточникПроисхождения
	|			И (Товары.ИсточникПроисхождения <> &ПустойИсточник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ТоварыВиртуальногоСкладаВРезерве.Номенклатура КАК Номенклатура,
	|	ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыВиртуальногоСкладаВРезерве.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	- ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&Период,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И (Номенклатура, ЕдиницаИзмерения) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Товары.Номенклатура,
	|						Товары.ЕдиницаИзмерения
	|					ИЗ
	|						Товары КАК Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Товары КАК Товары
	|		ПО ТоварыВиртуальногоСкладаВРезерве.Номенклатура = Товары.Номенклатура
	|			И ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения = Товары.ЕдиницаИзмерения
	|			И ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения = Товары.ИсточникПроисхождения
	|			И (Товары.ИсточникПроисхождения <> &ПустойИсточник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоЭСФ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоЭСФ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыИсправляемогоЭСФ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИсточникиПроисхождения.ДокументПартии.Дата КАК ДатаДокументПартии,
	|	ТоварыИсправляемогоЭСФ.Количество
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ТоварыИсправляемогоЭСФ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТоварыИсправляемогоЭСФ.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|ГДЕ
	|	ТоварыИсправляемогоЭСФ.Ссылка = &СвязанныйЭСФ
	|	И ТоварыИсправляемогоЭСФ.ПризнакПроисхождения <> ""6""
	|	И ТоварыИсправляемогоЭСФ.ИсточникПроисхождения <> &ПустойИсточник
	|	И &УчитыватьТоварыИсправленногоЭСФ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|; 
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ 
	|	ОстаткиГТДПромежуточный.Номенклатура КАК Номенклатура,
	|	ОстаткиГТДПромежуточный.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ОстаткиГТДПромежуточный.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ОстаткиГТДПромежуточный.ДатаДокументПартии КАК ДатаДокументПартии,
	|	СУММА(ОстаткиГТДПромежуточный.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиГТД
	|ИЗ
	|	ОстаткиГТДПромежуточный КАК ОстаткиГТДПромежуточный
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения,
	|	ДатаДокументПартии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	%КодТНВЭД КАК КодТНВЭД,
	|	Товары.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(ЕСТЬNULL(НоменклатураГСВС.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка))) КАК НоменклатураГСВС
	|ПОМЕСТИТЬ ВТ_НоменклатураГСВС
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураГСВС
	|		ПО (%КодТНВЭД = НоменклатураГСВС.КодГСВС)
	|			И (НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД))
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	%КодТНВЭД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураГСВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_НоменклатураГСВС.Номенклатура КАК Номенклатура,
	|	ВТ_НоменклатураГСВС.НоменклатураГСВС КАК НоменклатураГСВС,
	|	ВТ_НоменклатураГСВС.КодТНВЭД КАК КодТНВЭД,
	|	ЕСТЬNULL(СведенияОНоменклатуре.ПризнакПеречняИзьятий, ЛОЖЬ) КАК ПризнакПеречняИзьятий
	|ПОМЕСТИТЬ ВТ_СведенияОНоменклатуреГСВС
	|ИЗ
	|	ВТ_НоменклатураГСВС КАК ВТ_НоменклатураГСВС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ПризнакАктивности = ИСТИНА) КАК СведенияОНоменклатуре
	|		ПО (СведенияОНоменклатуре.НоменклатураГСВС = ВТ_НоменклатураГСВС.НоменклатураГСВС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	//-
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура,
	|	Товары.ЕдиницаИзмеренияДокумента КАК ЕдиницаИзмеренияДокумента,
	|	Товары.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество,
	|	ЕСТЬNULL(ОстаткиГТД.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ОстаткиГТД.ИсточникПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ГСВС, ЗНАЧЕНИЕ(Справочник.НоменклатураГСВС.ПустаяСсылка)) КАК ГСВС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.МеткаТовара, """") КАК ФизическаяМетка,
	|	ЕСТЬNULL(ИсточникиПроисхождения.НомерЗаявленияВРамкахТС, """") КАК НомерЗаявленияВРамкахТС,
	|	ВЫБОР
	|		КОГДА ИсточникиПроисхождения.КодТНВЭД ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВСИзНоменклатуры.КодТНВЭД, """")
	|		ИНАЧЕ ИсточникиПроисхождения.КодТНВЭД
	|	КОНЕЦ КАК КодТНВЭД,
	|	ЕСТЬNULL(ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении, """") КАК НомерПозицииВДекларацииИлиЗаявлении,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС, """") КАК ТоварНаименованиеВРамкахТС,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПроисхождения, ЗНАЧЕНИЕ(Перечисление.ТипПроисхожденияТоваровВС.ПустаяСсылка)) КАК ТипПроисхождения,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ДополнительныйИдентификатор, 0) КАК ДополнительныйИдентификатор,
	|	ВЫБОР
	|		КОГДА СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий ЕСТЬ NULL
	|				ТОГДА ЕСТЬNULL(СведенияОНоменклатуреГСВСИзНоменклатуры.ПризнакПеречняИзьятий, ЛОЖЬ)
	|		ИНАЧЕ СведенияОНоменклатуреГСВССрезПоследних.ПризнакПеречняИзьятий
	|	КОНЕЦ КАК ГСВСВходитВПеречень,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе,Ложь) КАК ПризнакУчетаНаВиртуальномСкладе,
	|	%ТекстПоляУслуга,
	|	ЕСТЬNULL(ИсточникиПроисхождения.ТипПошлины, ЗНАЧЕНИЕ(Перечисление.ТипыПошлинВС.ПустаяСсылка)) КАК ТипПошлины
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиГТД КАК ОстаткиГТД
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних(&Дата, ) КАК СведенияОНоменклатуреГСВССрезПоследних
	|			ПО ОстаткиГТД.ИсточникПроисхождения.ГСВС = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС
	|				И (СведенияОНоменклатуреГСВССрезПоследних.ПризнакАктивности)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|			ПО ОстаткиГТД.ИсточникПроисхождения = ИсточникиПроисхождения.Ссылка
	|		ПО Товары.Номенклатура = ОстаткиГТД.Номенклатура
	|			И Товары.ЕдиницаИзмерения = ОстаткиГТД.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОНоменклатуреГСВС КАК СведенияОНоменклатуреГСВСИзНоменклатуры
	|		ПО Товары.Номенклатура = СведенияОНоменклатуреГСВСИзНоменклатуры.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиГТД.ДатаДокументПартии,
	|	ОстаткиГТД.ИсточникПроисхождения";
			   
	СоответсвиеПолейЗапросов = Новый Соответствие;
	СоответсвиеПолейЗапросов.Вставить("%ТекстПоляУслуга"				, "");
	СоответсвиеПолейЗапросов.Вставить("%ТекстПоляТипИзмеряемойВеличины"	, "");
	СоответсвиеПолейЗапросов.Вставить("%КодТНВЭД"	, "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеПолейЗапросов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеПолейЗапросов);
	
	Запрос.Текст = ТекстЗапроса; 
				   
	ТаблицаИП = Запрос.Выполнить().Выгрузить();
	ТаблицаТоваровПоИП = ТаблицаТовары.Скопировать();
	ТаблицаТоваровПоИП.Очистить();
	
	НомерСтроки = 1; 
	Для Каждого СтрокаТовары Из  ТаблицаТовары Цикл 
		
		ОбщаяСуммаРаспределенных = 0;
		
		Если ЭтоЭСФ Тогда
			ОбщаяСуммаАкцизаРаспределенных			= 0;
			ОбщаяСуммаНДСРаспределенных				= 0;
			ОбщийОборотПоРеализацииРаспределенных	= 0;
			ОбщаяСуммаБезНалоговРаспределенных		= 0;
		КонецЕсли;
		
		//если выбрали вручную, то не перезаполняем - проверка будет дальше
		Если ЗначениеЗаполнено(СтрокаТовары.ИсточникПроисхождения)
			Или ЕстьТипПроисхождения И СтрокаТовары.ПризнакПроисхождения = "6" Тогда
			
			НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
		Иначе
			
			ЕдиницаИзмеренияОтбора = ВССерверПереопределяемый.ПолучитьЕдиницуИзмеренияОтбора(СтрокаТовары);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура"		, СтрокаТовары.Товар);
			СтруктураПоиска.Вставить("ЕдиницаИзмерения"	, ЕдиницаИзмеренияОтбора);
			
			СтрокиИП = ТаблицаИП.НайтиСтроки(СтруктураПоиска);
			
			КоличествоОсталосьПогасить = СтрокаТовары.Количество;
			
			Для Каждого СтрокаИП Из СтрокиИП Цикл			
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если СтрокаИП.КоличествоОстаток <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтроки = Мин(СтрокаИП.КоличествоОстаток, КоличествоОсталосьПогасить);
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить -  КоличествоСтроки;	
				
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары,, "ЕдиницаИзмерения, НомерСтроки");
				
				НоваяСтрока.ЕдиницаИзмерения = СтрокаИП.ЕдиницаИзмеренияДокумента;
				НоваяСтрока.НомерСтроки 	 = НомерСтроки;
				
				НомерСтроки = НомерСтроки + 1; 
				
				//Заполнение признака происхождения
				Если ЭтоЭСФ Тогда
					Если СтрокаИП.Услуга Тогда
						НоваяСтрока.ПризнакПроисхождения ="6";
					ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаИП.ТипПроисхождения) ИЛИ НЕ ЗначениеЗаполнено(СтрокаИП.ГСВСВходитВПеречень) Тогда
						
						НоваяСтрока.ПризнакПроисхождения = "5";
						
						ТекстОшибки = НСтр(
						"ru = 'Для товара ""%1"" (номер строки: %2) не указан Тип происхождения или отсутствуют данные по ГСВС в источнике происхождения.
						|По умолчанию графа ""Признак происхождения"" заполнена значением ""5"", так как данная графа обязательна к заполнению. 
						|Настоятельно рекомендуем проверить, при необходимости, скорректировать Признак.'");
						
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						НоваяСтрока.Товар,
						НоваяСтрока.НомерСтроки);
						
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ПризнакПроисхождения, "Объект");	
						
						
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "1";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Импорт И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "2";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "3";
					ИначеЕсли СтрокаИП.ТипПроисхождения = Перечисления.ТипПроисхожденияТоваровВС.Производство И НЕ СтрокаИП.ГСВСВходитВПеречень Тогда
						НоваяСтрока.ПризнакПроисхождения = "4";
					Иначе
						НоваяСтрока.ПризнакПроисхождения = "5";
					КонецЕсли; 
				КонецЕсли;
				
				//Заполнение полей из ИП
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИП);
				Если НЕ ЭтоЭСФ Тогда
					НоваяСтрока.СоставнойКодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(НоваяСтрока.ГСВС, "Наименование");
				КонецЕсли;
				
				КодГСВС = "";
				ФизическаяМетка = "";
				ИдентификаторСклада = "";
				КлючевыеПоляЗаполнены = Истина;
				СписокНезаполненныхПолей = "";
				ДополнительныйИдентификатор = "";
				
				Если ЭтоЭСФ И СтрокаИП.ПризнакУчетаНаВиртуальномСкладе Тогда				
					Если ЗначениеЗаполнено(СтрокаИП.ГСВС) Тогда
						КодГСВС = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтрокаИП.ГСВС, "Наименование");
					КонецЕсли;
									
					Если ЗначениеЗаполнено(СтрокаИП.ФизическаяМетка) Тогда
						ФизическаяМетка = "[" + СтрокаИП.ФизическаяМетка + "]";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаИП.ДополнительныйИдентификатор) Тогда
						ДополнительныйИдентификатор = "<" + Формат(СтрокаИП.ДополнительныйИдентификатор,"ЧГ=") + ">";
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Параметры.Склад) Тогда
						ИдентификаторСклада = Формат(ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Параметры.Склад, "ИдентификаторСклада"), "ЧГ=");
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(КодГСВС) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Код ГСВС, ";
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ИдентификаторСклада) Тогда
						КлючевыеПоляЗаполнены = Ложь;
						СписокНезаполненныхПолей = СписокНезаполненныхПолей + "Идентификатор склада";
					КонецЕсли;
								
					Если КлючевыеПоляЗаполнены Тогда
						ИдентификаторТовара = "%1%2%3(%4)";
						ИдентификаторТовара = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ИдентификаторТовара, КодГСВС, ФизическаяМетка, ДополнительныйИдентификатор, ИдентификаторСклада ); 
						НоваяСтрока.ИдентификаторТовара = ИдентификаторТовара;
					Иначе
						ТекстОшибки = НСтр("ru='Строка: %1. Не удалось заполнить поле ""Идентификатор товара"" по причине: не заполнены поля: %2.' ");
						ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НоваяСтрока.НомерСтроки, СписокНезаполненныхПолей);
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки,, НоваяСтрока.ИдентификаторТовара, "Объект");	
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.Количество = КоличествоСтроки;
				
				КоличествоОстаток			= СтрокаИП.КоличествоОстаток -  НоваяСтрока.Количество;
				СтрокаИП.КоличествоОстаток 	= ?(КоличествоОстаток < 0, 0, КоличествоОстаток);
				
				//Пересчет суммовых значений  
				ДоляКоличестваНовойСтроки = КоличествоСтроки / СтрокаТовары.Количество;
							
				НоваяСтрока.Сумма = СтрокаТовары.Сумма * ДоляКоличестваНовойСтроки;
				Если ЭтоЭСФ Тогда
					НоваяСтрока.СуммаАкциза 		= СтрокаТовары.СуммаАкциза * ДоляКоличестваНовойСтроки;
					НоваяСтрока.СуммаНДС			= СтрокаТовары.СуммаНДС * ДоляКоличестваНовойСтроки;
					НоваяСтрока.ОборотПоРеализации 	= СтрокаТовары.ОборотПоРеализации * ДоляКоличестваНовойСтроки;
					НоваяСтрока.СуммаБезНалогов		= НоваяСтрока.Сумма - НоваяСтрока.СуммаАкциза - НоваяСтрока.СуммаНДС;
				КонецЕсли;
				ОбщаяСуммаРаспределенных				= ОбщаяСуммаРаспределенных + НоваяСтрока.Сумма;				        				
				
				Если ЭтоЭСФ Тогда
				
					ОбщаяСуммаАкцизаРаспределенных			= ОбщаяСуммаАкцизаРаспределенных + НоваяСтрока.СуммаАкциза;
					ОбщаяСуммаНДСРаспределенных				= ОбщаяСуммаНДСРаспределенных + НоваяСтрока.СуммаНДС;
					ОбщийОборотПоРеализацииРаспределенных	= ОбщийОборотПоРеализацииРаспределенных + НоваяСтрока.ОборотПоРеализации;
					ОбщаяСуммаБезНалоговРаспределенных		= ОбщаяСуммаБезНалоговРаспределенных + НоваяСтрока.СуммаБезНалогов;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				НоваяСтрока = ТаблицаТоваровПоИП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары, , "НомерСтроки");
				
				НоваяСтрока.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1; 

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				НоваяСтрока.ИсточникПроисхождения =  ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
				
				Если Параметры.Свойство("ЭтоЗаполнениеЭСФ") И Параметры.ЭтоЗаполнениеЭСФ Тогда
					ЭтоУслуга = СтрокаТовары.ЭтоУслуга;
				Иначе
					ЭтоУслуга = ЭСФСерверПереопределяемый.ЭтоУслуга(СтрокаТовары.Товар);
				КонецЕсли;
				
				//если ничего не удалось распределить, то суммовые данные не очищаем
				Если КоличествоОсталосьПогасить <> СтрокаТовары.Количество Тогда
					Если Не ЭтоУслуга Тогда
						НоваяСтрока.Сумма = 0;
						НоваяСтрока.Цена = 0;
						Если ЭтоЭСФ Тогда
							НоваяСтрока.ОборотПоРеализации = 0;
							НоваяСтрока.СуммаАкциза = 0;
							НоваяСтрока.СуммаБезНалогов = 0;
							НоваяСтрока.СуммаНДС = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
				Если НЕ ЭтоЭСФ Или (ЭтоЭСФ И Не ЭтоУслуга) Тогда
				
					ТекстОшибки = НСтр("ru='Строка: %1. Не распределено по источникам происхождения товара <%2> в количестве %3 %4 по организации <%5> на складе <%6>.' ");
					ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НоваяСтрока.НомерСтроки, НоваяСтрока.Товар,
					КоличествоОсталосьПогасить, НоваяСтрока.ЕдиницаИзмерения, Параметры.Организация,Параметры.Склад);
					ПолеКоличество	= Параметры.ИмяСписка + "[" + Формат(НоваяСтрока.НомерСтроки -1, "ЧН=0; ЧГ=") + "].Количество";	
					
					Если КонтролироватьОстатокПоСкладу Тогда
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Параметры.Регистратор, ПолеКоличество, "Объект", Отказ);						
					Иначе
						ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Параметры.Регистратор, ПолеКоличество, "Объект");						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			//Суммовые значения последней строки для корректировки ошибок округления
			Если НоваяСтрока <> Неопределено Тогда
				Если ОбщаяСуммаРаспределенных > 0 И СтрокаТовары.Сумма <> ОбщаяСуммаРаспределенных Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + (СтрокаТовары.Сумма - ОбщаяСуммаРаспределенных);
				КонецЕсли;
				Если ЭтоЭСФ Тогда
					Если ОбщаяСуммаАкцизаРаспределенных > 0 И СтрокаТовары.СуммаАкциза <> ОбщаяСуммаАкцизаРаспределенных Тогда
						НоваяСтрока.СуммаАкциза = НоваяСтрока.СуммаАкциза + (СтрокаТовары.СуммаАкциза - ОбщаяСуммаАкцизаРаспределенных);
					КонецЕсли;
					Если ОбщаяСуммаНДСРаспределенных > 0 И СтрокаТовары.СуммаНДС <> ОбщаяСуммаНДСРаспределенных Тогда
						НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + (СтрокаТовары.СуммаНДС - ОбщаяСуммаНДСРаспределенных); 
					КонецЕсли;
					Если ОбщийОборотПоРеализацииРаспределенных > 0 И СтрокаТовары.ОборотПоРеализации <> ОбщийОборотПоРеализацииРаспределенных Тогда
						НоваяСтрока.ОборотПоРеализации = НоваяСтрока.ОборотПоРеализации + (СтрокаТовары.ОборотПоРеализации - ОбщийОборотПоРеализацииРаспределенных);
					КонецЕсли;
					Если ОбщаяСуммаБезНалоговРаспределенных > 0 И 
						
						//СтрокаТовары.СуммаБезНалогов <> ОбщаяСуммаБезНалоговРаспределенных 
						(СтрокаТовары.Сумма - СтрокаТовары.СуммаАкциза - СтрокаТовары.СуммаНДС) <> ОбщаяСуммаБезНалоговРаспределенных
						
						Тогда
						//НоваяСтрока.СуммаБезНалогов = НоваяСтрока.СуммаБезНалогов + (СтрокаТовары.СуммаБезНалогов - ОбщаяСуммаБезНалоговРаспределенных);
						
						НоваяСтрока.СуммаБезНалогов = НоваяСтрока.СуммаБезНалогов + ((СтрокаТовары.Сумма - СтрокаТовары.СуммаАкциза - СтрокаТовары.СуммаНДС) - ОбщаяСуммаБезНалоговРаспределенных);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли

		КонецЕсли;
		
	КонецЦикла;
	    
	Возврат  ПоместитьВоВременноеХранилище(ТаблицаТоваровПоИП); 	

КонецФункции

#КонецОбласти

#Область СозданияОбновленияИсточниковПроисхождения

Функция ПустаяТаблицаИсточниковПроисхождения() Экспорт
	
	// Тип булево был добавлен, чтобы в качестве значения ячейки можно было указывать Неопределено,
	// т.к. если поле составного типа, то для него можно указать Неопределено.
	//
	// Если для поля указывается значение Неопределено, то предполагается,
	// что данное поле не будет перезаполняться.
	// Это нужно, если в документе нет такого поля
	
	ТаблицаИсточниковПроисхождения = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(400));
	ТипСтрока1024 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024));
	ТипДата = Новый ОписаниеТипов("Дата ", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипЧисло = Новый  ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ГСВС", Новый ОписаниеТипов("СправочникСсылка.НоменклатураГСВС"));
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерСтроки", ТипЧисло);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ДатаСертификатаПроисхожденияТовара", ТипДата);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерПозицииВДекларацииИлиЗаявлении", ТипСтрока);	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерЗаявленияВРамкахТС", ТипСтрока);	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("КодТНВЭД", ТипСтрока);	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НаименованиеТовара", ТипСтрока);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("СтранаПроисхожденияТовара", Метаданные.ОпределяемыеТипы.СтраныМираЭСФ.Тип);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураЭСФ.Тип); 
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ТоварНаименованиеВРамкахТС", ТипСтрока1024);	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("СсылкаИсточникПроисхождения", Новый ОписаниеТипов("СправочникСсылка.ИсточникиПроисхождения"));
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("МеткаТовара", ТипСтрока);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ТипПроисхождения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипПроисхожденияТоваровВС"));
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ТипПошлины", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПошлинВС"));
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ДокументПартии", Метаданные.ОпределяемыеТипы.ДокументПартииВС.Тип);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ДополнительныйИдентификатор", ТипЧисло);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ПинКод", ТипСтрока);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("Крепость", ТипЧисло);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("ПризнакУчетаНаВиртуальномСкладе", ТипБулево);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("GTIN", ТипСтрока);
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерПозицииИзПервичнойСНТ", ТипСтрока);	
	ТаблицаИсточниковПроисхождения.Колонки.Добавить("НомерПервичнойСНТ", ТипСтрока);	
	
	Возврат ТаблицаИсточниковПроисхождения;
	
КонецФункции

Процедура НайтиСоздатьИсточникиПроисхождения(ТаблицаИсточникиПроисхождения, ДанныеТоваровОбъекта, ЭтоЭДВСПеремещение = Ложь) Экспорт
	                                  	
	//ищем источнимки по ключевм полям
	ТаблицаНайденныхИсточников = НайтиИсточникиПроисхождения(ТаблицаИсточникиПроисхождения);	
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточникиПроисхождения  Цикл	
		
		Если Не ЗначениеЗаполнено(СтрокаИсточника.СсылкаИсточникПроисхождения) Тогда
			СтрокаОбъекта = ДанныеТоваровОбъекта.Найти(СтрокаИсточника.НомерСтроки, "НомерСтроки");
			
			//сначала ищем, может уже создавался такой ИП
			СтрокаИПНайденного = ТаблицаНайденныхИсточников.Найти(СтрокаИсточника.НомерСтроки, "НомерСтроки");
			
			Если  СтрокаИПНайденного = Неопределено Тогда
				
				ОбъектИсточникПроисхождения = Справочники.ИсточникиПроисхождения.СоздатьЭлемент();
				
				ЗаполнитьНовыйИсточникПроисхождения(ОбъектИсточникПроисхождения, СтрокаИсточника, ТаблицаИсточникиПроисхождения);
				
			Иначе
				СтрокаИсточника.СсылкаИсточникПроисхождения = СтрокаИПНайденного.ИсточникПроисхождения;
			КонецЕсли; 	
			
		КонецЕсли;
		
		СтрокаОбъекта = ДанныеТоваровОбъекта.Найти(СтрокаИсточника.НомерСтроки, "НомерСтроки");
		
		Если СтрокаОбъекта <> Неопределено Тогда
			Если ЭтоЭДВСПеремещение Тогда
				СтрокаОбъекта.ИсточникПроисхожденияПолучатель = СтрокаИсточника.СсылкаИсточникПроисхождения;				
			Иначе	
				СтрокаОбъекта.ИсточникПроисхождения = СтрокаИсточника.СсылкаИсточникПроисхождения;				
			КонецЕсли;	
		КонецЕсли;   
		
	КонецЦикла;
					
КонецПроцедуры

Процедура СоздатьИсточникиПроисхождения(ТаблицаИсточникиПроисхождения, ДанныеТоваровОбъекта, ЭтоЭДВСПеремещение = Ложь) Экспорт
	
	
	Для Каждого СтрокаИсточника Из ТаблицаИсточникиПроисхождения  Цикл	
		
		Если Не ЗначениеЗаполнено(СтрокаИсточника.СсылкаИсточникПроисхождения) Тогда
			ОбъектИсточникПроисхождения = Справочники.ИсточникиПроисхождения.СоздатьЭлемент();
			
			ЗаполнитьНовыйИсточникПроисхождения(ОбъектИсточникПроисхождения, СтрокаИсточника, ТаблицаИсточникиПроисхождения);
		КонецЕсли;
		
		СтрокаОбъекта = ДанныеТоваровОбъекта.Найти(СтрокаИсточника.НомерСтроки, "НомерСтроки");
		
		Если СтрокаОбъекта <> Неопределено Тогда
			Если ЭтоЭДВСПеремещение Тогда
				СтрокаОбъекта.ИсточникПроисхожденияПолучатель = СтрокаИсточника.СсылкаИсточникПроисхождения;				
			Иначе	
				СтрокаОбъекта.ИсточникПроисхождения = СтрокаИсточника.СсылкаИсточникПроисхождения;				
			КонецЕсли;	
		КонецЕсли;   
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНовыйИсточникПроисхождения(ОбъектИсточникПроисхождения, СтрокаИсточника, ТаблицаИсточникиПроисхождения)
	
	ЗаполнитьЗначенияСвойств(ОбъектИсточникПроисхождения, СтрокаИсточника);
	
	ОбъектИсточникПроисхождения.Наименование = СтрокаИсточника.Номенклатура.Наименование  + "/" +  СтрокаИсточника.КодТНВЭД  
	+ ?(ЗначениеЗаполнено(СтрокаИсточника.НомерПозицииВДекларацииИлиЗаявлении), "/" + СокрЛП(СтрокаИсточника.НомерПозицииВДекларацииИлиЗаявлении), "")
	+ ?(ЗначениеЗаполнено(СтрокаИсточника.ТоварНаименованиеВРамкахТС), "/" + СокрЛП(СтрокаИсточника.ТоварНаименованиеВРамкахТС), "")
	+ ?(ЗначениеЗаполнено(СтрокаИсточника.ГСВС), "/" + СокрЛП(СтрокаИсточника.ГСВС), "");
	
	ОбъектИсточникПроисхождения.Записать(); 			
	СтрокаИсточника.СсылкаИсточникПроисхождения = ОбъектИсточникПроисхождения.Ссылка;			
	
	// Созданный элемент справочника  может быть подставлен в несколько строк таблицы таблицу источнико,
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КодТНВЭД", СтрокаИсточника.КодТНВЭД);
	ПараметрыПоиска.Вставить("ДокументПартии", СтрокаИсточника.ДокументПартии);
	ПараметрыПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
	ПараметрыПоиска.Вставить("ГСВС", СтрокаИсточника.ГСВС);
	ПараметрыПоиска.Вставить("МеткаТовара", СтрокаИсточника.МеткаТовара);
	ПараметрыПоиска.Вставить("НомерЗаявленияВРамкахТС", СтрокаИсточника.НомерЗаявленияВРамкахТС);			
	ПараметрыПоиска.Вставить("НомерПозицииВДекларацииИлиЗаявлении", СтрокаИсточника.НомерПозицииВДекларацииИлиЗаявлении);			
	ПараметрыПоиска.Вставить("ТоварНаименованиеВРамкахТС", СтрокаИсточника.ТоварНаименованиеВРамкахТС);			
	ПараметрыПоиска.Вставить("ДополнительныйИдентификатор", СтрокаИсточника.ДополнительныйИдентификатор);
	ПараметрыПоиска.Вставить("ПинКод", СтрокаИсточника.ПинКод);
	ПараметрыПоиска.Вставить("НомерПервичнойСНТ", СтрокаИсточника.НомерПервичнойСНТ);
	ПараметрыПоиска.Вставить("НомерПозицииИзПервичнойСНТ", СтрокаИсточника.НомерПозицииИзПервичнойСНТ);
	
	МассивСтрокДляЗаполнения = ТаблицаИсточникиПроисхождения.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрокаДляЗаполнения Из МассивСтрокДляЗаполнения Цикл						
		НайденнаяСтрокаДляЗаполнения.СсылкаИсточникПроисхождения = ОбъектИсточникПроисхождения.Ссылка;		
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиИсточникиПроисхождения(ТаблицаИсточникиПроисхождения) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	        
	"ВЫБРАТЬ
	|	ТаблицаИП.КодТНВЭД,
	|	ТаблицаИП.НомерСтроки,
	|	ТаблицаИП.ДокументПартии,
	|	ТаблицаИП.Номенклатура,
	|	ТаблицаИП.ГСВС,
	|	ТаблицаИП.МеткаТовара,
	|	ТаблицаИП.НомерПозицииВДекларацииИлиЗаявлении,
	|	ТаблицаИП.НомерЗаявленияВРамкахТС,
	|	ТаблицаИП.СсылкаИсточникПроисхождения,
	|	ТаблицаИП.ТоварНаименованиеВРамкахТС,
	|	ТаблицаИП.ДополнительныйИдентификатор,
	|	ТаблицаИП.ДополнительныйИдентификатор,
	|	ТаблицаИП.ПинКод,
	|	ТаблицаИП.ПризнакУчетаНаВиртуальномСкладе
	|ПОМЕСТИТЬ ВТ_ТаблицаИП
	|ИЗ
	|	&ТаблицаИП КАК ТаблицаИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИП.НомерСтроки,
	|	ИсточникиПроисхождения.Ссылка КАК ИсточникПроисхождения
	|ИЗ
	|	ВТ_ТаблицаИП КАК ТаблицаИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК ИсточникиПроисхождения
	|		ПО ТаблицаИП.КодТНВЭД = ИсточникиПроисхождения.КодТНВЭД
	|			И ТаблицаИП.ДокументПартии = ИсточникиПроисхождения.ДокументПартии
	|			И ТаблицаИП.Номенклатура = ИсточникиПроисхождения.Номенклатура
	|			И ТаблицаИП.НомерЗаявленияВРамкахТС = ИсточникиПроисхождения.НомерЗаявленияВРамкахТС
	|			И ТаблицаИП.НомерПозицииВДекларацииИлиЗаявлении = ИсточникиПроисхождения.НомерПозицииВДекларацииИлиЗаявлении
	|			И ТаблицаИП.ТоварНаименованиеВРамкахТС = ИсточникиПроисхождения.ТоварНаименованиеВРамкахТС
	|			И ТаблицаИП.ГСВС = ИсточникиПроисхождения.ГСВС
	|			И ТаблицаИП.МеткаТовара = ИсточникиПроисхождения.МеткаТовара
	|			И ТаблицаИП.ДополнительныйИдентификатор = ИсточникиПроисхождения.ДополнительныйИдентификатор
	|			И ТаблицаИП.ПинКод = ИсточникиПроисхождения.ПинКод
	|			И ТаблицаИП.ПризнакУчетаНаВиртуальномСкладе = ИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе
	|ГДЕ
	|	НЕ ИсточникиПроисхождения.ПометкаУдаления";
	
		
	Запрос.УстановитьПараметр("ТаблицаИП", ТаблицаИсточникиПроисхождения);
	
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции

Процедура ОбновитьРеквизитыИсточникаПроисхождения(СтрокаИП, ИсточникПроисхождения) Экспорт
	
	МассивОбновляемыхРеквизитов = МассивОбновляемыхРеквизитовИсточника();
	ДанныеИП = ВСОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаИП);
	ОбъектИсточникПроисхождения =  ИсточникПроисхождения.ПолучитьОбъект();
	
	Для Каждого ЭлементМассива Из МассивОбновляемыхРеквизитов Цикл
		Если ДанныеИП.Свойство(ЭлементМассива) Тогда
			Если ОбъектИсточникПроисхождения[ЭлементМассива] <> ДанныеИП[ЭлементМассива] Тогда
				ОбъектИсточникПроисхождения[ЭлементМассива] = ДанныеИП[ЭлементМассива];				
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ОбъектИсточникПроисхождения.Модифицированность() Тогда
		Попытка
			ОбъектИсточникПроисхождения.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция МассивОбновляемыхРеквизитовИсточника() Экспорт
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("СтранаПроисхожденияТовара");
	МассивРеквизитов.Добавить("ТипПошлины");
	МассивРеквизитов.Добавить("ТипПроисхождения");
	МассивРеквизитов.Добавить("Крепость");
	МассивРеквизитов.Добавить("ДатаСертификатаПроисхожденияТовара");
	
	Возврат  МассивРеквизитов;
	
КонецФункции

Процедура НайтиНеиспользуемыеЭлементыСправочникаВФоне(Параметры,Адрес) Экспорт
	Обработки.ПомощникКорректировкиТоваровНаВиртуальныхСкладах.НайтиНеиспользуемыеЭлементыСправочникаВФоне(Адрес);	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеИсточникиПроисхожденияВФоне(Параметры, Адрес) Экспорт
	Обработки.ПомощникКорректировкиТоваровНаВиртуальныхСкладах.УдалитьНеиспользуемыеИсточникиПроисхождения(Параметры, Адрес);	
КонецПРоцедуры

#КонецОбласти

#Область ТоварыНаВиртуальныхСкладах


Процедура СформироватьДвиженияТоваровНаВС(ТаблицаРеквизиты, ТаблицаТовары, Движения, Отказ, ПериодДвижения = Неопределено, ВидДвижения = Неопределено) Экспорт
	
	Если ТаблицаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
		
	Если Параметры.ТаблицаТовары.Количество() = 0
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	Если НЕ ЗначениеЗаполнено(ПериодДвижения) Тогда
		ПериодДвижения = Реквизиты.Период;
	КонецЕсли;

	РеквизитТипФормы = Параметры.Реквизиты.Колонки.Найти("ТипФормы");
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаТовары Цикл
		Если НЕ ЗначениеЗаполнено(ВидДвижения) Тогда
			ВидДвиженияСтроки = СтрокаТаблицы.ВидДвижения;
		Иначе
			ВидДвиженияСтроки = ВидДвижения;
		КонецЕсли;
		
		Движение = Движения.ТоварыНаВиртуальныхСкладах.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		Если РеквизитТипФормы <> Неопределено
			 	И Реквизиты.ТипФормы = Перечисления.ТипыФормВС.ПеремещениеМеждуФилиалами 
				И ВидДвиженияСтроки = ВидДвиженияНакопления.Приход Тогда
			Движение.Организация =  Реквизиты.ОрганизацияПолучатель;
			Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделениеПолучатель;
		ИначеЕсли РеквизитТипФормы <> Неопределено 
			И Реквизиты.ТипФормы = Перечисления.ТипыФормВС.ВнутреннееПеремещение 
			И ВидДвиженияСтроки = ВидДвиженияНакопления.Приход Тогда
			Движение.Организация =  Реквизиты.Организация;
			Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделениеПолучатель;
		Иначе
			Движение.Организация =  Реквизиты.Организация;
			Движение.СтруктурноеПодразделение =  Реквизиты.СтруктурноеПодразделение;
		КонецЕсли;	
		Движение.ВидДвижения =  ВидДвиженияСтроки;
		Движение.Период      =  ПериодДвижения;
	КонецЦикла;

	Движения.ТоварыНаВиртуальныхСкладах.Записывать = Истина;
	Движения.ТоварыНаВиртуальныхСкладах.Записать();
	
КонецПроцедуры

Функция ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ) Экспорт
	
	Параметры = Новый Структура;    
	
	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                  	 // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                       	 // <Дата> - период движений - дата документа
	+ "Организация,"                	 // <СправочникСсылка.Организация> - организация, в которую приходуется товар
	+ "СтруктурноеПодразделение,"        // <СправочникСсылка.ПодразделенияОрганизаций> - СП, в которую приходуется товар
	+ "Склад";                	        

	Если ТипЗнч(ТаблицаРеквизиты) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРеквизиты.Колонки.Найти("ОрганизацияПолучатель") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",ОрганизацияПолучатель";	
		КонецЕсли;
		Если ТаблицаРеквизиты.Колонки.Найти("СтруктурноеПодразделениеПолучатель") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",СтруктурноеПодразделениеПолучатель";	
		КонецЕсли;
		
		Если ТаблицаРеквизиты.Колонки.Найти("ТипФормы") <> Неопределено Тогда
			СписокОбязательныхКолонок = СписокОбязательныхКолонок + ",ТипФормы";	
		КонецЕсли;
		
	КонецЕсли;
 
	
	Параметры.Вставить("Реквизиты",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"
	+ "Количество,"
	+ "Цена,"
	+ "ИсточникПроисхождения,"
	+ "Номенклатура,"
	+ "ЕдиницаИзмерения,"
	+ "Склад,"
	+ "ДокументПартии,"
	+ "ИмяСписка,"
	+ "ВидДвижения";
	
		
	Параметры.Вставить("ТаблицаТовары",
		ВСОбщегоНазначения.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));
	
	Возврат Параметры; 
		
КонецФункции

Процедура ВыполнитьКонтрольТоварыОрганизацийНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ) Экспорт
	
	Параметры =  ПодготовитьТаблицуТоварыНаВС(ТаблицаРеквизиты, ТаблицаТовары, Отказ);
	Если Параметры.ТаблицаТовары.Количество() = 0 
		ИЛИ Параметры.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	КонтролироватьОстатокПоСкладу = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Склад, "КонтролироватьОстатки");
	Если НЕ ЗначениеЗаполнено(КонтролироватьОстатокПоСкладу) Тогда
		КонтролироватьОстатокПоСкладу = Ложь;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", 					ТаблицаТовары);
	Запрос.УстановитьПараметр("ДатаОстатка"	 , 					Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация"	 , 					Реквизиты.Организация);
	Запрос.УстановитьПараметр("СтруктурноеПодразделение", 		Реквизиты.СтруктурноеПодразделение);
	Запрос.УстановитьПараметр("Склад"		 , 					Реквизиты.Склад);
	
	Запрос.УстановитьПараметр("ПустойИсточник", Справочники.ИсточникиПроисхождения.ПустаяСсылка());
	
	УчитыватьТоварыИсправленногоЭСФ = Ложь;
	СвязанныйЭСФ = ПредопределенноеЗначение("Документ.ЭСФ.ПустаяСсылка");
	
	Если ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ЭСФ") Тогда
		
		ВидЭСФ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "Вид");
		
		Если ВидЭСФ = Перечисления.ВидыЭСФ.Исправленный Тогда
			СвязанныйЭСФ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Реквизиты.Регистратор, "СвязанныйЭСФ");
			УчитыватьТоварыИсправленногоЭСФ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УчитыватьТоварыИсправленногоЭСФ", УчитыватьТоварыИсправленногоЭСФ);
	Запрос.УстановитьПараметр("СвязанныйЭСФ", СвязанныйЭСФ);
	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.ИсточникПроисхождения КАК ИсточникПроисхождения
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	ИсточникПроисхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыОрганизацийОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И (Номенклатура, ЕдиницаИзмерения, ИсточникПроисхождения) В
	|					(ВЫБРАТЬ
	|						Вт_Товары.Номенклатура,
	|						Вт_Товары.ЕдиницаИзмерения,
	|						Вт_Товары.ИсточникПроисхождения
	|					ИЗ
	|						Вт_Товары)) КАК ТоварыОрганизацийОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыИсправляемогоЭСФ.Товар КАК Номенклатура,
	|	ТоварыИсправляемогоЭСФ.ИсточникПроисхождения КАК ИсточникПроисхождения,
	|	ТоварыИсправляемогоЭСФ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыИсправляемогоЭСФ.Количество КАК КоличествоОстаток
	|ИЗ
	|	Документ.ЭСФ.Товары КАК ТоварыИсправляемогоЭСФ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭСФ КАК ЭСФ
	|		ПО ТоварыИсправляемогоЭСФ.Ссылка = ЭСФ.Ссылка
	|ГДЕ
	|	ТоварыИсправляемогоЭСФ.Ссылка = &СвязанныйЭСФ
	|	И ЭСФ.Ссылка = &СвязанныйЭСФ
	|	И ТоварыИсправляемогоЭСФ.ПризнакПроисхождения <> ""6""
	|	И ТоварыИсправляемогоЭСФ.ИсточникПроисхождения <> &ПустойИсточник
	|	И ЭСФ.Склад = &Склад
	|	И &УчитыватьТоварыИсправленногоЭСФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВиртуальногоСкладаВРезерве.Номенклатура,
	|	ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения,
	|	ТоварыВиртуальногоСкладаВРезерве.ЕдиницаИзмерения,
	|	-ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Склад = &Склад
	|				И СтруктурноеПодразделение = &СтруктурноеПодразделение
	|				И (Номенклатура, ЕдиницаИзмерения, ИсточникПроисхождения) В
	|					(ВЫБРАТЬ
	|						Вт_Товары.Номенклатура,
	|						Вт_Товары.ЕдиницаИзмерения,
	|						Вт_Товары.ИсточникПроисхождения
	|					ИЗ
	|						Вт_Товары)) КАК ТоварыВиртуальногоСкладаВРезерве
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура,
	|	Остатки.ИсточникПроисхождения,
	|	Остатки.ЕдиницаИзмерения,
	|	СУММА(Остатки.КоличествоОстаток)
	|
	|ИЗ
	|	ВТ_Остатки КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.ИсточникПроисхождения,
	|	Остатки.ЕдиницаИзмерения
	|";
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из ТаблицаТовары Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"			, СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения"		, СтрокаДокумента.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("ИсточникПроисхождения", СтрокаДокумента.ИсточникПроисхождения);
		
		СтрокиОстатка = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;	
		
		Для Каждого СтрокаОстатка Из СтрокиОстатка Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаОстатка.КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатка = СтрокиОстатка[0];
			КоличествоДок = МИН(КоличествоОсталосьПогасить,СтрокаОстатка.КоличествоОстаток);			
			
			Если СтрокаОстатка.КоличествоОстаток <= КоличествоДок Тогда
				СтрокаОстатка.КоличествоОстаток = 0;
			Иначе
				СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - КоличествоДок;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоДок;
				
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			ТекстОшибки = НСтр("ru='Товары на виртуальных складах. Строка: %1. По организации <%2>,структурному подразделению <%3>, складу <%4> не списано %5 %6 товара <%7>, источник происхождения - %8' ");
			ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаДокумента.НомерСтроки,Реквизиты.Организация,Реквизиты.СтруктурноеПодразделение, СтрокаДокумента.Склад, КоличествоОсталосьПогасить, СтрокаДокумента.ЕдиницаИзмерения,
						СтрокаДокумента.Номенклатура, СтрокаДокумента.ИсточникПроисхождения);
			ПолеКоличество	= СтрокаДокумента.ИмяСписка + "[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Количество";		
			
			Если КонтролироватьОстатокПоСкладу Тогда
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект", Отказ);
			Иначе
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки, Реквизиты.Регистратор, ПолеКоличество, "Объект");
			КонецЕсли; 			
		КонецЕсли; 				
	КонецЦикла; 	
	
КонецПроцедуры

#КонецОбласти

#Область ГСВС

Функция ПолучитьГСВС(Идентификатор = "", КодТНВЭД = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Идентификатор) И НЕ ЗначениеЗаполнено(КодТНВЭД) Тогда
		Возврат Справочники.НоменклатураГСВС.ПустаяСсылка();
	КонецЕсли;	
		
	СтруктураИдентификатора = ВСКлиентСервер.СтруктураИдентификатораТовара(Идентификатор);
		
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураГСВС.Ссылка КАК ГСВС
	               |ИЗ
	               |	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
	               |ГДЕ
				   |	НоменклатураГСВС.ПризнакВозможностиВыбора = ИСТИНА
	               |//КодГСВС	И НоменклатураГСВС.Наименование = &КодГСВСПолный
				   |//КодТНВЭД	И НоменклатураГСВС.КодГСВС = &КодТНВЭД
				   |//КодТНВЭД	И НоменклатураГСВС.ТипКодаГСВС = Значение(Перечисление.ТипыКодовГСВС.ТНВЭД)
				   |";
				   
	Если ЗначениеЗаполнено(СтруктураИдентификатора.КодГСВСПолный) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//КодГСВС", "");
		Запрос.УстановитьПараметр("КодГСВСПолный", СтруктураИдентификатора.КодГСВСПолный);		
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//КодТНВЭД", "");
		Запрос.УстановитьПараметр("КодТНВЭД", КодТНВЭД);		
	КонецЕсли;               
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ГСВС = Выборка.ГСВС;
	КонецЕсли;
	
	Возврат ГСВС; 
	
КонецФункции

Функция ЗагрузитьСправочникГСВС(ДополнительныеПараметры) Экспорт
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ЗагрузитьСправочникГСВС(ДополнительныеПараметры);
КонецФункции

Процедура ЗагрузкаНоменклатурыГСВСПоРасписанию() Экспорт
	// Создать и заполнить МассивДанныхПрофилейИСЭСФ. 	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ, 
	|	ПрофилиИСЭСФ.Владелец.ПарольАутентификации КАК ПарольИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации <> """"
	|	И НЕ ПрофилиИСЭСФ.ПометкаУдаления";
	
	Результат   = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТекстСообщения = НСтр("ru = 'Не найден профиль для синхронизации с ИС ЭСФ. Загрузка обновления справочника Номенклатура ГСВС не выполнена.'");
		
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(
				НСтр("ru = 'ВССервер.ЗагрузкаНоменклатурыГСВСПоРасписанию'"), 
				"Ошибка",,,
				ТекстСообщения);

		ВызватьИсключение ТекстСообщения;		
	КонецЕсли;
	
	ВыборкаПрофилиИСЭСФ = Результат.Выбрать();
	ВыборкаПрофилиИСЭСФ.Следующий();
	
	ПараметрыПрофиляИСЭСФ = Новый Структура("ПрофильИСЭСФ, ПарольИСЭСФ", 
											ВыборкаПрофилиИСЭСФ.ПрофильИСЭСФ,
											ВыборкаПрофилиИСЭСФ.ПарольИСЭСФ);
	
	ДополнительныеПараметры = Новый Структура;	
	ДополнительныеПараметры.Вставить("ПараметрыПрофиляИСЭСФ", ПараметрыПрофиляИСЭСФ);
	ЗагрузитьСправочникГСВС(ДополнительныеПараметры);
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции
	
// Проверяет корректность заполнения документов ЭСФ для отправки в ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихЭСФ - Массив - Массив документов ЭСФ, 
//   у которых необходимо проверить корректность заполнения.
//   Каждый элемент массива должен иметь тип "ДокументСсылка.ЭСФ".
//	 ВАЖНО! Массив изменяется внутрии функции, Знач не устанавливаем перед объявлением переменной
//  ПоказыватьСообщения - Булево - Показывать сообщения об ошибках,
//   выявленных в ходе проверки, или не показывать.
//  ТекстыСообщений - Соответствие - Тексты ошибок, выявленных в ходе проверки.
//   |- Ключ - ДокументСсылка.ЭСФ - Документ, для которого найдены ошибки.
//   |- Значение - Соответствие - Тексты найденных ошибок.
//       |- Ключ - Строка - Путь к полю, в котором найдена ошибка.
//       |- Значение - Строка - Текст ошибки.
//
// Возвращаемое значение:
//  Булево - Возможность отправки всех документов ЭСФ.
//   Истина - Если все ЭСФ из массива можно отправлять. 
//   Ложь - Если хотя бы один ЭСФ нельзя отправлять.
//
Функция ПроверитьВозможностьОтправкиДокументовЭДВС(МассивЭДВС, ДополнительныеПараметры) Экспорт

	МассивИсключаемых = Новый Массив;

	СообщениеПользователю = Новый СообщениеПользователю;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЭДВС", МассивЭДВС);
	
	
	МассивИсключаемыхСтатусов = Новый Массив;
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыУТТН.Обрабатывается);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыУТТН.Обработанный);
	МассивИсключаемыхСтатусов.Добавить(Перечисления.СтатусыУТТН.Отмененный);
	
	Запрос.УстановитьПараметр("Статусы", МассивИсключаемыхСтатусов);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВС.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВС.СкладОтправитель КАК СкладОтправитель,
		|	ЭлектронныйДокументВС.СкладПолучатель КАК СкладПолучатель,
		|	ЭлектронныйДокументВС.Статус КАК Статус,
		|	ЭлектронныйДокументВС.КорректировкаИП КАК КорректировкаИП,
		|	ВиртуальныеСкладыОтправитель.Статус КАК СкладОтправительСтатус,
		|	ВиртуальныеСкладыПолучатель.Статус КАК СкладПолучательСтатус
		|ПОМЕСТИТЬ ВТ_ЭДВС
		|ИЗ
		|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныеСкладыОтправитель
		|		ПО ЭлектронныйДокументВС.СкладОтправитель = ВиртуальныеСкладыОтправитель.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВиртуальныеСклады КАК ВиртуальныеСкладыПолучатель
		|		ПО ЭлектронныйДокументВС.СкладПолучатель = ВиртуальныеСкладыПолучатель.Ссылка
		|ГДЕ
		|	ЭлектронныйДокументВС.Ссылка В(&МассивЭДВС)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЭлектронныйДокументВСТовары.НомерСтроки) КАК МаксимальныйНомерСтроки,
		|	ЭлектронныйДокументВСТовары.Ссылка
		|ПОМЕСТИТЬ ЭДВССТоварамиВС
		|ИЗ
		|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТовары
		|ГДЕ
		|	ЭлектронныйДокументВСТовары.Ссылка В(&МассивЭДВС)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйДокументВСТовары.Ссылка
		|;	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭДВС.Ссылка КАК ЭДВС,
		|	ЭДВС.СкладОтправительСтатус КАК СкладОтправительСтатус,
		|	ЭДВС.СкладПолучательСтатус КАК СкладПолучательСтатус,
		|	ЭДВССТоварамиВС.МаксимальныйНомерСтроки КАК МаксимальныйНомерСтроки,
		|	ЭДВС.Статус КАК Статус,
		|	ЭДВС.КорректировкаИП КАК КорректировкаИП
		|
		|ИЗ
		|	ВТ_ЭДВС КАК ЭДВС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭДВССТоварамиВС КАК ЭДВССТоварамиВС
		|		ПО ЭДВС.Ссылка = ЭДВССТоварамиВС.Ссылка
		|
		|ГДЕ
		|	(ЭДВС.Статус В (&Статусы)
		|			ИЛИ ЭДВС.КорректировкаИП = ИСТИНА
		|			ИЛИ ЭДВССТоварамиВС.МаксимальныйНомерСтроки > 200
		|			ИЛИ ЭДВС.СкладОтправительСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыВиртуальныхСкладов.Неактивен)
		|			ИЛИ ЭДВС.СкладПолучательСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыВиртуальныхСкладов.Неактивен))
		|";

		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивИсключаемых.Добавить(ВыборкаДетальныеЗаписи.ЭДВС);
		
		// Проверить Состояние документа ЭСФ.
		Если ВыборкаДетальныеЗаписи.КорректировкаИП Тогда  
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" с признаком ""Корректировка источников происхождения"" не подлежит отправке, документ исключен из пакета отправки.'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыборкаДетальныеЗаписи.ЭДВС);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		ИначеЕсли ВыборкаДетальныеЗаписи.МаксимальныйНомерСтроки > 200 Тогда
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" исключен из пакета отправки, так как в документе присутствует более 200 строк.'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаДетальныеЗаписи.ЭДВС);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);			 
			
		ИначеЕсли ВыборкаДетальныеЗаписи.СкладОтправительСтатус = Перечисления.СтатусыВиртуальныхСкладов.Неактивен Тогда		
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" исключен из пакета отправки. Статус виртуального склада отправителя ""%2""'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыборкаДетальныеЗаписи.ЭДВС,
			ВыборкаДетальныеЗаписи.СкладОтправительСтатус);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		ИначеЕсли ВыборкаДетальныеЗаписи.СкладПолучательСтатус = Перечисления.СтатусыВиртуальныхСкладов.Неактивен Тогда		
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" исключен из пакета отправки. Статус виртуального склада получателя ""%2""  '");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыборкаДетальныеЗаписи.ЭДВС,
			ВыборкаДетальныеЗаписи.СкладПолучательСтатус);																	
						
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);			 
			
		Иначе		
			
			ТекстСообщения = НСтр("ru = 'Документ ""%1"" со статусом %2 исключен из пакета отправки, отправке подлежат документы со статусами %3, %4, %5'");
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения,
			ВыборкаДетальныеЗаписи.ЭДВС,
			ВыборкаДетальныеЗаписи.Статус,
			Перечисления.СтатусыУТТН.Созданный,
			Перечисления.СтатусыУТТН.Черновик,
			Перечисления.СтатусыУТТН.Ошибочный);
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЭДВС Из МассивИсключаемых Цикл
		
		ИндексСтроки = МассивЭДВС.Найти(СтрокаЭДВС);
		
		Если НЕ ИндексСтроки = Неопределено Тогда
			
			МассивЭДВС.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЭДВС.Количество() > 0;
	
КонецФункции

//Проверяет документы ЭДВС на наличие товара с признаком учета на виртуальном складе
Функция ПроверитьНаличиеТоваровВиртуальногоСклада(МассивЭДВС, ДополнительныеПараметры)  Экспорт
	
	МассивИсключаемых = Новый Массив;
	МассивОтправляемых = Новый массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЭДВС", МассивЭДВС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭлектронныйДокументВСТовары.Ссылка КАК ЭДВС
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТовары
	|ГДЕ
	|	ЭлектронныйДокументВСТовары.Ссылка В(&МассивЭДВС)
	//|	И ЭлектронныйДокументВСТовары.ПризнакУчетаНаВиртуальномСкладе
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//Добавить ЭДВС в массив отправляемых
		МассивОтправляемых.Добавить(ВыборкаДетальныеЗаписи.ЭДВС);
		
	КонецЦикла;
	
	//Получить массив исключаемых ЭДВС
	МассивИсключаемых=МассивЭДВС;
	
	Для Каждого СтрокаЭДВС Из МассивОтправляемых Цикл
		
		ИндексСтроки = МассивЭДВС.Найти(СтрокаЭДВС);
		
		Если НЕ ИндексСтроки = Неопределено Тогда
			
			МассивИсключаемых.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Сообщить об исключаемых
	Для Каждого СтрокаЭДВС из МассивИсключаемых Цикл
		ТекстСообщения = НСтр("ru = 'Документ ""%1"" исключен из пакета отправки: в списке товаров отсутствуют товары, подлежащие учету на виртуальном складе.'");	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаЭДВС);
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		ЭСФВызовСервера.СоздатьЗаписьЖурналаРегистрации(ТекстСообщения);

	КонецЦикла;
	
	Возврат МассивОтправляемых;
	
КонецФункции

Функция СтрокаСоответствуетФасету(Строка, Фасет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""%1"" КАК Строка
		|ГДЕ
		|	""%1"" ПОДОБНО ""%2""";
	Запрос.Текст = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(Запрос.Текст, Строка, Фасет);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Функция ИспользоватьСНТ() Экспорт	
	
	Возврат ВССерверПереопределяемый.ИспользоватьСНТ();
	
КонецФункции

#КонецОбласти 

#Область СкладВС

Функция ПолучитьСоответствиеСклада(Склад, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад
		|ИЗ
		|	РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
		|ГДЕ
		|	СоответствиеСкладовИВиртуальныхСкладов.Организация = &Организация
		|	И СоответствиеСкладовИВиртуальныхСкладов.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СкладВС = ВыборкаДетальныеЗаписи.ВиртуальныйСклад;	
	КонецЦикла;
		
	Возврат СкладВС;
		
КонецФункции

Функция ПолучитьСкладНераспределенныхТоваровОрганизации(Организация) Экспорт
			
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВиртуальныеСклады.Ссылка КАК СкладНераспределенныхТоваров
		|ИЗ
		|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|ГДЕ
		|	ВиртуальныеСклады.Организация = &Организация
		|	И ВиртуальныеСклады.ПризнакОприходования = ИСТИНА";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СкладНераспределенныхТоваров = Справочники.ВиртуальныеСклады.ПустаяСсылка();
	
	Пока Выборка.Следующий() Цикл
		СкладНераспределенныхТоваров = Выборка.СкладНераспределенныхТоваров;		
	КонецЦикла;
	
	Возврат СкладНераспределенныхТоваров;
	
КонецФункции

Функция ПолучитьСкладПоУмолчаниюОрганизации(Организация) Экспорт
			
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВиртуальныеСклады.Ссылка КАК СкладПоУмолчанию
		|ИЗ
		|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|ГДЕ
		|	ВиртуальныеСклады.Организация = &Организация
		|	И ВиртуальныеСклады.ЯвляетсяСкладомПоУмолчанию";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СкладПоУмолчанию = Справочники.ВиртуальныеСклады.ПустаяСсылка();	
	
	Пока Выборка.Следующий() Цикл
		СкладПоУмолчанию = Выборка.СкладПоУмолчанию;		
	КонецЦикла;
	
	Возврат СкладПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Область НастройкиПараметровЗаполненияЦеныЭДВС

Функция ПустыеПараметрыЭДВС() Экспорт
	
	ПустыеПараметрыЭДВС = Новый Структура;
	
	ПустыеПараметрыЭДВС.Вставить("СпособЗаполненияЦены"	, ВССерверПереопределяемый.СпособЗаполненияЦеныЭДВСПоУмолчанию());
	ПустыеПараметрыЭДВС.Вставить("ТипЦены"				, Неопределено);
	ПустыеПараметрыЭДВС.Вставить("ЗначениеЦены"			, 0);
	
	Возврат ПустыеПараметрыЭДВС;
	
КонецФункции

Функция ПолучитьПараметрыЭДВС() Экспорт
	
	ХранилищеЗначения = Константы.ПараметрыЭДВС.Получить();
	ПараметрыЭДВС = ХранилищеЗначения.Получить();
	
	Если ПараметрыЭДВС = Неопределено Тогда
		
		ПараметрыЭДВС = ПустыеПараметрыЭДВС();
		
	Иначе
		// обработаем ситуации, когда в релизах добавлялись новые параметры структуры
		ПустыеПараметрыЭДВС = ПустыеПараметрыЭДВС();
		
		Для Каждого СтрокаСтруктуры Из ПустыеПараметрыЭДВС Цикл
			
			Если ПараметрыЭДВС.Свойство(СтрокаСтруктуры.Ключ) = Ложь Тогда
				ПараметрыЭДВС.Вставить(СтрокаСтруктуры.Ключ, СтрокаСтруктуры.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПараметрыЭДВС;
	
КонецФункции

Функция СохранитьПараметрыЭДВС(Знач СохраняемыеНастройки) Экспорт
	
	ПараметрыЭДВС = ПолучитьПараметрыЭДВС();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЭДВС, СохраняемыеНастройки);
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыЭДВС);
	Константы.ПараметрыЭДВС.Установить(ХранилищеЗначения);
	
КонецФункции

Функция ПолучитьНомерПакетаФорматированный(НомерПакета) Экспорт
	
	ДлинаРеквизитаНомерПакета = Метаданные.Документы.ЭлектронныйДокументВС.Реквизиты.НомерПакета.Тип.КвалификаторыСтроки.Длина;	
	СтрокаФормата = "ЧЦ=%1; ЧВН=";
	СтрокаФормата = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(СтрокаФормата, ДлинаРеквизитаНомерПакета);
	ФорматированныйНомер = Формат(НомерПакета, СтрокаФормата);
	
	Возврат ФорматированныйНомер;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбновления



#КонецОбласти

#Область ДанныеДляЗаполненияПервичныхДокументовИзЭДВС

Функция ПодготовитьДанныеДляЗаполненияПервичныхДокументовИзЭДВС(ОбъектЭДВС) Экспорт 
	
	Реквизиты = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Организации"));	
	ОписаниеТиповОрганизация = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));	
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("СправочникСсылка.Склады"));	
	ОписаниеТиповСклад = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));	
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();
	Массив.Добавить(Тип("ПеречислениеСсылка.ВидДетализации"));	
	ОписаниеТиповВидДетализации = Новый ОписаниеТипов(Массив);	
	Массив.Очистить();

	Реквизиты.Колонки.Добавить("Организация"			, ОписаниеТиповОрганизация);
	Реквизиты.Колонки.Добавить("ОрганизацияПолучатель"	, ОписаниеТиповОрганизация);
	Реквизиты.Колонки.Добавить("Дата"					, ОписаниеТиповДата);
	Реквизиты.Колонки.Добавить("Комментарий"			, ОписаниеТиповСтрока);
	Реквизиты.Колонки.Добавить("СкладОтправитель"		, ОписаниеТиповСклад);
	Реквизиты.Колонки.Добавить("СкладПолучатель"		, ОписаниеТиповСклад);
	Реквизиты.Колонки.Добавить("ВидДетализации"			, ОписаниеТиповВидДетализации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",  ОбъектЭДВС.Организация);
	Запрос.УстановитьПараметр("ВиртуальныйСклад",  ОбъектЭДВС.СкладОтправитель);	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеСкладовИВиртуальныхСкладов.Склад
	|ИЗ
	|	РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
	|ГДЕ
	|	СоответствиеСкладовИВиртуальныхСкладов.Организация = &Организация
	|	И СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад = &ВиртуальныйСклад";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоВыборки = Выборка.Количество();
	
	Если КоличествоВыборки = 0 ИЛИ КоличествоВыборки > 1 Тогда
		СкладОтправитель = Справочники.Склады.ПустаяСсылка();
	Иначе
		Выборка.Следующий();
		СкладОтправитель = Выборка.Склад;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВиртуальныйСклад",  ОбъектЭДВС.СкладПолучатель);
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеСкладовИВиртуальныхСкладов.Склад
	|ИЗ
	|	РегистрСведений.СоответствиеСкладовИВиртуальныхСкладов КАК СоответствиеСкладовИВиртуальныхСкладов
	|ГДЕ
	|	СоответствиеСкладовИВиртуальныхСкладов.Организация = &Организация
	|	И СоответствиеСкладовИВиртуальныхСкладов.ВиртуальныйСклад = &ВиртуальныйСклад";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоВыборки = Выборка.Количество();
	
	Если КоличествоВыборки = 0 ИЛИ КоличествоВыборки > 1 Тогда
		СкладПолучатель = Справочники.Склады.ПустаяСсылка();
	Иначе
		Выборка.Следующий();
		СкладПолучатель = Выборка.Склад;
	КонецЕсли;
	
	НоваяСтрока 					 = Реквизиты.Добавить();
	НоваяСтрока.Организация 		 = ОбъектЭДВС.Организация;
	НоваяСтрока.ОрганизацияПолучатель= ОбъектЭДВС.ОрганизацияПолучатель;
	НоваяСтрока.Дата				 = ОбъектЭДВС.Дата;
	НоваяСтрока.Комментарий 		 = ОбъектЭДВС.Комментарий;
	НоваяСтрока.СкладОтправитель 	 = СкладОтправитель; 
	НоваяСтрока.СкладПолучатель  	 = СкладПолучатель;
	НоваяСтрока.ВидДетализации  	 = ОбъектЭДВС.ВидДетализации; 
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектЭДВС.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВСТовары.Товар,
	|	ЭлектронныйДокументВСТовары.Количество,
	|	ЭлектронныйДокументВСТовары.ЕдиницаИзмерения,
	|	ЭлектронныйДокументВСТовары.ТоварНаименование,
	|	ЭлектронныйДокументВСТовары.КодТНВЭД,
	|	ЭлектронныйДокументВСТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭлектронныйДокументВСТовары.ПризнакПроисхождения,
	|	ЭлектронныйДокументВСТовары.СтранаПроисхожденияТовара,
	|	ЭлектронныйДокументВСТовары.Сумма,
	|	ЭлектронныйДокументВСТовары.Цена
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.Товары КАК ЭлектронныйДокументВСТовары
	|ГДЕ
	|	ЭлектронныйДокументВСТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВСТоварыВС.Товар,
	|	ЭлектронныйДокументВСТоварыВС.Количество,
	|	ЭлектронныйДокументВСТоварыВС.ЕдиницаИзмерения,
	|	ЭлектронныйДокументВСТоварыВС.ТоварНаименование,
	|	ЭлектронныйДокументВСТоварыВС.КодТНВЭД,
	|	ЭлектронныйДокументВСТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭлектронныйДокументВСТоварыВС.ПризнакПроисхождения,
	|	ЭлектронныйДокументВСТоварыВС.СтранаПроисхожденияТовара,
	|	ЭлектронныйДокументВСТоварыВС.Сумма,
	|	ЭлектронныйДокументВСТоварыВС.Цена
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ТоварыВС КАК ЭлектронныйДокументВСТоварыВС
	|ГДЕ
	|	ЭлектронныйДокументВСТоварыВС.Ссылка = &Ссылка";
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();	
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектЭДВС.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВСИсходныеТовары.Товар,
	|	ЭлектронныйДокументВСИсходныеТовары.Количество,
	|	ЭлектронныйДокументВСИсходныеТовары.ЕдиницаИзмерения,
	|	ЭлектронныйДокументВСИсходныеТовары.ТоварНаименование,
	|	ЭлектронныйДокументВСИсходныеТовары.КодТНВЭД,
	|	ЭлектронныйДокументВСИсходныеТовары.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭлектронныйДокументВСИсходныеТовары.ПризнакПроисхождения,
	|	ЭлектронныйДокументВСИсходныеТовары.СтранаПроисхожденияТовара,
	|	ЭлектронныйДокументВСИсходныеТовары.Сумма,
	|	ЭлектронныйДокументВСИсходныеТовары.Цена
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ИсходныеТовары КАК ЭлектронныйДокументВСИсходныеТовары
	|ГДЕ
	|	ЭлектронныйДокументВСИсходныеТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВСИсходныеТоварыВС.Товар,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.Количество,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.ЕдиницаИзмерения,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.ТоварНаименование,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.КодТНВЭД,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.НомерПозицииВДекларацииИлиЗаявлении,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.ПризнакПроисхождения,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.СтранаПроисхожденияТовара,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.Сумма,
	|	ЭлектронныйДокументВСИсходныеТоварыВС.Цена
	|ИЗ
	|	Документ.ЭлектронныйДокументВС.ИсходныеТоварыВС КАК ЭлектронныйДокументВСИсходныеТоварыВС
	|ГДЕ
	|	ЭлектронныйДокументВСИсходныеТоварыВС.Ссылка = &Ссылка";
					
	ТаблицаИсходныеТовары = Запрос.Выполнить().Выгрузить();	


	ДанныеДляЗаполнения = Новый Структура;
	
	ДанныеДляЗаполнения.Вставить("ТаблицаРеквизиты", 	  Реквизиты);
	ДанныеДляЗаполнения.Вставить("ТаблицаТовары",    	  ТаблицаТовары);
	ДанныеДляЗаполнения.Вставить("ТаблицаИсходныеТовары", ТаблицаИсходныеТовары);

	Возврат ДанныеДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗавершениеОбновления = Ложь;
	ВССерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления);
	Если ЗавершениеОбновления Тогда
		Возврат;
	КонецЕсли;
	
	// Простой вариант
	//ВССерверПереопределяемый.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "Документы.ЭлектронныйДокументВС.ДобавитьЛидирующиеНулиВНомерДокументаЭДВС";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.7";
	Обработчик.Процедура           = "Документы.ЭлектронныйДокументВС.ЗаполнитьРеквизитСостояниеДокументаЭДВС";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.7";
	Обработчик.Процедура           = "Документы.ЭлектронныйДокументВС.ЭДВСЗаполнениеОрганизацииПолучатель";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно"; // "Отложенно" 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.7";
	Обработчик.Процедура           = "ЭСФСервер.ЗаполнитьНовыйРегистрСоответствияТоваровИЕдиницИзмерения";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.9";
	Обработчик.Процедура           = "ВССервер.ОчиститьРегистрСведенийСтатусыОформленияДокументов";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно"; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.11";
	Обработчик.Процедура           = "Документы.ЭлектронныйДокументВС.ПерезаполнитьТабличныеЧастиЭДВС";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.1";
	Обработчик.Процедура           = "Справочники.ВиртуальныеСклады.ВСПеренестиИзКодаВИдентификаторСклада";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.7";
	Обработчик.Процедура           = "Справочники.ИсточникиПроисхождения.ЗаполнитьПризнакУчетаВС";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.9";
	Обработчик.Процедура           = "Документы.ЭлектронныйДокументВС.ЗаполнитьИП_ИД_ПолучательВКонвертацииЕИ";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Отложенно";
	
КонецПроцедуры

Процедура ОчиститьРегистрСведенийСтатусыОформленияДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатусыОформленияДокументов.Документ,
		|	СтатусыОформленияДокументов.ДатаДокумента
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументов КАК СтатусыОформленияДокументов
		|ГДЕ
		|	СтатусыОформленияДокументов.ДатаДокумента < &ДатаПеереходаНаУчетТоваровВС
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыОформленияДокументов.ДатаДокумента";
	
	Запрос.УстановитьПараметр("ДатаПеереходаНаУчетТоваровВС", НачалоДня(Константы.ДатаПереходаНаУчетПоТоварамОрганизацийНаВиртуальныхСкладах.Получить()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументов.СоздатьНаборЗаписей();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Документ 		= ВыборкаДетальныеЗаписи.Документ;
		ДатаДокумента  	= ВыборкаДетальныеЗаписи.ДатаДокумента;
		
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		НаборЗаписей.Отбор.ДатаДокумента.Установить(ДатаДокумента);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'При записи в регистр сведений ""Статусы оформления документов"" для документа ""%1"" На дату ""%2"" произошла ошибка: %3'");
			ЗаписьЖурналаРегистрации(ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				ТекстСообщения, Документ, ДатаДокумента, ОписаниеОшибки()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));						
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ПолучениеДопИДТоваров

Функция ВедетсяУчетПоИдентификаторамТоваровВС() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УчетПоИдентификаторамТоваровВС");
	
КонецФункции

Функция ПолучитьИдентификаторыТоваровВС() Экспорт
	
	// Создать и заполнить МассивДанныхПрофилейИСЭСФ. 	
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиИСЭСФ.Ссылка КАК ПрофильИСЭСФ
	|ИЗ
	|	Справочник.ПрофилиИСЭСФ КАК ПрофилиИСЭСФ
	|ГДЕ
	|	ПрофилиИСЭСФ.ИспользоватьДляСинхронизации
	|	И ПрофилиИСЭСФ.Владелец.ПарольАутентификации <> """"";
	ВыборкаПрофилиИСЭСФ = Запрос.Выполнить().Выбрать();
	
	МассивДанныхПрофилейИСЭСФ = Новый Массив;
	Пока ВыборкаПрофилиИСЭСФ.Следующий() Цикл
		ДанныеПрофиляИСЭСФ = ЭСФСервер.ДанныеПрофиляИСЭСФ(ВыборкаПрофилиИСЭСФ.ПрофильИСЭСФ);
		МассивДанныхПрофилейИСЭСФ.Добавить(ДанныеПрофиляИСЭСФ);
	КонецЦикла;
	
	КоллекцияРезультатов = Новый Соответствие;
	
	ПараметрыВС = ВССерверПовтИсп.ПолучитьПараметрыЭДВС();
	ВерсияВС = "5.0.0"; //ПараметрыВС.ВерсияИСЭСФ;

	НомерШага = 0;
	
	// Выполнить получение Доп.ИД товаров для каждого профиля ИС ЭСФ.
	Для Каждого ДанныеПрофиляИСЭСФ Из МассивДанныхПрофилейИСЭСФ Цикл
		
		ДанныеПрофиля = ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ;	
		
		ПараметрыМетодаВходящихЭДВС = ЭСФСервер.ПолучитьПараметрыМетода(ДанныеПрофиля.СтруктурнаяЕдиница.Ссылка, ВРег("VstoreBalanceWebService_queryUpdates"), Перечисления.НаправленияЭСФ.Входящий);	
		
		ИдентификаторСессии = ОткрытьСессию(ДанныеПрофиляИСЭСФ, );
		
		// Получить новые входящие ЭСФ.
		НомерШага = НомерШага + 1;
		ЭтоПоследняяПорция = Ложь;
		
		Пока НЕ ЭтоПоследняяПорция Цикл						
			ЭтоПоследняяПорция = ПолучитьДвиженияТоваровВС(Перечисления.НаправленияЭСФ.Входящий, ДанныеПрофиляИСЭСФ, Ложь, ИдентификаторСессии, ВерсияВС, ПараметрыМетодаВходящихЭДВС);					
		КонецЦикла;
		
	  	ЗакрытьСессию(ДанныеПрофиляИСЭСФ, ИдентификаторСессии, ВерсияВС);
		
		КоллекцияРезультатов.Вставить(ДанныеПрофиляИСЭСФ.ПрофильИСЭСФ.Ссылка, Новый Структура("Успешно, ДатаВремя", Истина, ТекущаяДата()));
		
	КонецЦикла;
	
	Возврат КоллекцияРезультатов;
	
КонецФункции

// Выполняет метод queryNewInvoice() API ИС ЭСФ.
// Обновляет существующие и создает новые документы ЭСФ, заполняет ссылочные реквизиты.
// Сохраняет lastEventId и другие данные в регистр ПараметрыМетодовИСЭСФ.
//
// Параметры:
//  НаправлениеЭСФ - ПеречислениеСсылка.НаправленияЭСФ - Направление получаемых ЭСФ.
//  ПрофильИСЭСФ - СправочникСсылка.ПрофилиИСЭСФ, Структура - 
//   Профиль, для которого был получен ИдентификаторСессии.
//   Если Структура, то см. ЭСФСервер.ДанныеПрофиляИСЭСФ().
//  ПолучитьОднуПорцию - Булево - Получать все новые ЭСФ или одну порцию новых ЭСФ.
//   Если Истина, то будет получена только одна порция новых ЭСФ.
//   Если Ложь, то будут получены все новые ЭСФ.
//   Размер одной порции определяется параметром limit, в регистре сведений ПараметрыМетодовИСЭСФ.
//  ТолькоСоздатьОбновитьФайлы - Булево - Действия, которые необходимо выполнить с ЭСФ:
//   Если Истина, то у существующих ЭСФ будут обновлены XML файлы, если файлов нет, то они будут созданы.
//    Новые ЭСФ создаваться не будут. Существующие ЭСФ перезаполняться не будут.
//   Если Ложь, то перезаполнит старые ЭСФ, создаст новые ЭСФ, создаст и обновит присоединенные файлы ЭСФ.  
//  ИдентификаторСессии - Строка - Идентификатор сессии, под которой выполняются действия.
//
// Возвращаемое значение:
//  Булево - Это последняя порция новых ЭСФ.
//
Функция ПолучитьДвиженияТоваровВС(Знач НаправлениеВходящие, Знач ПрофильИСЭСФ, Знач ПолучитьОднуПорцию, ИдентификаторСессии, ВерсияВС, ПараметрыМетодаЭДВС) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьДвиженияТоваровВС(НаправлениеВходящие, ПрофильИСЭСФ, ПолучитьОднуПорцию, ИдентификаторСессии, ВерсияВС, ПараметрыМетодаЭДВС);
	
КонецФункции

// Выполняет метод queryUpdates() сервиса VstoreBalanceWebService API ИС ВС.
//
Функция ПолучитьИдентификаторыТоваров(ПараметрыВыгрузки) Экспорт
	  
	Возврат ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().ПолучитьИдентификаторыТоваров(ПараметрыВыгрузки);

КонецФункции

Функция ПустаяТаблицаОбновленийДвиженийТоваровВС() Экспорт
	
	ТаблицаОбновлений = Новый ТаблицаЗначений;
	
	ТипСтрока  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(400));
	ТипДата    = Новый ОписаниеТипов("Дата ", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипЧисло   = Новый  ОписаниеТипов("Число");
	
	//ТаблицаОбновлений.Колонки.Добавить("НомерСтроки", ТипЧисло);
	ТаблицаОбновлений.Колонки.Добавить("БИН", ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("СкладИдентификатор", ТипЧисло);
	ТаблицаОбновлений.Колонки.Добавить("ТоварНаименование", ТипСтрока);	
	ТаблицаОбновлений.Колонки.Добавить("КодТНВЭД", ТипСтрока);	
	ТаблицаОбновлений.Колонки.Добавить("ДополнительныйИдентификатор", ТипЧисло);
	ТаблицаОбновлений.Колонки.Добавить("ЕдиницаИзмеренияКод", ТипСтрока);
	
	ТаблицаОбновлений.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаОбновлений.Колонки.Добавить("Количество", ТипЧисло);
	                                              	
	ТаблицаОбновлений.Колонки.Добавить("НомерПозицииВДекларацииИлиЗаявлении", ТипСтрока);	
	ТаблицаОбновлений.Колонки.Добавить("НомерЗаявленияВРамкахТС", ТипСтрока);	
	
	ТаблицаОбновлений.Колонки.Добавить("ТоварНаименованиеВРамкахТС", ТипСтрока);	
	ТаблицаОбновлений.Колонки.Добавить("ФизическаяМетка", ТипСтрока);
	
	ТаблицаОбновлений.Колонки.Добавить("ДокументДвижения", ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("ДатаОбновления", ТипСтрока);
	ТаблицаОбновлений.Колонки.Добавить("НомерСтрокиВДокументеДвижения", ТипЧисло);
	
	Возврат ТаблицаОбновлений;
	
КонецФункции

Процедура АктуализироватьПризнакСодержанияДополнительногоУровня() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураГСВС.Ссылка
		|ПОМЕСТИТЬ GTIN
		|ИЗ
		|	Справочник.НоменклатураГСВС КАК НоменклатураГСВС
		|ГДЕ
		|	НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.GTIN)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НоменклатураГСВС.Ссылка КАК ГСВС
		|ИЗ
		|	GTIN КАК GTIN
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураГСВС КАК НоменклатураГСВС
		|		ПО GTIN.Ссылка.Родитель = НоменклатураГСВС.Ссылка
		|ГДЕ
		|	НоменклатураГСВС.ТипКодаГСВС = ЗНАЧЕНИЕ(Перечисление.ТипыКодовГСВС.ТНВЭД)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.ГСВС, "СодержитДополнительныйУровень") Тогда
			ЭлементГСВС = ВыборкаДетальныеЗаписи.ГСВС.ПолучитьОбъект();
			ЭлементГСВС.СодержитДополнительныйУровень = Истина;	
			ЭлементГСВС.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения складов для отправки в ИС ЭСФ.
//
Процедура ПроверитьВозможностьСозданияСкладовПоставитьВОчередь(МассивВС, ДополнительныеПараметры) Экспорт

	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
	
	МассивИсключаемыхВС = Новый Массив;
	
	Для Каждого СсылкаВС Из МассивВС Цикл
		
		РезультатПроверки = ОбработкаОбменЭСФ.ПроверитьВС(СсылкаВС);
		ОбработкаОбменЭСФ.СообщитьОбнаруженыОшибкиВС(СсылкаВС, РезультатПроверки);
		
		Если РезультатПроверки.ЗапрещающиеОшибки.Количество() <> 0 Тогда
			МассивИсключаемыхВС.Добавить(СсылкаВС);
		КонецЕсли;
		
	КонецЦикла;	
	
	//проверим склады, у которых одинаковое наименование
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВС", МассивВС);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВиртуальныеСклады.Наименование,
		|	ВиртуальныеСклады.Ссылка,
		|   1 КАК Количество
		|ИЗ
		|	Справочник.ВиртуальныеСклады КАК ВиртуальныеСклады
		|ГДЕ
		|	ВиртуальныеСклады.Ссылка В (&МассивВС)";
	
	ТаблицаВС = Новый ТаблицаЗначений;
	ТаблицаВС = Запрос.Выполнить().Выгрузить();
	
	СвернутаяТаблицаВС = ТаблицаВС.Скопировать();
	СвернутаяТаблицаВС.Свернуть("Наименование", "Количество");
	
	Для Каждого Строка Из СвернутаяТаблицаВС Цикл
		
		Если Строка.Количество > 1 Тогда
			Для Каждого СтрокаВС Из ТаблицаВС Цикл
				Если СтрокаВС.Наименование = Строка.Наименование Тогда
					МассивИсключаемыхВС.Добавить(СтрокаВС.Ссылка);
					
					ТекстСообщения = НСтр("ru = 'Обнаружены виртуальные склады с одинаковым наименованием: ""%1"".'");
			        ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СсылкаВС);
			        ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения, СсылкаВС);

				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаВС Из МассивИсключаемыхВС Цикл
		
		ИндексСтроки = МассивВС.Найти(СтрокаВС);
		
		Если НЕ ИндексСтроки = Неопределено Тогда
			
			МассивВС.Удалить(ИндексСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
