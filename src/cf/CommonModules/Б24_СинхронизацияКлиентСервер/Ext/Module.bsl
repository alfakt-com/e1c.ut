
#Область ПереопределениеДляОптимизацииПередачиНаСервер

Процедура ДобавитьВЛогИОповестить(ОбщиеНастройки, ВаринтОшибки, ТекстСообщения) 
	
	#ЕСЛИ НЕ СЕРВЕР И НЕ МобильноеПриложениеКлиент  И НЕ МобильноеПриложениеСервер ТОГДА 	
		Состояние(ТекстСообщения);
	#КОНЕЦЕСЛИ
	
	//оптимизируем передачу, т.к. часто используется
	ПередаваемыеДанныеНаСервер = Новый Структура( );
	ПередаваемыеДанныеНаСервер.Вставить("НастройкаСинхронизации"	, ОбщиеНастройки.НастройкаСинхронизации);
	ПередаваемыеДанныеНаСервер.Вставить("НомерСообщения"			, ОбщиеНастройки.НомерСообщения);
	ПередаваемыеДанныеНаСервер.Вставить("ВремяЗапуска"				, ОбщиеНастройки.ВремяЗапуска);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение1"				, ОбщиеНастройки.Измерение1);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение2"				, ОбщиеНастройки.Измерение2);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение3"				, ОбщиеНастройки.Измерение3);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение4"				, ОбщиеНастройки.Измерение4);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение5"				, ОбщиеНастройки.Измерение5);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение6"				, ОбщиеНастройки.Измерение6);
	
	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ПередаваемыеДанныеНаСервер, ВаринтОшибки,  ТекстСообщения);  
	
	ОбщиеНастройки.НомерСообщения = ПередаваемыеДанныеНаСервер.НомерСообщения;
	
КонецПроцедуры

Процедура ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ЗначениеСтроки, ДополнительныйИдБитрикс24="")
	
	//оптимизируем передачу, т.к. часто используется
	ПередаваемыеДанныеНаСервер = Новый Структура( );
	ПередаваемыеДанныеНаСервер.Вставить("Портал"				, ОбщиеНастройки.Портал);
	ПередаваемыеДанныеНаСервер.Вставить("ТипыОбъектовОбмена"	, ОбщиеНастройки.ТипыОбъектовОбмена);
	
	Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ПередаваемыеДанныеНаСервер, ТипДанных, Объект, ЗначениеСтроки, ДополнительныйИдБитрикс24);  
	
КонецПроцедуры

Процедура УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки)
	
	//оптимизируем передачу, т.к. часто используется
	ПередаваемыеДанныеНаСервер = Новый Структура( );
	ПередаваемыеДанныеНаСервер.Вставить("Портал"					, ОбщиеНастройки.Портал);
	ПередаваемыеДанныеНаСервер.Вставить("ТипыОбъектовОбмена"		, ОбщиеНастройки.ТипыОбъектовОбмена);
	ПередаваемыеДанныеНаСервер.Вставить("ВаринтыОшибок"				, ОбщиеНастройки.ВаринтыОшибок);
	ПередаваемыеДанныеНаСервер.Вставить("НастройкаСинхронизации"	, ОбщиеНастройки.НастройкаСинхронизации);
	ПередаваемыеДанныеНаСервер.Вставить("НомерСообщения"			, ОбщиеНастройки.НомерСообщения);
	ПередаваемыеДанныеНаСервер.Вставить("ВремяЗапуска"				, ОбщиеНастройки.ВремяЗапуска);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение1"				, ОбщиеНастройки.Измерение1);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение2"				, ОбщиеНастройки.Измерение2);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение3"				, ОбщиеНастройки.Измерение3);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение4"				, ОбщиеНастройки.Измерение4);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение5"				, ОбщиеНастройки.Измерение5);
	ПередаваемыеДанныеНаСервер.Вставить("Измерение1"				, ОбщиеНастройки.Измерение1);
	
	Б24_СинхронизацияВызовСервера.УдалитьИдБ24Объекта(ПередаваемыеДанныеНаСервер, ТипДанных, Объект, ОписаниеОшибки);  
	
	ОбщиеНастройки.НомерСообщения = ПередаваемыеДанныеНаСервер.НомерСообщения;
	
КонецПроцедуры

Процедура УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Успешно,  ТипДанных, Пакет, Данные)
	
	//оптимизируем передачу, т.к. часто используется
	ПередаваемыеДанныеНаСервер = Новый Структура( );
	ПередаваемыеДанныеНаСервер.Вставить("НастройкаСинхронизации"	, ОбщиеНастройки.НастройкаСинхронизации);
	ПередаваемыеДанныеНаСервер.Вставить("ТипыОбъектовОбмена"		, ОбщиеНастройки.ТипыОбъектовОбмена);
	
	Б24_ВыгрузкаВызовСервера.УдалениеЗаписиИзПакетаДаных(ПередаваемыеДанныеНаСервер, Успешно, ТипДанных, Пакет, Данные);
	
КонецПроцедуры

#КонецОбласти


#Область ОбщиеПроцедурыИФункцииОбмена

Функция СформироватьНастройкиСинхронизации(НастройкаСинхронизации, ПолнаяСинхронизация, ВидСинхронизации) Экспорт
	
	ОбновлениеУспешно = Б24_СинхронизацияВызовСервера.ПроверкаОбновленияДанныхМодуляОбменаСБитрикс24();
	
	Если НЕ ОбновлениеУспешно тогда
		Сообщить("Не удалось обновить настройки модуля.");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Б24_ОбщегоНазначенияПовтИсп.ДополнительныеРеквизитыИСведенияИспользуются() тогда
		Сообщить("Не включен функционал использования дополнительных реквизитов и сведений. Синхронизация невозможна.");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Б24_ОбщегоНазначенияПовтИсп.ЭтоКопияБазы() тогда
		Сообщить("В копии базы выполнение обмена запрещено.");
		Возврат Неопределено;
	КонецЕсли;
	
	ВремяЗапуска = Формат(ТекущаяДата(),"ДЛФ=T");
	Если ВидСинхронизации = 1 тогда
		ВидСинхронизацииСтрокой = "Обмен в режиме реального времени";
	ИначеЕсли ВидСинхронизации = 0 тогда
		ВидСинхронизацииСтрокой = "По расписанию";
	ИначеЕсли ВидСинхронизации = 7 тогда
		ВидСинхронизацииСтрокой = "Выгрузка печатных форм";
	Иначе
		ВидСинхронизацииСтрокой = "Интерактивная синхронизация";
	КонецЕсли;
	
	БазовыеПараметры = Новый Структура;
	БазовыеПараметры.Вставить("Операция"	, "");
	БазовыеПараметры.Вставить("ВремяЗапуска"	, ВремяЗапуска);
	БазовыеПараметры.Вставить("ВидЗапуска"		, ВидСинхронизацииСтрокой);
	БазовыеПараметры.Вставить("НомерСообщения"	, 0);
	
	ОбщиеНастройки = СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации, БазовыеПараметры);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Сообщить("Не удалось получить настройки.");
		Возврат Неопределено;
	КонецЕсли;   
	
	
	ОбщиеНастройки.Вставить("ВремяЗапускаВМиллисекундах"	, ТекущаяУниверсальнаяДатаВМиллисекундах());	
	ОбщиеНастройки.Вставить("ВремяЗапуска"					, ВремяЗапуска);	
	ОбщиеНастройки.Вставить("ПолнаяЗагрузка"				, ПолнаяСинхронизация);	
	ОбщиеНастройки.Вставить("ПолнаяВыгрузка"				, ПолнаяСинхронизация);	
	ОбщиеНастройки.Вставить("ВидСинхронизации"				, ВидСинхронизацииСтрокой);	
	ОбщиеНастройки.Вставить("СтатусПроверки"				, 0);	
	ОбщиеНастройки.Вставить("НомерСообщения"				, 0);	
	
	ОбщиеНастройки.Вставить("ВыполненоБезОшибок"			, Истина);
	ОбщиеНастройки.Вставить("ИдПроцессаЗагрузки"			, "");
	ОбщиеНастройки.Вставить("ТаблицаСопоставленияИзменений"	, Новый Массив);
	
	ОбщиеНастройки.Вставить("СинхронизацияТоваров"		, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СинхронизацияТоваров"));
	ОбщиеНастройки.Вставить("СинхронизацияКонтрагентов"	, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СинхронизацияКонтрагентов"));
	ОбщиеНастройки.Вставить("СинхронизацияСчетов"		, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СинхронизацияСчетов"));
	ОбщиеНастройки.Вставить("СинхронизацияСделок"		, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СинхронизацияСделок"));
	ОбщиеНастройки.Вставить("СинхронизацияЗаказов"		, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СинхронизацияЗаказов"));
	ОбщиеНастройки.Вставить("ТипыОперацийСинхронизации"	, Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации());
	
	ОбщиеНастройки.Вставить("КартинкиИФайлыНоменклатуры"			 , Новый Массив);
	ОбщиеНастройки.Вставить("КартинкиИФайлыХарактеристикНоменклатуры", Новый Массив);
	
	#Область ПредопределенныеСвойства
	ОбщиеНастройки.Вставить("ИсключающиеСвойства", Новый Массив); //указываются свойства, которые не должно добавляться загружаемым объектам
	                                                                                                           
	ОбщиеНастройки.Вставить("ПредопределенноеСвойствоВидаНоменклатуры"	 , Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоВидаНоменклатурыБитрикс24());
	ОбщиеНастройки.ИсключающиеСвойства.Добавить(ОбщиеНастройки.ПредопределенноеСвойствоВидаНоменклатуры);	
	//ОбщиеНастройки.Вставить("ПредопределенноеСвойствоКартинокИФайловНоменклатуры", Б24_ОбменСПорталомВызовСервера.СоздатьПолучитьСвойствоКартинокИФайловНоменклатуры());
	
	Если ОбщиеНастройки.СинхронизацияСчетов тогда
		
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНазваниеКомментарияСчета"	, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоПользовательскогоКомментарияСчетаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНазваниеТемыСчета"			, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНазваниеТемыСчетаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНомерСчетаБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНомерСчетаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоДатаСчетаБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоДатаСчетаБитрикс24());
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "Счет");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщиеНастройки.СинхронизацияСделок тогда
		
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНазваниеТемыСделки"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНазваниеТемыСделкиБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНомерСделкиБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНомерСделкиБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоДатаСделкиБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоДатаСделкиБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНаправлениеСделки"			, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНаправлениеСделкиБитрикс24());
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "Сделка");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
	КонецЕсли;
	
	
	Если ОбщиеНастройки.СинхронизацияЗаказов тогда
		
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНомераЗаказаБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНомерЗаказаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоДатыЗаказаБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоДатаЗаказаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоТрекНомераЗаказаБитрикс24"	, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоТрекНомерЗаказаБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоКомментарияЗаказаБитрикс24", Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоПользовательскогоКомментарияЗаказаБитрикс24());
		
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоНомераОтгрузкиБитрикс24"	, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНомерОтгрузкиБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоДатыОтгрузкиБитрикс24"		, Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоДатаОтгрузкиБитрикс24());
		ОбщиеНастройки.Вставить("ПредопределенноеСвойствоТрекНомераОтгрузкиБитрикс24", Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоТрекНомерОтгрузкиБитрикс24());
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "Заказ");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "Отгрузка");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "ДоставкаЗаказ");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
		СвойствоСтатуса = Б24_СинхронизацияВызовСервера.ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, "ДоставкаОтгрузка");
		Если ЗначениеЗаполнено(СвойствоСтатуса) Тогда ОбщиеНастройки.ИсключающиеСвойства.Добавить(СвойствоСтатуса) КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ОбщиеНастройки;
	
КонецФункции

Функция СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации, пПараметры = Неопределено) Экспорт
	
	Если пПараметры = Неопределено тогда
		пПараметры = Новый Структура;
		пПараметры.Вставить("Операция"		, "");
		пПараметры.Вставить("ВремяЗапуска"	, Формат(ТекущаяДата(),"ДЛФ=T"));
		пПараметры.Вставить("ВидЗапуска"	, "Служебное выполненение rest api");
		пПараметры.Вставить("НомерСообщения", 0);
	КонецЕсли;
	
	ОбщиеНастройки = Б24_ОбщегоНазначенияСервер.СформироватьСтруктуруНастроекДляЛогирования(НастройкаСинхронизации , пПараметры.ВремяЗапуска, пПараметры.ВидЗапуска, пПараметры.НомерСообщения);	
	
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);
	
	ОбщиеНастройки.Вставить("ДеревоГрупп"					, Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ДеревоГрупп"));	
	ОбщиеНастройки.Вставить("ПолнаяВыгрузка"				, Ложь);
	ОбщиеНастройки.Вставить("СтатусПроверкиОчереди"			, 0);
	ОбщиеНастройки.Вставить("КоличествоДанныхВПакете"		, 50); 	
	ОбщиеНастройки.Вставить("Операция"						, пПараметры.Операция); 	
	
	#Область ДобавлениеИнформацииОВидахОшибок
	
	СтрОшибок = новый Структура;
	СтрОшибок.Вставить("Информация"			, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.Информация"));
	СтрОшибок.Вставить("Ошибка"				, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.Ошибка"));
	СтрОшибок.Вставить("КритическаяОшибка"	, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.КритическаяОшибка"));
	
	ОбщиеНастройки.Вставить("ВаринтыОшибок", СтрОшибок);
	
	#КонецОбласти
	
	ОбщиеНастройки.Измерение2 = "Формирование настроек для обмена";
	ОбщиеНастройки.Измерение3 = "Базовые настройки";
	
	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало формирования настроек");
	
	#Область ДобавлениеИнформацииРеквизитов	
	
	ОбрезатьИсториюОбменов 	 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ОбрезатьИсториюОбменов");
	ЧислоДнейХраненияИстории = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ЧислоДнейХраненияИстории");
	РежимОтладки 			 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","РежимОтладки");
	ТипДокументаБ24ПоЗаказу  = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
	
	ОбщиеНастройки.Вставить("ЧислоДнейХраненияИстории"	, ?(ЗначениеЗаполнено(ЧислоДнейХраненияИстории), ЧислоДнейХраненияИстории, 7));
	ОбщиеНастройки.Вставить("ОбрезатьИсториюОбменов"	, ?(ЗначениеЗаполнено(ОбрезатьИсториюОбменов), ОбрезатьИсториюОбменов, Истина));
	ОбщиеНастройки.Вставить("РежимОтладки"				, ?(ЗначениеЗаполнено(РежимОтладки), РежимОтладки, Ложь));
	ОбщиеНастройки.Вставить("ТипДокументаБ24ПоЗаказу"	, ?(ЗначениеЗаполнено(ТипДокументаБ24ПоЗаказу), ТипДокументаБ24ПоЗаказу, "Сделка"));
	
	ОбщиеНастройки.Вставить("ПараметрКоннектора"		, "auth_connector=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(ОбщиеНастройки.ИдентификаторИсточника));
	#КонецОбласти
	
	
	#Область ДобавлениеОбщихНастроек
	
	ОбщиеНастройки.Вставить("ФорматСуммы"		, "ЧЦ=18; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=");
	ОбщиеНастройки.Вставить("ФорматКоличества"	, "ЧРД=.; ЧН=; ЧГ=");
	ОбщиеНастройки.Вставить("ПодкаталогФайлов"	, "import_files");
	ОбщиеНастройки.Вставить("НаименованиеНалога", "НДС");
	ОбщиеНастройки.Вставить("НаименованиеСкидки", НСтр("ru = 'Скидка'"));
	
	#ЕСЛИ МобильноеПриложениеКлиент  ИЛИ  МобильноеПриложениеСервер ТОГДА 	
		ОбщиеНастройки.Вставить("ПлатформаWindows", ложь);	
	#ИНАЧЕ	
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
		
		ОбщиеНастройки.Вставить("ПлатформаWindows", ПлатформаWindows);	
	#КОНЕЦЕСЛИ		
	
	РазрешенныеТипыКартинок = Новый Массив;
	РазрешенныеТипыКартинок.Добавить("gif");
	РазрешенныеТипыКартинок.Добавить("jpg");
	РазрешенныеТипыКартинок.Добавить("jpeg");
	РазрешенныеТипыКартинок.Добавить("png");
	РазрешенныеТипыКартинок.Добавить(".gif");
	РазрешенныеТипыКартинок.Добавить(".jpg");
	РазрешенныеТипыКартинок.Добавить(".jpeg");
	РазрешенныеТипыКартинок.Добавить(".png");
	РазрешенныеТипыКартинок.Добавить("");
	ОбщиеНастройки.Вставить("РасширенияКартинок", РазрешенныеТипыКартинок);
	
	#КонецОбласти
	
	
	#Область ДобавлениеИнформацииОТипахОбъектовОбмена
	
	ОбщиеНастройки.Вставить("ТипыОбъектовОбмена", Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом());
	
	#КонецОбласти
	
	#Область ДобавлениеИнформацииПодключенияНаСайт	
	
	Если НЕ Б24_RestApiКлиентСервер.ДобавлениеНастроекПодключения(ОбщиеНастройки) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Б24_RestApiВызовСервера.ПолучитьТокенДляСоединения(ОбщиеНастройки) тогда
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не удалось получить временный ключ соединения. Выгрузка пакета невозможна.");
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщиеНастройки.НастройкиПодключения = Б24_RestApiКлиентСервер.ПолучитьНастройкиПодключения(ОбщиеНастройки);
	
	#КонецОбласти
	
	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Выполнение обрезки лога");
	Б24_ОбщегоНазначенияПовтИсп.ВыполнитьОбрезкуЛогаВСеансе();
	
	Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Формирование настроек для обмена завершено");
	
	ОбщиеНастройки.Измерение2 = "";
	ОбщиеНастройки.Измерение3 = "";
	
	Возврат ОбщиеНастройки; 	
	
КонецФункции

Процедура РазобратьОшибку(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки)
	
	НастройкаСинхронизации = ОбщиеНастройки.НастройкаСинхронизации;
	
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Компания тогда
		
		Если СтрНайти(ОписаниеОшибки, "Company is not found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда	
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Контакт тогда
		
		Если СтрНайти(ОписаниеОшибки, "Contact is not found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда	
			
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит тогда
		
		Если (СтрНайти(ОписаниеОшибки, "The Requisite with ID") > 0 И СтрНайти(ОписаниеОшибки, " is not found") > 0) ИЛИ  СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда	
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			Возврат;
		КонецЕсли;
		
		Если СтрНайти(ОписаниеОшибки, "ENTITY_ID is not defined or invalid.") > 0 тогда
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(НастройкаСинхронизации, ТипДанных, Объект);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита тогда
		
		Если СтрНайти(ОписаниеОшибки, "Type") > 0 И СтрНайти(ОписаниеОшибки, " exists.") > 0 тогда	
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Помечаем, что такой адрес уже был выгружен.");
			ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, Истина);  
			Возврат;
		ИначеЕсли СтрНайти(ОписаниеОшибки, "Type") > 0 И СтрНайти(ОписаниеОшибки, " not found.") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		ИначеЕсли СтрНайти(ОписаниеОшибки, "ENTITY_ID is not defined or invalid") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
			
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(НастройкаСинхронизации, ТипДанных, Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Access denied")тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
		Если СтрНайти(ОписаниеОшибки, "ENTITY_ID is not defined or invalid.") > 0 тогда
			
			Если ЗначениеЗаполнено(Объект) тогда
				Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ЗарегистрироватьИзмененияВладельцевДанных(НастройкаСинхронизации, ТипДанных, Объект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден.") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
		Если СтрНайти(ОписаниеОшибки, "Неверный раздел-родитель") > 0 тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Ид родителя был изменен. Нужно сдалать повторную вырузку элемента.");
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Access denied") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0  тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Access denied") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		ИначеЕсли СтрНайти(ОписаниеОшибки, "already exists.") > 0 тогда
			
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "В Б24 уже есть единица измерения с кодом указанным ранее. Загружаем ее из Битрикс24");
			
			ПервоеВхождение = СтрНайти(ОписаниеОшибки, """");	
			ВтороеВхождение = СтрНайти(ОписаниеОшибки, """",,ПервоеВхождение+1);	
			КодЭлемента 	= Сред(ОписаниеОшибки, ПервоеВхождение+1, ВтороеВхождение - ПервоеВхождение-1); 

			Если ЗначениеЗаполнено(КодЭлемента) тогда
				ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.measure.list", Неопределено,, "filter[CODE]=" + КодЭлемента);		
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Access denied") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки); 
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Счет тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found.") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Сделка тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки тогда
		
		Если СтрНайти(ОписаниеОшибки, "ot found") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Заказ тогда
		
		Если СтрНайти(ОписаниеОшибки, "entity not exists") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "не найден") > 0 тогда
			УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Объект, ОписаниеОшибки);  
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Оплата тогда
		
		Если СтрНайти(ОписаниеОшибки, "Can't find payment") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Оплата не найдена") > 0 тогда
			
			ПервоеВхождение = СтрНайти(ОписаниеОшибки, "- ");	
			ВтороеВхождение = СтрНайти(ОписаниеОшибки, " ",,ПервоеВхождение+2);	
			
			Если ВтороеВхождение > 0 тогда
				КодЭлемента 	= СокрЛП(Сред(ОписаниеОшибки, ПервоеВхождение+1, ВтороеВхождение - ПервоеВхождение-1)); 
			Иначе
				КодЭлемента 	= СокрЛП(Прав(ОписаниеОшибки, СтрДлина(ОписаниеОшибки)-ПервоеВхождение));	
			КонецЕсли;
			
			Оплата = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(ОбщиеНастройки.Портал, ТипДанных, КодЭлемента);
			
			Если ЗначениеЗаполнено(Оплата) тогда
				УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Оплата.Объект, ОписаниеОшибки);  
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка тогда
		
		Если СтрНайти(ОписаниеОшибки, "Can't find shipment") > 0 ИЛИ СтрНайти(ОписаниеОшибки, "Отгрузка не найдена") > 0 тогда
			
			ПервоеВхождение = СтрНайти(ОписаниеОшибки, "- ");	
			ВтороеВхождение = СтрНайти(ОписаниеОшибки, " ",,ПервоеВхождение+2);	
			
			Если ВтороеВхождение > 0 тогда
				КодЭлемента 	= СокрЛП(Сред(ОписаниеОшибки, ПервоеВхождение+1, ВтороеВхождение - ПервоеВхождение-1)); 
			Иначе
				КодЭлемента 	= СокрЛП(Прав(ОписаниеОшибки, СтрДлина(ОписаниеОшибки)-ПервоеВхождение));	
			КонецЕсли;
			
			Отгрузка = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоИдБ24Объекта(ОбщиеНастройки.Портал, ТипДанных, КодЭлемента);
			
			Если ЗначениеЗаполнено(Отгрузка) тогда
				УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Отгрузка.Объект, ОписаниеОшибки);  
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииВыгрузки

Процедура ЗапуститьВыполненениеОчередиВыгрузки(ОбщиеНастройки) Экспорт
	
	ОчередьВыгрузки = Б24_СинхронизацияВызовСервера.ПолучитьОчередьВыгрузки(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.ПолнаяВыгрузка, ОбщиеНастройки.ВремяЗапускаВМиллисекундах);
	
	ПроверитьОчередьВыполненияВыгрузки(ОбщиеНастройки, ОчередьВыгрузки);
	
КонецПроцедуры

Процедура ПроверитьОчередьВыполненияВыгрузки(ОбщиеНастройки, ОчередьВыгрузки)
	
	//0 - новый
	//1 - выгружен	
	//2 - ошибка  
	
	ЕстьОчередь = Истина;
	
	Пока ЕстьОчередь Цикл
		
		ЕстьОчередь = Ложь;
	
		Для Каждого ЭлементОчереди из ОчередьВыгрузки Цикл

			Если ЭлементОчереди.Статус <> 0 тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоВыполнений > ОбщиеНастройки.КоличествоПовторенийПриОшибках тогда
				ЭлементОчереди.Статус = 2; 
				Продолжить;
			КонецЕсли;
			
			ЕстьОчередь = Истина;
			
			ОбщиеНастройки.Операция 			 = ЭлементОчереди.Операция; 
			ОбщиеНастройки.СтатусПроверкиОчереди = ЭлементОчереди.Статус;
			
			ОбщиеНастройки.ВыполненоБезОшибок = Истина;
			
			
			Если ОбщиеНастройки.ПолнаяВыгрузка тогда
				ОбщиеНастройки.Измерение3 = "Полная выгрузка данных на портал с типом: " + Строка(ОбщиеНастройки.Операция);
			Иначе
				ОбщиеНастройки.Измерение3 = "Выгрузка изменений на портал с типом: " + Строка(ОбщиеНастройки.Операция);
			КонецЕсли;
			
			ОбработатьЭлементОчередиВыполненияВыгрузки(ОбщиеНастройки, ЭлементОчереди);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиВыполненияВыгрузки(ОбщиеНастройки, ЭлементОчереди)  
	
	ТипОперацийСинхронизации = ОбщиеНастройки.Операция;
	
	Если ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Компании тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Компания);	
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Контакты тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Реквизиты тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.АдресаРеквизитов тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.БанковскиеСчета тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита);
		
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.ГруппыТоваров тогда
		
		//группы выгружаюстя 2 раза. В первый раз подразумеваются, что выгружаются новые, в второй - все повторно, устанавливая иерархию
		//В первый раз иерархию не установить, т.к. выгружается пакетами. Неоптимально, но понятный код.
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара);
		
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.ЕдиницыИзмерения тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Товары тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Товар);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Счета тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Счет);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСчета);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Сделки тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Сделка);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСделки);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыСделки);
		
		
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваТоваров тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваКомпаний тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваКонтактов тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваСчетов тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваСделок тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки);
		
		
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Заказы тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Заказ);
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыЗаказа);
		
		Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляЗаказов") = Истина тогда							
			СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.УказанныеСвойстваЗаказа);
		КонецЕсли;	
		
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Отгрузки тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.Оплаты тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.Оплата);
	ИначеЕсли ТипОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваЗаказов тогда
		СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа);
	КонецЕсли;
	
	ОбщиеНастройки.Измерение4 = "";
	ОбщиеНастройки.Измерение5 = "";
	
	Если ОбщиеНастройки.ВыполненоБезОшибок тогда		
		ЭлементОчереди.Статус = 1; 
	Иначе
		ЭлементОчереди.КоличествоВыполнений = ЭлементОчереди.КоличествоВыполнений + 1; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьИОтправить(ОбщиеНастройки, ТипДанных) Экспорт
	
	ОбщиеНастройки.Измерение4 = Строка(ТипДанных);
	
	Если ОбщиеНастройки.СтатусПроверкиОчереди = 0 тогда
		ОбщиеНастройки.Измерение5 = "Первая отправка данных на портал"
	ИначеЕсли ОбщиеНастройки.СтатусПроверкиОчереди = 2 тогда
		ОбщиеНастройки.Измерение5 = "Повторная отправка данных на портал"
	КонецЕсли;
	
	Если ОбщиеНастройки.СтатусПроверкиОчереди = 0 тогда
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало выгрузки объектов с типом: " + Строка(ТипДанных));
	ИначеЕсли ОбщиеНастройки.СтатусПроверкиОчереди = 2 тогда
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Повторная выгрузки объектов с типом: " + Строка(ТипДанных));
	КонецЕсли;
	
	ОбщиеНастройки.Измерение6 = "Формирование пакетов для выгрузки на портал";
	Б24_ВыгрузкаВызовСервера.ФормированиеПакетовДанных(ОбщиеНастройки, ТипДанных);
	ОбщиеНастройки.Измерение6 = "";
	
	ПодготовкаИВыгрузкаДанныхНаПортал(ОбщиеНастройки, ТипДанных);
	
	Если ОбщиеНастройки.СтатусПроверкиОчереди = 0 тогда
		ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершение выгрузки объектов с типом: " + Строка(ТипДанных));
	ИначеЕсли ОбщиеНастройки.СтатусПроверкиОчереди = 2 тогда
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Повторная выгрузка объектов с типом: " + Строка(ТипДанных) + " завершена");
	КонецЕсли;
	
	ОбщиеНастройки.Измерение4 = "";
	ОбщиеНастройки.Измерение5 = "";
	ОбщиеНастройки.Измерение6 = "";
	
КонецПроцедуры


Процедура ПодготовкаИВыгрузкаДанныхНаПортал(ОбщиеНастройки, ТипДанных)
	
	ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало формирования данных для объектов с типом: " + Строка(ТипДанных));
	
	КоличествоПакетов = Б24_ВыгрузкаВызовСервера.ПолучитьКоличествоВыгружаемыхПакетов(ОбщиеНастройки, ТипДанных);
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Компания ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Контакт тогда
		лТипОбъекта = Тип("СправочникСсылка.Партнеры");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита  тогда 	
		лТипОбъекта = Тип("СправочникСсылка.Контрагенты");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита тогда
		лТипОбъекта = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
		лТипОбъекта = Тип("СправочникСсылка.Номенклатура");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара тогда
		Если Б24_СинхронизацияПовтИсп.ЕстьПользовательскоеДеревоГрупп(ОбщиеНастройки.НастройкаСинхронизации) тогда
			лТипОбъекта = Тип("СправочникСсылка.Б24_ПользовательскиеГруппыТоваров");
		Иначе                        
			лТипОбъекта = Тип("СправочникСсылка.Номенклатура");
		КонецЕсли;	
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения тогда
		лТипОбъекта = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваЗаказа тогда
		лТипОбъекта = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Счет ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСчета тогда
		лТипОбъекта = Тип("ДокументСсылка.СчетНаОплатуКлиенту");
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Сделка ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСделки
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыСделки 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Заказ ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыЗаказа ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.УказанныеСвойстваЗаказа Тогда
		лТипОбъекта = Тип("ДокументСсылка.ЗаказКлиента");
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка тогда
		лТипОбъекта = Тип("ДокументСсылка.ЗаказКлиента");
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Оплата тогда
		лТипОбъекта = Тип("ДокументСсылка.ЗаказКлиента");
	Иначе
		лТипОбъекта = Неопределено;
	КонецЕсли;
	
	
	Для Пакет = 1 по КоличествоПакетов Цикл
		
		ОбщиеНастройки.Измерение6 = "Выгрузка на портал " + Строка(Пакет) + " пакета";
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало формирования пакета для выгрузки: " + Строка(Пакет));
		
		МассивДанных = Б24_ВыгрузкаВызовСервера.ПолучитьПакетИзРегистраПакетов(ОбщиеНастройки, ТипДанных, Пакет);
		
		Б24_ВыгрузкаВызовСервера.УдалениеРегистрацииПоТипуДанных(ОбщиеНастройки, ТипДанных, МассивДанных);
		
		СформированныеДанные = Новый Массив;
		
		Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Компания тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоКомпаниям(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Контакт тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоКонтактам(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоРеквизитам(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоАдресам(ОбщиеНастройки, МассивДанных, ТипДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоАдресам(ОбщиеНастройки, МассивДанных, ТипДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоБанковскимСчетамКомпанийКонтактов(ОбщиеНастройки, МассивДанных);
			
			
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоГруппамТоваров(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоЕдиницамИзмеренияТоваров(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоСвойствамТоваров(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара тогда
			СформированныеДанные = Б24_ВыгрузкаВызовСервера.СформироватьЗапросПолученияIDЗначенийСвойствТоваров(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоТоварам(ОбщиеНастройки, МассивДанных);
			
			
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Счет тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоСчетам(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСчета тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоРеквизитамСчетов(ОбщиеНастройки, МассивДанных, Пакет);
			
			
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Сделка тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоСделкам(ОбщиеНастройки, МассивДанных);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСделки тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоРеквизитамСделок(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыСделки тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоТоварамСделок(ОбщиеНастройки, МассивДанных);
			
			
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки тогда
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоПользовательскимПолям(ОбщиеНастройки, ТипДанных, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки тогда
			СформированныеДанные = Б24_ВыгрузкаВызовСервера.СформироватьЗапросПолученияIDЗначенийПользовательскихПолей(ОбщиеНастройки, ТипДанных, МассивДанных, Пакет);
			
			
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоСвойствамЗаказов(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Заказ тогда    	
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоЗаказам(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыЗаказа тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоТоварамЗаказов(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.УказанныеСвойстваЗаказа тогда    			
			//СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоУстановленнымЗначениямСвойствЗаказов(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоОтгрузкам(ОбщиеНастройки, МассивДанных, Пакет);
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Оплата тогда    			
			СформированныеДанные =  Б24_ВыгрузкаВызовСервера.СформироватьДанныеПоОплатам(ОбщиеНастройки, МассивДанных, Пакет);
		КонецЕсли;
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершено формирование пакета для выгрузки: " + Строка(Пакет));
		
		Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Получение идентифтикаторов значений свойств товаров");
			ПолучениеИдБ24ЗначенийСвойств(ОбщиеНастройки, СформированныеДанные, ТипДанных, Пакет);	
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершено получение идентификаторов значений свойств товаров");
		ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКомпании 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваКонтакта 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСчета 
			ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваСделки тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Получение идентифтикаторов значений пользовательских полей");
			ПолучениеИдБ24ЗначенийПользовательскихПолей(ОбщиеНастройки, СформированныеДанные, ТипДанных, Пакет);	
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершено получение идентификаторов значений пользовательских полей");
			
		Иначе   
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало выгрузки данных пакета на портал. Тип данных: " + Строка(ТипДанных));
			ВыгрузкаДанныхНаПортал(ОбщиеНастройки, ТипДанных, СформированныеДанные, лТипОбъекта, Пакет);
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершена выгрузка данных пакета на портал. Тип данных: " + Строка(ТипДанных));
		КонецЕсли;
		
		Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар И ОбщиеНастройки.ВыполненоБезОшибок тогда	
			
			Если ОбщиеНастройки.КартинкиИФайлыНоменклатуры.Количество() > 0 тогда
				Б24_ВыгрузкаВызовСервера.УдалениеРегистрацииКартинокИФайлов(ОбщиеНастройки, ОбщиеНастройки.КартинкиИФайлыНоменклатуры);
				ОбщиеНастройки.КартинкиИФайлыНоменклатуры.Очистить();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщиеНастройки.Измерение6 ="";
		
	КонецЦикла;
	
	ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершение формирования данных для объектов с типом: " + Строка(ТипДанных));
	
КонецПроцедуры

Процедура ВыгрузкаДанныхНаПортал(ОбщиеНастройки, ТипДанных, СформированныеДанные, ТипОбъекта, Пакет)
	
	Если СформированныеДанные.Количество() > 0 тогда
		
		ТелоHTTPЗапроса= "";
		Для каждого ТекЭлемент из СформированныеДанные Цикл
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
		КонецЦикла;
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
		
		Если СтруктураОтвета = Неопределено тогда
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
			Возврат;	
		КонецЕсли;
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
			
			СтруктураОтвета2 = СтруктураОтвета.Получить("result");
			
			Если СтруктураОтвета2.Получить("result") <> Неопределено тогда
				
				Для каждого ТекСтрока из СтруктураОтвета2.Получить("result") Цикл
					
					Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
						лОбъект = Б24_СинхронизацияВызовСервера.ПолучитьНоменклатуруИХарактеристикуПоВнешнемуИдентификатору(ТекСтрока.Ключ);	
					Иначе
						лОбъект = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(ТипОбъекта, ТекСтрока.Ключ);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(лОбъект) тогда
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не найден объект с ид:" + Строка(ТекСтрока.Ключ));  
						ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
					Иначе
						
#Область ИнтернетМагазин					
						Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Заказ тогда
							ИнформацияОЗаказе = ТекСтрока.Значение.Получить("order");
							
							Если ИнформацияОЗаказе <> Неопределено тогда
								
								ИдБитрикс24	= Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("Строка"), Формат(ИнформацияОЗаказе.Получить("id"),"ЧГ=0"));
								ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, лОбъект, ИдБитрикс24);  
								Б24_ЗагрузкаВызовСервера.ОбновитьДополнительнуюИнформациюОЗаказе(лОбъект, ИнформацияОЗаказе);						
								//УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
							КонецЕсли;
							
						ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыЗаказа тогда
							
							Для каждого ПозицияЗаказа из ТекСтрока.Значение.Получить("items") цикл
								
								КлючСвязи 	= Число(ПозицияЗаказа.Получить("xmlId")); 
								ИдКорзины 	= Формат(ПозицияЗаказа.Получить("id"), "ЧГ=0"); 
								
								ДанныеОПозиции = Новый Структура;
								ДанныеОПозиции.Вставить("Объект"			, лОбъект);
								ДанныеОПозиции.Вставить("ПодчиненныйОбъект"	, ИдКорзины);
								
								ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, ДанныеОПозиции, ИдКорзины, КлючСвязи);  
							
							КонецЦикла;
							
							//УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
							
						ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа тогда
							
							ИнформацияОСвойстве = ТекСтрока.Значение.Получить("property");
							
							мДанных = Новый Массив;
							мДанных.Добавить(ТекСтрока.Значение);
							Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьСвойстваЗаказов(ОбщиеНастройки, мДанных);
							
							//УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
							
						ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Оплата тогда
							
							ИнформацияООплатах = ТекСтрока.Значение.Получить("payments");
							
							Если ИнформацияООплатах <> Неопределено тогда
								
								Для Каждого ТекОплата из ИнформацияООплатах Цикл
									
									ВнешнийКодОплаты 	= ТекОплата.Получить("xmlId"); 
									ИдОплаты 			= Формат(ТекОплата.Получить("id"), "ЧГ=0"); 
									
									Оплата = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(ТипОбъекта, ВнешнийКодОплаты);	
									Если ЗначениеЗаполнено(Оплата) тогда
										ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Оплата, ИдОплаты); 
										//УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, Оплата);
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
							
						ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка тогда
							
							ИнформацияООтгрузках = ТекСтрока.Значение.Получить("shipments");
							
							Если ИнформацияООтгрузках <> Неопределено тогда
								
								Для Каждого ТекОтгрузка из ИнформацияООтгрузках Цикл
									
									ВнешнийКодОтгрузки 	= ТекОтгрузка.Получить("xmlId"); 
									ИдОтгрузки 			= Формат(ТекОтгрузка.Получить("id"), "ЧГ=0"); 
									
									Отгрузка = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.РасходнаяНакладная"), ВнешнийКодОтгрузки);	
									Если ЗначениеЗаполнено(Отгрузка) тогда
										ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Отгрузка, ИдОтгрузки); 
										//УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, Отгрузка);
									КонецЕсли;
									
								КонецЦикла;
								
							КонецЕсли;
#КонецОбласти							
							
						ИначеЕсли ТипЗнч(ТекСтрока.Значение) <> Тип("Булево") ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита 
							ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита ТОГДА
							ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, лОбъект, ТекСтрока.Значение);  
							УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
						Иначе
							
							Если ТекСтрока.Значение = Истина тогда		
								УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, лОбъект);
							Иначе
								УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Ложь, ТипДанных, Пакет, лОбъект);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если СтруктураОтвета2.Получить("result_error") <> Неопределено тогда
				
				Для каждого ТекСтрока из СтруктураОтвета2.Получить("result_error") Цикл
					
					лОписаниеОшибки = ТекСтрока.Значение.Получить("error_description");
					
					Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Товар тогда
						лОбъект = Б24_СинхронизацияВызовСервера.ПолучитьНоменклатуруИХарактеристикуПоВнешнемуИдентификатору(ТекСтрока.Ключ);	
					Иначе
						лОбъект = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(ТипОбъекта, ТекСтрока.Ключ);	
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(лОбъект) тогда
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + " у не найденного объекта с ид:" + Строка(ТекСтрока.Ключ));   
					Иначе
						ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + " у объекта:" + Строка(лОбъект));   
						РазобратьОшибку(ОбщиеНастройки, ТипДанных, лОбъект, лОписаниеОшибки);
					КонецЕсли;	
					
					УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Ложь, ТипДанных, Пакет, лОбъект);
					
					ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
		Иначе
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Не удалось разобрать JSON ответа");
			ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Тело отправляемого запроса: " + ТелоHTTPЗапроса);
			
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ПолучениеИдБ24ЗначенийСвойств(ОбщиеНастройки, СформированныеДанные, ТипДанных, Пакет)
	
	Если СформированныеДанные.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса= "";
	Для каждого ТекЭлемент из СформированныеДанные Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	result1 = СтруктураОтвета.Получить("result");
	Если result1 <> Неопределено тогда
		
		result2 = result1.Получить("result");  			
		Если result2 <> Неопределено тогда
			
			Для каждого ТекСвойство из result2 Цикл
				
				Если ТекСвойство.Значение.Количество()=0 тогда
					Продолжить;
				КонецЕсли;
				
				Свойство = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ТекСвойство.Ключ);	
				
				VALUES = ТекСвойство.Значение[0].Получить("VALUES");
				
				Если VALUES <> Неопределено тогда
					
					Для Каждого ТекЗначение из VALUES Цикл
						
						ВнешнийИД = ТекЗначение.Значение.Получить("XML_ID");
						
						Если ЗначениеЗаполнено(ВнешнийИД) тогда
							
							лЗначение = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), ВнешнийИД);	
							ИдОбъекта = ТекЗначение.Значение.Получить("ID");
							
							ЗаписатьИдБ24Объекта(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара, лЗначение, ИдОбъекта);  
							
						КонецЕсли;
					КонецЦикла;	
					
				КонецЕсли;
				
				УдалениеЗаписиИзПакетаДаных(ОбщиеНастройки, Истина, ТипДанных, Пакет, Свойство);
				
			КонецЦикла;	
		КонецЕсли;
		
		Если result1.Получить("result_error") <> Неопределено тогда
			
			Для каждого ТекСтрока из result1.Получить("result_error") Цикл
				
				лОписаниеОшибки = ТекСтрока.Значение.Получить("error_description");
				
				лОбъект = Б24_СинхронизацияВызовСервера.ПолучитьЗначениеПоXML(ТИП("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ТекСтрока.Ключ);	
				
				Если НЕ ЗначениеЗаполнено(лОбъект) тогда
					ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + " у не найденного объекта с ид:" + Строка(ТекСтрока.Ключ));   
				Иначе
					ДобавитьВЛогИОповестить(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, лОписаниеОшибки + " у объекта:" + Строка(лОбъект)); 
					Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(ОбщиеНастройки.НастройкаСинхронизации, лОбъект, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучениеИдБ24ЗначенийПользовательскихПолей(ОбщиеНастройки, СформированныеДанные, ТипДанных, Пакет)
	
	Если СформированныеДанные.Количество() = 0 тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса= "";
	Для каждого ТекЭлемент из СформированныеДанные Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;	
	КонецЕсли;
	
	Б24_ВыгрузкаВызовСервера.ОбработатьЗапросПолученияIDЗначенийПользовательскихПолей(ОбщиеНастройки, ТипДанных, СтруктураОтвета, Пакет);
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИФункцииЗагрузки

Процедура ЗапуститьВыполненениеЗагрузки(ОбщиеНастройки) Экспорт
	
	НастройкаСинхронизации = ОбщиеНастройки.НастройкаСинхронизации;
	
	Если ОбщиеНастройки.ПолнаяЗагрузка тогда
		
		Если ОбщиеНастройки.СинхронизацияКонтрагентов = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ЗагружатьКонтрагентов") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации,"Контрагенты", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияТоваров = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации,"ЗагружатьТовары") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации,"Товары", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияСчетов = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ЗагружатьСчета") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации,"Счета", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияСделок = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ЗагружатьСделки") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Сделки", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияЗаказов = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьЗаказы") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Заказы", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияЗаказов = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьЗаказы") = Истина 
			И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьОплаты") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Оплаты", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
		Если ОбщиеНастройки.СинхронизацияЗаказов = Истина И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьЗаказы") = Истина 
			И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьОтгрузки") = Истина тогда
			мТипыОперацийСинхронизации =  Б24_СинхронизацияВызовСервера.ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Отгрузки", "Загрузка");
			ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, мТипыОперацийСинхронизации);
		КонецЕсли;
		
	Иначе
		
		ОбработатьЗагрузкуДанныхВРежимеИзменений(ОбщиеНастройки, Истина);
		Если ОбщиеНастройки.ВыполненоБезОшибок тогда
			ОбработатьЗагрузкуДанныхВРежимеИзменений(ОбщиеНастройки, Ложь);	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗагрузкуДанныхПолнойВыгрузки(ОбщиеНастройки, ТипыОперацийСинхронизации)
	
	Для каждого ТекЭлемент из ТипыОперацийСинхронизации Цикл 
		
		ОбщиеНастройки.Измерение3 = "Полная загрузка данных с портала с типом: " + Строка(ТекЭлемент);
		
		ОбщиеНастройки.Операция = ТекЭлемент; 
		ЗагрузитьСПорталаИОбработать(ОбщиеНастройки);
		
		ОбщиеНастройки.Измерение3 = "";
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗагрузкуДанныхВРежимеИзменений(ОбщиеНастройки, ЗагрузкаОшибочных)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СвойстваКомпаний"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваКомпаний));
	СтруктураДанных.Вставить("СвойстваКонтактов", Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваКонтактов));
	СтруктураДанных.Вставить("СвойстваСделок"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваСделок));
	СтруктураДанных.Вставить("СвойстваСчетов"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваСчетов));
	
	СтруктураДанных.Вставить("Компании"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Компании));
	СтруктураДанных.Вставить("Контакты"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Контакты));
	СтруктураДанных.Вставить("Реквизиты"		, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Реквизиты));
	СтруктураДанных.Вставить("БанковскиеСчета"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.БанковскиеСчета));
	СтруктураДанных.Вставить("АдресаРеквизитов"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.АдресаРеквизитов));
	
	СтруктураДанных.Вставить("ЕдиницыИзмерения"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.ЕдиницыИзмерения));
	СтруктураДанных.Вставить("СвойстваТоваров"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваТоваров));
	СтруктураДанных.Вставить("ГруппыТоваров"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.ГруппыТоваров));
	СтруктураДанных.Вставить("Товары"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Товары));
	
	СтруктураДанных.Вставить("Сделки"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Сделки));
	СтруктураДанных.Вставить("Счета"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Счета));
	
	СтруктураДанных.Вставить("Заказы"			, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.Заказы));
	
	СтруктураДанных.Вставить("СвойстваЗаказов"	, Новый Структура("Данные, Операция", Новый Массив, ОбщиеНастройки.ТипыОперацийСинхронизации.СвойстваЗаказов));
	
	ВидыСобытий = Б24_RestApiКлиентСервер.ПолучитьВидыСобытийЭлементовБ24();
	
	Если ЗагрузкаОшибочных тогда
		ТелоHTTPЗапроса = "&"+ ОбщиеНастройки.ПараметрКоннектора + "&clear=0&error=1";	
	Иначе
		ТелоHTTPЗапроса = "&"+ ОбщиеНастройки.ПараметрКоннектора + "&clear=0";	
	КонецЕсли;
	
	ЕстьСобытия = Истина;
	
	Пока ЕстьСобытия = Истина Цикл	
		
		ОбщиеНастройки.Измерение3 = ?(ЗагрузкаОшибочных, "Повторная загрузка изменных данных, ранее не загруженных", "Запрос изменений с портала");
		
		мНеиспользуемыеЭлементы = Новый Массив;
		
		ДанныеСПортала = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/event.offline.get", ТелоHTTPЗапроса); 
		
		Если НЕ ЗначениеЗаполнено(ДанныеСПортала) тогда
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
			ЕстьСобытия = Ложь;
			Возврат;
		КонецЕсли;
		
		result = ДанныеСПортала.Получить("result");
		
		Если НЕ ЗначениеЗаполнено(result) тогда
			ЕстьСобытия = Ложь;
			Возврат;
		КонецЕсли;
		
		ОбщиеНастройки.ИдПроцессаЗагрузки = Строка(result.Получить("process_id"));
		
		События = result.Получить("events");
		
		Если НЕ ЗначениеЗаполнено(События) тогда
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, ?(ЗагрузкаОшибочных, " Нет данных на портале, не загруженных по ошибке ранее", "Нет изменений на портале"));
			ЕстьСобытия = Ложь;
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекСобытие из События Цикл
			
			НазваниеСобытия 	= Врег(ТекСобытие.Получить("EVENT_NAME"));
			ИнформацияОСобытии 	= ТекСобытие.Получить("EVENT_DATA");
			ИдЗаписи 			= ТекСобытие.Получить("ID");
			ИдСообщения 		= ТекСобытие.Получить("MESSAGE_ID");
			
			Если НЕ ЗначениеЗаполнено(ИнформацияОСобытии) тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПолейСобытия 	= ИнформацияОСобытии.Получить("FIELDS");
			
			Если НЕ ЗначениеЗаполнено(ДанныеПолейСобытия) тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеПолейСобытия.Получить("ENTITY_TYPE_ID") = Неопределено тогда
				ИдЭлемента = Формат(ДанныеПолейСобытия.Получить("ID"), "ЧГ=0");
			ИначеЕсли ДанныеПолейСобытия.Получить("ENTITY_TYPE_ID") = "REQUISITE" тогда
				ИдЭлемента = "8_" + Формат(ДанныеПолейСобытия.Получить("ENTITY_ID"), "ЧГ=0");
			Иначе
				ИдЭлемента = "";
			КонецЕсли;
			
			ОбщиеНастройки.ТаблицаСопоставленияИзменений.Добавить(Новый Структура("ИдЗаписи, ИдСообщения, Событие, ИдЭлемента", ИдЗаписи, ИдСообщения, НазваниеСобытия, ИдЭлемента));
			
#Область ДобавлениеИзмененийПоКомпаниямИКонтактах
			Если ОбщиеНастройки.СинхронизацияКонтрагентов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьКонтрагентов") тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеКомпании) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеКомпании) тогда
					СтруктураДанных.Компании.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеКонтакта) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеКонтакта) тогда
					СтруктураДанных.Контакты.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеРеквизита) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеРеквизита) тогда
					СтруктураДанных.Реквизиты.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеБанкСчета) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеБанкСчета) тогда
					СтруктураДанных.БанковскиеСчета.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеАдреса) тогда
					
					Если ДанныеПолейСобытия.Получить("ENTITY_TYPE_ID") = "REQUISITE" тогда
						Ид = Формат(ДанныеПолейСобытия.Получить("ENTITY_ID"), "ЧГ=0");
						Если СтруктураДанных.АдресаРеквизитов.Данные.Найти(Ид) = Неопределено тогда
							СтруктураДанных.АдресаРеквизитов.Данные.Добавить(Ид);
						КонецЕсли;
					Иначе
						мНеиспользуемыеЭлементы.Добавить(Новый Структура("ИдЗаписи, ИдСообщения", ИдЗаписи, ИдСообщения)); 
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
#КонецОбласти			
			
#Область ДобавлениеИзмененийПоТоварам
			
			Если ОбщиеНастройки.СинхронизацияТоваров  И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьТовары")  тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеТовара) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеТовара) тогда
					СтруктураДанных.Товары.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваТовара) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваТовара) тогда
					СтруктураДанных.СвойстваТоваров.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеРаздела) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеРаздела) тогда
					СтруктураДанных.ГруппыТоваров.Данные.Добавить(ИдЭлемента);
				ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеЕдИзм) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеЕдИзм) тогда
					СтруктураДанных.ЕдиницыИзмерения.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
			КонецЕсли;
#КонецОбласти			
			
#Область ДобавлениеИзмененийПоСчетам
			
			Если ОбщиеНастройки.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьСчета") тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСчета) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСчета) 
					ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСтатусаСчета) тогда
					СтруктураДанных.Счета.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
			КонецЕсли;
#КонецОбласти			
			
#Область ДобавлениеИзмененийПоСделкам
			Если ОбщиеНастройки.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьСделки") тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСделки) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСделки) тогда
					СтруктураДанных.Сделки.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
			КонецЕсли;
#КонецОбласти			
			
#Область ДобавлениеИзмененийПоЗаказам
			Если ОбщиеНастройки.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьЗаказы") тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеЗаказа) тогда
					СтруктураДанных.Заказы.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
			КонецЕсли;
#КонецОбласти			

#Область ДобавлениеИзмененийПоПользовательскимПолям
			
			Если ОбщиеНастройки.СинхронизацияКонтрагентов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьКонтрагентов") 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляКомпанийИКонтактов") = Истина тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваКомпаний) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваКомпаний) 
					ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеЗначенийСвойствКонтактов) тогда
					СтруктураДанных.СвойстваКомпаний.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваКонтактов) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваКонтактов) 
					ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеЗначенийСвойствКомпаний) тогда
					СтруктураДанных.СвойстваКонтактов.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщиеНастройки.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьСделки") 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСделок") = Истина тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваСделок) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваСделок) 
					ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеЗначенийСвойствСделок) тогда
					СтруктураДанных.СвойстваСделок.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщиеНастройки.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьСчета") 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСчетов") = Истина тогда
				
				Если НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваСчетов) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваСчетов) 
					ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеЗначенийСвойствСчетов) тогда
					СтруктураДанных.СвойстваСчетов.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбщиеНастройки.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьЗаказы") 
				И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(ОбщиеНастройки.НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляЗаказов") = Истина тогда	
				
				Если (НазваниеСобытия = Врег(ВидыСобытий.ДобавлениеСвойстваЗаказов) ИЛИ НазваниеСобытия = Врег(ВидыСобытий.ОбновлениеСвойстваЗаказов)) тогда
					СтруктураДанных.СвойстваЗаказов.Данные.Добавить(ИдЭлемента);
				КонецЕсли;
				
			КонецЕсли;
#КонецОбласти			
			
#Область УдалениеИдЭлементов
			Если НазваниеСобытия = Врег(ВидыСобытий.УдалениеКомпании) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Компания, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеКонтакта) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Контакт, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеРеквизита) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеБанкСчета) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.БанковскийСчетРеквизита, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеАдреса) тогда
				
				Если ДанныеПолейСобытия.Получить("ENTITY_TYPE_ID") = "REQUISITE" тогда
					Ид = Формат(ДанныеПолейСобытия.Получить("ENTITY_ID"), "ЧГ=0");
					Если СтруктураДанных.АдресаРеквизитов.Данные.Найти(Ид) = Неопределено тогда
						
						Если ДанныеПолейСобытия.Получить("TYPE_ID") = "PRIMARY" тогда
							Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.ФактАдресРеквизита, Ид); 
						Иначе
							Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.ЮрАдресРеквизита, Ид); 
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					мНеиспользуемыеЭлементы.Добавить(Новый Структура("ИдЗаписи, ИдСообщения", ИдЗаписи, ИдСообщения)); 
				КонецЕсли;
				
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеТовара) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Товар, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеЕдИзм) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.ЕдиницаИзмерения, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваТовара) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеРаздела) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.ГруппаТовара, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСчета) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Счет, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСделки) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Сделка, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваКомпаний) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваКонтактов) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваСделок) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваСчетов) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеЗаказа) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.Заказ, ИдЭлемента); 
			ИначеЕсли НазваниеСобытия = Врег(ВидыСобытий.УдалениеСвойстваЗаказов) тогда
				Б24_СинхронизацияВызовСервера.УдалитьОбъектПоИдентификаторуБ24(ОбщиеНастройки.Портал, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа, ИдЭлемента); 
			КонецЕсли;
#КонецОбласти			
			
		КонецЦикла;
		
		Если мНеиспользуемыеЭлементы.Количество() > 0 тогда
			
			ТелоHTTPЗапросаУдаления = "&process_id=" + ОбщиеНастройки.ИдПроцессаЗагрузки;	
			
			Для каждого ТекЭлемент из мНеиспользуемыеЭлементы Цикл
				
				ТелоHTTPЗапросаУдаления = ТелоHTTPЗапросаУдаления + "&id[]=" + ТекЭлемент.ИдЗаписи;
				
			КонецЦикла;
			
			Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/event.offline.clear", ТелоHTTPЗапросаУдаления); 
			
		КонецЕсли;
		
		Для Каждого ТекСвойство из СтруктураДанных Цикл
			
			ЗначениеСвойстваСтруктуры = ТекСвойство.Значение;
			
			Если ЗначениеСвойстваСтруктуры.Данные.Количество()> 0 тогда
				
				ОбщиеНастройки.Операция = ЗначениеСвойстваСтруктуры.Операция; 
				ОбщиеНастройки.Измерение3 = "Загрузка изменений в 1С с типом: " + Строка(ОбщиеНастройки.Операция);
				ЗагрузитьСПорталаИОбработать(ОбщиеНастройки, ЗначениеСвойстваСтруктуры.Данные);
				ОбщиеНастройки.Измерение3 = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ЗагрузитьСПорталаИОбработать(ОбщиеНастройки,  МассивЭлементов = Неопределено) Экспорт 
	
	ОбщиеНастройки.Измерение4 = Строка(ОбщиеНастройки.Операция);
	
	ТипыОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации;
	
	Если ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Компании тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.company.list", МассивЭлементов					, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Контакты тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.contact.list", МассивЭлементов					, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Реквизиты тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.requisite.list", МассивЭлементов				,				, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.АдресаРеквизитов тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.address.list", МассивЭлементов					,				, "filter[ENTITY_TYPE_ID]=8", "filter[ENTITY_ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.БанковскиеСчета тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.requisite.bankdetail.list"	, МассивЭлементов	,				, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.ГруппыТоваров тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.productsection.list", МассивЭлементов			,				, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.ЕдиницыИзмерения тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.measure.list", МассивЭлементов					,				, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваТоваров тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.product.property.list", МассивЭлементов		,				, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Товары тогда                                        		
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.product.list", МассивЭлементов					, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Счета тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.invoice.list", МассивЭлементов					, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Сделки тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.deal.list", МассивЭлементов					, "select[]=ID"	, 							, "filter[ID]");
		
		
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваКомпаний тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.company.userfield.list", МассивЭлементов		, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваКонтактов тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.contact.userfield.list", МассивЭлементов		, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваСделок тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.deal.userfield.list", МассивЭлементов	 		, "select[]=ID"	, 							, "filter[ID]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваСчетов тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "crm.invoice.userfield.list", МассивЭлементов		, "select[]=ID"	, 							, "filter[ID]");
		
		
		
		
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Заказы тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "sale.order.list", МассивЭлементов					, "select[]=id"	, "filter[>id]=0"			, "filter[id]");
	ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваЗаказов тогда
		ЗагрузитьДанныеСПортала(ОбщиеНастройки, "sale.property.list", МассивЭлементов				, "select[]=id"	, "filter[>id]=0"			, "filter[id]");
	КонецЕсли;                                                                                                                                    
	
	ОбщиеНастройки.Измерение4 = "";
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСПортала(ОбщиеНастройки, Метод, МассивЭлементов, Фильтр = "" ,ОбязательныйОтбор = "", ОтборПоПараметру = "")
	
	Если МассивЭлементов = Неопределено тогда
		
		МетодПолностью 			= "/rest/" + Метод;
		ПараметрыHTTPЗапроса 	= ?(ЗначениеЗаполнено(Фильтр), "&" + Фильтр, "" ) + ?(ЗначениеЗаполнено(ОбязательныйОтбор), "&" + ОбязательныйОтбор, "" );
		
		СтруктураОтвета 	 		= Неопределено;
		КоличествоВыполнений 		= 0;
		ОбщиеНастройки.Измерение6 	= "0";
		
		Пока СтруктураОтвета = Неопределено И (КоличествоВыполнений < ОбщиеНастройки.КоличествоПовторенийПриОшибках ИЛИ КоличествоВыполнений = 0) Цикл
			
			Если КоличествоВыполнений > 0 тогда
				ОбщиеНастройки.Измерение5 = "Повторная загрузка данных с портала с типом: " + Строка(ОбщиеНастройки.Операция);
			Иначе
				ОбщиеНастройки.Измерение5 = "Загрузка данных с портала с типом: " + Строка(ОбщиеНастройки.Операция);
			КонецЕсли;
			
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало загрузки данных с портала с типом: " + Строка(ОбщиеНастройки.Операция));
			
			СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, МетодПолностью, ПараметрыHTTPЗапроса); 
			
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершение загрузки данных с портала с типом: " + Строка(ОбщиеНастройки.Операция));
			
			КоличествоВыполнений = КоличествоВыполнений + 1;
			
		КонецЦикла;
		
		Если СтруктураОтвета = Неопределено тогда
			ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
			Возврат;
		КонецЕсли;
		
		ОбщиеНастройки.Измерение5 = "Обработка данных с типом: " + Строка(ОбщиеНастройки.Операция) + " в 1С";
	
		ТипыОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации;
		Если ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Заказы тогда
			ДополнительныйКлюч = "orders";
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваЗаказов тогда
			ДополнительныйКлюч = "properties";
		Иначе
			ДополнительныйКлюч = "";
		КонецЕсли;    
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало обработки данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
		ОбработатьДанныеСПортала(ОбщиеНастройки, СтруктураОтвета, ДополнительныйКлюч);
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершена обработка данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
		
		Следующие = СтруктураОтвета.Получить("next");
		
		Пока ЗначениеЗаполнено(Следующие) Цикл
			
			Следующие = Формат(Следующие, "ЧГ=0");
			
			ОбщиеНастройки.Измерение6 = Строка(Следующие);
			
			КоличествоВыполнений = 0;
			
			ТелоHTTPЗапроса = ПараметрыHTTPЗапроса + "&start="+Следующие;	
			
			Пока СтруктураОтвета = Неопределено И КоличествоВыполнений < ОбщиеНастройки.КоличествоПовторенийПриОшибках Цикл
				
				Если КоличествоВыполнений > 0 тогда
					ОбщиеНастройки.Измерение5 = "Повторная загрузка данных с портала с типом: " + Строка(ОбщиеНастройки.Операция);
				Иначе
					ОбщиеНастройки.Измерение5 = "Загрузка данных с портала с типом: " + Строка(ОбщиеНастройки.Операция);
				КонецЕсли;
				
				ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало загрузки данных с портала с типом: " + Строка(ОбщиеНастройки.Операция));
				
				СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, МетодПолностью, ТелоHTTPЗапроса); 
				
				ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершение загрузки данных с портала с типом: " + Строка(ОбщиеНастройки.Операция));
				
				КоличествоВыполнений = КоличествоВыполнений + 1;
				
			КонецЦикла;
			
			Если СтруктураОтвета = Неопределено тогда
				ОбщиеНастройки.ВыполненоБезОшибок = Ложь;
				Возврат;
			КонецЕсли;
			
			ОбщиеНастройки.Измерение5 = "Обработка данных с типом: " + Строка(ОбщиеНастройки.Операция) + " в 1С";
			
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало обработки данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
			ОбработатьДанныеСПортала(ОбщиеНастройки, СтруктураОтвета, ДополнительныйКлюч);
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершена обработка данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
			
			Следующие = СтруктураОтвета.Получить("next");
			СтруктураОтвета = Неопределено;
		КонецЦикла;
		
	Иначе
		
		ПараметрыHTTPЗапроса 	= ?(ЗначениеЗаполнено(Фильтр), "&" + Фильтр, "" ) + ?(ЗначениеЗаполнено(ОбязательныйОтбор), "&" + ОбязательныйОтбор, "") + ?(ЗначениеЗаполнено(ОтборПоПараметру), "&" + ОтборПоПараметру, "");
		Если Лев(ПараметрыHTTPЗапроса, 1) = "&" тогда
			ПараметрыHTTPЗапроса = "?" + Прав(ПараметрыHTTPЗапроса, СтрДлина(ПараметрыHTTPЗапроса)-1);				
		КонецЕсли;
		
		СформированныеДанные = новый Массив;
		Для Каждого ТекЭлемент из МассивЭлементов Цикл
			СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод+ПараметрыHTTPЗапроса + "=" + ТекЭлемент));
		КонецЦикла;
		
		Если СформированныеДанные.Количество() = 0 тогда
			Возврат;
		КонецЕсли;
		
		ТелоHTTPЗапроса= "";
		Для каждого ТекЭлемент из СформированныеДанные Цикл
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
		КонецЦикла;
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Начало обработки данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
		ОбработатьДанныеСПортала(ОбщиеНастройки, СтруктураОтвета, ДополнительныйКлюч);
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Завершена обработка данных в 1С, пришедших  с портала с типом: " + Строка(ОбщиеНастройки.Операция));
		
	КонецЕсли;
	
	ОбщиеНастройки.Измерение5 = "";
	ОбщиеНастройки.Измерение6 = "";
	
КонецПроцедуры

Процедура ОбработатьДанныеСПортала(ОбщиеНастройки, СтруктураОтвета, ДополнительныйКлюч = Неопределено)
	
	мДанных = Новый Массив;
	                             
	Если СтруктураОтвета = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		
		Если ТипЗнч(result)=Тип("Массив") тогда
			мДанных = result;	
		Иначе
			
			Если ДополнительныйКлюч = Неопределено тогда
			
				result2 = result.Получить("result");
				
				Если result2 <> Неопределено тогда
					
					Для каждого ТекЭлемент из result2 Цикл
						Для каждого ТекЭлемент2 из ТекЭлемент Цикл
							мДанных.Добавить(ТекЭлемент2);
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе                 
				
				result2 = result.Получить(ДополнительныйКлюч);
				
				Если result2 <> Неопределено тогда
					
					Для каждого ТекЭлемент из result2 Цикл
						мДанных.Добавить(ТекЭлемент);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мДанных.количество() > 0 тогда
		
		РезультатОбработки 	= новый Массив;
		СобытияОперации 	= новый Массив;
		
		ВидыСобытий = Б24_RestApiКлиентСервер.ПолучитьВидыСобытийЭлементовБ24();
		
		ТипыОперацийСинхронизации = ОбщиеНастройки.ТипыОперацийСинхронизации;
		
		Если ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Компании Тогда
			
			ПодробныеДанные = Новый Структура;
			ПодробныеДанные.Вставить("ИнформацияОКомпаниях", ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.company.get", мДанных));
			ПодробныеДанные.Вставить("ИнформацияОРеквизитах", ПолучитьПодробныеДанныеРеквизитовЧерезВладельцев(ОбщиеНастройки, "crm.requisite.list", мДанных, "4"));
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьКомпании(ОбщиеНастройки, ПодробныеДанные);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеКомпании));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеКомпании));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Контакты тогда
			
			ПодробныеДанные = Новый Структура;
			ПодробныеДанные.Вставить("ИнформацияОКонтактах", ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.contact.get", мДанных));
			ПодробныеДанные.Вставить("ИнформацияОРеквизитах", ПолучитьПодробныеДанныеРеквизитовЧерезВладельцев(ОбщиеНастройки, "crm.requisite.list", мДанных, "3"));
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьКонтакты(ОбщиеНастройки, ПодробныеДанные);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеКонтакта));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеКонтакта));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Реквизиты тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьРеквизиты(ОбщиеНастройки, мДанных);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеРеквизита));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеРеквизита));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.АдресаРеквизитов тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьАдресаРеквизитов(ОбщиеНастройки, мДанных);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеАдреса));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.БанковскиеСчета тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьБанковскиеСчетаКомпанийКонтактов(ОбщиеНастройки, мДанных);	
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеБанкСчета));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеБанкСчета));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.ГруппыТоваров тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьРазделыНоменклатуры(ОбщиеНастройки, мДанных);	
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеРаздела));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеРаздела));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.ЕдиницыИзмерения тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьЕдиницыИзмерения(ОбщиеНастройки, мДанных);	
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеЕдИзм));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеЕдИзм));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваТоваров тогда
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьСвойстваНоменклатуры(ОбщиеНастройки, мДанных);	
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваТовара));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваТовара));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Товары тогда
			
			ПодробныеДанные = ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.product.get", мДанных);
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьНоменклатуру(ОбщиеНастройки, ПодробныеДанные);
			ОбщиеНастройки.КартинкиИФайлыНоменклатуры.Очистить();     
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеТовара));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеТовара));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Счета тогда
			
			ПодробныеДанные = Новый Структура;
			ПодробныеДанные.Вставить("ИнформацияОСчетах"			, ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.invoice.get", мДанных));
			ПодробныеДанные.Вставить("ИнформацияОРеквизитахСчетов"	, ПолучитьПодробныеДанныеРеквизитовСчетовЧерезGET(ОбщиеНастройки, "crm.requisite.link.get", "5", мДанных));
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьСчета(ОбщиеНастройки, ПодробныеДанные);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСчета));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСчета));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСтатусаСчета));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Сделки Тогда
			
			ПодробныеДанные = Новый Структура;
			ПодробныеДанные.Вставить("ИнформацияОСделках"			, ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.deal.get", мДанных));
			ПодробныеДанные.Вставить("ИнформацияОРеквизитахСделок"	, ПолучитьПодробныеДанныеРеквизитовСделокЧерезGET(ОбщиеНастройки, "crm.requisite.link.get", "2", мДанных));
			ПодробныеДанные.Вставить("ИнформацияОТоварахСделок"		, ПолучитьПодробныеДанныеТоваровСделокЧерезGET(ОбщиеНастройки, "crm.deal.productrows.get", мДанных));
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьСделки(ОбщиеНастройки, ПодробныеДанные);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСделки));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСделки));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваКомпаний Тогда
			
			ПодробныеДанные 	= ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.company.userfield.get", мДанных);
			РезультатОбработки 	= Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьПользовательскиеПоляОбъектов(ОбщиеНастройки, ПодробныеДанные, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваКомпаний));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваКомпаний));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеЗначенийСвойствКомпаний));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваКонтактов Тогда
			
			ПодробныеДанные 	= ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.contact.userfield.get", мДанных);
			РезультатОбработки 	= Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьПользовательскиеПоляОбъектов(ОбщиеНастройки, ПодробныеДанные, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваКонтактов));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваКонтактов));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеЗначенийСвойствКонтактов));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваСделок Тогда
			
			ПодробныеДанные 	= ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.deal.userfield.get", мДанных);
			РезультатОбработки 	= Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьПользовательскиеПоляОбъектов(ОбщиеНастройки, ПодробныеДанные, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваСделок));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваСделок));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеЗначенийСвойствСделок));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваСчетов Тогда
			
			ПодробныеДанные 	= ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, "crm.invoice.userfield.get", мДанных);
			РезультатОбработки 	= Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьПользовательскиеПоляОбъектов(ОбщиеНастройки, ПодробныеДанные, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваСчетов));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваСчетов));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеЗначенийСвойствСчетов));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.СвойстваЗаказов тогда
			
			ПодробныеДанные = ПолучитьПодробныеДанныеСвойствЗаказовЧерезGET(ОбщиеНастройки, "sale.property.get", мДанных, "propertyId");
			
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьСвойстваЗаказов(ОбщиеНастройки, ПодробныеДанные);	
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеСвойстваЗаказов));
			СобытияОперации.Добавить(Врег(ВидыСобытий.ОбновлениеСвойстваЗаказов));
			
		ИначеЕсли ОбщиеНастройки.Операция = ТипыОперацийСинхронизации.Заказы тогда
			
			ПодробныеДанные =  ПолучитьПодробныеДанныеЗаказовЧерезGET(ОбщиеНастройки, "sale.order.get", мДанных);
			РезультатОбработки = Б24_ЗагрузкаВызовСервера.ЗагрузитьОбновитьЗаказы(ОбщиеНастройки, ПодробныеДанные);
			
			СобытияОперации.Добавить(Врег(ВидыСобытий.ДобавлениеЗаказа));
			
		КонецЕсли;
		
#Область ОчисткаРегистрацииВРежимеИзменений		
		
		Если НЕ ОбщиеНастройки.ПолнаяЗагрузка тогда
			
			мУспешные 	= Новый Массив;
			мОшибочные 	= Новый Массив;
			
			Для Каждого ТекРезультат из РезультатОбработки Цикл
				
				Для Каждого ЭлементСтруктуры Из ТекРезультат Цикл
					
					ИдЭлемента = Прав(ЭлементСтруктуры.Ключ, СтрДлина(ЭлементСтруктуры.Ключ)-3);
					
					Для Каждого ТекСобытие ИЗ ОбщиеНастройки.ТаблицаСопоставленияИзменений Цикл
						
						Если СобытияОперации.Найти(Врег(ТекСобытие.Событие)) <> Неопределено И ТекСобытие.ИдЭлемента = ИдЭлемента тогда
							
							Если ЭлементСтруктуры.Значение = Истина тогда
								мУспешные.Добавить(ТекСобытие.ИдЗаписи);        //разные параметры работают с разной скоростью
							Иначе
								мОшибочные.Добавить(ТекСобытие.ИдСообщения);     //разные параметры работают с разной скоростью
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;	
			КонецЦикла;
			
			Если мУспешные.Количество() > 0 тогда
				
				ТелоHTTPЗапроса = "&" + ОбщиеНастройки.ПараметрКоннектора + "&process_id=" + ОбщиеНастройки.ИдПроцессаЗагрузки;	
				
				Для каждого ТекЭлемент из мУспешные Цикл
					
					ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&id[]=" + ТекЭлемент;
					
				КонецЦикла;
				
				СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/event.offline.clear", ТелоHTTPЗапроса); 
				
			КонецЕсли;
			
			
			Если мОшибочные.Количество() > 0 тогда
				
				ТелоHTTPЗапроса = "&" + ОбщиеНастройки.ПараметрКоннектора + "&process_id=" + ОбщиеНастройки.ИдПроцессаЗагрузки;	
				
				Для каждого ТекЭлемент из мОшибочные Цикл
					
					ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&message_id[]=" + ТекЭлемент;
					
				КонецЦикла;
				
				СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/event.offline.error", ТелоHTTPЗапроса); 
				
			КонецЕсли;
			
		КонецЕсли;
		
#КонецОбласти	
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьПодробныеДанныеРеквизитовЧерезВладельцев(ОбщиеНастройки, Метод, мДанных, ТипРеквизита)
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл       
		
		ИдЭлемента = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
		ИдЭлемента = ?(ЗначениеЗаполнено(ИдЭлемента), ИдЭлемента, Формат(ТекЭлемент.Получить("id"), "ЧГ=0"));
		
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?filter[ENTITY_ID]=" + ИдЭлемента + "&filter[ENTITY_TYPE_ID]=" + ТипРеквизита);
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");                                             
	Если result <> Неопределено тогда                                                         
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			Для каждого ТекСтрока из result2 Цикл
				Для каждого ТекСтрока2 из ТекСтрока Цикл
					РезультатОбработки.Добавить(ТекСтрока2);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеЧерезGET(ОбщиеНастройки, Метод, мДанных, НазваниеПараметра= "id")
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		
		ИдЭлемента = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
		ИдЭлемента = ?(ЗначениеЗаполнено(ИдЭлемента), ИдЭлемента, Формат(ТекЭлемент.Получить("id"), "ЧГ=0"));
			
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?"+НазваниеПараметра+"=" + ИдЭлемента);
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			РезультатОбработки = result2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеРеквизитовСчетовЧерезGET(ОбщиеНастройки, Метод, ТипСущности, мДанных)
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?entityId=" + ТекЭлемент.Получить("ID") + "&entityTypeId=" + ТипСущности);
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			
			Для каждого ТекЭлемент2 из result2 Цикл
				
				Если ТипЗнч(ТекЭлемент2)= Тип("Соответствие") тогда
					РезультатОбработки.Добавить(ТекЭлемент2);
				Иначе
					РезультатОбработки.Добавить(ТекЭлемент2.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеРеквизитовСделокЧерезGET(ОбщиеНастройки, Метод, ТипСущности, мДанных)
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?entityId=" + ТекЭлемент.Получить("ID") + "&entityTypeId=" + ТипСущности);
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			Для каждого ТекЭлемент2 из result2 Цикл
				
				Если ТипЗнч(ТекЭлемент2)= Тип("Соответствие") тогда
					РезультатОбработки.Добавить(ТекЭлемент2);
				Иначе
					РезультатОбработки.Добавить(ТекЭлемент2.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеТоваровСделокЧерезGET(ОбщиеНастройки, Метод, мДанных)
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?ID=" + ТекЭлемент.Получить("ID"));
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		
		Если ТипЗнч(result2) = Тип("Массив") тогда
			Для каждого ТекЭлемент из result2 Цикл
				Если ТипЗнч(ТекЭлемент) = Тип("Массив") тогда
					Для каждого ТекЭлемент2 из ТекЭлемент Цикл
						РезультатОбработки.Добавить(ТекЭлемент2);
					КонецЦикла;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеЗаказовЧерезGET(ОбщиеНастройки, Метод, мДанных)
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		
		Для Каждого ТекЗаказ из ТекЭлемент.Значение Цикл
			ИдЭлемента = Формат(ТекЗаказ.Получить("ID"), "ЧГ=0");
			ИдЭлемента = ?(ЗначениеЗаполнено(ИдЭлемента), ИдЭлемента, Формат(ТекЗаказ.Получить("id"), "ЧГ=0"));
			
			ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?orderId=" + ИдЭлемента);
		КонецЦикла;		

	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			
			Если ТипЗнч(result2) = Тип("Массив") тогда
				Для каждого ТекЭлемент из result2 Цикл
					Если ТипЗнч(ТекЭлемент) = Тип("Соответствие") тогда
						РезультатОбработки.Добавить(ТекЭлемент.Получить("order"));
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

Функция ПолучитьПодробныеДанныеСвойствЗаказовЧерезGET(ОбщиеНастройки, Метод, мДанных, НазваниеПараметра= "id")
	
	РезультатОбработки = Новый Массив; 
	
	ТелоHTTPЗапроса= "";
	
	Для каждого ТекЭлемент из мДанных Цикл
		
		Если ТипЗнч(ТекЭлемент.Значение) = Тип("Массив") тогда
			Для каждого Свойство из ТекЭлемент.Значение Цикл
				
				ИдЭлемента = Формат(Свойство.Получить("ID"), "ЧГ=0");
				ИдЭлемента = ?(ЗначениеЗаполнено(ИдЭлемента), ИдЭлемента, Формат(Свойство.Получить("id"), "ЧГ=0"));
				
				ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + "cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(Метод + "?"+НазваниеПараметра+"=" + ИдЭлемента);
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result <> Неопределено тогда
		result2 = result.Получить("result");
		Если result2 <> Неопределено тогда
			РезультатОбработки = result2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;			
	
КонецФункции

#КонецОбласти


#Область ОбластьВыполненияСинхронизации

Процедура ВыполнитьСинхронизациюПоФоновомуЗаданию(ПараметрыСинхронизации, АдресРезультата = Неопределено) Экспорт
	
	НастройкаСинхронизации = ПараметрыСинхронизации.НастройкаСинхронизации;
	ВидСинхронизации 		= ПараметрыСинхронизации.ВидСинхронизации;
	ПолнаяСинхронизация 	= ПараметрыСинхронизации.ПолнаяСинхронизация;
	ВыполнятьЗагрузку 		= ?(ПараметрыСинхронизации.ВыполнятьЗагрузку = Неопределено, Истина, ПараметрыСинхронизации.ВыполнятьЗагрузку);
	ВыполнятьВыгрузку 		= ?(ПараметрыСинхронизации.ВыполнятьВыгрузку = Неопределено, Истина, ПараметрыСинхронизации.ВыполнятьВыгрузку);
	
	ВыполнитьСинхронизацию(НастройкаСинхронизации, ВидСинхронизации, ПолнаяСинхронизация, ВыполнятьЗагрузку, ВыполнятьВыгрузку);
	
КонецПроцедуры

// Процедура - Выполняет синхронизацию с порталом
//
// Параметры:
//  ВидСинхронизации				 - 	 1 - Обмен в режиме реального времени, 2 - интерактивный
//  ПолныйОбмен						 - 	 Признак выполнения полной синхронизации 
//  ВыполнятьЗагрузку				 - 	 Признак выполненения загрузки данных с портала 
//  ВыполнятьВыгрузку				 - 	 Признак выполненения выгрузки данных на портал  
//
Процедура ВыполнитьСинхронизацию(НастройкаСинхронизации, ВидСинхронизации, ПолнаяСинхронизация, ВыполнятьЗагрузку = Истина, ВыполнятьВыгрузку = Истина) Экспорт
	
	ОбщиеНастройки = СформироватьНастройкиСинхронизации(НастройкаСинхронизации, ПолнаяСинхронизация, ВидСинхронизации);
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщиеНастройки.ПорядокВыполненияСинхронизации = "Сперва 1С, затем Битрикс24" тогда
		
		ОбщиеНастройки.ВыполненоБезОшибок = Истина;
		
		Если ВыполнятьВыгрузку тогда
			ОбщиеНастройки.Измерение2 = "Выгрузка данных на Битрикс24";
			ОбщиеНастройки.СтатусПроверкиОчереди = 0;
			ЗапуститьВыполненениеОчередиВыгрузки(ОбщиеНастройки);
		КонецЕсли;
		
		Если ОбщиеНастройки.ВыполненоБезОшибок тогда
			
			Если ВыполнятьЗагрузку тогда
				ОбщиеНастройки.Измерение2 = "Загрузка данных с Битрикс24";
				ЗапуститьВыполненениеЗагрузки(ОбщиеНастройки);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбщиеНастройки.ВыполненоБезОшибок = Истина;
		
		Если ВыполнятьЗагрузку тогда
			ОбщиеНастройки.Измерение2 = "Загрузка данных с Битрикс24";
			ЗапуститьВыполненениеЗагрузки(ОбщиеНастройки);
		КонецЕсли;
		
		Если ОбщиеНастройки.ВыполненоБезОшибок тогда
			
			Если ВыполнятьВыгрузку тогда
				ОбщиеНастройки.Измерение2 = "Выгрузка данных на Битрикс24";
				ОбщиеНастройки.СтатусПроверкиОчереди = 0;
				ЗапуститьВыполненениеОчередиВыгрузки(ОбщиеНастройки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбластьLongPulling

Процедура ЗапуститьЗагрузкуВРежимеРеальногоВремениВФоне(ПараметрыВыгрузки, АдресРезультата) Экспорт
	
	НастройкаСинхронизации = ПараметрыВыгрузки.НастройкаСинхронизации;
	
	ЗапускДлительногоСоедиененияДляЗагрузкиСПорталаОбщий(НастройкаСинхронизации);
	
КонецПроцедуры

Процедура ЗапускДлительногоСоедиененияДляЗагрузкиСПорталаОбщий(НастройкаСинхронизации)  Экспорт
	
	Если Б24_ОбщегоНазначенияПовтИсп.ЭтоКопияБазы() тогда
		Сообщить("В копии базы выполнение обмена запрещено.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаСинхронизации) тогда
		Сообщить("Не указано по какой настройке производится загрузка в режиме реального времени. Настройка указывается в общих настройках. Только по одной настройке синхронизации может происходить загрвзка в режиме рельного времени.");
		Возврат;
	КонецЕсли;
	
	ВыполнитьСинхронизацию(НастройкаСинхронизации, 1, Ложь, Истина, Ложь);
	
	ЗапускДлительногоСоедиененияДляЗагрузкиСПортала(НастройкаСинхронизации);
	
КонецПроцедуры

Процедура ЗапускДлительногоСоедиененияДляЗагрузкиСПортала(НастройкаСинхронизации)  
	
	Если НЕ Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "СпособСинхронизацииДанных") = "ВРежимеРеальногоВремени" тогда
		Возврат;	
	КонецЕсли;
	
	ОбщиеНастройки = СформироватьНастройкиСинхронизации(НастройкаСинхронизации, Ложь, 1);
	
	ОбщиеНастройки.Измерение2 = "Push&Pull Битрикс24";
	ОбщиеНастройки.Измерение3 = "Режим реального времени для загрузки информации с портала.";
	
	НастройкиПодключения = ПолучитьИдКаналаИАдресПодключенияДляРеалТаймЗагрузкиСПортала(ОбщиеНастройки);
	
	Если НастройкиПодключения = Ложь тогда
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не удалось получить данные для подключения к порталу для реал тайм загрузки. Возможно не настроен Long polling.");
		
		Возврат;
	КонецЕсли;
	
	РазобранныйАдресХостинга = Новый Структура;
	
	Б24_RestApiКлиентСервер.РазобратьАдресСайта(НастройкиПодключения.АдресПодключения, РазобранныйАдресХостинга);	
	
	ВыполнениеДлительногоСоединенияРекурсивно(ОбщиеНастройки, НастройкиПодключения, РазобранныйАдресХостинга);
	
КонецПроцедуры

Функция ПолучитьИдКаналаИАдресПодключенияДляРеалТаймЗагрузкиСПортала(ОбщиеНастройки)
	
	Если ОбщиеНастройки = Неопределено тогда
		Сообщить("Не удалось получить настройки.");
		Возврат Ложь;
	КонецЕсли;   
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/pull.application.config.get", ""); 
	Если СтруктураОтвета = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	result = СтруктураОтвета.Получить("result");
	Если result = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	channels = result.Получить("channels");
	Если channels = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	shared = channels.Получить("shared");
	Если shared = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	server = result.Получить("server");
	Если server = Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	Версия 				= Число(server.Получить("version"));
	АдресПодключения 	= server.Получить("long_polling");
	ИдКанала 			= shared.Получить("id");
	
	Если НЕ ЗначениеЗаполнено(АдресПодключения) ИЛИ НЕ ЗначениеЗаполнено(ИдКанала) тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = новый Структура;
	
	Результат.Вставить("АдресПодключения"	, АдресПодключения);	
	Результат.Вставить("ИдКанала"			, ИдКанала);	
	Результат.Вставить("Версия"				, Версия);	
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнениеДлительногоСоединенияРекурсивно(ОбщиеНастройки, НастройкиПодключения, РазобранныйАдресХостинга, ДанныеДляПродолженияМониторинга = Неопределено)
	
	СтатусВыполнения = Б24_СинхронизацияВызовСервера.ПолучениеСтатусаВыполненияЗагрузкиВРежимеРеальногоВремениВФайлеСервер();	
	
	Если СтатусВыполнения = Ложь тогда
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Прервано пользователем.");
		Возврат;	
	КонецЕсли;
	
	Если ДанныеДляПродолженияМониторинга = Неопределено тогда
		ДанныеДляПродолженияМониторинга = Новый Структура;
		ДанныеДляПродолженияМониторинга.Вставить("mid"	, "");	
		ДанныеДляПродолженияМониторинга.Вставить("tag"	, "");	
		ДанныеДляПродолженияМониторинга.Вставить("time"	, "");	
	КонецЕсли;
	
	Если НастройкиПодключения.Версия < 4 тогда	
		ПараметрыДляПродолженияМониторинга = ?(ЗначениеЗаполнено(ДанныеДляПродолженияМониторинга.tag), "&tag=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(ДанныеДляПродолженияМониторинга.tag), "") + ?(ЗначениеЗаполнено(ДанныеДляПродолженияМониторинга.time), "&time=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(ДанныеДляПродолженияМониторинга.time), "");
	Иначе
		ПараметрыДляПродолженияМониторинга = ?(ЗначениеЗаполнено(ДанныеДляПродолженияМониторинга.mid), "&mid=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер(ДанныеДляПродолженияМониторинга.mid), "");
	КонецЕсли;
	
	Б24_СинхронизацияВызовСервера.ЗаписатьИнформациюОСеансеЗапускаВРеальномВремениФайл(Б24_СинхронизацияВызовСервера.ПолучитьНазваниеНастройкиОСеансеЗагрузкиРТФайл(), ОбщиеНастройки.НастройкаСинхронизации);	
	
	ОтветСтрокой = Б24_RestApiВызовСервера.ПолучитьДанныеLongPulling(ОбщиеНастройки, НастройкиПодключения, РазобранныйАдресХостинга, ПараметрыДляПродолженияМониторинга);	
	
	Если ОтветСтрокой <> Неопределено тогда
		
		Если ОтветСтрокой <> "" тогда
			
			ОбщиеНастройки.ВремяЗапуска = Формат(ТекущаяДата(),"ДЛФ=T");
			
			ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.Информация, "Обработка данных");
			ОбработатьОтветLongPulling(ОбщиеНастройки, ОтветСтрокой, ДанныеДляПродолженияМониторинга);
			
		КонецЕсли;
		
		
		ВыполнениеДлительногоСоединенияРекурсивно(ОбщиеНастройки, НастройкиПодключения, РазобранныйАдресХостинга);
	Иначе
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Не удалось подключиться к серверу Long Pulling для загрузки данных в режиме в реального времени.");
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, ОписаниеОшибки());
		
		ДобавитьВЛогИОповестить(ОбщиеНастройки, ОбщиеНастройки.ВаринтыОшибок.КритическаяОшибка, "Повторное родключение...");
		
		ЗапускДлительногоСоедиененияДляЗагрузкиСПортала(ОбщиеНастройки.НастройкаСинхронизации);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработатьОтветLongPulling(ОбщиеНастройки, ОтветСтрокой, ДанныеДляПродолженияМониторинга)
	
	ОтветСтрокой = СтрЗаменить(ОтветСтрокой, "#!NGINXNMS!#", ""); 
	ОтветСтрокой = СтрЗаменить(ОтветСтрокой, "#!NGINXNME!#", "");
	
	Попытка
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ПрочитатьJSONНаСервере(ОтветСтрокой, Истина);
		
		ДанныеДляПродолженияМониторинга.mid  = СтруктураОтвета.Получить("mid");
		ДанныеДляПродолженияМониторинга.tag  = СтруктураОтвета.Получить("tag");
		ДанныеДляПродолженияМониторинга.time = СтруктураОтвета.Получить("time");
		
		ТелоСообщения = СтруктураОтвета.Получить("text");
		
		Если ТелоСообщения = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		КомандаСообщения = ТелоСообщения.Получить("command");
		
		Если КомандаСообщения = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		Если КомандаСообщения = "channel_expire" тогда
			ЗапускДлительногоСоедиененияДляЗагрузкиСПортала(ОбщиеНастройки.НастройкаСинхронизации);
		КонецЕсли;
		
		Если КомандаСообщения = "event_offline" тогда
			ЗапуститьВыполненениеЗагрузки(ОбщиеНастройки);
		КонецЕсли;
		
	Исключение           
		
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.КритическаяОшибка"), ОписаниеОшибки());
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.КритическаяОшибка"), "Не удалось разобрать JSON");
		Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки, ПредопределенноеЗначение("Перечисление.Б24_ТипыСообщений.КритическаяОшибка"), "Пришедший JSON: " + Б24_RestApiВызовСервера.РаскодироватьСтрокуСервер(ОтветСтрокой));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры


#КонецОбласти

