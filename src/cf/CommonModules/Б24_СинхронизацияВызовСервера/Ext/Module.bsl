
#Область ПроцедурыИФункцииПоРаботеСРежимомРеальногоВремени

Процедура ВыгрузкаВРеальномВремени(НастройкаСинхронизации) Экспорт
	
	Если НастройкаСинхронизации.СпособСинхронизацииДанных = "ВРежимеРеальногоВремени" И НЕ НастройкаСинхронизации.ПометкаУдаления  тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбщиеНастройки = Б24_СинхронизацияКлиентСервер.СформироватьНастройкиСинхронизации(НастройкаСинхронизации, ЛОЖЬ, 1);
		
		Если ОбщиеНастройки = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		ЗаписатьИнформациюОСеансеЗапускаВРеальномВремениФайл(ПолучитьНазваниеНастройкиОСеансеВыгрузкиРТФайл(), НастройкаСинхронизации);	
		
		//ОбщиеНастройки.Измерение2 = "Загрузка данных с Битрикс24";
		//
		//Б24_СинхронизацияКлиентСервер.ЗапуститьВыполненениеЗагрузки(ОбщиеНастройки);
		//
		//Если ОбщиеНастройки.ВыполненоБезОшибок тогда
			ОбщиеНастройки.Измерение2 = "Выгрузка данных на Битрикс24";
			ОбщиеНастройки.СтатусПроверкиОчереди = 0;
			Б24_СинхронизацияКлиентСервер.ЗапуститьВыполненениеОчередиВыгрузки(ОбщиеНастройки);
		//КонецЕсли;
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени КАК Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени
		|ГДЕ
		|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.НастройкаСинхронизации = &НастройкаСинхронизации";
		Запрос.УстановитьПараметр("НастройкаСинхронизации", НастройкаСинхронизации);
		
		ВыполненныйЗапрос = Запрос.Выполнить();
		
		Если НЕ ВыполненныйЗапрос.Пустой() тогда
			Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ПроверитьВозможностьРегистрацииЭлементаДляВыгрузкиВФоне("","");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНазваниеФоновогоЗаданияВыгрузкиВРежимеРеальногоВремени() Экспорт
	Возврат "(Битрикс24) Выгрузка элементов в режиме реального времени";
КонецФункции

Функция ПолучитьНазваниеФоновогоЗаданияЗагрузкиВРежимеРеальногоВремени() Экспорт
	Возврат "(Битрикс24) Загрузка элементов в режиме реального времени";
КонецФункции

Функция ПолучитьНазваниеНастройкиОСеансеЗагрузкиРТФайл() Экспорт
	Возврат "БитриксВыполнениеЗагрузкиВРежимеРеальногоВремениФайл";
КонецФункции

Функция ПолучитьНазваниеНастройкиОСеансеВыгрузкиРТФайл() Экспорт
	Возврат "БитриксВыполнениевыгрузкиВРежимеРеальногоВремениФайл";
КонецФункции

Функция СейчасВыполняетсяЗадание(НазваниеЗадания) Экспорт
	
	мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Наименование", НазваниеЗадания));
	
	Для каждого ТекЭлемент из мФоновыеЗадания Цикл
		
		Если ТекЭлемент.Конец = Неопределено тогда
			Возврат Истина		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПоследнееВыполнениеЗадания(НазваниеЗадания) Экспорт
	
	Результат = Неопределено;
	
	мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый структура("Наименование", НазваниеЗадания));
	
	Для каждого ТекЭлемент из мФоновыеЗадания Цикл
		
		Если ТекЭлемент.Конец <> Неопределено тогда
			Результат =  ТекЭлемент.Конец;		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьИнформациюОСеансеЗапускаВРеальномВремениФайл(НазваниеНастройки, НастройкаСинхронизации) Экспорт
	
	НастройкиПользователя = Новый Структура;
	
	ТекущийСеанс 	= ПолучитьТекущийСеансИнформационнойБазы();
	
	НастройкиПользователя.Вставить("НомерСеанса"			, ТекущийСеанс.НомерСеанса);
	НастройкиПользователя.Вставить("Пользователь"			, Строка(ТекущийСеанс.Пользователь));
	НастройкиПользователя.Вставить("ДатаВыполнения"			, ТекущаяДата());
	НастройкиПользователя.Вставить("НастройкаСинхронизации"	,НастройкаСинхронизации);
	
	ХранилищеСистемныхНастроек.Сохранить(НазваниеНастройки, , НастройкиПользователя,,"Битрикс");
	
КонецПроцедуры


Процедура СохранениеСтатусаВыполненияЗагрузкиВРежимеРеальногоВремениВФайлеСервер(Статус) Экспорт
	ХранилищеСистемныхНастроек.Сохранить("СтатусВыполненияЗагрузкиВРежимеРеальногоВремениВФайле", , Статус,,"Битрикс");
КонецПроцедуры

Функция ПолучениеСтатусаВыполненияЗагрузкиВРежимеРеальногоВремениВФайлеСервер() Экспорт
	
	Статус = ХранилищеСистемныхНастроек.Загрузить("СтатусВыполненияЗагрузкиВРежимеРеальногоВремениВФайле",,,"Битрикс");
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииПоРаботеСВыгрузкойПоРасписанию

Процедура СинхронизацияПоРасписнию() Экспорт
	
	Выборка = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СпособСинхронизацииДанных = "ПоРасписанию" И НЕ Выборка.ПометкаУдаления тогда
			
			РасписаниеРегламентногоЗадания = Выборка.РасписаниеРегламентногоЗадания.Получить();
			
			Если РасписаниеРегламентногоЗадания = Неопределено тогда
				Продолжить;	
			КонецЕсли;
			
			ДатаВыполнения = РегистрыСведений.Б24_ИсторияВыполненияСинхронизаций.Получить(Новый Структура("НастройкаСинхронизации",Выборка.Ссылка)).ДатаВыполнения;
			
			Если НЕ ЗначениеЗаполнено(ДатаВыполнения) тогда
				
				Б24_СинхронизацияКлиентСервер.ВыполнитьСинхронизацию(Выборка.Ссылка, 0, Ложь);
				
				ЗаписатьИнформациюОСинхронизацииПоРасписанию(Выборка.Ссылка, ТекущаяДата());
				
			Иначе
				
				ПустаяДата 	= Дата("01.01.0001 00:00:00"); 
				ТекущаяДата = ТекущаяДата();
				
				ТекущаяДатаСекунды 	= ТекущаяДата - ПустаяДата;  
				ВремяСекунды 		= ТекущаяДата-НачалоДня(ТекущаяДата);
				ДатаСекунды 		= ТекущаяДатаСекунды - ВремяСекунды; 
				
				ПоследняяДатаВыполненияСекунды = ДатаВыполнения - ПустаяДата; 
				
				Если (РасписаниеРегламентногоЗадания.ДатаНачала-ПустаяДата) > ДатаСекунды тогда
					Продолжить;
				КонецЕсли;
				
				Если (РасписаниеРегламентногоЗадания.ВремяНачала-ПустаяДата) > ВремяСекунды тогда
					Продолжить;
				КонецЕсли;
				
				Если (РасписаниеРегламентногоЗадания.ДатаКонца-ПустаяДата) < ДатаСекунды  И ЗначениеЗаполнено(РасписаниеРегламентногоЗадания.ДатаКонца) тогда
					Продолжить;
				КонецЕсли;
				
				Если (РасписаниеРегламентногоЗадания.ВремяКонца-ПустаяДата) < ВремяСекунды И ЗначениеЗаполнено(РасписаниеРегламентногоЗадания.ВремяКонца) тогда
					Продолжить;
				КонецЕсли;
				
				Если РасписаниеРегламентногоЗадания.ДниНедели.Найти(ДеньНедели(ТекущаяДата)) = Неопределено тогда
					Продолжить;
				КонецЕсли;
				
				Если РасписаниеРегламентногоЗадания.Месяцы.Количество() > 0 И РасписаниеРегламентногоЗадания.Месяцы.Найти(Месяц(ТекущаяДата)) = Неопределено тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущаяДатаСекунды < (ПоследняяДатаВыполненияСекунды + РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня) тогда
					Продолжить;
				КонецЕсли;
				
				Б24_СинхронизацияКлиентСервер.ВыполнитьСинхронизацию(Выборка.Ссылка, 0, Ложь);
				
				ЗаписатьИнформациюОСинхронизацииПоРасписанию(Выборка.Ссылка, ТекущаяДата());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОСинхронизацииПоРасписанию(НастройкаСинхронизации, ДатаВремяВыполнения)
	
	НоваяЗапись = РегистрыСведений.Б24_ИсторияВыполненияСинхронизаций.СоздатьМенеджерЗаписи();
	НоваяЗапись.НастройкаСинхронизации 	= НастройкаСинхронизации;
	НоваяЗапись.ДатаВыполнения			= ДатаВремяВыполнения;
	НоваяЗапись.Записать();	
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСОчередьюОбмена

Процедура ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипОперацийСинхронизации, ПолныеДанные) 
	
	
		НоваяЗапись = Новый Структура;
		НоваяЗапись.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
		НоваяЗапись.Вставить("Операция"				 , ТипОперацийСинхронизации);
		НоваяЗапись.Вставить("ВидЗапуска"			 , ?(ПолныеДанные, "Ручной запуск выгрузки всех данных", "Ручной запуск выгрузки изменений"));
		НоваяЗапись.Вставить("ДатаУстановкиВОчередь" , ТекущаяУниверсальнаяДатаВМиллисекундах());
		НоваяЗапись.Вставить("ПолнаяВыгрузка"		 , ПолныеДанные);
		НоваяЗапись.Вставить("Статус"		 		 , 0);
		НоваяЗапись.Вставить("КоличествоВыполнений"	 , 0);
		
		МассивОчереди.Добавить(НоваяЗапись);
	
КонецПроцедуры

Функция ПолучитьОчередьВыгрузки(НастройкаСинхронизации, ПолнаяВыгрузка, ВремяЗапускаВМиллисекундах) Экспорт
	
	МассивОчереди = Новый Массив;
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПроверкаОбновленияДанныхМодуляОбменаСБитрикс24();
	
	Если ПолнаяВыгрузка тогда     //при полной выгрузке не выгружаем подчиненные данные т.к. выгрузится все
		Если (НастройкаСинхронизации.СинхронизацияКонтрагентов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ВыгружатьКонтрагентов")) тогда
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки"))	
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета"))	
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы")) тогда
			
			мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Контрагенты", "Выгрузка");
			
			Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		Если (НастройкаСинхронизации.СинхронизацияТоваров И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ВыгружатьТовары")) тогда
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки"))	
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета"))	
		 //ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы")) тогда
			
			мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Товары", "Выгрузка");
			
			Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НастройкаСинхронизации.СинхронизацияСделок 
			И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки") тогда
			
			мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Сделки", "Выгрузка");
			
			Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НастройкаСинхронизации.СинхронизацияСчетов 
			И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета") тогда
			
			мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Счета", "Выгрузка");
			
			Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НастройкаСинхронизации.СинхронизацияЗаказов 
			И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы") тогда
			
			мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Заказы", "Выгрузка");
			
			Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
			КонецЦикла;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОплаты") тогда
				
				мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Оплаты", "Выгрузка");
				
				Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
				КонецЦикла;
				
			КонецЕсли;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОтгрузки") тогда
				
				мТипыОперацийСинхронизации =  ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, "Отгрузки", "Выгрузка");
				
				Для каждого ТекЭлемент из мТипыОперацийСинхронизации Цикл
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТекЭлемент, Истина);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТипыДанныхДляОбменаСПорталом 	= Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
		
		ТипыОперацийСинхронизации 		= Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВремяЗапускаВМиллисекундах"	, ВремяЗапускаВМиллисекундах);
		Запрос.УстановитьПараметр("НастройкаСинхронизации"		, НастройкаСинхронизации);
		Запрос.Текст ="ВЫБРАТЬ
		|	Б24_ПакетыВыгрузки.ТипДанных КАК ТипДанных
		|ИЗ
		|	РегистрСведений.Б24_ПакетыВыгрузки КАК Б24_ПакетыВыгрузки
		|ГДЕ
		|	Б24_ПакетыВыгрузки.НастройкаСинхронизации = &НастройкаСинхронизации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Б24_ТаблицаИзменений.ТипДанных
		|ИЗ
		|	РегистрСведений.Б24_ТаблицаИзменений КАК Б24_ТаблицаИзменений
		|ГДЕ
		|	Б24_ТаблицаИзменений.ВремяЗаписиВМиллисекундах <= &ВремяЗапускаВМиллисекундах
		|	И Б24_ТаблицаИзменений.НастройкаСинхронизации = &НастройкаСинхронизации";
		
		тзнДанных = Запрос.Выполнить().Выгрузить();
		тзнДанных.Свернуть("ТипДанных");
		
		Если (НастройкаСинхронизации.СинхронизацияКонтрагентов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ВыгружатьКонтрагентов"))
			 ИЛИ (НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки"))	
			 ИЛИ (НастройкаСинхронизации.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета"))	
			 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы")) 
			 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОплаты")) 
			 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОтгрузки")) тогда
			 
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляКомпанийИКонтактов") тогда
				
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоКомпании) <> Неопределено
					ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКомпании) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваКомпаний, Ложь);
				КонецЕсли;
				
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоКонтакта) <> Неопределено 
					ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКонтакта) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваКонтактов, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			 
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Компания) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Компании, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Контакт) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Контакты, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Реквизит) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Реквизиты, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.АдресаРеквизитов, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.БанковскиеСчета, Ложь);
			КонецЕсли;
			
		КонецЕсли;	
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
		Если (НастройкаСинхронизации.СинхронизацияТоваров И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ВыгружатьТовары"))
		 ИЛИ (НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки"))	
		 ИЛИ (НастройкаСинхронизации.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета"))	
		 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы")) 
		 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОплаты")) 
		 ИЛИ (НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОтгрузки")) тогда
		 
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоТовара) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваТовара) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваТоваров, Ложь);
			КонецЕсли;
		 
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ГруппаТовара) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.ГруппыТоваров, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.ЕдиницыИзмерения, Ложь);
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Товар) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.КартинкаФайлТовара) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Товары, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
		Если НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки") тогда
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляСделок") тогда
				
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоСделки) <> Неопределено 
					ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСделки) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваСделок, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Сделка) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.РеквизитыСделки) <> Неопределено
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ТоварыСделки) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Сделки, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
		Если НастройкаСинхронизации.СинхронизацияСчетов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьСчета") тогда
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляСчетов")тогда
				
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоСчета) <> Неопределено
					ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСчета) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваСчетов, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Счет) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.РеквизитыСчета) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Счета, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
		Если НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы") тогда
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляЗаказов")тогда
				
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.СвойствоЗаказа) <> Неопределено
					ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваЗаказа) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.СвойстваЗаказов, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
			Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Заказ) <> Неопределено 
				ИЛИ тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.ТоварыЗаказа) <> Неопределено тогда
				ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Заказы, Ложь);
			КонецЕсли;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОплаты") = Истина тогда
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Оплата) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Оплаты, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьОтгрузки") = Истина тогда
				Если тзнДанных.Найти(ТипыДанныхДляОбменаСПорталом.Отгрузка) <> Неопределено тогда
					ДобавитьЗаписьВОчередьВыгрузкиДанных(НастройкаСинхронизации, МассивОчереди, ТипыОперацийСинхронизации.Отгрузки, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОчереди;
	
КонецФункции

#КонецОбласти


#Область РаботаСНастройкамиОбмена

// Процедура - Добавляет настройки обмена, не поддерживаемые клиентом, в общую структуру настроек
//
// Параметры:
//  ОбщиеНастройки	 - Структура с общими настройками 
//
Процедура ДобавитьСложныеНастройкиОбменаВСтруктуру(ОбщиеНастройки) Экспорт
	
	НастройкаСинхронизации = ОбщиеНастройки.НастройкаСинхронизации;
	
	лНастройки = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если лНастройки <> Неопределено тогда
		ОбщиеНастройки.Вставить("СтруктураСхемКомпоновки"			, Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьСтруктуруСхемКомпоновки());
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииКонтрагентов", лНастройки.НастройкиСинхронизацииКонтрагентов);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииТоваров"		, лНастройки.НастройкиСинхронизацииТоваров);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииСчетов"		, лНастройки.НастройкиСинхронизацииСчетов);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииСделок"		, лНастройки.НастройкиСинхронизацииСделок);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииЗаказов"		, лНастройки.НастройкиСинхронизацииЗаказов);
	КонецЕсли;
	
	ОбщиеНастройки.Вставить("ТаблицаСопоставленияПользователей", НастройкаСинхронизации.СопоставлениеПользователей.Выгрузить());
	
КонецПроцедуры

Функция ПолучитьТипыОперацийСинхронизаций(НастройкаСинхронизации, НазваниеСущности, НаправлениеСинхронизации) Экспорт
	
	Результат = новый Массив;
	
	ТипыОперацийСинхронизации = Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
	
	Если НазваниеСущности = "Товары" тогда
		
		Результат.Добавить(ТипыОперацийСинхронизации.СвойстваТоваров);	
		Результат.Добавить(ТипыОперацийСинхронизации.ЕдиницыИзмерения);	
		Результат.Добавить(ТипыОперацийСинхронизации.ГруппыТоваров);	
		Результат.Добавить(ТипыОперацийСинхронизации.Товары);
		
	ИначеЕсли НазваниеСущности = "Контрагенты" тогда
		
		Если (НаправлениеСинхронизации = "Выгрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляКомпанийИКонтактов") = Истина) 
			ИЛИ (НаправлениеСинхронизации = "Загрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляКомпанийИКонтактов") = Истина) тогда		
			Результат.Добавить(ТипыОперацийСинхронизации.СвойстваКомпаний);
			Результат.Добавить(ТипыОперацийСинхронизации.СвойстваКонтактов);
		КонецЕсли;
		
		Результат.Добавить(ТипыОперацийСинхронизации.Компании);	
		Результат.Добавить(ТипыОперацийСинхронизации.Контакты);	
		Результат.Добавить(ТипыОперацийСинхронизации.Реквизиты);	
		Результат.Добавить(ТипыОперацийСинхронизации.АдресаРеквизитов);	
		Результат.Добавить(ТипыОперацийСинхронизации.БанковскиеСчета);
		
	ИначеЕсли НазваниеСущности = "Счета" тогда
		
		Если (НаправлениеСинхронизации = "Выгрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляСчетов") = Истина) 
			ИЛИ (НаправлениеСинхронизации = "Загрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСчетов") = Истина) тогда		
			Результат.Добавить(ТипыОперацийСинхронизации.СвойстваСчетов);
		КонецЕсли;
		
		Результат.Добавить(ТипыОперацийСинхронизации.Счета);
		
	ИначеЕсли НазваниеСущности = "Сделки" тогда
		
		Если (НаправлениеСинхронизации = "Выгрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляСделок") = Истина) 
			ИЛИ (НаправлениеСинхронизации = "Загрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляСделок") = Истина) тогда		
			Результат.Добавить(ТипыОперацийСинхронизации.СвойстваСделок);
		КонецЕсли;
		
		Результат.Добавить(ТипыОперацийСинхронизации.Сделки);
		
	ИначеЕсли НазваниеСущности = "Заказы" тогда
		
		Если (НаправлениеСинхронизации = "Выгрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьПользовательскиеПоляЗаказов") = Истина) 
			ИЛИ (НаправлениеСинхронизации = "Загрузка" И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ЗагружатьПользовательскиеПоляЗаказов") = Истина) тогда		
			Результат.Добавить(ТипыОперацийСинхронизации.СвойстваЗаказов);
		КонецЕсли;
		
		Результат.Добавить(ТипыОперацийСинхронизации.Заказы);
		
	ИначеЕсли НазваниеСущности = "Оплаты" тогда
		Результат.Добавить(ТипыОперацийСинхронизации.Оплаты);
	ИначеЕсли НазваниеСущности = "Отгрузки" тогда
		Результат.Добавить(ТипыОперацийСинхронизации.Отгрузки);
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьСвойстваДокументовДляСопоставлений(НастройкаСинхронизации, НазваниеДокумента) Экспорт
	
	Результат = Неопределено;
	
	Если НазваниеДокумента = "Счет" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации, "ИнформацияОСтатусах");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоСчета" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоСчета; 	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НазваниеДокумента = "Сделка" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ИнформацияОСтатусах");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
			Если ИнформацияОСтатусах.ИсточникСтатусов1С = "СвойствоЗаказов" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоЗаказов; 
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НазваниеДокумента = "Заказ" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ИнформацияОСтатусах");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
			Если ИнформацияОСтатусах.ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоЗаказа; 
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НазваниеДокумента = "Отгрузка" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ИнформацияОСтатусах");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
			Если ИнформацияОСтатусах.ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоОтгрузки; 	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НазваниеДокумента = "ДоставкаЗаказ" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ИнформацияОДоставках");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда
			Если ИнформацияОСтатусах.ИсточникСлужбДоставкиЗаказов = "СвойствоЗаказов" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоЗаказа;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НазваниеДокумента = "ДоставкаОтгрузка" тогда
		ИнформацияОСтатусах = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ИнформацияОДоставках");
		
		Если ЗначениеЗаполнено(ИнформацияОСтатусах) тогда  		
			Если ИнформацияОСтатусах.ИсточникСлужбДоставкиОтгрузок = "СвойствоОтгрузок" тогда 			
				Результат = ИнформацияОСтатусах.СвойствоОтгрузки; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СозданиеИПолучениеПредопределенныхСвойств

Функция ПолучитьНазванияИсключающихСвойств() Экспорт
	
	СвойстваИсключения = Новый Массив;
	СвойстваИсключения.Добавить("Картинки и файлы номенклатуры для Битрикс24");
	СвойстваИсключения.Добавить("Вид номенклатуры для Битрикс24");
	
	СвойстваИсключения.Добавить("Пользовательский комментарий счета Битрикс24");
	СвойстваИсключения.Добавить("Название счета Битрикс24");
	СвойстваИсключения.Добавить("Номер счета Битрикс24");
	СвойстваИсключения.Добавить("Дата счета Битрикс24");
	
	СвойстваИсключения.Добавить("Название сделки Битрикс24");
	СвойстваИсключения.Добавить("Направление сделки Битрикс24");
	СвойстваИсключения.Добавить("Номер сделки Битрикс24");
	СвойстваИсключения.Добавить("Дата сделки Битрикс24");
	
	СвойстваИсключения.Добавить("Номер заказа Битрикс24");
	СвойстваИсключения.Добавить("Дата заказа Битрикс24");
	СвойстваИсключения.Добавить("Трек номер заказа Битрикс24");
	СвойстваИсключения.Добавить("Пользовательский комментарий заказа Битрикс24");
	
	СвойстваИсключения.Добавить("Номер отгрузки Битрикс24");
	СвойстваИсключения.Добавить("Дата отгрузки Битрикс24");
	СвойстваИсключения.Добавить("Трек номер отгрузки Битрикс24");
	
	Возврат СвойстваИсключения;
	
КонецФункции

Функция СоздатьПолучитьСвойствоВидаНоменклатурыБитрикс24(СоздаватьНовыеЗначения=Ложь) Экспорт
	
	НаименованиеСвойства = "Вид номенклатуры для Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ИСТИНА";
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при синхронизации с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Номенклатура)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
		
		
		лТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(лТип);
		
		СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
		СвойствоОбъект.Доступен 	= Ложь;
		СвойствоОбъект.Виден 		= Ложь;
		СвойствоОбъект.ДополнительныеЗначенияИспользуются 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура.ПолучитьОбъект();
		лНабор.ДополнительныеСведения.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		СвойствоСсылка =  СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СвойствоСсылка = Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Если СоздаватьНовыеЗначения И ЗначениеЗаполнено(СвойствоСсылка) тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Владелец", СвойствоСсылка);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗначенияСвойствОбъектов.Наименование КАК Наименование,
		|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВремЗначенияСвойств
		|ИЗ
		|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Владелец = &Владелец
		|	И ЗначенияСвойствОбъектов.ЭтоГруппа = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыНоменклатуры.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	НЕ ВидыНоменклатуры.Наименование В
		|				(ВЫБРАТЬ
		|					ВремЗначенияСвойств.Наименование
		|				ИЗ
		|					ВремЗначенияСвойств)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			НовоеЗначение.Владелец = СвойствоСсылка;
			НовоеЗначение.Наименование = Выборка.Наименование;
			НовоеЗначение.Записать();
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ВремЗначенияСвойств.Наименование КАК Наименование,
		|	ВремЗначенияСвойств.Ссылка КАК Ссылка
		|ИЗ
		|	ВремЗначенияСвойств КАК ВремЗначенияСвойств
		|ГДЕ
		|	НЕ ВремЗначенияСвойств.Наименование В
		|				(ВЫБРАТЬ
		|					ВидыНоменклатуры.Наименование
		|				ИЗ
		|					Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекЗначение = Выборка.Ссылка.ПолучитьОбъект();
			ТекЗначение.ПометкаУдаления = Истина;
			ТекЗначение.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойствоСсылка;
	
КонецФункции

Функция СоздатьПолучитьСвойствоКартинокИФайловНоменклатуры() Экспорт
	
	НаименованиеСвойства = "Картинки и файлы номенклатуры для Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ИСТИНА";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при синхронизации с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Номенклатура)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
		
		лТип = Тип("строка");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(лТип);
		
		СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
		СвойствоОбъект.Доступен 	= Ложь;
		СвойствоОбъект.Виден 		= Ложь;
		СвойствоОбъект.ДополнительныеЗначенияИспользуются 	= Ложь;
		СвойствоОбъект.Записать();
		
		СвойствоСсылка =  СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СвойствоСсылка = Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойствоСсылка;
	
КонецФункции


Функция СоздатьПолучитьСвойствоПользовательскогоКомментарияСчетаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Пользовательский комментарий счета Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Счет на оплату)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		СвойствоОбъект.ЭтоДополнительноеСведение = ЛОЖЬ;
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоНазваниеТемыСчетаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Название счета Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Счет на оплату)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		СвойствоОбъект.ЭтоДополнительноеСведение = ЛОЖЬ;
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоНомерСчетаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Номер счета Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Счет на оплату)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		СвойствоОбъект.ЭтоДополнительноеСведение = ЛОЖЬ;
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоДатаСчетаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Дата счета Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Счет на оплату)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		СвойствоОбъект.ЭтоДополнительноеСведение = ЛОЖЬ;
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции


Функция СоздатьПолучитьСвойствоНазваниеТемыСделкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Название сделки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоНомерСделкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Номер сделки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоДатаСделкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Дата сделки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоНаправлениеСделкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Направление сделки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)";
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при синхронизации с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ покупателя)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		
		лТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(лТип);
		
		СвойствоОбъект.ЭтоДополнительноеСведение = ЛОЖЬ;
		СвойствоОбъект.ТипЗначения 	= Новый ОписаниеТипов(МассивТипов);
		СвойствоОбъект.Доступен 	= Ложь;
		СвойствоОбъект.Виден 		= Ложь;
		СвойствоОбъект.ДополнительныеЗначенияИспользуются 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		СвойствоСсылка =  СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СвойствоСсылка = Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойствоСсылка;
	
КонецФункции


Функция СоздатьПолучитьСвойствоНомерЗаказаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Номер заказа Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоДатаЗаказаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Дата заказа Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоТрекНомерЗаказаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Трек номер заказа Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоПользовательскогоКомментарияЗаказаБитрикс24() Экспорт
	
	НаименованиеСвойства = "Пользовательский комментарий заказа Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Заказ клиента)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции


Функция СоздатьПолучитьСвойствоНомерОтгрузкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Номер отгрузки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Расходная накладная)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоДатаОтгрузкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Дата отгрузки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Расходная накладная)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг;
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Дата"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция СоздатьПолучитьСвойствоТрекНомерОтгрузкиБитрикс24() Экспорт
	
	НаименованиеСвойства = "Трек номер отгрузки Битрикс24";
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("НаименованиеСвойства", НаименованиеСвойства);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = &НаименованиеСвойства
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг)
	|	И ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	ВыполненныйЗапрос = Запрос.Выполнить();	
	
	Если ВыполненныйЗапрос.Пустой() тогда
		
		СвойствоОбъект 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Комментарий 	= НСтр("ru = 'Создано автоматически при загрузке с Битрикс24'");
		СвойствоОбъект.Наименование = НаименованиеСвойства + " (Расходная накладная)";
		СвойствоОбъект.Заголовок 	= НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыВыбораЗначения = НаименованиеСвойства;
		СвойствоОбъект.ЗаголовокФормыЗначения 		= НаименованиеСвойства;
		СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг;
		
		КС = Новый КвалификаторыСтроки(250);
		Массив = Новый Массив;
		Массив.Добавить(Тип("Строка"));
		ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
		
		СвойствоОбъект.ТипЗначения 	= ОписаниеТипов;
		
		СвойствоОбъект.Доступен = Истина;
		СвойствоОбъект.Виден 	= Истина;
		СвойствоОбъект.Записать();
		
		лНабор = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_РеализацияТоваровУслуг.ПолучитьОбъект();
		лНабор.ДополнительныеРеквизиты.Добавить().Свойство = СвойствоОбъект.Ссылка;
		лНабор.Записать();
		
		Возврат СвойствоОбъект.Ссылка; 
		
	Иначе
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область ПолучениеМассивовВыгружаемыхДанных

Функция ПолучитьИспользуемыеКомпании(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.НастройкиКомпоновкиДанныхКонтрагентов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиКомпаний");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Компания;
	
	Запрос 		= Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат 	= Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеКонтакты(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.НастройкиКомпоновкиДанныхКонтрагентов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиКонтактов");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Контакт;
	
	Запрос 		= Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат 	= Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеРеквизиты(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииКонтрагентов.НастройкиКомпоновкиДанныхКонтрагентов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиРеквизитов");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Реквизит;
	
	Запрос 		= Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат 	= Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции


Функция ПолучитьИспользуемыеГруппыНоменклатуры(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	лМассивНоменклатуры =  ПолучитьИспользуемуюНоменклатуру(НастройкаСинхронизации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мТовары", лМассивНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&мТовары)
	|ИТОГИ ПО
	|	Родитель ТОЛЬКО ИЕРАРХИЯ";
	
	тзн = Запрос.Выполнить().Выгрузить();
	тзн.Свернуть("Родитель");
	лМассив = тзн.ВыгрузитьКолонку("Родитель");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемуюНоменклатуру(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииТоваров.НастройкиКомпоновкиДанныхТоваров;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиТоваров");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Товар;
	
	Запрос 		= Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат 	= Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
	
КонецФункции

Функция ПолучитьТаблицуИспользуемыхХарактеристикиНоменклатуры(НастройкаСинхронизации) Экспорт
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииТоваров.НастройкиКомпоновкиДанныхТоваров;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиТоваров");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Товар;
	
	Запрос 		= Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	тзнДанных 	=  Запрос.Выполнить().Выгрузить();
	
	Возврат тзнДанных; 
	
КонецФункции

Функция ПолучитьИспользуемыеСчета(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииСчетов.НастройкиКомпоновкиДанныхСчетов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиСчетов");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Счет;
	
	Запрос = Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив =  запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеСделки(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииСделок.НастройкиКомпоновкиДанныхСделок;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиСделок");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Сделка;
	
	Запрос = Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив =  запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеЗаказы(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.НастройкиКомпоновкиДанныхЗаказов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиСделок");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Заказ;
	
	Запрос = Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеОплаты(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.НастройкиКомпоновкиДанныхЗаказов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиОплат");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Оплата;
	
	Запрос = Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции

Функция ПолучитьИспользуемыеОтгрузки(НастройкаСинхронизации) Экспорт
	
	лМассив = Новый Массив;	
	
	ОбщиеНастройки = ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации);
	
	НастройкиКомпоновщика 	= ОбщиеНастройки.НастройкиСинхронизацииЗаказов.НастройкиКомпоновкиДанныхЗаказов;
	СхемаВыгрузки 			= Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("СхемаВыгрузкиОтгрузок");
	
	ТипДанных 				= ОбщиеНастройки.ТипыОбъектовОбмена.Отгрузка;
	
	Запрос = Б24_ВыгрузкаВызовСервера.ПолучитьЗапросДляВыгрузкиДанных(ОбщиеНастройки, ТипДанных, СхемаВыгрузки, НастройкиКомпоновщика);	
	
	лМассив =  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Результат = Новый ФиксированныйМассив(лМассив);
	
	Возврат Результат; 
	
КонецФункции


Функция ПолучитьОбщиеНастройкиДляСКД(НастройкаСинхронизации)
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("ПолнаяВыгрузка"				, Истина);	
	ОбщиеНастройки.Вставить("ВремяЗапускаВМиллисекундах"	, ТекущаяУниверсальнаяДатаВМиллисекундах());	
	ОбщиеНастройки.Вставить("ТипыОбъектовОбмена"  			, Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом());	
	ОбщиеНастройки.Вставить("НастройкаСинхронизации"		, НастройкаСинхронизации);	
	ОбщиеНастройки.Вставить("ДеревоГрупп"					, Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ДеревоГрупп"));	
	
	лНастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если лНастройкиОбмена <> Неопределено тогда
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииТоваров"		, лНастройкиОбмена.НастройкиСинхронизацииТоваров);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииКонтрагентов", лНастройкиОбмена.НастройкиСинхронизацииКонтрагентов);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииСчетов"		, лНастройкиОбмена.НастройкиСинхронизацииСчетов);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииСделок"		, лНастройкиОбмена.НастройкиСинхронизацииСделок);
		ОбщиеНастройки.Вставить("НастройкиСинхронизацииЗаказов"		, лНастройкиОбмена.НастройкиСинхронизацииЗаказов);
	КонецЕсли;
	
	Возврат ОбщиеНастройки;	
	
КонецФункции

#КонецОбласти


#Область РаботаСИдОбъектов

Процедура ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Данные, ИдБитрикс24, ДополнительныйИдБитрикс24="") Экспорт
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Сделка ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.РеквизитыСделки 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.ТоварыСделки тогда
		Идентификатор = ПреффиксыВнешнихКодовБитрикс24.Сделки + Формат(ИдБитрикс24, "ЧГ=0");	
		
	ИначеЕсли ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.Заказ тогда
		Идентификатор = ПреффиксыВнешнихКодовБитрикс24.Заказы + Формат(ИдБитрикс24, "ЧГ=0");	
	Иначе
		Идентификатор = Формат(ИдБитрикс24, "ЧГ=0");	
	КонецЕсли;
	
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки тогда 
		
		Выборка = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("Объект",Данные));
		
		ЕстьЗапись = Ложь;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипДанных = ТипДанных И Выборка.Портал = ОбщиеНастройки.Портал тогда
				ТекЗапись = Выборка.ПолучитьМенеджерЗаписи();
				ТекЗапись.Идентификатор	= Идентификатор;
				ТекЗапись.Записать(Истина);
				ЕстьЗапись = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЗапись тогда
			НоваяЗапись = РегистрыСведений.Б24_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Объект 			= Данные;
			НоваяЗапись.Портал 			= ОбщиеНастройки.Портал;
			НоваяЗапись.ТипДанных 		= ТипДанных;
			НоваяЗапись.Идентификатор 	= Идентификатор;
			НоваяЗапись.ДополнительныйИдентификатор = ДополнительныйИдБитрикс24;
			НоваяЗапись.Записать(Истина);
		КонецЕсли;
		
	Иначе
		
		НоваяЗапись = РегистрыСведений.Б24_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
		НоваяЗапись.Портал 			= ОбщиеНастройки.Портал;
		НоваяЗапись.ТипДанных 		= ТипДанных;
		НоваяЗапись.Идентификатор 	= Идентификатор;
		НоваяЗапись.ДополнительныйИдентификатор = ДополнительныйИдБитрикс24;
		
		Если ТипЗнч(Данные) = Тип("Структура") тогда
			НоваяЗапись.Объект 				= Данные.Объект;
			НоваяЗапись.ПодчиненныйОбъект	= Данные.ПодчиненныйОбъект;
		Иначе
			НоваяЗапись.Объект 				= Данные;
		КонецЕсли;
		
		НоваяЗапись.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИдБ24Объекта(ОбщиеНастройки, ТипДанных, Данные, ОписаниеОшибки) Экспорт
	
		
	Если ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКомпании ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоКонтакта 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСчета ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоСделки 
		ИЛИ ТипДанных = ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоЗаказа тогда 
		
		Выборка = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("Объект", Данные));
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипДанных = ТипДанных И Выборка.Портал = ОбщиеНастройки.Портал тогда
				Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Удален id для объекта:" + Строка(Данные) + ". Тип объекта:" + Строка(ТипДанных));
				Выборка.ПолучитьМенеджерЗаписи().Удалить();
			КонецЕсли;
			
			Если Данные.ДополнительныеЗначенияИспользуются тогда
				ВыборкаЗначенийСвойств = Справочники.ЗначенияСвойствОбъектов.Выбрать(,Данные);
				Пока ВыборкаЗначенийСвойств.Следующий() Цикл
					ВыборкаИдЗначенийСвойств = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("Объект", ВыборкаЗначенийСвойств.Ссылка));
					Пока ВыборкаИдЗначенийСвойств.Следующий() Цикл
						
						Если ВыборкаИдЗначенийСвойств.Портал = ОбщиеНастройки.Портал тогда
							Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Удален id для объекта:" + Строка(ВыборкаИдЗначенийСвойств.Объект) + ". Тип объекта:" + Строка(ВыборкаИдЗначенийСвойств.ТипДанных));
							ВыборкаИдЗначенийСвойств.ПолучитьМенеджерЗаписи().Удалить();
						КонецЕсли;
						
					КонецЦикла;			
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе	
			
		Если ТипЗнч(Данные) = Тип("Структура") тогда
			
			Выборка = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("Объект", Данные.Объект));
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ТипДанных = ТипДанных И  Выборка.ПодчиненныйОбъект = Данные.ПодчиненныйОбъект И Выборка.Портал = ОбщиеНастройки.Портал тогда
					ОписаниеОбъекта = Строка(Данные.Объект) + Б24_СинхронизацияПовтИсп.ПолучитьРазделительНаименованийНоменклатуры() + Строка(Данные.ПодчиненныйОбъект);
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Удален id для объекта:" + ОписаниеОбъекта + ". Тип объекта:" + Строка(ТипДанных));
					Выборка.ПолучитьМенеджерЗаписи().Удалить();
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Выборка = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать(Новый Структура("Объект", Данные));
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ТипДанных = ТипДанных И Выборка.Портал = ОбщиеНастройки.Портал тогда
					Б24_ОбщегоНазначенияСервер.ДобавитьВЛог(ОбщиеНастройки,  ОбщиеНастройки.ВаринтыОшибок.Ошибка, "Удален id для объекта:" + Строка(Данные) + ". Тип объекта:" + Строка(ТипДанных));
					Выборка.ПолучитьМенеджерЗаписи().Удалить();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура УдалитьОбъектПоИдентификаторуБ24(Портал, ТипДанных, ИдБитрикс24) Экспорт
	
	ПреффиксыВнешнихКодовБитрикс24 = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	ТипыОбъектовОбмена = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	Если ТипДанных = ТипыОбъектовОбмена.Сделка ИЛИ ТипДанных = ТипыОбъектовОбмена.РеквизитыСделки 
		ИЛИ ТипДанных = ТипыОбъектовОбмена.ТоварыСделки тогда
		Идентификатор = ПреффиксыВнешнихКодовБитрикс24.Сделки + ИдБитрикс24;	
	ИначеЕсли ТипДанных = ТипыОбъектовОбмена.Заказ ИЛИ ТипДанных = ТипыОбъектовОбмена.СвойствоЗаказа тогда
		Идентификатор = ПреффиксыВнешнихКодовБитрикс24.Заказы + ИдБитрикс24;	
	Иначе
		Идентификатор = ИдБитрикс24;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Портал"			, Портал);
	Запрос.УстановитьПараметр("ТипДанных"		, ТипДанных);
	Запрос.УстановитьПараметр("Идентификатор" 	, Идентификатор);
	Запрос.УстановитьПараметр("Идентификатор" 	, Идентификатор);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.ТипДанных КАК ТипДанных,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Идентификатор = &Идентификатор
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//сам объект не удаляем
		
		Запись = РегистрыСведений.Б24_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Запись.Удалить();
		
		//ТекОбъект = Выборка.Объект.ПолучитьОбъект();
		//ТекОбъект.ПометкаУдаления=Истина;
		//ТекОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаСБитрикс24", Истина);
		//ТекОбъект.Записать(); 
		
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьЗначениеПоXML(ТипОбъекта, Идентификатор) Экспорт
	
	ТипыИсключенияНаВерсиюДанных = Новый Массив;
	ТипыИсключенияНаВерсиюДанных.Добавить(Тип("Число"));	
	ТипыИсключенияНаВерсиюДанных.Добавить(Тип("Строка"));	
	ТипыИсключенияНаВерсиюДанных.Добавить(Тип("Дата"));	
	ТипыИсключенияНаВерсиюДанных.Добавить(Тип("Булево"));	
	
	Попытка
		
		ПреффиксыВнешнихКодов1С = Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодов1С();
		
		Если Лев(Идентификатор, 4) = ПреффиксыВнешнихКодов1С.Организации тогда
			Результат = XMLЗначение(Тип("СправочникСсылка.Организации"), Прав(Идентификатор, СтрДлина(Идентификатор)-4));
		ИначеЕсли Лев(Идентификатор, 6) = ПреффиксыВнешнихКодов1С.БанковскиеСчета тогда
			Результат = XMLЗначение(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), Прав(Идентификатор, СтрДлина(Идентификатор)-6));
			
		ИначеЕсли Лев(Идентификатор, 3) = ПреффиксыВнешнихКодов1С.КонтактныеЛица тогда
			Результат = XMLЗначение(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"), Прав(Идентификатор, СтрДлина(Идентификатор)-3));
			
		ИначеЕсли Лев(Идентификатор, 3) = ПреффиксыВнешнихКодов1С.ОперацияПоПлатежнойКарте тогда
			Результат = XMLЗначение(Тип("ДокументСсылка.ОперацияПоПлатежнойКарте"), Прав(Идентификатор, СтрДлина(Идентификатор)-3));
			
		ИначеЕсли Лев(Идентификатор, 3) = ПреффиксыВнешнихКодов1С.ПриходныйКассовыйОрдер тогда
			Результат = XMLЗначение(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), Прав(Идентификатор, СтрДлина(Идентификатор)-3));
			
		ИначеЕсли Лев(Идентификатор, 3) = ПреффиксыВнешнихКодов1С.ПоступлениеБезналичныхДенежныхСредств тогда
			Результат = XMLЗначение(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"), Прав(Идентификатор, СтрДлина(Идентификатор)-3));
		Иначе
			Если Идентификатор = "" тогда
				Если ТипОбъекта = тип("Число") тогда
					Результат = 0;
				Иначе
					Результат = XMLЗначение(ТипОбъекта, Идентификатор);
				КонецЕсли;
				
			Иначе
				Результат = XMLЗначение(ТипОбъекта, Идентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипыИсключенияНаВерсиюДанных.Найти(ТипОбъекта) = Неопределено тогда
			
			Результат = ?(ЗначениеЗаполнено(Результат.ВерсияДанных), Результат, Неопределено);
			
			Если Результат = Неопределено И ТипОбъекта = Тип("СправочникСсылка.Номенклатура") тогда
				Результат = ПолучитьЗначениеПоXML(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Результат = Неопределено;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдОбъекта(НастройкаСинхронизации, Объект, ТипДанных, ПодчиненныйОбъект = Неопределено) Экспорт
	
	Возврат РегистрыСведений.Б24_ИдентификаторыОбъектов.Получить(Новый Структура("Портал, Объект, ТипДанных, ПодчиненныйОбъект"	, НастройкаСинхронизации.Портал, Объект , ТипДанных, ПодчиненныйОбъект)).Идентификатор
	
КонецФункции

Функция ПолучитьНоменклатуруИХарактеристикуПоВнешнемуИдентификатору(ВнешнийИдентификатор) Экспорт
	
	Результат = новый Структура;
	Результат.Вставить("Объект"				, Справочники.Номенклатура.ПустаяСсылка());	
	Результат.Вставить("ПодчиненныйОбъект"	, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	
	Попытка
		
		СтруктураСтроки = ПолучитьДвеСоставныеЧастиИзСтроки(ВнешнийИдентификатор, "#"); 
		
		Если СтруктураСтроки.ВтораяЧасть = "" тогда
			Результат.Объект 			= XMLЗначение(Тип("СправочникСсылка.Номенклатура"), СтруктураСтроки.ПерваяЧасть); 	
			Результат.ПодчиненныйОбъект = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(); 	
		Иначе
			Результат.Объект = XMLЗначение(Тип("СправочникСсылка.Номенклатура"), СтруктураСтроки.ПерваяЧасть); 	
			Результат.ПодчиненныйОбъект = XMLЗначение(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"), СтруктураСтроки.ВтораяЧасть); 
		КонецЕсли;
	Исключение
		Результат = Неопределено;	
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

Функция ПолучитьЗначениеПоИдБ24Объекта(Портал, ТипДанных, ИдБитрикс24) Экспорт
	
	Результат = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Портал"			, Портал);
	Запрос.УстановитьПараметр("ТипДанных"		, ТипДанных);
	Запрос.УстановитьПараметр("Идентификатор"	, ИдБитрикс24);
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.Портал = &Портал
	|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
	|	И Б24_ИдентификаторыОбъектов.Идентификатор = &Идентификатор";
	
	ВыполненныйЗапрос = Запрос.Выполнить();
	
	Если НЕ ВыполненныйЗапрос.Пустой() тогда
		
		тзнДанных = ВыполненныйЗапрос.Выгрузить();
		
		Результат = новый Структура;
		Результат.Вставить("Объект"				, тзнДанных[0].Объект);	
		Результат.Вставить("ПодчиненныйОбъект"	, тзнДанных[0].ПодчиненныйОбъект);	
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти


#Область ПрочиеПроцедурыИФункции

Процедура ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки) Экспорт
	
	ОбщиеНастройки.Вставить("Портал"						, НастройкаСинхронизации.Портал);
	ОбщиеНастройки.Вставить("КоличествоПовторенийПриОшибках", НастройкаСинхронизации.КоличествоПовторенийПриОшибках);
	ОбщиеНастройки.Вставить("ПорядокВыполненияСинхронизации", НастройкаСинхронизации.ПорядокВыполненияСинхронизации);
	
	ОбщиеНастройки.Вставить("ИдентификаторИсточника"		, НастройкаСинхронизации.ИдентификаторИсточника);
	ОбщиеНастройки.Вставить("СинхронизацияКонтрагентов"		, НастройкаСинхронизации.СинхронизацияКонтрагентов);
	ОбщиеНастройки.Вставить("СинхронизацияТоваров"			, НастройкаСинхронизации.СинхронизацияТоваров);
	ОбщиеНастройки.Вставить("СинхронизацияСчетов"			, НастройкаСинхронизации.СинхронизацияСчетов);
	ОбщиеНастройки.Вставить("СинхронизацияСделок"			, НастройкаСинхронизации.СинхронизацияСделок);
	ОбщиеНастройки.Вставить("СинхронизацияЗаказов"			, НастройкаСинхронизации.СинхронизацияЗаказов);
	
	РеквизитНастройкиСинхронизации = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	ВидыКонтрагентов = Б24_СинхронизацияПовтИсп.ПолучитьЗначенияПеречисленияВидыКонтрагентов();
	
	спкКомпаний  = Неопределено;
	спкКонтактов = Неопределено;
	
	РеквизитНастройкиСинхронизации.НастройкиСинхронизацииКонтрагентов.Свойство("ТипыКонтрагентовДляКомпаний"	, спкКомпаний);
	РеквизитНастройкиСинхронизации.НастройкиСинхронизацииКонтрагентов.Свойство("ТипыКонтрагентовДляКонтактов"	, спкКонтактов);
		
	Если спкКомпаний = Неопределено тогда
		мКомпаний = Новый Массив;
		мКомпаний.Добавить(Перечисления.КомпанияЧастноеЛицо.Компания);
	Иначе
		мКомпаний	= спкКомпаний.ВыгрузитьЗначения()
	КонецЕсли;
		
	Если спкКонтактов = Неопределено тогда
		мКонтактов = Новый Массив;
		мКонтактов.Добавить(Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	Иначе
		мКонтактов = спкКонтактов.ВыгрузитьЗначения()
	КонецЕсли;
		
	ОбщиеНастройки.Вставить("ТипыКонтрагентовДляКомпаний"	, мКомпаний);
	ОбщиеНастройки.Вставить("ТипыКонтрагентовДляКонтактов"	, мКонтактов);
	
КонецПроцедуры

Функция ПолучитьДвеСоставныеЧастиИзСтроки(СтрокаЦелая, Разделитель) Экспорт  //стрРазделить работает криво
	
	ПозицияРазделителя = СтрНайти(СтрокаЦелая, Разделитель);
	Если ПозицияРазделителя >0 тогда
		ПерваяЧасть 	= Лев(СтрокаЦелая, ПозицияРазделителя-1);
		ВтораяЧасть 	= Прав(СтрокаЦелая, СтрДлина(СтрокаЦелая)-ПозицияРазделителя-СтрДлина(Разделитель)+1);
	Иначе
		ПерваяЧасть 	= СтрокаЦелая;
		ВтораяЧасть		= "";
	КонецЕсли;
	
	Результат = новый Структура;
	Результат.Вставить("ПерваяЧасть", ПерваяЧасть);
	Результат.Вставить("ВтораяЧасть", ВтораяЧасть);
	
	Возврат Результат;
	
КонецФункции

Функция ПроверкаОбновленияДанныхМодуляОбменаСБитрикс24() Экспорт
	
	Возврат Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПроверкаОбновленияДанныхМодуляОбменаСБитрикс24();
	
КонецФункции

Функция ПолучитьКоличествоНастроекСинхронизации(ВРежимеРеальногоВремени = Ложь) Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВРежимеРеальногоВремени", ВРежимеРеальногоВремени);
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Б24_НастройкиСинхронизацииСБитрикс24.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Б24_НастройкиСинхронизацииСБитрикс24 КАК Б24_НастройкиСинхронизацииСБитрикс24
	|ГДЕ
	|	Б24_НастройкиСинхронизацииСБитрикс24.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ВРежимеРеальногоВремени = ИСТИНА
	|				ТОГДА Б24_НастройкиСинхронизацииСБитрикс24.СпособСинхронизацииДанных = ""ВРежимеРеальногоВремени""
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Количество; 
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкуСинхронизацииПоУмолчанию(ВРежимеРеальногоВремени = Ложь) Экспорт
	
	Результат = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВРежимеРеальногоВремени", ВРежимеРеальногоВремени);
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_НастройкиСинхронизацииСБитрикс24.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Б24_НастройкиСинхронизацииСБитрикс24 КАК Б24_НастройкиСинхронизацииСБитрикс24
	|ГДЕ
	|	Б24_НастройкиСинхронизацииСБитрикс24.ПометкаУдаления = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ВРежимеРеальногоВремени = ИСТИНА
	|				ТОГДА Б24_НастройкиСинхронизацииСБитрикс24.СпособСинхронизацииДанных = ""ВРежимеРеальногоВремени""
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка; 	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
