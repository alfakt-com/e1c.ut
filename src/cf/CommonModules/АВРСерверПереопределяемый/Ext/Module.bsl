
#Область Печать

// Заполняет список команд печати. Подключаемая команда.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭлектронныйАктВыполненныхРабот";
	КомандаПечати.Представление = НСтр("ru = 'Электронный акт выполненных работ'");
	//КомандаПечати.Обработчик    = "УправлениеПечатьюУПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы. Печать документа АВР.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура ПечатьАВР(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭлектронныйАктВыполненныхРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭлектронныйАктВыполненныхРабот",
			НСтр("ru = 'Электронный акт выполненных работ'"),
			Документы.ЭлектронныйАктВыполненныхРабот.ПечатьАВР(МассивОбъектов, ОбъектыПечати),
			,
			"Обработка.ОбменЭСФ.ПФ_MXL_АВР");
		КонецЕсли;
	
КонецПроцедуры

Функция МакетПечатнойФормы(ИмяМакета) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	Возврат Макет;
	
КонецФункции	

#КонецОбласти 

#Область ПроцедурыИФункцииФоновыхЗаданий

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	// Код вынесен в переопределяемый модуль, процедуры запуска фонового задания должна передавать КлючЗадания - ПараметрыВыполнения.УникальныйИдентификатор
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
	НаименованиеЗадания = ПараметрыВыполнения.НаименованиеФоновогоЗадания;
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ПараметрыЗадания.Добавить(Неопределено);
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.КлючФоновогоЗадания, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ПараметрыВыполнения.ОжидатьЗавершение);
	Исключение		
		// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

#Область ОбщиеФункцииПоЗаполнениюАктов

Функция СоздатьСписокИсходящихАВР(МассивДокументов) Экспорт
	
	СписокСозданныхЭАВР = Новый Массив;
	
	СтруктураДанных = Новый Структура;
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументов, "Валюта, Дата, ДатаПодписанияГЗ");
	СтруктураДанных.Вставить("ДанныеКурсаИОснования", РеквизитыДокументов);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(МассивДокументов[0]);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляЗаполненияЭАВР = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыАктВыполненныхРаботР1(Неопределено, МассивДокументов);
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанных.Вставить("ДанныеДляЗаполненияЭАВР", ДанныеДляЗаполненияЭАВР);
	
	Для Каждого ДокументОснование Из МассивДокументов Цикл
		
		Попытка
			
			ДанныеЗаполнения = Новый Структура("ДокументОснование, СтруктураДанных", ДокументОснование, СтруктураДанных);
			
			НовыйДокументЭАВР = Документы.ЭлектронныйАктВыполненныхРабот.СоздатьДокумент();
			НовыйДокументЭАВР.Заполнить(ДанныеЗаполнения);
			
			НовыйДокументЭАВР.Записать();
			СписокСозданныхЭАВР.Добавить(НовыйДокументЭАВР.Ссылка);
			
		Исключение
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании документа ЭАВР: %1.'"),
				ИнформацияОбОшибке().Описание);
				
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СписокСозданныхЭАВР;
	
КонецФункции

Процедура ЗаполнитьИсходящийАВР(Знач ДанныеЗаполнения, ОбъектАВР) Экспорт
	
	Если ТипЗнч(ОбъектАВР) <> Тип("ДокументОбъект.ЭлектронныйАктВыполненныхРабот") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = АВРСервер.ПолучитьСтруктуруДанныхЗаполнения();
	
	СобратьДанныеДляЗаполненияИсходящегоАВР(ДанныеЗаполнения, СтруктураЗаполнения);
	
	Если СтруктураЗаполнения.Реквизиты.Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Заполняем шапку документа
	ЗаполнитьЗначенияСвойств(ОбъектАВР, СтруктураЗаполнения.Реквизиты);
	//	
	ОбъектАВР.Номер = АВРСерверПереопределяемый.ПолучитьНомерНаПечатьЭАВР(СтруктураЗаполнения.Реквизиты.Номер);
	ОбъектАВР.ДокументОснование = СтруктураЗаполнения.Реквизиты.Ссылка;
	ОбъектАВР.Дата = ТекущаяДатаСеанса();
	ОбъектАВР.Направление = Перечисления.НаправленияЭСФ.Исходящий;
	//	
	СтруктураДанныхЗаполнения = СтруктураЗаполнения.Реквизиты;
	//	
	Если НЕ АВРСерверПереопределяемый.ПроверитьРегистрациюДоговора(СтруктураДанныхЗаполнения) Тогда
		ОбъектАВР.БезДоговора = Истина;
	КонецЕсли;
	
	//Заполняем табличную часть "Поставщики"
	Если ОбъектАВР.Поставщики.Количество() = 0 Тогда
		СтрокаПоставщики = ОбъектАВР.Поставщики.Добавить();
	Иначе
		СтрокаПоставщики = ОбъектАВР.Поставщики[0];
	КонецЕсли;
	
	СтруктураДанных = СтруктураЗаполнения.СтруктураДанныхПоставщики;
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПоставщики, СтруктураДанных, "Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
	КонецЕсли;
	
	//Заполняем табличную часть "Получатели"
	Если ОбъектАВР.Получатели.Количество() = 0 Тогда
		СтрокаПолучатели = ОбъектАВР.Получатели.Добавить();
	Иначе
		СтрокаПолучатели = ОбъектАВР.Получатели[0];
	КонецЕсли;
	СтруктураДанных = СтруктураЗаполнения.СтруктураДанныхПолучатели;
	Если НЕ СтруктураДанных = Неопределено Тогда 
		ЗаполнитьЗначенияСвойств(СтрокаПолучатели, СтруктураДанных, "Получатель, ПолучательНаименование, ПолучательИдентификатор, Адрес, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
		СтрокаПолучатели.Нерезидент = АВРСерверПереопределяемый.Нерезидент(СтрокаПолучатели.Получатель);
	КонецЕсли;
	
	//Заполняем табличную часть "Услуги"
	Для Каждого СтрокаТЧ Из СтруктураЗаполнения.Услуги Цикл
		
		НоваяСтрокаТЧ = ОбъектАВР.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
		
	КонецЦикла;
	
	//Заполняем итоговые суммы
	ОбъектАВР.ИтогоРазмерОборота = ОбъектАВР.Услуги.Итог("РазмерОборота");
	ОбъектАВР.ИтогоСтоимостьБезУчетаКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьБезУчетаКосвенныхНалогов");
	ОбъектАВР.ИтогоСуммаНДС = ОбъектАВР.Услуги.Итог("СуммаНДС");
	ОбъектАВР.ИтогоСтоимостьСУчетомКосвенныхНалогов = ОбъектАВР.Услуги.Итог("СтоимостьСУчетомКосвенныхНалогов");
	
	ОбъектАВР.Состояние = АВРСервер.СостояниеАВР(ОбъектАВР);
	
	Если НЕ ЗначениеЗаполнено(ОбъектАВР.Автор) Тогда
		ОбъектАВР.Автор = ЭСФКлиентСерверПереопределяемый.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура СобратьДанныеДляЗаполненияИсходящегоАВР(ДанныеЗаполнения, СтруктураЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			СсылкаНаДокументИБ = ДанныеЗаполнения.ДокументОснование;
			РеквизитыДокумента = ДанныеЗаполнения.СтруктураДанных.ДанныеКурсаИОснования.Получить(СсылкаНаДокументИБ);
			КурсВалюты = 1;
			Если РеквизитыДокумента.Валюта <> ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДокумента.Валюта, РеквизитыДокумента.Дата);
				КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
			КонецЕсли;
			
			СтруктураДанных = ДанныеЗаполнения.СтруктураДанных.ДанныеДляЗаполненияЭАВР;
		
	Иначе
			СсылкаНаДокументИБ = ДанныеЗаполнения;
			РеквизитыДокумента = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(СсылкаНаДокументИБ, "Валюта, Дата, ДатаПодписанияГЗ");
		//	ПараметрыПечати = Новый Структура("ПечатьВВалюте, ДанныеДоговораГЗ, ПредставлениеНаборов", РеквизитыДокумента.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить(), Истина, Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие);
			КурсВалюты = 1;
			Если РеквизитыДокумента.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДокумента.Валюта, РеквизитыДокумента.Дата);
				КурсВалюты = СтруктураКурса.Курс * СтруктураКурса.Кратность;
			КонецЕсли;
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(СсылкаНаДокументИБ);
			
			УстановитьПривилегированныйРежим(Истина);
			СтруктураДанных = Документы[СсылкаНаДокументИБ.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктВыполненныхРаботР1(
				Неопределено,
				МассивОбъектов);
			УстановитьПривилегированныйРежим(Ложь);
			
	КонецЕсли;
	
	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	Если НЕ ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.Реквизиты, ДанныеШапки);
	
	Поставщик = СтруктураЗаполнения.Реквизиты.Поставщик;
	
	Если ЗначениеЗаполнено(Поставщик) Тогда
		СтруктураДанныхПоставщики = АВРСерверПереопределяемый.ПолучитьРеквизитыОрганизации(Поставщик, "Поставщик", СтруктураЗаполнения.Реквизиты);
	Иначе
		СтруктураДанныхПоставщики = Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.СтруктураДанныхПоставщики, СтруктураДанныхПоставщики);
	
	Получатель = СтруктураЗаполнения.Реквизиты.Контрагент;
	Если ЗначениеЗаполнено(Получатель) Тогда
		СтруктураДанныхПолучатели = АВРСерверПереопределяемый.ПолучитьРеквизитыКонтрагента(СтруктураЗаполнения.Реквизиты.Контрагент, "Получатель", СтруктураЗаполнения.Реквизиты);
	Иначе
		СтруктураДанныхПолучатели = Неопределено;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения.СтруктураДанныхПолучатели, СтруктураДанныхПолучатели);
	
	
	ВыборкаУслугиИтоги = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаУслугиИтоги.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаДокументИБ)) Тогда
		ВыборкаУслуги = ВыборкаУслугиИтоги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			СтрокаУслуги = СтруктураЗаполнения.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуги, ВыборкаУслуги);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%ДокументОснованиеДата" Тогда
			Значение = "Дата" ;			
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиЕдиницИзмеренияАВР(МассивАВР) Экспорт
	
	Если МассивАВР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокАВР = Новый Массив;
	Для Каждого Документ Из МассивАВР Цикл
		МассивСсылокАВР.Добавить(Документ.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод КАК Код,
		|	МАКСИМУМ(КлассификаторЕдиницИзмерения.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот.Услуги КАК ЭлектронныйАктВыполненныхРаботУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК КлассификаторЕдиницИзмерения
		|		ПО ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод = КлассификаторЕдиницИзмерения.КодЭСФ
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка В(&МассивАВР)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод";
		
	Запрос.УстановитьПараметр("МассивАВР", МассивСсылокАВР);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеЕдиницИзмерения.Вставить(ВыборкаДетальныеЗаписи.Код, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Для Каждого Документ из МассивАВР Цикл
		Для Каждого Строка Из Документ.Услуги Цикл
			Строка.ЕдиницаИзмерения = СоответствиеЕдиницИзмерения[Строка.ЕдиницаИзмеренияКод];	
			Строка.ЕдиницаИзмеренияНаименование = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Наименование")
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагентаАВР(Знач ОбъектАВР, Знач ПоставщикиСтрока) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ТекстКомментария = АВРКлиентСервер.ТекстКомментарияСозданПоДаннымАВР(ОбъектАВР.Ссылка);
		ОбъектКонтрагент = ПоставщикиСтрока.Поставщик.ПолучитьОбъект();
		
		//Проверяем заполнение поля Наименование: если не заполнено, записать новые данные поставщика не можем.
		Если Не ЗначениеЗаполнено(ПоставщикиСтрока.ПоставщикНаименование) Тогда
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Невозможно заполнить реквизиты по данным АВР, так как не заполнено поле ""Наименование исполнителя (поставщика)"".'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить реквизиты контрагента.
		ОбъектКонтрагент.ИНН = ПоставщикиСтрока.ПоставщикИдентификатор;
		ОбъектКонтрагент.Наименование = ПоставщикиСтрока.ПоставщикНаименование;	
		ОбъектКонтрагент.НаименованиеПолное = ПоставщикиСтрока.ПоставщикНаименование;
		Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ОбъектКонтрагент.СерияСвидетельстваПоНДС = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
			ОбъектКонтрагент.НомерСвидетельстваПоНДС = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
		КонецЕсли;
		ОбъектКонтрагент.КБЕ = ПоставщикиСтрока.КБе;
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать адрес контрагента.
		СтрокаКонтактнаяИнформация = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
		//Запись.Объект = ОбъектКонтрагент.Ссылка;
		СтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		СтрокаКонтактнаяИнформация.Представление = ПоставщикиСтрока.Адрес;
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать банковский счет контрагента.
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ИИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.БИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.НаименованиеБанка) Тогда
			
			/////////////////////////////////////////////////////////////////////////////
			// Найти банк по БИК, если его нет, то создать.
			СсылкаБанк = НайтиБанкПоБИК(ПоставщикиСтрока.БИК);
			Если НЕ ЗначениеЗаполнено(СсылкаБанк) Тогда
				ОбъектБанк = Справочники.КлассификаторБанков.СоздатьЭлемент();
				ОбъектБанк.Наименование = ПоставщикиСтрока.НаименованиеБанка;
				ОбъектБанк.Код = ПоставщикиСтрока.БИК;
				ОбъектБанк.Записать();
				СсылкаБанк = ОбъектБанк.Ссылка;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого банковского счета контрагента нет.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Контрагент
			|	И БанковскиеСчета.Банк = &Банк
			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
			|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Банк", СсылкаБанк);
			Запрос.УстановитьПараметр("Валюта", ОбъектАВР.Валюта);
			Запрос.УстановитьПараметр("Контрагент", ОбъектКонтрагент.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и записать банковский счет контрагента.
			Если Результат.Пустой() Тогда
				
				Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
					ОбъектСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
					ОбъектСчет.ТипСчета = Перечисления.ТипыБанковскихСчетов.Расчетный;
				Иначе
					ОбъектСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
				КонецЕсли;
				
				НаименованиеСчета = НСтр("ru = '[НомерСчета] в [Банк]'");
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[НомерСчета]", ПоставщикиСтрока.ИИК);
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[Банк]", СсылкаБанк);
				ОбъектСчет.Наименование = НаименованиеСчета;
				ОбъектСчет.Владелец = ОбъектКонтрагент.Ссылка;
				ОбъектСчет.ВалютаДенежныхСредств = ОбъектАВР.Валюта;
				ОбъектСчет.НомерСчета = ПоставщикиСтрока.ИИК;
				ОбъектСчет.Банк = СсылкаБанк; 
				ОбъектСчет.БИКБанка = ПоставщикиСтрока.БИК; 
				
				ОбъектСчет.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		// С договорами работаем, только если выбран элемент справочника Контрагенты.
		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого договора контрагента нет.
			МассивДоговоров = НайтиДоговорыПоставкиПоДаннымАВР(ОбъектАВР, ПоставщикиСтрока, "Поставщики");
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать, заполнить и записать договор контрагента.
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				ОбъектДоговор.Наименование = АВРКлиентСервер.НаименованиеДоговора(ОбъектАВР);
				ОбъектДоговор.Контрагент = ОбъектКонтрагент.Ссылка;
				ОбъектДоговор.ВалютаВзаиморасчетов = ОбъектАВР.Валюта;
				ОбъектДоговор.Комментарий = ТекстКомментария;
				ОбъектДоговор.Организация = ОбъектАВР.Организация;
				ОбъектДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
				ОбъектДоговор.Номер = ОбъектАВР.НомерДоговора;
				ОбъектДоговор.Дата = ОбъектАВР.ДатаДоговора;
				
				ОбъектДоговор.Записать();
				
			КонецЕсли;
		КонецЕсли;
		/////////////////////////////////////////////////////////////////////////////
		// Повторно записать контрагента и зафиксировать транзакцию.
		ОбъектКонтрагент.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
		
КонецПроцедуры

Функция ПроверитьРегистрациюДоговора(ДанныеЗаполнения) Экспорт
	
	ДоговорЗарегистрирован = Истина;
	
	Если ДанныеЗаполнения.Договор.Дата = Дата('00010101') ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Договор.Номер) Тогда
		ДоговорЗарегистрирован = Ложь;
	КонецЕсли;
	
	Возврат ДоговорЗарегистрирован;
	
КонецФункции

Функция Нерезидент(ПоставщикПолучатель) Экспорт
	
	СтранаРезидентства = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ПоставщикПолучатель,"СтранаРегистрации");
	Если СтранаРезидентства = Справочники.СтраныМира.ПустаяСсылка()
		ИЛИ СтранаРезидентства = Справочники.СтраныМира.Казахстан Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");	
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК ОбъектДляПоискаАдреса,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КБЕ КАК КБЕ,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса КАК Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.ИНН КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.Ссылка КАК Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ КАК КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса = КонтактнаяИнформация.Ссылка
	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)))
	|			И (КонтактнаяИнформация.ВидДляСписка В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)))";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
	КонецЕсли;
	
	Если РеквизитыДокументаОснования <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РеквизитыДокументаОснования.БанковскийСчетОрганизации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
		|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
		|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
		|	КОНЕЦ КАК НаименованиеБанка,
		|	БанковскиеСчетаОрганизаций.НомерСчета КАК ИИК,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
		|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
		|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
		|	КОНЕЦ КАК БИК
        |ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетОрганизации
		|";
		
		РезультатЗапроса		= Запрос.Выполнить();
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК Наименование,
	|	"""" КАК НомерСвидетельстваПоНДС,
	|	"""" КАК СерияСвидетельстваПоНДС,
	|	Контрагенты.Ссылка,
	|	Контрагенты.ИНН,
	|	Контрагенты.КБЕ,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ФизическоеЛицо)
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ПустаяСсылка)
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.ИНН КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), 
	|										  ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.Контрагент = КонтактнаяИнформация.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
	КонецЕсли;
	
	Если РеквизитыДокументаОснования <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", РеквизитыДокументаОснования.БанковскийСчетКонтрагента);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК Счет,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка
		|			ТОГДА БанковскиеСчетаКонтрагентов.НаименованиеБанка
		|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Наименование
		|	КОНЕЦ КАК НаименованиеБанка,
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК ИИК,
		|	ВЫБОР
		|		КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка
		|			ТОГДА БанковскиеСчетаКонтрагентов.БИКБанка
		|		ИНАЧЕ БанковскиеСчетаКонтрагентов.Банк.Код
		|	КОНЕЦ КАК БИК
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Ссылка = &БанковскийСчетКонтрагента
		|";
		
		РезультатЗапроса		= Запрос.Выполнить();
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
		КонецЕсли;
	КонецЕсли;

	
	Возврат СтруктураДанных;
	
КонецФункции

Функция НайтиБанкПоБИК(БИК) Экспорт
	
	СсылкаБанк = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.КлассификаторБанков КАК Банки
	|ГДЕ
	|	Банки.Код = &БИК
	|	И Банки.ПометкаУдаления = ЛОЖЬ";
	
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаБанк = Выборка.Ссылка;
	Иначе
		СсылкаБанк = Неопределено;
	КонецЕсли;
	
	Возврат СсылкаБанк;
	
КонецФункции

Функция НайтиДоговорыПоставкиПоДаннымАВР(Знач Объект, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	|	И ДоговорыКонтрагентов.Дата = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%УсловиеДоговорыКонтрагентовУчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НомерДоговора", Объект.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", Объект.ДатаДоговора);
	
	Если ИмяТаблицыКонтрагента = "Поставщики" Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Поставщик);
	Иначе // ИмяТаблицыКонтрагента = "Получатели"
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Получатель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДоговоров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ПолучитьКурсВалюты(Валюта, Дата) Экспорт
	
	КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта,Дата);
	
	КурсВалюты = КурсНаДату.Курс;
	Если КурсВалюты <> 0 Тогда
		Возврат КурсВалюты;
	Иначе
		Возврат 1 ;
	КонецЕсли;
	
КонецФункции

Функция ДоступнаРольРедактированияАВР() Экспорт
	
	Возврат РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ДобавлениеИзменениеЭлектронныхАВР");
	
КонецФункции

Функция ПолучитьНомерНаПечатьЭАВР(НомерУчетногоДокумента) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерУчетногоДокумента, Ложь, Истина);
	
КонецФункции

#КонецОбласти

#Область ВводДокументовОснованияПоАВР

//Запоняет документ - основание документа АВР
Функция ЗаполнитьДокументОснованиеПоДокументуАВР(ОбъектАВР, ИмяДокумента) Экспорт
		
	ДанныеАВР = АВРСервер.ПодготовитьДанныеДляЗаполненияПервичныхДокументовИзАВР(ОбъектАВР);
	
	НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Реквизиты"        , ДанныеАВР.ТаблицаРеквизиты);
	Запрос.УстановитьПараметр("ТаблицаУслуги"    , ДанныеАВР.ТаблицаУслуги);
	Запрос.УстановитьПараметр("ТаблицаПоставщики", ДанныеАВР.ТаблицаПоставщики);

	Если ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
		Запрос.Текст = ДанныеДляЗаполненияПриобретениеТоваровУслуг();
		ТабличнаяЧастьДокумента = НовыйДокумент.Товары;
	ИначеЕсли ИмяДокумента = "ПриобретениеУслугПрочихАктивов" Тогда
		Запрос.Текст = ДанныеДляЗаполненияПриобретениеТоваровУслуг();
		ТабличнаяЧастьДокумента = НовыйДокумент.Расходы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Результат[Результат.Количество()-3].Выгрузить()[0]);
	ТаблицаУслуги = Результат[Результат.Количество()-2].Выгрузить();
	Для Каждого Услуга Из ТаблицаУслуги Цикл
		СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Услуга);
		Если Услуга.КоличествоУпаковок = 0 Тогда
			СтрокаТабличнойЧасти.Цена = Услуга.Цена;
		Иначе
			СтрокаТабличнойЧасти.Цена = Услуга.Сумма / Услуга.КоличествоУпаковок;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыНовогоДокумента = Новый Структура;
	РеквизитыНовогоДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	РеквизитыНовогоДокумента.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	РеквизитыНовогоДокумента.Вставить("ЦенаВключаетНДС", Ложь);
	РеквизитыНовогоДокумента.Вставить("Кратность", 1);
	РеквизитыНовогоДокумента.Вставить("Автор", Пользователи.ТекущийПользователь());
	РеквизитыНовогоДокумента.Вставить("Менеджер", Пользователи.ТекущийПользователь());
	РеквизитыНовогоДокумента.Вставить("СпособДоставки", Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада);
	
	Если ЗначениеЗаполнено(НовыйДокумент.Договор) Тогда
		РеквизитыНовогоДокумента.Вставить("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор, "Контрагент"));
		РеквизитыНовогоДокумента.Вставить("ПорядокОплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйДокумент.Договор, "ПорядокОплаты"));
		РеквизитыНовогоДокумента.Вставить("ВариантПриемкиТоваров", ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Неопределено, НовыйДокумент.Договор));
	Иначе
		ТаблицаПоставщики = Результат[Результат.Количество()-1].Выгрузить();
		Если ТаблицаПоставщики.Количество() > 0 Тогда
			РеквизитыНовогоДокумента.Вставить("Контрагент", ТаблицаПоставщики[0].Контрагент);
		КонецЕсли;
		РеквизитыНовогоДокумента.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	КонецЕсли;
	
	Если ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
		РеквизитыНовогоДокумента.Вставить("ЗакупкаПодДеятельность", ЗначениеНастроекПовтИсп.ЗакупкаПодДеятельность(
													НовыйДокумент.Организация,
													НовыйДокумент.Склад,
													НовыйДокумент.Договор,
													НовыйДокумент.НаправлениеДеятельности,
													НовыйДокумент.Дата,
													НовыйДокумент.ХозяйственнаяОперация));
	ИначеЕсли ИмяДокумента = "ПриобретениеУслугПрочихАктивов" Тогда
		РеквизитыНовогоДокумента.Вставить("ЗакупкаПодДеятельность", ЗначениеНастроекПовтИсп.ЗакупкаПодДеятельность(
													НовыйДокумент.Организация,
													,
													НовыйДокумент.Договор,
													НовыйДокумент.НаправлениеДеятельности,
													НовыйДокумент.Дата,
													НовыйДокумент.ХозяйственнаяОперация));
	КонецЕсли;
	
	РеквизитыНовогоДокумента.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(НовыйДокумент));
	
	ЗаполнитьЗначенияСвойств(НовыйДокумент, РеквизитыНовогоДокумента);
	
	Если ЗначениеЗаполнено(НовыйДокумент.Контрагент) Тогда
		НовыйДокумент.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(НовыйДокумент.Контрагент);
	КонецЕсли;
	
	НовыйДокумент.Соглашение = СамообслуживаниеСервер.ПолучитьСоглашениеПартнераПоУмолчанию(НовыйДокумент.Партнер, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	
	НовыйДокумент.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(НовыйДокумент.Контрагент);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НовыйДокумент.НаправлениеДеятельности, НовыйДокумент.Соглашение, НовыйДокумент.Договор);
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(НовыйДокумент.Организация, НовыйДокумент.БанковскийСчетОрганизации, , НовыйДокумент.НаправлениеДеятельности);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация			= НовыйДокумент.Организация;
	СтруктураПараметров.БанковскийСчет			= НовыйДокумент.БанковскийСчетОрганизации;
	СтруктураПараметров.НаправлениеДеятельности	= НовыйДокумент.НаправлениеДеятельности;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(НовыйДокумент);
	
	Если ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
		НовыйДокумент.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(, НовыйДокумент.Договор);
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьДокумента Цикл
		
		ЗаполнитьДанныеСтроки(СтрокаТабличнойЧасти, НовыйДокумент, ИмяДокумента)
		
	КонецЦикла;
	
	
	ЗаписатьДокумент(НовыйДокумент);
	
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Функция ДанныеДляЗаполненияПриобретениеТоваровУслуг()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.Дата,
	|	Реквизиты.Валюта КАК ВалютаДокумента,
	|	Реквизиты.КурсВалюты КАК КурсВзаиморасчетов,
	|	Реквизиты.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	&Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование,
	|	ТаблицаУслуги.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Поставщик КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаПоставщики
	|ИЗ
	|	&ТаблицаПоставщики КАК ТаблицаПоставщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.Дата,
	|	Реквизиты.Дата КАК ДатаПлатежа,
	|	Реквизиты.ДоговорКонтрагента КАК Договор,
	|	Реквизиты.ВалютаДокумента КАК Валюта,
	|	Реквизиты.ВалютаДокумента КАК ВалютаВзаиморасчетов,
	|	Реквизиты.КурсВзаиморасчетов КАК Курс
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование КАК Содержание,
	|	ТаблицаУслуги.ЕдиницаИзмерения КАК Упаковка,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.Количество КАК КоличествоУпаковок,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов КАК Сумма,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Контрагент
	|ИЗ
	|	ТаблицаПоставщики КАК ТаблицаПоставщики";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеСтроки(СтрокаТабличнойЧасти, НовыйДокумент, ИмяДокумента)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	Если ИмяДокумента = "ПриобретениеТоваровУслуг" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры 

Процедура ЗаписатьДокумент(ДокументОбъект)
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось создать документ!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения)
	КонецПопытки;
КонецПроцедуры

#КонецОбласти 

#Область РаботаСФормами

// Обработчик события ПриСозданииНаСервере в форме списка документа АВР.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа АВР.
//
Процедура АВРФормаСпискаИВыбораПриСозданииНаСервере(Форма) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

Функция ПараметрыВыбораНоменклатурыАВРНаСервере() Экспорт
	
	Отбор = Новый Структура;
	
	МассивТипыНоменклатуры = Новый Массив();
	МассивТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	МассивТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	Отбор.Вставить("ТипНоменклатуры", МассивТипыНоменклатуры);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов",ВыборГруппИЭлементов);
	
	Возврат ПараметрыФормы;

КонецФункции

Функция ПолучитьИсключаемыеТипыОснованийЭАВР() Экспорт
	СписокИсключений = Новый СписокЗначений;
	СписокИсключений.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	Возврат СписокИсключений;
КонецФункции

#КонецОбласти

#Область ЗаполнениеПолучаемыхАВР

Функция ОпределитьНаправлениеАВР(АВР, СтруктурнаяЕдиница) Экспорт
	
	БинСтруктурнойЕдиницы = СтруктурнаяЕдиница.ИНН;
	
	ПрисутствуетВПоставщиках = ?(НЕ АВР.Поставщики.Найти(БинСтруктурнойЕдиницы, "ПоставщикИдентификатор") = Неопределено, Истина, Ложь);
	ПрисутствуетВПолучателях = ?(НЕ АВР.Получатели.Найти(БинСтруктурнойЕдиницы, "ПолучательИдентификатор") = Неопределено, Истина, Ложь);
	
	Если ПрисутствуетВПоставщиках Тогда
		Возврат Перечисления.НаправленияЭСФ.Исходящий;
	ИначеЕсли ПрисутствуетВПолучателях Тогда
		Возврат Перечисления.НаправленияЭСФ.Входящий;
	Иначе
		Возврат Перечисления.НаправленияЭСФ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФорм

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
		// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
 	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
 	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область РаботаАВРИзПервчиныхДокументов
Процедура НайтиАВРИЗаполнитьСсылку(Форма, Объект) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Форма.СписокЭлектронныхАВР.ЗагрузитьЗначения(ПолучитьЭлектронныйАВР(Объект.Ссылка));
	
	Если Форма.СписокЭлектронныхАВР.Количество() = 0 Тогда
		Элементы.СсылкаНаЭлектронныеАВР.Видимость = Ложь;
		Возврат;
	ИначеЕсли Форма.СписокЭлектронныхАВР.Количество() > 1 Тогда
		НадписьКоличествоЭлектронныхАВР = НСтр("ru='Всего АВР(электронных): (%КоличествоДокументов%)'");
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = СтрЗаменить(НадписьКоличествоЭлектронныхАВР, "%КоличествоДокументов%", Форма.СписокЭлектронныхАВР.Количество());
	Иначе
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = Форма.СписокЭлектронныхАВР[0].Значение;
	КонецЕсли;
	
	Элементы.СсылкаНаЭлектронныеАВР.Видимость = Истина;
	
КонецПроцедуры

Функция ПолучитьЭлектронныйАВР(СсылкаДокументОснование) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаДокументОснование) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныйАктВыполненныхРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРабот.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронныйАктВыполненныхРабот.Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", СсылкаДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПроверитьНаличиеРанееВведеныхЭАВР(Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_документыОснования
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Основание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_документыОснования.Документ КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА ЭлектронныйАктВыполненныхРабот.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЭАВР
	|ПОМЕСТИТЬ вт_КоличествоЭАВР
	|ИЗ
	|	вт_документыОснования КАК вт_документыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО вт_документыОснования.Документ = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_документыОснования.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.Документ КАК Документ
	|ИЗ
	|	вт_документыОснования КАК ДокументыОснования
	|ГДЕ
	|	%УсловиеИсключенияОснования%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыБезЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыБезЭАВР
	|ГДЕ
	|	ДокументыБезЭАВР.КоличествоЭАВР = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыБезЭАВР.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыСЭАВР
	|ГДЕ
	|	ДокументыСЭАВР.КоличествоЭАВР <> 0";
	
	Если ТипЗнч(Основание) = Тип("Массив") Тогда
		ДокументОснования = Основание[0];
	Иначе
		ДокументОснования = Основание;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АктВыполненныхРабот", "Документ." + ДокументОснования.Метаданные().Имя);
	Если ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИсключенияОснования%", 
		"ДокументыОснования.Документ.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)
		|	ИЛИ ДокументыОснования.Документ.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)");
	ИначеЕсли ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.АктВыполненныхРабот")
		Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИсключенияОснования%", 
		"ДокументыОснования.Документ.СпособВыпискиАктовВыполненныхРабот <> ЗНАЧЕНИЕ(Перечисление.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеИсключенияОснования%", "Ложь");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивДокументовНедопустимыхОснований = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовБезЭАВР = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовСЭАВР = РезультатЗапроса[4].Выгрузить().ВыгрузитьКолонку("Документ");
	
	МассивыОбрабатываемыхДокументов = Новый Структура;
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовНедопустимыхОснований"	, МассивДокументовНедопустимыхОснований);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовБезЭАВР"					, МассивДокументовБезЭАВР);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовСЭАВР"					, МассивДокументовСЭАВР);
	
	Возврат МассивыОбрабатываемыхДокументов;
	
КонецФункции

Функция ПроверитьДокументОснованияЭАВР(ДокументОснования) Экспорт
	
	Если (ТипЗнч(ДокументОснования) = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") 
			ИЛИ ТипЗнч(ДокументОснования) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"))
			И ДокументОснования.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ввод ЭАВР невозможен для данного вида операции документа.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьСпособВыпискиОснованияЭАВР(ДокументОснования) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Способ выписки документа установлен ""%1"", ввод ЭАВР невозможен.'"),
										ДокументОснования.СпособВыпискиАктовВыполненныхРабот));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ТребуетсяОформлениеЭлектронныхДокументов

Процедура ПриЗаписиОснованийЭАВР(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьТипИсточникаДляОформленияЭАВР(Источник) Тогда
		
		Если ПолучитьЭлектронныйАВР(Источник.Ссылка).Количество() = 0 Тогда
			
			Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
			Набор.Отбор.Основание.Установить(Источник.Ссылка);
			Набор.Прочитать();
			Набор.Очистить();
			
			Если ПроверитьОснованиеДляОформленияЭАВР(Источник)
				И Источник.Проведен Тогда
					НоваяЗапись = Набор.Добавить();
					НоваяЗапись.Организация = Источник.Организация;
					НоваяЗапись.Контрагент = Источник.Контрагент;
					НоваяЗапись.Основание = Источник.Ссылка;
			КонецЕсли;
			
			Набор.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьТипИсточникаДляОформленияЭАВР(Источник) Экспорт
	
	Возврат (ТипЗнч(Источник) = Тип("ДокументОбъект.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
КонецФункции

Функция ПроверитьОснованиеДляОформленияЭАВР(Основание) Экспорт
	
	Если ПроверитьСпособВыпискиОснованияЭАВР(Основание) Тогда
		Если (ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"))
			И Основание.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьСпособВыпискиОснованияЭАВР(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.АктВыполненныхРабот") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот")
		 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияУслугПрочихАктивов") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Возврат Основание.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Функция ТекстЗапросаДокументовКОформлениюЭАВР() Экспорт
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТребуетсяОформлениеЭАВР.Организация КАК Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент КАК Контрагент,
	|	ДокументОснования.Ссылка КАК Ссылка,
	|	ДокументОснования.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснования.Дата, ДЕНЬ) КАК ДатаОформления,
	|	ДокументОснования.Валюта КАК Валюта,
	|	ДокументОснования.СуммаДокумента КАК Сумма,
	|	ТИПЗНАЧЕНИЯ(ДокументОснования.Ссылка) КАК ВидОснования,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснования.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ) КАК Срок,
	|	НАЧАЛОПЕРИОДА(ДокументОснования.Дата, МЕСЯЦ) КАК МесяцОформления
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК ДокументОснования
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснования.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент,
	|	ДокументОснования.Ссылка,
	|	ДокументОснования.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснования.Дата, ДЕНЬ),
	|	ДокументОснования.Валюта,
	|	ДокументОснования.СуммаДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументОснования.Ссылка),
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснования.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ДокументОснования.Дата, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК ДокументОснования
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснования.Ссылка";
	//ОБЪЕДИНИТЬ ВСЕ
	
КонецФункции

#КонецОбласти


#Область РаботаСПервичнымиДокументами

Процедура ОбновлениеДанныхПервичныхДокументов(ОбъектАВР) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектАВР.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОснования = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектАВР.ДокументОснование, "ДатаПодписанияГЗ,Проведен");
	
	Если РеквизитыОснования.ДатаПодписанияГЗ <> ОбъектАВР.ДатаПринятияСтатуса Тогда
		
		//Если РеквизитыОснования.Проведен Тогда
		//	
		//	ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" поле ""Дата подписи"" отличается от документа ""[АВР]"".'");
		//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
		//	ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
		//	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		//	
		//	
		//Иначе
			
			Попытка
				
				ДокументОбъект = ОбъектАВР.ДокументОснование.ПолучитьОбъект();
				
				ДокументОбъект.ДатаПодписанияГЗ = ОбъектАВР.ДатаПринятияСтатуса;
				
				Если РеквизитыОснования.Проведен Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение)
				иначе
					ДокументОбъект.Записать()
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыОснования.ДатаПодписанияГЗ) Тогда
					ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" скорректировано поле ""Дата подписи"" по документу ""[АВР]"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" заполнено поле ""Дата подписи"" по документу ""[АВР]"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
				АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДатыПервичныхДокументовПриОтправкеАВР(МассивОснований) Экспорт
	
	Для Каждого Основание Из МассивОснований Цикл
		
			ДокументОснование = Основание.ПолучитьОбъект();
			ДокументОснование.Дата = ТекущаяДата();
			ДокументОснование.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция МожноИзменитьДатуСвязанногоДокументаАВР(Основание) Экспорт
	
	Возврат ?(Основание.Проведен, Ложь, Истина);

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления = Ложь) Экспорт
	

	
КонецПроцедуры

#КонецОбласти
