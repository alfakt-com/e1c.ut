
Процедура ЗарегистрироватьИзмененияПередЗаписьюРегистраСведений(Источник, Отказ, Замещение) Экспорт
	ЗарегистрироватьИзменения(Источник, Замещение);
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПриЗаписиСправочника(Источник, Отказ, Замещение) Экспорт
	ЗарегистрироватьИзменения(Источник);
КонецПроцедуры




// Процедура - Добавляет элемент во времнную таблицу, чтобы его в фоне проверить на возможность регистрации и отправки в Битрикс24
//
// Параметры:
//  Объект		 - 	 Проверяемый элемент 
//  ТипОбъекта	 - 	 Предопределенный тип элемента Битрикс24 
//
Процедура ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект = Неопределено, ТипОбъекта = Неопределено) Экспорт
	
	Пропустить = Ложь;
	
	Если Объект = Неопределено тогда
		Пропустить = Истина;
	Иначе
		
		Если ТипОбъекта = "Заказы" тогда			
			
		ИначеЕсли ТипОбъекта = "Отгрузки" тогда			
			
			Если НЕ ЗначениеЗаполнено(Объект.ЗаказКлиента) тогда
				Пропустить = Истина;
			КонецЕсли;		
			
		ИначеЕсли ТипОбъекта = "Оплаты" тогда			
			
			Если Объект.РасшифровкаПлатежа.Количество() = 0 тогда
				Пропустить = Истина;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 тогда
				Пропустить = Истина;
			Иначе
				Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0]) тогда
					Пропустить = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = "ДополнительныеРеквизитыИСведения" тогда			
			
			Если Объект.ЭтоГруппа тогда
				Пропустить = Истина;
			КонецЕсли;
			
		//	Если НЕ ЗначениеЗаполнено(Объект.НаборСвойств) тогда
		//		Пропустить = Истина;
		//	КонецЕсли;
		//	
		//	Если НЕ Пропустить тогда
		//	
		//		Если НЕ (Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура
		//			ИЛИ Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры
		//			ИЛИ (Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента  И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации,"ВыгружатьПользовательскиеПоляСделок") = Истина)
		//			ИЛИ (Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту  И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСчетов(НастройкаСинхронизации,"ВыгружатьПользовательскиеПоляСчетов") = Истина)
		//			ИЛИ ((Объект.НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры) ИЛИ Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры) И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииКонтрагентов(НастройкаСинхронизации,"ВыгружатьПользовательскиеПоляКомпанийИКонтактов") = Истина)) тогда 
		//			
		//			Если НЕ Объект.НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура) И НЕ  Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура тогда
		//				Если НЕ Объект.НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры) И НЕ  Объект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры тогда
		//					Пропустить = Истина;
		//				КонецЕсли;
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		КонецЕсли;  
	КонецЕсли;  
	
	
	Если НЕ Пропустить тогда 
		
		НоваяЗапись = РегистрыСведений.Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.СоздатьМенеджерЗаписи();
		
		НоваяЗапись.НастройкаСинхронизации 	= НастройкаСинхронизации; 
		НоваяЗапись.Объект 					= Объект; 
		НоваяЗапись.ТипОбъекта 				= ТипОбъекта; 
		НоваяЗапись.Записать();
	
		НаименованиеФоновогоЗадания = Б24_СинхронизацияВызовСервера.ПолучитьНазваниеФоновогоЗаданияВыгрузкиВРежимеРеальногоВремени();
		
		Если Б24_СинхронизацияВызовСервера.СейчасВыполняетсяЗадание(НаименованиеФоновогоЗадания) тогда
			Возврат;			
		Конецесли;
		
		УникальныйИдентификатор 	= новый УникальныйИдентификатор;
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		
		ПараметрыВыгрузки = Новый Структура;
		
		ДлительныеОперации.ВыполнитьВФоне("Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ПроверитьВозможностьРегистрацииЭлементаДляВыгрузкиВФоне", ПараметрыВыгрузки, ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗарегистрироватьИзменения(Источник, Замещение = Ложь) Экспорт
	
	ТипОбъекта 	= ТипЗнч(Источник);
	
#Область ДобавлениеИнформацииДляИсклюенияРегистрации
	ЗагрузкаСБитрикс24 = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ЗагрузкаСБитрикс24", ЗагрузкаСБитрикс24);
	
	Если ЗагрузкаСБитрикс24 = Истина ИЛИ ПараметрыСеанса.ВыполняетсяОбновлениеИБ тогда
		Возврат;
	КонецЕсли;
#КонецОбласти	
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	МассивВыгружаемыхВРежимеРеальногоВремени = Б24_СинхронизацияПовтИсп.ПолучитьМассивНастроекОВыгружаемыхДанных(Истина);
	
	Для каждого ИнформацияОНастройкеСинхронизации ИЗ МассивВыгружаемыхВРежимеРеальногоВремени Цикл
		
		НастройкаСинхронизации = ИнформацияОНастройкеСинхронизации.НастройкаСинхронизации;
		
		Если ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.Партнеры") тогда
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда             
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "Партнеры");
			
		ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.Контрагенты") тогда
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда             //проверяется и выгрузка и синхронизация
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "Контрагенты");
			
		ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.Организации") тогда
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "Организации");
			
		ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.КонтактныеЛицаПартнеров") тогда
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "КонтактныеЛица");
			
	ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.БанковскиеСчетаКонтрагентов") 
		ИЛИ ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.БанковскиеСчетаОрганизаций") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда
				Продолжить;
			КонецЕсли;
			
			Объект = Источник.Ссылка;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект, "БанковскиеСчета");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.Номенклатура") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "Номенклатура");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.НоменклатураПрисоединенныеФайлы") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "КартинкаФайлНоменклатуры"); 		
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.ВладелецФайла, "Номенклатуры");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.ХарактеристикиНоменклатуры") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "ХарактеристикиНоменклатуры");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.Б24_ПользовательскиеГруппыТоваров") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ТекТовар из Источник.Ссылка.Товары Цикл
				
				Если ТекТовар.Номенклатура.ЭтоГруппа тогда
					
					Выборка = Справочники.Номенклатура.ВыбратьИерархически(ТекТовар.Номенклатура);
					
					Пока Выборка.Следующий() Цикл
						
						Если НЕ Выборка.ЭтоГруппа тогда
							ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Выборка.Ссылка, "Номенклатура");
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекТовар.Номенклатура, "Номенклатура");
				КонецЕсли;
				
			КонецЦикла;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "ПользовательскиеГруппыТоваров");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.УпаковкиЕдиницыИзмерения") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
		
			Если НЕ Источник.Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения тогда
				Возврат;
			КонецЕсли;
		
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "ЕдиницыИзмерения");
			
		ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.ВидыНоменклатуры") тогда
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			//не регистрируется по умолчанию. Нужно добавлять код в справочник ВидыНоменклатуры
			Свойство = Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоВидаНоменклатурыБитрикс24();
			ТипыОперацийСинхронизации = Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
			
			ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоТовара, Свойство);
			ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваТовара, Свойство);
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.ЗаказКлиента") тогда 
			
			Если НЕ (ИнформацияОНастройкеСинхронизации.ВыгружатьСделки ИЛИ ИнформацияОНастройкеСинхронизации.ВыгружатьЗаказы) тогда
				Продолжить;
			КонецЕсли;
			
			Объект = Источник.Ссылка;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект, "Заказы");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.РеализацияТоваровУслуг") тогда 
			
			Если НЕ (ИнформацияОНастройкеСинхронизации.ВыгружатьЗаказы ИЛИ ИнформацияОНастройкеСинхронизации.ВыгружатьОтгрузки) тогда
				Продолжить;
			КонецЕсли;
			
			Объект = Источник.Ссылка;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект, "Отгрузки");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") 
			ИЛИ ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.ПриходныйКассовыйОрдер")
			ИЛИ ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.ОперацияПоПлатежнойКарте") тогда 
			
			Объект = Источник.Ссылка;
			
			Если НЕ (ИнформацияОНастройкеСинхронизации.ВыгружатьЗаказы ИЛИ ИнформацияОНастройкеСинхронизации.ВыгружатьОплаты) тогда
				Продолжить;
			КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект, "Оплаты");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументОбъект.СчетНаОплатуКлиенту") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьСчета тогда
				Продолжить;
			КонецЕсли;
			
			Объект = Источник.Ссылка;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Объект, "Счета");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ПланВидовХарактеристикОбъект.ДополнительныеРеквизитыИСведения") тогда 
			
			//Если НЕ ЗначениеЗаполнено(Источник.НаборСвойств) тогда
			//	Продолжить;
			//КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Источник.Ссылка, "ДополнительныеРеквизитыИСведения");
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникОбъект.ЗначенияСвойствОбъектов") Тогда 
			
			Свойство = Источник.Владелец;
			
			//Если НЕ ЗначениеЗаполнено(Свойство.НаборСвойств) тогда
			//	Продолжить;
			//КонецЕсли;
			
			ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Свойство, "ДополнительныеРеквизитыИСведения");		
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("РегистрСведенийНаборЗаписей.ДополнительныеСведения") тогда 
			
			//#Область РегистрацияСведенийОбъектов			
			УжеДобавлены = Новый Массив;
			
			Если Замещение Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
				
				Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
					
					Если ЗначениеОтбора.Использование = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
					СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
					СтрокаОтбора.Использование = Истина;
					
				КонецЦикла;
				
				СтарыйНаборЗаписей.Прочитать();
				
				Для каждого Запись Из СтарыйНаборЗаписей Цикл
					
					УжеДобавлены.Добавить(Запись.Объект);
					
					ПроверитьДобавитьИзменныйОбъектДопСведением(ИнформацияОНастройкеСинхронизации, Запись);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого Запись Из Источник Цикл     
				
				Если ЗначениеЗаполнено(Запись.Объект) тогда 
					
					Если УжеДобавлены.Найти(Запись.Объект) <> Неопределено тогда
						Продолжить;
					КонецЕсли;
					
					ПроверитьДобавитьИзменныйОбъектДопСведением(ИнформацияОНастройкеСинхронизации, Запись);
					
				КонецЕсли;
			КонецЦикла; 
			//#КонецОбласти				
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры") тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			ТипЦены = Б24_СинхронизацияПовтИсп.ПолучитьТипЦены(НастройкаСинхронизации);
			
			УжеДобавлены = Новый Массив;
			
			Если Замещение Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
				
				Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
					
					Если ЗначениеОтбора.Использование = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
					СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
					СтрокаОтбора.Использование = Истина;
					
				КонецЦикла;
				
				СтарыйНаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из СтарыйНаборЗаписей Цикл
					
					Если ТекЗапись.ВидЦены = ТипЦены тогда
						Если ЗначениеЗаполнено(ТекЗапись.Характеристика) тогда
							ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Характеристика, "ХарактеристикиНоменклатуры");
							УжеДобавлены.Добавить(ТекЗапись.Характеристика);
						Иначе
							ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Номенклатура, "Номенклатура");
							УжеДобавлены.Добавить(ТекЗапись.Номенклатура);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекЗапись из Источник Цикл
				
				Если ТекЗапись.ВидЦены = ТипЦены тогда
					Если ЗначениеЗаполнено(ТекЗапись.Характеристика) И УжеДобавлены.Найти(ТекЗапись.Характеристика) = Неопределено  тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Характеристика, "ХарактеристикиНоменклатуры");
					ИначеЕсли УжеДобавлены.Найти(ТекЗапись.Номенклатура) = Неопределено тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Номенклатура, "Номенклатура");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъекта = Тип("РегистрНакопленияНаборЗаписей.СвободныеОстатки") Тогда 
			
			Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
				Продолжить;
			КонецЕсли;
			
			Склад = Б24_СинхронизацияПовтИсп.ПолучитьСклад(НастройкаСинхронизации);
			
			УжеДобавлены = Новый Массив;
			
			Если Замещение Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления.СвободныеОстатки.СоздатьНаборЗаписей();
				
				Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
					
					Если ЗначениеОтбора.Использование = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
					СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
					СтрокаОтбора.Использование = Истина;
					
				КонецЦикла;
				
				СтарыйНаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из СтарыйНаборЗаписей Цикл
					
					Если ТекЗапись.Склад = Склад тогда
						Если ЗначениеЗаполнено(ТекЗапись.Характеристика) тогда
							ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Характеристика, "ХарактеристикиНоменклатуры");
							УжеДобавлены.Добавить(ТекЗапись.Характеристика);
						Иначе
							ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Номенклатура, "Номенклатура");
							УжеДобавлены.Добавить(ТекЗапись.Номенклатура);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекЗапись из Источник Цикл
				
				Если ТекЗапись.Склад = Склад тогда
					Если ЗначениеЗаполнено(ТекЗапись.Характеристика) И УжеДобавлены.Найти(ТекЗапись.Характеристика) = Неопределено тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Характеристика, "ХарактеристикиНоменклатуры");
					ИначеЕсли УжеДобавлены.Найти(ТекЗапись.Номенклатура) = Неопределено тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Номенклатура, "Номенклатура");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипОбъекта =  Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") тогда 
			
			Если НЕ (ИнформацияОНастройкеСинхронизации.ВыгружатьСделки ИЛИ ИнформацияОНастройкеСинхронизации.ВыгружатьЗаказы) тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗаказ 	= Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.ЗаказКлиента");
			
			УжеДобавлены = Новый Массив;
			
			Если Замещение Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
				
				Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
					
					Если ЗначениеОтбора.Использование = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
					СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
					СтрокаОтбора.Использование = Истина;
					
				КонецЦикла;
				
				СтарыйНаборЗаписей.Прочитать();
				
				Для каждого ТекЗапись Из СтарыйНаборЗаписей Цикл
					
					Если ТипЗнч(ТекЗапись.Заказ) = ТипЗаказ тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Заказ, "Заказы");
					КонецЕсли;
					
					УжеДобавлены.Добавить(ТекЗапись.Заказ);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого ТекЗапись из Источник Цикл
				
				Если УжеДобавлены.Найти(ТекЗапись.Заказ) = Неопределено тогда	
					Если ТипЗнч(ТекЗапись.Заказ) = ТипЗаказ тогда
						ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, ТекЗапись.Заказ, "Заказы");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДобавитьИзменныйОбъектДопСведением(ИнформацияОНастройкеСинхронизации, Запись)
	
	НастройкаСинхронизации = ИнформацияОНастройкеСинхронизации.НастройкаСинхронизации;
	
	ТипВладельцаСвойства = ТипЗнч(Запись.Объект);
	
	Если ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.Партнеры") тогда
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "Партнеры");
		
	ИначеЕсли ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.Контрагенты") тогда
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьКонтрагентов тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "Контрагенты");
		
	ИначеЕсли ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.Номенклатура") тогда	
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "Номенклатура");
		
	ИначеЕсли ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.ХарактеристикиНоменклатуры") тогда	
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьТовары тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "ХарактеристикиНоменклатуры");
		
	ИначеЕсли ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.ЗаказКлиента") тогда	
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьСделки тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "Заказы");
		
	ИначеЕсли ТипВладельцаСвойства = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.СчетНаОплатуКлиенту") тогда	
		
		Если НЕ ИнформацияОНастройкеСинхронизации.ВыгружатьСчета тогда
			Возврат;
		КонецЕсли;
		
		ЗарегистрироватьИВыгрузитьВРежимеРеальногоВремени(НастройкаСинхронизации, Запись.Объект, "Счета");
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура - Проверяет временную таблицу. в которой хранятся данные на возможность регистрации. Если эти данные подходят по отборам - данные регистрируются как изменения
//
// Параметры:
//  ПараметрыВыгрузки	 - 	 Неважный параметр 
//  АдресРезультата		 - 	 Неважный параметр 
//
Процедура ПроверитьВозможностьРегистрацииЭлементаДляВыгрузкиВФоне(ПараметрыВыгрузки, АдресРезультата) Экспорт
	
	Б24_ОбщегоНазначенияСервер.Таймаут(1);    //для того, чтобы появилась запись в регистре сведений(не всегда появляется сразу).
	
	ТипыОперацийСинхронизации 	 	= Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
	ТипыДанныхДляОбменаСПорталом 	= Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	ПреффиксыВнешнихКодовБитрикс24 	= Б24_СинхронизацияПовтИсп.ПолучитьПреффиксыВнешнихКодовБитрикс24();
	
	мТипыОбъектов = новый Массив;
	мТипыОбъектов.Добавить("Организации");	
	мТипыОбъектов.Добавить("Партнеры");	
	мТипыОбъектов.Добавить("Контрагенты");	
	мТипыОбъектов.Добавить("КонтактныеЛица");	
	мТипыОбъектов.Добавить("БанковскиеСчета");	
	мТипыОбъектов.Добавить("ПользовательскиеГруппыТоваров");	
	мТипыОбъектов.Добавить("ЕдиницыИзмерения");	
	мТипыОбъектов.Добавить("ДополнительныеРеквизитыИСведения");	
	мТипыОбъектов.Добавить("Номенклатура");	
	мТипыОбъектов.Добавить("ХарактеристикиНоменклатуры");
	мТипыОбъектов.Добавить("КартинкаФайлНоменклатуры");	
	
	//мТипыОбъектов.Добавить("Счета");	
	мТипыОбъектов.Добавить("Заказы");	
	мТипыОбъектов.Добавить("Отгрузки");	
	мТипыОбъектов.Добавить("Оплаты");	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ПустоеЗначение", Неопределено);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.Объект КАК Объект,
	|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.ТипОбъекта КАК ТипОбъекта,
	|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.НастройкаСинхронизации КАК НастройкаСинхронизации
	|ПОМЕСТИТЬ ВремДанные
	|ИЗ
	|	РегистрСведений.Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени КАК Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени
	|ГДЕ
	|	Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.Объект <> &ПустоеЗначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипОбъекта,
	|	НастройкаСинхронизации";
	Запрос.Выполнить();
	
	ВыборкаНастроек = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Выбрать();
	
	Пока ВыборкаНастроек.Следующий() Цикл
		
		НастройкаСинхронизации  = ВыборкаНастроек.Ссылка;
		
		ОбщиеНастройки = Новый Структура;
		Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);
		
		Для каждого ТекТипОбъекта из мТипыОбъектов Цикл
			
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("ТипОбъекта", ТекТипОбъекта);
			Запрос.УстановитьПараметр("НастройкаСинхронизации", НастройкаСинхронизации);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВремДанные.НастройкаСинхронизации КАК НастройкаСинхронизации,
			|	ВремДанные.Объект КАК Объект
			|ИЗ
			|	ВремДанные КАК ВремДанные
			|ГДЕ
			|	ВремДанные.ТипОбъекта = &ТипОбъекта
			|	И ВремДанные.НастройкаСинхронизации = &НастройкаСинхронизации";
			
			ВыполненныйЗапрос = Запрос.Выполнить();
			
			Если ВыполненныйЗапрос.Пустой() тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыполненныйЗапрос.Выбрать();
			
			
			Если ТекТипОбъекта = "Партнеры" тогда
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Объект.ЮрФизЛицо) <> Неопределено тогда
						ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, Объект);
					Иначе 
						ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, Объект);
					КонецЕсли;
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "Организации" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, Объект);
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Реквизит				, Объект);
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита		, Объект);
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита	, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "Контрагенты" тогда
				
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Реквизит				, Объект);
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита		, Объект);
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита	, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "КонтактныеЛица" тогда
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "БанковскиеСчета" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;    					
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "Номенклатура" тогда 
				
				ИспользуютсяХарактеристикиНоменклатуры 			= Б24_ОбщегоНазначенияПовтИсп.ПолучитьПризнакИспользованияХарактеристикиНоменклатуры();
				ВариантыИспользованияХарактеристикНоменклатуры 	= Б24_ОбщегоНазначенияПовтИсп.ПолучитьЗначенияПеречисленияВариантыИспользованияХарактеристикНоменклатуры();
				
				Если ИспользуютсяХарактеристикиНоменклатуры тогда
					тзнХарактеристики = Б24_СинхронизацияВызовСервера.ПолучитьТаблицуИспользуемыхХарактеристикиНоменклатуры(НастройкаСинхронизации);
				Иначе
					тзнХарактеристики = Новый ТаблицаЗначений;
					тзнХарактеристики.Колонки.Добавить("Объект");
				КонецЕсли;
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					Если Объект.ЭтоГруппа тогда
						ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ГруппаТовара, Объект);
					Иначе
						
						Если ИспользуютсяХарактеристикиНоменклатуры И Объект.ИспользованиеХарактеристик <> ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать тогда
							
							НайденныеСтроки = тзнХарактеристики.НайтиСтроки(Новый Структура("Объект", Объект));
							
							Для Каждого ТекСтрока из НайденныеСтроки Цикл
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, Объект, ТекСтрока.ПодчиненныйОбъект);
							КонецЦикла;
						Иначе
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, Объект);
						КонецЕсли;
						
					КонецЕсли;
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "КартинкаФайлНоменклатуры" тогда 
				
				ИспользуютсяХарактеристикиНоменклатуры 			= Б24_ОбщегоНазначенияПовтИсп.ПолучитьПризнакИспользованияХарактеристикиНоменклатуры();
				ВариантыИспользованияХарактеристикНоменклатуры 	= Б24_ОбщегоНазначенияПовтИсп.ПолучитьЗначенияПеречисленияВариантыИспользованияХарактеристикНоменклатуры();
				
				Если ИспользуютсяХарактеристикиНоменклатуры тогда
					тзнХарактеристики = Б24_СинхронизацияВызовСервера.ПолучитьТаблицуИспользуемыхХарактеристикиНоменклатуры(НастройкаСинхронизации);
				Иначе
					тзнХарактеристики = Новый ТаблицаЗначений;
					тзнХарактеристики.Колонки.Добавить("Объект");
				КонецЕсли;
				
				Пока Выборка.Следующий() Цикл
					
					Объект 					= Выборка.Объект;
					Номенклатура 			= Объект.ВладелецФайла;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.КартинкаФайлТовара, Объект);
					
					Если Номенклатура.ИспользованиеХарактеристик <> ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать тогда
						
						НайденныеСтроки = тзнХарактеристики.НайтиСтроки(Новый Структура("Объект", Номенклатура));
						
						Для Каждого ТекСтрока из НайденныеСтроки Цикл
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, Номенклатура, ТекСтрока.ПодчиненныйОбъект);
						КонецЦикла;
					Иначе
						ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, Номенклатура);
					КонецЕсли;
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "ХарактеристикиНоменклатуры" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, Справочники.Номенклатура.ПустаяСсылка(), Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "ПользовательскиеГруппыТоваров" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ГруппаТовара, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "ЕдиницыИзмерения" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект 	= Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "Заказы" тогда 
#Область ПроверкаЗаказов				
				//ТипДокументаЗаказаПоУмолчанию = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
				ТипДокументаЗаказаПоУмолчанию = "Сделка";
				
				ВременныеТаблицыЗаказов = Новый МенеджерВременныхТаблиц;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыЗаказов;
				Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
				Запрос.УстановитьПараметр("ТипДанныхЗаказов"	, ТипыДанныхДляОбменаСПорталом.Заказ);
				Запрос.УстановитьПараметр("ТипДанныхСделок"		, ТипыДанныхДляОбменаСПорталом.Сделка);
				Запрос.Текст = "ВЫБРАТЬ
				|	Б24_ИдентификаторыОбъектов.Объект КАК Заказ,
				|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
				|ПОМЕСТИТЬ ВремИдентификаторы
				|ИЗ
				|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
				|ГДЕ
				|	Б24_ИдентификаторыОбъектов.Портал = &Портал
				|	И (Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗаказов
				|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСделок)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Заказ";
				
				Запрос.Выполнить();
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					Запрос = Новый Запрос;
					Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыЗаказов;
					Запрос.УстановитьПараметр("Заказ", Объект);
					Запрос.Текст = "ВЫБРАТЬ
					|	ВремИдентификаторы.Идентификатор КАК Идентификатор
					|ИЗ
					|	ВремИдентификаторы КАК ВремИдентификаторы
					|ГДЕ
					|	ВремИдентификаторы.Заказ = &Заказ";
					
					тзнЗаказов = Запрос.Выполнить().Выгрузить();
					
					Если тзнЗаказов.Количество() = 0 тогда
						
						Если ТипДокументаЗаказаПоУмолчанию = "Сделка" тогда
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Сделка			, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ТоварыСделки				, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.РеквизитыСделки			, Объект);
						КонецЕсли;
					Иначе
						
						ИдДокумента = тзнЗаказов[0].Идентификатор;  
						
						Если Лев(ИдДокумента,2) = ПреффиксыВнешнихКодовБитрикс24.Сделки тогда
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Сделка			, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ТоварыСделки				, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.РеквизитыСделки			, Объект);
						ИначеЕсли Лев(ИдДокумента,2) = ПреффиксыВнешнихКодовБитрикс24.Заказы тогда
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Заказ			, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ТоварыЗаказа				, Объект);
							ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.УказанныеСвойстваЗаказа	, Объект);
						Иначе
							
						КонецЕсли;
						
					КонецЕсли;
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);	
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
#КонецОбласти				
			ИначеЕсли ТекТипОбъекта = "Отгрузки" ИЛИ ТекТипОбъекта = "Оплаты" тогда 
#Область ПроверкаОтгрузокИОплат	
				//ТипДокументаЗаказаПоУмолчанию = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
				ТипДокументаЗаказаПоУмолчанию = "Сделка";
				
				ВременныеТаблицыЗаказов = Новый МенеджерВременныхТаблиц;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыЗаказов;
				Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
				Запрос.УстановитьПараметр("ТипДанныхЗаказов"	, ТипыДанныхДляОбменаСПорталом.Заказ);
				Запрос.УстановитьПараметр("ТипДанныхСделок"		, ТипыДанныхДляОбменаСПорталом.Сделка);
				Запрос.Текст = "ВЫБРАТЬ
				|	Б24_ИдентификаторыОбъектов.Объект КАК Заказ,
				|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
				|ПОМЕСТИТЬ ВремИдентификаторы
				|ИЗ
				|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
				|ГДЕ
				|	Б24_ИдентификаторыОбъектов.Портал = &Портал
				|	И (Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗаказов
				|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСделок)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Заказ";
				
				Запрос.Выполнить();

				Пока Выборка.Следующий() Цикл
					
					Объект 	= Выборка.Объект;
					
					Если ТекТипОбъекта = "Отгрузки" тогда
						Заказ	= Объект.ЗаказКлиента; 
						ТипыДанныхДляОбмена = ТипыДанныхДляОбменаСПорталом.Отгрузка;
					Иначе
						
						Если Объект.РасшифровкаПлатежа.Количество() > 0 тогда
							Заказ	= Объект.РасшифровкаПлатежа[0].Заказ;	
						Иначе
							Заказ = Неопределено;
						КонецЕсли;
						
						ТипыДанныхДляОбмена = ТипыДанныхДляОбменаСПорталом.Оплата;
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.МенеджерВременныхТаблиц = ВременныеТаблицыЗаказов;
					Запрос.УстановитьПараметр("Заказ", Заказ);
					Запрос.Текст = "ВЫБРАТЬ
					|	ВремИдентификаторы.Идентификатор КАК Идентификатор
					|ИЗ
					|	ВремИдентификаторы КАК ВремИдентификаторы
					|ГДЕ
					|	ВремИдентификаторы.Заказ = &Заказ";
					
					тзнЗаказов = Запрос.Выполнить().Выгрузить();
					
					Если тзнЗаказов.Количество() = 0 тогда
					//	Если ТипДокументаЗаказаПоУмолчанию = "Заказ" И ВыгружатьОфлайнЗаказы = Истина тогда
					//		ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхБ, Объект);
					//	КонецЕсли;
					//Иначе
						
						ИдДокумента = тзнЗаказов[0].Идентификатор;  
						
						Если Лев(ИдДокумента,2) = ПреффиксыВнешнихКодовБитрикс24.Заказы тогда
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбмена, Объект);
						Иначе
						КонецЕсли;
					КонецЕсли;
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);	
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
#КонецОбласти				
			ИначеЕсли ТекТипОбъекта = "Счета" тогда 
				
				Пока Выборка.Следующий() Цикл
					
					Объект = Выборка.Объект;
					
					ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Счет, Объект);
					ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.РеквизитыСчета, Объект);
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);	
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			ИначеЕсли ТекТипОбъекта = "ДополнительныеРеквизитыИСведения" тогда 
				
				//СвойствоВидаНоменклатуры = Б24_ОбменСПорталомВызовСервера.СоздатьПолучитьСвойствоВидаНоменклатурыБитрикс24();
				
				мСвойстваИсключения = Б24_СинхронизацияВызовСервера.ПолучитьНазванияИсключающихСвойств();	
				
				Пока Выборка.Следующий() Цикл
					
					Объект 	= Выборка.Объект;
					
					//Если мСвойстваИсключения.Найти(Объект.Заголовок) <> Неопределено И Объект <> СвойствоВидаНоменклатуры тогда
					Если мСвойстваИсключения.Найти(Объект.Заголовок) <> Неопределено тогда
						УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
						Продолжить;
					КонецЕсли;
					
					спкНаборыСвойств = ПолучитьСписокНаборов(Объект);
					
					Для Каждого НаборСвойств из спкНаборыСвойств Цикл
					
						Если НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры) ИЛИ НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры тогда
							
							ДляКомпаний 	= Ложь;
							ДляКонтактов 	= Ложь;
							
							Если СтрНайти(Объект.Комментарий, "Свойство компании (Битрикс24)")>0 тогда
								ДляКомпаний 	= Истина;
							Иначе
								ДляКомпаний 	= Ложь;
							КонецЕсли;
							
							Если СтрНайти(Объект.Комментарий, "Свойство контакта (Битрикс24)")>0 тогда
								ДляКонтактов 	= Истина;
							Иначе
								ДляКонтактов 	= Ложь;
							КонецЕсли;
							
							Если НЕ ДляКомпаний И НЕ ДляКонтактов тогда
								ДляКомпаний 	= Истина;
								ДляКонтактов 	= Истина;
							КонецЕсли;
							
							Если ДляКомпаний тогда
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоКомпании, Объект);
								Если Объект.ДополнительныеЗначенияИспользуются тогда 
									ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКомпании, Объект);
								КонецЕсли;
							КонецЕсли;
							
							Если ДляКонтактов тогда
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоКонтакта, Объект);
								Если Объект.ДополнительныеЗначенияИспользуются тогда 
									ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваКонтакта, Объект);
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ЗаказКлиента тогда
							
							Запрос = Новый Запрос;
							Запрос.УстановитьПараметр("Объект"		, Объект);
							Запрос.УстановитьПараметр("ТипДанных"	, ТипыДанныхДляОбменаСПорталом.СвойствоЗаказа);
							Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
							|	Б24_ИдентификаторыОбъектов.Объект КАК Объект
							|ИЗ
							|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
							|ГДЕ
							|	Б24_ИдентификаторыОбъектов.Объект = &Объект
							|	И Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанных
							|	И Б24_ИдентификаторыОбъектов.Портал <> """"";
							ВыполненныйЗапрос = Запрос.Выполнить();
							
							Если НЕ ВыполненныйЗапрос.Пустой() тогда
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоЗаказа, Объект);
								//Если Объект.ДополнительныеЗначенияИспользуются тогда 
								//	ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваЗаказа, Объект);
								//КонецЕсли;
							Иначе
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоСделки, Объект);
								Если Объект.ДополнительныеЗначенияИспользуются тогда 
									ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСделки, Объект);
								КонецЕсли;
							КонецЕсли;
								
						ИначеЕсли НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуКлиенту тогда
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоСчета, Объект);
							Если Объект.ДополнительныеЗначенияИспользуются тогда 
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваСчета, Объект);
							КонецЕсли;
							
						ИначеЕсли (НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура) ИЛИ НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура)
								ИЛИ (НаборСвойств.ПринадлежитЭлементу(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры) ИЛИ НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры) тогда
							
							ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.СвойствоТовара, Объект);
							Если Объект.ДополнительныеЗначенияИспользуются тогда 
								ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЗначениеСвойстваТовара, Объект);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;	
					
					УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект);				
					
				КонецЦикла;	
				
				Б24_СинхронизацияВызовСервера.ВыгрузкаВРеальномВремени(НастройкаСинхронизации);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияВладельцевДанных(НастройкаСинхронизации, ТипДанных, Объект) Экспорт
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	ТипыОперацийСинхронизации 	 = Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
	
	ОбщиеНастройки = Новый Структура;
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);
	
	Если ТипДанных = ТипыДанныхДляОбменаСПорталом.Реквизит тогда
		
		ТипОбъекта = ТипЗнч(Объект);
		
		Если ТипОбъекта = Тип("СправочникСсылка.Организации") тогда
			
			ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, Объект);
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Партнеры") тогда
			
			Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Объект.ЮрФизЛицо) <> Неопределено тогда
				ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, Объект);
			Иначе
				ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, Объект);
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") тогда
			
			Партнер = Объект.Партнер;
			Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Партнер.ЮрФизЛицо) <> Неопределено тогда
				ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, Партнер);
			Иначе
				ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, Партнер);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанных = ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита тогда
		
		ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Реквизит, Объект.Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокНаборов(Свойство)
	
	СписокНаборов = Новый Массив;
	
	Если ЗначениеЗаполнено(Свойство) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.Ссылка КАК Набор
		|ПОМЕСТИТЬ ВремНаборы
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Свойство = &Свойство
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремНаборы.Набор КАК Набор
		|ИЗ
		|	ВремНаборы КАК ВремНаборы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВремНаборы.Набор");
		
		Запрос.УстановитьПараметр("Свойство", Свойство );
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНаборов.Добавить(Выборка.Набор);
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат СписокНаборов;	
	
КонецФункции


Процедура УдалениеЗаписиИзТаблицыПроверкиНаВыгрузку(НастройкаСинхронизации, Объект)
	
	ВыборкаДляУдаления = РегистрыСведений.Б24_ТаблицаПроверкиОбъектовНаВыгрузкуВРежимеРеальногоВремени.Выбрать(Новый Структура("Объект", Объект));
	Пока ВыборкаДляУдаления.Следующий() Цикл
		Если ВыборкаДляУдаления.НастройкаСинхронизации = НастройкаСинхронизации тогда
			ВыборкаДляУдаления.ПолучитьМенеджерЗаписи().Удалить();
		КонецЕсли;
	КонецЦикла
	
КонецПроцедуры

Процедура ПроверитьИДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипДанныхДляРегистрацииИзменений, Объект, ПодчиненныйОбъект = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПодчиненныйОбъект) тогда       //характеристики будут переделываться
		ПроверитьДобавитьНеотправленыеСвязанныеДанные(НастройкаСинхронизации, Объект);			
	КонецЕсли;
	
	ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипДанныхДляРегистрацииИзменений, Объект, ПодчиненныйОбъект);
	
КонецПроцедуры

Процедура ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипДанныхДляРегистрацииИзменений, Объект, ПодчиненныйОбъект = Неопределено) Экспорт
	
	Если РегистрыСведений.Б24_ТаблицаИзменений.Получить(Новый Структура("НастройкаСинхронизации, ТипДанных, Объект, ПодчиненныйОбъект",НастройкаСинхронизации, ТипДанныхДляРегистрацииИзменений, Объект, ПодчиненныйОбъект)).ВремяЗаписиВМиллисекундах = 0 тогда 
		Если ЗначениеЗаполнено(Объект) ИЛИ ЗначениеЗаполнено(ПодчиненныйОбъект) тогда
			
			НоваяЗапись = РегистрыСведений.Б24_ТаблицаИзменений.СоздатьМенеджерЗаписи();
			НоваяЗапись.НастройкаСинхронизации		= НастройкаСинхронизации;
			НоваяЗапись.ТипДанных 					= ТипДанныхДляРегистрацииИзменений;
			НоваяЗапись.Объект 						= Объект; 
			НоваяЗапись.ПодчиненныйОбъект 			= ПодчиненныйОбъект; 
			НоваяЗапись.ВремяЗаписиВМиллисекундах	= ТекущаяУниверсальнаяДатаВМиллисекундах();
			НоваяЗапись.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#Область ПроверкаЦелостностиДанных

Процедура ПроверитьДобавитьНеотправленыеСвязанныеДанные(НастройкаСинхронизации, Объект) Экспорт
	
	ТипыОперацийСинхронизации 	 = Б24_СинхронизацияПовтИсп.ПолучитьТипыОперацийСинхронизации();
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();

	ТипОбъекта = ТипЗнч(Объект);
	
	СтруктураНеотправленныхДанных = Неопределено;
	
	Если ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.КонтактныеЛицаПартнеров") тогда
		
		СтруктураНеотправленныхДанных = ПолучитьНеотправленныеДанныеКонтактногоЛица(НастройкаСинхронизации, Объект); 		
		
	ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.БанковскиеСчетаКонтрагентов")
		ИЛИ ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.БанковскиеСчетаОрганизаций") тогда
		
		СтруктураНеотправленныхДанных = ПолучитьНеотправленныеДанныеБанковскогоСчета(НастройкаСинхронизации, Объект); 		
		
	ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.Номенклатура") тогда
		
		Если НЕ Объект.ЭтоГруппа тогда
			СтруктураНеотправленныхДанных = ПолучитьНеотправленныеДанныеНоменклатуры(НастройкаСинхронизации, Объект); 		
		КонецЕсли;
	
	ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.ЗаказКлиента") тогда
		
		СтруктураНеотправленныхДанных = ПолучитьНеотправленныеДанныеЗаказа(НастройкаСинхронизации, Объект); 		
		
	ИначеЕсли ТипОбъекта = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.СчетНаОплатуКлиенту") тогда
		
		СтруктураНеотправленныхДанных = ПолучитьНеотправленныеДанныеСчета(НастройкаСинхронизации, Объект); 		
		
	КонецЕсли;
	
	Если СтруктураНеотправленныхДанных = Неопределено тогда
		Возврат;
	Конецесли;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Компании Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Компания, ТекЗначение);
		
		Если ТипЗнч(ТекЗначение) = Тип("СправочникСсылка.Партнеры") тогда
		
			Выборка = Справочники.КонтактныеЛицаПартнеров.Выбрать(, ТекЗначение);
			
			Пока Выборка.Следующий() Цикл
				ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, Выборка.Ссылка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Контакты Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Контакт, ТекЗначение);
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Реквизиты Цикл
		
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Реквизит			, ТекЗначение);
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЮрАдресРеквизита	, ТекЗначение);
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ФактАдресРеквизита	, ТекЗначение);
		
		
		Если ТипЗнч(ТекЗначение) = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("СправочникСсылка.Организации") тогда
			Выборка = Справочники.БанковскиеСчетаОрганизаций.Выбрать(, ТекЗначение);
		Иначе
			Выборка = Справочники.БанковскиеСчетаКонтрагентов.Выбрать(, ТекЗначение);
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита, Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.БанкСчета Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита, ТекЗначение);
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.ЕдИзм Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения, ТекЗначение);
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Группы Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ГруппаТовара, ТекЗначение);
	КонецЦикла;
	
	Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Товары Цикл
		ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Товар, ТекЗначение.Номенклатура, ТекЗначение.Характеристика);
		
		ПроверитьДобавитьНеотправленыеСвязанныеДанные(НастройкаСинхронизации, ТекЗначение.Номенклатура);	
	КонецЦикла;
	
	Если НастройкаСинхронизации.СинхронизацияСделок И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииСделок(НастройкаСинхронизации, "ВыгружатьСделки") тогда
		Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Сделки Цикл
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Сделка			, ТекЗначение);
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ТоварыСделки	, ТекЗначение);
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.РеквизитыСделки, ТекЗначение);
			
			ПроверитьДобавитьНеотправленыеСвязанныеДанные(НастройкаСинхронизации, ТекЗначение);		
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкаСинхронизации.СинхронизацияЗаказов И Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииЗаказов(НастройкаСинхронизации, "ВыгружатьЗаказы") тогда
		Для Каждого ТекЗначение ИЗ СтруктураНеотправленныхДанных.Заказы Цикл
			
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.Заказ					, ТекЗначение);
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.ТоварыЗаказа			, Объект);
			ДобавитьОбъектВТаблицуИзменений(НастройкаСинхронизации, ТипыДанныхДляОбменаСПорталом.УказанныеСвойстваЗаказа, Объект);
			
			ПроверитьДобавитьНеотправленыеСвязанныеДанные(НастройкаСинхронизации, ТекЗначение);		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


Функция ПолучитьНеотправленныеДанныеЗаказа(НастройкаСинхронизации, Заказ) 
	
	Результат = Новый Структура;
	Результат.Вставить("Компании"	, Новый Массив);
	Результат.Вставить("Контакты"	, Новый Массив);
	Результат.Вставить("Реквизиты"	, Новый Массив);
	Результат.Вставить("БанкСчета"	, Новый Массив);
	Результат.Вставить("ЕдИзм"		, Новый Массив);
	Результат.Вставить("Товары"		, Новый Массив);
	Результат.Вставить("Сделки"		, Новый Массив);
	Результат.Вставить("Группы"		, Новый Массив);
	Результат.Вставить("Заказы"		, Новый Массив);
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	ОбщиеНастройки = Новый Структура;
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Объект"			 	, Заказ);
	Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
	Запрос.УстановитьПараметр("ТипДанныхКомпаний"	, ТипыДанныхДляОбменаСПорталом.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтактов"	, ТипыДанныхДляОбменаСПорталом.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхРеквизит"	, ТипыДанныхДляОбменаСПорталом.Реквизит);
	Запрос.УстановитьПараметр("ТипДанныхБанкСчет"	, ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхТовар"		, ТипыДанныхДляОбменаСПорталом.Товар);
	Запрос.УстановитьПараметр("ТипДанныхЕдИзм"		, ТипыДанныхДляОбменаСПорталом.ЕдиницаИзмерения);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Документ,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Партнер КАК Партнер,
	|	ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказКлиента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
	|ПОМЕСТИТЬ ВремДокументы
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК Документ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	Товар.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВремТоварыДокумента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товар
	|		ПО ЗаказКлиентаТовары.Номенклатура = Товар.Ссылка
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВремДокументы.Документ
	|			ИЗ
	|				ВремДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпанийКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	(Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпаний
	|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтактов)
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыРеквизитов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхРеквизит
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыБанкСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхБанкСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремДокументы.Документ КАК Документ,
	|	ВремИдентификаторыБанкСчетовКонтрагентов.Идентификатор КАК ИдентификаторБанкСчетаКонтрагента,
	|	ВремИдентификаторыБанкСчетовОрганизаций.Идентификатор КАК ИдентификаторБанкСчетаОрганизации,
	|	ВремИдентификаторыКомпанийКонтактов.Идентификатор КАК ИдентификаторКомпанииКонтакта,
	|	ВремИдентификаторыОрганизаций.Идентификатор КАК ИдентификаторОрганизации,
	|	ВремИдентификаторыРеквизитовКонтрагентов.Идентификатор КАК ИдентификаторРеквизитаКонтрагента,
	|	ВремИдентификаторыРеквизитовОрганизации.Идентификатор КАК ИдентификаторРеквизитаОрганизации,
	|	ВремДокументы.Организация КАК Организация,
	|	ВремДокументы.Партнер КАК Партнер,
	|	ВремДокументы.Контрагент КАК Контрагент,
	|	ВремДокументы.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ВремДокументы.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВремИнформацияОШапкеДокумента
	|ИЗ
	|	ВремДокументы КАК ВремДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыОрганизаций
	|		ПО ВремДокументы.Организация = ВремИдентификаторыОрганизаций.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыРеквизитов КАК ВремИдентификаторыРеквизитовОрганизации
	|		ПО ВремДокументы.Организация = ВремИдентификаторыРеквизитовОрганизации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыКомпанийКонтактов
	|		ПО ВремДокументы.Партнер = ВремИдентификаторыКомпанийКонтактов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыРеквизитов КАК ВремИдентификаторыРеквизитовКонтрагентов
	|		ПО ВремДокументы.Контрагент = ВремИдентификаторыРеквизитовКонтрагентов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыБанкСчетов КАК ВремИдентификаторыБанкСчетовОрганизаций
	|		ПО ВремДокументы.БанковскийСчет = ВремИдентификаторыБанкСчетовОрганизаций.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыБанкСчетов КАК ВремИдентификаторыБанкСчетовКонтрагентов
	|		ПО ВремДокументы.БанковскийСчетКонтрагента = ВремИдентификаторыБанкСчетовКонтрагентов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыКомпанийКонтактов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыБанкСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Б24_ИдентификаторыОбъектов.Объект КАК Справочник.Номенклатура) КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор,
	|	ВЫРАЗИТЬ(Б24_ИдентификаторыОбъектов.ПодчиненныйОбъект КАК Справочник.ХарактеристикиНоменклатуры) КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВремИдентификаторыТоваров
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхТовар
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ПодчиненныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Б24_ИдентификаторыОбъектов.Объект КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыЕдИзм
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЕдИзм
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТоварыДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВремТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ВремТоварыДокумента.Характеристика КАК Характеристика,
	|	ВремТоварыДокумента.Документ КАК Документ,
	|	ВремИдентификаторыТоваров.Идентификатор КАК ИдентификаторТовара,
	|	ВремИдентификаторыЕдИзм.Идентификатор КАК ИдентификаторЕдИзм
	|ПОМЕСТИТЬ ВремИнформацияОТоварахДокумента
	|ИЗ
	|	ВремТоварыДокумента КАК ВремТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыЕдИзм КАК ВремИдентификаторыЕдИзм
	|		ПО ВремТоварыДокумента.ЕдиницаИзмерения = ВремИдентификаторыЕдИзм.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыТоваров КАК ВремИдентификаторыТоваров
	|		ПО ВремТоварыДокумента.Номенклатура = ВремИдентификаторыТоваров.Объект
	|			И ВремТоварыДокумента.Характеристика = ВремИдентификаторыТоваров.ПодчиненныйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыЕдИзм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТоварыДокумента";
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВремИнформацияОШапкеДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторБанкСчетаКонтрагента) тогда
			Результат.БанкСчета.Добавить(Выборка.БанковскийСчетКонтрагента);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторБанкСчетаОрганизации) тогда
			Результат.БанкСчета.Добавить(Выборка.БанковскийСчет);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторКомпанииКонтакта) тогда
			
			Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Выборка.Партнер.ЮрФизЛицо) <> Неопределено тогда 				
				Результат.Компании.Добавить(Выборка.Партнер);	
			Иначе
				Результат.Контакты.Добавить(Выборка.Партнер);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторОрганизации) тогда
			Результат.Компании.Добавить(Выборка.Организация);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторРеквизитаКонтрагента) тогда
			Результат.Реквизиты.Добавить(Выборка.Контрагент);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторРеквизитаОрганизации) тогда
			Результат.Реквизиты.Добавить(Выборка.Организация);	
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВремИнформацияОТоварахДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторТовара) тогда
			
			ИнформацияОТоваре = Новый Структура;
			ИнформацияОТоваре.Вставить("Характеристика"	, Выборка.Характеристика);
			ИнформацияОТоваре.Вставить("Номенклатура"	, Выборка.Номенклатура);
				
			Результат.Товары.Добавить(ИнформацияОТоваре);	
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторЕдИзм) тогда
			Результат.ЕдИзм.Добавить(Выборка.ЕдиницаИзмерения);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНеотправленныеДанныеСчета(НастройкаСинхронизации, Счет) 
	
	Результат = Новый Структура;
	Результат.Вставить("Компании"	, Новый Массив);
	Результат.Вставить("Контакты"	, Новый Массив);
	Результат.Вставить("Реквизиты"	, Новый Массив);
	Результат.Вставить("БанкСчета"	, Новый Массив);
	Результат.Вставить("ЕдИзм"		, Новый Массив);
	Результат.Вставить("Товары"		, Новый Массив);
	Результат.Вставить("Сделки"		, Новый Массив);
	Результат.Вставить("Группы"		, Новый Массив);
	Результат.Вставить("Заказы"		, Новый Массив);
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	ОбщиеНастройки = Новый Структура;
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Объект"			 	, Счет);
	Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
	Запрос.УстановитьПараметр("ТипДанныхКомпаний"	, ТипыДанныхДляОбменаСПорталом.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтактов"	, ТипыДанныхДляОбменаСПорталом.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхРеквизит"	, ТипыДанныхДляОбменаСПорталом.Реквизит);
	Запрос.УстановитьПараметр("ТипДанныхБанкСчет"	, ТипыДанныхДляОбменаСПорталом.БанковскийСчетРеквизита);
	Запрос.УстановитьПараметр("ТипДанныхСделок"		, ТипыДанныхДляОбменаСПорталом.Сделка);
	Запрос.УстановитьПараметр("ТипДанныхЗаказов"	, ТипыДанныхДляОбменаСПорталом.Заказ);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК Документ,
	|	СчетНаОплатуКлиенту.Организация КАК Организация,
	|	СчетНаОплатуКлиенту.Контрагент КАК Контрагент,
	|	СчетНаОплатуКлиенту.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.БанковскийСчет КАК БанковскийСчет,
	|	СчетНаОплатуКлиенту.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВремДокументы
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпанийКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	(Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпаний
	|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтактов)
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Б24_ИдентификаторыОбъектов.Объект КАК Документ.ЗаказКлиента) КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыСделок
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	(Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхСделок
	|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхЗаказов)
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыРеквизитов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхРеквизит
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыБанкСчетов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхБанкСчет
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремДокументы.Документ КАК Документ,
	|	ВремИдентификаторыБанкСчетовОрганизаций.Идентификатор КАК ИдентификаторБанкСчетаОрганизации,
	|	ВремИдентификаторыКомпанийКонтактов.Идентификатор КАК ИдентификаторКомпанииКонтакта,
	|	ВремИдентификаторыОрганизаций.Идентификатор КАК ИдентификаторОрганизации,
	|	ВремИдентификаторыРеквизитовКонтрагентов.Идентификатор КАК ИдентификаторРеквизитаКонтрагента,
	|	ВремИдентификаторыРеквизитовОрганизации.Идентификатор КАК ИдентификаторРеквизитаОрганизации,
	|	ВремДокументы.Организация КАК Организация,
	|	ВремДокументы.Контрагент КАК Контрагент,
	|	ВремДокументы.БанковскийСчет КАК БанковскийСчет,
	|	ВремИдентификаторыСделок.Идентификатор КАК ИдентификаторСделки,
	|	ВремДокументы.ДокументОснование КАК Сделка
	|ПОМЕСТИТЬ ВремИнформацияОШапкеДокумента
	|ИЗ
	|	ВремДокументы КАК ВремДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыОрганизаций
	|		ПО ВремДокументы.Организация = ВремИдентификаторыОрганизаций.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыРеквизитов КАК ВремИдентификаторыРеквизитовОрганизации
	|		ПО ВремДокументы.Организация = ВремИдентификаторыРеквизитовОрганизации.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыКомпанийКонтактов
	|		ПО ВремДокументы.Партнер = ВремИдентификаторыКомпанийКонтактов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыРеквизитов КАК ВремИдентификаторыРеквизитовКонтрагентов
	|		ПО ВремДокументы.Контрагент = ВремИдентификаторыРеквизитовКонтрагентов.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыБанкСчетов КАК ВремИдентификаторыБанкСчетовОрганизаций
	|		ПО ВремДокументы.БанковскийСчет = ВремИдентификаторыБанкСчетовОрганизаций.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыСделок КАК ВремИдентификаторыСделок
	|		ПО ВремДокументы.ДокументОснование = ВремИдентификаторыСделок.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыКомпанийКонтактов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыБанкСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремИдентификаторыСделок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремДокументы";
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВремИнформацияОШапкеДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторБанкСчетаОрганизации) тогда
			Результат.БанкСчета.Добавить(Выборка.БанковскийСчет);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторКомпанииКонтакта) тогда
			
			Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Выборка.Партнер.ЮрФизЛицо) <> Неопределено тогда 				
				Результат.Компании.Добавить(Выборка.Партнер);	
			Иначе
				Результат.Контакты.Добавить(Выборка.Партнер);	
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторОрганизации) тогда
			Результат.Компании.Добавить(Выборка.Организация);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторРеквизитаКонтрагента) тогда
			Результат.Реквизиты.Добавить(Выборка.Контрагент);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторРеквизитаОрганизации) тогда
			Результат.Реквизиты.Добавить(Выборка.Организация);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторСделки) тогда
			
			Если ТипЗнч(Выборка.Сделка) = Б24_ОбщегоНазначенияПовтИсп.ПолучитьТипОбъекта("ДокументСсылка.ЗаказКлиента") тогда
				
				//ТипДокументаЗаказаПоУмолчанию = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
				//ТипДокументаЗаказаПоУмолчанию = ?(ЗначениеЗаполнено(ТипДокументаЗаказаПоУмолчанию), ТипДокументаЗаказаПоУмолчанию, "Сделка");
				ТипДокументаЗаказаПоУмолчанию = "Сделка";
				
				Если Выборка.Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказКлиента.ЗаказНаПродажу И ТипДокументаЗаказаПоУмолчанию = "Сделка" тогда
					Результат.Сделки.Добавить(Выборка.Сделка);	
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНеотправленныеДанныеБанковскогоСчета(НастройкаСинхронизации, БанковскийСчет) 
	
	Результат = Новый Структура;
	Результат.Вставить("Компании"	, Новый Массив);
	Результат.Вставить("Контакты"	, Новый Массив);
	Результат.Вставить("Реквизиты"	, Новый Массив);
	Результат.Вставить("БанкСчета"	, Новый Массив);
	Результат.Вставить("ЕдИзм"		, Новый Массив);
	Результат.Вставить("Товары"		, Новый Массив);
	Результат.Вставить("Сделки"		, Новый Массив);
	Результат.Вставить("Группы"		, Новый Массив);
	Результат.Вставить("Заказы"		, Новый Массив);
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	ОбщиеНастройки = Новый Структура;
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект"			 	, БанковскийСчет);
	Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
	Запрос.УстановитьПараметр("ТипДанныхКомпаний"	, ТипыДанныхДляОбменаСПорталом.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтактов"	, ТипыДанныхДляОбменаСПорталом.Контакт);
	Запрос.УстановитьПараметр("ТипДанныхРеквизит"	, ТипыДанныхДляОбменаСПорталом.Реквизит);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчета.Ссылка КАК БанкСчет,
	               |	БанковскиеСчета.Владелец КАК Владелец
	               |ПОМЕСТИТЬ ВремБанкСчета
	               |ИЗ
	               |	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Ссылка = &Объект
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	БанковскиеСчета.Ссылка,
	               |	БанковскиеСчета.Владелец
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	               |ГДЕ
	               |	БанковскиеСчета.Ссылка = &Объект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	               |	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ ВремИдентификаторыКомпанийКонтактов
	               |ИЗ
	               |	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	               |ГДЕ
	               |	(Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпаний
	               |			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтактов)
	               |	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	               |	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ ВремИдентификаторыРеквизитов
	               |ИЗ
	               |	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	               |ГДЕ
	               |	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхРеквизит
	               |	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремБанкСчета.Владелец КАК Владелец,
	               |	ВремИдентификаторыКомпанийКонтактов.Идентификатор КАК ИдентификаторВладельца,
	               |	ВремИдентификаторыРеквизитов.Идентификатор КАК ИдентификаторРеквизитаВладельца,
	               |	ВремБанкСчета.БанкСчет КАК БанкСчет
	               |ИЗ
	               |	ВремБанкСчета КАК ВремБанкСчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыКомпанийКонтактов
	               |		ПО ВремБанкСчета.Владелец = ВремИдентификаторыКомпанийКонтактов.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыРеквизитов КАК ВремИдентификаторыРеквизитов
	               |		ПО ВремБанкСчета.Владелец = ВремИдентификаторыРеквизитов.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторРеквизитаВладельца) тогда
			Если ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Контрагенты") тогда
				Результат.Реквизиты.Добавить(Выборка.Владелец);	
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторВладельца) тогда
			Если НЕ ТипЗнч(Выборка.Владелец) = Тип("СправочникСсылка.Контрагенты") тогда
				Результат.Компании.Добавить(Выборка.Владелец);	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНеотправленныеДанныеКонтактногоЛица(НастройкаСинхронизации, КонтактноеЛицо) 
	
	Результат = Новый Структура;
	Результат.Вставить("Компании"	, Новый Массив);
	Результат.Вставить("Контакты"	, Новый Массив);
	Результат.Вставить("Реквизиты"	, Новый Массив);
	Результат.Вставить("БанкСчета"	, Новый Массив);
	Результат.Вставить("ЕдИзм"		, Новый Массив);
	Результат.Вставить("Товары"		, Новый Массив);
	Результат.Вставить("Сделки"		, Новый Массив);
	Результат.Вставить("Группы"		, Новый Массив);
	Результат.Вставить("Заказы"		, Новый Массив);
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	ОбщиеНастройки = Новый Структура;
	Б24_СинхронизацияВызовСервера.ДобавитьРеквизитыВОбщиеНастройки(НастройкаСинхронизации, ОбщиеНастройки);	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект"			 	, КонтактноеЛицо);
	Запрос.УстановитьПараметр("Портал"			 	, НастройкаСинхронизации.Портал);
	Запрос.УстановитьПараметр("ТипДанныхКомпаний"	, ТипыДанныхДляОбменаСПорталом.Компания);
	Запрос.УстановитьПараметр("ТипДанныхКонтактов"	, ТипыДанныхДляОбменаСПорталом.Контакт);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
	|	КонтактныеЛица.Владелец КАК Партнер
	|ПОМЕСТИТЬ ВремКонтрагентыКонтакта
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Ссылка = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
	|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВремИдентификаторыКомпанийКонтактов
	|ИЗ
	|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
	|ГДЕ
	|	(Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКомпаний
	|			ИЛИ Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхКонтактов)
	|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремКонтрагентыКонтакта.Партнер КАК Партнер,
	|	ВремИдентификаторыКомпанийКонтактов.Идентификатор КАК ИдентификаторКомпанииКонтакта
	|ИЗ
	|	ВремКонтрагентыКонтакта КАК ВремКонтрагентыКонтакта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыКомпанийКонтактов КАК ВремИдентификаторыКомпанийКонтактов
	|		ПО ВремКонтрагентыКонтакта.Партнер = ВремИдентификаторыКомпанийКонтактов.Объект";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторКомпанииКонтакта) тогда
			Если ТипЗнч(Выборка.Партнер) = Тип("СправочникСсылка.Партнеры") тогда
				Если ОбщиеНастройки.ТипыКонтрагентовДляКомпаний.Найти(Выборка.Партнер.ЮрФизЛицо) <> Неопределено тогда 				
					Результат.Компании.Добавить(Выборка.Партнер);	
				Иначе
					Результат.Контакты.Добавить(Выборка.Партнер);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНеотправленныеДанныеНоменклатуры(НастройкаСинхронизации, Номенклатура)
	
	Результат = Новый Структура;
	Результат.Вставить("Компании"	, Новый Массив);
	Результат.Вставить("Контакты"	, Новый Массив);
	Результат.Вставить("Реквизиты"	, Новый Массив);
	Результат.Вставить("БанкСчета"	, Новый Массив);
	Результат.Вставить("ЕдИзм"		, Новый Массив);
	Результат.Вставить("Товары"		, Новый Массив);
	Результат.Вставить("Сделки"		, Новый Массив);
	Результат.Вставить("Группы"		, Новый Массив);
	Результат.Вставить("Заказы"		, Новый Массив);
	
	ТипыДанныхДляОбменаСПорталом = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Портал"			 	 , НастройкаСинхронизации.Портал);
	Запрос.УстановитьПараметр("ТипДанныхГруппаТовара", ТипыДанныхДляОбменаСПорталом.ГруппаТовара);
	
	Если Б24_СинхронизацияПовтИсп.ЕстьПользовательскоеДеревоГрупп(НастройкаСинхронизации) тогда
		
		ДеревоГрупп = Б24_СинхронизацияПовтИсп.НастройкиСинхронизацииТоваров(НастройкаСинхронизации, "ДеревоГрупп");
		
		Запрос.УстановитьПараметр("ДеревоГрупп", ДеревоГрупп);	
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Б24_ПользовательскиеГруппыТоваров.Ссылка КАК Раздел
		|ПОМЕСТИТЬ ВремГруппы
		|ИЗ
		|	Справочник.Б24_ПользовательскиеГруппыТоваров КАК Б24_ПользовательскиеГруппыТоваров
		|ГДЕ
		|	Б24_ПользовательскиеГруппыТоваров.Ссылка В ИЕРАРХИИ(&ДеревоГрупп)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Раздел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
		|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВремИдентификаторыГрупп
		|ИЗ
		|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
		|ГДЕ
		|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхГруппаТовара
		|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремГруппы.Раздел КАК Раздел,
		|	ВремИдентификаторыГрупп.Идентификатор КАК ИдентификаторГруппы
		|ПОМЕСТИТЬ ВремГруппыСИдентификаторами
		|ИЗ
		|	ВремГруппы КАК ВремГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыГрупп КАК ВремИдентификаторыГрупп
		|		ПО ВремГруппы.Раздел = ВремИдентификаторыГрупп.Объект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Раздел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Б24_ПользовательскиеГруппыТоваровТовары.Ссылка КАК Раздел,
		|	Б24_ПользовательскиеГруппыТоваровТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВремГруппыСТоварами
		|ИЗ
		|	Справочник.Б24_ПользовательскиеГруппыТоваров.Товары КАК Б24_ПользовательскиеГруппыТоваровТовары
		|ГДЕ
		|	Б24_ПользовательскиеГруппыТоваровТовары.Ссылка В ИЕРАРХИИ(&ДеревоГрупп)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Раздел
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремГруппыСТоварами.Раздел КАК Раздел,
		|	ВремГруппыСТоварами.Номенклатура КАК Номенклатура,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ВремГруппыСИдентификаторами КАК ВремГруппыСИдентификаторами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВремГруппыСТоварами КАК ВремГруппыСТоварами
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|			ПО ВремГруппыСТоварами.Номенклатура = СправочникНоменклатура.Ссылка
		|		ПО ВремГруппыСИдентификаторами.Раздел = ВремГруппыСТоварами.Раздел
		|ГДЕ
		|	ВремГруппыСИдентификаторами.ИдентификаторГруппы = NULL";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоГруппа тогда
				
				Если Номенклатура.ПринадлежитЭлементу(Выборка.Номенклатура) тогда
					Результат.Группы.Добавить(Выборка.Раздел);	
				КонецЕсли;
				
			Иначе
				
				Если Номенклатура = Выборка.Номенклатура тогда
					Результат.Группы.Добавить(Выборка.Раздел);	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе     
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);	
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВремГруппы
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Б24_ИдентификаторыОбъектов.Объект КАК Объект,
		|	Б24_ИдентификаторыОбъектов.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВремИдентификаторыГрупп
		|ИЗ
		|	РегистрСведений.Б24_ИдентификаторыОбъектов КАК Б24_ИдентификаторыОбъектов
		|ГДЕ
		|	Б24_ИдентификаторыОбъектов.ТипДанных = &ТипДанныхГруппаТовара
		|	И Б24_ИдентификаторыОбъектов.Портал = &Портал
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВремГруппы.Родитель КАК Группа,
		|	ВремИдентификаторыГрупп.Идентификатор КАК ИдентификаторГруппы
		|ИЗ
		|	ВремГруппы КАК ВремГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремИдентификаторыГрупп КАК ВремИдентификаторыГрупп
		|		ПО ВремГруппы.Родитель = ВремИдентификаторыГрупп.Объект";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторГруппы) тогда
				Результат.Группы.Добавить(Выборка.Группа);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

