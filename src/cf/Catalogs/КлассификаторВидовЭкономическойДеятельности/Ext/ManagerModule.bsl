#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Функция читает данные классификатора из макета-источника и возвращает их в виде таблицы значений.
// Макеты хранятся в макетах данного справочника (см. общую форму "ДобавлениеЭлементовВКлассификатор").
//	Параметры:
//		ИмяМакетаСписков - Строка - имя макета, из которого необходимо загружать актуальные данные классификатора.
//	Возвращаемое значение:
//		Таблица значений (код, наименование).
//
Функция ТаблицаКлассификатора(Знач ИмяМакетаСписков = "ДанныеКлассификатора") Экспорт
	
	Классификатор = Новый ТаблицаЗначений;
	Классификатор.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(8)));
	Классификатор.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	Классификатор.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Булево")); 
	
		
	Классификатор.Очистить();
	
	// Получаем параметры справочника нужные для корректного чтения классификатора.
	ДлинаКодаСправочника = Метаданные.Справочники.КлассификаторВидовЭкономическойДеятельности.ДлинаКода;
	
	// Получаем полную таблицу элементов классификатора. 
	// В таблице содержатся Код и Наименование, элементов классификатора.
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") ИЛИ Не ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
		ИспользоватьТаблицуОтбора = Ложь;
		ЭлементыКлассификатораИзМакета = Справочники.Организации.ПолучитьПараметрыФормыВыбораДляКода("ОКВЭД", Дата(1,1,1)).СписокКодов;
	КонецЕсли;
			
	// Если классификатор будем строить исходя из таблицы отбора, то нужно ее получить.
	Если ИспользоватьТаблицуОтбора Тогда
		
		ОбластьИсточникОтбора = "pril_okved_51";
		Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") ИЛИ Не ПолучитьФункциональнуюОпцию("ОтключенныйФункционал") Тогда
			ЭлементыКлассификатора = Справочники.Организации.ПолучитьПараметрыФормыВыбораДляКода("ОКВЭД", Дата(1,1,1)).СписокКодов;
		КонецЕсли;
			
		ЭлементыКлассификатораИзМакета.Индексы.Добавить("Код");
		
	Иначе
		
		ЭлементыКлассификатора = ЭлементыКлассификатораИзМакета;
		
	КонецЕсли;
	
	Если ЭлементыКлассификатора.Количество() = 0 Тогда
		Возврат Классификатор;
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыКлассификатора Цикл
		
		НоваяСтрока = Классификатор.Добавить();
		НоваяСтрока.Код   = Элемент.Код;
		НоваяСтрока.Отбор = ИспользоватьТаблицуОтбора; // Если используется таблица отбора, то в ЭлементыКлассификатора только отобранные элементы
		
		Наименование = "";
		Если Не ИспользоватьТаблицуОтбора Тогда
			Наименование = Элемент.Наименование;
		Иначе
			// В таблице отбора содержатся только коды элементов классификатора.
			// ЭлементыКлассификатора - это таблица отбора, а не таблица классификатора.
			// Поэтому наименование нужно подставить из общей таблицы.
			КлассификаторИзМакета = ЭлементыКлассификатораИзМакета.Найти(Элемент.Код, "Код");
			Если КлассификаторИзМакета <> Неопределено Тогда
				Наименование = КлассификаторИзМакета.Наименование;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Наименование = Наименование;
		
	КонецЦикла;
	
	Возврат Классификатор;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УТ 11.3.4,
// создает элементы справочника по ранее созданным кодам ОКВЭД
//
Процедура КлассификаторОКВЭД2_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Конвертация", Справочники.КлассификаторОКВЭД2.ТаблицаКонвертацииОКВЭД_ОКВЭД2());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Конвертация.КодОКВЭД,
	|	Конвертация.КодОКВЭД2
	|ПОМЕСТИТЬ Конвертация
	|ИЗ
	|	&Конвертация КАК Конвертация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Конвертация КАК Конвертация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО Конвертация.КодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО Конвертация.КодОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	КлассификаторОКВЭД2.Ссылка ЕСТЬ NULL
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура КлассификаторОКВЭД2_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
 	ПолноеИмяОбъекта = "Справочник.КлассификаторВидовЭкономическойДеятельности";
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("Конвертация", Справочники.КлассификаторОКВЭД2.ТаблицаКонвертацииОКВЭД_ОКВЭД2());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Конвертация.КодОКВЭД,
	|	Конвертация.КодОКВЭД2
	|ПОМЕСТИТЬ Конвертация
	|ИЗ
	|	&Конвертация КАК Конвертация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК Ссылка,
	|	КлассификаторВидовЭкономическойДеятельности.ВерсияДанных КАК ВерсияДанных,
	|	Конвертация.КодОКВЭД2 КАК КодОКВЭД2
	|ИЗ
	|	ВТДляОбработкиКлассификаторВидовЭкономическойДеятельности КАК ВТОбъектыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ВТОбъектыДляОбработки.Ссылка = КлассификаторВидовЭкономическойДеятельности.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Конвертация КАК Конвертация
	|		ПО Конвертация.КодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
		
	КлассификаторОКВЭД2 = Справочники.Организации.КлассификаторОКВЭД2();
	КлассификаторОКВЭД2.Индексы.Добавить("Код");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторОКВЭД2");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать данные для обработки элемента классификатора ОКВЭД: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									МетаданныеСправочника,
									Выборка.Ссылка,
									ТекстСообщения);
			Продолжить;
			
		КонецПопытки;
		
		Попытка
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если СправочникОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			КодОКВЭД2 = Выборка.КодОКВЭД2;
			ЭлементКлассификатора = Справочники.КлассификаторОКВЭД2.НайтиПоКоду(КодОКВЭД2);
			Если Не ЗначениеЗаполнено(ЭлементКлассификатора) Тогда
				
				СтрокиКлассификатора = КлассификаторОКВЭД2.НайтиСтроки(Новый Структура("Код", КодОКВЭД2));
				Если СтрокиКлассификатора.Количество() = 0 Тогда
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				СтрокаКлассификатора = СтрокиКлассификатора[0];
				НовыйЭлементКлассификатора = Справочники.КлассификаторОКВЭД2.СоздатьЭлемент();
				НовыйЭлементКлассификатора.Код = СтрокаКлассификатора.Код;
				НовыйЭлементКлассификатора.Наименование       = СтрокаКлассификатора.Наименование;
				НовыйЭлементКлассификатора.НаименованиеПолное = СтрокаКлассификатора.Наименование;
				НовыйЭлементКлассификатора.Записать();
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать элемент классификатора ОКВЭД : %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеСправочника,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
	Если Параметры.Свойство("ДанныеКлассификатора") И Параметры.ДанныеКлассификатора Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "ОбщаяФорма.ДобавлениеЭлементовВКлассификатор";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
