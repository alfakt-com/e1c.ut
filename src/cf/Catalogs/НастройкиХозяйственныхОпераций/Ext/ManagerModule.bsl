#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Обработчик первого запуска.
// Заполняет предопределенные элементы справочника "НастройкиХозяйственныхОпераций".
//
Процедура ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций(Параметры = Неопределено) Экспорт
	
	РеквизитыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("НастройкиПредопределенныхЭлементов").ПолучитьТекст();
	РеквизитыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(РеквизитыXML).Данные;
	
	СвязанныеДокументыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("СвязанныеДокументы").ПолучитьТекст();
	СвязанныеДокументыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СвязанныеДокументыXML).Данные;
	ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументыТаблица);
	
	ФункциональныеОпцииXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("ФункциональныеОпции").ПолучитьТекст();
	ФункциональныеОпцииТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ФункциональныеОпцииXML).Данные;
	
	Для каждого Реквизиты Из РеквизитыТаблица Цикл
		ID = Реквизиты.ID;
		Объект = Справочники.НастройкиХозяйственныхОпераций[ID].ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Реквизиты);
		
		// На случай если региональные настройки представления логическийх значений отличаются от типовых.
		Объект.ИспользоватьВБюджетировании = Реквизиты.ИспользоватьВБюджетировании = "Да";
		Объект.ИспользоватьВМеждународномУчете = Реквизиты.ИспользоватьВМеждународномУчете = "Да";
		Объект.ИспользоватьДляВыбора = Реквизиты.ИспользоватьДляВыбора = "Да";
		Объект.ИспользоватьВРеестреДокументов = Реквизиты.ИспользоватьВРеестреДокументов = "Да";
		
		Приход = Реквизиты.Приход;
		Если ЗначениеЗаполнено(Приход) Тогда
			Объект.Приход = Перечисления.ТипыДанныхУчета[Приход];
		КонецЕсли;
		
		Расход = Реквизиты.Расход;
		Если ЗначениеЗаполнено(Расход) Тогда
			Объект.Расход = Перечисления.ТипыДанныхУчета[Расход];
		КонецЕсли;
		
		Хозоперация = Реквизиты.ID;
		Если ЗначениеЗаполнено(Хозоперация) Тогда
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации[Хозоперация];
		КонецЕсли;
		
		Объект.Документы.Очистить();
		НайденныеСтроки = СвязанныеДокументыТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Свернуть("ПредставлениеДокумента,ИдентификаторОбъектаМетаданных");
		НайденныеСтроки.Сортировать("ПредставлениеДокумента");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторОбъектаМетаданных) Тогда
				ЗаполнитьЗначенияСвойств(Объект.Документы.Добавить(), НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Объект.ФункциональныеОпции.Очистить();
		НайденныеСтроки = ФункциональныеОпцииТаблица.Скопировать(Новый Структура("OwnerID", ID));
		НайденныеСтроки.Сортировать("ИмяФункциональнойОпции");
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = Объект.ФункциональныеОпции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			Если Метаданные.ФункциональныеОпции.Найти(НайденнаяСтрока.ИмяФункциональнойОпции) = Неопределено Тогда
				НоваяСтрока.ИмяФункциональнойОпции = "УправлениеПредприятием";
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументы)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.OwnerID,
	|	Т.ИмяДокумента КАК ИмяДокумента,
	|	Т.ПредставлениеДокумента
	|ПОМЕСТИТЬ втСвязанныеДокументы
	|ИЗ
	|	&СвязанныеДокументы КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязанныеДокументы.OwnerID,
	|	втСвязанныеДокументы.ИмяДокумента,
	|	втСвязанныеДокументы.ПредставлениеДокумента,
	|	ИдентификаторыМетаданных.Ссылка КАК ИдентификаторОбъектаМетаданных
	|ИЗ
	|	втСвязанныеДокументы КАК втСвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|		ПО ВЫРАЗИТЬ(втСвязанныеДокументы.ИмяДокумента КАК СТРОКА(255)) = ИдентификаторыМетаданных.Имя
	|			И ИдентификаторыМетаданных.Родитель.Наименование = ""Документы""
	|");
	
	Запрос.УстановитьПараметр("СвязанныеДокументы", СвязанныеДокументы);
	СвязанныеДокументы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиХозяйственныхОперацийДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций.Документы КАК НастройкиХозяйственныхОперацийДокументы
	|ГДЕ
	|	НастройкиХозяйственныхОперацийДокументы.Ссылка В (ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РеализацияОСсОтложеннымПереходомПрав),
	|													  ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМА),
	|													  ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАвДругуюОрганизацию),
	|													  ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАизДругойОрганизации))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	СвязанныеДокументыXML = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет("СвязанныеДокументы").ПолучитьТекст();
	СвязанныеДокументыТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СвязанныеДокументыXML).Данные;
	ДобавитьИдентификаторыМетаданныхДокументов(СвязанныеДокументыТаблица);
	
	ПолноеИмяОбъекта = "Справочник.НастройкиХозяйственныхОпераций";
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ОбъектыДляОбработки.Ссылка = НастройкиХозяйственныхОпераций.Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
    Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ID = СправочникОбъект.ИмяПредопределенныхДанных;
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			
			СправочникОбъект.Документы.Очистить();
			НайденныеСтроки = СвязанныеДокументыТаблица.Скопировать(Новый Структура("OwnerID", ID));
			НайденныеСтроки.Свернуть("ПредставлениеДокумента,ИдентификаторОбъектаМетаданных");
			НайденныеСтроки.Сортировать("ПредставлениеДокумента");
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(НайденнаяСтрока.ИдентификаторОбъектаМетаданных) Тогда
					ЗаполнитьЗначенияСвойств(СправочникОбъект.Документы.Добавить(), НайденнаяСтрока);
				КонецЕсли;
				ОбъектИзменен = Истина;
			КонецЦикла;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
