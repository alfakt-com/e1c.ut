
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации 	= Параметры.НастройкаСинхронизации;	
	ТипЗапуска 				= Параметры.ТипЗапуска; 
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииКонтрагентов") тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСинхронизацииКонтрагентов = НастройкиОбмена.НастройкиСинхронизацииКонтрагентов;
	
	СтруктураССхемамиК = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьСтруктуруСхемКомпоновки();
	
	
	НастройкиКомпоновкиДанныхКонтрагентов = Неопределено;
	НастройкиСинхронизацииКонтрагентов.Свойство("НастройкиКомпоновкиДанныхКонтрагентов", НастройкиКомпоновкиДанныхКонтрагентов);

	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Компании, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхКонтрагентов);
	КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	НастройкиСинхронизацииКонтрагентов.Свойство("ГруппаДляНовыхКонтрагентов"						, ГруппаДляНовыхКонтрагентов);
	НастройкиСинхронизацииКонтрагентов.Свойство("ВыгружатьПользовательскиеПоляКомпанийИКонтактов"	, ВыгружатьПользовательскиеПоляКомпанийИКонтактов);
	НастройкиСинхронизацииКонтрагентов.Свойство("ЗагружатьПользовательскиеПоляКомпанийИКонтактов"	, ЗагружатьПользовательскиеПоляКомпанийИКонтактов);
	
	НастройкиСинхронизацииКонтрагентов.Свойство("ПорядокИдентификацииФизЛиц", ПорядокИдентификацииФизЛиц);
	НастройкиСинхронизацииКонтрагентов.Свойство("ПорядокИдентификацииЮрЛиц"	, ПорядокИдентификацииЮрЛиц);
	
	НастройкиСинхронизацииКонтрагентов.Свойство("ТипыКонтрагентовДляКомпаний"	, ТипыКонтрагентовДляКомпаний);
	НастройкиСинхронизацииКонтрагентов.Свойство("ТипыКонтрагентовДляКонтактов"	, ТипыКонтрагентовДляКонтактов);
	
	НастройкиСинхронизацииКонтрагентов.Свойство("ЗагружатьКонтрагентов", ЗагружатьКонтрагентов);
	НастройкиСинхронизацииКонтрагентов.Свойство("ОбновлятьКонтрагентов", ОбновлятьКонтрагентов);
	НастройкиСинхронизацииКонтрагентов.Свойство("ВыгружатьКонтрагентов", ВыгружатьКонтрагентов);
	
	Пресеты.Загрузить(НастройкиСинхронизацииКонтрагентов.Пресеты);
	
	НастройкиСинхронизацииСчетов = НастройкиОбмена.НастройкиСинхронизацииСчетов;
	НастройкиСинхронизацииСделок = НастройкиОбмена.НастройкиСинхронизацииСделок;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеЭлементов();
	
	ЗагружатьКонтрагентовЭталон = ЗагружатьКонтрагентов;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.КомпанияЧастноеЛицо"));
	ОписаниеТиповВК = Новый ОписаниеТипов(Массив);
	
	Элементы.ТипыКонтрагентовКомпанииЗначение.ОграничениеТипа = ОписаниеТиповВК;
	Элементы.ТипыКонтрагентовКонтактыЗначение.ОграничениеТипа = ОписаниеТиповВК;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЕстьШаблоны = Ложь;		
		
	Для каждого ТекСтрока из Пресеты Цикл
			
		Если ЗначениеЗаполнено(ТекСтрока.ТипКонтрагента) тогда
			ЕстьШаблоны = Истина;
			Прервать;
		КонецЕсли;					
	КонецЦикла;
	
	Если НЕ ЕстьШаблоны  тогда	
		ПоказатьОповещениеПользователя("Важно",,"Не настроено сопоставление шаборнов и типов контрагентов",, СтатусОповещенияПользователя.Важное);			
		//Отказ = Истина; 	
		//Возврат;		
	КонецЕсли;			
	
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по контрагентам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		СохранениеНастроек();
        Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПорядокИдентификацииЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДобавитьСписокВЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокВЭлемент(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("Внешний идентификатор");
	Элемент.СписокВыбора.Добавить("Наименование");
	Элемент.СписокВыбора.Добавить("Email");
	Элемент.СписокВыбора.Добавить("Телефон");
	Элемент.СписокВыбора.Добавить("Не использовать");
	Элемент.СписокВыбора.Добавить("БИН / ИИН");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	ОбновитьОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьПользовательскиеПоляКомпанийИКонтактовПриИзменении(Элемент)
	ОбновитьОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ТипыКонтрагентовКомпанииКонтактаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ (ТипыКонтрагентовДляКомпаний.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено И ТипыКонтрагентовДляКонтактов.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено) тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Нельзя указать один и тот же тип контрагента 2 раза");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	СохранениеНастроек();
	
	Если ЗагружатьКонтрагентовЭталон <> ЗагружатьКонтрагентов тогда
		
		Успешно = Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
		
		Если НЕ Успешно тогда
			ЗагружатьКонтрагентов = ЗагружатьКонтрагентовЭталон; 	
		Иначе
			Закрыть();
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПресетыСПортала(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса = "&filter[ENTITY_TYPE_ID]=8&filter[ACTIVE]=Y";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.requisite.preset.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета <> Неопределено тогда
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
		
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				НайденныеСтроки = Пресеты.НайтиСтроки(Новый Структура("ИдШаблона", ТекЭлемент.Получить("ID")));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = Пресеты.Добавить();
					НоваяСтрока.НаименованиеШаблона = ТекЭлемент.Получить("NAME");
					НоваяСтрока.ИдШаблона = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;	
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииКонтрагентов") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииКонтрагентов;	
	КонецЕсли;
	      
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ГруппаДляНовыхКонтрагентов"						, ГруппаДляНовыхКонтрагентов);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьПользовательскиеПоляКомпанийИКонтактов"	, ВыгружатьПользовательскиеПоляКомпанийИКонтактов);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьПользовательскиеПоляКомпанийИКонтактов"	, ЗагружатьПользовательскиеПоляКомпанийИКонтактов);
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ПорядокИдентификацииФизЛиц"	, ПорядокИдентификацииФизЛиц);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ПорядокИдентификацииЮрЛиц"	, ПорядокИдентификацииЮрЛиц);
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ТипыКонтрагентовДляКомпаний"	, ТипыКонтрагентовДляКомпаний);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ТипыКонтрагентовДляКонтактов", ТипыКонтрагентовДляКонтактов);
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "НастройкиКомпоновкиДанныхКонтрагентов"	, КомпоновщикНастроекКомпоновкиДанныхКонтрагентов.ПолучитьНастройки());
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьКонтрагентов"	, ЗагружатьКонтрагентов);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ОбновлятьКонтрагентов"	, ОбновлятьКонтрагентов);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьКонтрагентов"	, ВыгружатьКонтрагентов);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Пресеты"	, Пресеты.Выгрузить());
		
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииКонтрагентов") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииКонтрагентов", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииКонтрагентов = СтруктураНастроек;
	КонецЕсли;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементов()
	
	Если ТипЗапуска = "Загрузка" тогда
		
		Элементы.ЗагружатьКонтрагентов.Видимость		 = Ложь;
		Элементы.ВыгружатьКонтрагентов.Видимость 		 = Ложь;
		Элементы.НастройкаВыгрузкиКонтрагентов.Видимость = Ложь;
		
		Элементы.Шаблоны.Поведение = ПоведениеОбычнойГруппы.Обычное;
		
	Иначе
		ЭтаФОрма.Заголовок = "Настройка синхронизации контрагентов";
		Элементы.НастройкиЗагрузкиКонтрагентов.Доступность = ЗагружатьКонтрагентов;	
		Элементы.НастройкаВыгрузкиКонтрагентов.Доступность = ВыгружатьКонтрагентов;
	КонецЕсли;	
	//Элементы.ЗагрузитьПользовательскиеПоля.Видимость = ЗагружатьПользовательскиеПоляКомпанийИКонтактов;
	
КонецПроцедуры

#КонецОбласти
