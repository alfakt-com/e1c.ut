
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	ТипИсточника 			 = Параметры.ТипИсточника;
		
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииЗаказов = НастройкиОбмена.НастройкиСинхронизацииЗаказов;
	
	Если НастройкиСинхронизацииЗаказов.Свойство("ИнформацияОСтатусах") тогда
		
		ИнформацияОСтатусах = НастройкиСинхронизацииЗаказов.ИнформацияОСтатусах;
		
		ИсточникСтатусовЗаказов 	= ИнформацияОСтатусах.ИсточникСтатусовЗаказов;
		ИсточникСтатусовОтгрузок 	= ИнформацияОСтатусах.ИсточникСтатусовОтгрузок;
		
		СвойствоЗаказа 		= ИнформацияОСтатусах.СвойствоЗаказа;
		СвойствоОтгрузки 	= ИнформацияОСтатусах.СвойствоОтгрузки;
			
		ПереводитьВСтатусКогдаОплаченЗаказ 		= ИнформацияОСтатусах.ПереводитьВСтатусКогдаОплаченЗаказ;
		ПереводитьВСтатусКогдаОтгруженЗаказ 		= ИнформацияОСтатусах.ПереводитьВСтатусКогдаОтгруженЗаказ;
		ПереводитьВСтатусКогдаОплаченаОтгрузка 	= ИнформацияОСтатусах.ПереводитьВСтатусКогдаОплаченаОтгрузка;
		ПереводитьВСтатусКогдаОтгруженаОтгрузка 	= ИнформацияОСтатусах.ПереводитьВСтатусКогдаОтгруженаОтгрузка;		
		
		СоответствияСЗначениямиСвойствЗаказа.Загрузить(ИнформацияОСтатусах.СоответствияСЗначениямиСвойствЗаказа);
		СоответствияССостояниямиЗаказа.Загрузить(ИнформацияОСтатусах.СоответствияССостояниямиЗаказа);
		СоответствияССтатусамиЗаказа.Загрузить(ИнформацияОСтатусах.СоответствияССтатусамиЗаказа);		
			
		СоответствияСЗначенямиСвойствОтгрузки.Загрузить(ИнформацияОСтатусах.СоответствияСЗначенямиСвойствОтгрузки);
		СоответствияССтатусамиОтгрузки.Загрузить(ИнформацияОСтатусах.СоответствияССтатусамиОтгрузки);				
		
	Иначе
		ИсточникСтатусовЗаказов 	= "СтатусыЗаказов";
		ИсточникСтатусовОтгрузок 	= "СвойствоОтгрузок";
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по статусам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда		
		Если (ТипИсточника = "Заказ" И ИсточникСтатусовЗаказов = "СвойствоЗаказов" И НЕ ЗначениеЗаполнено(СвойствоЗаказа))
		ИЛИ   (ТипИсточника = "Отгрузка" И ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" И НЕ ЗначениеЗаполнено(СвойствоОтгрузки))	тогда
			ПоказатьПредупреждение(,"Не указано свойство заказов или доставок. Запись настроек невозможна");
		Иначе		
			НужноЗакрытьОкно = Истина;
			СохранениеНастроек();
        		Закрыть();
       		 КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Если (ТипИсточника = "Заказ" И ИсточникСтатусовЗаказов = "СвойствоЗаказов" И НЕ ЗначениеЗаполнено(СвойствоЗаказа))
	ИЛИ (ТипИсточника = "Отгрузка" И ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" И НЕ ЗначениеЗаполнено(СвойствоОтгрузки))	тогда
		ПоказатьПредупреждение(,"Не указано свойство счета. Запись настроек невозможна");
	Иначе
		СохранениеНастроек();
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусыЗаказа(Команда)
		
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	                                                                                             
	ОбщиеНастройки.Измерение2 = "Получение списка статусов заказов.";
	
	ТелоHTTPЗапроса = "&filter[type]=O&select[]=type&select[]=id";	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/sale.status.list", ТелоHTTPЗапроса); 
	
	СформированныеДанные = новый Массив;
	
	Если СтруктураОтвета <> Неопределено тогда
		
		result = СтруктураОтвета.Получить("result"); 
		
		Если result <> Неопределено тогда
			
			statuses = result.Получить("statuses"); 
			
			Если statuses <> Неопределено тогда
				Для каждого ТекЭлемент из statuses Цикл 
					СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер("sale.status.get?statusId=" + Формат(ТекЭлемент.Получить("id"),"ЧГ=0")));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СформированныеДанные.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса= "";
	Для каждого ТекЭлемент из СформированныеДанные Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета <> Неопределено тогда
		
		result = СтруктураОтвета.Получить("result");
		Если result <> Неопределено тогда
			result2 = result.Получить("result");
			
			Если result2 <> Неопределено тогда
				
				мТаблицы = Новый Массив;
				мТаблицы.Добавить(СоответствияСЗначениямиСвойствЗаказа);
				мТаблицы.Добавить(СоответствияССостояниямиЗаказа);
				мТаблицы.Добавить(СоответствияССтатусамиЗаказа);
				
				Для Каждого status из result2 Цикл
					
					ТекСтатус  	= status.Получить("status");
					
				    ИдСтатуса 	= Формат(ТекСтатус.Получить("id"),"ЧГ=0");
					Описания 	= ТекСтатус.Получить("langs");
					НазваниеСтатуса = "";
					Если Описания <> Неопределено тогда
						
						Для Каждого ТекОписание из Описания Цикл
							
							Если Б24_ОбщегоНазначенияСервер.ПолучитьЛокализациюБитрикс24() = ТекОписание.Получить("lid") тогда
								НазваниеСтатуса = ТекОписание.Получить("name");	
	                     	КонецЕсли;
							
						КонецЦикла;
						
						Если НазваниеСтатуса = "" И Описания.Количество() > 0 тогда
							НазваниеСтатуса = Описания[0].Получить("name");	
						КонецЕсли;
							
					КонецЕсли;
					
					Для Каждого ТекТаблица из мТаблицы Цикл
						
						НайденныеСтроки = ТекТаблица.НайтиСтроки(Новый Структура("ИдСтатуса", ИдСтатуса));
						
						Если НайденныеСтроки.количество() = 0 тогда
							НоваяЗапись = ТекТаблица.Добавить();
							
							НоваяЗапись.ИдСтатуса			= ИдСтатуса;
							НоваяЗапись.НазваниеСтатуса 	= НазваниеСтатуса;
						Иначе
							
							Для Каждого ТекСтрокаТаблицы из ТекТаблица Цикл
								Если ТекСтрокаТаблицы.ИдСтатуса = ИдСтатуса тогда
									ТекСтрокаТаблицы.НазваниеСтатуса 	 = НазваниеСтатуса; 
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли; 						
					КонецЦикла; 					
				КонецЦикла;    				
			КонецЕсли;    
		КонецЕсли;    		
	КонецЕсли;
	
	ОбновлениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусыОтгрузок(Команда)
			
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	                                                                                             
	ОбщиеНастройки.Измерение2 = "Получение списка статусов отгрузок.";
	
	ТелоHTTPЗапроса = "&filter[type]=D&select[]=type&select[]=id";	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/sale.status.list", ТелоHTTPЗапроса); 
	
	СформированныеДанные = новый Массив;
	
	Если СтруктураОтвета <> Неопределено тогда
		
		result = СтруктураОтвета.Получить("result"); 
		
		Если result <> Неопределено тогда
			
			statuses = result.Получить("statuses"); 
			
			Если statuses <> Неопределено тогда
				Для каждого ТекЭлемент из statuses Цикл 
					СформированныеДанные.Добавить("cmd[]=" + Б24_RestApiВызовСервера.ЗакодироватьСтрокуСервер("sale.status.get?statusId=" + Формат(ТекЭлемент.Получить("id"),"ЧГ=0")));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СформированныеДанные.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса= "";
	Для каждого ТекЭлемент из СформированныеДанные Цикл
		ТелоHTTPЗапроса = ТелоHTTPЗапроса + "&" + ТекЭлемент;	
	КонецЦикла;
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПорталЧерезBatch(ОбщиеНастройки, ТелоHTTPЗапроса);
	
	Если СтруктураОтвета <> Неопределено тогда
		
		result = СтруктураОтвета.Получить("result");
		Если result <> Неопределено тогда
			result2 = result.Получить("result");
			
			Если result2 <> Неопределено тогда
				
				мТаблицы = Новый Массив;
				мТаблицы.Добавить(СоответствияСЗначенямиСвойствОтгрузки);
				мТаблицы.Добавить(СоответствияССтатусамиОтгрузки);
				
				Для Каждого status из result2 Цикл
					
					ТекСтатус  	= status.Получить("status");

				    ИдСтатуса 	= Формат(ТекСтатус.Получить("id"),"ЧГ=0");
					Описания 	= ТекСтатус.Получить("langs");
					
					НазваниеСтатуса = "";
					Если Описания <> Неопределено тогда
						
						Для Каждого ТекОписание из Описания Цикл
							
							Если Б24_ОбщегоНазначенияСервер.ПолучитьЛокализациюБитрикс24() = ТекОписание.Получить("lid") тогда
								НазваниеСтатуса = ТекОписание.Получить("name");	
	                     	КонецЕсли;
							
						КонецЦикла;
						
						Если НазваниеСтатуса = "" И Описания.Количество() > 0 тогда
							НазваниеСтатуса = Описания[0].Получить("name");	
						КонецЕсли;
							
					КонецЕсли;
					
					Для Каждого ТекТаблица из мТаблицы Цикл
						
						НайденныеСтроки = ТекТаблица.НайтиСтроки(Новый Структура("ИдСтатуса", ИдСтатуса));
						
						Если НайденныеСтроки.количество() = 0 тогда
							НоваяЗапись = ТекТаблица.Добавить();
							
							НоваяЗапись.ИдСтатуса			= ИдСтатуса;
							НоваяЗапись.НазваниеСтатуса 	= НазваниеСтатуса;
						Иначе
							
							Для Каждого ТекСтрокаТаблицы из ТекТаблица Цикл
								Если ТекСтрокаТаблицы.ИдСтатуса = ИдСтатуса тогда
									ТекСтрокаТаблицы.НазваниеСтатуса 	 = НазваниеСтатуса; 
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли; 						
					КонецЦикла; 					
				КонецЦикла;    				
			КонецЕсли;    
		КонецЕсли;    		
	КонецЕсли;
	

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ИсточникСтатусовЗаказовПриИзменении(Элемент)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСтатусовОтгрузокПриИзменении(Элемент)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

#КонецОбласти


#Область Прочее

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииЗаказов") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииЗаказов;	
	КонецЕсли;
	
	СтруктураИнформацииОСтатусах = Новый Структура;
	СтруктураИнформацииОСтатусах.Вставить("ИсточникСтатусовЗаказов"	, ИсточникСтатусовЗаказов);
	СтруктураИнформацииОСтатусах.Вставить("ИсточникСтатусовОтгрузок"	, ИсточникСтатусовОтгрузок);
	
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОплаченЗаказ"		, ПереводитьВСтатусКогдаОплаченЗаказ);
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОплаченаОтгрузка"	, ПереводитьВСтатусКогдаОплаченаОтгрузка);	
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОтгруженЗаказ"		, ПереводитьВСтатусКогдаОтгруженЗаказ);
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОтгруженаОтгрузка"	, ПереводитьВСтатусКогдаОтгруженаОтгрузка);	
	
	СтруктураИнформацииОСтатусах.Вставить("СвойствоЗаказа"	, СвойствоЗаказа);
	СтруктураИнформацииОСтатусах.Вставить("СвойствоОтгрузки"	, СвойствоОтгрузки);		

	СтруктураИнформацииОСтатусах.Вставить("СоответствияСЗначениямиСвойствЗаказа"	, СоответствияСЗначениямиСвойствЗаказа.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("СоответствияСЗначенямиСвойствОтгрузки"	, СоответствияСЗначенямиСвойствОтгрузки.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("СоответствияССостояниямиЗаказа"			, СоответствияССостояниямиЗаказа.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("СоответствияССтатусамиЗаказа"			, СоответствияССтатусамиЗаказа.Выгрузить());	
	СтруктураИнформацииОСтатусах.Вставить("СоответствияССтатусамиОтгрузки"			, СоответствияССтатусамиОтгрузки.Выгрузить());
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИнформацияОСтатусах"	, СтруктураИнформацииОСтатусах);
			
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииЗаказов") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииЗаказов", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииЗаказов = СтруктураНастроек;
	КонецЕсли;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();

	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЭлементовФормы()

	Если ТипИсточника = "Заказ" тогда
		
		Элементы.СтраницыТипыИсточников.ТекущаяСтраница = Элементы.Заказы;		
	
		Если ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда			
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаСвойствоЗаказа;			
		ИначеЕсли ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда 
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаСостояниеЗаказа;
		Иначе
			ИсточникСтатусовЗаказов = "СтатусыЗаказов";	
			Элементы.СтраницыЗаказ.ТекущаяСтраница = Элементы.СтраницаСтатусЗаказа;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = "Отгрузка" тогда
		
		Элементы.СтраницыТипыИсточников.ТекущаяСтраница = Элементы.Отгрузки;		

		Если ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" тогда			
			Элементы.СтраницыОтгрузка.ТекущаяСтраница = Элементы.СтраницаСвойствоОтгрузки;			
		ИначеЕсли ИсточникСтатусовОтгрузок = "СтатусыОтгрузок" тогда 
			Элементы.СтраницыОтгрузка.ТекущаяСтраница = Элементы.СтраницаСтатусОтгрузки;
		КонецЕсли;
			
	КонецЕсли;
	
	ОбновитьИнформациюОПринудительныхСтатусах();
	
КонецПроцедуры

Процедура ОбновитьИнформациюОПринудительныхСтатусах()
	
	Если ТипИсточника = "Заказ" тогда
		
		Если ИсточникСтатусовЗаказов = "СвойствоЗаказов" тогда
			тзнСтатусов = СоответствияСЗначениямиСвойствЗаказа;	
		ИначеЕсли ИсточникСтатусовЗаказов = "СостоянияЗаказов" тогда
			тзнСтатусов = СоответствияССостояниямиЗаказа; 	
		ИначеЕсли ИсточникСтатусовЗаказов = "СтатусыЗаказов" тогда
			тзнСтатусов = СоответствияССтатусамиЗаказа; 	
		КонецЕсли;
		
		Элементы.ПереводитьВСтатусКогдаОплаченЗаказ.СписокВыбора.Очистить();
		Элементы.ПереводитьВСтатусКогдаОтгруженЗаказ.СписокВыбора.Очистить();
		
		Для Каждого ТекСтрока из тзнСтатусов Цикл
			Элементы.ПереводитьВСтатусКогдаОплаченЗаказ.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
			Элементы.ПереводитьВСтатусКогдаОтгруженЗаказ.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = "Отгрузка" тогда
		
		Если ИсточникСтатусовОтгрузок = "СвойствоОтгрузок" тогда
			тзнСтатусов = СоответствияСЗначенямиСвойствОтгрузки;	
		ИначеЕсли ИсточникСтатусовОтгрузок = "СостоянияОтгрузок" тогда
			тзнСтатусов = СоответствияССтатусамиОтгрузки; 	
		КонецЕсли;
		
		Элементы.ПереводитьВСтатусКогдаОплаченаОтгрузка.СписокВыбора.Очистить();
		Элементы.ПереводитьВСтатусКогдаОтгруженаОтгрузка.СписокВыбора.Очистить();
		
		Для Каждого ТекСтрока из тзнСтатусов Цикл
			Элементы.ПереводитьВСтатусКогдаОплаченаОтгрузка.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
			Элементы.ПереводитьВСтатусКогдаОтгруженаОтгрузка.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти
