
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	Элементы.Склад.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");

	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииТоваров") тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСинхронизацииТоваров = НастройкиОбмена.НастройкиСинхронизацииТоваров;	
	
	НастройкиСинхронизацииТоваров.Свойство("ВыгружатьТовары"			, ВыгружатьТовары);
	
	НастройкиСинхронизацииТоваров.Свойство("ВыгружатьКартинкиИФайлы"	, ВыгружатьКартинкиИФайлы);
	НастройкиСинхронизацииТоваров.Свойство("ВыгружатьШтрихкоды"			, ВыгружатьШтрихкоды);
	НастройкиСинхронизацииТоваров.Свойство("ВыгружатьПланируемуюДатуПоступления", ВыгружатьПланируемуюДатуПоступления);
	
	НастройкиСинхронизацииТоваров.Свойство("Склад"		, Склад);
	НастройкиСинхронизацииТоваров.Свойство("ТипЦены"	, Прайс);
	
	НастройкиСинхронизацииТоваров.Свойство("ЗагружатьТовары"		, ЗагружатьТовары);
	НастройкиСинхронизацииТоваров.Свойство("ЗагружатьКартинкиИФайлы", ЗагружатьКартинкиИФайлы);
	НастройкиСинхронизацииТоваров.Свойство("ОбновлятьТовары"		, ОбновлятьТовары);
	
	НастройкиСинхронизацииТоваров.Свойство("ИдентификаторКаталога"	, ИдентификаторКаталога);
	НастройкиСинхронизацииТоваров.Свойство("ДеревоГрупп"			, ДеревоГрупп);
	
	СтавкиНДС.Загрузить(НастройкиСинхронизацииТоваров.СтавкиНДС);
	
	НастройкиСинхронизацииТоваров.Свойство("НастройкиКомпоновкиДанныхТоваров", НастройкиКомпоновкиДанныхТоваров);

	НастройкиСинхронизацииСчетов = НастройкиОбмена.НастройкиСинхронизацииСчетов;
	НастройкиСинхронизацииСделок = НастройкиОбмена.НастройкиСинхронизацииСделок;

	//Если (НастройкиСинхронизацииСчетов.ВыгружатьСчета И НастройкаСинхронизации.СинхронизацияСчетов) 
	//	ИЛИ (НастройкиСинхронизацииСделок.ВыгружатьСделки И НастройкаСинхронизации.СинхронизацияСделок) тогда
	//	Если НЕ ВыгружатьТовары  тогда
	//		ВыгружатьТовары = Истина;
	//		Сообщить("Принудительно установлено, чтобы товары выгружались из 1С");	
	//	КонецЕсли;
	//	Элементы.ВыгружатьТовары.Доступность = Ложь;
	//КонецЕсли;
	//
	//Если (НастройкиСинхронизацииСчетов.ЗагружатьСчета И НастройкаСинхронизации.СинхронизацияСчетов)
	//	ИЛИ (НастройкиСинхронизацииСделок.ЗагружатьСделки И НастройкаСинхронизации.СинхронизацияСделок) тогда
	//	Если НЕ ЗагружатьТовары  тогда
	//	ЗагружатьТовары = Истина;
	//	Сообщить("Принудительно установлено, чтобы товары загружались в 1С");	
	//	КонецЕсли;
	//	Элементы.ЗагружатьТовары.Доступность = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеЭлементов();
	
	ЗагружатьТоварыЭталон = ЗагружатьТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДеревоГрупп" тогда
		ДеревоГрупп = Параметр;
		СохранениеНастроек();
	КонецЕсли;

КонецПроцедуры
	

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по товарам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		
		Если НЕ ПроверкаПередЗаписьюНастроек() тогда
			СохранениеНастроек();
	        Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Если НЕ ПроверкаПередЗаписьюНастроек() тогда
		
		СохранениеНастроек();
		
		Если ЗагружатьТоварыЭталон <> ЗагружатьТовары тогда
			
			Успешно = Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
			
			Если НЕ Успешно тогда
				ЗагружатьТовары = ЗагружатьТоварыЭталон; 	
			Иначе
				Закрыть();
			КонецЕсли;
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтбор(Команда)
		
	ПараметрыФормы = Новый Структура("НастройкаКомпоновки", НастройкиКомпоновкиДанныхТоваров);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаНастройкиОтбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("НастроитьОтборНоменклатурыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
    Если Результат <> Неопределено тогда
        Модифицированность = Истина;
		НастройкиКомпоновкиДанныхТоваров = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДеревоГрупп(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДеревоГрупп"	, ДеревоГрупп); 
	ПараметрыФормы.Вставить("Наименование"	, Б24_ОбщегоНазначенияСервер.ПолучитьРеквизитОбъекта(НастройкаСинхронизации, "Наименование"));
	
	ОткрытьФорму("Справочник.Б24_ПользовательскиеГруппыТоваров.Форма.НастройкаДереваГрупп", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавлениеИзмененияСвойстваНаСервере(ОбщиеНастройки)
	
	НаборЗаписей = РегистрыСведений.Б24_ТаблицаИзменений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипДанных.Установить(ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
	НаборЗаписей.Записать();       
	
	НаборЗаписей = РегистрыСведений.Б24_ТаблицаИзменений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипДанных.Установить(ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара);
	НаборЗаписей.Записать();             
	
	СвойствоВидНоменклатуры = Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоВидаНоменклатурыБитрикс24(Истина);
	
	Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ДобавитьОбъектВТаблицуИзменений(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара, СвойствоВидНоменклатуры);
	Б24_СинхронизацияРегистрацияИзмененийВызовСервера.ДобавитьОбъектВТаблицуИзменений(ОбщиеНастройки.НастройкаСинхронизации, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара, СвойствоВидНоменклатуры);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыгрузитьВидыНоменклатуры(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьНастройкиСинхронизации(НастройкаСинхронизации, Ложь, 2);  
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройки.Измерение2 = "Ручная выгрузка данных";
	ОбщиеНастройки.Измерение3 = "Полная выгрузка свойства ""Категории номенклатуры""";
	
	ДобавлениеИзмененияСвойстваНаСервере(ОбщиеНастройки);
	
	ОбщиеНастройки.ВремяЗапускаВМиллисекундах = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	
	Б24_СинхронизацияКлиентСервер.СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.СвойствоТовара);
	Б24_СинхронизацияКлиентСервер.СформироватьИОтправить(ОбщиеНастройки, ОбщиеНастройки.ТипыОбъектовОбмена.ЗначениеСвойстваТовара);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНДССПортала(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройки.Измерение2 = "Получение списка ставок НДС на портале.";
	
	ТелоHTTPЗапроса = "&filter[ACTIVE]=Y";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.vat.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета <> Неопределено тогда
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
		
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				НайденныеСтроки = СтавкиНДС.НайтиСтроки(Новый Структура("ИдСтавки", ТекЭлемент.Получить("ID")));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = СтавкиНДС.Добавить();
					НоваяСтрока.НаименованиеСтавкиНДС = ТекЭлемент.Получить("NAME");
					НоваяСтрока.ИдСтавки = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;	
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыгружатьОбъектПриИзменении(Элемент)
	
	ОбновитьОтображениеЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементов()
	
	 Элементы.НастройкиВыгрузкиИнформацииОТоварах.Доступность 	= ВыгружатьТовары;	
	 Элементы.НастройкиЗагрузкиИнформацииОТоварах.Доступность 	= ЗагружатьТовары;	
	 
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаКлиенте
Функция ПроверкаПередЗаписьюНастроек()
	
	Результат = Ложь;
	
	Если ВыгружатьТовары И НЕ ЗначениеЗаполнено(Прайс) тогда
		ПоказатьОповещениеПользователя("Не указан прайс лист. Настройки не сохранены!!!");
		Результат = Истина;	
	КонецЕсли;

	НужноЗакрытьОкно = НЕ Результат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииТоваров") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииТоваров;	
	КонецЕсли;
	
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьТовары"			, ВыгружатьТовары);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьТовары"			, ЗагружатьТовары);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьКартинкиИФайлы"	, ВыгружатьКартинкиИФайлы);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьШтрихкоды"		, ВыгружатьШтрихкоды);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Склад"					, Склад);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ТипЦены"					, Прайс);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьКартинкиИФайлы"	, ЗагружатьКартинкиИФайлы);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ОбновлятьТовары"			, ОбновлятьТовары);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИдентификаторКаталога"	, ИдентификаторКаталога);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ДеревоГрупп"				, ДеревоГрупп);
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьПланируемуюДатуПоступления", ВыгружатьПланируемуюДатуПоступления);
		
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "НастройкиКомпоновкиДанныхТоваров", НастройкиКомпоновкиДанныхТоваров);
		Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "СтавкиНДС"	, СтавкиНДС.Выгрузить());
		
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииТоваров") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииТоваров", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииТоваров = СтруктураНастроек;
	КонецЕсли;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти
