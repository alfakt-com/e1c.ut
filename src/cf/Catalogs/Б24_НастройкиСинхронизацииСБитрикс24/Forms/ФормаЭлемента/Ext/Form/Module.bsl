
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") тогда
		НастройкаСинхронизации = Параметры.Ключ;
		
		Наименование 				= НастройкаСинхронизации.Наименование;
		Портал 						= НастройкаСинхронизации.Портал;
		СпособСинхронизацииДанных 	= НастройкаСинхронизации.СпособСинхронизацииДанных;
		ПорядокВыполненияСинхронизации= НастройкаСинхронизации.ПорядокВыполненияСинхронизации;
		ИдентификаторИсточника 		= НастройкаСинхронизации.ИдентификаторИсточника;
		
		СинхронизацияКонтрагентов 	= НастройкаСинхронизации.СинхронизацияКонтрагентов;
		СинхронизацияТоваров 		= НастройкаСинхронизации.СинхронизацияТоваров;
		СинхронизацияСделок 		= НастройкаСинхронизации.СинхронизацияСделок;
		СинхронизацияСчетов 		= НастройкаСинхронизации.СинхронизацияСчетов;
		СинхронизацияЗаказов 		= НастройкаСинхронизации.СинхронизацияЗаказов;
		КоличествоПовторенийПриОшибках 			= НастройкаСинхронизации.КоличествоПовторенийПриОшибках;
		НеРегистрироватьИзмененияАвтоматически 	= НастройкаСинхронизации.НеРегистрироватьИзмененияАвтоматически;
		РасписаниеРегламентногоЗадания 			= НастройкаСинхронизации.РасписаниеРегламентногоЗадания.Получить();	
		СопоставлениеПользователей.Загрузить(НастройкаСинхронизации.СопоставлениеПользователей.Выгрузить());
		
		НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
		Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииКонтрагентов") тогда
			Возврат;
		КонецЕсли;
		НастройкиСинхронизацииКонтрагентов = НастройкиОбмена.НастройкиСинхронизацииКонтрагентов;
		Пресеты.Загрузить(НастройкиСинхронизацииКонтрагентов.Пресеты);
		
		Токен = Б24_RestApiВызовСервера.ПолучитьТокен(НастройкаСинхронизации);
	Иначе
		УстановкаБазовыхНастроекПоУмолчанию();
	КонецЕсли;
	
	Элементы.СпособСинхронизацииДанных.СписокВыбора.Очистить();	
	Если Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("СинхронизацияПоРасписанию", "РасписаниеИспользуется") = Истина тогда
		Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("ВРежимеРеальногоВремени"	, "В режиме реального времени");
		Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("ПоРасписанию"				, "По расписанию");
		Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("Только ручной режим"		, "Только ручной режим");
	Иначе
		Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("ВРежимеРеальногоВремени"	, "В режиме реального времени");
		//Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("ПоРасписанию"			, "По расписанию");
		Элементы.СпособСинхронизацииДанных.СписокВыбора.Добавить("Только ручной режим"		, "Только ручной режим");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеЭлементовФормы();
	
	УстановитьНадписьРасписанияОбмена(); 
	
	Элементы.НадписьВерсияМодуля.Заголовок = "Версия модуля: " + ПолучитьВерсиюМодуля();
	
КонецПроцедуры


Процедура УстановкаБазовыхНастроекПоУмолчанию()
	
	СпособСинхронизацииДанных 	 			= "Только ручной режим";
	ПорядокВыполненияСинхронизации			= "Сперва Битрикс24, затем 1С";	
	СинхронизацияКонтрагентов 	  	  		= Ложь;
	СинхронизацияТоваров 			  		= Ложь;
	СинхронизацияСчетов 			 		= Ложь;
	СинхронизацияСделок 			  		= Истина;
	СинхронизацияЗаказов 			  		= Ложь;	
	ИдентификаторИсточника		  			= "OneC";
	КоличествоПовторенийПриОшибках 			= 3;
	РасписаниеРегламентногоЗадания 		  	= Новый РасписаниеРегламентногоЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НужноЗакрытьОкно = Истина;
		
		СохранитьНастройки();
		Оповестить("СозданаИзмененаНастройка");
	    Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСинхронизациюКонтрагентов(Команда)
	
	СохранитьНастройки();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипЗапуска"			, "Все");
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииКонтрагентов", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюИнформацииОТоварах(Команда)
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииИнформацииОНоменклатуре", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюСделок(Команда)
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииСделок", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюСчетов(Команда)
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииСчетов", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюЗаказов(Команда)
		
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииЗаказов", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры


&НаКлиенте
Процедура ОчиститьНастройкиОбмена(Команда)
	
	УстановкаБазовыхНастроекПоУмолчанию();
	
	ОчиститьНастройкиОбменаНаСервере();
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиОбменаНаСервере()
	
	ТекущийОбъект = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущийОбъект.НастройкиСинхронизации = Новый ХранилищеЗначения(ПолучитьНастройкиПоУмолчанию());
	ТекущийОбъект.Записать();
	
	Модифицированность = Истина;
	Пресеты.Очистить();
	СохранитьНастройки();	
	Модифицированность = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	Если Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("СинхронизацияПоРасписанию","РасписаниеИспользуется") = Истина тогда
		ВыполнитьНастройкуРасписанияОбмена();
	Иначе
		ПоказатьПредупреждение(,"Не включён фунционал синхронизаций по расписанию. Опция устанавливается в общих настройках");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователейСПортала(Команда)
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	спкГруппы = ПолучитьСписокПозразделений();

	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораПодразделения", ЭтотОбъект, ЭтаФорма.Параметры);
	
	ПоказатьВыборИзСписка(Оп, спкГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораПодразделения(Результат, Параметры) Экспорт

	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьОбновитьПользователей(Результат.Значение);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокПозразделений()

	спкГруппы =Новый  СписокЗначений();
	спкГруппы.Добавить("", "Все подразделения");
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		ПоказатьПредупреждение(, "Не удалось подключиться к Битрикс24");
		Возврат спкГруппы;
	КонецЕсли;
		
	ОбщиеНастройки.Измерение2 = "Получение подразделений";
	                                   
	Метод = "/rest/department.get.json";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, ""); 
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат спкГруппы;
	КонецЕсли;
	
	Если СтруктураОтвета.Получить("result") <> неопределено тогда		
		Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
			спкГруппы.Добавить(ТекЭлемент.Получить("ID"), ТекЭлемент.Получить("NAME"));				
		КонецЦикла;			
	КонецЕсли;
	
	Возврат спкГруппы;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьОбновитьПользователей(ИдПодразделения)

	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		ПоказатьПредупреждение(, "Не удалось подключиться к Битрикс24");
		Возврат;
	КонецЕсли;
		
	ОбщиеНастройки.Измерение2 = "Получение подразделений";	
	
	ОбщиеНастройки.Измерение2 = "Получение списка пользователей Б24";
	                                   
	Метод = "/rest/user.get.json";
	
	Фильтр = "";
	Если ИдПодразделения <> "" тогда
		Фильтр ="&FILTER[UF_DEPARTMENT] = " + Формат(ИдПодразделения, "ЧГ=0;")
	КонецЕсли;	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, Фильтр); 
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.Получить("result") <> неопределено тогда
		
		Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
			
			Если ТекЭлемент.Получить("ACTIVE") <> Истина тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки = СопоставлениеПользователей.НайтиСтроки(Новый Структура("ИдПользователя", ТекЭлемент.Получить("ID")));
			
			Если НайденныеСтроки.Количество() = 0 тогда
				НоваяСтрока = СопоставлениеПользователей.Добавить();
				НоваяСтрока.ФИО = Строка(ТекЭлемент.Получить("NAME")) + " " + Строка(ТекЭлемент.Получить("LAST_NAME"));
				НоваяСтрока.ИдПользователя =  Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Следующие = СтруктураОтвета.Получить("next"); 
	
	Пока ЗначениеЗаполнено(Следующие) Цикл
		
		Следующие = Формат(Следующие, "ЧГ=0");

		ТелоHTTPЗапроса = "&start="+Следующие + Фильтр;	
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, ТелоHTTPЗапроса); 
		
		Если СтруктураОтвета = Неопределено тогда
			Прервать;
		КонецЕсли;
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
			
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				Если ТекЭлемент.Получить("ACTIVE") <> Истина тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = СопоставлениеПользователей.НайтиСтроки(Новый Структура("ИдПользователя", ТекЭлемент.Получить("ID")));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = СопоставлениеПользователей.Добавить();
					НоваяСтрока.ФИО = Строка(ТекЭлемент.Получить("NAME")) + " " + Строка(ТекЭлемент.Получить("LAST_NAME"));
					НоваяСтрока.ИдПользователя = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	   Следующие = СтруктураОтвета.Получить("next");
	   
	КонецЦикла;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПресетыСПортала(Команда)
		
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ТелоHTTPЗапроса = "&filter[ENTITY_TYPE_ID]=8&filter[ACTIVE]=Y";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.requisite.preset.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета <> Неопределено тогда
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
		
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				НайденныеСтроки = Пресеты.НайтиСтроки(Новый Структура("ИдШаблона", ТекЭлемент.Получить("ID")));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = Пресеты.Добавить();
					НоваяСтрока.НаименованиеШаблона = ТекЭлемент.Получить("NAME");
					НоваяСтрока.ИдШаблона = Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;	
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьНастройки();
	Оповестить("СозданаИзмененаНастройка");
	Закрыть();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СпособСинхронизацииДанныхПриИзменении(Элемент)
	
	Если НЕ СохранитьНастройки() Тогда
		Сообщить("Не удалось сохранить настройку");
		Возврат;
	КонецЕсли;
	
	ОбновитьОтображениеЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ТокенОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
		
	Если НЕ СохранитьНастройки() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Б24_RestApiВызовСервера.ЗаписатьНовыйТокен(НастройкаСинхронизации, Текст);
	Токен = Б24_RestApiВызовСервера.ПолучитьТокен(НастройкаСинхронизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТокенПриИзменении(Элемент)
	
	УстановитьДоступностьКнопок();
		
	Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		ПоказатьПредупреждение(, "Не удалось подключиться к Битрикс24");
		Возврат;
	КонецЕсли;
	
	Портал = ОбщиеНастройки.НастройкиПодключения.Сервер;
	
	СохранитьНастройки();
	                                 
	Метод = "/rest/app.option.set";	
	ПараметрыЗапроса = "&options[realtime]=Y";
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, ПараметрыЗапроса); 
	
	ОбновитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФлажкаВыгрузки(Элемент)
		
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
		
	Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
	
	ОбновитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторИсточникаПриИзменении(Элемент)
		
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКнопок();
		
	Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовФормы()
	
	Если СпособСинхронизацииДанных = "ВРежимеРеальногоВремени" тогда
		Элементы.ГруппаНастройкаОбменаПоРасписанию.Видимость = Ложь;
	ИначеЕсли СпособСинхронизацииДанных = "ПоРасписанию" тогда
		Элементы.ГруппаНастройкаОбменаПоРасписанию.Видимость = Истина;
	Иначе
		Элементы.ГруппаНастройкаОбменаПоРасписанию.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Портал.Видимость = ЗначениеЗаполнено(Портал);
	
	УстановитьДоступностьКнопок();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	Элементы.НастроитьВыгрузкуИнформацииОТоварах.Доступность 	= СинхронизацияТоваров;
	Элементы.НастроитьСинхронизациюКонтрагентов.Доступность 	= СинхронизацияКонтрагентов;
	Элементы.НастроитьСинхронизациюСчетов.Доступность 			= СинхронизацияСчетов;
	Элементы.НастроитьСинхронизациюСделок.Доступность 			= СинхронизацияСделок;
	Элементы.НастроитьСинхронизациюЗаказов.Доступность 			= СинхронизацияЗаказов;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюМодуля()
	Возврат Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Версия();
КонецФункции

&НаСервере
Функция СохранитьНастройки()
	
	Если Модифицированность ИЛИ НастройкаСинхронизации.Пустая() Тогда
		
		Если НастройкаСинхронизации.Пустая() тогда
			ТекущийОбъект = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.СоздатьЭлемент();
			ТекущийОбъект.НастройкиСинхронизации = Новый ХранилищеЗначения(ПолучитьНастройкиПоУмолчанию());	
		Иначе
			ТекущийОбъект = НастройкаСинхронизации.ПолучитьОбъект();	
		КонецЕсли;
		
		ТекущийОбъект.Наименование 					 = Наименование;
		ТекущийОбъект.Портал 						 = Портал;
		ТекущийОбъект.СпособСинхронизацииДанных 	 = СпособСинхронизацииДанных;
		ТекущийОбъект.ПорядокВыполненияСинхронизации = ПорядокВыполненияСинхронизации;
		
		ТекущийОбъект.ИдентификаторИсточника 		 = ИдентификаторИсточника;
		
		ТекущийОбъект.СинхронизацияКонтрагентов 	 = СинхронизацияКонтрагентов;
		ТекущийОбъект.СинхронизацияТоваров 			 = СинхронизацияТоваров;
		ТекущийОбъект.СинхронизацияСделок 			 = СинхронизацияСделок;
		ТекущийОбъект.СинхронизацияСчетов 			 = СинхронизацияСчетов;
		ТекущийОбъект.СинхронизацияЗаказов 			 = СинхронизацияЗаказов;
		
		ТекущийОбъект.КоличествоПовторенийПриОшибках 		 = КоличествоПовторенийПриОшибках;
		ТекущийОбъект.НеРегистрироватьИзмененияАвтоматически = НеРегистрироватьИзмененияАвтоматически;
		
		ТекущийОбъект.РасписаниеРегламентногоЗадания = Новый ХранилищеЗначения(РасписаниеРегламентногоЗадания);
		
		ТекущийОбъект.СопоставлениеПользователей.Загрузить(СопоставлениеПользователей.Выгрузить());
		
		НастройкиСинхронизацииОбъектов = ТекущийОбъект.НастройкиСинхронизации.Получить();
		НастройкиСинхронизацииОбъектов.НастройкиСинхронизацииКонтрагентов.Пресеты = Пресеты.Выгрузить();
		ТекущийОбъект.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиСинхронизацииОбъектов);
		
		Попытка 
			ТекущийОбъект.Записать();
			НастройкаСинхронизации = ТекущийОбъект.Ссылка; 
			Модифицированность = Ложь;
		Исключение
			Возврат Ложь;	
		КонецПопытки;
		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();	
	
	Возврат Истина
	
КонецФункции  

&НаСервере
Функция ПолучитьНастройкиПоУмолчанию()
	Возврат Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьНастройкиСинхронизацииПоУмолчанию();
КонецФункции

#КонецОбласти





	
