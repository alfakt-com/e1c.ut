

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииСчетов = НастройкиОбмена.НастройкиСинхронизацииСчетов;
	
	Если НастройкиСинхронизацииСчетов.Свойство("ИнформацияОСтатусах") тогда
		
		ИсточникСтатусов1С 	= НастройкиСинхронизацииСчетов.ИнформацияОСтатусах.ИсточникСтатусов1С;
		СвойствоСчета 		= НастройкиСинхронизацииСчетов.ИнформацияОСтатусах.СвойствоСчета;
		
		СоответствияЗначенийСвойств.Загрузить(НастройкиСинхронизацииСчетов.ИнформацияОСтатусах.СоответствияЗначенийСвойств);
		
		
		ПереводитьВСтатусКогдаОплачен 	= "";
		ПереводитьВСтатусКогдаОтгружен 	= "";
		
		НастройкиСинхронизацииСчетов.ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОплачен", ПереводитьВСтатусКогдаОплачен);
		НастройкиСинхронизацииСчетов.ИнформацияОСтатусах.Свойство("ПереводитьВСтатусКогдаОтгружен", ПереводитьВСтатусКогдаОтгружен);
		
	Иначе
		ИсточникСтатусов1С = "СвойствоСчета";
	КонецЕсли;

	Для Каждого ТекСтрока из СоответствияЗначенийСвойств Цикл
		
		Элементы.ПереводитьВСтатусКогдаОплачен.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
		Элементы.ПереводитьВСтатусКогдаОтгружен.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по товарам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		СохранениеНастроек();
        Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииСчетов;	
	КонецЕсли;
	
	СтруктураИнформацииОСтатусах = Новый Структура;
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОплачен"	, ПереводитьВСтатусКогдаОплачен);
	СтруктураИнформацииОСтатусах.Вставить("ПереводитьВСтатусКогдаОтгружен"	, ПереводитьВСтатусКогдаОтгружен);
	СтруктураИнформацииОСтатусах.Вставить("ИсточникСтатусов1С"				, ИсточникСтатусов1С);
	СтруктураИнформацииОСтатусах.Вставить("СвойствоСчета"					, СвойствоСчета);
	
	СтруктураИнформацииОСтатусах.Вставить("СоответствияЗначенийСвойств"		, СоответствияЗначенийСвойств.Выгрузить());
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИнформацияОСтатусах"	, СтруктураИнформацииОСтатусах);
		
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииСчетов", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииСчетов = СтруктураНастроек;
	КонецЕсли;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();	
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсточникСтатусов1СПриИзменении(Элемент)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЭлементовФормы()
	
	Если ИсточникСтатусов1С = "СвойствоСчета" тогда
		Элементы.СтраницыИсточникиСтатусов.ТекущаяСтраница = Элементы.СтраницаСвойство;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьСтатусыСПортала(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	                                                                                             
	ОбщиеНастройки.Измерение2 = "Получение списка статусов счетов.";
	
	//ТелоHTTPЗапроса = "&filter[ACTIVE]=Y";	
	ТелоHTTPЗапроса = "";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.invoice.status.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета <> Неопределено тогда
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
			
			Элементы.ПереводитьВСтатусКогдаОплачен.СписокВыбора.Очистить();
			Элементы.ПереводитьВСтатусКогдаОтгружен.СписокВыбора.Очистить();
		
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				Если ТекЭлемент.Получить("ENTITY_ID") <> "INVOICE_STATUS" тогда    //ломали метод, поэтому проверка, на всякий
					Продолжить;
				КонецЕсли;
				                       
				ИдСтатуса 			= Формат(ТекЭлемент.Получить("STATUS_ID"), "ЧГ=0");
				НаименованиеСтатуса = ТекЭлемент.Получить("NAME"); 
				
				Элементы.ПереводитьВСтатусКогдаОплачен.СписокВыбора.Добавить(ИдСтатуса, НаименованиеСтатуса); 
				Элементы.ПереводитьВСтатусКогдаОтгружен.СписокВыбора.Добавить(ИдСтатуса, НаименованиеСтатуса); 
				
				НайденныеСтроки = СоответствияЗначенийСвойств.НайтиСтроки(Новый Структура("ИдСтатуса", ИдСтатуса));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = СоответствияЗначенийСвойств.Добавить();
					НоваяСтрока.НазваниеСтатуса = НаименованиеСтатуса;
					НоваяСтрока.ИдСтатуса 		= ИдСтатуса;
				Иначе
					
					Для Каждого ТекСтрокаТаблицы из СоответствияЗначенийСвойств Цикл
						Если  ТекСтрокаТаблицы.ИдСтатуса = ИдСтатуса тогда
							ТекСтрокаТаблицы.НазваниеСтатуса = НаименованиеСтатуса; 
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;                                 
				
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если ИсточникСтатусов1С = "СвойствоСчета" И НЕ ЗначениеЗаполнено(СвойствоСчета) тогда
		ПоказатьПредупреждение(,"Не указано свойство счета. Запись настроек невозможна");
	Иначе
		СохранениеНастроек();
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти




