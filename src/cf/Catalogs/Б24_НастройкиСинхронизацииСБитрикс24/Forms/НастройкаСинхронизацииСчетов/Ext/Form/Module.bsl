

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеЭлементов();
	
	ЗагружатьСчетаЭталон = ЗагружатьСчета;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
		Возврат;                         
	КонецЕсли;
	
	НастройкиСинхронизацииСчетов = НастройкиОбмена.НастройкиСинхронизацииСчетов;
	
	СтруктураССхемамиК = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьСтруктуруСхемКомпоновки();
	
	НастройкиКомпоновкиДанныхСчетов = Неопределено;
	НастройкиСинхронизацииСчетов.Свойство("НастройкиКомпоновкиДанныхСчетов", НастройкиКомпоновкиДанныхСчетов);

	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Счета, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхСчетов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхСчетов.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхСчетов);
	КомпоновщикНастроекКомпоновкиДанныхСчетов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	НастройкиСинхронизацииСчетов.Свойство("Подразделение"	, Подразделение);
	
	НастройкиСинхронизацииСчетов.Свойство("ЗагружатьСчета"	, ЗагружатьСчета);
	НастройкиСинхронизацииСчетов.Свойство("ВыгружатьСчета"	, ВыгружатьСчета);
	НастройкиСинхронизацииСчетов.Свойство("ОбновлятьСчета"	, ОбновлятьСчета);
	
	НастройкиСинхронизацииСчетов.Свойство("ЗагружатьПользовательскиеПоляСчетов"	, ЗагружатьПользовательскиеПоляСчетов);
	НастройкиСинхронизацииСчетов.Свойство("ВыгружатьПользовательскиеПоляСчетов"	, ВыгружатьПользовательскиеПоляСчетов);
	
	НастройкиСинхронизацииСчетов.Свойство("ДатаНачалаЗагрузкиСчетов"	, ДатаНачалаЗагрузкиСчетов);
	НастройкиСинхронизацииСчетов.Свойство("ДатаНачалаВыгрузкиСчетов"	, ДатаНачалаВыгрузкиСчетов);
	НастройкиСинхронизацииСчетов.Свойство("ИсточникДатыДокумента"		, ИсточникДатыДокумента);
	НастройкиСинхронизацииСчетов.Свойство("ИсточникНомераДокумента"	, ИсточникНомераДокумента);
	НастройкиСинхронизацииСчетов.Свойство("РежимЗаписиДокумента"		, РежимЗаписиДокумента);
	
	ПечатныеФормыСчетов.Загрузить(НастройкиСинхронизацииСчетов.ПечатныеФормыСчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если ВыгружатьСчета тогда
	
		ЕстьДляКомпаний = Ложь;
		ЕстьДляКонтактов = Ложь;		
		
		Для каждого ТекСтрока из ПечатныеФормыСчетов Цикл
			Если ТекСтрока.ТипКлиента = "Компания" и ТекСтрока.Используется = Истина тогда
				ЕстьДляКомпаний = Истина;
			КонецЕсли;		
			Если ТекСтрока.ТипКлиента = "Контакт" и ТекСтрока.Используется = Истина тогда
				ЕстьДляКонтактов = Истина;
			КонецЕсли;					
		КонецЦикла;
	
		Если НЕ ЕстьДляКомпаний или НЕ ЕстьДляКонтактов тогда	
			ПоказатьОповещениеПользователя("Важно",,"Не указаны используемые печатные формы для компаний и контактов",, СтатусОповещенияПользователя.Важное);			
			//Отказ = Истина; 	
			//Возврат;		
		КонецЕсли;	
	КонецЕсли;	
	
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по счетам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		
		Если НЕ ПроверкаПерезЗаписьюНастроек() тогда
			СохранениеНастроек();
	        Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	ОбновитьОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьПользовательскиеПоляСчетовПриИзменении(Элемент)
	ОбновитьОтображениеЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормыСчетовТипКлиентаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ПечатныеФормыСчетов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено тогда
		
		Если ТекущиеДанные.Используется	тогда
			
			УжеЕстьИспользуемый = Ложь;
			
			Для Каждого ТекСтрока из ПечатныеФормыСчетов Цикл
				
				Если ТекСтрока.ТипКлиента = ТекущиеДанные.ТипКлиента И ТекСтрока.Организация = ТекущиеДанные.Организация  И ТекСтрока.ИдПечатнойФормы <> ТекущиеДанные.ИдПечатнойФормы И  ТекСтрока.Используется = ТекущиеДанные.Используется Тогда
					УжеЕстьИспользуемый = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если УжеЕстьИспользуемый тогда
				ТекущиеДанные.Используется = Ложь;	
				ПоказатьОповещениеПользователя(,,"Уже есть используемая печатная форма для этого типа клиента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатныеФормыСчетовОрганизацияПриИзменении(Элемент)
			
	ТекущиеДанные = Элементы.ПечатныеФормыСчетов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено тогда
		
		Если ТекущиеДанные.Используется	тогда
			
			УжеЕстьИспользуемый = Ложь;
			
			Для Каждого ТекСтрока из ПечатныеФормыСчетов Цикл
				
				Если ТекСтрока.ТипКлиента = ТекущиеДанные.ТипКлиента И ТекСтрока.Организация = ТекущиеДанные.Организация  И ТекСтрока.ИдПечатнойФормы <> ТекущиеДанные.ИдПечатнойФормы И  ТекСтрока.Используется = ТекущиеДанные.Используется Тогда
					УжеЕстьИспользуемый = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если УжеЕстьИспользуемый тогда
				ТекущиеДанные.Организация = Неопределено;	
				ПоказатьОповещениеПользователя(,,"Уже есть используемая печатная форма для этого типа клиента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;


КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСопоставлениеСтатусов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияСтатусовСчетов", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если НЕ ПроверкаПерезЗаписьюНастроек() тогда
		
		СохранениеНастроек();
		
		Если ЗагружатьСчетаЭталон <> ЗагружатьСчета тогда
			
			Успешно = Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
			
			Если НЕ Успешно тогда
				ЗагружатьСчета = ЗагружатьСчетаЭталон; 	
			Иначе
				Закрыть();
			КонецЕсли;
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюКонтрагентов(Команда)
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипЗапуска"			, "Загрузка");
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииКонтрагентов", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПечатныеФормыСчетаСПортала(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройки.Измерение2 = "Получение списка печатных форм счета для клиентов и компаний.";
	
	ТелоHTTPЗапроса = "";
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.persontype.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.Получить("result") = Неопределено тогда
		Возврат;
	КонецЕсли;	
	
	ИдТипаКомпании = "";
	
	Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл 
		
		НаименованиеТипа = ТекЭлемент.Получить("NAME");
		
		Если НаименованиеТипа = "CRM_CONTACT" тогда
			//ИдТипаКонтакта = Формат(ТекЭлемент.Получить("ID"),"ЧГ=0"); 	
		ИначеЕсли НаименованиеТипа = "CRM_COMPANY" тогда
			ИдТипаКомпании = Формат(ТекЭлемент.Получить("ID"),"ЧГ=0"); 	
		КонецЕсли;
		
	КонецЦикла;
		
	ТелоHTTPЗапроса = "&filter[ACTIVE]=Y";	
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.paysystem.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета <> Неопределено тогда
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
		
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
				
				Если  СтрНайти(ТекЭлемент.Получить("HANDLER"),"bill") = 0 тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеСтроки = ПечатныеФормыСчетов.НайтиСтроки(Новый Структура("ИдПечатнойФормы", ТекЭлемент.Получить("ID")));
				
				Если НайденныеСтроки.Количество() = 0 тогда
					НоваяСтрока = ПечатныеФормыСчетов.Добавить();
					НоваяСтрока.НаименованиеПечатнойФормы 	= ТекЭлемент.Получить("NAME");
					НоваяСтрока.ИдПечатнойФормы 			= Формат(ТекЭлемент.Получить("ID"), "ЧГ=0");
					НоваяСтрока.ТипКлиента					= ?(Формат(ТекЭлемент.Получить("PERSON_TYPE_ID"),"ЧГ=0") = ИдТипаКомпании, "Компания", "Контакт");
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаКлиенте
Процедура ОбновитьОтображениеЭлементов()
	Элементы.НастройкиЗагрузкиСчетов.Доступность = ЗагружатьСчета;	
	Элементы.НастройкаВыгрузкиСчетов.Доступность = ВыгружатьСчета;
	Элементы.УстановкаИспользуемыхПечатныхФормСчетов.Доступность = ВыгружатьСчета;
	//Элементы.ЗагрузитьПользовательскиеПоля.Видимость = ЗагружатьПользовательскиеПоляСчетов;
КонецПроцедуры

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииСчетов;	
	КонецЕсли;
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Подразделение"		, Подразделение);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьСчета"	, ЗагружатьСчета);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьСчета"	, ВыгружатьСчета);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ОбновлятьСчета"	, ОбновлятьСчета);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьПользовательскиеПоляСчетов"	, ЗагружатьПользовательскиеПоляСчетов);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьПользовательскиеПоляСчетов" , ВыгружатьПользовательскиеПоляСчетов);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ДатаНачалаЗагрузкиСчетов", ДатаНачалаЗагрузкиСчетов);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ДатаНачалаВыгрузкиСчетов", ДатаНачалаВыгрузкиСчетов);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИсточникДатыДокумента"	, ИсточникДатыДокумента);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИсточникНомераДокумента", ИсточникНомераДокумента);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "РежимЗаписиДокумента"	, РежимЗаписиДокумента);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "НастройкиКомпоновкиДанныхСчетов", КомпоновщикНастроекКомпоновкиДанныхСчетов.ПолучитьНастройки());
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ПечатныеФормыСчетов"	, ПечатныеФормыСчетов.Выгрузить());
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииСчетов", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииСчетов = СтруктураНастроек;
	КонецЕсли;
	
	СтруктураНастроекКонтрагентов 	= НастройкиОбмена.НастройкиСинхронизацииКонтрагентов;	
	СтруктураНастроекТоваров 		= НастройкиОбмена.НастройкиСинхронизацииТоваров;	
	
	Если ВыгружатьСчета тогда
		Если НЕ СтруктураНастроекТоваров.ВыгружатьТовары тогда
			СтруктураНастроекТоваров.ВыгружатьТовары = Истина;
			Сообщить("Принудительно установлено, чтобы товары выгружались из 1С");	
		КонецЕсли;
		
		Если НЕ СтруктураНастроекКонтрагентов.ВыгружатьКонтрагентов тогда
			СтруктураНастроекКонтрагентов.ВыгружатьКонтрагентов = Истина;
			Сообщить("Принудительно установлено, чтобы контрагенты выгружались из 1С");	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагружатьСчета тогда
		Если НЕ СтруктураНастроекТоваров.ЗагружатьТовары тогда
			СтруктураНастроекТоваров.ЗагружатьТовары = Истина;
			Сообщить("Принудительно установлено, чтобы товары загружались в 1С");	
		КонецЕсли;
		
		Если НЕ СтруктураНастроекКонтрагентов.ЗагружатьКонтрагентов тогда
			СтруктураНастроекКонтрагентов.ЗагружатьКонтрагентов = Истина;
			Сообщить("Принудительно установлено, чтобы контрагенты загружались в 1С");	
		КонецЕсли;
	КонецЕсли;
	
	НастройкиОбмена.НастройкиСинхронизацииТоваров 		= СтруктураНастроекТоваров;
	НастройкиОбмена.НастройкиСинхронизацииКонтрагентов 	= СтруктураНастроекКонтрагентов;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПерезЗаписьюНастроек()
	
	Результат = Ложь;
	
	НужноЗакрытьОкно = НЕ Результат;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
