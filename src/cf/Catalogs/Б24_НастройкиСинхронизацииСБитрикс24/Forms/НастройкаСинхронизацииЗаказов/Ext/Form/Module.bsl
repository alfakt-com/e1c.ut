
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Организация.Видимость 		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.Подразделение.Видимость 	= ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	Элементы.Склад.Видимость 			= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииЗаказов") тогда
		Возврат;                         
	КонецЕсли;

	НастройкиСинхронизацииЗаказов = НастройкиОбмена.НастройкиСинхронизацииЗаказов;
	
	СтруктураССхемамиК = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьСтруктуруСхемКомпоновки();
	
	НастройкиКомпоновкиДанныхЗаказов = Неопределено;
	НастройкиСинхронизацииЗаказов.Свойство("НастройкиКомпоновкиДанныхЗаказов", НастройкиКомпоновкиДанныхЗаказов);

	АдресСхемы = ПоместитьВоВременноеХранилище(СтруктураССхемамиК.Заказы, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанныхЗаказов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	КомпоновщикНастроекКомпоновкиДанныхЗаказов.ЗагрузитьНастройки(НастройкиКомпоновкиДанныхЗаказов);
	КомпоновщикНастроекКомпоновкиДанныхЗаказов.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	НастройкиСинхронизацииЗаказов.Свойство("Подразделение"	, Подразделение);
	НастройкиСинхронизацииЗаказов.Свойство("Организация"	, Организация);
	НастройкиСинхронизацииЗаказов.Свойство("Соглашение"		, Соглашение);
	
	НастройкиСинхронизацииЗаказов.Свойство("ВидЗаказа"		, ВидЗаказа);	
	НастройкиСинхронизацииЗаказов.Свойство("Ответственный"	, Ответственный);	
	НастройкиСинхронизацииЗаказов.Свойство("ВыгружатьОфлайнЗаказы", ВыгружатьОфлайнЗаказы);	
				
	НастройкиСинхронизацииЗаказов.Свойство("ЗагружатьЗаказы" 	, ЗагружатьЗаказы);
	НастройкиСинхронизацииЗаказов.Свойство("ВыгружатьЗаказы"	, ВыгружатьЗаказы);
	НастройкиСинхронизацииЗаказов.Свойство("ОбновлятьДокументы"	, ОбновлятьДокументы);
	
	НастройкиСинхронизацииЗаказов.Свойство("ЗагружатьПользовательскиеПоляЗаказов", ЗагружатьПользовательскиеПоляЗаказов);
	НастройкиСинхронизацииЗаказов.Свойство("ВыгружатьПользовательскиеПоляЗаказов", ВыгружатьПользовательскиеПоляЗаказов);
	
	НастройкиСинхронизацииЗаказов.Свойство("ДатаНачалаЗагрузкиЗаказов"	, ДатаНачалаЗагрузкиЗаказов);
	НастройкиСинхронизацииЗаказов.Свойство("ДатаНачалаВыгрузкиЗаказов"	, ДатаНачалаВыгрузкиЗаказов);
	НастройкиСинхронизацииЗаказов.Свойство("ИсточникДатыДокумента"		, ИсточникДатыДокумента);
	НастройкиСинхронизацииЗаказов.Свойство("ИсточникНомераДокумента"	, ИсточникНомераДокумента);
	НастройкиСинхронизацииЗаказов.Свойство("РежимЗаписиДокумента"		, РежимЗаписиДокумента);
	НастройкиСинхронизацииЗаказов.Свойство("КогдаОтменен"				, КогдаОтменен);		
	НастройкиСинхронизацииЗаказов.Свойство("Склад"						, Склад);	
	НастройкиСинхронизацииЗаказов.Свойство("НоменклатураДоставка"		, НоменклатураДоставка);	
	
	
	НастройкиСинхронизацииЗаказов.Свойство("ЗагружатьОплаты"		, ЗагружатьОплаты);
	НастройкиСинхронизацииЗаказов.Свойство("ВыгружатьОплаты"		, ВыгружатьОплаты);
	НастройкиСинхронизацииЗаказов.Свойство("ПроводитьЕслиОплачен"	, ПроводитьЕслиОплачен);	
	НастройкиСинхронизацииЗаказов.Свойство("СтатьяДДС"				, СтатьяДДС);	
	НастройкиСинхронизацииЗаказов.Свойство("СтавкаНДСРасшифровки"	, СтавкаНДСРасшифровки);	
	
	
	НастройкиСинхронизацииЗаказов.Свойство("ЗагружатьОтгрузки"		, ЗагружатьОтгрузки);
	НастройкиСинхронизацииЗаказов.Свойство("ВыгружатьОтгрузки"		, ВыгружатьОтгрузки);
	НастройкиСинхронизацииЗаказов.Свойство("ПроводитьЕслиОтгружен"	, ПроводитьЕслиОтгружен);
	
	НастройкиСинхронизацииЗаказов.Свойство("ЗагружаемыеСвойстваЗаказов"	, ЗагружаемыеСвойстваЗаказов);
	
	ТипДокументаЗаказа = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьОтображениеЭлементов();
	
	ЗагружатьДокументыЭталон = ЗагружатьЗаказы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по заказам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		
		Если НЕ ПроверкаПередЗаписьюНастроек() тогда
			СохранениеНастроек();
	        Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	ОбновитьОтображениеЭлементов();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)
	
	Если НЕ ПроверкаПередЗаписьюНастроек() тогда
		
		СохранениеНастроек();
		
		Если ЗагружатьДокументыЭталон <> ЗагружатьЗаказы тогда
			
			Успешно = Б24_RestApiКлиентСервер.ЗарегистрироватьСобытияЭлементовКоннектора(НастройкаСинхронизации);
			
			Если НЕ Успешно тогда
				ЗагружатьЗаказы = ЗагружатьДокументыЭталон; 	
			Иначе
				Закрыть();
			КонецЕсли;
		Иначе
			Закрыть();
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСтатусовЗаказов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипИсточника", "Заказ");	
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияСтатусовЗаказовИОтгрузок", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСтатусовОтгрузок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипИсточника", "Отгрузка");	
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияСтатусовЗаказовИОтгрузок", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСлужбДоставкиЗаказов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипИсточника", "Заказ");	
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияСлужбДоставкиЗаказовИОтгрузок", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияСлужбДоставкиОтгрузок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипИсточника", "Отгрузка");	
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияСлужбДоставкиЗаказовИОтгрузок", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоответствияПлатежныхСистем(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.ФормаСопоставленияПлатежныхСистем", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура НастроитьСинхронизациюКонтрагентов(Команда)
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаСинхронизации", НастройкаСинхронизации);
	ПараметрыФормы.Вставить("ТипЗапуска"			, "Загрузка");
	
	ОткрытьФорму("Справочник.Б24_НастройкиСинхронизацииСБитрикс24.Форма.НастройкаСинхронизацииКонтрагентов", ПараметрыФормы, ЭтаФорма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСвойствЗаказов(Команда)

	спкСвойствЗаказовСБ24 = Новый СписокЗначений;
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		ПоказатьПредупреждение(, "Не удалось подключиться к Битрикс24");
		Возврат;
	КонецЕсли;
		
	ОбщиеНастройки.Измерение2 = "Получение списка свойств заказов";
	                                   
	Метод = "/rest/sale.property.list";
	
	Фильтр = "&filter[>id]=0";
	
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, Фильтр); 
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	мСписокПоддерживаемыхТипов 	= Б24_СинхронизацияПовтИсп.ПолучитьСписокТиповСвойствЗаказов();
	
	result = СтруктураОтвета.Получить("result");
	
	Если result <> неопределено тогда
		
		properties = result.Получить("properties");
		
			Если properties <> неопределено тогда
		
				Для каждого ТекЭлемент из properties Цикл
			
					Если ТекЭлемент.Получить("active") = "Y" <> Истина тогда
						Продолжить;
					КонецЕсли;
					
					Если ТекЭлемент.Получить("multiple") = "Y" тогда
						Продолжить;
					КонецЕсли;
					
					НаименованиеСвойства = ТекЭлемент.Получить("name"); 
					ТипСвойства 		 = ТекЭлемент.Получить("type");     
					
					//Если мСписокПоддерживаемыхТипов.Найти(ТипСвойства) = Неопределено тогда    
					//	Продолжить;
					//КонецЕсли;
					
					спкСвойствЗаказовСБ24.Добавить(НаименованиеСвойства);
			
				КонецЦикла;
				
			КонецЕсли;

	КонецЕсли;
	
	Следующие = СтруктураОтвета.Получить("next"); 
	
	Пока ЗначениеЗаполнено(Следующие) Цикл
		
		Следующие = Формат(Следующие, "ЧГ=0");

		ТелоHTTPЗапроса = "&start="+Следующие + Фильтр;	
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, Метод, ТелоHTTPЗапроса); 
		
		Если СтруктураОтвета = Неопределено тогда
			Прервать;
		КонецЕсли;
		
		Если СтруктураОтвета.Получить("result") <> Неопределено тогда
			
			Для каждого ТекЭлемент из СтруктураОтвета.Получить("result") Цикл
			
			Если ТекЭлемент.Получить("active") = "Y" <> Истина тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекЭлемент.Получить("multiple") = "Y" тогда
				Продолжить;
			КонецЕсли;
			
			НаименованиеСвойства = ТекЭлемент.Получить("name"); 
			ТипСвойства 		 = ТекЭлемент.Получить("type");     
			
			Если мСписокПоддерживаемыхТипов.Найти(ТипСвойства) = Неопределено тогда    
				Продолжить;
			КонецЕсли;
			
			спкСвойствЗаказовСБ24.Добавить(НаименованиеСвойства);
			
			КонецЦикла;
		КонецЕсли;
		
	   Следующие = СтруктураОтвета.Получить("next");
	   
	КонецЦикла;
	
	ВремЗагружаемыеСвойстваЗаказов = ЗагружаемыеСвойстваЗаказов.Скопировать();
	ЗагружаемыеСвойстваЗаказов.Очистить();
	
	Для Каждого ТекЭлемент из ВремЗагружаемыеСвойстваЗаказов Цикл
		Если спкСвойствЗаказовСБ24.НайтиПоЗначению(ТекЭлемент.Значение) <> Неопределено тогда
			ЗагружаемыеСвойстваЗаказов.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка);	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЭлемент из спкСвойствЗаказовСБ24 Цикл
		Если ЗагружаемыеСвойстваЗаказов.НайтиПоЗначению(ТекЭлемент.Значение) = Неопределено тогда
			ЗагружаемыеСвойстваЗаказов.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка);	
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область Прочие

&НаКлиенте
Процедура ОбновитьОтображениеЭлементов()
	
	Элементы.НастройкиЗагрузкиДокументов.Доступность = ЗагружатьЗаказы;	
	Элементы.НастройкаВыгрузкиДокументов.Доступность = ВыгружатьЗаказы;		

	Элементы.СтраницаЗаказы.Доступность 	= ЗагружатьЗаказы ИЛИ ВыгружатьЗаказы;
	Элементы.СтраницаОплаты.Доступность 	= ЗагружатьЗаказы ИЛИ ВыгружатьЗаказы;
	Элементы.СтраницаОтгрузки.Доступность 	= ЗагружатьЗаказы ИЛИ ВыгружатьЗаказы;

	Элементы.ПроводитьЕслиОплачен.Доступность 	= ЗагружатьОплаты;
	Элементы.СтатьяДДС.Доступность 				= ЗагружатьОплаты;
	Элементы.СтавкаНДСРасшифровки.Доступность 	= ЗагружатьОплаты;
	
	Элементы.ПроводитьЕслиОтгружен.Доступность 	= ЗагружатьОтгрузки;
	
	Если ТипДокументаЗаказа <> "Заказ" тогда
	    ВыгружатьОфлайнЗаказы = Ложь;
		Элементы.ВыгружатьОфлайнЗаказы.Доступность = Ложь;	
	КонецЕсли;

	Элементы.ГруппаСвойствЗаказов.Доступность = ЗагружатьПользовательскиеПоляЗаказов И ЗагружатьЗаказы;
	
	Элементы.ЗагружатьПользовательскиеПоляЗаказов.Доступность 	= ЗагружатьЗаказы;	
	Элементы.ВыгружатьПользовательскиеПоляСделок.Доступность 	= ВыгружатьЗаказы;		
	
	Элементы.ГруппаОплатыЗагрузка.Доступность					= ЗагружатьЗаказы;		
	Элементы.ГруппаОтгрузкиЗагрузка.Доступность 				= ЗагружатьЗаказы;		
	
	Элементы.ГруппаОплатыВыгрузка.Доступность	 				= ВыгружатьЗаказы;		
	Элементы.ГруппаОтгрузкиВыгрузка.Доступность 				= ВыгружатьЗаказы;		
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаПередЗаписьюНастроек()
	
	Результат = Ложь;
	
	НужноЗакрытьОкно = НЕ Результат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	                                                                                                    
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииЗаказов") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииЗаказов;	
	КонецЕсли;
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Подразделение"			, Подразделение);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Организация"				, Организация);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Соглашение"				, Соглашение);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВидЗаказа"				, ВидЗаказа);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Ответственный"			, Ответственный);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьОфлайнЗаказы"	, ВыгружатьОфлайнЗаказы);	
		
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьЗаказы"		, ЗагружатьЗаказы);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьЗаказы"		, ВыгружатьЗаказы);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ОбновлятьДокументы"	, ОбновлятьДокументы);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьПользовательскиеПоляЗаказов", ЗагружатьПользовательскиеПоляЗаказов);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьПользовательскиеПоляЗаказов", ВыгружатьПользовательскиеПоляЗаказов);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ДатаНачалаЗагрузкиЗаказов", ДатаНачалаЗагрузкиЗаказов);	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ДатаНачалаВыгрузкиЗаказов", ДатаНачалаВыгрузкиЗаказов);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИсточникДатыДокумента"	, ИсточникДатыДокумента);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИсточникНомераДокумента"	, ИсточникНомераДокумента);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "РежимЗаписиДокумента"	, РежимЗаписиДокумента);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "КогдаОтменен"			, КогдаОтменен);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "Склад"					, Склад);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "НоменклатураДоставка"	, НоменклатураДоставка);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьОплаты"			, ЗагружатьОплаты);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ПроводитьЕслиОплачен"	, ПроводитьЕслиОплачен);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "СтатьяДДС"				, СтатьяДДС);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "СтавкаНДСРасшифровки"	, СтавкаНДСРасшифровки);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьОплаты"			, ВыгружатьОплаты);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружатьОтгрузки"		, ЗагружатьОтгрузки);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ПроводитьЕслиОтгружен"	, ПроводитьЕслиОтгружен);
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ВыгружатьОтгрузки"		, ВыгружатьОтгрузки);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ЗагружаемыеСвойстваЗаказов", ЗагружаемыеСвойстваЗаказов);
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "НастройкиКомпоновкиДанныхЗаказов", КомпоновщикНастроекКомпоновкиДанныхЗаказов.ПолучитьНастройки());
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииЗаказов") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииЗаказов", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииЗаказов = СтруктураНастроек;
	КонецЕсли;
	
	СтруктураНастроекКонтрагентов 	= НастройкиОбмена.НастройкиСинхронизацииКонтрагентов;	
	СтруктураНастроекТоваров 		= НастройкиОбмена.НастройкиСинхронизацииТоваров;	
	
	Если ВыгружатьЗаказы тогда
		Если НЕ СтруктураНастроекТоваров.ВыгружатьТовары тогда
			СтруктураНастроекТоваров.ВыгружатьТовары = Истина;
			Сообщить("Принудительно установлено, чтобы товары выгружались из 1С");	
		КонецЕсли;
		
		Если НЕ СтруктураНастроекКонтрагентов.ВыгружатьКонтрагентов тогда
			СтруктураНастроекКонтрагентов.ВыгружатьКонтрагентов = Истина;
			Сообщить("Принудительно установлено, чтобы контрагенты выгружались из 1С");	
		КонецЕсли;
	КонецЕсли;
	
	Если ЗагружатьЗаказы тогда
		Если НЕ СтруктураНастроекТоваров.ЗагружатьТовары тогда
			СтруктураНастроекТоваров.ЗагружатьТовары = Истина;
			Сообщить("Принудительно установлено, чтобы товары загружались в 1С");	
		КонецЕсли;
		
		Если НЕ СтруктураНастроекКонтрагентов.ЗагружатьКонтрагентов тогда
			СтруктураНастроекКонтрагентов.ЗагружатьКонтрагентов = Истина;
			Сообщить("Принудительно установлено, чтобы контрагенты загружались в 1С");	
		КонецЕсли;
	КонецЕсли;
	
	НастройкиОбмена.НастройкиСинхронизацииТоваров 		= СтруктураНастроекТоваров;
	НастройкиОбмена.НастройкиСинхронизацииКонтрагентов 	= СтруктураНастроекКонтрагентов;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры


#КонецОбласти
