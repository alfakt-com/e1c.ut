

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НастройкаСинхронизации") тогда
		Возврат;	
	КонецЕсли;
	
	НастройкаСинхронизации = Параметры.НастройкаСинхронизации;	
	
	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	НастройкиСинхронизацииСделок = НастройкиОбмена.НастройкиСинхронизацииСделок;
	
	Если НастройкиСинхронизацииСделок.Свойство("ИнформацияОСтатусах") тогда
		
		ИсточникСтатусов1С 	= НастройкиСинхронизацииСделок.ИнформацияОСтатусах.ИсточникСтатусов1С;
		СвойствоЗаказов 	= НастройкиСинхронизацииСделок.ИнформацияОСтатусах.СвойствоЗаказов;
		
		Если НастройкиСинхронизацииСделок.ИнформацияОСтатусах.Свойство("СтатусыНаправленийЗначенийСвойств") тогда
			СтатусыНаправленийЗначенийСвойств.Загрузить(НастройкиСинхронизацииСделок.ИнформацияОСтатусах.СтатусыНаправленийЗначенийСвойств);	
		КонецЕсли;
		
		Если НастройкиСинхронизацииСделок.ИнформацияОСтатусах.Свойство("СтатусыНаправленийСостояний") тогда
			СтатусыНаправленийСостояний.Загрузить(НастройкиСинхронизацииСделок.ИнформацияОСтатусах.СтатусыНаправленийСостояний);	
		КонецЕсли;
		
		Если НастройкиСинхронизацииСделок.ИнформацияОСтатусах.Свойство("СтатусыНаправленийСтатусов") тогда
			СтатусыНаправленийСтатусов.Загрузить(НастройкиСинхронизацииСделок.ИнформацияОСтатусах.СтатусыНаправленийСтатусов);	
		КонецЕсли;
		
		Если НастройкиСинхронизацииСделок.ИнформацияОСтатусах.Свойство("НаправленияСделок") тогда
			НаправленияСделок.Загрузить(НастройкиСинхронизацииСделок.ИнформацияОСтатусах.НаправленияСделок);	
		КонецЕсли;
		
		Если НастройкиСинхронизацииСделок.ИнформацияОСтатусах.Свойство("ПринудительныеСтатусы") тогда
			ПринудительныеСтатусы.Загрузить(НастройкиСинхронизацииСделок.ИнформацияОСтатусах.ПринудительныеСтатусы);	
		КонецЕсли;
		
	Иначе
		ИсточникСтатусов1С = "СтатусыЗаказов";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновлениеЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
		
	Если Модифицированность И НЕ НужноЗакрытьОкно тогда
		Отказ = Истина; 
		
		Если ЗавершениеРаботы = Истина Тогда 
			ТекстПредупреждения = "Настройки по статусам не будут сохранены. Закрыть?"; 
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытииОкна", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, "Настройки были изменены. Сохранить изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена, 0);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытииОкна(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НужноЗакрытьОкно = Истина;
		СохранениеНастроек();
        Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет тогда
		НужноЗакрытьОкно = Истина;
		Закрыть();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранениеНастроек()

	НастройкиОбмена = НастройкаСинхронизации.НастройкиСинхронизации.Получить();
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСделок") тогда
		СтруктураНастроек = Новый Структура;	
	Иначе
		СтруктураНастроек = НастройкиОбмена.НастройкиСинхронизацииСделок;	
	КонецЕсли;
	
	СтруктураИнформацииОСтатусах = Новый Структура;
	СтруктураИнформацииОСтатусах.Вставить("ИсточникСтатусов1С"			, ИсточникСтатусов1С);
	СтруктураИнформацииОСтатусах.Вставить("СвойствоЗаказов"				, СвойствоЗаказов);
	
	СтруктураИнформацииОСтатусах.Вставить("СтатусыНаправленийЗначенийСвойств"	, СтатусыНаправленийЗначенийСвойств.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("СтатусыНаправленийСостояний"			, СтатусыНаправленийСостояний.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("СтатусыНаправленийСтатусов"			, СтатусыНаправленийСтатусов.Выгрузить());
	
	СтруктураИнформацииОСтатусах.Вставить("ПринудительныеСтатусы"				, ПринудительныеСтатусы.Выгрузить());
	СтруктураИнформацииОСтатусах.Вставить("НаправленияСделок"					, НаправленияСделок.Выгрузить());
	
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьНастройкуВСтруктуру(СтруктураНастроек, "ИнформацияОСтатусах"	, СтруктураИнформацииОСтатусах);
	
	Если НЕ НастройкиОбмена.Свойство("НастройкиСинхронизацииСделок") тогда
		НастройкиОбмена.Вставить("НастройкиСинхронизацииСделок", СтруктураНастроек); 	
	Иначе
		НастройкиОбмена.НастройкиСинхронизацииСделок = СтруктураНастроек;
	КонецЕсли;
	
	ТекущаяНастройкаСинхронизации = НастройкаСинхронизации.ПолучитьОбъект();
	ТекущаяНастройкаСинхронизации.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиОбмена);
	ТекущаяНастройкаСинхронизации.Записать();	
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИсточникСтатусов1СПриИзменении(Элемент)
	ОбновлениеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЭлементовФормы()
	
	Если ИсточникСтатусов1С = "СвойствоЗаказов" тогда
		Элементы.СтраницыИсточникиСтатусов.ТекущаяСтраница = Элементы.СтраницаСвойство;
	ИначеЕсли ИсточникСтатусов1С = "СостоянияЗаказов" тогда
		Элементы.СтраницыИсточникиСтатусов.ТекущаяСтраница = Элементы.СтраницаСостояния;
	ИначеЕсли ИсточникСтатусов1С = "СтатусыЗаказов" тогда
		Элементы.СтраницыИсточникиСтатусов.ТекущаяСтраница = Элементы.СтраницаСтатусы;
	КонецЕсли;
	
	ОбновитьИнформациюОПринудительныхСтатусах();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправленияСделокПриАктивизацииСтроки(Элемент)
	
	СоответствияСостояний.Очистить();
	СоответствияЗначенийСвойств.Очистить();
	СоответствияСтатусов.Очистить();
	
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Для каждого ТекСтрока из СтатусыНаправленийЗначенийСвойств Цикл
		Если ТекСтрока.ИдНаправления = ИдНаправления тогда
			НовСтрока = СоответствияЗначенийСвойств.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока); 
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из СтатусыНаправленийСостояний Цикл
		Если ТекСтрока.ИдНаправления = ИдНаправления тогда
			НовСтрока = СоответствияСостояний.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока); 
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из СтатусыНаправленийСтатусов Цикл
		Если ТекСтрока.ИдНаправления = ИдНаправления тогда
			НовСтрока = СоответствияСтатусов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока); 
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьИнформациюОПринудительныхСтатусах();
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияСостоянийПриИзменении(Элемент)
	
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекЭлемент из СтатусыНаправленийСостояний Цикл
		
		Если ТекЭлемент.ИдНаправления = ИдНаправления И Элемент.ТекущиеДанные.ИдСтатуса = ТекЭлемент.ИдСтатуса тогда
			ТекЭлемент.Статус		 = Элемент.ТекущиеДанные.Статус;	
			ТекЭлемент.НеЗагружать = Элемент.ТекущиеДанные.НеЗагружать;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияЗначенийСвойствПриИзменении(Элемент)
		
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекЭлемент из СтатусыНаправленийЗначенийСвойств Цикл
		
		Если ТекЭлемент.ИдНаправления = ИдНаправления И Элемент.ТекущиеДанные.ИдСтатуса = ТекЭлемент.ИдСтатуса тогда
			ТекЭлемент.Статус = Элемент.ТекущиеДанные.Статус;	
			ТекЭлемент.НеЗагружать = Элемент.ТекущиеДанные.НеЗагружать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СоответствияСтатусовПриИзменении(Элемент)
		
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекЭлемент из СтатусыНаправленийСтатусов Цикл
		
		Если ТекЭлемент.ИдНаправления = ИдНаправления И Элемент.ТекущиеДанные.ИдСтатуса = ТекЭлемент.ИдСтатуса тогда
			ТекЭлемент.Статус = Элемент.ТекущиеДанные.Статус;	
			ТекЭлемент.НеЗагружать = Элемент.ТекущиеДанные.НеЗагружать;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура СоответствияСостоянийПередУдалением(Элемент, Отказ)
	
		
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтатусНаправления(ИдНаправления, Элемент.ТекущиеДанные.ИдСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияЗначенийСвойствПередУдалением(Элемент, Отказ)
		
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтатусНаправления(ИдНаправления, Элемент.ТекущиеДанные.ИдСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияСтатусовПередУдалением(Элемент, Отказ)
		
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если Элемент.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтатусНаправления(ИдНаправления, Элемент.ТекущиеДанные.ИдСтатуса);
	
КонецПроцедуры


&НаКлиенте
Процедура ПереводитьВСтатусКогдаОплаченПриИзменении(Элемент)
	
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	ЕстьОплата 		= Ложь;
	
	Для Каждого ТекПринудительныйСтатус из ПринудительныеСтатусы Цикл
		Если ТекПринудительныйСтатус.ИдНаправления = ИдНаправления тогда
			Если ТекПринудительныйСтатус.НазначениеСтатуса = "Оплата" тогда
				ТекПринудительныйСтатус.ИдСтатуса = ПереводитьВСтатусКогдаОплачен;
				ЕстьОплата = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОплата тогда
		НоваяЗапись = ПринудительныеСтатусы.Добавить();
		НоваяЗапись.ИдНаправления = ИдНаправления;
		НоваяЗапись.НазначениеСтатуса = "Оплата";
		НоваяЗапись.ИдСтатуса = ПереводитьВСтатусКогдаОплачен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводитьВСтатусКогдаОтгруженПриИзменении(Элемент)
	
	Если Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	ЕстьОплата 		= Ложь;
	
	Для Каждого ТекПринудительныйСтатус из ПринудительныеСтатусы Цикл
		Если ТекПринудительныйСтатус.ИдНаправления = ИдНаправления тогда
			Если ТекПринудительныйСтатус.НазначениеСтатуса = "Отгрузка" тогда
				ТекПринудительныйСтатус.ИдСтатуса = ПереводитьВСтатусКогдаОтгружен;
				ЕстьОплата = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОплата тогда
		НоваяЗапись = ПринудительныеСтатусы.Добавить();
		НоваяЗапись.ИдНаправления = ИдНаправления;
		НоваяЗапись.НазначениеСтатуса = "Отгрузка";
		НоваяЗапись.ИдСтатуса = ПереводитьВСтатусКогдаОтгружен;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НаправленияСделокВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайденныеНаправления = НаправленияСделок.НайтиСтроки(Новый Структура("ВидЗаказа", ВыбранноеЗначение));
	
	Если НайденныеНаправления.Количество() > 0 тогда
		Если НайденныеНаправления[0].ИдНаправления <> Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления тогда 
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(,"Нельзя указать один и тот же вид заказа 2 раза");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьСтатусыСПортала(Команда)
	
	ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);  
	
	Если ОбщиеНастройки = Неопределено тогда
		Возврат;
	КонецЕсли;
	                                                                                             
	ОбщиеНастройки.Измерение2 = "Получение списка статусов сделок.";
	
	
	ТелоHTTPЗапроса = "";
	
	НаправленияСделокСБ24 = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.dealcategory.list", ТелоHTTPЗапроса); 
	
	Если НаправленияСделокСБ24 = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если НаправленияСделокСБ24.Получить("result") = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если НаправленияСделок.НайтиСтроки(Новый Структура("ИдНаправления", "")).Количество() = 0 тогда
		НоваяСтрока = НаправленияСделок.Добавить();
		НоваяСтрока.ИдНаправления 	= "";
		НоваяСтрока.Направление 	= "Общее";
	КонецЕсли;
	
	Для каждого ТекНаправление из НаправленияСделокСБ24.Получить("result") Цикл
		
		Закрыт 					= ТекНаправление.Получить("IS_LOCKED");
		ИдНаправления			= Формат(ТекНаправление.Получить("ID"),"ЧГ=0");
		НаименованиеНаправления = ТекНаправление.Получить("NAME");
		
		Если Закрыт = "Y" тогда
			Продолжить;
		КонецЕсли;
		
		Если НаправленияСделок.НайтиСтроки(Новый Структура("ИдНаправления", ИдНаправления)).Количество() = 0 тогда
			НоваяСтрока = НаправленияСделок.Добавить();
			НоваяСтрока.ИдНаправления 	= ИдНаправления;
			НоваяСтрока.Направление 	= НаименованиеНаправления;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСвойствоНаправленияСделки(ОбщиеНастройки);
	
	//ТелоHTTPЗапроса = "&filter[ENTITY_ID]=DEAL_STAGE";	
	ТелоHTTPЗапроса = "";
	СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.status.list", ТелоHTTPЗапроса); 
	
	Если СтруктураОтвета = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.Получить("result") = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнформациюОСтатусах(СтруктураОтвета);	
	
	Следующие = СтруктураОтвета.Получить("next"); 
	
	Пока ЗначениеЗаполнено(Следующие) Цикл
		
		Следующие = Формат(Следующие, "ЧГ=0");
		
		ТелоHTTPЗапроса = "&start="+Следующие;	
		
		СтруктураОтвета = Б24_RestApiВызовСервера.ОтправкаДанныхНаПортал(ОбщиеНастройки, "/rest/crm.status.list", ТелоHTTPЗапроса); 
		
		Если СтруктураОтвета = Неопределено тогда
			Прервать;
		КонецЕсли;
		
		Если СтруктураОтвета.Получить("result") = Неопределено тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьИнформациюОСтатусах(СтруктураОтвета);		
		
		Следующие = СтруктураОтвета.Получить("next");
		
	КонецЦикла;
	
	ОбновитьСтатусыНаправлений();
	 Элементы.СоответствияСтатусов.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСтатусах(СтруктураОтвета)
	
	мТаблицы = Новый Массив;
	мТаблицы.Добавить(СтатусыНаправленийЗначенийСвойств);
	мТаблицы.Добавить(СтатусыНаправленийСостояний);
	мТаблицы.Добавить(СтатусыНаправленийСтатусов);
	
	Для Каждого ТекСтатус из СтруктураОтвета.Получить("result") Цикл
		
		ВладелецСтатуса = Формат(ТекСтатус.Получить("ENTITY_ID"),"ЧГ=0");
		НазваниеСтатуса = ТекСтатус.Получить("NAME");
		ИдСтатуса = Формат(ТекСтатус.Получить("STATUS_ID"),"ЧГ=0");
		
		Для каждого ТекНаправление из НаправленияСделок Цикл
			
			ДопИдНаправления = "DEAL_STAGE" + ?(ЗначениеЗаполнено(ТекНаправление.ИдНаправления), "_" + ТекНаправление.ИдНаправления, "");
			
			Если ВладелецСтатуса = ДопИдНаправления тогда
				
				Для Каждого ТекТаблица из мТаблицы Цикл
					
					НайденныеСтроки = ТекТаблица.НайтиСтроки(Новый Структура("ИдНаправления, ИдСтатуса", ТекНаправление.ИдНаправления, ИдСтатуса));
					
					Если НайденныеСтроки.количество() = 0 тогда
						НоваяЗапись = ТекТаблица.Добавить();
						НоваяЗапись.ИдНаправления 		= ТекНаправление.ИдНаправления;
						НоваяЗапись.ДопИдНаправления	= ДопИдНаправления;
						НоваяЗапись.НазваниеНаправления = ТекНаправление.Направление;
						
						НоваяЗапись.ИдСтатуса			= ИдСтатуса;
						НоваяЗапись.НазваниеСтатуса 	= НазваниеСтатуса;
					Иначе
						Для Каждого ТекСтрокаТаблицы из ТекТаблица Цикл
							Если ТекСтрокаТаблицы.ИдНаправления = ТекНаправление.ИдНаправления И ТекСтрокаТаблицы.ИдСтатуса = ИдСтатуса тогда
								ТекСтрокаТаблицы.НазваниеНаправления = ТекНаправление.Направление;
								ТекСтрокаТаблицы.НазваниеСтатуса 	 = НазваниеСтатуса; 
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;   
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьИнформациюОПринудительныхСтатусах()
	
	Если  Элементы.НаправленияСделок.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ИдНаправления = Элементы.НаправленияСделок.ТекущиеДанные.ИдНаправления;
	
	Если ИсточникСтатусов1С = "СостоянияЗаказов" тогда
		тзнСтатусов = СтатусыНаправленийСостояний;	
	ИначеЕсли ИсточникСтатусов1С = "СвойствоЗаказов" тогда
		тзнСтатусов = СтатусыНаправленийЗначенийСвойств; 	
	ИначеЕсли ИсточникСтатусов1С = "СтатусыЗаказов" тогда
		тзнСтатусов = СтатусыНаправленийСтатусов; 	
	КонецЕсли;
	
	Элементы.ПереводитьВСтатусКогдаОплачен.СписокВыбора.Очистить();
	Элементы.ПереводитьВСтатусКогдаОтгружен.СписокВыбора.Очистить();
	
	Для Каждого ТекСтрока из тзнСтатусов Цикл
		
		Если ТекСтрока.ИдНаправления = ИдНаправления тогда 
			Элементы.ПереводитьВСтатусКогдаОплачен.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
			Элементы.ПереводитьВСтатусКогдаОтгружен.СписокВыбора.Добавить(ТекСтрока.ИдСтатуса, ТекСтрока.НазваниеСтатуса); 
		КонецЕсли;	
	КонецЦикла;

	ЕстьОплата 		= Ложь;
	ЕстьОтгрузка	= Ложь;
	
	Для Каждого ТекПринудительныйСтатус из ПринудительныеСтатусы Цикл
		
		Если ТекПринудительныйСтатус.ИдНаправления = ИдНаправления тогда
			
			Если ТекПринудительныйСтатус.НазначениеСтатуса = "Оплата" тогда
				ПереводитьВСтатусКогдаОплачен = ТекПринудительныйСтатус.ИдСтатуса;
				ЕстьОплата = Истина;
			ИначеЕсли ТекПринудительныйСтатус.НазначениеСтатуса = "Отгрузка" тогда
				ПереводитьВСтатусКогдаОтгружен = ТекПринудительныйСтатус.ИдСтатуса;	
				ЕстьОтгрузка = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОплата = Ложь тогда
		ПереводитьВСтатусКогдаОплачен = "";	
	КонецЕсли;
	
	Если ЕстьОтгрузка = Ложь тогда
		ПереводитьВСтатусКогдаОтгружен = "";	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Применить(Команда)
	
	Если ИсточникСтатусов1С = "СвойствоЗаказов" И НЕ ЗначениеЗаполнено(СвойствоЗаказов) тогда
		ПоказатьПредупреждение(,"Не указано свойство сделки. Запись настроек невозможна");
	Иначе
		СохранениеНастроек();
		Закрыть();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область Прочее

&НаСервере
Процедура ОбновитьСтатусыНаправлений()
	
	мТаблицы = Новый Массив;
	мТаблицы.Добавить(СтатусыНаправленийЗначенийСвойств);
	мТаблицы.Добавить(СтатусыНаправленийСостояний);
	мТаблицы.Добавить(СтатусыНаправленийСтатусов);
	
	Для Каждого ТекТаблица из мТаблицы Цикл
		
		тзнВрем = ТекТаблица.Выгрузить();
		ТекТаблица.Очистить();
		
		Для Каждого ТекСтрокаТзнВрем из тзнВрем Цикл
			
			Для каждого ТекНаправление из НаправленияСделок Цикл
				
				Если ТекСтрокаТзнВрем.ИдНаправления = ТекНаправление.ИдНаправления тогда
					
					НовСтрока = ТекТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаТзнВрем); 
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойствоНаправленияСделки(ОбщиеНастройки)
	
	СвойствоНаправлениеСделки = Б24_СинхронизацияВызовСервера.СоздатьПолучитьСвойствоНаправлениеСделкиБитрикс24();
	
	НаименованияНаправлений = Новый Массив;
	Для каждого ТекНаправление из НаправленияСделок Цикл
		НаименованияНаправлений.Добавить(ТекНаправление.Направление);	
	КонецЦикла;
		
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Наименование КАК Наименование,
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И НЕ ЗначенияСвойствОбъектов.Наименование В (&НаименованияНаправлений)";
	Запрос.УстановитьПараметр("Владелец", СвойствоНаправлениеСделки);
	Запрос.УстановитьПараметр("НаименованияНаправлений", НаименованияНаправлений);
	
	ВыполненныйЗапрос = Запрос.Выполнить();
	
	Если НЕ ВыполненныйЗапрос.Пустой() тогда
		
		Выборка = ВыполненныйЗапрос.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекЗначение = Выборка.Ссылка.ПолучитьОбъект();
			ТекЗначение.ПометкаУдаления = Истина;
			ТекЗначение.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ТекНаправление из НаправленияСделок Цикл
		
		ЗначениеСсылка = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(ТекНаправление.Направление,,,СвойствоНаправлениеСделки);
		
		Если ЗначениеСсылка.Пустая() тогда
			НовоеЗначение = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			НовоеЗначение.Владелец = СвойствоНаправлениеСделки;
			НовоеЗначение.Наименование = ТекНаправление.Направление;
			НовоеЗначение.Записать();
			ЗначениеСсылка = НовоеЗначение.Ссылка;
		КонецЕсли;
			
		ТипыОбъектовОбмена = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();
		Б24_СинхронизацияВызовСервера.ЗаписатьИдБ24Объекта(ОбщиеНастройки, ТипыОбъектовОбмена.ЗначениеСвойстваСделки, ЗначениеСсылка, "NS_"+ТекНаправление.ИдНаправления);  
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтатусНаправления(ИдНаправления, ИдСтатуса)
	
	мТаблицы = Новый Массив;
	мТаблицы.Добавить(СтатусыНаправленийЗначенийСвойств);
	мТаблицы.Добавить(СтатусыНаправленийСостояний);
	мТаблицы.Добавить(СтатусыНаправленийСтатусов);
	
	Для Каждого ТекТаблица из мТаблицы Цикл
		
		тзнВрем = ТекТаблица.Выгрузить();
		тзнВрем.Очистить();
		
		Для Каждого ТекСтрока из ТекТаблица Цикл
			
			Если ТекСтрока.ИдНаправления = ИдНаправления И  ТекСтрока.ИдСтатуса = ИдСтатуса тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = тзнВрем.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока); 	
			
		КонецЦикла;
		
		ТекТаблица.Загрузить(тзнВрем);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

