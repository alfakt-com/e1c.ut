#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("*");
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ
// для элементов справочника.
//
// Возвращаемое значение:
//  Массив - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

// Возвращает полные данные классификатора.
//
// Возвращаемое значение:
//     ТаблицаЗначений - данные классификатора с колонками:
//         * Код                		- Строка - данные страны.
//         * Наименование 				- Строка - данные страны.
//         * Город          			- Строка - данные страны.
//
//     Таблица значений проиндексирована по полям "Код", "Наименование".
//
Функция ТаблицаКлассификатора() Экспорт
	
	Макет = Справочники.КлассификаторБанков.ПолучитьМакет("Классификатор");
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	
	Возврат СериализаторXDTO.ПрочитатьXML(Чтение);
	
КонецФункции

#Область ПроцедурыОбновления

// Проводит заполнение справочника ""КлассификаторБанков"" по макету:
// элементы проверяются по реквизиту ""Код"" и, в случае совпадения, проверяются (и перезаполняются, если нужно) другие реквизиты, снимается пометка удаления (если есть).
// Если элемент не найден, создается новый, значения заполняются по классификатору. 
// Элементы, присутствующие в справочнике, но отсутствующие в классификаторе на момент обновления, получают признак ""ДеятельностьПрекращена"".
Процедура ОбновлениеКлассификатора_ОбработатьДанные() Экспорт
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторБанков");
	Блокировка.Заблокировать();
	
	Попытка
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КлассификаторБанков.Ссылка КАК Ссылка,
		|	КлассификаторБанков.Родитель КАК Родитель,
		|	КлассификаторБанков.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник.КлассификаторБанков КАК КлассификаторБанков";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МассивГрупп = Новый Массив();
		
		Пока Выборка.Следующий() Цикл
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			Если Не Выборка.ЭтоГруппа Тогда 
				Если Не Выборка.Родитель.Пустая() Тогда
					ЭлементСправочника.Родитель = Справочники.КлассификаторБанков.ПустаяСсылка();
				КонецЕсли;
				ЭлементСправочника.ДеятельностьПрекращена = Истина;
			Иначе
				ЭлементСправочника.ПометкаУдаления = Истина;
			КонецЕсли;
			ЭлементСправочника.Записать();
		КонецЦикла;
		
		МассивДанныхКлассификатора = ПолучитьДанныеКлассификатора();
		
		Для Каждого ЭлементКлассификатора Из МассивДанныхКлассификатора Цикл
			
			ЭлементБанк = Справочники.КлассификаторБанков.НайтиПоКоду(ЭлементКлассификатора.Код);
			
			Если ЭлементБанк.Пустая() Тогда
				ЭлементСправочника = Справочники.КлассификаторБанков.СоздатьЭлемент();
				ЭлементСправочника.Код          = ЭлементКлассификатора.Код;
				ЭлементСправочника.Наименование = ЭлементКлассификатора.Наименование;
				ЭлементСправочника.ДеятельностьПрекращена = Ложь;
			Иначе	
				
				ЭлементСправочника = ЭлементБанк.ПолучитьОбъект();
				
				Если ЭлементСправочника.ПометкаУдаления Тогда
					ЭлементСправочника.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				ЭлементСправочника.ДеятельностьПрекращена = Ложь;
				
				Если ЭлементСправочника.Наименование <> ЭлементКлассификатора.Наименование Тогда
					ЭлементСправочника.Наименование = ЭлементКлассификатора.Наименование;
				КонецЕсли;
	
			КонецЕсли;
			
			ЭлементСправочника.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПолноеИмяОбъекта = "Справочник.КлассификаторБанков";
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
		ТекстСообщения = НСтр("ru = 'Не удалось заполнить справочник ""Классификатор банков"" по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
		МетаданныеОбъекта, ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДанныеКлассификатора()
	
	МассивДанныхКлассификатора = Новый Массив();
	
	Макет = Справочники.КлассификаторБанков.ПолучитьМакет("Классификатор");
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Макет.ПолучитьТекст());
	КлассификаторТаблица = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Для Каждого СтрокаКлассификатора Из КлассификаторТаблица Цикл
		
		ЭлементКлассификатора = Новый Структура();
		ЭлементКлассификатора.Вставить("Код", 			СтрокаКлассификатора.Код);
		ЭлементКлассификатора.Вставить("Наименование",  СтрокаКлассификатора.Наименование);
				
		МассивДанныхКлассификатора.Добавить(ЭлементКлассификатора);
		
	КонецЦикла;
	
	Возврат МассивДанныхКлассификатора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
