#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает или обновляет ключ реестра при записи справочника
//
// Параметры:
//  СправочникОбъект - СправочникОбъект - объект, по которому нужно создать ключ
//  ЭтоНовый		 - Булево - СправочникОбъект записывается первый раз.
// 
Процедура СоздатьОбновитьКлючРеестра(СправочникОбъект, ЭтоНовый) Экспорт
	
	ПоляСтруктурыПолейОбъекта = "Ключ,Наименование,ИНН,Организация,ПометкаУдаления";
	
	СтруктураПолейОбъекта = Новый Структура(ПоляСтруктурыПолейОбъекта);
	СтруктураПолейОбъекта.Ключ            = СправочникОбъект.Ссылка;
	СтруктураПолейОбъекта.Наименование    = СправочникОбъект.Наименование;
	СтруктураПолейОбъекта.ПометкаУдаления = СправочникОбъект.ПометкаУдаления;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СправочникОбъект, "ИНН") Тогда
		СтруктураПолейОбъекта.ИНН = СправочникОбъект.ИНН;
	Иначе
		СтруктураПолейОбъекта.ИНН = "";
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СправочникОбъект, "Владелец")
		И ТипЗнч(СправочникОбъект.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		СтруктураПолейОбъекта.Организация = СправочникОбъект.Владелец;
	Иначе
		СтруктураПолейОбъекта.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтоНовый Тогда
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючиРеестраДокументов");
		ЭлементБлокировки.УстановитьЗначение("Ключ",СтруктураПолейОбъекта.Ключ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлючиРеестраДокументов.Ссылка,
		|	КлючиРеестраДокументов.Наименование,
		|	КлючиРеестраДокументов.Ключ,
		|	КлючиРеестраДокументов.ИНН,
		|	КлючиРеестраДокументов.Организация,
		|	КлючиРеестраДокументов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
		|ГДЕ
		|	КлючиРеестраДокументов.Ключ = &Ключ";
		
		Запрос.УстановитьПараметр("Ключ", СтруктураПолейОбъекта.Ключ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если СтруктураПолейОбъекта.Наименование = Выборка.Наименование
				И СтруктураПолейОбъекта.ИНН = Выборка.ИНН
				И СтруктураПолейОбъекта.Организация = Выборка.Организация
				И СтруктураПолейОбъекта.ПометкаУдаления = Выборка.ПометкаУдаления Тогда
				Возврат;
			КонецЕсли;
			
			КлючОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			КлючОбъект = Справочники.КлючиРеестраДокументов.СоздатьЭлемент();
		КонецЕсли;
		
	Иначе
		КлючОбъект = Справочники.КлючиРеестраДокументов.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КлючОбъект, СтруктураПолейОбъекта);
	
	КлючОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вычисляет какие ключи реестра нужно создать (обновить) и обновляет их
//
// Параметры:
//	ОбъектыМетаданных - Соответствие - объекты метаданных:
//		* Ключ		- ОбъектМетаданных: Документ	- объект метаданных документа.
//		* Значение	- Неопределено					- пустое значение.
//
Процедура СоздатьОбновитьКлючиРеестра(ОбъектыМетаданных = Неопределено) Экспорт
	
	Если ОбъектыМетаданных = Неопределено Тогда
		
		ОбъектыМетаданных = ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
		
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
		
	ЕстьКлючиДляГенерации = Истина;
	
	Пока ЕстьКлючиДляГенерации Цикл
		
		ТаблицаКлючей = КлючиРеестраДляОбновления(ОбъектыМетаданных, Истина);
		
		ЕстьКлючиДляГенерации = ТаблицаКлючей.Количество() > 0; 
		
		Если Не ЕстьКлючиДляГенерации Тогда
			Возврат;
		КонецЕсли;
	
		НачатьТранзакцию();
		
		Попытка
			
			Если Не МонопольныйРежим() Тогда
				// При работе в немонопольном режиме нужно гарантировать, что по
				// ключам в параллельном сеансе не были изменены ключи.
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючиРеестраДокументов");
				ЭлементБлокировки.ИсточникДанных = ТаблицаКлючей;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ключ", "Ключ");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКлючей.Ключ КАК Ключ,
			|	ТаблицаКлючей.Организация КАК Организация,
			|	ТаблицаКлючей.ИНН КАК ИНН,
			|	ТаблицаКлючей.Наименование КАК Наименование
			|ПОМЕСТИТЬ ТаблицаКлючей
			|ИЗ
			|	&ТаблицаКлючей КАК ТаблицаКлючей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаКлючей.Ключ КАК Ключ,
			|	ТаблицаКлючей.Организация КАК Организация,
			|	ТаблицаКлючей.ИНН КАК ИНН,
			|	ТаблицаКлючей.Наименование КАК Наименование,
			|	ЕСТЬNULL(КлючиРеестраДокументов.Ссылка, ЗНАЧЕНИЕ(Справочник.КлючиРеестраДокументов.ПустаяСсылка)) КАК Ссылка
			|ИЗ
			|	ТаблицаКлючей КАК ТаблицаКлючей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
			|		ПО ТаблицаКлючей.Ключ = КлючиРеестраДокументов.Ключ
			|ГДЕ
			|	(КлючиРеестраДокументов.Ссылка ЕСТЬ NULL
			|			ИЛИ ТаблицаКлючей.Организация <> КлючиРеестраДокументов.Организация
			|			ИЛИ ТаблицаКлючей.ИНН <> КлючиРеестраДокументов.ИНН
			|			ИЛИ ТаблицаКлючей.Наименование <> КлючиРеестраДокументов.Наименование)";
			
			Запрос.УстановитьПараметр("ТаблицаКлючей", ТаблицаКлючей);
			
			ВыборкаСсылок = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаСсылок.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаСсылок.Ссылка) Тогда
					КлючОбъект = ВыборкаСсылок.Ссылка.ПолучитьОбъект();
				Иначе
					КлючОбъект = Справочники.КлючиРеестраДокументов.СоздатьЭлемент();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(КлючОбъект, ВыборкаСсылок);
				КлючОбъект.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать ключи реестра документов: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание ключей аналитики реестра документов'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.КлючиРеестраДокументов,
				,
				ТекстСообщения);
		
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает признак, того элемент справочника входит в ключи рееста документов,
// поэтому по нему нужно создавать или обновлять элемент технологического справочника.
//
// Параметры:
//	Объект - Произвольный - объект базы данных, например, СправочникОбъект.Организации.
//
// Возвращаемое значение
//	Булево - Истина, если полученный объект отражается в реестре документов через технологический ключ.
//
Функция ОбъектЯвляетсяКлючомРеестра(Объект) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат Ложь;
	ИначеЕсли Не ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СправочникСсылка	= Объект.Ссылка;
	ТипСсылки		= ТипЗнч(СправочникСсылка);
	
	МетаданныеКлючей	= Метаданные.НайтиПоПолномуИмени("Справочник.КлючиРеестраДокументов");
	ТипыИсточника		= МетаданныеКлючей.Реквизиты.Ключ.Тип.Типы();
	
	ОбработатьОбъект = ТипыИсточника.Найти(ТипСсылки) <> Неопределено;
	
	Возврат ОбработатьОбъект;
	
КонецФункции

// Функция - Объекты метаданных закешированные в ключах реестра
// 
// Возвращаемое значение:
//  Соответствие - в ключах лежат объекты типа ОбъектМетаданных.
//
Функция ОбъектыМетаданныхЗакешированныеВКлючахРеестра() Экспорт 
	ОбъектыМетаданных = Новый Соответствие;
	
	Для каждого ТипКлюча Из Метаданные.Справочники.КлючиРеестраДокументов.Реквизиты.Ключ.Тип.Типы() Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипКлюча);
		ОбъектыМетаданных.Вставить(МетаданныеОбъекта);
		
	КонецЦикла;
	
	Возврат ОбъектыМетаданных;
	
КонецФункции

// Получает ключи реестра по значениям справочников
//
// Параметры:
//    Значения - Массив, Произвольный - ссылка(и) на справочники базы данных, например, СправочникСсылка.Склад.
// 
// Возвращаемое значение:
//    Массив - ключи реестра
//
Функция КлючиПоЗначениям(Значения) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.КлючиРеестраДокументов
	|ГДЕ
	|	Ключ В (&Ключи)
	|");
	
	Запрос.УстановитьПараметр("Ключи", Значения);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючиРеестраДляОбновления(ОбъектыМетаданных, Порциями, ПустыеСсылки = "ВключатьВсе")

	ТекстЗапроса =
	ТекстЗапросаВТДанныеПоОбъектам(ОбъектыМетаданных) +
	"ВЫБРАТЬ "+ ?(Порциями, "ПЕРВЫЕ 1000", "") + "
	|	ВложенныйЗапрос.Ключ КАК Ключ,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ИНН КАК ИНН,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	СУММА(ВложенныйЗапрос.Контроль) КАК Контроль
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеПоОбъектам.Ключ КАК Ключ,
	|		ДанныеПоОбъектам.Организация КАК Организация,
	|		ДанныеПоОбъектам.ИНН КАК ИНН,
	|		ДанныеПоОбъектам.Наименование КАК Наименование,
	|		1 КАК Контроль,
	|		ЕСТЬNULL(КлючиРеестраДокументов.Ссылка, ЗНАЧЕНИЕ(Справочник.КлючиРеестраДокументов.ПустаяСсылка)) КАК СсылкаНаКлюч
	|	ИЗ
	|		ДанныеПоОбъектам КАК ДанныеПоОбъектам
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|			ПО (КлючиРеестраДокументов.Ключ = ДанныеПоОбъектам.Ключ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КлючиРеестраДокументов.Ключ,
	|		КлючиРеестраДокументов.Организация,
	|		КлючиРеестраДокументов.ИНН,
	|		КлючиРеестраДокументов.Наименование,
	|		-1,
	|		КлючиРеестраДокументов.Ссылка
	|	ИЗ
	|		Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Ключ,
	|	ВложенныйЗапрос.Наименование,
	|	ВложенныйЗапрос.ИНН
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Контроль) > 0";
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВключатьНеПустые", ПустыеСсылки = "ВключатьВсе" Или ПустыеСсылки = "ВключатьНепустые");
	Запрос.УстановитьПараметр("ВключатьПустые", ПустыеСсылки = "ВключатьВсе" Или ПустыеСсылки = "ВключатьПустые");
	
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаКлючей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКлючей;
		
КонецФункции

Функция ТекстЗапросаВТДанныеПоОбъектам(ОбъектыМетаданных)
	ТекстыЗапроса = Новый Массив;
	
	Если ТипЗнч(ОбъектыМетаданных) = Тип("Соответствие") Тогда
		
		Для Каждого ОписаниеОбъекта Из ОбъектыМетаданных Цикл
			ТекстЗапроса = ТекстЗапросаДанныхПоСправочнику(ОписаниеОбъекта.Ключ);
			ТекстыЗапроса.Добавить(ТекстЗапроса);
		КонецЦикла;
		
		ШаблонЗапросаОбъединения = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ТекстЗапросаПоОбъектам = СтрСоединить(ТекстыЗапроса, ШаблонЗапросаОбъединения);
		
	ИначеЕсли ТипЗнч(ОбъектыМетаданных) = Тип("ОбъектМетаданных") Тогда	
		
		ТекстЗапросаПоОбъектам = ТекстЗапросаДанныхПоСправочнику(ОбъектыМетаданных);
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'Тип %Тип% не поддерживается функцией'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Тип%", Строка(ТипЗнч(ОбъектыМетаданных)));
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ключ КАК Ключ,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ИНН КАК ИНН,
	|	ВложенныйЗапрос.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДанныеПоОбъектам
	|ИЗ
	|	("
	+ ТекстЗапросаПоОбъектам + ") КАК ВложенныйЗапрос
	|ИНДЕКСИРОВАТЬ ПО Ключ
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныхПоСправочнику(ОбъектМетаданных)
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|		СправочникИсточник.Ссылка КАК Ключ,
	|		&ТекстПоляОрганизация КАК Организация,
	|		&ТекстПоляИНН КАК ИНН,
	|		СправочникИсточник.Наименование КАК Наименование
	|	ИЗ
	|		ПолноеИмяОбъекта КАК СправочникИсточник
	|	ГДЕ
	|		&ВключатьНепустые
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ПолноеИмяОбъекта.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|		"""",
	|		""""
	|	ГДЕ
	|		&ВключатьПустые";
				
	ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ПолноеИмяОбъекта", ОбъектМетаданных.ПолноеИмя());
	
	ЕстьВладелецОрганизация = Ложь;
	
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Владелец" Тогда
			
			Если Реквизит.Тип.ПривестиЗначение() = Справочники.Организации.ПустаяСсылка() Тогда
				ЕстьВладелецОрганизация = Истина;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВладелецОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляОрганизация", "СправочникИсточник.Владелец");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляОрганизация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
	КонецЕсли;
	
	Если ОбъектМетаданных.Реквизиты.Найти("ИНН") <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляИНН", "СправочникИсточник.ИНН");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПоляИНН", """""");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт 
	
	ОбъектыМетаданных = ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	
	КлючиРеестраДляОбновления = КлючиРеестраДляОбновления(ОбъектыМетаданных, Ложь, "ВключатьНепустые");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, КлючиРеестраДляОбновления.ВыгрузитьКолонку("Ключ"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Штатно, если все идет нормально, обработчик должен отработать для один запуск, не порциями.
	
	ОбъектыМетаданных = ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		
		ЕстьЗаписиВоВременнойТаблице = Истина;
		
		Пока ЕстьЗаписиВоВременнойТаблице Цикл
			
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
			ПолноеИмяСправочника = ОбъектМетаданных.Ключ.ПолноеИмя();
			
			РезультатСозданияВТ = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
										Параметры.Очередь,
										ПолноеИмяСправочника,
										МенеджерВТ);
			
			ЕстьЗаписиВоВременнойТаблице = РезультатСозданияВТ.ЕстьЗаписиВоВременнойТаблице;
			
			Если Не ЕстьЗаписиВоВременнойТаблице Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаКлючей = ОбщегоНазначенияУТ.ПоказатьВременнуюТаблицу(МенеджерВТ, РезультатСозданияВТ.ИмяВременнойТаблицы);
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючиРеестраДокументов");
				ЭлементБлокировки.ИсточникДанных = ТаблицаКлючей;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ключ", "Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяСправочника);
				ЭлементБлокировки.ИсточникДанных = ТаблицаКлючей;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				
				Блокировка.Заблокировать();
				
				ТекстЗапроса = ТекстЗапросаВТДанныеПоОбъектам(ОбъектМетаданных.Ключ) +
				"ВЫБРАТЬ
				|		ДанныеПоОбъектам.Ключ КАК Ключ,
				|		ДанныеПоОбъектам.Организация КАК Организация,
				|		ДанныеПоОбъектам.ИНН КАК ИНН,
				|		ДанныеПоОбъектам.Наименование КАК Наименование,
				|		ЕСТЬNULL(КлючиРеестраДокументов.Ссылка, ЗНАЧЕНИЕ(Справочник.КлючиРеестраДокументов.ПустаяСсылка)) КАК СсылкаНаКлюч
				|	ИЗ
				|		ДанныеПоОбъектам КАК ДанныеПоОбъектам
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
				|			ПО (КлючиРеестраДокументов.Ключ = ДанныеПоОбъектам.Ключ)
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + РезультатСозданияВТ.ИмяВременнойТаблицы + " КАК " + РезультатСозданияВТ.ИмяВременнойТаблицы + "
				|   		ПО ДанныеПоОбъектам.Ключ = " + РезультатСозданияВТ.ИмяВременнойТаблицы + ".Ссылка";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
				Запрос.УстановитьПараметр("ВключатьНеПустые", Истина);
				Запрос.УстановитьПараметр("ВключатьПустые", Ложь);
				
				ВыборкаСсылок = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаСсылок.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаСсылок.СсылкаНаКлюч) Тогда
						КлючОбъект = ВыборкаСсылок.СсылкаНаКлюч.ПолучитьОбъект();
					Иначе
						КлючОбъект = Справочники.КлючиРеестраДокументов.СоздатьЭлемент();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(КлючОбъект, ВыборкаСсылок);
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(КлючОбъект);
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(КлючОбъект.Ключ);
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать ключ реестра документов по элементу справочника %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаСсылок.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					ОбъектМетаданных.Ключ,
					ВыборкаСсылок.Ключ,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеОбработано = Истина;
	
	КлючиРеестраДляОбновления = КлючиРеестраДляОбновления(ОбъектыМетаданных, Ложь, "ВключатьПустые");
	
	Если КлючиРеестраДляОбновления.Количество() > 0 Тогда
		
		ВсеОбработано = Ложь;
		
		Для Каждого СтрТабл Из КлючиРеестраДляОбновления Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючиРеестраДокументов");
				ЭлементБлокировки.УстановитьЗначение("Ключ", СтрТабл.Ключ);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;				
				
				Блокировка.Заблокировать();
				
				МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(СтрТабл.Ключ));
				
				ТекстЗапроса = ТекстЗапросаВТДанныеПоОбъектам(МетаданныеОбъекта) +
				"ВЫБРАТЬ
				|		ДанныеПоОбъектам.Ключ КАК Ключ,
				|		ДанныеПоОбъектам.Организация КАК Организация,
				|		ДанныеПоОбъектам.ИНН КАК ИНН,
				|		ДанныеПоОбъектам.Наименование КАК Наименование,
				|		ЕСТЬNULL(КлючиРеестраДокументов.Ссылка, ЗНАЧЕНИЕ(Справочник.КлючиРеестраДокументов.ПустаяСсылка)) КАК СсылкаНаКлюч
				|	ИЗ
				|		ДанныеПоОбъектам КАК ДанныеПоОбъектам
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
				|			ПО (КлючиРеестраДокументов.Ключ = ДанныеПоОбъектам.Ключ)";
				
				Запрос = Новый Запрос;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("ВключатьНеПустые", Ложь);
				Запрос.УстановитьПараметр("ВключатьПустые", Истина);
				
				ВыборкаСсылок = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаСсылок.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаСсылок.СсылкаНаКлюч) Тогда
						КлючОбъект = ВыборкаСсылок.СсылкаНаКлюч.ПолучитьОбъект();
					Иначе
						КлючОбъект = Справочники.КлючиРеестраДокументов.СоздатьЭлемент();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(КлючОбъект, ВыборкаСсылок);
					
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(КлючОбъект);
					
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				
				ОтменитьТранзакцию();
				ТекстСообщения = НСтр("ru = 'Не удалось обработать ключ реестра документов по элементу справочника %Ссылка% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаСсылок.Ключ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
												ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
												УровеньЖурналаРегистрации.Предупреждение,
												МетаданныеОбъекта,
												ВыборкаСсылок.Ключ,
												ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
		
		ВсеОбработано = Истина;
		
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ОбъектМетаданных.Ключ.ПолноеИмя()) Тогда
			ВсеОбработано = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ВсеОбработано; 	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
