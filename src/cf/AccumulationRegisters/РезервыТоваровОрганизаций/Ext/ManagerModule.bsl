#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Запуск свертки движений регистра "Резервы товаров организаций" по всем организациям.
//
Процедура ВыполнитьСверткуРегистраРезервыТоваровОрганизаций() Экспорт
	
	ЗачестьВстречныеРезервы();
	
	Если Не ЕстьЗаписиСторно() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СвернутьДвиженияПоРезервамТоваровОрганизаций();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуСверткиВЖР(ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя дополнительного свойства - признака того, что запись выполняется механизмом свертки.
//
Функция ПризнакЗаписиНабораПриСвертке() Экспорт
	Возврат "ВыполняетсяСверткаДвиженийРезервовТоваровОрганизаций";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СверткаДвижений

// Основная процедура свертки движений.
//
Процедура СвернутьДвиженияПоРезервамТоваровОрганизаций() 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц);	
	
	СтруктураДанныхСвертки = СтруктураДанныхСвертки(МенеджерВременныхТаблиц);
	НезакрытыеЗаписиСторно = ВыполнитьВзаимозачетВТДвиженийПоРезервам(СтруктураДанныхСвертки);
	
	Если НезакрытыеЗаписиСторно.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить свертку всех записей сторно резервов товаров организаций.'");
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Организация.Наименование КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры.Наименование КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов.Наименование КАК ВидЗапасов,
		|	Т.НомерГТД КАК НомерГТД,
		|	Т.КорОрганизация.Наименование КАК КорОрганизация,
		|	Т.КорВидЗапасов.Наименование КАК КорВидЗапасов
		|ИЗ
		|	ВТНаборыПолей КАК Т
		|ГДЕ
		|	Т.НомерНабораПолей В(&НезакрытыеЗаписиСторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	АналитикаУчетаНоменклатуры,
		|	ВидЗапасов";
		
		Запрос.УстановитьПараметр("НезакрытыеЗаписиСторно", НезакрытыеЗаписиСторно);
		
		Выборка = Запрос.Выполнить().Выбрать();
		НомерНабора = 0;
		
		Пока Выборка.Следующий() Цикл
			
			НомерНабора = НомерНабора + 1;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1: организация: ""%2"",  номенклатура: ""%3"",  вид запасов: ""%4"",  номер ГТД: ""%5"",  кор. организация: ""%6"",  кор. вид запасов: ""%7""'"),
					СокрЛП(НомерНабора),
					СокрЛП(Выборка.Организация),
					СокрЛП(Выборка.АналитикаУчетаНоменклатуры),
					СокрЛП(Выборка.ВидЗапасов),
					СокрЛП(Выборка.НомерГТД),
					СокрЛП(Выборка.КорОрганизация),
					СокрЛП(Выборка.КорВидЗапасов));
			
		КонецЦикла;
		
		ЗаписатьОшибкуСверткиВЖР(ТекстСообщения);
		
	КонецЕсли;
	
	ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки); // помещаем все записи в ВТТаблицаДвижений
	ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки);
	
	СтруктураДанныхСвертки.МенеджерВременныхТаблиц.Закрыть();
	СтруктураДанныхСвертки = Неопределено;
	
КонецПроцедуры

// Вспомогательная процедура свертки движений - добавляет записи зачета сторно в таблицу значений.
//
Процедура ДобавитьЗаписиДляСверткиВТаблицуЗначений(СтруктураДанныхСвертки, ЗаписьСторно, ТаблицаДляЗачета, Количество)
	
	// Создадим запись для уменьшения количества в записи сторно.
	НоваяЗапись = СтруктураДанныхСвертки.ТаблицаДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьСторно);
	НоваяЗапись.Количество = Количество;
	
	// Создадим запись для уменьшения количества в зачитываемой записи.
	НоваяЗапись = СтруктураДанныхСвертки.ТаблицаДвижений.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ТаблицаДляЗачета[0]);
	НоваяЗапись.Количество = -Количество;
	НоваяЗапись.РегистраторСторно = ЗаписьСторно.Регистратор; // запомним документ сторно, который был зачтен
	
	// Если таблица движений достигла большого размера - перенесем из нее данные во временную таблицу.
	Если СтруктураДанныхСвертки.ТаблицаДвижений.Количество() >= МаксимальноеКоличествоСтрокВТаблицеЗначений() Тогда
		ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки);
	КонецЕсли;
	
КонецПроцедуры

// Основная процедура записи движений.
//
Функция ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки)
	
	ЕстьОшибка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	
	// Выберем все регистраторы, по которым выполнялся зачет сторно.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.РегистраторСторно КАК Регистратор
	|ИЗ
	|	ВТТаблицаДвижений КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Результат = Запрос.Выполнить();
	ВыборкаРегистраторы = Результат.Выбрать();
	
	Пока ВыборкаРегистраторы.Следующий() Цикл
		
		Запрос.УстановитьПараметр("Регистратор", ВыборкаРегистраторы.Регистратор);
		
		// Выберем очередную порцию регистраторов, по которым будет выполняться запись движений.
		// В одной транзакции будет выполнена запись
		//	- всех движений текущего регистратора
		//	- зачтенных им движений сторно других регистраторов.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Движения.Период КАК Период,
		|	Движения.Регистратор КАК Регистратор,
		|	Поля.СлужебноеВидДвиженияПриход КАК СлужебноеВидДвиженияПриход,
		|	Поля.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	Поля.Организация КАК Организация,
		|	Поля.ВидЗапасов КАК ВидЗапасов,
		|	Поля.НомерГТД КАК НомерГТД,
		|	Поля.КорОрганизация КАК КорОрганизация,
		|	Поля.КорВидЗапасов КАК КорВидЗапасов,
		|	Движения.Количество КАК Количество,
		|	Движения.НомерНабораПолей КАК НомерНабораПолей,
		|	Движения.РегистраторСторно КАК РегистраторСторно
		|ПОМЕСТИТЬ ВТКорректирующиеДвижения
		|ИЗ
		|	ВТТаблицаДвижений КАК Движения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
		|		ПО Движения.НомерНабораПолей = Поля.НомерНабораПолей
		|ГДЕ
		|	(Движения.Регистратор = &Регистратор
		|				И Движения.Регистратор = НЕОПРЕДЕЛЕНО
		|			ИЛИ Движения.РегистраторСторно = &Регистратор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Регистратор КАК Регистратор,
		|	МИНИМУМ(ВложенныйЗапрос.ПриоритетЗаписи) КАК ПриоритетЗаписи
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТКорректирующиеДвижения.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА ВТКорректирующиеДвижения.Количество > 0
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ПриоритетЗаписи
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК ВТКорректирующиеДвижения
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ВТКорректирующиеДвижения.РегистраторСторно,
		|		3
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК ВТКорректирующиеДвижения
		|	ГДЕ
		|		ВТКорректирующиеДвижения.РегистраторСторно <> НЕОПРЕДЕЛЕНО) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.ПриоритетЗаписи,
		|	Регистратор";
		
		ТаблицаРегистраторов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРегистраторов.Количество() = 0 Тогда
			ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
			Продолжить; // движения уже были записаны ранее
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			// Заблокируем регистраторы для записи.
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервыТоваровОрганизаций.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаРегистраторов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();		
			
			// Проверим, что в движениях регистраторов не было изменений за время выполнения расчета.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТТекущиеДвиженияДляСвертки
			|ИЗ
			|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|		ПО Т.Регистратор = Регистраторы.Регистратор
			|ГДЕ
			|	Т.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(Т.Источник) КАК Источник,
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	СУММА(Т.Количество) КАК Количество
			|ИЗ
			|	(ВЫБРАТЬ
			|		1 КАК Источник,
			|		Т.Период КАК Период,
			|		Т.Регистратор КАК Регистратор,
			|		Т.ВидДвижения КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|		Т.Организация КАК Организация,
			|		Т.ВидЗапасов КАК ВидЗапасов,
			|		Т.НомерГТД КАК НомерГТД,
			|		Т.КорОрганизация КАК КорОрганизация,
			|		Т.КорВидЗапасов КАК КорВидЗапасов,
			|		Т.Количество КАК Количество
			|	ИЗ
			|		ВТТекущиеДвиженияДляСвертки КАК Т
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		-1,
			|		Т.Период,
			|		Т.Регистратор,
			|		ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход
			|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		КОНЕЦ,
			|		Т.АналитикаУчетаНоменклатуры,
			|		Т.Организация,
			|		Т.ВидЗапасов,
			|		Т.НомерГТД,
			|		Т.КорОрганизация,
			|		Т.КорВидЗапасов,
			|		-Т.Количество
			|	ИЗ
			|		ВТДвиженияДляСвертки КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|			ПО Т.Регистратор = Регистраторы.Регистратор) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.Источник) = 0 И
			|	СУММА(Т.Количество) <> 0";
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ОтменитьТранзакцию();
				
				Блокировка = Неопределено;
				
				ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
				
				Продолжить; // текущие движения регистраторов изменились относительно того, какие они были в начале расчета
				
			КонецЕсли;
			
			// Сформируем новые движения по регистраторам:
			// движения регистраторов из ИБ - корректировочные движения.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов,
			|	СУММА(Т.Количество) КАК Количество
			|ПОМЕСТИТЬ ВТНовыеДвижения
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Период КАК Период,
			|		Т.Регистратор КАК Регистратор,
			|		Т.ВидДвижения КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|		Т.Организация КАК Организация,
			|		Т.ВидЗапасов КАК ВидЗапасов,
			|		Т.НомерГТД КАК НомерГТД,
			|		Т.КорОрганизация КАК КорОрганизация,
			|		Т.КорВидЗапасов КАК КорВидЗапасов,
			|		Т.Количество КАК Количество
			|	ИЗ
			|		РегистрНакопления.РезервыТоваровОрганизаций КАК Т
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
			|			ПО Т.Регистратор = Регистраторы.Регистратор
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Период,
			|		Т.Регистратор,
			|		ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход
			|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|		КОНЕЦ КАК ВидДвижения,
			|		Т.АналитикаУчетаНоменклатуры,
			|		Т.Организация,
			|		Т.ВидЗапасов,
			|		Т.НомерГТД,
			|		Т.КорОрганизация,
			|		Т.КорВидЗапасов,
			|		Т.Количество
			|	ИЗ
			|		ВТКорректирующиеДвижения КАК Т) КАК Т
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры,
			|	Т.Организация,
			|	Т.ВидЗапасов,
			|	Т.НомерГТД,
			|	Т.КорОрганизация,
			|	Т.КорВидЗапасов
			|
			|ИМЕЮЩИЕ
			|	СУММА(Т.Количество) <> 0";
			
			УстановитьПривилегированныйРежим(Истина);
			Запрос.Выполнить(); // создание ВТНовыеДвижения
			УстановитьПривилегированныйРежим(Ложь);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Период КАК Период,
			|	Т.Регистратор,
			|	Т.ВидДвижения КАК ВидДвижения,
			|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|	Т.Организация КАК Организация,
			|	Т.ВидЗапасов КАК ВидЗапасов,
			|	Т.НомерГТД КАК НомерГТД,
			|	Т.КорОрганизация КАК КорОрганизация,
			|	Т.КорВидЗапасов КАК КорВидЗапасов,
			|	Т.Количество,
			|	Т.Количество < 0 КАК ЭтоСторно
			|ИЗ
			|	ВТНовыеДвижения КАК Т
			|ГДЕ
			|	Т.Регистратор = &РегистраторДляЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	ВидДвижения,
			|	АналитикаУчетаНоменклатуры,
			|	Организация,
			|	ВидЗапасов,
			|	НомерГТД,
			|	КорОрганизация,
			|	КорВидЗапасов";
			
			// Запишем новые движения регистраторов.
			Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
				
				Запрос.УстановитьПараметр("РегистраторДляЗаписи", ТекСтр.Регистратор);
				
				НаборЗаписейРезервов = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
				НаборЗаписейРезервов.ДополнительныеСвойства.Вставить(ПризнакЗаписиНабораПриСвертке(), Истина);
				
				СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
				
				НаборЗаписейРезервов.ДополнительныеСвойства.Вставить("ДляПроведения", 
					Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
					
				НаборЗаписейРезервов.Отбор.Регистратор.Установить(ТекСтр.Регистратор);
				
				НаборЗаписейРезервов.Загрузить(Запрос.Выполнить().Выгрузить());
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписейРезервов.Записать(Истина);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЦикла;
			
			Блокировка = Неопределено;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЕстьОшибка = Истина;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить запись движений по резервам товаров организаций по причине ""%1"".'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуСверткиВЖР(ТекстСообщения);
			
		КонецПопытки;
		
		ЗакончитьЗаписьСвернутыхРегистраторов(Запрос);
		
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибка;
	
КонецФункции

// Вспомогательная процедура записи движений - при окончании записи очередной порции регистраторов выполняет необходимые
// действия с временными таблицами.
//
Процедура ЗакончитьЗаписьСвернутыхРегистраторов(Запрос)
	
	Если УниверсальныеМеханизмыПартийИСебестоимости.РазмерВременнойТаблицы(Запрос, "ВТРегистраторы") > 0 Тогда
		
		// Скорректировать ВТДвиженияДляСвертки и ВТТаблицаДвижений на ВТКорректирующиеДвижения: "+" и "-" соответственно.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Организация,
		|	Т.ВидЗапасов,
		|	Т.НомерГТД,
		|	Т.КорОрганизация,
		|	Т.КорВидЗапасов,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТДвиженияДляСвертки_Временная
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Период КАК Период,
		|		Т.Регистратор КАК Регистратор,
		|		Т.СлужебноеВидДвиженияПриход КАК СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		Т.Организация КАК Организация,
		|		Т.ВидЗапасов КАК ВидЗапасов,
		|		Т.НомерГТД КАК НомерГТД,
		|		Т.КорОрганизация КАК КорОрганизация,
		|		Т.КорВидЗапасов КАК КорВидЗапасов,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		ВТДвиженияДляСвертки КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Период,
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры,
		|		Т.Организация,
		|		Т.ВидЗапасов,
		|		Т.НомерГТД,
		|		Т.КорОрганизация,
		|		Т.КорВидЗапасов,
		|		Т.Количество
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК Т) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.Организация,
		|	Т.ВидЗапасов,
		|	Т.НомерГТД,
		|	Т.КорОрганизация,
		|	Т.КорВидЗапасов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДвиженияДляСвертки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ ВТДвиженияДляСвертки
		|ИЗ
		|	ВТДвиженияДляСвертки_Временная КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДвиженияДляСвертки_Временная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.РегистраторСторно,
		|	Т.НомерНабораПолей,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТТаблицаДвижений_Временная
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Период КАК Период,
		|		Т.Регистратор КАК Регистратор,
		|		Т.РегистраторСторно КАК РегистраторСторно,
		|		Т.НомерНабораПолей КАК НомерНабораПолей,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		ВТТаблицаДвижений КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Период,
		|		Т.Регистратор,
		|		Т.РегистраторСторно,
		|		Т.НомерНабораПолей,
		|		-Т.Количество
		|	ИЗ
		|		ВТКорректирующиеДвижения КАК Т) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Период,
		|	Т.Регистратор,
		|	Т.РегистраторСторно,
		|	Т.НомерНабораПолей
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.*
		|ПОМЕСТИТЬ ВТТаблицаДвижений
		|ИЗ
		|	ВТТаблицаДвижений_Временная КАК Т
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.НомерНабораПолей,
		|	Т.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДвижений_Временная
		|";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	УниверсальныеМеханизмыПартийИСебестоимости.УничтожитьВременныеТаблицы(Запрос,
		"ВТКорректирующиеНаборыПолей, ВТКорректирующиеДвижения, ВТРегистраторы, ВТТекущиеДвиженияДляСвертки, ВТНовыеДвижения");
	
КонецПроцедуры

// Выводит сообщение об ошибке свертки в журнал регистрации.
//
Процедура ЗаписатьОшибкуСверткиВЖР(ТекстСообщения)
	
	ИмяСобытия = НСтр("ru = 'Свертка движений по резервам товаров организаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстСообщения);
	
КонецПроцедуры

// Возвращает максимально допустимое количество строк в таблице значений. При превышении этого количества таблица
// значений кэшируется во временную таблицу.
//
Функция МаксимальноеКоличествоСтрокВТаблицеЗначений()
	Возврат 100000;
КонецФункции

// Функция выполняет взаимозачет строк временной таблицы ВТДвиженияДляСвертки и помещает результат в таблицу значений
// СтруктураДанныхСвертки.ТаблицаДвижений.
//
// Параметры:
//  СтруктураДанныхСвертки			 - Структура				 - структура с ключами:
//		* ТаблицаДвижений			 - ТаблицаЗначенией			 - таблица значений, в которую нужно поместить результат взаимозачета
//		* МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, в котором должны быть таблицы
//			ВТДвиженияДляСвертки и ВТНаборыПолей
// 
// Возвращаемое значение:
//  Массив - массив номеров наборов полей, для которых не удалось выполнить взаимозачет.
//
Функция ВыполнитьВзаимозачетВТДвиженийПоРезервам(СтруктураДанныхСвертки)
	
	// Пронумеруем ВТНаборыПолей в колонке НомерНабораПолей. 
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", СтруктураДанныхСвертки.МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("ОграниченияВыборки", Новый Структура);
	ПараметрыРасчета.ОграниченияВыборки.Вставить("КоличествоСтрокВТЗ", МаксимальноеКоличествоСтрокВТаблицеЗначений());
	
	ПараметрыНумерации = УниверсальныеМеханизмыПартийИСебестоимости.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"Организация",
		"",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов",
		"НомерНабораПолей",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов");
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТНаборыПолей");

	// Выполним свертку записей - "взаимозачет" записей таблицы ВТДвиженияДляСвертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Месяц КАК Месяц,
	|	Т.Регистратор КАК Регистратор,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	Т.ЭтоСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерНабораПолей,
	|	Период,
	|	Регистратор
	|ИТОГИ ПО
	|	НомерНабораПолей,
	|	Месяц";
	
	ВыборкаСторноНаборыПолей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Месяц КАК Месяц,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	НЕ Т.ЭтоСторно
	|	И Т.Месяц = &МесяцСторно
	|	И Поля.НомерНабораПолей = &НомерНабораПолей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	НезакрытыеЗаписиСторно = Новый Массив;
	
	Пока ВыборкаСторноНаборыПолей.Следующий() Цикл
		ВыборкаСторноМесяцы = ВыборкаСторноНаборыПолей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСторноМесяцы.Следующий() Цикл
			
			ТекущийНомерНабораПолей = ВыборкаСторноНаборыПолей.НомерНабораПолей;
			
			Запрос.УстановитьПараметр("НомерНабораПолей",  ТекущийНомерНабораПолей);
			Запрос.УстановитьПараметр("МесяцСторно", ВыборкаСторноМесяцы.Месяц);
			
			ТаблицаДляЗачета = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаДляЗачета.Количество() = 0 Тогда
				НезакрытыеЗаписиСторно.Добавить(ТекущийНомерНабораПолей);
				Продолжить; // для этого номера набора нечем зачитывать записи сторно
			КонецЕсли;
			
			ВыборкаСторноЗаписи = ВыборкаСторноМесяцы.Выбрать();
			
			Пока ВыборкаСторноЗаписи.Следующий() Цикл
												
				// Зачтем текущую запись сторно из ВыборкаСторноЗаписи записями из ТаблицаДляЗачета.
				КоличествоСторно = ВыборкаСторноЗаписи.Количество; // отрицательное
				
				Пока КоличествоСторно < 0 И ТаблицаДляЗачета.Количество() > 0 Цикл
					
					// Текущая запись сторно еще не закрыта и есть записи, которыми можно ее закрыть.
					КоличествоЗачета = Мин(-КоличествоСторно, ТаблицаДляЗачета[0].Количество); // положительное
					
					ДобавитьЗаписиДляСверткиВТаблицуЗначений(
						СтруктураДанныхСвертки,
						ВыборкаСторноЗаписи,
						ТаблицаДляЗачета,
						КоличествоЗачета);
					
					Если ТаблицаДляЗачета[0].Количество > КоличествоЗачета Тогда
						ТаблицаДляЗачета[0].Количество = ТаблицаДляЗачета[0].Количество - КоличествоЗачета;
					Иначе
						ТаблицаДляЗачета.Удалить(0);
					КонецЕсли;
					
					КоличествоСторно = КоличествоСторно + КоличествоЗачета;
					
				КонецЦикла;
				
				Если КоличествоСторно < 0 Тогда
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(НезакрытыеЗаписиСторно, ТекущийНомерНабораПолей);
				КонецЕсли;
				
				Если ТаблицаДляЗачета.Количество() = 0 Тогда
					Прервать; // для этого номера набора больше нечем зачитывать оставшиеся записи сторно
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла
	КонецЦикла;
	
	Возврат НезакрытыеЗаписиСторно;

КонецФункции

// Вспомогательная процедура свертки движений - переносит данные из таблицы значений во временную таблицу менеджера
// временных таблиц.
//
// Параметры:
//  СтруктураДанныхСвертки			 - Структура				 - структура с ключами:
//		* ТаблицаДвижений			 - ТаблицаЗначенией			 - таблица значений, которую требуется объединить
//																   с временной таблицей ВТТаблицаДвижений
//		* МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, в котором должны быть
//																   таблица ВТТаблицаДвижений.
//
Процедура ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки)
	
	Если СтруктураДанныхСвертки.ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Перенесем данные из таблицы значений ТаблицаДвижений во временную таблицу ВТТаблицаДвижений.
	ПоляТаблицы    = "%1НомерНабораПолей, %1Период, %1Регистратор, %1Количество, %1РегистраторСторно";
	РесурсыТаблицы = "%1Количество";
	
	УниверсальныеМеханизмыПартийИСебестоимости.ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
		СтруктураДанныхСвертки.МенеджерВременныхТаблиц,
		"ВТТаблицаДвижений",
		СтруктураДанныхСвертки.ТаблицаДвижений,
		ПоляТаблицы,
		ПоляТаблицы,
		РесурсыТаблицы);
	
	СтруктураДанныхСвертки.ТаблицаДвижений.Очистить();
	
КонецПроцедуры

// Возвращает признак наличия в ИБ записей сторно в приходных движениях (т.е. необходима свертка движений).
//
// Возвращаемое значение:
//	Булево - признак наличия записей сторно.
//
Функция ЕстьЗаписиСторно()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Резервы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Резервы
	|ГДЕ 
	|	Резервы.ЭтоСторно";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Создает служебные таблицы ВТДвиженияДляСвертки и ВТНаборыПолей.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, в котором нужно создать таблицу.
//
Процедура СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Сформируем таблицу движений ВТДвиженияДляСвертки, в которой будут содержаться как записи сторно, так и записи для
	// зачета сторно.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СлужебноеВидДвиженияПриход,
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц,
	|	Т.Регистратор,
	|	Т.Период,
	|	Т.Организация КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.НомерГТД КАК НомерГТД,
	|	Т.КорОрганизация КАК КорОрганизация,
	|	Т.КорВидЗапасов КАК КорВидЗапасов,
	|	Т.ЭтоСторно КАК ЭтоСторно,
	|	СУММА(Т.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТДвиженияДляСвертки
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
	|ГДЕ
	|	Т.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ),
	|	Т.Регистратор,
	|	Т.Период,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.КорОрганизация,
	|	Т.КорВидЗапасов,
	|	Т.ЭтоСторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СлужебноеВидДвиженияПриход,
	|	Организация,
	|	АналитикаУчетаНоменклатуры,
	|	ВидЗапасов,
	|	НомерГТД,
	|	КорОрганизация,
	|	КорВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0 КАК НомерНабораПолей,
	|	Т.СлужебноеВидДвиженияПриход,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД,
	|	Т.КорОрганизация,
	|	Т.КорВидЗапасов
	|ПОМЕСТИТЬ ВТНаборыПолей
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|ГДЕ
	|	Т.ЭтоСторно
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Возвращает служебную структуру для свертки сторно.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер, который будет помещен в струтуру.
// 
// Возвращаемое значение:
//  Структура - Структура с ключами "МенеджерВременныхТаблиц" и "ТаблицаДвижений".
//
Функция СтруктураДанныхСвертки(МенеджерВременныхТаблиц)
	
	Перем СтруктураДанныхСвертки;
	
	// Подготовим структуру данных для выполнения свертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	0 КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.Количество КАК Количество,
	|	Т.Регистратор КАК РегистраторСторно
	|ПОМЕСТИТЬ ВТТаблицаДвижений
	|ИЗ
	|	РегистрНакопления.РезервыТоваровОрганизаций КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаДвижений.НомерНабораПолей,
	|	ВТТаблицаДвижений.Период,
	|	ВТТаблицаДвижений.Регистратор,
	|	ВТТаблицаДвижений.Количество,
	|	ВТТаблицаДвижений.РегистраторСторно
	|ИЗ
	|	ВТТаблицаДвижений КАК ВТТаблицаДвижений";
	
	СтруктураДанныхСвертки = Новый Структура;
	СтруктураДанныхСвертки.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	СтруктураДанныхСвертки.Вставить("ТаблицаДвижений", 		   Запрос.Выполнить().Выгрузить());
	Возврат СтруктураДанныхСвертки;

КонецФункции

Процедура ЗачестьВстречныеРезервы()
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ЗапасыСервер.ТекстЗапросаВстречныхРезервов("ВТАналитикиВстречныхРезервов");
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	Если Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервыТоваровОрганизаций");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Результат[0];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВидЗапасов", "ВидЗапасов");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("НомерГТД", "НомерГТД");
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = ЗапасыСервер.ТекстЗапросаВстречныхРезервов("ВыборкаУпорядоченнаяПоОрганизации", "ВТАналитикиВстречныхРезервов");
		
		ТаблицаВстречныхРезервов = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаВстречныхРезервов.Количество() = 0 Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ТекущаяОрганизация = Неопределено;
		Набор = Неопределено;
				
		
		Для Каждого СтрТабл из ТаблицаВстречныхРезервов Цикл
			
			Если СтрТабл.Организация <> ТекущаяОрганизация Тогда
				
				ТекущаяОрганизация = СтрТабл.Организация;
				
				Если Набор <> Неопределено Тогда
					
					СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
					Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
															Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
					Набор.Записывать = Истина;
					Набор.Записать();
					
				КонецЕсли;
				
				КорректировкаРегистров = Документы.КорректировкаРегистров.СоздатьДокумент();
				КорректировкаРегистров.Дата = ТекущаяДатаСеанса();
				КорректировкаРегистров.Комментарий = НСтр("ru = 'Создан автоматически при зачете встречных резервов товаров организаций.'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
				НоваяСтрока = КорректировкаРегистров.ТаблицаРегистров.Добавить();
				НоваяСтрока.Имя = "РезервыТоваровОрганизаций";
				
				КорректировкаРегистров.Записать();
				
				Набор = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(КорректировкаРегистров.Ссылка);
				
			КонецЕсли;
			
			СтрокаПрихода = Набор.Добавить();
			СтрокаПрихода.ВидДвижения = ВидДвиженияНакопления.Приход;
			ЗаполнитьЗначенияСвойств(СтрокаПрихода, СтрТабл);
			
			СтрокаРасхода = Набор.Добавить();
			СтрокаРасхода.ВидДвижения = ВидДвиженияНакопления.Расход;
			ЗаполнитьЗначенияСвойств(СтрокаРасхода, СтрТабл);
			СтрокаРасхода.Организация = СтрТабл.КорОрганизация;
			СтрокаРасхода.КорОрганизация = СтрТабл.Организация;
			СтрокаРасхода.ВидЗапасов = СтрТабл.КорВидЗапасов;
			СтрокаРасхода.КорВидЗапасов = СтрТабл.ВидЗапасов;
						
		КонецЦикла;
		
		Если Набор <> Неопределено Тогда
			
			СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
			Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
															Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
			Набор.Записывать = Истина;
			Набор.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Возникла ошибка зачете встречных резервов: %ПричинаОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПричинаОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Зачет встречных резервов товаров организаций'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыНакопления.РезервыТоваровОрганизаций,
			,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию() Экспорт
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = Истина;
	
	УдалитьЛишниеСторно(ВидДвиженияНакопления.Приход);
	УдалитьЛишниеСторно(ВидДвиженияНакопления.Расход);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьВТДвиженияДляСверткиВТНаборыПолей(МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСторно
	|ИЗ
	|	ВТДвиженияДляСвертки КАК ВТДвиженияДляСвертки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат; // нет записей сторно, завершено успешно
	КонецЕсли;
	
	СтруктураДанныхСвертки = СтруктураДанныхСвертки(МенеджерВременныхТаблиц);
	НезакрытыеЗаписиСторно = ВыполнитьВзаимозачетВТДвиженийПоРезервам_Устаревшая(СтруктураДанныхСвертки);
	
	Если НезакрытыеЗаписиСторно.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить свертку всех записей сторно резервов товаров организаций.'");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Организация.Наименование КАК Организация,
		|	Т.АналитикаУчетаНоменклатуры.Наименование КАК АналитикаУчетаНоменклатуры,
		|	Т.ВидЗапасов.Наименование КАК ВидЗапасов,
		|	Т.НомерГТД КАК НомерГТД,
		|	Т.КорОрганизация.Наименование КАК КорОрганизация,
		|	Т.КорВидЗапасов.Наименование КАК КорВидЗапасов
		|ИЗ
		|	ВТНаборыПолей КАК Т
		|ГДЕ
		|	Т.НомерНабораПолей В(&НезакрытыеЗаписиСторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	АналитикаУчетаНоменклатуры,
		|	ВидЗапасов";
		
		Запрос.УстановитьПараметр("НезакрытыеЗаписиСторно", НезакрытыеЗаписиСторно);
		
		Выборка = Запрос.Выполнить().Выбрать();
		НомерНабора = 0;
		
		Пока Выборка.Следующий() Цикл
			
			НомерНабора = НомерНабора + 1;
			
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1: организация: ""%2"",  номенклатура: ""%3"",  вид запасов: ""%4"",  номер ГТД: ""%5"",  кор. организация: ""%6"",  кор. вид запасов: ""%7""'"),
					СокрЛП(НомерНабора),
					СокрЛП(Выборка.Организация),
					СокрЛП(Выборка.АналитикаУчетаНоменклатуры),
					СокрЛП(Выборка.ВидЗапасов),
					СокрЛП(Выборка.НомерГТД),
					СокрЛП(Выборка.КорОрганизация),
					СокрЛП(Выборка.КорВидЗапасов));
			
		КонецЦикла;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	ПеренестиРезультатСверткиВВТТаблицаДвижений(СтруктураДанныхСвертки);
	ЗаписаноУспешно = ЗаписатьСвернутыеДвиженияПоРезервамТоваровОрганизаций(СтруктураДанныхСвертки);
	
	Если Не ЗаписаноУспешно Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить запись движений по резервам товаров организаций, см. журнал регистрации.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = Ложь;
	 	
КонецПроцедуры

// Устаревший вариант функции ВыполнитьВзаимозачетВТДвиженийПоРезервам. Требуется для перехода на новую версию ИБ.
Функция ВыполнитьВзаимозачетВТДвиженийПоРезервам_Устаревшая(СтруктураДанныхСвертки)
	
	// Пронумеруем ВТНаборыПолей в колонке НомерНабораПолей. 
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", СтруктураДанныхСвертки.МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("ОграниченияВыборки", Новый Структура);
	ПараметрыРасчета.ОграниченияВыборки.Вставить("КоличествоСтрокВТЗ", МаксимальноеКоличествоСтрокВТаблицеЗначений());
	
	ПараметрыНумерации = УниверсальныеМеханизмыПартийИСебестоимости.СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"Организация",
		"",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов",
		"НомерНабораПолей",
		"СлужебноеВидДвиженияПриход, Организация, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, КорОрганизация, КорВидЗапасов");
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТНаборыПолей");

	// Выполним свертку записей - "взаимозачет" записей таблицы ВТДвиженияДляСвертки.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СтруктураДанныхСвертки.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Период КАК Период,
	|	Т.Месяц КАК Месяц,
	|	Т.Регистратор КАК Регистратор,
	|	Т.Количество КАК Количество
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	Т.ЭтоСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерНабораПолей,
	|	Период,
	|	Регистратор
	|ИТОГИ
	|	МИНИМУМ(Месяц)
	|ПО
	|	НомерНабораПолей";
	
	ВыборкаСторноНаборыПолей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поля.НомерНабораПолей КАК НомерНабораПолей,
	|	Т.Месяц КАК Месяц,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор,
	|	Т.Количество КАК Количество,
	|	ЛОЖЬ КАК ПодходящийПериод
	|ИЗ
	|	ВТДвиженияДляСвертки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНаборыПолей КАК Поля
	|		ПО Т.СлужебноеВидДвиженияПриход = Поля.СлужебноеВидДвиженияПриход
	|			И Т.Организация = Поля.Организация
	|			И Т.АналитикаУчетаНоменклатуры = Поля.АналитикаУчетаНоменклатуры
	|			И Т.ВидЗапасов = Поля.ВидЗапасов
	|			И Т.НомерГТД = Поля.НомерГТД
	|			И Т.КорОрганизация = Поля.КорОрганизация
	|			И Т.КорВидЗапасов = Поля.КорВидЗапасов
	|ГДЕ
	|	НЕ Т.ЭтоСторно
	|	И Т.Месяц >= &ПервыйМесяцСторно
	|	И Поля.НомерНабораПолей = &НомерНабораПолей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	НезакрытыеЗаписиСторно = Новый Массив;
	
	Пока ВыборкаСторноНаборыПолей.Следующий() Цикл
		
		ТекущийНомерНабораПолей = ВыборкаСторноНаборыПолей.НомерНабораПолей;
		
		Запрос.УстановитьПараметр("НомерНабораПолей",  ТекущийНомерНабораПолей);
		Запрос.УстановитьПараметр("ПервыйМесяцСторно", ВыборкаСторноНаборыПолей.Месяц);
		
		ТаблицаДляЗачета = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаДляЗачета.Количество() = 0 Тогда
			НезакрытыеЗаписиСторно.Добавить(ТекущийНомерНабораПолей);
			Продолжить; // для этого номера набора нечем зачитывать записи сторно
		КонецЕсли;
		
		ВыборкаСторноЗаписи = ВыборкаСторноНаборыПолей.Выбрать();
		
		Пока ВыборкаСторноЗаписи.Следующий() Цикл
			
			// Упорядочим ТаблицаДляЗачета по периоду и налогообложению.
			Для Каждого ТекСтр Из ТаблицаДляЗачета Цикл
				
				ТекСтр.ПодходящийПериод = (ТекСтр.Месяц >= ВыборкаСторноЗаписи.Месяц);
								
			КонецЦикла;
			
			ТаблицаДляЗачета.Сортировать(
				"ПодходящийПериод Убыв, Период, Регистратор",
				Новый СравнениеЗначений);
			
			// Зачтем текущую запись сторно из ВыборкаСторноЗаписи записями из ТаблицаДляЗачета.
			КоличествоСторно = ВыборкаСторноЗаписи.Количество; // отрицательное
			
			Пока КоличествоСторно < 0 И ТаблицаДляЗачета.Количество() > 0 И ТаблицаДляЗачета[0].ПодходящийПериод Цикл
				
				// Текущая запись сторно еще не закрыта и есть записи, которыми можно ее закрыть.
				КоличествоЗачета = Мин(-КоличествоСторно, ТаблицаДляЗачета[0].Количество); // положительное
				
				ДобавитьЗаписиДляСверткиВТаблицуЗначений(
					СтруктураДанныхСвертки,
					ВыборкаСторноЗаписи,
					ТаблицаДляЗачета,
					КоличествоЗачета);
				
				Если ТаблицаДляЗачета[0].Количество > КоличествоЗачета Тогда
					ТаблицаДляЗачета[0].Количество = ТаблицаДляЗачета[0].Количество - КоличествоЗачета;
				Иначе
					ТаблицаДляЗачета.Удалить(0);
				КонецЕсли;
				
				КоличествоСторно = КоличествоСторно + КоличествоЗачета;
				
			КонецЦикла;
			
			Если КоличествоСторно < 0 Тогда
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(НезакрытыеЗаписиСторно, ТекущийНомерНабораПолей);
			КонецЕсли;
			
			Если ТаблицаДляЗачета.Количество() = 0 Тогда
				Прервать; // для этого номера набора больше нечем зачитывать оставшиеся записи сторно
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НезакрытыеЗаписиСторно;

КонецФункции

Процедура УдалитьЛишниеСторно(ВидДвижения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) КАК Период
		|ПОМЕСТИТЬ РезервыТоваровОрганизаций
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество > 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ),
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	Период,
		|	НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) КАК Период
		|ПОМЕСТИТЬ СторноРезервовТоваровОрганизаций
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество < 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ),
		|	РезервыТоваровОрганизаций.НомерГТД,
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД,
		|	ВидЗапасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СторноРезервовТоваровОрганизаций.Период КАК Период,
		|	СторноРезервовТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	СторноРезервовТоваровОрганизаций.Организация КАК Организация,
		|	СторноРезервовТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	СторноРезервовТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	СторноРезервовТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	СторноРезервовТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СторноРезервовТоваровОрганизаций.Количество + ЕСТЬNULL(РезервыТоваровОрганизаций.Количество, 0) КАК ПревышениеСторно
		|ПОМЕСТИТЬ ОтборыРезервовПоПревышающимСторно
		|ИЗ
		|	СторноРезервовТоваровОрганизаций КАК СторноРезервовТоваровОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|		ПО СторноРезервовТоваровОрганизаций.АналитикаУчетаНоменклатуры = РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры
		|			И СторноРезервовТоваровОрганизаций.Организация = РезервыТоваровОрганизаций.Организация
		|			И СторноРезервовТоваровОрганизаций.ВидЗапасов = РезервыТоваровОрганизаций.ВидЗапасов
		|			И СторноРезервовТоваровОрганизаций.НомерГТД = РезервыТоваровОрганизаций.НомерГТД
		|			И СторноРезервовТоваровОрганизаций.Период = РезервыТоваровОрганизаций.Период
		|			И СторноРезервовТоваровОрганизаций.КорОрганизация = РезервыТоваровОрганизаций.КорОрганизация
		|			И СторноРезервовТоваровОрганизаций.КорВидЗапасов = РезервыТоваровОрганизаций.КорВидЗапасов
		|ГДЕ
		|	СторноРезервовТоваровОрганизаций.Количество + ЕСТЬNULL(РезервыТоваровОрганизаций.Количество, 0) < 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезервыТоваровОрганизаций.Регистратор КАК Регистратор,
		|	РезервыТоваровОрганизаций.Период КАК Период,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.Организация КАК Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов КАК ВидЗапасов,
		|	РезервыТоваровОрганизаций.КорОрганизация КАК КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов КАК КорВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД КАК НомерГТД,
		|	СУММА(РезервыТоваровОрганизаций.Количество) КАК Количество,
		|	ОтборыРезервовПоПревышающимСторно.ПревышениеСторно КАК ПревышениеСторно,
		|	ОтборыРезервовПоПревышающимСторно.Период КАК НачалоПериода
		|ИЗ
		|	РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборыРезервовПоПревышающимСторно КАК ОтборыРезервовПоПревышающимСторно
		|		ПО РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры = ОтборыРезервовПоПревышающимСторно.АналитикаУчетаНоменклатуры
		|			И РезервыТоваровОрганизаций.Организация = ОтборыРезервовПоПревышающимСторно.Организация
		|			И РезервыТоваровОрганизаций.ВидЗапасов = ОтборыРезервовПоПревышающимСторно.ВидЗапасов
		|			И РезервыТоваровОрганизаций.КорОрганизация = ОтборыРезервовПоПревышающимСторно.КорОрганизация
		|			И РезервыТоваровОрганизаций.КорВидЗапасов = ОтборыРезервовПоПревышающимСторно.КорВидЗапасов
		|			И РезервыТоваровОрганизаций.НомерГТД = ОтборыРезервовПоПревышающимСторно.НомерГТД
		|			И (НАЧАЛОПЕРИОДА(РезервыТоваровОрганизаций.Период, МЕСЯЦ) = ОтборыРезервовПоПревышающимСторно.Период)
		|ГДЕ
		|	РезервыТоваровОрганизаций.Количество < 0
		|	И РезервыТоваровОрганизаций.ВидДвижения = &ВидДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервыТоваровОрганизаций.Регистратор,
		|	РезервыТоваровОрганизаций.Период,
		|	РезервыТоваровОрганизаций.Организация,
		|	РезервыТоваровОрганизаций.ВидЗапасов,
		|	РезервыТоваровОрганизаций.НомерГТД,
		|	РезервыТоваровОрганизаций.АналитикаУчетаНоменклатуры,
		|	РезервыТоваровОрганизаций.КорОрганизация,
		|	РезервыТоваровОрганизаций.КорВидЗапасов,
		|	ОтборыРезервовПоПревышающимСторно.Период,
		|	ОтборыРезервовПоПревышающимСторно.ПревышениеСторно
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|ИТОГИ ПО
		|	НачалоПериода,
		|	АналитикаУчетаНоменклатуры,
		|	Организация,
		|	ВидЗапасов,
		|	КорОрганизация,
		|	КорВидЗапасов,
		|	НомерГТД,
		|	ПревышениеСторно";
	
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНачалоПериода = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеРегистраторовНаборов = Новый Соответствие;
	
	Пока ВыборкаНачалоПериода.Следующий() Цикл
		ВыборкаАналитикаУчетаНоменклатуры = ВыборкаНачалоПериода.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАналитикаУчетаНоменклатуры.Следующий() Цикл
			ВыборкаОрганизация = ВыборкаАналитикаУчетаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОрганизация.Следующий() Цикл
				ВыборкаВидЗапасов = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидЗапасов.Следующий() Цикл
					ВыборкаКорОрганизация = ВыборкаВидЗапасов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаКорОрганизация.Следующий() Цикл
						ВыборкаКорВидЗапасов = ВыборкаКорОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаКорВидЗапасов.Следующий() Цикл
							ВыборкаНомерГТД = ВыборкаКорВидЗапасов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаНомерГТД.Следующий() Цикл
								ВыборкаПревышениеСторно = ВыборкаНомерГТД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаПревышениеСторно.Следующий() Цикл
									
									ПревышениеСторно = ВыборкаПревышениеСторно.ПревышениеСторно;
									КорПревышениеСторно = ВыборкаПревышениеСторно.ПревышениеСторно;
									
									ВыборкаДетальныеЗаписи = ВыборкаПревышениеСторно.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ВыборкаДетальныеЗаписи.Следующий() И ПревышениеСторно Цикл
										
										ТаблицаЗаписей = СоответствиеРегистраторовНаборов.Получить(ВыборкаДетальныеЗаписи.Регистратор);
										Если ТаблицаЗаписей = Неопределено Тогда 
											НаборЗаписей = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
											НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
											НаборЗаписей.Прочитать();
											ТаблицаЗаписей = НаборЗаписей.Выгрузить();
											ТаблицаЗаписей.Индексы.Добавить("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
											СоответствиеРегистраторовНаборов.Вставить(ВыборкаДетальныеЗаписи.Регистратор, ТаблицаЗаписей);
										КонецЕсли;
										
										ЗаписиКУдалениюИзТаблицы = Новый Массив;
										
										СтруктураПоиска = Новый Структура("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
										ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаДетальныеЗаписи);
										СтрокиТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
										
										Для Каждого СтрокаИзТаблицы Из СтрокиТаблицыЗаписей Цикл
											
											Если СтрокаИзТаблицы.Количество >= 0 Тогда
												Продолжить;
											КонецЕсли;
											
											ВычитаемоеСторно = Макс(СтрокаИзТаблицы.Количество, ПревышениеСторно);
											СтрокаИзТаблицы.Количество = СтрокаИзТаблицы.Количество - ВычитаемоеСторно;
											Если СтрокаИзТаблицы.Количество = 0 Тогда
												ЗаписиКУдалениюИзТаблицы.Добавить(СтрокаИзТаблицы);
											КонецЕсли;
											
											ПревышениеСторно = ПревышениеСторно - ВычитаемоеСторно;
											
											Если Не ПревышениеСторно Тогда
												Прервать;
											КонецЕсли;
											
										КонецЦикла;
										
										КорСтруктураПоиска = Новый Структура("Период, АналитикаУчетаНоменклатуры, ВидЗапасов, Организация, КорВидЗапасов, КорОрганизация, НомерГТД");
										КорСтруктураПоиска.Период = ВыборкаДетальныеЗаписи.Период;
										КорСтруктураПоиска.АналитикаУчетаНоменклатуры = ВыборкаДетальныеЗаписи.АналитикаУчетаНоменклатуры;
										КорСтруктураПоиска.ВидЗапасов = ВыборкаДетальныеЗаписи.КорВидЗапасов;
										КорСтруктураПоиска.Организация = ВыборкаДетальныеЗаписи.КорОрганизация;
										КорСтруктураПоиска.НомерГТД = ВыборкаДетальныеЗаписи.НомерГТД;
										КорСтруктураПоиска.КорВидЗапасов = ВыборкаДетальныеЗаписи.ВидЗапасов;
										КорСтруктураПоиска.КорОрганизация = ВыборкаДетальныеЗаписи.Организация;
										КорСтрокиТаблицыЗаписей = ТаблицаЗаписей.НайтиСтроки(КорСтруктураПоиска);
										
										Для Каждого КорСтрокаИзТаблицы Из КорСтрокиТаблицыЗаписей Цикл
											
											Если КорСтрокаИзТаблицы.Количество >= 0 Тогда
												Продолжить;
											КонецЕсли;
											
											ВычитаемоеСторно = Макс(КорСтрокаИзТаблицы.Количество, КорПревышениеСторно);
											КорСтрокаИзТаблицы.Количество = КорСтрокаИзТаблицы.Количество - ВычитаемоеСторно;
											Если КорСтрокаИзТаблицы.Количество = 0 Тогда
												ЗаписиКУдалениюИзТаблицы.Добавить(КорСтрокаИзТаблицы);
											КонецЕсли;
											
											КорПревышениеСторно = КорПревышениеСторно - ВычитаемоеСторно;
											
											Если Не КорПревышениеСторно Тогда
												Прервать;
											КонецЕсли;
											
										КонецЦикла;
										
										Если ЗаписиКУдалениюИзТаблицы.Количество() Тогда
											Для Каждого ЗаписьКУдалению Из ЗаписиКУдалениюИзТаблицы Цикл
												ТаблицаЗаписей.Удалить(ЗаписьКУдалению);
											КонецЦикла;
										КонецЕсли;
										
									КонецЦикла;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого НаборРегистратор Из СоответствиеРегистраторовНаборов Цикл
		Набор = РегистрыНакопления.РезервыТоваровОрганизаций.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(НаборРегистратор.Ключ);
		Набор.Загрузить(НаборРегистратор.Значение);
		Набор.ДополнительныеСвойства.Вставить(ПризнакЗаписиНабораПриСвертке(), Истина);
		СтруктураВременныеТаблицы = Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
		Набор.ДополнительныеСвойства.Вставить("ДляПроведения", 
			Новый Структура("СтруктураВременныеТаблицы",СтруктураВременныеТаблицы));
		Набор.ДополнительныеСвойства.Вставить("НеПроверятьЛишнееСторно", Истина);
		Набор.Записывать = Истина;
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
