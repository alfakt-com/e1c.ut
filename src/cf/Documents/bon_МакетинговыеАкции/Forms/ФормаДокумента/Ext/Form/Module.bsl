
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ



&НаКлиенте
Процедура ТипЦенностиПриИзменении(Элемент)
	
	ТипЦенностиПриИзмененииВып();

КонецПроцедуры

&НаКлиенте
Процедура ПоСчетчикуПриИзменении(Элемент)
	ПоСчетчикуПриИзмененииВып();
	Если Объект.ПоКратности = Истина Тогда
		Элементы.Группа3.Видимость = Ложь;
		Объект.КолКратности = Число(0);
		Объект.Кратность = Число(0);
	    Объект.ПоКратности = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоКратностиПриИзменении(Элемент)
	ПоКратностиПриИзмененииВып();
	Если Объект.ПоСчетчику = Истина Тогда 
		Элементы.Группа2.Видимость = Ложь;
		Объект.УсловиеСчетчика = "";
		Объект.ЗначениеИскомСчетчик = "";
		Объект.ПоСчетчику = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоСуммеПриИзменении(Элемент)
	
	Элементы.ДобавитьОтборПоТовару.Видимость = Объект.ПоСумме;
	ПоСуммеПриИзмененииВып();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
 ЗаполнитьСтруктурныеЕдиницы();	
 ПолучитьДействующиеСтруктурныеЕдиницы();
 
 //Проверка на данные
 ВидДокументаПриИзмененииВып();


	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктурныеЕдиницы()
	
	мСтруктурныеЕдиницы = РеквизитФормыВЗначение("СтруктураПодразделений");
	//ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Запрос = Новый Запрос;
	
	// составим список подразделений
	Запрос.Текст = "ВЫБРАТЬ
	               |	bon_ПодразделенияДляАкций.Организация КАК Владелец,
	               |	bon_ПодразделенияДляАкций.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	               |ИЗ
	               |	РегистрСведений.bon_ПодразделенияДляАкций КАК bon_ПодразделенияДляАкций
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	bon_ПодразделенияДляАкций.Организация ИЕРАРХИЯ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеРодительскиеСтроки = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Владелец) Тогда
			РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.Владелец];
			Если РодительскаяСтрока = Неопределено Тогда
				РодительскаяСтрока = СоответствиеРодительскиеСтроки[Выборка.Владелец];
				Если РодительскаяСтрока = Неопределено Тогда
					РодительскаяСтрока = мСтруктурныеЕдиницы.Строки.Добавить();
					РодительскаяСтрока.ПодразделениеОрганизации = Выборка.Владелец;
					СоответствиеРодительскиеСтроки.Вставить(Выборка.Владелец, РодительскаяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = РодительскаяСтрока.Строки.Добавить();
			НоваяСтрока.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
			СоответствиеРодительскиеСтроки.Вставить(Выборка.ПодразделениеОрганизации, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// удалим из дерева подразделений лишние строки, когда у подразделения нет дочерних
	Стек = Новый Массив();
	Для Каждого СтрокиДерева Из мСтруктурныеЕдиницы.Строки Цикл
		// верхний уровень всегда типа организации - их оставляем без изменения, а вот вложенные в них строки - чистим
		Стек.Добавить(СтрокиДерева.Строки);
	КонецЦикла;
	
	Пока Стек.Количество() > 0 Цикл
		СтрокиДерева = Стек[Стек.Количество() - 1];
		Стек.Удалить(Стек.Количество() - 1);
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.Строки.Количество() = 1 Тогда
				Если СтрокаДерева.ПодразделениеОрганизации = СтрокаДерева.Строки[0].ПодразделениеОрганизации Тогда
					// едиственная дочерняя ветвь полностью совпадает с текущей - удалим дочернюю
					СтрокаДерева.ЭтоГруппа = Ложь;
					СтрокаДерева.Строки.Удалить(0);
				Иначе
					// добавим в стек что бы проанализировать дочерние ветви
					Стек.Добавить(СтрокаДерева.Строки);
				КонецЕсли;
			Иначе
				// добавляем в стек, чтобы обработать на следующем шаге цикла
				Стек.Добавить(СтрокаДерева.Строки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(мСтруктурныеЕдиницы, "СтруктураПодразделений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДействующиеСтруктурныеЕдиницы()
	
	Если Объект.ДействующиеСтруктурныеЕдиницы.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	мСтруктурныеЕдиницы = СтруктураПодразделений.ПолучитьЭлементы();
	
	СоотвествтиеСтроки = Новый Соответствие;
	
	РазложитьСтруктурныеЕдиницыВСоответствие(мСтруктурныеЕдиницы, СоотвествтиеСтроки, Ложь);
	
	Для каждого стрТЧ Из Объект.ДействующиеСтруктурныеЕдиницы Цикл
		
		Если НЕ ЗначениеЗаполнено(стрТЧ.ПодразделениеОрганизации) Тогда
			элСтрокаДерева = СоотвествтиеСтроки[стрТЧ.Организация];
		Иначе
			элСтрокаДерева = СоотвествтиеСтроки[стрТЧ.ПодразделениеОрганизации];
		КонецЕсли; 
		Если не элСтрокаДерева = Неопределено ТОгда
			элСтрокаДерева.Пометка = Истина;
			УстановитьПометкиВоВсемДереве(элСтрокаДерева, "Установить");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазложитьСтруктурныеЕдиницыВСоответствие(Дерево, СоответствиеРезультат, ТолькоДействующие)
	
	Для каждого элСтрокаДерева Из Дерево Цикл
		
		Если ТолькоДействующие Тогда
			
			Если элСтрокаДерева.Пометка  И НЕ ТипЗнч(элСтрокаДерева.ПодразделениеОрганизации) = Тип("СправочникСсылка.Организации") Тогда
				СоответствиеРезультат.Вставить(элСтрокаДерева.ПодразделениеОрганизации, элСтрокаДерева);
			Иначе
				РазложитьСтруктурныеЕдиницыВСоответствие(элСтрокаДерева.ПолучитьЭлементы(), СоответствиеРезультат, ТолькоДействующие);	
			КонецЕсли;
			
		Иначе
			
			СоответствиеРезультат.Вставить(элСтрокаДерева.ПодразделениеОрганизации, элСтрокаДерева);
			РазложитьСтруктурныеЕдиницыВСоответствие(элСтрокаДерева.ПолучитьЭлементы(), СоответствиеРезультат, ТолькоДействующие);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиВоВсемДереве(РодительскаяСтрока, ВыполняемоеДействие)
	
	мСтроки = РодительскаяСтрока.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из мСтроки Цикл
		
		Если ВыполняемоеДействие = "Установить" Тогда
			СтрокаДерева.Пометка = Истина;
		ИначеЕсли ВыполняемоеДействие = "Снять" Тогда
			СтрокаДерева.Пометка = Ложь;
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			УстановитьПометкиВоВсемДереве(СтрокаДерева, ВыполняемоеДействие);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометкиВоВсемДереве() 


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Ербол - старт
	ВопросНет = Ложь;
	Для Каждого стр из Объект.СкидкиНаТовар Цикл
		//СтатусОдин = Ложь;
		//СтатусДва = Ложь;
		//РезультатОдин = ПолучитьПервыйСтатус(стр.Номенклатура, Объект.ПериодДействияНачало, Объект.ПериодДействияКонец);
		Если ПолучитьПервыйСтатус(стр.Номенклатура, Объект.ПериодДействияНачало, Объект.ПериодДействияКонец) = Истина Тогда
			ВопросНет = Истина;
		КонецЕсли;
	КонецЦикла;
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("В списке имеются товары, которые есть в действующих маркетинговых акциях!", Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет И ВопросНет = Истина Тогда
		Отказ = Истина;
	КонецЕсли;
	//Ербол - финиш
	
	ЗаписатьДействующиеСтруктурныеЕдиницы();
	Объект.Автор = ПользователиКлиентСервер.АвторизованныйПользователь();
КонецПроцедуры

//Ербол - старт
Функция ПолучитьПервыйСтатус(НоменклатураПерем, ПериодНачало, ПериодКонец)
	Резалт = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	bon_МакетинговыеАкции.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ Вт1
		|ИЗ
		|	Документ.bon_МакетинговыеАкции КАК bon_МакетинговыеАкции
		|ГДЕ
		|	bon_МакетинговыеАкции.Проведен = ИСТИНА
		|	И bon_МакетинговыеАкции.ПериодДействияНачало <= &ДатаКонец
		|	И bon_МакетинговыеАкции.ПериодДействияКонец >= &ДатаНачало
		|	И bon_МакетинговыеАкции.Ссылка <> &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт1.Ссылка КАК Ссылка,
		|	bon_МакетинговыеАкцииСкидкиНаТовар.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Вт2
		|ИЗ
		|	Вт1 КАК Вт1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.bon_МакетинговыеАкции.СкидкиНаТовар КАК bon_МакетинговыеАкцииСкидкиНаТовар
		|		ПО Вт1.Ссылка = bon_МакетинговыеАкцииСкидкиНаТовар.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт2.Ссылка КАК Ссылка,
		|	Вт2.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ Вт3
		|ИЗ
		|	Вт2 КАК Вт2
		|ГДЕ
		|	Вт2.Номенклатура = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт3.Ссылка КАК Ссылка
		|ИЗ
		|	Вт3 КАК Вт3
		|
		|СГРУППИРОВАТЬ ПО
		|	Вт3.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаКонец", ПериодКонец);
	Запрос.УстановитьПараметр("ДатаНачало", ПериодНачало);
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураПерем);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Для Каждого стр ИЗ Объект.Ссылка.ПолучитьОбъект().ДействующиеСтруктурныеЕдиницы Цикл				
	        РезалтВнутр = Ложь;
			Запрос2 = Новый Запрос;
			Запрос2.Текст = 
				"ВЫБРАТЬ
				|	bon_МакетинговыеАкции.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ Вт1
				|ИЗ
				|	Документ.bon_МакетинговыеАкции КАК bon_МакетинговыеАкции
				|ГДЕ
				|	bon_МакетинговыеАкции.Ссылка = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.ПодразделениеОрганизации КАК ПодразделениеОрганизации
				|ПОМЕСТИТЬ Вт2
				|ИЗ
				|	Вт1 КАК Вт1
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.bon_МакетинговыеАкции.ДействующиеСтруктурныеЕдиницы КАК bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы
				|		ПО Вт1.Ссылка = bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.ПодразделениеОрганизации
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Вт2.ПодразделениеОрганизации КАК ПодразделениеОрганизации
				|ИЗ
				|	Вт2 КАК Вт2
				|ГДЕ
				|	Вт2.ПодразделениеОрганизации = &ПодразделениеОрганизации";
			
			Запрос2.УстановитьПараметр("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			Запрос2.УстановитьПараметр("ПодразделениеОрганизации", стр.ПодразделениеОрганизации);
			
			РезультатЗапроса2 = Запрос2.Выполнить();
			
			ВыборкаДетальныеЗаписи2 = РезультатЗапроса2.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи2.Следующий() Цикл
				Сообщить(Строка(НоменклатураПерем) + Строка(" -> ") + Строка(ВыборкаДетальныеЗаписи.Ссылка));
				Резалт = Истина;
				РезалтВнутр = Истина;
				Прервать;
			КонецЦикла;			
			Если РезалтВнутр Тогда Прервать; КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Резалт; 
		
КонецФункции
//Ербол - финиш

&НаКлиенте
Процедура ЗаписатьДействующиеСтруктурныеЕдиницы()
	
	мСтруктурныеЕдиницы = СтруктураПодразделений.ПолучитьЭлементы();
	
	Для Каждого Стр Из мСтруктурныеЕдиницы Цикл 
		Стр.Пометка = Ложь;		
	КонецЦикла;
	
	СоотвествтиеСтроки = Новый Соответствие;
	
	РазложитьСтруктурныеЕдиницыВСоответствие(мСтруктурныеЕдиницы, СоотвествтиеСтроки, Истина);
	
	Объект.ДействующиеСтруктурныеЕдиницы.Очистить();
	
	Если СоотвествтиеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого элСтрока Из СоотвествтиеСтроки Цикл
		
		стрТЧ = Объект.ДействующиеСтруктурныеЕдиницы.Добавить();
		
		//Если ТипЗнч(элСтрока.Ключ) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		//	стрТЧ.Организация = элСтрока.Ключ;
		//Иначе
			
			стрТЧ.ПодразделениеОрганизации = элСтрока.Ключ;
			
			стрРодитель = элСтрока.Значение.ПолучитьРодителя();
			буфРодитель = стрРодитель;
			
			// найдем родителя для определения организации
			Пока буфРодитель <> Неопределено Цикл
				
				буфРодитель = стрРодитель.ПолучитьРодителя();
				
				Если буфРодитель <> Неопределено Тогда
					стрРодитель = буфРодитель;	
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если стрРодитель = Неопределено Тогда
				стрТЧ.Организация = элСтрока.Ключ	
			Иначе 
				стрТЧ.Организация = стрРодитель.ПодразделениеОрганизации;
			КонецЕсли;
			
		//КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры	

&НаСервере
Функция ТипФиксированныеБонусы()
	Возврат Перечисления.bon_ТипЦенности.ФиксированныеБонусы;	
КонецФункции

&НаСервере
Функция ТипПроцекнтБонусов()
	Возврат Перечисления.bon_ТипЦенности.ПроцентБонусов;	
КонецФункции

&НаСервере
Функция ТипПодарок()
	Возврат Перечисления.bon_ТипЦенности.Подарок;	
КонецФункции

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)	
	ВидДокументаПриИзмененииВып();	
КонецПроцедуры

&НаСервере
Функция ВидДокументаПоСчетчику()
	Возврат Перечисления.bon_УсловиеМаркентиговойАктивности.ПоСчетчикуИКрастности;	
КонецФункции

&НаСервере
Функция ВидДокументаСкидкаНаценка()
	Возврат Перечисления.bon_УсловиеМаркентиговойАктивности.СкидкаНаТовар;	
КонецФункции

&НаСервере
Функция ВидДокументаКаскадныеСкидки()
	Возврат Перечисления.bon_УсловиеМаркентиговойАктивности.КаскадныеСкидки;	
КонецФункции



#Область Команды

&НаКлиенте
Процедура ВидДокументаПриИзмененииВып()
	
	Если Объект.ВидДокумента = ВидДокументаПоСчетчику() Тогда
		Элементы.УсловияПоСчетчику.Видимость 		= Истина;
		Элементы.СтрСкидкаНаТовар.Видимость 		= Ложь;
		Элементы.ХарактеристикаБонусов.Видимость 	= Истина;
		Элементы.СтрКаскадныеСкидки.Видимость 		= Ложь;
	    ТипЦенностиПриИзмененииВып();
		ПоСчетчикуПриИзмененииВып();
		ПоКратностиПриИзмененииВып();
		ПоСуммеПриИзмененииВып();
	ИначеЕсли Объект.ВидДокумента = ВидДокументаСкидкаНаценка() Тогда
		Элементы.УсловияПоСчетчику.Видимость 		= Ложь;             
		Элементы.СтрСкидкаНаТовар.Видимость 		= Истина; 
		Элементы.ХарактеристикаБонусов.Видимость 	= Ложь;
		Элементы.СтрКаскадныеСкидки.Видимость 		= Ложь;
		ВыборСкидкаНаТовар();
		ПриИзмененииВидСкидкиНаценкиТовара();
	ИначеЕсли Объект.ВидДокумента = ВидДокументаКаскадныеСкидки() Тогда
		Элементы.УсловияПоСчетчику.Видимость 		= Ложь;             
		Элементы.СтрСкидкаНаТовар.Видимость 		= Ложь; 
		Элементы.ХарактеристикаБонусов.Видимость 	= Ложь;
		Объект.Валюта = "";
		Элементы.СтрКаскадныеСкидки.Видимость 		= Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенностиПриИзмененииВып()
	
	Если Объект.ТипЦенности = ТипФиксированныеБонусы() Тогда
		Элементы.БонусыФикс.Видимость 						= Истина;	
		Элементы.ПроцентБонусов.Видимость					= Ложь;
		Элементы.ПредоставляемаяЦенностьПодарок.Видимость 	= Ложь;
		
		Объект.ПроцентБонусов = Число(0);
		Объект.ПредоставляемаяЦенностьПодарок.Очистить();
	ИначеЕсли Объект.ТипЦенности = ТипПроцекнтБонусов() Тогда  
		Элементы.ПроцентБонусов.Видимость 					= Истина;	
		Элементы.БонусыФикс.Видимость 						= Ложь;
		Элементы.ПредоставляемаяЦенностьПодарок.Видимость 	= Ложь;
		
		Объект.БонусыФикс = Число(0);
		Объект.ПредоставляемаяЦенностьПодарок.Очистить();
	ИначеЕсли Объект.ТипЦенности = ТипПодарок() Тогда
		Элементы.ПредоставляемаяЦенностьПодарок.Видимость 	= Истина;	
		Элементы.ПроцентБонусов.Видимость					= Ложь;	
		Элементы.БонусыФикс.Видимость 						= Ложь;
		
		Объект.БонусыФикс = Число(0);
		Объект.ПроцентБонусов = Число(0);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСкидкаНаТовар()
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта =УстановитьВалюту();
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПоСчетчикуПриИзмененииВып()
	Если Объект.ПоСчетчику = Истина Тогда 
		Элементы.Группа2.Видимость = Истина;
	ИначеЕсли Объект.ПоСчетчику = Ложь Тогда 
		Элементы.Группа2.Видимость = Ложь;
		Объект.УсловиеСчетчика = "";
		Объект.ЗначениеИскомСчетчик = "";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПоКратностиПриИзмененииВып()
	Если Объект.ПоКратности = Истина Тогда 
		Элементы.Группа3.Видимость = Истина;
		Если Объект.КолКратности = Число(0) Тогда
			Объект.КолКратности = Число(1)	
		КонецЕсли;
	ИначеЕсли Объект.ПоКратности = Ложь Тогда 
		Элементы.Группа3.Видимость = Ложь;
		Объект.КолКратности = Число(0);
		Объект.Кратность = Число(0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоСуммеПриИзмененииВып()
	Если Объект.ПоСумме = Истина Тогда 
		Элементы.Группа4.Видимость = Истина;
		Если Объект.ДобавитьОтборПоТовару Тогда
			Элементы.Группа6.Видимость = Объект.ДобавитьОтборПоТовару;
		КонецЕсли;
	ИначеЕсли Объект.ПоСумме = Ложь Тогда 
		Элементы.Группа4.Видимость = Ложь;
		Объект.УсловиеСуммы = "";
		Объект.Сумма = "";
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СтруктураПодразделенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ТекСтрока = Элементы.СтруктураПодразделений.ТекущиеДанные;
	
	ТекСтрока.Пометка = НЕ ТекСтрока.Пометка;
	
	УстановитьПометкиПодчиненных(ТекСтрока);
	УстановитьПометкиРодителей(ТекСтрока);

КонецПроцедуры

&НаКлиенте 
Процедура УстановитьПометкиПодчиненных(ТекСтрока)
	
	Пометка	= ТекСтрока.Пометка;
	Подчиненные	= ТекСтрока.ПолучитьЭлементы();
	
	Если Подчиненные.Количество() > 0 Тогда
		
		Для каждого СтрокаДерева из Подчиненные Цикл
			
			СтрокаДерева.Пометка = Пометка;
			УстановитьПометкиПодчиненных(СтрокаДерева)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

&НаКлиенте 
Процедура УстановитьПометкиРодителей(ТекСтрока)
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	мСтрокиРодителя = Родитель.ПолучитьЭлементы();
	
	ТекСостояние		= Родитель.Пометка;
	
	НайденыВключенные	= Ложь;
	НайденыВыключенные	= Ложь;
	
	Для каждого Строка из мСтрокиРодителя Цикл
		
		Если НЕ Строка.Пометка Тогда
			НайденыВыключенные	= Истина;
		Иначе
			НайденыВключенные	= Истина;						
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если НайденыВключенные И (Не НайденыВыключенные) Тогда
		Пометка = Истина;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Пометка = Ложь;
	КонецЕсли;
	
	Если Пометка = ТекСостояние Тогда
		Возврат;
	Иначе
		
		Родитель.Пометка = Пометка;
		УстановитьПометкиРодителей(Родитель);
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()

&НаКлиенте
Процедура СтруктураПодразделенийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодразделенийПометкаПриИзменении(Элемент)
	ТекСтрока = Элементы.СтруктураПодразделений.ТекущиеДанные;
	
	УстановитьПометкиПодчиненных(ТекСтрока);
	УстановитьПометкиРодителей(ТекСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТовара(Команда)
	
	ПараметрыУказанияУстановить();
	
	Отказ = Ложь;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заказ клиента'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
	ВалютаДон = УстановитьВалюту(); 
	ПараметрыФормы.Вставить("Валюта",                                  ВалютаДон);
	ПараметрыФормы.Вставить("Заголовок",                               Строка("Подбор товаров"));
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",              Истина);
	
	ПараметрыФормы.Вставить("ВариантыОбеспечения",    ВариантыОбеспечения);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция  УстановитьВалюту() 
	Возврат Справочники.Валюты.НайтиПоНаименованию("KZT");
КонецФункции

&НаСервере
Процедура ПараметрыУказанияУстановить()
	ПараметрыУказанияСерий= Новый ФиксированнаяСтруктура(ПараметрыУказанияСерий(Объект, Документы.bon_МакетинговыеАкции));
КонецПроцедуры

&НаСервере
Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат ПараметрыУказанияСерийВып(ЗначенияРеквизитов);
	
КонецФункции

&НаСервере
Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	Если Структура.Свойство("Дата") И НЕ ЗначениеЗаполнено(Структура.Дата) Тогда
		Структура.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Структура.Свойство("ДатаОтгрузки") И НЕ ЗначениеЗаполнено(Структура.ДатаОтгрузки) Тогда
		Структура.ДатаОтгрузки = ТекущаяДатаСеанса();
	КонецЕсли;
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция ПараметрыУказанияСерийВып(Объект)
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "СкидкиНаТовар";
	ПараметрыУказанияСерий.ИмяТЧТовары = "СкидкиНаТовар";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры 
				И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям
				И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
				
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

&НаСервере
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад, Дата, Статус";
	
	Возврат ИменаРеквизитов;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
		
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = '00010101';
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = '00010101';
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Истина;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
	ЭтаФорма,
	ЗначенияРеквизитов,
	ВыбранноеЗначение,
	"ОбработкаВыбораПодборНаКлиентеПослеВопроса",
	Объект.СкидкиНаТовар.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл       
		                          
		ТекущаяСтрока = Объект.СкидкиНаТовар.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, ВидЦены");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦены(Команда)
	
	Для Каждого ИзмЦен Из Объект.СкидкиНаТовар Цикл 
		ИзмЦен.ВидЦены = Объект.ВидЦены;	
		ИзмЦен.Валюта  = Объект.Валюта;
	КонецЦикла;
	
	Для Каждого СтрТаб Из Объект.СкидкиНаТовар Цикл 	
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");	
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрТаб, СтруктураДействий, КэшированныеЗначения);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиенте
Процедура РассчитатьПроцМин(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦена = СТрМин.Цена - Окр((СТрМин.Цена * (Процент/100)),0,0);
	КонецЦикла;	
	Объект.СкидкиНаТовар.Сортировать("Цена, ИтогЦена");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцПлюс(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦена = СТрМин.Цена + Окр((СТрМин.Цена * (Процент/100)),0,0);
	КонецЦикла;	
	Объект.СкидкиНаТовар.Сортировать("Цена, ИтогЦена");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуМин(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦена = СТрМин.Цена - Объект.СуммаСкидкиНаценки;
	КонецЦикла;	
	Объект.СкидкиНаТовар.Сортировать("Цена, ИтогЦена");

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПлюс(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦена = СТрМин.Цена + Объект.СуммаСкидкиНаценки;
	КонецЦикла;	
	Объект.СкидкиНаТовар.Сортировать("Цена, ИтогЦена");

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасчеты(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦена = Число(0);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	
	Объект.СуммаСкидкиНаценки = Число(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиНаценкиПриИзменении(Элемент)
	
	Объект.ПроцентСкидкиНаценки = Число(0);

КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиНаценкиТовараПриИзменении(Элемент)
	
	ПриИзмененииВидСкидкиНаценкиТовара();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииВидСкидкиНаценкиТовара()
	
	Если Строка(Объект.ВидСкидкиНаценкиТовара) = "Сумма" Тогда
		Элементы.ГруппаПоСумме.Видимость = Истина;
		Элементы.ГруппаПроцентУст.Видимость = Ложь;
		Объект.ПроцентСкидкиНаценки = 0;
		Элементы.СкидкиНаТовар.ПодчиненныеЭлементы.СкидкиНаТоварИтогЦена.Видимость = Истина;
		Элементы.СкидкиНаТовар.ПодчиненныеЭлементы.СкидкиНаТоварИтогЦенаПроцент.Видимость = Ложь;
	ИначеЕсли Строка(Объект.ВидСкидкиНаценкиТовара) = "Процент" Тогда
		Элементы.ГруппаПоСумме.Видимость = Ложь;
		Элементы.ГруппаПроцентУст.Видимость = Истина;
		Элементы.СкидкиНаТовар.ПодчиненныеЭлементы.СкидкиНаТоварИтогЦена.Видимость = Ложь;
		Элементы.СкидкиНаТовар.ПодчиненныеЭлементы.СкидкиНаТоварИтогЦенаПроцент.Видимость = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетатьСуммуПроцМинус(Команда)
	
	Для Каждого СТрМин Из Объект.СкидкиНаТовар Цикл 
		СТрМин.ИтогЦенаПроцент = СТрМин.Цена - Окр((СТрМин.Цена * (Объект.ПроцентСкидкиНаценки/100)),0,0);
	КонецЦикла;	
	Объект.СкидкиНаТовар.Сортировать("Цена, ИтогЦенаПроцент");

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтборПоТоваруПриИзменении(Элемент)
	Элементы.Группа6.Видимость = Объект.ДобавитьОтборПоТовару;
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваровПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	
	АдресВоВременномХранилище = Неопределено;
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровПоОтбору.Форма.Форма",
		ПараметрыФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ДобавитьТоварыПоОтборуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АдресВоВременномХранилище = Результат;
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
        ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
    КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	ТаблицаНоменклатура = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого СтрокаТаблицы Из ТаблицаНоменклатура Цикл
		ТекущаяСтрока = Объект.ТоварыДляОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТаблицы, "Номенклатура");
	КонецЦикла;
 
КонецПроцедуры







#КонецОбласти





