#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Таможенная декларация на импорт".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ТаможеннаяДекларацияИмпорт);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьИмпортныеЗакупки";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры

#Область Печать
// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТаможеннаяДекларацияНаИмпорт";
	КомандаПечати.Представление = НСтр("ru = 'Таможенная декларация на импорт'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТаможеннаяДекларацияНаИмпорт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТаможеннаяДекларацияНаИмпорт",
			НСтр("ru='Таможенная декларация на импорт'"), 
			СформироватьПечатнуюФормуТаможеннаяДекларация(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;	
КонецПроцедуры

Функция СформироватьПечатнуюФормуТаможеннаяДекларация(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаможеннаяДекларацияИмпорт.Ссылка КАК Ссылка,
	|	ТаможеннаяДекларацияИмпорт.Валюта,
	|	ТаможеннаяДекларацияИмпорт.ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпорт.ДокументПоступления КАК Ссылка,
	|	ТаможеннаяДекларацияИмпорт.ДокументПоступления.Валюта КАК ВалютаПоступления,
	|	ТаможеннаяДекларацияИмпорт.ДокументПоступления.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовПоступления
	|ПОМЕСТИТЬ ВТДанныеДокументов_ПоступлениеТоваров
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпорт
	|ГДЕ
	|	ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка;
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Ссылка,
	|	КурсыВалют.КурсВалюты * КурсыВалют.КратностьВалютыУпр / (КурсыВалют.КратностьВалюты * КурсыВалют.КурсВалютыУпр) КАК КоэффициентПересчетаВВалютуУпр,
	|	КурсыВалют.КурсВалюты * КурсыВалют.КратностьВалютыРегл / (КурсыВалют.КратностьВалюты * КурсыВалют.КурсВалютыРегл) КАК КоэффициентПересчетаВВалютуРегл,
	|	КурсыВалют.КурсВалюты * КурсыВалют.КратностьВалютыВзаиморасчетов / (КурсыВалют.КратностьВалюты * КурсыВалют.КурсВалютыВзаиморасчетов) КАК КоэффициентПересчетаВВалютуВзаиморасчетов,
	|	КурсыВалют.КурсВалютыВзаиморасчетов * КурсыВалют.КратностьВалютыРегл / (КурсыВалют.КратностьВалютыВзаиморасчетов * КурсыВалют.КурсВалютыРегл) КАК КоэффициентПересчетаВВалютуРеглВалютыВзаиморасчетов
	|ПОМЕСТИТЬ КоэффициентыПересчета_ТаможеннойДекларации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыУпр = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыУпр
	|		КОНЕЦ КАК КурсВалютыУпр,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыУпр = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыУпр
	|		КОНЕЦ КАК КратностьВалютыУпр,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыРегл = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыРегл
	|		КОНЕЦ КАК КурсВалютыРегл,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыРегл = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыРегл
	|		КОНЕЦ КАК КратностьВалютыРегл,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалюты = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалюты
	|		КОНЕЦ КАК КурсВалюты,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалюты = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалюты
	|		КОНЕЦ КАК КратностьВалюты,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыВзаиморасчетов = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыВзаиморасчетов
	|		КОНЕЦ КАК КурсВалютыВзаиморасчетов,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыВзаиморасчетов = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыВзаиморасчетов
	|		КОНЕЦ КАК КратностьВалютыВзаиморасчетов
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТДанныеДокументов.Ссылка КАК Ссылка,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаУпр
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыУпр,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаУпр
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыУпр,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаРегл
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыРегл,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаРегл
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыРегл,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.Валюта
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалюты,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.Валюта
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалюты,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетов
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыВзаиморасчетов,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетов
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыВзаиморасчетов
	|		ИЗ
	|			ВТДанныеДокументов КАК ВТДанныеДокументов
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВТДанныеДокументов.Ссылка КАК Ссылка,
	|					КурсыВалют.Валюта КАК Валюта,
	|					МАКСИМУМ(КурсыВалют.Период) КАК Период
	|				ИЗ
	|					ВТДанныеДокументов КАК ВТДанныеДокументов
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|						ПО ВТДанныеДокументов.Ссылка.Дата >= КурсыВалют.Период
	|							И (КурсыВалют.Валюта = ВТДанныеДокументов.Валюта
	|								ИЛИ КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетов
	|								ИЛИ КурсыВалют.Валюта = &ВалютаУпр
	|								ИЛИ КурсыВалют.Валюта = &ВалютаРегл)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВТДанныеДокументов.Ссылка,
	|					КурсыВалют.Валюта) КАК ПериодыКурсов
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|					ПО ПериодыКурсов.Период = КурсыВалют.Период
	|						И ПериодыКурсов.Валюта = КурсыВалют.Валюта
	|				ПО ВТДанныеДокументов.Ссылка = ПериодыКурсов.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТДанныеДокументов.Ссылка) КАК ВложенныйЗапрос) КАК КурсыВалют;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.ПоступлениеТоваров,
	|	КурсыВалют.КурсВалютыПоступления * КурсыВалют.КратностьВалютыУпр / (КурсыВалют.КратностьВалютыПоступления * КурсыВалют.КурсВалютыУпр) КАК ПоступлениеКоэффициентПересчетаВВалютуУпр,
	|	КурсыВалют.КурсВалютыПоступления * КурсыВалют.КратностьВалютыРегл / (КурсыВалют.КратностьВалютыПоступления * КурсыВалют.КурсВалютыРегл) КАК ПоступлениеКоэффициентПересчетаВВалютуРегл,
	|	КурсыВалют.КурсВалютыПоступления * КурсыВалют.КратностьВалютыВзаиморасчетовПоступления / (КурсыВалют.КратностьВалютыПоступления * КурсыВалют.КурсВалютыВзаиморасчетовПоступления) КАК ПоступлениеКоэффициентПересчетаВВалютуВзаиморасчетов,
	|	КурсыВалют.КурсВалютыВзаиморасчетовПоступления * КурсыВалют.КратностьВалютыРегл / (КурсыВалют.КратностьВалютыВзаиморасчетовПоступления * КурсыВалют.КурсВалютыРегл) КАК ПоступлениеКоэффициентПересчетаВВалютуРеглВалютыВзаиморасчетов
	|ПОМЕСТИТЬ КоэффициентыПересчета_ПоступленияТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыУпр = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыУпр
	|		КОНЕЦ КАК КурсВалютыУпр,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыУпр = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыУпр
	|		КОНЕЦ КАК КратностьВалютыУпр,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыРегл = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыРегл
	|		КОНЕЦ КАК КурсВалютыРегл,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыРегл = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыРегл
	|		КОНЕЦ КАК КратностьВалютыРегл,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыПоступления = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыПоступления
	|		КОНЕЦ КАК КурсВалютыПоступления,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыПоступления = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыПоступления
	|		КОНЕЦ КАК КратностьВалютыПоступления,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КурсВалютыВзаиморасчетовПоступления = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КурсВалютыВзаиморасчетовПоступления
	|		КОНЕЦ КАК КурсВалютыВзаиморасчетовПоступления,
	|		ВЫБОР
	|			КОГДА ВложенныйЗапрос.КратностьВалютыВзаиморасчетовПоступления = 0
	|				ТОГДА 1
	|			ИНАЧЕ ВложенныйЗапрос.КратностьВалютыВзаиморасчетовПоступления
	|		КОНЕЦ КАК КратностьВалютыВзаиморасчетовПоступления
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТДанныеДокументов.Ссылка КАК ПоступлениеТоваров,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаУпр
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыУпр,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаУпр
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыУпр,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаРегл
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыРегл,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = &ВалютаРегл
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыРегл,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаПоступления
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыПоступления,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаПоступления
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыПоступления,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетовПоступления
	|						ТОГДА КурсыВалют.Курс
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КурсВалютыВзаиморасчетовПоступления,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетовПоступления
	|						ТОГДА КурсыВалют.Кратность
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК КратностьВалютыВзаиморасчетовПоступления
	|		ИЗ
	|			ВТДанныеДокументов_ПоступлениеТоваров КАК ВТДанныеДокументов
	|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВТДанныеДокументов.Ссылка КАК Ссылка,
	|					КурсыВалют.Валюта КАК Валюта,
	|					МАКСИМУМ(КурсыВалют.Период) КАК Период
	|				ИЗ
	|					ВТДанныеДокументов_ПоступлениеТоваров КАК ВТДанныеДокументов
	|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|						ПО ВТДанныеДокументов.Ссылка.Дата >= КурсыВалют.Период
	|							И (КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаПоступления
	|								ИЛИ КурсыВалют.Валюта = ВТДанныеДокументов.ВалютаВзаиморасчетовПоступления
	|								ИЛИ КурсыВалют.Валюта = &ВалютаУпр
	|								ИЛИ КурсыВалют.Валюта = &ВалютаРегл)
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВТДанныеДокументов.Ссылка,
	|					КурсыВалют.Валюта) КАК ПериодыКурсов
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|					ПО ПериодыКурсов.Период = КурсыВалют.Период
	|						И ПериодыКурсов.Валюта = КурсыВалют.Валюта
	|				ПО ВТДанныеДокументов.Ссылка = ПериодыКурсов.Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТДанныеДокументов.Ссылка) КАК ВложенныйЗапрос) КАК КурсыВалют;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДекларацияОбщий.Ссылка КАК Ссылка,
	|	ДекларацияОбщий.Ссылка.Номер КАК Номер,
	|	ДекларацияОбщий.Ссылка.Дата КАК Дата,
	|	ДекларацияОбщий.Ссылка.Организация КАК Организация,
	|	ДекларацияОбщий.Ссылка.Контрагент КАК Партнер,
	|	ДекларацияОбщий.НомерГТД КАК НомерГТД,
	|	ДекларацияОбщий.ПоступлениеТоваров,
	|	ДекларацияОбщий.НомерСтроки,
	|	ДекларацияОбщий.НомерРаздела КАК НомерРаздела,
	|	ДекларацияОбщий.Номенклатура,
	|	ДекларацияОбщий.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ДекларацияОбщий.Характеристика,
	|	ДекларацияОбщий.Характеристика.Наименование КАК ХарактеристикаНаименование,
	|	ДекларацияОбщий.Количество КАК КоличествоДекларация,
	|	ДекларацияОбщий.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|	ДекларацияОбщий.СуммаПошлиныРегл КАК СуммаПошлиныРегл,
	|	ДекларацияОбщий.СпециальнаяПошлинаРегл КАК СпециальнаяПошлинаРегл,
	|	ДекларацияОбщий.СуммаНДСРегл КАК СуммаНДСРегл,
	|	ДекларацияОбщий.СуммаПошлиныВВалюте КАК СуммаПошлиныВВалюте,
	|	ДекларацияОбщий.СпециальнаяПошлинаВВалюте КАК СпециальнаяПошлинаВВалюте,
	|	ДекларацияОбщий.Валюта КАК Валюта,
	|	ДекларацияОбщий.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДекларацияОбщий.СуммаНДСВВалюте КАК СуммаНДСВВалюте,
	|	ДекларацияОбщий.СтавкаПошлины КАК СтавкаПошлины,
	|	ДекларацияОбщий.СтавкаНДС,
	|	ДекларацияОбщий.КодНоменклатуры,
	|	ДекларацияОбщий.СуммаПоступленияВал КАК СуммаПоступленияВал,
	|	ДекларацияОбщий.СуммаПоступленияРегл КАК СуммаПоступленияРегл,
	|	ДекларацияОбщий.КоличествоПоступление КАК Количество,
	|	ДекларацияОбщий.ЦенаВал,
	|	ДекларацияОбщий.ЦенаРегл,
	|	ДекларацияОбщий.ВалютаПоступления КАК ВалютаПоступления,
	|	ДекларацияОбщий.ВалютаВзаиморасчетовПоступления КАК ВалютаВзаиморасчетовПоступления,
	|	ДекларацияОбщий.СуммаПоступленияРегл + ДекларацияОбщий.СуммаПошлиныРегл + ДекларацияОбщий.СпециальнаяПошлинаРегл  + ДекларацияОбщий.СуммаНДСРегл КАК ОбщаяСуммаРегл,
	|	ВЫБОР
	|		КОГДА ДекларацияОбщий.КоличествоПоступление <> 0
	|			ТОГДА (ДекларацияОбщий.СуммаПоступленияРегл + ДекларацияОбщий.СуммаПошлиныРегл + ДекларацияОбщий.СпециальнаяПошлинаРегл + ДекларацияОбщий.СуммаНДСРегл) / ДекларацияОбщий.КоличествоПоступление
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбщаяЦенаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		Декларация.НомерСтроки КАК НомерСтроки,
	|		Декларация.НомерРаздела КАК НомерРаздела,
	|		Декларация.Номенклатура КАК Номенклатура,
	|		Декларация.Характеристика КАК Характеристика,
	|		Декларация.Количество КАК Количество,
	|		Декларация.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость,
	|		Декларация.СуммаПошлиныРегл КАК СуммаПошлиныРегл,
	|		Декларация.СпециальнаяПошлинаРегл КАК СпециальнаяПошлинаРегл,
	|		Декларация.СуммаНДСРегл КАК СуммаНДСРегл,
	|		Декларация.СуммаПошлиныВВалюте КАК СуммаПошлиныВВалюте,
	|		Декларация.СпециальнаяПошлинаВВалюте КАК СпециальнаяПошлинаВВалюте,
	|		Декларация.Валюта КАК Валюта,
	|		Декларация.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		Декларация.СуммаНДСВВалюте КАК СуммаНДСВВалюте,
	|		Декларация.СтавкаПошлины КАК СтавкаПошлины,
	|		Декларация.СтавкаНДС КАК СтавкаНДС,
	|		Декларация.КодНоменклатуры КАК КодНоменклатуры,
	|		Декларация.Ссылка КАК Ссылка,
	|		Декларация.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|		Декларация.НомерГТД КАК НомерГТД,
	|		ЕСТЬNULL(ПоступлениеТМЗ.СуммаПоступленияВал, 0) КАК СуммаПоступленияВал,
	|		ЕСТЬNULL(ПоступлениеТМЗ.СуммаПоступленияРегл, 0) КАК СуммаПоступленияРегл,
	|		ЕСТЬNULL(ПоступлениеТМЗ.Количество, 0) КАК КоличествоПоступление,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПоступлениеТМЗ.Количество, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПоступлениеТМЗ.СуммаПоступленияВал, 0) / ЕСТЬNULL(ПоступлениеТМЗ.Количество, 0)
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаВал,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПоступлениеТМЗ.Количество, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПоступлениеТМЗ.СуммаПоступленияРегл, 0) / ЕСТЬNULL(ПоступлениеТМЗ.Количество, 0)
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаРегл,
	|		ПоступлениеТМЗ.Валюта КАК ВалютаПоступления,
	|		ПоступлениеТМЗ.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовПоступления
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МИНИМУМ(ДанныеДокументаТовары.НомерСтроки) КАК НомерСтроки,
	|			ДанныеДокументаТовары.НомерРаздела КАК НомерРаздела,
	|			ДанныеДокументаТовары.Номенклатура КАК Номенклатура,
	|			ДанныеДокументаТовары.Характеристика КАК Характеристика,
	|			ДанныеДокументаТовары.НомерГТД КАК НомерГТД,
	|			СУММА(ДанныеДокументаТовары.Количество) КАК Количество,
	|			СУММА(ДанныеДокументаТовары.ТаможеннаяСтоимость) КАК ТаможеннаяСтоимость,
	|			СУММА(ДанныеДокументаТовары.СуммаПошлины * КоэффициентыПересчета.КоэффициентПересчетаВВалютуРегл) КАК СуммаПошлиныРегл,
	|			СУММА(ДанныеДокументаТовары.СпециальнаяПошлина * КоэффициентыПересчета.КоэффициентПересчетаВВалютуРегл) КАК СпециальнаяПошлинаРегл,
	|			СУММА(ДанныеДокументаТовары.СуммаНДС * КоэффициентыПересчета.КоэффициентПересчетаВВалютуРегл) КАК СуммаНДСРегл,
	|			СУММА(ДанныеДокументаТовары.СуммаПошлины * КоэффициентыПересчета.КоэффициентПересчетаВВалютуВзаиморасчетов) КАК СуммаПошлиныВВалюте,
	|			СУММА(ДанныеДокументаТовары.СпециальнаяПошлина * КоэффициентыПересчета.КоэффициентПересчетаВВалютуВзаиморасчетов) КАК СпециальнаяПошлинаВВалюте,
	|			ДанныеДокумента.Валюта КАК Валюта,
	|			ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|			СУММА(ДанныеДокументаТовары.СуммаНДС * КоэффициентыПересчета.КоэффициентПересчетаВВалютуВзаиморасчетов) КАК СуммаНДСВВалюте,
	|			ДанныеДокументаРазделы.СтавкаПошлины КАК СтавкаПошлины,
	|			ДанныеДокументаРазделы.СтавкаНДС КАК СтавкаНДС,
	|			ДанныеДокументаТовары.Номенклатура.Код КАК КодНоменклатуры,
	|			ДанныеДокумента.Ссылка КАК Ссылка,
	|			ДанныеДокументаТовары.ДокументПоступления КАК ПоступлениеТоваров
	|		ИЗ
	|			ВТДанныеДокументов КАК ДанныеДокумента
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокументаТовары
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ДанныеДокументаРазделы
	|					ПО ДанныеДокументаТовары.Ссылка = ДанныеДокументаРазделы.Ссылка
	|						И ДанныеДокументаТовары.НомерРаздела = ДанныеДокументаРазделы.НомерРаздела
	|				ПО ДанныеДокумента.Ссылка = ДанныеДокументаТовары.Ссылка
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоэффициентыПересчета_ТаможеннойДекларации КАК КоэффициентыПересчета
	|				ПО ДанныеДокумента.Ссылка = КоэффициентыПересчета.Ссылка
	|		ГДЕ
	|			ДанныеДокументаТовары.Ссылка В
	|					(ВЫБРАТЬ
	|						ВТДанныеДокументов.Ссылка
	|					ИЗ
	|						ВТДанныеДокументов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеДокументаТовары.Номенклатура,
	|			ДанныеДокументаТовары.Характеристика,
	|			ДанныеДокументаРазделы.СтавкаНДС,
	|			ДанныеДокументаТовары.НомерРаздела,
	|			ДанныеДокументаТовары.НомерГТД,
	|			ДанныеДокументаРазделы.СтавкаПошлины,
	|			ДанныеДокументаТовары.Номенклатура.Код,
	|			ДанныеДокумента.Ссылка,
	|			ДанныеДокументаТовары.ДокументПоступления,
	|			ДанныеДокумента.Валюта,
	|			ДанныеДокумента.ВалютаВзаиморасчетов) КАК Декларация
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	|				ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|				ПриобретениеТоваровУслуг.Валюта КАК Валюта,
	|				ПриобретениеТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|				СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество,
	|				СУММА(ПриобретениеТоваровУслугТовары.Сумма) КАК СуммаПоступленияВал,
	|				ПриобретениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|				СУММА(ПриобретениеТоваровУслугТовары.Сумма * ЕСТЬNULL(КоэффициентыПересчета.КоэффициентПересчетаВВалютуРегл, 1)) КАК СуммаПоступленияРегл
	|			ИЗ
	|				Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							КоэффициентыПересчета.ПоступлениеТоваров КАК ПоступлениеТоваров,
	|							КоэффициентыПересчета.ПоступлениеКоэффициентПересчетаВВалютуРегл КАК КоэффициентПересчетаВВалютуРегл
	|						ИЗ
	|							КоэффициентыПересчета_ПоступленияТоваров КАК КоэффициентыПересчета) КАК КоэффициентыПересчета
	|							ПО ПриобретениеТоваровУслуг.Ссылка = КоэффициентыПересчета.ПоступлениеТоваров
	|					ПО ПриобретениеТоваровУслугТовары.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|			ГДЕ
	|				ПриобретениеТоваровУслуг.Ссылка В
	|						(ВЫБРАТЬ
	|							ВТДанныеДокументов_ПоступлениеТоваров.Ссылка
	|						ИЗ
	|							ВТДанныеДокументов_ПоступлениеТоваров)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПриобретениеТоваровУслугТовары.Номенклатура,
	|				ПриобретениеТоваровУслуг.Ссылка,
	|				ПриобретениеТоваровУслугТовары.Характеристика,
	|				ПриобретениеТоваровУслуг.Валюта,
	|				ПриобретениеТоваровУслуг.ВалютаВзаиморасчетов) КАК ПоступлениеТМЗ
	|			ПО Декларация.ПоступлениеТоваров = ПоступлениеТМЗ.Ссылка
	|				И Декларация.Номенклатура = ПоступлениеТМЗ.Номенклатура
	|				И Декларация.Характеристика = ПоступлениеТМЗ.Характеристика) КАК ДекларацияОбщий
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Партнер),
	|	МАКСИМУМ(НомерГТД),
	|	СУММА(КоличествоДекларация),
	|	СУММА(ТаможеннаяСтоимость),
	|	СУММА(СуммаПошлиныРегл),
	|	СУММА(СпециальнаяПошлинаРегл),
	|	СУММА(СуммаНДСРегл),
	|	СУММА(СуммаПошлиныВВалюте),
	|	СУММА(СпециальнаяПошлинаВВалюте),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ВалютаВзаиморасчетов),
	|	СУММА(СуммаНДСВВалюте),
	|	МАКСИМУМ(СтавкаПошлины),
	|	СУММА(СуммаПоступленияВал),
	|	СУММА(СуммаПоступленияРегл),
	|	СУММА(Количество),
	|	МАКСИМУМ(ВалютаПоступления),
	|	МАКСИМУМ(ВалютаВзаиморасчетовПоступления),
	|	СУММА(ОбщаяСуммаРегл),
	|	СУММА(ОбщаяЦенаРегл)
	|ПО
	|	ОБЩИЕ,
	|	Ссылка,
	|	НомерРаздела";
	
	Результат = Запрос.Выполнить();
	ВыборкаОбщиеИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОбщиеИтоги.Следующий();
	ПечатьВВалюте = Не ВыборкаОбщиеИтоги.СуммаПошлиныВВалюте = 0 ИЛИ
					Не ВыборкаОбщиеИтоги.СпециальнаяПошлинаВВалюте = 0 ИЛИ
					Не ВыборкаОбщиеИтоги.СуммаНДСВВалюте = 0; 
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТаможеннаяДекларацияИмпорт_ТаможеннаяДекларация";
	
	Макет = ПолучитьМакет("ПФ_MXL_ТаможеннаяДекларация");
	
	ОбластьШапки = Макет.ПолучитьОбласть(?(ПечатьВВалюте, "ШапкаВал", "Шапка"));
	
	Если ПечатьВВалюте Тогда
		ОбластьРаздела = Макет.ПолучитьОбласть("РазделВал");
		ОбластьДанных  = Макет.ПолучитьОбласть("ДанныеВал");
		ОбластьПодвала = Макет.ПолучитьОбласть("ПодвалВал");
		СтруктураСуммовыхПолей 			= Новый Структура("СуммаПоступленияРегл,СуммаПошлиныВВалюте,СуммаПошлиныРегл,СпециальнаяПошлинаВВалюте,СпециальнаяПошлинаРегл,СуммаНДСВВалюте,СуммаНДСРегл,ОбщаяСуммаРегл");
		СтруктураСуммовыхПолейПодвала 	= Новый Структура("СуммаПоступленияРегл,ТаможеннаяСтоимость,СуммаПошлиныРегл,СпециальнаяПошлинаРегл,СуммаНДСРегл,ОбщаяСуммаРегл");
	Иначе
		ОбластьРаздела = Макет.ПолучитьОбласть("Раздел");
		ОбластьДанных  = Макет.ПолучитьОбласть("Данные");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		СтруктураСуммовыхПолей 			= Новый Структура("СуммаПоступленияРегл,СуммаПошлиныРегл,СпециальнаяПошлинаРегл,СуммаНДСРегл,ОбщаяСуммаРегл");
		СтруктураСуммовыхПолейПодвала 	= Новый Структура("СуммаПоступленияРегл,ТаможеннаяСтоимость,СуммаПошлиныРегл,СпециальнаяПошлинаРегл,СуммаНДСРегл,ОбщаяСуммаРегл");
	КонецЕсли;
	
	РеквизитыДокумента 	= Новый Структура("Номер, Дата");
	СинонимДокумента 	= НСтр("ru='Таможенная декларация на импорт'");
	
	ВыборкаПоДокументам = ВыборкаОбщиеИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПервыйДокумент = Истина;
	
	КэшСведенийОбОрганизации = Новый Соответствие;
	КэшСведенийОПартнере     = Новый Соответствие;
	
	ПараметрыЗаголовок = Новый Структура;
	ПараметрыШапка     = Новый Структура;
	ПараметрыРаздела   = Новый Структура;
	ПараметрыДанных    = Новый Структура;
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ПараметрыРаздела.Очистить();
		ПараметрыДанных.Очистить();
		ПараметрыЗаголовок.Очистить();
		ПараметрыШапка.Очистить();
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
		ПараметрыЗаголовок.Вставить("ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента));
		
		СведенияОбОрганизации = КэшСведенийОбОрганизации.Получить(ВыборкаПоДокументам.Организация);
		Если СведенияОбОрганизации = Неопределено Тогда
			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоДокументам.Организация, ВыборкаПоДокументам.Дата);
			КэшСведенийОбОрганизации.Вставить(ВыборкаПоДокументам.Организация, СведенияОбОрганизации);
		КонецЕсли;
		
		СведенияОПартнере = КэшСведенийОПартнере.Получить(ВыборкаПоДокументам.Партнер);
		Если СведенияОПартнере = Неопределено Тогда
			СведенияОПартнере = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаПоДокументам.Партнер, ВыборкаПоДокументам.Дата);
			КэшСведенийОПартнере.Вставить(ВыборкаПоДокументам.Партнер, СведенияОПартнере);
		КонецЕсли;
		
		ПараметрыЗаголовок.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,"));
		ПараметрыЗаголовок.Вставить("ПредставлениеКонтрагента", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПартнере, "ПолноеНаименование,"));
		ПараметрыЗаголовок.Вставить("ГТДНомер", ВыборкаПоДокументам.НомерГТД);
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовка, ВыборкаПоДокументам.Ссылка);
		
		ОбластьЗаголовка.Параметры.Заполнить(ПараметрыЗаголовок);
		ТабДокумент.Вывести(ОбластьЗаголовка);
		
		ПараметрыШапка.Вставить("Валюта", ВыборкаПоДокументам.ВалютаВзаиморасчетов);
		ПараметрыШапка.Вставить("ВалютаДокумента", ВыборкаПоДокументам.Валюта);
		ПараметрыШапка.Вставить("СтрокаНДС", НСтр("ru='НДС'"));
		
		ОбластьШапки.Параметры.Заполнить(ПараметрыШапка);
		ТабДокумент.Вывести(ОбластьШапки);
		
		ОбластьПодвала.Параметры.Заполнить(ВыборкаПоДокументам);
		
		ВыборкаРазделы = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРазделы.Следующий() Цикл
			ОбластьРаздела.Параметры.Заполнить(ВыборкаРазделы);
			
			ПредставлениеРаздела = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Раздел №%1, пошлина (%2) : %3%, специальная пошлина (%4), таможенный сбор (%5), НДС (%6)'"),
							СокрЛП(ВыборкаРазделы.НомерРаздела),
							СокрЛП(?(ПечатьВВалюте,ВыборкаРазделы.ВалютаВзаиморасчетов, ВыборкаРазделы.Валюта)),
							СокрЛП(ВыборкаРазделы.СтавкаПошлины),
							СокрЛП(?(ПечатьВВалюте,ВыборкаРазделы.ВалютаВзаиморасчетов, ВыборкаРазделы.Валюта)),
							СокрЛП(?(ПечатьВВалюте,ВыборкаРазделы.ВалютаВзаиморасчетов, ВыборкаРазделы.Валюта)),
							СокрЛП(?(ПечатьВВалюте,ВыборкаРазделы.ВалютаВзаиморасчетов, ВыборкаРазделы.Валюта)));
			
			ПараметрыРаздела.Вставить("ПредставлениеРаздела", ПредставлениеРаздела);
			
			// форматирование суммовых полей
			Для каждого СуммовоеПоле из СтруктураСуммовыхПолей Цикл
				ПараметрыРаздела.Вставить(Строка(СуммовоеПоле.Ключ), ФормированиеПечатныхФорм.ФорматСумм(ВыборкаРазделы[СуммовоеПоле.Ключ]));
			КонецЦикла;
			
			ОбластьРаздела.Параметры.Заполнить(ПараметрыРаздела);
			ТабДокумент.Вывести(ОбластьРаздела);
			
			ВыборкаДанные= ВыборкаРазделы.Выбрать();
			Пока ВыборкаДанные.Следующий() Цикл
				ПараметрыДанных.Очистить();
				ОбластьДанных.Параметры.Заполнить(ВыборкаДанные);
				ПараметрыДанных.Вставить("Номенклатура", НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(ВыборкаДанные.ТоварНаименование, ВыборкаДанные.ХарактеристикаНаименование));
				
				// форматирование суммовых полей
				Для каждого СуммовоеПоле из СтруктураСуммовыхПолей Цикл
					ПараметрыДанных.Вставить(Строка(СуммовоеПоле.Ключ), ФормированиеПечатныхФорм.ФорматСумм(ВыборкаДанные[СуммовоеПоле.Ключ]));
				КонецЦикла;
				
				ПараметрыДанных.Вставить("ЦенаРегл", ФормированиеПечатныхФорм.ФорматСумм(ВыборкаДанные.ЦенаРегл));
				ПараметрыДанных.Вставить("ОбщаяЦенаРегл", ФормированиеПечатныхФорм.ФорматСумм(ВыборкаДанные.ОбщаяЦенаРегл));
				ОбластьДанных.Параметры.Заполнить(ПараметрыДанных);
				ТабДокумент.Вывести(ОбластьДанных);
			КонецЦикла;
		КонецЦикла;
		
		// форматирование суммовых полей
		Для каждого СуммовоеПоле из СтруктураСуммовыхПолейПодвала Цикл
			ОбластьПодвала.Параметры[СуммовоеПоле.Ключ] = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаПоДокументам[СуммовоеПоле.Ключ],,"0,00");
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	ВсеРеквизиты - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	РеквизитыОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	
	ВсеРеквизиты.Добавить("Соглашение");
	ВсеРеквизиты.Добавить("Договор");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером Тогда
		РеквизитыОперации.Добавить("Соглашение");
		РеквизитыОперации.Добавить("Договор");
	КонецЕсли;
КонецПроцедуры

// Получает реквизиты документа
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ТаможеннаяДекларацияИмпорт - Ссылка на документ.
// 
// Возвращаемое значение:
//  Структура - Структура реквизитов.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Дата", '00010101');
	Реквизиты.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером);
	Реквизиты.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Реквизиты.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Реквизиты.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Реквизиты.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Реквизиты.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПустаяСсылка());
	Реквизиты.Вставить("РасчетыПоДоговору", Ложь);
	Реквизиты.Вставить("ПоЗаказу", Ложь);
	Реквизиты.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	Реквизиты.Вставить("СуммаДокумента", 0);
	Реквизиты.Вставить("СуммаВзаиморасчетов", 0);
	Реквизиты.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Данные.Дата КАК Дата,
	|	Данные.ВариантОформления КАК ХозяйственнаяОперация,
	|	Данные.Организация КАК Организация,
	|	Данные.Партнер КАК Партнер,
	|	Данные.Контрагент КАК Контрагент,
	|	Данные.Договор КАК Договор,
	|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ВЫБОР КОГДА Данные.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|	ЛОЖЬ КАК ПоЗаказу,
	|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Данные.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР КОГДА Данные.Проведен ТОГДА
	|		Данные.СуммаВзаиморасчетов
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Данные.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &ДокументСсылка
	|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	Возврат Реквизиты;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";
	
	ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПустаяСсылка());
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости = Истина;
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	ОперацииТоварыВПути = Новый Массив();
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	ОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	
	ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозОперацииТоварыВПути", ОперацииТоварыВПути);
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ХозяйственнаяОперация");
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.ХозяйственнаяОперация,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|ГДЕ
	|	НЕ Товары.ХозяйственнаяОперация В (&ХозОперацииТоварыВПути)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА ВидНоменклатуры.ПолитикаУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям
	|								ТОГДА
	|									ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидНоменклатуры
	|	ПО ВидНоменклатуры.Ссылка = ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|ГДЕ
	|	Товары.ХозяйственнаяОперация В (&ХозОперацииТоварыВПути)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

// Возвращает таблицу используемых статусов документа учитывая зависимости от функциональных опций и иных параметров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка().
//
Функция СтатусыДокументаИзменяемыеИзСписка() Экспорт
	
	Таблица = ОбщегоНазначенияУТ.ТаблицаСтатусовИзменяемыхИзСписка();
		
	Возврат Таблица;
	
КонецФункции

//Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - структура со следующими свойствами:
//	* МассивОрганизаций - Массив - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа приобретения.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа приобретения 
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НаДату.ДокументПоступления) КАК КоличествоДокументовКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(&ДатаОкончания, ) КАК НаДату
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций.Остатки(, ) КАК НаСейчас
	|		ПО НаДату.АналитикаУчетаНоменклатуры = НаСейчас.АналитикаУчетаНоменклатуры
	|			И НаДату.Поставщик = НаСейчас.Поставщик
	|			И НаДату.Организация = НаСейчас.Организация
	|			И НаДату.ВидЗапасов = НаСейчас.ВидЗапасов
	|			И НаДату.ДокументПоступления = НаСейчас.ДокументПоступления
	|ГДЕ
	|	НаСейчас.КоличествоОстаток > 0
	|	И &УсловиеОтбора";
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		УсловиеОтбора = "НаДату.Организация В (&МассивОрганизаций)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Если Параметры.Свойство("БезОграниченияПериода") Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДатаСеанса());
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания", Параметры.КонецПериода);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ Выборка.КоличествоДокументовКОформлению = NULL Тогда
		Возврат Выборка.КоличествоДокументовКОформлению;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуммаДокумента(Объект) Экспорт
	
	//Определяем сумму НДС, уплачиваемую методом зачета для уменьшения суммы взаиморасчетов
	НДСМетодомЗачета = 0;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ВидОперацииПоступления) И ТекСтрока.ВидОперацииПоступления.ВидНДС = Перечисления.ВидыНДС.НДСУплачиваемыйПриИмпортеМетодомЗачета Тогда
			НДСМетодомЗачета = НДСМетодомЗачета + ТекСтрока.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Объект.ТаможенныйСбор + Объект.ТаможенныйШтраф + Объект.Разделы.Итог("СуммаПошлины") + Объект.Разделы.Итог("СпециальнаяПошлина") + Объект.Разделы.Итог("СуммаНДС") - НДСМетодомЗачета;
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуВзаиморасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты =
		РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта, Запрос.Параметры.ВалютаВзаиморасчетов, Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",            Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",           Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.НомерДекларации КАК НомерДекларации,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ДанныеДокумента.Договор
	|	ИНАЧЕ
	|		ДанныеДокумента.Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВыпущеноСТаможни,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров, ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Менеджер КАК Менеджер,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.КонтрагентПоставщика КАК КонтрагентПоставщика,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре,
	|	НЕОПРЕДЕЛЕНО КАК Сделка,
	|	ДанныеДокумента.Статус                 КАК Статус,
	|	ДанныеДокумента.Комментарий            КАК Комментарий,
	|	ДанныеДокумента.СуммаДокумента         КАК СуммаДокумента,
	|	ДанныеДокумента.ПометкаУдаления        КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен               КАК Проведен,
	|	ДанныеДокумента.ФормаОплаты            КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа            КАК ДатаПлатежа,
    |	ВЫБОР КОГДА ДанныеДокумента.ВариантОтражения = 1 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК НаСчетахРасчетовСБюджетом
	|	
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер", Реквизиты.Номер);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("ОбъектРасчетов", Реквизиты.ОбъектРасчетов);
	Запрос.УстановитьПараметр("РасчетыПоНакладным", Реквизиты.ОбъектРасчетов = ДокументСсылка);
	Запрос.УстановитьПараметр("ВыпущеноСТаможни", Реквизиты.ВыпущеноСТаможни);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Менеджер", Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Договор", Реквизиты.Договор);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("Валюта", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Соглашение", Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("КонтрагентПоставщика", Реквизиты.КонтрагентПоставщика);
	Запрос.УстановитьПараметр("НомерДекларации", Реквизиты.НомерДекларации);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре", Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("Статус",       	                  Реквизиты.Статус);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",       	  Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",          ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ТаможеннаяДекларацияИмпорт"));
	Запрос.УстановитьПараметр("Комментарий",                      Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("СуммаДокумента",                   Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("ПометкаУдаления",                  Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен",                         Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ИспользуетсяНазначение",           ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",   Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",       Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ФормаОплаты",                      Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("ДатаПлатежа",                      Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",	      Справочники.Организации.НалогообложениеНДС(Реквизиты.Организация, Неопределено, Реквизиты.Период));
	Запрос.УстановитьПараметр("СуммаНДС",                      	  ДокументСсылка.Товары.Итог("СуммаНДС"));
    Запрос.УстановитьПараметр("НаСчетахРасчетовСБюджетом",        Реквизиты.НаСчетахРасчетовСБюджетом);
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
		Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаПоИмпорту", ХозОперацииЗакупкаПоИмпорту);
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru='По договору ""%Договор%""'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДополнительныеСвойства);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса

	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыУПартнеров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
    ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОплатаНДСВБюджет(ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&ПустоеНазначение          КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.Склад                КАК Склад,
	|	Ключи.СтатьяКалькуляции    КАК СтатьяКалькуляции
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Ключи
	|	ПО Товары.АналитикаУчетаНоменклатуры = Ключи.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура                 = Аналитика.Номенклатура
	|		И Ключи.Характеристика            = Аналитика.Характеристика
	|		И Ключи.Серия                     = Аналитика.Серия
	|		И Ключи.Склад                     = Аналитика.Склад
	|		И &ПустоеНазначение               = Аналитика.Назначение
	|		И Ключи.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Аналитика.Номенклатура ЕСТЬ NULL
	|	И НЕ &ИспользуетсяНазначение
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("ИспользуетсяНазначение", Запрос.Параметры.ИспользуетсяНазначение);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Функция ТекстЗапросаВтРасчетыПоНакладной(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтРасчетыПоНакладной";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СУММА(РасчетыПоНакладной.Сумма)      КАК СуммаВзаиморасчетов,
	|	СУММА(РасчетыПоНакладной.СуммаРегл)  КАК СуммаРегл,
	|	СУММА(РасчетыПоНакладной.СуммаУпр)   КАК СуммаУпр
	|ПОМЕСТИТЬ ВтРасчетыПоНакладной
	|ИЗ (ВЫБРАТЬ
	|		СУММА(ДанныеДокумента.СуммаВзаиморасчетов) КАК Сумма,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК СуммаРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				ТОГДА СУММА(ДанныеДокумента.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК СуммаУпр
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ГДЕ
	|		&РасчетыПоНакладным
	|		И ДанныеДокумента.Ссылка = &Ссылка
    |		И НЕ &НаСчетахРасчетовСБюджетом
    |		
	|	ОБЪЕДИНИТЬ ВСЕ
	|		
	|	ВЫБРАТЬ
	|		СУММА(-РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК Сумма,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|				ТОГДА СУММА(-РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(-РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК СуммаРегл,
	|		ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				ТОГДА СУММА(-РасшифровкаПлатежа.СуммаВзаиморасчетов)
	|				ИНАЧЕ ВЫРАЗИТЬ(СУММА(-РасшифровкаПлатежа.Сумма) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|		КОНЕЦ КАК СуммаУпр
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка = &Ссылка
    |       И НЕ &НаСчетахРасчетовСБюджетом
    |		И НЕ РасшифровкаПлатежа.Заказ = Неопределено) КАК РасчетыПоНакладной
    |       
	|ИМЕЮЩИЕ СУММА(РасчетыПоНакладной.Сумма) <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтРасчетыПоНакладной", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРасчетыПоНакладной(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // задолженность перед таможней/брокером
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ВЫБОР КОГДА ДанныеДокумента.ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА ДанныеДокумента.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА ДанныеДокумента.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(ДанныеДокумента.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|	И НЕ &РасчетыПоНакладным
    |   И НЕ &НаСчетахРасчетовСБюджетом
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // задолженность перед таможней/брокером по накладным
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	&Ссылка                                КАК ЗаказПоставщику,
	|	&ВалютаВзаиморасчетов                  КАК Валюта,
	|
	|	РасчетыПоНакладной.СуммаВзаиморасчетов КАК Сумма,
	|	РасчетыПоНакладной.СуммаРегл           КАК СуммаРегл,
	|	РасчетыПоНакладной.СуммаУпр            КАК СуммаУпр,
	|	0                                      КАК КОплате,
	|	0                                      КАК КПоступлению,
	|
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                           КАК ФормаОплаты,
	|	&Период                                КАК ДатаРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	&Организация                           КАК Организация
	|ИЗ
	|	ВтРасчетыПоНакладной КАК РасчетыПоНакладной
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // к оплате таможне/брокеру
	|	КОНЕЦПЕРИОДА(ДанныеДокумента.ДатаПлатежа, День) КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов КАК ЗаказПоставщику,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК КОплате,
	|	0 КАК КПоступлению,
	|
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Дата КАК ДатаРегистратора,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка И ДанныеДокумента.СуммаВзаиморасчетов <> 0
	|	И НЕ &ГрафикИсполненияВДоговоре
    |   И НЕ &НаСчетахРасчетовСБюджетом
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	&Период                                       КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)        КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                    КАК АналитикаУчетаПоПартнерам,
	|	&ОбъектРасчетов                               КАК ЗаказПоставщику,
	|	&ВалютаВзаиморасчетов                         КАК Валюта,
	|
	|	0                                             КАК Сумма,
	|	0                                             КАК СуммаРегл,
	|	0                                             КАК СуммаУпр,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК КОплате,
	|	0                                             КАК КПоступлению,
	|
	|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                                  КАК ФормаОплаты,
	|	&Период                                       КАК ДатаРегистратора,
	|	&Период                                       КАК ДатаПлатежа,
	|	&Организация                                  КАК Организация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
    |   И НЕ &НаСчетахРасчетовСБюджетом
    |ИМЕЮЩИЕ
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|	РасшифровкаПлатежа.Заказ               КАК ЗаказПоставщику,
	|	&ВалютаВзаиморасчетов                  КАК Валюта,
	|
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК Сумма,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета И &Валюта <> &ВалютаРегламентированногоУчета
	|		ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                 КАК СуммаРегл,
	|	ВЫБОР КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|		ТОГДА РасшифровкаПлатежа.СуммаВзаиморасчетов
	|		ИНАЧЕ ВЫРАЗИТЬ(РасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))
	|	КОНЕЦ                                  КАК СуммаУпр,
	|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК КОплате,
	|	0                                      КАК КПоступлению,
	|
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ФормаОплаты                           КАК ФормаОплаты,
	|	&Период                                КАК ДатаРегистратора,
	|	&Период                                КАК ДатаПлатежа,
	|	&Организация КАК Организация
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ РасшифровкаПлатежа.Заказ = НЕОПРЕДЕЛЕНО
    |   И НЕ &НаСчетахРасчетовСБюджетом
    |";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаСНДС,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДС,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДСУпр,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СуммаСНДСРегл,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
    |   ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТаможенныйСбор) КАК ТипНалога
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаСНДС,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДС,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СуммаБезНДСУпр,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СуммаСНДСРегл,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
    |   ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТаможенныйШтраф) КАК ТипНалога
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Товары"" 												КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 							КАК НомерСтроки,
	|	ДанныеДокумента.Партнер									КАК Поставщик,
	|	ДанныеДокумента.Контрагент								КАК Контрагент,
	|	ТаблицаРазделыДокумента.СтавкаНДС 						КАК СтавкаНДС,
	|	ТаблицаДокумента.ЗакупкаПодДеятельность					КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)	КАК ВидЦенности,
	|	0														КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаблицаРазделыДокумента
	|		ПО ТаблицаРазделыДокумента.Ссылка 		= ТаблицаДокумента.Ссылка
	|		 И ТаблицаРазделыДокумента.НомерРаздела = ТаблицаДокумента.НомерРаздела
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ТоварыПоступления"" 								КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 						КАК НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер					КАК Поставщик,
	|	ДанныеДокументаПоступления.Контрагент				КАК Контрагент,
	|	МИНИМУМ(ТаблицаДокументаПоступления.СтавкаНДС)		КАК СтавкаНДС,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность	КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ГФУ.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	0													КАК КодСтроки
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления 	   = ТаблицаДокументаПоступления.Ссылка
	|		 И ТаблицаДокумента.АналитикаУчетаНоменклатуры = ТаблицаДокументаПоступления.АналитикаУчетаНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеДокументаПоступления
	|		ПО ТаблицаДокумента.ДокументПоступления = ДанныеДокументаПоступления.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаДокумента.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ГФУ
	|		ПО СпрНоменклатура.ГруппаФинансовогоУчета = ГФУ.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки,
	|	ДанныеДокументаПоступления.Партнер,
	|	ДанныеДокументаПоступления.Контрагент,
	|	ДанныеДокументаПоступления.ЗакупкаПодДеятельность,
	|	ЕСТЬNULL(ГФУ.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары))
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокументаПоступления.СтавкаНДС) = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Документ"" 												КАК ИмяТабличнойЧасти,
	|	0 															КАК НомерСтроки,
	|	ДанныеДокумента.Партнер										КАК Поставщик,
	|	ДанныеДокумента.Контрагент									КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)						КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТаможенныеПлатежи)		КАК ВидЦенности,
	|	0															КАК КодСтроки
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварыКОформлениюТаможенныхДеклараций", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	// документ поступления заполнен
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ДанныеДокумента.Организация КАК Организация,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО															КАК Партия,
	|	НЕОПРЕДЕЛЕНО															КАК АналитикаУчетаПартий,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК АналитикаФинансовогоУчета,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)                                                              КАК НДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыСПартией)				КАК ТипЗаписи,
	|
	|	0 КАК Количество,
	|	0 КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)) КАК ДопРасходы,
	|	0 КАК СтоимостьБезНДС,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)) КАК ДопРасходыБезНДС,
	|
	|	СУММА(ВЫБОР
	|			КОГДА &УправленческийУчетОрганизаций
	|				И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины  + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДопРасходыУпр,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ) КАК НДСУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|		ИНАЧЕ
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР КОГДА НЕ &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|		ИНАЧЕ
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|		КОНЕЦ) КАК ДопРасходыРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыСПартией) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ТоварыДокумента.ДокументПоступления КАК ДокументИсточник
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТТоварыКОформлениюТаможенныхДеклараций КАК ВТТоварыКОформлениюТаможенныхДеклараций
	|	ПО
	|		ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартийПоступления
	|	ПО ТаблицаАналитикУчетаПартийПоступления.НомерСтроки 	   = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартийПоступления.ИмяТабличнойЧасти = ""ТоварыПоступления""
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Ключи.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Ключи.Характеристика
	|		И АналитикаБезНазначения.Серия = Ключи.Серия
	|		И АналитикаБезНазначения.Склад = Ключи.Склад
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Ключи.СтатьяКалькуляции
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|		ИЛИ ТоварыДокумента.СпециальнаяПошлина <> 0
	|		ИЛИ ТоварыДокумента.СуммаНДС<>0)
	|	И ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ТоварыДокумента.ДокументПоступления,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 ТОГДА
	|			ВЫБОР
	|				КОГДА &ФормироватьВидыЗапасовПоСделкам И ЕСТЬNULL(ТоварыДокумента.ДокументПоступления.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Сделка
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Менеджер
	|				КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				 И ТоварыДокумента.ДокументПоступления.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|					ТОГДА ТоварыДокумента.ДокументПоступления.Подразделение
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартийПоступления.НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// документ поступления не заполнен
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	ДанныеДокумента.Организация КАК Организация,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаФинансовогоУчета,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ТоварыДокумента.ЗакупкаПодДеятельность
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ																	КАК ВидДеятельностиНДС,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 																	КАК КорАналитикаУчетаПартий,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуРегл * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ)																КАК НДСРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ДопРасходыБезПартии)			КАК ТипЗаписи,
	|
	|	0 КАК Количество,
	|	0 КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)) КАК ДопРасходы,
	|	0 КАК СтоимостьБезНДС,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)) КАК ДопРасходыБезНДС,
	|
	|	СУММА(ВЫБОР
	|			КОГДА &УправленческийУчетОрганизаций
	|				И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|				ТОГДА &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА &КоэффициентПересчетаВВалютуУпр * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДопРасходыУпр,
	|	СУММА(ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|			ИНАЧЕ &КоэффициентПересчетаВВалютуУпр * ТоварыДокумента.СуммаНДС
	|		КОНЕЦ) КАК НДСУпр,
	|
	|	СУММА(
	|		ВЫБОР КОГДА &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|		ИНАЧЕ
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР КОГДА НЕ &ПартионныйУчетВерсии22 ТОГДА 0
	|		КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|		ТОГДА
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|		ИНАЧЕ
	|			&КоэффициентПересчетаВВалютуРегл * (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|		КОНЕЦ) КАК ДопРасходыРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДополнительныеРасходыБезПартии) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК ДокументИсточник
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТТоварыКОформлениюТаможенныхДеклараций КАК ВТТоварыКОформлениюТаможенныхДеклараций
	|	ПО
	|		ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Ключи
	|	ПО Ключи.Ссылка = ТоварыДокумента.АналитикаУчетаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|	ПО АналитикаБезНазначения.Номенклатура = Ключи.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Ключи.Характеристика
	|		И АналитикаБезНазначения.Серия = Ключи.Серия
	|		И АналитикаБезНазначения.Склад = Ключи.Склад
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Ключи.СтатьяКалькуляции
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|		ИЛИ ТоварыДокумента.СпециальнаяПошлина <> 0
	|		ИЛИ ТоварыДокумента.СуммаНДС<>0)
	|	И НЕ ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен, ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТоварыДокумента.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТоварыДокумента.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ВариантОформления,
	|	ДанныеДокумента.Подразделение,
	|	ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22
	|			ТОГДА ТоварыДокумента.ЗакупкаПодДеятельность
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР КОГДА &ПартионныйУчетВерсии22
	|		ТОГДА ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварВПути)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		КОГДА ТоварыДокумента.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		КОГДА ТоварыДокумента.Склад.ЦеховаяКладовая
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|	КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ТоварыДокумента.НомерГТД КАК НомерГТД,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту))
	|	И &ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыУПартнеров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыУПартнеров";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ДанныеПоступления.Партнер              КАК Партнер,
	|	ДанныеПоступления.Контрагент           КАК Контрагент,
	|	ДанныеПоступления.Договор              КАК Договор,
	|	ДанныеДокумента.Номенклатура          КАК Номенклатура,
	|	ДанныеДокумента.Характеристика        КАК Характеристика,
	|	ДанныеДокумента.Серия                 КАК Серия,
	|	ДанныеДокумента.Назначение            КАК Назначение,
	|	ДанныеДокумента.ВидЗапасов            КАК ВидЗапасов,
	|	ДанныеДокумента.НомерГТД              КАК НомерГТД,
	|	ДанныеДокумента.Количество            КАК Передано
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ДанныеПоступления
	|	ПО ДанныеПоступления.Ссылка = ДанныеДокумента.ДокументПоступления
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В 
	|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути),
	|		 ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК ДатаПоступления,
	|	Строки.Номенклатура   КАК Номенклатура,
	|	Строки.Характеристика КАК Характеристика,
	|	Строки.Серия          КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	Строки.ВидЗапасов     КАК ВидЗапасов,
	|	Строки.НомерГТД       КАК НомерГТД
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК Даты
	|	ПО
	|		Строки.ВидЗапасов = Даты.ВидЗапасов 
	|		И Строки.Номенклатура = Даты.Номенклатура
	|		И Строки.Характеристика = Даты.Характеристика 
	|		И Строки.Серия = Даты.Серия
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = Даты.Назначение
	|		И Строки.НомерГТД = Даты.НомерГТД 
	|ГДЕ
	|	Строки.Ссылка = &Ссылка И &ВыпущеноСТаможни
	|	И (Даты.ДатаПоступления ЕСТЬ NULL ИЛИ Даты.ДатаПоступления < &Период)
	|	И Строки.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|		&ХозОперацииЗакупкаПоИмпорту)
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Номенклатура,
	|	Строки.Характеристика,
	|	Строки.Серия,
	|	Строки.ВидЗапасов,
	|	Строки.НомерГТД
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ВТТоварыКОформлениюТаможенныхДеклараций";
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТПоступления", ТекстыЗапроса) Тогда
		ТекстЗапросаВТПоступления(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка)
	|			И НЕ ТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументПоступленияЗаполнен,
	|	ВТПоступления.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ВТТоварыКОформлениюТаможенныхДеклараций
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюТаможенныхДеклараций КАК ТоварыКОформлениюТаможенныхДеклараций
	|		ПО ВТПоступления.ДокументПоступления = ТоварыКОформлениюТаможенныхДеклараций.Регистратор
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТПоступления(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТПоступления";

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаможеннаяДекларацияИмпортТовары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ВТПоступления
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|ГДЕ
	|	ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОформлениюТаможенныхДеклараций";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТТоварыКОформлениюТаможенныхДеклараций", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТоварыКОформлениюТаможенныхДеклараций(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеДокумента.Поставщик КАК Поставщик,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТоварыДокумента.ВидЗапасов КАК ВидЗапасов,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ДокументПоступления
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПоступления,
	|
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР 
	|		КОГДА 
	|			ЕСТЬNULL(ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступленияЗаполнен,ЛОЖЬ) ТОГДА
	|				ТоварыДокумента.ТаможеннаяСтоимость
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сумма,
	|
	|	ТоварыДокумента.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТТоварыКОформлениюТаможенныхДеклараций КАК ВТТоварыКОформлениюТаможенныхДеклараций
	|	ПО
	|		ВТТоварыКОформлениюТаможенныхДеклараций.ДокументПоступления = ТоварыДокумента.ДокументПоступления
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ТоварыДокумента.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка),
	|		&ХозОперацииЗакупкаПоИмпорту)
	|	И &ВыпущеноСТаможни
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период							КАК Период,
	|	&Организация 					КАК Организация,
	|	ВЫБОР
	|		КОГДА &КонтрагентПоставщика = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА &Контрагент
	|		ИНАЧЕ &КонтрагентПоставщика
	|	КОНЕЦ 							КАК Контрагент,
	|	&Ссылка 						КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&НомерДекларации 				КАК НомерСчетаФактуры,
	|	&Период 						КАК ДатаСчетаФактуры,
	|	20 								КАК КодВидаОперации,
	|	2 								КАК КодВидаСделки,
	|	1 								КАК КодСпособаПолучения,
	|	&Валюта 						КАК Валюта,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаПоСчетуФактуре* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))) КАК СуммаПоСчетуФактуре,
	|	СУММА(ВЫРАЗИТЬ(ДанныеДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))) КАК СуммаНДС
	|ИЗ
	// таможенная стоимость (т.к. нет фактурной) и пошлины
	|	(ВЫБРАТЬ
	|		СУММА(Разделы.ТаможеннаяСтоимость + Разделы.СуммаПошлины + Разделы.СпециальнаяПошлина + Разделы.ТаможенныйСбор) 	КАК СуммаПоСчетуФактуре,
	|		СУММА(Разделы.СуммаНДС) 									КАК СуммаНДС
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК Разделы
	|	ГДЕ
	|		Разделы.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// НДС, включенный в стоимость
	|	ВЫБРАТЬ
	|		СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС),
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпортТовары.Ссылка = &Ссылка
	|		И ТаможеннаяДекларацияИмпортТовары.ЗакупкаПодДеятельность В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Таможенный сбор и штрафы, если они включаются в стоимость импортированных ценностей.
	|	ВЫБРАТЬ
	|		ВЫБОР
	|				КОГДА ТаможеннаяДекларацияИмпорт.СтатьяРасходовШтраф.ВариантРаспределенияРасходовРегл В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|					ТОГДА ТаможеннаяДекларацияИмпорт.ТаможенныйШтраф
	|				ИНАЧЕ 0
	|			КОНЕЦ ,
	|		0
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка = &Ссылка) КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииРасходовНаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииРасходовНаСебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 			КАК ВидДвижения,
	|	ДанныеДокумента.Организация 					КАК Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	&Ссылка											КАК ДокументПоступления,
	|	ТоварыДокумента.ВидЗапасов 						КАК ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	&Ссылка 										КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 									КАК СтатьяРасходов,
	|
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр 
	|			* (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)) КАК Стоимость,
	|	СУММА(&КоэффициентПересчетаВВалютуУпр
	|			* (ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)) 						КАК СтоимостьБезНДС,
	|	СУММА(ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина) 							КАК СтоимостьРегл,
	|	СУММА(
	|		ВЫБОР 
	|			КОГДА ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|				ТОГДА 0 
	|				ИНАЧЕ ТоварыДокумента.СуммаНДС
	|		КОНЕЦ) 														КАК НДСРегл,
	|	&Подразделение													КАК ПодразделениеРасходов,
	|	0																КАК ПостояннаяРазница,
	|	0																КАК ВременнаяРазница
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И &ПартионныйУчетВерсии21
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Организация,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.ВидЗапасов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =  "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&НалогообложениеОрганизации КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК Стоимость,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Документ""
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	&НалогообложениеОрганизации КАК ВидДеятельностиНДС,
	|
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК Стоимость,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Документ""
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий	КАК АналитикаУчетаПартий,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА ТоварыДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|		ИНАЧЕ 0 КОНЕЦ КАК НДСУпр,
	|	0 КАК СтоимостьРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ТоварыДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК НДСРегл,
	|	ДанныеДокумента.ВариантОформления КАК ХозяйственнаяОперация	
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка 
	|	И &ВыпущеноСТаможни 
	|	И ТоварыДокумента.СуммаНДС <> 0
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗакупки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "Закупки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса =
	"// Отражение пошлины.
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер,
	|
	|	ТоварыДокумента.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|   КОНЕЦ КАК ВидЗапасов,
	|	ЕСТЬNULL(АналитикаНоменклатуры.Назначение.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельностиНоменклатуры,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Соглашение КАК Соглашение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|
	|	0 КАК Количество,
	|
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРеглБезНДС,
	|	0 КАК СуммаСкидки,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ЗакупкаПодДеятельность В (
	|			  ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС),
	|			  ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
	|			ТОГДА 
	|				ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|						  * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) 
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК ДопРасходы,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК ДопРасходыБезНДС,
	|
	|	&Валюта КАК Валюта,
	|	ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС КАК СуммаВВалютеДокумента,
	|	ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина КАК СуммаБезНДСВВалютеДокумента,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина + ТоварыДокумента.СуммаНДС)
	|			* &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВВалютеВзаиморасчетов,
	|	ВЫРАЗИТЬ((ТоварыДокумента.СуммаПошлины + ТоварыДокумента.СпециальнаяПошлина)
	|			* &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ТоварыДокумента.ВидЗапасов
	|		ИНАЧЕ ТоварыДокумента.Номенклатура
	|	КОНЕЦ КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ОбъектРасчетов
	|   КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО ТоварыДокумента.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И (ТоварыДокумента.СуммаПошлины <> 0
	|		ИЛИ ТоварыДокумента.СпециальнаяПошлина <> 0
	|		ИЛИ ТоварыДокумента.СуммаНДС<>0)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

#Область РасходыНаТаможенныеСборы
	РасходыНаТаможенныеСборы = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	
	|	ДанныеДокумента.СтатьяРасходовСбор КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовСбор КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	ДанныеДокумента.ТаможенныйСбор КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйСбор * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	ВЫБОР
	|		КОГДА &ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ОбъектРасчетов
	|   КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйСбор <> 0
    |   И НЕ &НаСчетахРасчетовСБюджетом
    |"; 
#КонецОбласти

#Область РасходыНаТаможенныеШтрафы
	РасходыНаТаможенныеШтрафы = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	
	|	ДанныеДокумента.СтатьяРасходовШтраф КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	ДанныеДокумента.АналитикаРасходовШтраф КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&Валюта КАК Валюта,
	|	ДанныеДокумента.ТаможенныйШтраф КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ТаможенныйШтраф * &КоэффициентПересчетаВВалютуВзаиморасчетов КАК ЧИСЛО(15, 2)) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	ВЫБОР
	|		КОГДА &ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ &ОбъектРасчетов
	|   КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ВыпущеноСТаможни
	|	И ДанныеДокумента.ТаможенныйШтраф <> 0
    |   И НЕ &НаСчетахРасчетовСБюджетом
    |"; 
#КонецОбласти

	ТекстЗапроса = РасходыНаТаможенныеСборы
		+ " ОБЪЕДИНИТЬ ВСЕ " + РасходыНаТаможенныеШтрафы;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;


КонецФункции

Функция ТекстЗапросаТаблицаНДСПредъявленный(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "НДСПредъявленный";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	УчетНДСУТ.УстановитьПараметрТипыНалогообложенияНДСПоступления(Запрос);
	
	ТекстЗапроса = "
	|
	|ВЫБРАТЬ
	|	&Ссылка                                                КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                 КАК ВидДвижения,
	|	&Период                                                КАК Период,
	|	Операция.Организация                                   КАК Организация,
	|	&Ссылка                                                КАК СчетФактура,
	|	Операция.Контрагент                                    КАК Поставщик,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности 				   КАК ВидЦенности,
	|	РазделыДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС          КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                                           КАК ИсправленныйСчетФактура,
	|	НЕОПРЕДЕЛЕНО                                           КАК РеализацияЭкспорт,
	|	0                                                                 КАК СуммаБезНДС,
	|	СУММА(ТоварыДокумента.СуммаНДС)                                   КАК НДС,
	|	СУММА(ВЫБОР 
	|			КОГДА &УправленческийУчетОрганизаций
	|				ТОГДА ТоварыДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ)                                 							  КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.НДСПринятКВычету)   КАК Событие,
	|	ЛОЖЬ                                                              КАК РегламентнаяОперация
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК Операция
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК РазделыДокумента
	|	ПО
	|		РазделыДокумента.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ПО
	|		РазделыДокумента.Ссылка = ТоварыДокумента.Ссылка
	|		И РазделыДокумента.НомерРаздела = ТоварыДокумента.НомерРаздела
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 	    = ТоварыДокумента.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Товары""
	|	
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Операция.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни)
	|	И ТаблицаАналитикУчетаПартий.НалогообложениеНДС В (&ТипыНалогообложенияНДСПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Организация,
	|	Операция.Контрагент,
	|	РазделыДокумента.СтавкаНДС,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	ДанныеДокумента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоМестХранения = 1
	|			ТОГДА ДанныеДокумента.МестоХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                   КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	&Статус                                 КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ДанныеДокумента.ДополнительнаяЗапись    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерДекларации                        КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                             КАК Ссылка,
	|	ДанныеДокумента.ХозяйственнаяОперация              КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ДанныеДокумента.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК МестоХранения,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ДанныеДокумента.ДокументПоступления.Склад,
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК КоличествоМестХранения,
	|	(ДанныеДокумента.ХозяйственнаяОперация <> ТаблицаОсновныхОпераций.ОсновнаяОперация)
	|	                                                   КАК ДополнительнаяЗапись
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ДанныеДокумента.ХозяйственнаяОперация) КАК ОсновнаяОперация
	|		ИЗ
	|			Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ДанныеДокумента
	|		ГДЕ
	|			ДанныеДокумента.Ссылка = &Ссылка) КАК ТаблицаОсновныхОпераций
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Ссылка,
	|	ХозяйственнаяОперация,
	|	(ДанныеДокумента.ХозяйственнаяОперация <> ТаблицаОсновныхОпераций.ОсновнаяОперация)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтИсходныеПрочиеРасходы.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходыАктивыПассивы) КАК ХозяйственнаяОперация,
	|	ВтИсходныеПрочиеРасходы.Организация КАК Организация,
	|
	|	ВтИсходныеПрочиеРасходы.Подразделение КАК Подразделение,
	|	ВтИсходныеПрочиеРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВтИсходныеПрочиеРасходы.СтатьяРасходов КАК Статья,
	|	NULL КАК АналитикаДоходов,
	|	ВтИсходныеПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	NULL КАК АналитикаАктивовПассивов,
	|
	|	ВтИсходныеПрочиеРасходы.Подразделение КАК КорПодразделение,
	|	ВтИсходныеПрочиеРасходы.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК КорСтатья,
    |	NULL КАК КорАналитикаДоходов,
	|	NULL КАК КорАналитикаРасходов,
	|	ВтИсходныеПрочиеРасходы.ТипНалога КАК КорАналитикаАктивовПассивов,
	|
	|	ВтИсходныеПрочиеРасходы.СуммаСНДС КАК Сумма,
	|	ВтИсходныеПрочиеРасходы.СуммаБезНДСУпр КАК СуммаУпр,
	|	ВтИсходныеПрочиеРасходы.СуммаБезНДСРегл КАК СуммаРегл,
	|
	|	&Валюта КАК Валюта,
	|	ВтИсходныеПрочиеРасходы.СуммаБезНДСРегл КАК СуммаВВалюте
	|
	|ИЗ
	|	ВтИсходныеПрочиеРасходы КАК ВтИсходныеПрочиеРасходы
	|ГДЕ
	|	&НаСчетахРасчетовСБюджетом
	|	И ВтИсходныеПрочиеРасходы.СуммаСНДС + ВтИсходныеПрочиеРасходы.СуммаБезНДСРегл <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
    КонецЕсли;
    
    Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы();
    
    ТекстЗапроса = ТекстЗапроса + "
	// Регистрация налогов при отражении операции через счета расчетов с бюджетом
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
	|	Строки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Строки.Организация КАК Организация,
	|	Строки.Подразделение КАК Подразделение,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Строки.ТипНалога КАК Аналитика,
	|	СУММА(Строки.СуммаСНДС) КАК Сумма
	|ИЗ
	|	ВтИсходныеПрочиеРасходы КАК Строки
	|ГДЕ
	|	&НаСчетахРасчетовСБюджетом
	|СГРУППИРОВАТЬ ПО
	|	Строки.Период,
	|	Строки.Организация,
	|	Строки.Подразделение,
	|	Строки.НаправлениеДеятельности,
    |   Строки.ТипНалога
    |
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТаможеннаяПошлина) КАК Аналитика,
	|	СУММА(ТоварыДокумента.СуммаПошлины * &КоэффициентПересчетаВВалютуУпр) КАК Сумма
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &НаСчетахРасчетовСБюджетом
	|	И ТоварыДокумента.СуммаПошлины <> 0
	|СГРУППИРОВАТЬ ПО
	|	&Период,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности,
    |   ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.ТаможеннаяПошлина)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.СпециальнаяПошлина) КАК Аналитика,
	|	СУММА(ТоварыДокумента.СпециальнаяПошлина * &КоэффициентПересчетаВВалютуУпр) КАК Сумма
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &НаСчетахРасчетовСБюджетом
	|	И ТоварыДокумента.СпециальнаяПошлина <> 0
	|СГРУППИРОВАТЬ ПО
	|	&Период,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности,
    |   ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.СпециальнаяПошлина)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_Импорт) КАК Аналитика,
	|	СУММА(ТоварыДокумента.СуммаНДС * &КоэффициентПересчетаВВалютуУпр) КАК Сумма
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ПО 
	|		ТоварыДокумента.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &НаСчетахРасчетовСБюджетом
	|	И ТоварыДокумента.СуммаНДС <> 0
	|СГРУППИРОВАТЬ ПО
	|	&Период,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельности,
    |   ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_Импорт)";
    
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОплатаНДСВБюджет(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПодтверждениеОплатыНДСВБюджет";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка             КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОплатыНДСВБюджет.ОжидаетОплаты)
	|						КАК Состояние,
	|	ЛОЖЬ                КАК РучнаяКорректировка,
	|	""""                КАК НомерДокументаПеречисленияНалога,
	|	ДАТАВРЕМЯ(1,1,1)    КАК ДатаДокументаПеречисленияНалога,
	|	&СуммаНДС 			
	|	КАК Сумма,
	|	""""                КАК НомерОтметкиОРегистрации,
	|	ДАТАВРЕМЯ(1,1,1)    КАК ДатаПодтвержденияОплаты,
	|	""""                КАК СтрокаПлатежноРасчетныеДокументы,
	|	НЕОПРЕДЕЛЕНО        КАК ВидАгентскогоДоговора
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТоварыДокумента
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка = &Ссылка 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ТаможеннаяДекларацияИмпорт";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерДекларации",      """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	ПереопределениеРасчетаПараметров.Вставить("ВыпущеноСТаможни",
		"	ВЫБОР КОГДА ДанныеДокумента.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "ТоварыУПартнеров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыУПартнеров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт
	Объект.Менеджер = Пользователи.ТекущийПользователь();
	Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Объект.Валюта);
	Объект.ВалютаВзаиморасчетов = Объект.Валюта;
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Объект.Организация;
	СтруктураПараметров.БанковскийСчет		= Объект.БанковскийСчетОрганизации;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	ВалютаОплаты  = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчетОрганизации);
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Объект.ВалютаВзаиморасчетов,,ВалютаОплаты);
	
КонецПроцедуры

Процедура ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, УсловияЗакупок, "ФормаОплаты, ГруппаФинансовогоУчета, НаправлениеДеятельности, ПорядокОплаты");
	Если Не ЗначениеЗаполнено(Объект.ВариантОформления) Тогда
		Объект.ВариантОформления = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = УсловияЗакупок.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Объект.Организация Тогда
		Объект.Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент<>Объект.Контрагент Тогда
		Объект.Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.ВалютаВзаиморасчетов;
		Объект.Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			Объект, ОперацииОтбораСоглашенийДоговоров(), ДопПараметры);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеДатыПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, УсловияЗакупок.Соглашение);
	Если ЗначениеЗаполнено(ЗначениеДатыПлатежа) Тогда
		Объект.ДатаПлатежа = ЗначениеДатыПлатежа;
	КонецЕсли;
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Объект.Организация;
	СтруктураПараметров.БанковскийСчет			= Объект.БанковскийСчетОрганизации;
	СтруктураПараметров.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
КонецПроцедуры

Процедура ЗаполнитьПоПартнеру(Объект, Партнер) Экспорт
	УсловияЗакупок = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Или (Объект.Партнер <> Партнер) Тогда
		Объект.Партнер = Партнер;
	КонецЕсли;
	Если (Объект.ВариантОформления <> Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТолькоДляЗакупки",      Ложь);
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", ОперацииОтбораСоглашенийДоговоров());
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Объект.Соглашение);
		
		УсловияЗакупок =
			ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
				Объект.Партнер,
				ПараметрыОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияЗакупок) Тогда
		Если Объект.Соглашение <> УсловияЗакупок.Соглашение
			И ЗначениеЗаполнено(УсловияЗакупок.Соглашение) Тогда
			
			Объект.Соглашение = УсловияЗакупок.Соглашение;
			ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок);
		Иначе
			Объект.Соглашение = УсловияЗакупок.Соглашение;
		КонецЕсли;
	Иначе
		Контрагент = Объект.Контрагент;
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		БанковскийСчет = ?(Контрагент = Объект.Контрагент, Объект.БанковскийСчетКонтрагента, Неопределено);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , БанковскийСчет);
		Объект.Соглашение = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция СтруктураЗаполнения() Экспорт
	Возврат Новый Структура(
		"Организация, Поставщик, КонтрагентПоставщика, ДатаПоступления,
		|ВалютаПоступления, ЦенаВключаетНДС, Товары, НаправлениеДеятельности",
		Справочники.Организации.ПустаяСсылка(), Справочники.Партнеры.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(), Неопределено,
		Справочники.Валюты.ПустаяСсылка(), Ложь, Неопределено, Справочники.НаправленияДеятельности.ПустаяСсылка());
КонецФункции

Процедура ЗаполнитьПоДанным(Объект, Данные) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, Данные);
	ЗаполнитьПоУмолчанию(Объект);
	Если Данные.Товары<>Неопределено Тогда
		Если Ложь <> Данные.ЦенаВключаетНДС Тогда
			Для Каждого Товар Из Данные.Товары Цикл // в поле Сумма получим сумму без НДС
				Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(Товар, Ложь, Ложь, Ложь);
			КонецЦикла;
		КонецЕсли;
		Если Объект.Валюта <> Данные.ВалютаПоступления И ЗначениеЗаполнено(Данные.ВалютаПоступления) Тогда
			Если ЗначениеЗаполнено(Данные.ДатаПоступления) Тогда 
				ДатаДокумента = Данные.ДатаПоступления;
			Иначе
				ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДатаСеанса());
			КонецЕсли;
			КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Данные.ВалютаПоступления, ДатаДокумента);
			КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта, ДатаДокумента);
			Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
				Данные.Товары, Ложь, Данные.ВалютаПоступления, Объект.Валюта, КурсыСтарые, КурсыНовые);
		КонецЕсли;
		Раздел = Объект.Разделы.Добавить();
		Раздел.НомерРаздела = 1;
		Для каждого ЭлементБуфера Из Данные.Товары Цикл
			Товар = Объект.Товары.Добавить();
			Товар.НомерРаздела = Раздел.НомерРаздела;
			ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера,
				"Номенклатура, Характеристика, Серия, Склад, Назначение, ВидЗапасов, Упаковка, Количество, КоличествоУпаковок, ДокументПоступления, ЗакупкаПодДеятельность");
			Товар.ХозяйственнаяОперация = ЭлементБуфера.ХозяйственнаяОперация;
			Товар.НаименованиеТовара = Строка(Товар.Номенклатура);
			Товар.ТаможеннаяСтоимость = ЭлементБуфера.Сумма;
			// сумму НДС не заполняем!!!
			Раздел.ТаможеннаяСтоимость = Раздел.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает массив операций, соглашения и договоры по которым доступны к использованию.
Функция ОперацииОтбораСоглашенийДоговоров() Экспорт
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Возврат Операции;
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПравоНаЧтениеПоступленийТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг);
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюТаможенныхДеклараций)
		И ЕстьПравоНаЧтениеПоступленийТоваровУслуг) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	Параметры.Вставить("БезОграниченияПериода");
	
	ТекстГиперссылки = НСтр("ru = 'ТД импорт'");
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт());
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ИмяФормыРабочееМестоТаможеннаяДекларацияИмпорт() Экспорт
	
	Возврат "Документ.ТаможеннаяДекларацияИмпорт.Форма.РабочееМесто";
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК Товары
	|ГДЕ
	|	Товары.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ТаможеннаяДекларацияИмпорт";
	МетаданныеДокумента = Метаданные.Документы.ТаможеннаяДекларацияИмпорт;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбъектИзменен = Ложь;
			Для Каждого Строка Из ДокументОбъект.Товары Цикл
				Если Не ЗначениеЗаполнено(Строка.ХозяйственнаяОперация) Тогда
					Строка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
					ОбъектИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
		КонецПопытки;
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
