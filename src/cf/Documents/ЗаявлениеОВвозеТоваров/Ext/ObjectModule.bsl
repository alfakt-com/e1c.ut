#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		                  
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения, СтандартнаяОбработка);
		
	ИначеЕсли ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.ДокументОснование.Метаданные()) Тогда
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения.ДокументОснование, СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НалоговыйПериод) Тогда
		НалоговыйПериод = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ЗаявлениеОВвозеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Документы.ЗаявлениеОВвозеТоваров.ОтразитьТоварыКОформлениюЗаявленийОВвозеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииРасходовНаСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСПредъявленный(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьЗакупки(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	РегистрыСведений.ПодтверждениеОплатыНДСВБюджет.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СуммаДокумента = Товары.Итог("СуммаНДС");
	
	ЭСФСервер.ЗаполнитьПустыеПризнакиПроисхождения(ЭтотОбъект,"Товары",Ложь);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//нужен анализ, оплата, как и номер регистрации теперь через СБДС
		ВременныеТаблицы = ВременныеТаблицы();
		ЗаполнитьНомераГТД(ВременныеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Ссылка);
		РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СформироватьЗаданияПоДокументам(МассивДокументов);
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОплатаПодтверждена				= Ложь;
	ДатаПодтвержденияОплаты			= Неопределено;
	ДатаДокументаПеречисленияНалога = Неопределено;
	НомерДокументаПеречисленияНалога = "";
	ДатаОтправки					= Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоДокументуОснованию(Основание, СтандартнаяОбработка)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Если НЕ (Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
					Или Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки
					Или Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути
					Или Основание.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет) Тогда
			Ошибка = НСтр("ru='Ввод заявления на ввоз товаров из ЕАЭС на основании поступления с операцией %Операция% не требуется.'");
			ВызватьИсключение СтрЗаменить(Ошибка, "%Операция%", Основание.ХозяйственнаяОперация);
		КонецЕсли;
		
		ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(Основание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(Знач ПриобретениеТоваровУслуг)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Дата КАК ДатаОснования,	
	|	ПриобретениеТоваровУслуг.Проведен КАК Проведен,
	|	ПриобретениеТоваровУслуг.Организация КАК Организация,
	|	ПриобретениеТоваровУслуг.Контрагент КАК Контрагент,
	|	ПриобретениеТоваровУслуг.Договор КАК Договор,
	|	ПриобретениеТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПриобретениеТоваровУслуг.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПриобретениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &ПриобретениеТоваровУслуг");
	Запрос.УстановитьПараметр("ПриобретениеТоваровУслуг", ПриобретениеТоваровУслуг);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ПриобретениеТоваровУслуг,
		,
		НЕ Реквизиты.Проведен);
		
	// Заполнение шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, "Организация, Контрагент, Договор");
	ЭтотОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЭтотОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ЭтотОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ЭтотОбъект.Ответственный, ЭтотОбъект.Подразделение);
	ЭтотОбъект.НалоговыйПериод = НачалоМесяца(Реквизиты.ДатаОснования);
	
	// Заполнение табличной части.
	ТаблицаТовары = Документы.ЗаявлениеОВвозеТоваров.ТаблицаОстатковТоваровКОформлениюЗаявленийОВвозеТоваров(ПриобретениеТоваровУслуг, Истина);
	
	ТаблицаТовары.Колонки.Добавить("НаименованиеТовара");
	
	Для каждого СтрокаТаблицыТовары Из ТаблицаТовары Цикл
		Если СтрокаТаблицыТовары.НалоговаяБазаНДС <> 0 Тогда
			СтрокаТаблицыТовары.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				СтрокаТаблицыТовары.НалоговаяБазаНДС,
				Ложь,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицыТовары.СтавкаНДС));
			КонецЕсли;
		СтрокаТаблицыТовары.НаименованиеТовара= ?(ЗначениеЗаполнено(СтрокаТаблицыТовары.НоменклатураПоставщика),СтрокаТаблицыТовары.НоменклатураПоставщика, СтрокаТаблицыТовары.Номенклатура);   
  
	КонецЦикла; 
	
	Товары.Загрузить(ТаблицаТовары);
	
	//ТТ
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаДолларыСША = Справочники.Валюты.НайтиПоКоду("840");
	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВалютаВзаиморасчетов");
	ДанныеОбъекта = Новый Структура(
	"ВалютаРегламентированногоУчета, ВалютаДолларыСША, Валюта",
	ВалютаРегламентированногоУчета, ВалютаДолларыСША, Валюта);
	Для каждого СтрокаТабличнойЧасти из Товары Цикл
		// Рассчитаем по фактурной стоимости налоговую базу в рублях на дату принятия на учет.
		Если ДанныеОбъекта.Валюта <> ДанныеОбъекта.ВалютаРегламентированногоУчета Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОбъекта.Валюта, СтрокаТабличнойЧасти.ДатаПринятияНаУчет);
			СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость * (СтруктураКурса.Курс/СтруктураКурса.Кратность);
		Иначе
			СтрокаТабличнойЧасти.НалоговаяБазаНДС = СтрокаТабличнойЧасти.ФактурнаяСтоимость;
		КонецЕсли; 
		//ТТ +
		СтрокаТабличнойЧасти.НалоговаяБазаНДС = Окр(СтрокаТабличнойЧасти.НалоговаяБазаНДС,2);
		//ТТ -
		// Рассчитаем по налоговой базе и ставке сумму НДС
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		СтрокаТабличнойЧасти.НалоговаяБазаНДС,
		Ложь,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
		// Рассчитаем по налоговой базе в рублях статистическую стоимость в долларах на дату принятия на учет.
		Если ДанныеОбъекта.ВалютаДолларыСША <> Справочники.Валюты.ПустаяСсылка() Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОбъекта.ВалютаДолларыСША, СтрокаТабличнойЧасти.ДатаПринятияНаУчет);
			СтрокаТабличнойЧасти.СтатСтоимостьДолларыСША = СтрокаТабличнойЧасти.НалоговаяБазаНДС * (СтруктураКурса.Кратность/СтруктураКурса.Курс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОформлениюЗаявленийОВвозе);
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// Устанавливает документу статус проведения банком
//
// Параметры:
//    НовыйСтатус - Строка - Не используется
//    ВыюраннаяДата - Дата - Дата проведения платежа банком.
//
// Возвращаемое значение:
//    Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ДатаПодтвержденияОплаты = ДополнительныеПараметры.ДатаПодтвержденияОплаты;
	ОплатаПодтверждена = Истина;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ПроцедурыЗаполненияЗначенийАвтоподстановкиВидыЗапасовНомераГтд

Функция ВременныеТаблицы()
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&НомерОтметкиОРегистрации КАК НомерОтметкиОРегистрации,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.НомерТД КАК НомерТД,
	|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	|	Товары.НаименованиеТовара КАК НаименованиеТовара,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КодТНВЭД КАК КодТНВЭД
	|
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&НомерОтметкиОРегистрации КАК НомерОтметкиОРегистрации,
	|	ДанныеКонтрагентов.Ссылка КАК Контрагент,
	|	ДанныеКонтрагентов.СтранаРегистрации КАК СтранаПроисхождения,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ВидЗапасов КАК ВидЗапасов,
	|	Товары.НомерТД КАК НомерТД,
	|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	|	Товары.Номенклатура КАК Номенклатура,
	|   ВЫБОР 
	| 		КОГДА  
	|			Товары.НаименованиеТовара = """"  
	|		ТОГДА  Товары.Номенклатура.Наименование 
	|   ИНАЧЕ
	|            Товары.НаименованиеТовара
	|	КОНЕЦ   КАК НаименованиеТовара,
	|	ЕСТЬNULL(Товары.КодТНВЭД.Код, """") КАК КодТНВЭД
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВтТовары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Контрагенты КАК ДанныеКонтрагентов
	|	ПО
	|		ДанныеКонтрагентов.Ссылка = &Контрагент
	|
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НомерОтметкиОРегистрации КАК Код,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
	|   Товары.НаименованиеТовара КАК НаименованиеТовара
	|
	|ПОМЕСТИТЬ ГенерацияГТД
	|ИЗ
	|	Товары КАК Товары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НомераГТД КАК УказанныеГТД
	|	ПО
	|		УказанныеГТД.Ссылка = Товары.НомерТД
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.НомераГТД КАК ПодобранныеГТД
	|	ПО
	|		ПодобранныеГТД.СтранаПроисхождения = Товары.СтранаПроисхождения
	|		И НЕ ПодобранныеГТД.ПометкаУдаления
	|		И ПодобранныеГТД.Код = ВЫРАЗИТЬ(Товары.НомерОтметкиОРегистрации КАК Строка(30))
	|		И ПодобранныеГТД.КодТНВЭД = Товары.КодТНВЭД
	|		И ПодобранныеГТД.НаименованиеТовара = Товары.НаименованиеТовара
	|		И ПодобранныеГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ТС)
	|		И ПодобранныеГТД.ПризнакПроисхождения = Товары.ПризнакПроисхождения
	|		И ПодобранныеГТД.НомерСтрокиГТД = Товары.НомерСтроки
	|
	|ГДЕ
	|	УказанныеГТД.Ссылка ЕСТЬ NULL
	|	И ПодобранныеГТД.Ссылка ЕСТЬ NULL
	|;
	|");
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерОтметкиОРегистрации", НомерОтметкиОРегистрации);
	Запрос.УстановитьПараметр("Товары",
		Товары.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерТД, НаименованиеТовара, Номенклатура, ПризнакПроисхождения, КодТНВЭД"));
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
	
КонецФункции

Процедура ЗаполнитьНомераГТД(ВременныеТаблицы)
	
	// Cоздаем новые номера ГТД по временной таблице ГенерацияГТД.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ГенерацияГТД.Код,
	|	ГенерацияГТД.НомерСтроки КАК НомерСтрокиГТД,
	|	ГенерацияГТД.НомерСтроки КАК ПорядковыйНомерТовара,
	|	ГенерацияГТД.СтранаПроисхождения,
	// данный реквизит означает, что товар ввезен через другие страны ЕАЭС
	// данный реквизит всегда заполняем ЛОЖЬ, тк определить страну ввоза не возможно (в УП определение страны ввоза происходит по формату рег номера)
	|	ЛОЖЬ КАК СтранаВвозаНеРФ,
	|	ГенерацияГТД.ПризнакПроисхождения,
	|	ГенерацияГТД.НаименованиеТовара,
	|	ГенерацияГТД.КодТНВЭД,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ТС) КАК СпособПроисхождения
	|ИЗ
	|	ГенерацияГТД КАК ГенерацияГТД
	|");
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерГТД = Справочники.НомераГТД.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НомерГТД, Выборка);
		НомерГТД.Записать();
	КонецЦикла;
	
	// Подбираем номера ГТД в товары.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ПодобранныеГТД.Ссылка КАК НомерТД
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК УказанныеГТД
	|		ПО (УказанныеГТД.Ссылка = Товары.НомерТД)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК ПодобранныеГТД
	|		ПО (ПодобранныеГТД.СтранаПроисхождения = Товары.СтранаПроисхождения)
	|			И (НЕ ПодобранныеГТД.ПометкаУдаления)
	|			И (ПодобранныеГТД.Код = Товары.НомерОтметкиОРегистрации)
	|			И (ПодобранныеГТД.КодТНВЭД = Товары.КодТНВЭД)
	|			И (ПодобранныеГТД.НаименованиеТовара = Товары.НаименованиеТовара)
	|			И (ПодобранныеГТД.СпособПроисхождения = ЗНАЧЕНИЕ(Перечисление.СпособыПроисхожденияТоваров.ТС))
	|			И (ПодобранныеГТД.ПризнакПроисхождения = Товары.ПризнакПроисхождения)
	|			И (ПодобранныеГТД.НомерСтрокиГТД = Товары.НомерСтроки)
	|ГДЕ
	|	УказанныеГТД.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// слияние упорядоченных массивов, |Выборки| <= |Товары|
		Для Каждого Товар Из Товары Цикл
			Если ЗначениеЗаполнено(Товар.НомерТД) Или Товар.НомерСтроки < Выборка.НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.НомерТД) Тогда
				ВызватьИсключение НСтр("ru='Обнаружены проблемы в подборе номеров ГТД!'");
			КонецЕсли;
			
			Товар.НомерТД = Выборка.НомерТД;
			
			Если Не Выборка.Следующий() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
