#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Добавляет команду создания документа "Инвентаризация наличных денежных средств".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры


// Процедура заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Выбранная хозяйственная операция
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("СтатьяДоходов");
	МассивВсехРеквизитов.Добавить("АналитикаДоходов");
	МассивВсехРеквизитов.Добавить("СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("АналитикаРасходов");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("СтатьяДоходов");
		МассивРеквизитовОперации.Добавить("АналитикаДоходов");
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств Тогда
		
		МассивРеквизитовОперации.Добавить("СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("АналитикаРасходов");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ИнвентаризацияНаличныхДенежныхСредств";
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, "", Ложь);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, "");
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметровПроведения();
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                          КАК Период,
	|	ДанныеДокумента.Организация                   КАК Организация,
	|	ДанныеДокумента.КассоваяКнига                 КАК КассоваяКнига,
	|	
	|	ДанныеДокумента.СуммаПоФактуВсего             КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаПоФактуВсего             КАК СуммаПоФактуВсего,
	|	ДанныеДокумента.Ответственный                 КАК Ответственный,
	|	ДанныеДокумента.Номер                         КАК Номер,
	|	ДанныеДокумента.Комментарий                   КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления               КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен                      КАК Проведен
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",           ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИнвентаризацияНаличныхДенежныхСредств"));
	Значения.Вставить("ВалютаУправленческогоУчета",        Константы.ВалютаУправленческогоУчета.Получить());
	Значения.Вставить("ВалютаРегламентированногоУчета",    Константы.ВалютаРегламентированногоУчета.Получить());
	Значения.Вставить("ХозяйственнаяОперацияИзлишек",      Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств);
	Значения.Вставить("ХозяйственнаяОперацияНедостача",    Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнвентаризацииДенежныхСредств);
	
	Если Реквизиты <> Неопределено Тогда
		Значения.Вставить("НомерНаПечать",                         ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаВТКурсыВалютУпр(Запрос, ТекстыЗапроса)	
	
	ИмяРегистра = "ВТКурсыВалютУпр"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыУпр.Кратность / (КурсВалюты.Кратность * КурсВалютыУпр.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВТКурсыВалютУпр
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаУправленческогоУчета) КАК КурсВалютыУпр
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыУпр.Курс <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКурсыВалютРегл(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКурсыВалютРегл"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс * КурсВалютыРегл.Кратность / (КурсВалюты.Кратность * КурсВалютыРегл.Курс) КАК КоэффициентПересчета
	|ПОМЕСТИТЬ ВТКурсыВалютРегл
	|ИЗ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсВалюты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &ВалютаРегламентированногоУчета) КАК КурсВалютыРегл
	|	ПО (ИСТИНА)
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|	И КурсВалютыРегл.Курс <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКассы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКурсыВалютУпр", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКурсыВалютУпр(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКурсыВалютРегл", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКурсыВалютРегл(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКассы.Ссылка КАК Ссылка,
	|	ТаблицаКассы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКассы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаКассы.Касса КАК Касса,
	|	ТаблицаКассы.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ТаблицаКассы.СуммаРасхождения КАК СуммаРасхождения,
	|	ТаблицаКассы.СуммаРасхождения * ЕСТЬNULL(ТаблицаКурсыВалютУпр.КоэффициентПересчета, 0) КАК СуммаРасхожденияУпр,
	|	ТаблицаКассы.СуммаРасхождения * ЕСТЬNULL(ТаблицаКурсыВалютРегл.КоэффициентПересчета, 0) КАК СуммаРасхожденияРегл,
	|	ТаблицаКассы.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаКассы.Касса.Подразделение КАК Подразделение,
	|	ТаблицаКассы.Подразделение КАК ПодразделениеДоходовРасходов,
	|	ТаблицаКассы.Касса.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаКассы.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ТаблицаКассы.АналитикаДоходов КАК АналитикаДоходов,
	|	ТаблицаКассы.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ВТКассы
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаКассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютУпр КАК ТаблицаКурсыВалютУпр
	|		ПО (ТаблицаКурсыВалютУпр.Валюта = ТаблицаКассы.Касса.ВалютаДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКурсыВалютРегл КАК ТаблицаКурсыВалютРегл
	|		ПО (ТаблицаКурсыВалютРегл.Валюта = ТаблицаКассы.Касса.ВалютаДенежныхСредств)
	|ГДЕ
	|	ТаблицаКассы.Ссылка = &Ссылка
	|	И ТаблицаКассы.СуммаРасхождения <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	
	|	&Организация                                 КАК Организация,
	|	
	|	ВТКассы.ПодразделениеДоходовРасходов         КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ВТКассы.СтатьяДоходовРасходов                КАК СтатьяДоходов,
	|	ВТКассы.АналитикаДоходов                     КАК АналитикаДоходов,
	|	
	|	ВТКассы.СуммаРасхождения                     КАК Сумма,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА ВТКассы.СуммаРасхожденияУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ                                        КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА ВТКассы.СуммаРасхожденияРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ                                        КАК СуммаРегл,
	|	
	|	&ХозяйственнаяОперацияИзлишек                КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|	
	|ГДЕ
	|	ВТКассы.СуммаРасхождения > 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	ВТКассы.ПодразделениеДоходовРасходов         КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ВТКассы.СтатьяДоходовРасходов                КАК СтатьяРасходов,
	|	ВТКассы.АналитикаРасходов                    КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                 КАК ВидДеятельностиНДС,
	|	
	|	-ВТКассы.СуммаРасхожденияРегл                КАК СуммаСНДС,
	|	-ВТКассы.СуммаРасхожденияРегл                КАК СуммаБезНДС,
	|	-ВТКассы.СуммаРасхожденияРегл                КАК СуммаБезНДСУпр,
	|
	|	-ВТКассы.СуммаРасхожденияРегл                КАК СуммаСНДСРегл,
	|	-ВТКассы.СуммаРасхожденияРегл                КАК СуммаБезНДСРегл,
	|	0                                            КАК ПостояннаяРазница,
	|	0                                            КАК ВременнаяРазница,
	|	&ХозяйственнаяОперацияНедостача              КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                 КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|ГДЕ
	|	ВТКассы.СуммаРасхождения < 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	&Организация                                                      КАК Организация,
	|	ВТКассы.ПодразделениеДоходовРасходов                              КАК Подразделение,
	|	&Ссылка                                                           КАК ДокументПоступленияРасходов,
	|	ВТКассы.СтатьяДоходовРасходов                                     КАК СтатьяРасходов,
	|	ВТКассы.АналитикаРасходов                                         КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                      КАК АналитикаАктивовПассивов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)       КАК АналитикаУчетаПартий,
	|	ВТКассы.НаправлениеДеятельности                                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                      КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ВидДеятельностиНДС,
	|	
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК Стоимость,
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК СтоимостьБезНДС,
	|	0                                                                 КАК НДСУпр,
	|	-ВТКассы.СуммаРасхожденияРегл                                     КАК СтоимостьРегл,
	|	0                                                                 КАК ПостояннаяРазница,
	|	0                                                                 КАК ВременнаяРазница,
	|	0                                                                 КАК НДСРегл,
	|	&ХозяйственнаяОперацияНедостача                                   КАК ХозяйственнаяОперация
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	ВТКассы КАК ВТКассы
	|ГДЕ
	|	ВТКассы.СуммаРасхождения < 0
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваНаличные";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Период                                           КАК Период,
	|	
	|	&Организация                                      КАК Организация,
	|	ВТКассы.Касса                                     КАК Касса,
	|	
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхождения
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхождения
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияУпр
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		&ХозяйственнаяОперацияИзлишек
	|	ИНАЧЕ
	|		&ХозяйственнаяОперацияНедостача
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВТКассы.СтатьяДвиженияДенежныхСредств             КАК СтатьяДвиженияДенежныхСредств
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваДоходыРасходы";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВТКассы", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКассы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		&ХозяйственнаяОперацияИзлишек
	|	ИНАЧЕ
	|		&ХозяйственнаяОперацияНедостача
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	ВТКассы.Подразделение                               КАК Подразделение,
	|	ВТКассы.НаправлениеДеятельности                     КАК НаправлениеДеятельностиДС,
	|	ВТКассы.ПодразделениеДоходовРасходов                КАК ПодразделениеДоходовРасходов,
	|
	|	ВТКассы.Касса                                       КАК ДенежныеСредства,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств,
	|	ВТКассы.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
	|	ВТКассы.Валюта                                      КАК Валюта,
	|
	|	ВТКассы.НаправлениеДеятельности                     КАК НаправлениеДеятельностиСтатьи,
	|	ВТКассы.СтатьяДоходовРасходов                       КАК СтатьяДоходовРасходов,
	|	ВТКассы.АналитикаДоходов                            КАК АналитикаДоходов,
	|	ВТКассы.АналитикаРасходов                           КАК АналитикаРасходов,
	|
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияУпр
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияУпр
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхожденияРегл
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхожденияРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР КОГДА ВТКассы.СуммаРасхождения > 0 ТОГДА
	|		ВТКассы.СуммаРасхождения
	|	ИНАЧЕ
	|		-ВТКассы.СуммаРасхождения
	|	КОНЕЦ КАК СуммаВВалюте,
	|
	|	ВТКассы.Касса                                       КАК ИсточникГФУДенежныхСредств,
	|	ВТКассы.СтатьяДоходовРасходов                       КАК ИсточникГФУДоходовРасходов
	|	
	|ИЗ
	|	ВТКассы КАК ВТКассы";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ХозяйственнаяОперацияНедостача         КАК ХозяйственнаяОперация,
	|	&Организация                            КАК Организация,
	|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
	|	НЕОПРЕДЕЛЕНО                          КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО                            КАК Подразделение,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Ссылка                                 КАК Ссылка,
	
	|	&Номер                                  КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО                            КАК Статус,
	|	&Ответственный                          КАК Ответственный,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО                            КАК Дополнительно,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&СуммаПоФактуВсего                      КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                            КАК Договор,
	|	НЕОПРЕДЕЛЕНО                            КАК НаправлениеДеятельности,
	|	&Период                                 КАК ДатаОтраженияВУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ИнвентаризацияНаличныхДенежныхСредств) Тогда
		
		// Акт инвентаризации
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ИНВ6";
		КомандаПечати.Представление = НСтр("ru = 'ИНВ-6'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИНВ6") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ИНВ6",
			"ИНВ-6",
			СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюАктаИнвентаризацииНаличныхДенежныхСредств(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИНВ6";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияНаличныхДенежныхСредств.ПФ_MXL_ИНВ6");
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	РеквизитыОтветственныеЛица = Новый Структура;
	РеквизитыОтветственныеЛица.Вставить("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель); 
	РеквизитыОтветственныеЛица.Вставить("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
	РеквизитыОтветственныеЛица.Вставить("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц,, РеквизитыОтветственныеЛица);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассоваяКнига КАК КассоваяКнига,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.ИНН КАК ОрганизацияИИН_БИН,
	|	ДанныеДокумента.Организация.КодОКВЭД КАК ОрганизацияКодПоОКВЭД,
	|	ДанныеДокумента.ПоследнийНомерПКО КАК НомерПКО,
	|	ДанныеДокумента.ПоследнийНомерРКО КАК НомерРКО,
	|	ДанныеДокумента.КассоваяКнига.СтруктурноеПодразделение КАК Подразделение,
	|	ТаблицаОтветственныеЛица.КассирНаименование КАК ФИОКассира,
	|	ТаблицаОтветственныеЛица.КассирДолжность КАК КассирДолжность,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК РуководительДолжность,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ФИОГлавногоБухгалтера,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерДолжность КАК ГлавныйБухгалтерДолжность
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ТаблицаДокумента.Касса.СчетУчета КАК СубСчетТенге,
	|	СУММА(ТаблицаДокумента.СуммаПоФакту) КАК ПоФактуТенге,
	|	СУММА(ТаблицаДокумента.СуммаПоУчету) КАК ПоУчетуТенге,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.СуммаПоФакту - ТаблицаДокумента.СуммаПоУчету > 0
	|				ТОГДА ТаблицаДокумента.СуммаПоФакту - ТаблицаДокумента.СуммаПоУчету
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Излишки,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.СуммаПоФакту - ТаблицаДокумента.СуммаПоУчету < 0
	|				ТОГДА ТаблицаДокумента.СуммаПоУчету - ТаблицаДокумента.СуммаПоФакту
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Недостача
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Касса.ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Касса.СчетУчета
	|ИТОГИ
	|	СУММА(ПоФактуТенге),
	|	СУММА(ПоУчетуТенге)
	|ПО
	|	Ссылка,
	|	Валюта
	|;
	|///////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                       КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.СуммаПоФактуВсего     КАК СуммаПоФактуРегл,
	|	ТаблицаДокумента.Ссылка.СуммаПоУчетуВсего     КАК СуммаПоУчетуРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглПриход, 0) КАК СуммаИзлишекРегл,
	|	ЕСТЬNULL(ДенежныеСредства.СуммаРеглРасход, 0) КАК СуммаНедостачаРегл
	|	
	|ИЗ
	|	Документ.ИнвентаризацияНаличныхДенежныхСредств.Кассы КАК ТаблицаДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваНаличные.Обороты(,, Регистратор) КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ТаблицаДокумента.Ссылка
	|	
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|;";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументов = МассивРезультатов[0].Выбрать();
	ВыборкаРасхождений = МассивРезультатов[1].Выбрать();
	ВыборкаИтогов = МассивРезультатов[2].Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументов.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаДокументов.Организация, ВыборкаДокументов.ДатаДокумента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ВыборкаДокументов.Ссылка);
		ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
		
		ОбластьМакета.Параметры.МестоНахождения = ?(ЗначениеЗаполнено(ВыборкаДокументов.КассоваяКнига), ВыборкаДокументов.КассоваяКнига, НСтр("ru = '<Основная кассовая книга организации>'"));
		
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер);
		ОбластьМакета.Параметры.ДатаДокумента = Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=D");
		ОбластьМакета.Параметры.ДолжностьМОЛ = ВыборкаДокументов.КассирДолжность;
		ОбластьМакета.Параметры.МОЛ = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаДокументов.ФИОКассира);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТенге");
		
		Если НЕ ВыборкаРасхождений.НайтиСледующий(Новый Структура("Валюта", ВалютаРегламентированногоУчета)) Тогда
			ТабличныйДокумент.Вывести(ОбластьМакета);
		Иначе 
			// Посчитаем общую сумму в тенге и выведем в строку счета учета
			СтрокаСчетовУчета = "";
			ИтогоСуммаФакт 	  = 0;
			ИтогоСуммаУчет	  = 0;

			ВыборкаРасхождений.Сбросить();
			СтруктураПоиска = Новый Структура("Ссылка, Валюта", ВыборкаДокументов.Ссылка, ВалютаРегламентированногоУчета);

			Пока ВыборкаРасхождений.НайтиСледующий(СтруктураПоиска) Цикл
				Если НЕ ПустаяСтрока(СокрЛП(ВыборкаРасхождений.СубСчетТенге)) Тогда
					СтрокаСчетовУчета = СтрокаСчетовУчета + СокрЛП(ВыборкаРасхождений.СубСчетТенге) + ", ";
					ИтогоСуммаФакт    = ИтогоСуммаФакт 	  + ВыборкаРасхождений.ПоФактуТенге;
					ИтогоСуммаУчет 	  = ИтогоСуммаУчет    + ВыборкаРасхождений.ПоУчетуТенге;
				КонецЕсли; 
			КонецЦикла;
			
			СтрокаСчетовУчета = Лев(СтрокаСчетовУчета, СтрДлина(СтрокаСчетовУчета) - 2);
			
			ОбластьМакета.Параметры.СубСчетТенге = СтрокаСчетовУчета;
			ОбластьМакета.Параметры.ПоФактуТенге = ИтогоСуммаФакт;
			ОбластьМакета.Параметры.ПоУчетуТенге = ИтогоСуммаУчет;
			
			Разница = ИтогоСуммаФакт - ИтогоСуммаУчет;
			
			Если Разница < 0 Тогда 
				ОбластьМакета.Параметры.Недостача = Разница * -1;
			ИначеЕсли Разница > 0 Тогда 
				ОбластьМакета.Параметры.Излишки = Разница;
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВВалюте");
		ПолеВИностраннойВалюте = Ложь;
		НомерПП = 2;
		
		ВыборкаСтрок = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока ВыборкаСтрок.СледующийПоЗначениюПоля("Ссылка") Цикл
			Если ВыборкаСтрок.Ссылка = ВыборкаДокументов.Ссылка Тогда
				ВыборкаСтрокПоВалюте = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Валюта");
				Пока ВыборкаСтрокПоВалюте.Следующий() Цикл 					
					Если ВыборкаСтрокПоВалюте.Валюта <> ВалютаРегламентированногоУчета Тогда
						
						ПолеВИностраннойВалюте = Истина;
						
						// Посчитаем общую сумму в валюте и выведем в строку счета учета
						СтрокаСчетовУчета = "";
						ИтогоСуммаФакт 	  = ВыборкаСтрокПоВалюте.ПоФактуТенге;
						ИтогоСуммаУчет	  = ВыборкаСтрокПоВалюте.ПоУчетуТенге;
						
						ВыборкаСтрокВВалютеДетальныеЗаписи = ВыборкаСтрокПоВалюте.Выбрать();
						Пока ВыборкаСтрокВВалютеДетальныеЗаписи.Следующий() Цикл 
							СтрокаСчетовУчета = СтрокаСчетовУчета + СокрЛП(ВыборкаСтрокВВалютеДетальныеЗаписи.СубСчетТенге) + ", ";
						КонецЦикла;
						
						// обрежем последние 2 символа (", ")
						СтрокаСчетовУчета = Лев(СтрокаСчетовУчета, СтрДлина(СтрокаСчетовУчета) - 2);
						
						ОбластьМакета.Параметры.СубСчетВалюта 	= СтрокаСчетовУчета;
						ОбластьМакета.Параметры.ПоФактуВалюта 	= ИтогоСуммаФакт;
						ОбластьМакета.Параметры.ПоУчетуВалюта 	= ИтогоСуммаУчет;
						ОбластьМакета.Параметры.Валюта 			= ВыборкаСтрокПоВалюте.Валюта.НаименованиеПолное;
						ОбластьМакета.Параметры.НомерПП 		= НомерПП;
						
						Разница = ИтогоСуммаФакт - ИтогоСуммаУчет;
						
						Если Разница < 0 Тогда 
							
							ОбластьМакета.Параметры.Недостача = Разница * -1;
							ОбластьМакета.Параметры.Излишки = 0;
							
						ИначеЕсли Разница > 0 Тогда 
							
							ОбластьМакета.Параметры.Излишки = Разница;
							ОбластьМакета.Параметры.Недостача = 0;
							
						КонецЕсли;
						
						Если НомерПП = 2 Тогда
							ОбластьМакета.Параметры.Описание = НСтр("ru = 'Наличные денежные средства и эквиваленты денежных средств в иностранной валюте'");
						Иначе
							ОбластьМакета.Параметры.Описание = НСтр("ru = ' '");
						КонецЕсли;
						
						
						ТабличныйДокумент.Вывести(ОбластьМакета);
						НомерПП = НомерПП + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПолеВИностраннойВалюте Тогда 
			ОбластьМакета.Параметры.НомерПП = НомерПП;
			ОбластьМакета.Параметры.Описание = НСтр("ru = 'Наличные денежные средства и эквиваленты денежных средств в иностранной валюте'");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НомерПП = НомерПП + 1;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПустые");

		Для Счетчик = 1 По 6 Цикл
			ОбластьМакета.Параметры["НомерПП" + Счетчик] = НомерПП;
			НомерПП = НомерПП + 1;
		КонецЦикла;		
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаРасхождений.Сбросить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаДокументов.Ссылка);
		ВыборкаИтогов.НайтиСледующий(СтруктураПоиска);
		
		ОбластьМакета.Параметры.ИтогоПоФакту = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаИтогов.СуммаПоФактуРегл,ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.ИтогоПоУчету = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаИтогов.СуммаПоУчетуРегл,ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.ИтогоИзлишки = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаИтогов.СуммаИзлишекРегл,ВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.ИтогоНедостача = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаИтогов.СуммаНедостачаРегл,ВалютаРегламентированногоУчета);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыборкаИтогов.Сбросить();
		
		ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
		ТабличныйДокумент.Вывести(ОбластьКомиссия);		
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ОбластьМакета = Макет.ПолучитьОбласть("ОборотнаяСторона");

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьКомиссия);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
