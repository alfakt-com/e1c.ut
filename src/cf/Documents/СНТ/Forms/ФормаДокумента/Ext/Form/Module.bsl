&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СНТСерверПереопределяемый.ПриСозданииНаСервере(ЭтаФорма);
	
	МассивСкрываемыхРеквизитов = СНТСерверПереопределяемый.ПолучитьМассивСкрываемыхПолейАкцизы();
	Если МассивСкрываемыхРеквизитов <> Неопределено Тогда
		Для Каждого ИмяПоля Из МассивСкрываемыхРеквизитов Цикл
			ЭтаФорма.Элементы[ИмяПоля].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
		Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка = Истина;
		Объект.НомерСНТ = "";
	КонецЕсли;	
	
	// СтандартныеПодсистемы.Печать
	//УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать

	УстановитьОграниченияТипа();
	
	Если Параметры.Ключ.Пустая() Тогда
		//Если вводится новая СНТ на основании документа, у которого уже оформлены СФ и ЭСФ, 
		//в СНТ не заполняется ссылка на ЭСФ, т.к. у СНТ еще нет ссылки, а связаныннй ЭСФ ищется по ней.
		//Поэтому при создании находим ЭСФ, если он есть, через документ-основание и записывеам ссылку на него в реквизит СНТ.
		//После записи СНТ дополнительно должна устанавливаться ссылка в ЭСФ.
		Если ЗначениеЗаполнено(Объект.ДокументОснование) И Не ТипЗнч(ПредставлениеЭСФ)= Тип("ДокументСсылка.ЭСФ") Тогда
			ЭСФСсылка = ПолучитьСвязанныйЭСФДляНовойСНТ();
			Если Не ЭСФСсылка = Неопределено Тогда
				СНТСервер.ОбновитьПредставлениеСНТ(ЭтаФорма, ЭСФСсылка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СНТСервер.ОбновитьПредставлениеСНТ(ЭтаФорма);
	КонецЕсли;
	
	СформироватьСписокВыбораПризнакаПроисхождения();
	
	ПроверитьСписокТоваровНеПодлежащихУчетуНаВС();
	
	ПроверитьСписокТоваровНаПеремещениеЭДВС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЭСФКлиент.ОповеститьФормы(СНТКлиентСервер.ИмяСобытияЗаписьСНТ());
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СНТСерверПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

	УправлениеФормой();
	
	Если ЗначениеЗаполнено(ПредставлениеЭСФ) И ТипЗнч(ПредставлениеЭСФ)= Тип("ДокументСсылка.ЭСФ") Тогда 
		СНТСерверПереопределяемый.ЗаполнитьСсылкуНаСНТВЭСФ(ПредставлениеЭСФ, Объект.Ссылка);
	КонецЕсли;
	
	// Повторная запись документа СНТ, для того чтоб записалось значение в реквизит "НомерСНТ"
	Если ТекущийОбъект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		СНТСервер.ФормаСНТПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	КонецЕсли;
	
	ПроверитьСписокТоваровНеПодлежащихУчетуНаВС();
	
	ПроверитьСписокТоваровНаПеремещениеЭДВС();
	
	СформироватьПредставлениеУведомлениеОСопоставленииДляСНТ(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ВССерверПереопределяемый.ПолучитьПараметрРаботыСоСтруктурнымиПодразделениями();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") Тогда
		Элементы.ГруппаВвоз.Видимость = Истина;
		Элементы.ГруппаВывоз.Видимость = Ложь;
		Элементы.ГруппаПеремещение.Видимость = Ложь;
		Элементы.ГруппаСЭЗ.Видимость = Объект.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.ВвозТоваровНаТерриториюСЭЗ");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") Тогда
		Элементы.ГруппаВывоз.Видимость = Истина;
		Элементы.ГруппаВвоз.Видимость = Ложь;
		Элементы.ГруппаПеремещение.Видимость = Ложь;
		Элементы.ГруппаСЭЗ.Видимость = Объект.ВидВывоза = ПредопределенноеЗначение("Перечисление.ВидыВывозаСНТ.ВывозТоваровСТерриторииСЭЗ");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение") Тогда
		Элементы.ГруппаПеремещение.Видимость = Истина;
		Элементы.ГруппаСЭЗ.Видимость = Ложь;
		Элементы.ГруппаВвоз.Видимость = Ложь;
		Элементы.ГруппаВывоз.Видимость = Ложь;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация") Тогда
		Элементы.ГруппаПеремещение.Видимость = Ложь;
		Элементы.ГруппаСЭЗ.Видимость = Ложь;
		Элементы.ГруппаВвоз.Видимость = Ложь;
		Элементы.ГруппаВывоз.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьРеквизитов();
	ВидимостьДатаОтзыва = ?(Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.Отозван"), Истина, Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОтзыва", "Видимость", ВидимостьДатаОтзыва);
	
	ПоказыватьКомандыПоставщика = ?(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"), Истина, Ложь);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", ПоказыватьКомандыПоставщика);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтраницаТовары", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВС", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтиловыйСпирт", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Виноматериал", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПивоПивныеНапитки", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлкогольнаяПродукцияКромеПива", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоНефтепродуктам", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоБиотопливу", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабачнаяПродукция", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДругиеТоварыЦифроваяМаркировка", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЭкспортныйКонтроль", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОГрузе", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПогрузочноРазгрузочныеОперации", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрочиеСведения", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Таксировка", "ИзменятьПорядокСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВС", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтиловыйСпирт", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Виноматериал", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПивоПивныеНапитки", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлкогольнаяПродукцияКромеПива", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоНефтепродуктам", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоБиотопливу", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабачнаяПродукция", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДругиеТоварыЦифроваяМаркировка", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЭкспортныйКонтроль", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СведенияОГрузе", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПогрузочноРазгрузочныеОперации", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПрочиеСведения", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Таксировка", "ИзменятьСоставСтрок", Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка);
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСЗаполнитьИсточникиПроисхожденияТоварыВС", "Видимость", НЕ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий")) И НЕ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз")));
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтиловыйСпиртГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВиноматериалГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПивоПивныеНапиткиГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлкогольнаяПродукцияКромеПиваГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоНефтепродуктамГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоБиотопливуГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабачнаяПродукцияГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДругиеТоварыЦифроваяМаркировкаГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЭкспортныйКонтрольГруппаКонвертация"	 , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурноеПодразделениеПолучатель", "Видимость", ПоддержкаРаботыСоСтруктурнымиПодразделениями И НЕ ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипКонтрагент());
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурноеПодразделениеПолучатель", "Доступность", НЕ ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций());
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурноеПодразделениеОтправитель", "Видимость", ПоддержкаРаботыСоСтруктурнымиПодразделениями И НЕ ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипКонтрагент());
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтруктурноеПодразделениеОтправитель", "Доступность", НЕ ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций());
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодсказкаВариантаОтправкиСНТ", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьСП", "Видимость", ПоддержкаРаботыСоСтруктурнымиПодразделениями И НЕ ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипКонтрагент());
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыВСИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭтиловыйСпиртИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВиноматериалИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПивоПивныеНапиткиИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АлкогольнаяПродукцияКромеПиваИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоНефтепродуктамПиваИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДанныеПоБиотопливуИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабачнаяПродукцияИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДругиеТоварыЦифроваяМаркировкаИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЭкспортныйКонтрольИсточникПроисхожденияПолучатель", "Видимость", (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами")));
	
	
	Элементы.Ошибки.Видимость = ?(Объект.Ошибки.Количество() = 0, Ложь, Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьТаблицуОшибок(Объект.Ошибки);
	КонецЕсли;
	
	Если Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная") Тогда
		Элементы.СвязаннаяСНТ.Видимость = Ложь;
	Иначе 
		Элементы.СвязаннаяСНТ.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") Тогда
		
		Элементы.СкладПолучатель.Видимость = Ложь;
	Иначе
		Элементы.СкладПолучатель.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		Элементы.НомерСНТ.Заголовок = "Номер СНТ учетной системы (поставщика)";
	КонецЕсли;
	
	Элементы.ГруппаДатаОтгрузки.Видимость = Объект.ПредоставленВБумажномВиде;

	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы") Тогда
			ПричинаСтрокой = "0";
		ИначеЕсли Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа") Тогда
			ПричинаСтрокой = "1";
		ИначеЕсли Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке") Тогда	
			ПричинаСтрокой = "2";
		Иначе
			Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеТоварыНеПодлежащиеВС", "Видимость", ЕстьОстаткиТоваровНеВС);
	
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатусСопоставленияДляСНТ", "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	
	УстановитьВидимостьТабличныхЧастей();
	
	УстановитьВидимостьКнопокИзмененияСтатуса();
	
	ИзменитьКоманднуюПанельДокумента();
	
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	
	СформироватьПредставлениеСостояния();
	
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	
	СформироватьСписокВыбораВидовОпераций();
	
	ОграничетьТипПоставщикаПолучателя();
	
	СоответствиеНомеровТаблицИНазванийСНТ = СНТСервер.СоответствиеНомеровТаблицИНазванийСНТ();
	
	Для Каждого СтрокаСоответствия Из СоответствиеНомеровТаблицИНазванийСНТ Цикл
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтрокаСоответствия.Значение + "ТоварНаименованиеВРамкахТС" , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтрокаСоответствия.Значение + "ДополнительныйИдентификаторПолучатель" , "Видимость", Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами"));
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтрокаСоответствия.Значение + "НомерФНО" , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, СтрокаСоответствия.Значение + "НомерПозицииИзФНО" , "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	КонецЦикла;
	
	//синоним графы № строки основной СНТ для возвратных СНТ
	Для Каждого СтрокаСоответствия Из СоответствиеНомеровТаблицИНазванийСНТ Цикл
		ЭлементНомерСтрокиОсновнойСНТ = Элементы.Найти(СтрокаСоответствия.Значение + "НомерСтрокиСНТ");
		
		Если ЭлементНомерСтрокиОсновнойСНТ <> Неопределено Тогда
			ЭлементНомерСтрокиОсновнойСНТ.Заголовок = ?(Объект.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров, "№ п/п осн. СНТ", "№ п/п СНТ");
		КонецЕсли;
	КонецЦикла;
	
	//для всех таблиц проверим наличие коэффициента
	ЕстьКоэффициентПересчета = Ложь;
	Для Каждого СтрокаСоответствия Из СоответствиеНомеровТаблицИНазванийСНТ Цикл
		//если для одной таблицы уже определена необходимость ввода конвертации, то отображаем ссылку и дальше не проверяем
		Если Не ЕстьКоэффициентПересчета Тогда
			ПроверитьНаличиеКоэффициентаПересчета(СтрокаСоответствия.Значение, ЕстьКоэффициентПересчета);
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда 
		СформироватьТекстПодсказкиСПОтправителя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Объект.ТипСНТ = Неопределено ИЛИ Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ПустаяСсылка") Тогда
		Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная");
	КонецЕсли;
		
	Если Объект.Направление.Пустая() Тогда
		Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий");
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация");
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	СответвствиеСтатусов = СНТСервер.РазрешенныеДействияПоСтатусамСНТ(Объект.Направление, Объект.ВидОперации, Объект);
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтозвать"				, "Видимость", СответвствиеСтатусов[СНТКлиентСервер.ДействиеОтзыв()][Объект.Статус]);
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПодтвердить"			, "Видимость", СответвствиеСтатусов[СНТКлиентСервер.ДействиеПодтверждение()][Объект.Статус]);
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонить"				, "Видимость", СответвствиеСтатусов[СНТКлиентСервер.ДействиеОтклонение()][Объект.Статус]);
	
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПерезаполнитьПоПервичномуДокументу", "Видимость", ?(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий"), Истина, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	
	Если Объект.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПолучить", "Видимость", Истина);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПроверить", "Видимость", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТОтправить", "Видимость", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТВыгрузить", "Видимость", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТСоздатьПервичныйДокумент", "Видимость", Ложь);
		
		Если НЕ Объект.ТипСНТ = Перечисления.ТипыСНТ.ВозвратТоваров Тогда
			СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбработкаОбменСНТСоздатьЭСФИСФ", "Видимость", Ложь);
		КонецЕсли;
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияСНТ.Исходящий Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами") Тогда
			СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбработкаОбменСНТСоздатьЭСФИСФ", "Видимость", Ложь);
			СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПолучитьИдентификаторыТоваров", "Видимость", Истина);
		Иначе
			СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПолучитьИдентификаторыТоваров", "Видимость", Ложь);
		КонецЕсли;
		
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПолучить", "Видимость", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТПроверить", "Видимость", Истина);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТОтправить", "Видимость", Истина);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументСНТВыгрузить", "Видимость", Истина);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", "Видимость", Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз);//Ложь);
	КонецЕсли;
	
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьДокументЭДВСНаПеремещение", "Видимость", ЕстьТоварыНаПеремещениеЭДВС);
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьДокументЭДВС", "Видимость", ЕстьОстаткиТоваровНеВС);
	СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатусСопоставленияДляСНТ", "Видимость", Объект.Направление = Перечисления.НаправленияСНТ.Входящий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ОчиститьЗаполненныеРеквизиты();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Объект.ВалютаКод = ПолучитьКодВалюты(Объект.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКодВалюты(Валюта)
	
	ИмяРеквизита = "%БуквенныйКодВалюты";
	СоответствиеИменРеквизитов = Новый Соответствие;
	СоответствиеИменРеквизитов.Вставить(ИмяРеквизита, "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ИмяРеквизита, СоответствиеИменРеквизитов);

	Возврат Валюта[ИмяРеквизита];
	
КонецФункции

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ЕстьЭтиловыйСпиртПриИзменении(Элемент)
	
	Если Объект.ЕстьЭтиловыйСпирт Тогда
		Элементы.ГруппаЭтиловыйСпирт.Видимость = Истина;
		Элементы.ГруппаЛицензия.Видимость = Истина;
		Элементы.ДекорацияАлкоголь.Видимость = Истина;
	Иначе
		Если Объект.ЭтиловыйСпирт.Количество() > 0 Тогда
			//Элементы.ГруппаЭтиловыйСпирт.Видимость = Истина ;
			Объект.ЕстьЭтиловыйСпирт = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G2. Этиловый спирт есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаЭтиловыйСпирт.Видимость = Ложь;
			Элементы.ГруппаЛицензия.Видимость = Ложь;
			Элементы.ДекорацияАлкоголь.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВиноматериалПриИзменении(Элемент)
	
	Если Объект.ЕстьВиноматериал Тогда
		Элементы.ГруппаВиноматериал.Видимость = Истина;
		Элементы.ГруппаЛицензия.Видимость = Истина;
		Элементы.ДекорацияАлкоголь.Видимость = Истина;
	Иначе
		Если Объект.Виноматериал.Количество() > 0 Тогда
			//Элементы.ГруппаЭтиловыйСпирт.Видимость = Истина ;
			Объект.ЕстьВиноматериал = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G3. Виноматериал есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаВиноматериал.Видимость = Ложь;
			Элементы.ГруппаЛицензия.Видимость = Ложь;
			Элементы.ДекорацияАлкоголь.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьПивоПивныеНапиткиПриИзменении(Элемент)
	
	Если Объект.ЕстьПивоПивныеНапитки Тогда
		Элементы.ГруппаПиво.Видимость = Истина;
		Элементы.ГруппаЛицензия.Видимость = Истина;
		Элементы.ДекорацияАлкоголь.Видимость = Истина;
	Иначе
		Если Объект.ПивоПивныеНапитки.Количество() > 0 Тогда
			//Элементы.ГруппаЭтиловыйСпирт.Видимость = Истина ;
			Объект.ЕстьПивоПивныеНапитки = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G2. Пиво и пивные напитки есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаПиво.Видимость = Ложь;
			Элементы.ГруппаЛицензия.Видимость = Ложь;
			Элементы.ДекорацияАлкоголь.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьАлкогольПриИзменении(Элемент)
	
	Если Объект.ЕстьАлкоголь Тогда
		Элементы.ГруппаДругаяАлкогольнаяПродукция.Видимость = Истина;
		Элементы.ГруппаЛицензия.Видимость = Истина;
		Элементы.ДекорацияАлкоголь.Видимость = Истина;
	Иначе
		Если Объект.АлкогольнаяпродукцияКромеПива.Количество() > 0 Тогда
			//Элементы.ГруппаЭтиловыйСпирт.Видимость = Истина ;
			Объект.ЕстьАлкоголь = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G4. Алкогольная продукция (кроме пива и пивных напитков) есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаДругаяАлкогольнаяПродукция.Видимость = Ложь;
			Элементы.ГруппаЛицензия.Видимость = Ложь;
			Элементы.ДекорацияАлкоголь.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНефтепродуктыПриИзменении(Элемент)
	
	Если Объект.ЕстьНефтепродукты Тогда
		Элементы.ГруппаНефтепродукты.Видимость = Истина;
	Иначе
		Если Объект.ДанныеПоНефтепродуктам.Количество() > 0 Тогда
			Объект.ЕстьНефтепродукты = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G6. Данные по нефтепродуктам есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаНефтепродукты.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьБиотопливоПриИзменении(Элемент)
	
	Если Объект.ЕстьБиотопливо Тогда
		Элементы.ГруппаБиотопливо.Видимость = Истина;
	Иначе
		Если Объект.ДанныеПоБиотопливу.Количество() > 0 Тогда
			Объект.ЕстьБиотопливо = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G7. Данные по биотопливу есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаБиотопливо.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьТабачныеИзделияПриИзменении(Элемент)
	
	Если Объект.ЕстьТабачныеИзделия Тогда
		Элементы.ГруппаТабачнаяПродукция.Видимость = Истина;
	Иначе
		Если Объект.ТабачнаяПродукция.Количество() > 0 Тогда
			Объект.ЕстьТабачныеИзделия = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G8. Данные по табачной продукции (кроме цифровой маркировки) есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаТабачнаяПродукция.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьТоварыЭКПриИзменении(Элемент)
	
	Если Объект.ЕстьТоварыЭК Тогда
		Элементы.ГруппаТоварыЭкспортныйКонтроль.Видимость = Истина;
	Иначе
		Если Объект.ТоварыЭкспортныйКонтроль.Количество() > 0 Тогда
			Объект.ЕстьТоварыЭК = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G10. Данные по товарам, подлежащим экспортному контролю (двойного назначения, военного назначения) есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаТоварыЭкспортныйКонтроль.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьДругиеТоварыЦифроваяМаркировкаПриИзменении(Элемент)
	
	Если Объект.ЕстьДругиеТоварыЦифроваяМаркировка Тогда
		Элементы.ГруппаДругиеТоварыЦифроваяМаркировка.Видимость = Истина;
	Иначе
		Если Объект.ДругиеТоварыЦифроваяМаркировка.Количество() > 0 Тогда
			Объект.ЕстьДругиеТоварыЦифроваяМаркировка = Истина;
			ТекстОшибки = НСтр("ru='В табличной части G9. Данные по товарам, подлежащим маркировке средствами идентификации (цифровая маркировка) есть строки!'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		Иначе
			Элементы.ГруппаДругиеТоварыЦифроваяМаркировка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТабличныхЧастей()
	
	Элементы.ГруппаЭтиловыйСпирт.Видимость = Объект.ЕстьЭтиловыйСпирт ИЛИ Объект.ЭтиловыйСпирт.Количество() > 0;
	Элементы.ГруппаВиноматериал.Видимость = Объект.ЕстьВиноматериал ИЛИ Объект.Виноматериал.Количество() > 0;
	Элементы.ГруппаПиво.Видимость = Объект.ЕстьПивоПивныеНапитки ИЛИ Объект.ПивоПивныеНапитки.Количество() > 0;
	Элементы.ГруппаДругаяАлкогольнаяПродукция.Видимость = Объект.ЕстьАлкоголь ИЛИ Объект.АлкогольнаяпродукцияКромеПива.Количество() > 0;
	
	Элементы.ГруппаЛицензия.Видимость = Объект.ЕстьЭтиловыйСпирт ИЛИ Объект.ЭтиловыйСпирт.Количество() > 0 
	ИЛИ Объект.ЕстьВиноматериал ИЛИ Объект.Виноматериал.Количество() > 0
	ИЛИ Объект.ЕстьПивоПивныеНапитки ИЛИ Объект.ПивоПивныеНапитки.Количество() > 0
	ИЛИ Объект.ЕстьАлкоголь ИЛИ Объект.АлкогольнаяпродукцияКромеПива.Количество() > 0;
	Элементы.ДекорацияАлкоголь.Видимость = Объект.ЕстьЭтиловыйСпирт ИЛИ Объект.ЭтиловыйСпирт.Количество() > 0
	ИЛИ Объект.ЕстьВиноматериал ИЛИ Объект.Виноматериал.Количество() > 0
	ИЛИ Объект.ЕстьПивоПивныеНапитки ИЛИ Объект.ПивоПивныеНапитки.Количество() > 0
	ИЛИ Объект.ЕстьАлкоголь ИЛИ Объект.АлкогольнаяпродукцияКромеПива.Количество() > 0;
	
	Элементы.ГруппаНефтепродукты.Видимость = Объект.ЕстьНефтепродукты ИЛИ Объект.ДанныеПоНефтепродуктам.Количество() > 0;
	Элементы.ГруппаБиотопливо.Видимость = Объект.ЕстьБиотопливо ИЛИ Объект.ДанныеПоБиотопливу.Количество() > 0;
	Элементы.ГруппаТабачнаяПродукция.Видимость = Объект.ЕстьТабачныеИзделия ИЛИ Объект.ТабачнаяПродукция.Количество() > 0;
	Элементы.ГруппаТоварыЭкспортныйКонтроль.Видимость = Объект.ЕстьТоварыЭК ИЛИ Объект.ТоварыЭкспортныйКонтроль.Количество() > 0;
	Элементы.ГруппаДругиеТоварыЦифроваяМаркировка.Видимость = Объект.ЕстьДругиеТоварыЦифроваяМаркировка ИЛИ Объект.ДругиеТоварыЦифроваяМаркировка.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидВвозаПриИзменении(Элемент)
	Объект.ИдентификаторТерриторииСЭЗ = Неопределено;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ВидВывозаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

#Область ПоИсточникамПроисхождения

&НаКлиенте
Процедура ИсточникПроисхожденияОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") ИЛИ 
		(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз")) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсточникПроисхожденияТовараНаСервере(Дата, ИсточникПроисхождения, Склад)
	Возврат ВССерверПереопределяемый.ПолучитьДанныеИсточникаПроисхождения(Дата, ИсточникПроисхождения, , Истина, Истина);
КонецФункции

&НаКлиенте
Процедура ИсточникПроисхожденияТовараПриИзменении(СтрокаТабличнойЧасти)
	
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
	Дата = Объект.Дата;
	Склад = Объект.СкладОтправитель;
	СтруктураЗначенийИП = ПолучитьИсточникПроисхожденияТовараНаСервере(Дата, ИсточникПроисхождения, Склад);
	Если Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
		СтрокаТабличнойЧасти.ИдентификаторТовара = "";
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураЗначенийИП, 
		"НомерЗаявленияВРамкахТС, НомерПозицииВДекларацииИлиЗаявлении, ПризнакПроисхождения, КодТНВЭД, ДополнительныйИдентификатор","ТоварНаименованиеВРамкахТС");
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураЗначенийИП, 
		"НомерЗаявленияВРамкахТС, НомерПозицииВДекларацииИлиЗаявлении, ПризнакПроисхождения, ИдентификаторТовара, КодТНВЭД, ДополнительныйИдентификатор","ТоварНаименованиеВРамкахТС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ТоварыВС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПризнакУчетаНаВиртуальномСкладе = ПолучитьПризнакУчетаНаВСИзИсточникаПроисхождения(ВыбранноеЗначение);
	Если  ПризнакУчетаНаВиртуальномСкладе Тогда		
		ТекстОшибки = НСтр("ru='У выбранного источника происхождения установлен признак ""Товары отражены на Виртуальном складе"". Источник происхождения очищен!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ВыбранноеЗначение = Неопределено;  		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСИсточникПроисхожденияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПризнакУчетаНаВиртуальномСкладе = ПолучитьПризнакУчетаНаВСИзИсточникаПроисхождения(ВыбранноеЗначение);
	Если НЕ ПризнакУчетаНаВиртуальномСкладе Тогда		
		ТекстОшибки = НСтр("ru='У выбранного источника происхождения не установлен признак ""Товары отражены на Виртуальном складе"". Источник происхождения очищен!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
		ВыбранноеЗначение = Неопределено;  		
	КонецЕсли;
	       
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ЭтиловыйСпирт.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.Виноматериал.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ПивоПивныеНапитки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.АлкогольнаяПродукцияКромеПива.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ДанныеПоНефтепродуктам.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ДанныеПоБиотопливу.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияИсточникПроисхожденияПриИзменении(Элемент)
	ИсточникПроисхожденияТовараПриИзменении(Элементы.ТабачнаяПродукция.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПроисхожденияТовараНачалоВыбора(ТабличнаяЧасть, Товар, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораИП = ВСКлиент.ПараметрыВыбораИсточникаПроисхождения(Объект, 
	Объект.СкладОтправитель,
	Элементы[ТабличнаяЧасть].ТекущиеДанные,
	"Товар", 
	НЕ Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
	
	ВСКлиент.ИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораИП);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("Товары", "Товар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ТоварыВС", "Товар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ЭтиловыйСпирт", "ЭтиловыйСпиртТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("Виноматериал", "ВиноматериалТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ПивоПивныеНапитки", "ПивоПивныеНапиткиТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("АлкогольнаяПродукцияКромеПива", "АлкогольнаяПродукцияКромеПиваТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ДанныеПоНефтепродуктам", "ДанныеПоНефтепродуктамТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ДанныеПоБиотопливу", "ДанныеПоБиотопливуТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИсточникПроисхожденияТовараНачалоВыбора("ТабачнаяПродукция", "ТабачнаяПродукцияТовар", Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#Область ЗаполнениеПоИсточникамПроисхождения

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияТоварыВС(Команда)
	
	Если Объект.ТоварыВС.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТоварыВС");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"ТоварыВС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсточникиПроисхожденияТовары(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "Товары");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти", ЭтотОбъект,ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ЗаполнитьИсточникиПроисхожденияПоОстаткам(,"Товары");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиПроисхожденияПоОстаткам(ОчищатьИсточники = Ложь, ИмяТабличнойЧасти)
	
	Если ОчищатьИсточники Тогда
		Для Каждого СтрокаТЧ ИЗ Объект[ИмяТабличнойЧасти] Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ИсточникПроисхождения) Тогда
				СтрокаТЧ.ИсточникПроисхождения =  ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбработкаОбменСНТ = СНТСерверПовтИсп.ОбработкаОбменСНТ();
	ДокОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.СНТ"));
	ОбработкаОбменСНТ.ЗаполнитьТоварыСУчетомИсточниковПроисхождения(ДокОбъект, ,ИмяТабличнойЧасти);
	ЗначениеВДанныеФормы(ДокОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаИсточниковТабличнойЧасти(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИсточникиПроисхожденияПоОстаткам(Истина, Параметры.ИмяТабличнойЧасти); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Договор

&НаКлиенте
Процедура ДоговорНайти(Команда)
	
	Контрагент = Контрагент(Объект);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
		
		Если МассивДоговоров.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Не удалось найти договор поставки в базе данных.
			|Создать новый договор поставки?'");
			
			СоздатьНовыйДоговорЗавершение = Новый ОписаниеОповещения("СоздатьНовыйДоговорЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьНовыйДоговорЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
			
			Объект.ДоговорПоставки = МассивДоговоров[0];
			
		Иначе // МассивДоговоров.Количество() > 1
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько договоров'"));
			ПараметрыФормы.Вставить("МассивЗначений", МассивДоговоров);
			
			ВыборДоговораИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборДоговораИзСпискаЗавершение", ЭтаФорма);
			ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборДоговораИзСпискаЗавершение);
			
		КонецЕсли;
		
	Иначе
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно найти договор поставки, так как не указан поставщик в разделе ""B. Поставщики"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДоговорСоздатьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйДоговор = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйДоговор) Тогда
		Объект.ДоговорПоставки = ВыбранныйДоговор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздать(Команда)
	
	ДоговорСоздатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздатьНаКлиенте()
	
	ИмяРеквизитаКонтрагента = "";	
	
	Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяРеквизитаКонтрагента) Тогда
		СНТКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоДоговора(ЭтаФорма, ИмяРеквизитаКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЗаполнитьРеквизиты(Команда)
	
	ИмяРеквизитаКонтрагента = "";
	
	Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяРеквизитаКонтрагента) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда
			СНТКлиентПереопределяемый.ОткрытьЗаполненнуюФормуСтарогоДоговора(ЭтаФорма, ИмяРеквизитаКонтрагента);
		Иначе
			Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как договор поставки не заполнен.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяРеквизитаКонтрагента)
	
	ДанныеЗаполнены = Истина;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		ИмяРеквизитаКонтрагента = "Поставщик";
	Иначе
		ИмяРеквизитаКонтрагента = "Получатель";
	КонецЕсли;
	
	Если ИмяРеквизитаКонтрагента = "Поставщик" Тогда
		СинонимРаздела = НСтр("ru = 'B. Поставщик'");
	Иначе
		СинонимРаздела = НСтр("ru = 'C. Получатель'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаКонтрагента) Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как раздел ""[СинонимРаздела]"" является пустым.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
		Сообщить(ТекстСообщения);
		
		ДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаКонтрагента) Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как в разделе ""[СинонимРаздела]"" не заполнено поле [ИмяРеквизитаКонтрагента].'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);	
		Сообщить(ТекстСообщения);
		
		ДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Контрагент(Знач Объект)
	
	Контрагент = Неопределено;
	
	СтрокаКонтрагент = СтрокаКонтрагент(Объект);
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		
		Контрагент = Объект[СтрокаКонтрагент];	
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаКонтрагент(Знач Объект)
	
	ИмяКонтрагента = "";
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		ИмяКонтрагента = "Поставщик";
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") 
		И Объект.ВидВвоза = ПредопределенноеЗначение("Перечисление.ВидыВвозаСНТ.Импорт") Тогда
		ИмяКонтрагента = "Поставщик";
	Иначе
		ИмяКонтрагента = "Получатель";
	КонецЕсли;
	
	Возврат ИмяКонтрагента;
	
КонецФункции

&НаСервере
Функция НайтиДоговорыПоставкиНаСервере()
	
	МассивДоговоров = Новый Массив;
	
	СтрокаКонтрагент = Контрагент(Объект);
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		ОбработкаОбменСНТ = СНТСерверПовтИсп.ОбработкаОбменСНТ();	
		МассивДоговоров = ОбработкаОбменСНТ.НайтиДоговорыПоставкиПоДаннымСНТ(Объект, СтрокаКонтрагент);
	КонецЕсли;
	
	Возврат МассивДоговоров;	
	
КонецФункции

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Контрагент = Контрагент(Объект);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СоответствиеИменРеквизитов = Новый Соответствие;
		СоответствиеИменРеквизитов.Вставить("%ИмяРеквизитаВладелецДоговора", "");
		
		ЭСФВызовСервера.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответствиеИменРеквизитов);
		
		ИмяРеквизитаВладелецДоговора = СоответствиеИменРеквизитов.Получить("%ИмяРеквизитаВладелецДоговора");
		
		Отбор.Вставить(ИмяРеквизитаВладелецДоговора, Контрагент);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элементы.ДоговорПоставки);
	
КонецПроцедуры

#КонецОбласти

#Область Контрагент

&НаКлиенте
Процедура ПоставщикНайти(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПоставщикИдентификатор) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Не заполнено значение поля ""ИИН, БИН"".'"));
		Возврат;
	КонецЕсли;
	
	МассивКонтрагентов = НайтиКонтрагентовПоИдентификатору(Объект.ПоставщикИдентификатор);
	
	Если МассивКонтрагентов.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр(
		"ru = 'Не удалось найти контрагента в базе данных.
		|Создать нового контрагента?'");
		
		СоздатьНовогоКонтрагентаЗавершение = Новый ОписаниеОповещения("СоздатьНовогоКонтрагентаЗавершение", ЭтаФорма);
		ПоказатьВопрос(СоздатьНовогоКонтрагентаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли МассивКонтрагентов.Количество() = 1 Тогда
		
		Объект.Поставщик = МассивКонтрагентов[0];
		
	Иначе // МассивКонтрагентов.Количество() > 1
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько контрагентов'"));
		ПараметрыФормы.Вставить("МассивЗначений", МассивКонтрагентов);
		
		ВыборКонтрагентаИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборКонтрагентаИзСпискаЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборКонтрагентаИзСпискаЗавершение);
		
	КонецЕсли;
	
	Если НЕ МассивКонтрагентов.Количество() = 0 И НЕ МассивКонтрагентов.Количество() = 0 Тогда
		ЗаполнитьРеквизитДоговорПоставкиПоДаннымСНТ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоставщикСоздатьНаКлиенте();
	КонецЕсли;
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымСНТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПоставщик = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйПоставщик) Тогда
		
		Объект.Поставщик = ВыбранныйПоставщик;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымСНТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздать(Команда)
	
	ПоставщикСоздатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздатьНаКлиенте()
	
	Если НЕ ПустаяСтрока(Объект.ПоставщикИдентификатор) ИЛИ НЕ ПустаяСтрока(Объект.ПоставщикНаименование) Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Идентификатор", Объект.ПоставщикИдентификатор);
		ДанныеЗаполнения.Вставить("Наименование", Объект.ПоставщикНаименование);
		
		ТекстКомментария = СНТКлиентСервер.ТекстКомментарияСозданПоДаннымСНТ(Объект.Ссылка);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментария);
		
		СНТКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоКонтрагента(ЭтаФорма, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗаполнитьРеквизиты(Команда)
	
	Если ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		ТекстВопроса = НСтр(
		"ru = 'Данные поставщика будут перезаполнены по данным СНТ.
		|Продолжить?'");
		
		ПерезаполнениеДанныхПоставщикаЗавершение = Новый ОписаниеОповещения("ПерезаполнениеДанныхПоставщикаЗавершение", ЭтаФорма);
		ПоказатьВопрос(ПерезаполнениеДанныхПоставщикаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить, так как не заполнено поле ""Поставщик"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеДанныхПоставщикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоставщикЗаполнитьРеквизитыНаСервере(Объект.Поставщик);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикЗаполнитьРеквизитыНаСервере(Поставщик)
	
	ОбработкаОбменСНТ = СНТСерверПовтИсп.ОбработкаОбменСНТ();
	ОбработкаОбменСНТ.ЗаполнитьРеквизитыКонтрагента(Объект, Поставщик);
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымСНТ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитДоговорПоставкиПоДаннымСНТ()
	
	ПоказатьСообщение = Ложь;	
	МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
	
	Если МассивДоговоров.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда			
			Объект.ДоговорПоставки = Неопределено;
			ПоказатьСообщение = Истина;			
		КонецЕсли;
		
	ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
		
		Объект.ДоговорПоставки = МассивДоговоров[0];	
		
	Иначе // МассивДоговоров.Количество() > 1
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда			
			
			Если МассивДоговоров.Найти(Объект.ДоговорПоставки) = Неопределено Тогда
				
				Объект.ДоговорПоставки = Неопределено;
				ПоказатьСообщение = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказатьСообщение Тогда
		
		Контрагент = Контрагент(Объект);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Договор поставки"" в разделе ""F. Договор (контракт)"" было очищено, так как указанный договор не принадлежал контрагенту ""[Контрагент]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Контрагент]", Контрагент);
		Иначе
			ТекстСообщения = НСтр("ru = 'Поле ""Договор поставки"" в разделе ""F. Договор (контракт)"" было очищено.'");
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Объект.ДоговорПоставки";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиКонтрагентовПоИдентификатору(Знач Идентификатор)
	
	МассивКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.%КонтрагентИНН = &Идентификатор";
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивКонтрагентов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивКонтрагентов;
	
КонецФункции

#КонецОбласти

#Область Товары 

&НаКлиенте
Процедура ТоварыСоздатьТовары(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда			
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоТовара(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоздатьТоварыВС(Команда)
	
	ТекущиеДанные = Элементы.ТоварыВС.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоТовара(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьТаблицуОшибок(ИсточникДляЗаполненияТаблицыОшибок)
	
	Ошибки.Очистить();	
	
	ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	СоответствиеПолей = СНТСерверПовтИсп.НовоеСоответствиеПолей();
	СоответствиеРазделов = СНТСерверПовтИсп.НовоеСоответствиеРазделов();
	
	Для Каждого Ошибка Из ИсточникДляЗаполненияТаблицыОшибок Цикл
		
		ИнформацияОбОшибке = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, Ошибка.Текст, Ошибка.Поле, СоответствиеПолей, СоответствиеРазделов);
		
		НоваяСтрока = Ошибки.Добавить();
		
		НоваяСтрока.ТекстИСЭСФ  = ИнформацияОбОшибке.ТекстИСЭСФ;
		НоваяСтрока.ПолеИСЭСФ   = ИнформацияОбОшибке.ПолеИСЭСФ;
		НоваяСтрока.ТекстИБ     = ИнформацияОбОшибке.ТекстИБ;
		НоваяСтрока.ПолеИБ      = ИнформацияОбОшибке.ПолеИБ;
		НоваяСтрока.ИмяСтраницы = ИнформацияОбОшибке.ИмяСтраницы;
		НоваяСтрока.ПодробнаяИнформация = ИнформацияОбОшибке.ПодробнаяИнформация;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	СНТСерверПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
	ПроверитьСписокТоваровНеПодлежащихУчетуНаВС();
	ПроверитьСписокТоваровНаПеремещениеЭДВС();
	СформироватьПредставлениеУведомлениеОСопоставленииДляСНТ(ТекущийОбъект);
	ЗаполнитьТаблицуОшибок(ТекущийОбъект.Ошибки);
	УправлениеФормой();
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = СНТКлиентСервер.ИмяСобытияЗаписьСНТ() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = СНТКлиентСервер.ИмяСобытияОтсоединениеСНТ() Тогда
		
		ЭтаФорма.РеквизитыЭСФ = Неопределено;
		ЭтаФорма.ПредставлениеЭСФ = НСтр("ru = 'ЭСФ отсутствует'")
		
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();
		Иначе
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;	
	
	Если СНТКлиентСервер.ЭтоОповещениеПодсистемыСНТ(ИмяСобытия) Тогда
		СНТОбработкаОповещенияНаСервере(ИмяСобытия, Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СНТОбработкаОповещенияНаСервере(ИмяСобытия, Параметр)
	СНТСервер.СНТОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

Функция ТабличныеЧастиДокументаСНТ()
	
	ТабличныеЧастиВыбора = Новый СписокЗначений;
	ТабличныеЧастиВыбора.Добавить("Товары", "Товары");
	ТабличныеЧастиВыбора.Добавить("ТоварыВС", "Товары виртуального склада");
	ТабличныеЧастиВыбора.Добавить("ЭтиловыйСпирт", "Этиловый спирт");
	ТабличныеЧастиВыбора.Добавить("Виноматериал", "Виноматериал");
	ТабличныеЧастиВыбора.Добавить("ПивоПивныеНапитки", "Пиво и пивные напитки");
	ТабличныеЧастиВыбора.Добавить("АлкогольнаяПродукцияКромеПива", "Алкогольная продукция (кроме пива и пивных напитков)");
	ТабличныеЧастиВыбора.Добавить("ДанныеПоНефтепродуктам", "Нефтепродукты");
	ТабличныеЧастиВыбора.Добавить("ДанныеПоБиотопливу", "Биотопливо");
	ТабличныеЧастиВыбора.Добавить("ТабачнаяПродукция", "Данные по табачной продукции (исключая цифровую маркировку)");
	ТабличныеЧастиВыбора.Добавить("ДругиеТоварыЦифроваяМаркировка", "Данные по товарам, подлежащим маркировке средствами идентификации (цифровая маркировка)");
	ТабличныеЧастиВыбора.Добавить("ТоварыЭкспортныйКонтроль", "Данные по товарам, подлежащим экспортному контролю (двойного назначения, военного назначения)");	
	
	ВидимостьТабличныхЧастей = Новый Соответствие;
	ВидимостьТабличныхЧастей.Вставить("Товары", Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение"));
	ВидимостьТабличныхЧастей.Вставить("ТоварыВС", Истина);
	ВидимостьТабличныхЧастей.Вставить("ЭтиловыйСпирт", Объект.ЕстьЭтиловыйСпирт);
	ВидимостьТабличныхЧастей.Вставить("Виноматериал", Объект.ЕстьВиноматериал);
	ВидимостьТабличныхЧастей.Вставить("ПивоПивныеНапитки", Объект.ЕстьПивоПивныеНапитки);
	ВидимостьТабличныхЧастей.Вставить("АлкогольнаяПродукцияКромеПива", Объект.ЕстьАлкоголь);
	ВидимостьТабличныхЧастей.Вставить("ДанныеПоНефтепродуктам", Объект.ЕстьНефтепродукты);
	ВидимостьТабличныхЧастей.Вставить("ДанныеПоБиотопливу", Объект.ЕстьБиотопливо);
	ВидимостьТабличныхЧастей.Вставить("ТабачнаяПродукция", Объект.ЕстьТабачныеИзделия);
	ВидимостьТабличныхЧастей.Вставить("ДругиеТоварыЦифроваяМаркировка", Объект.ЕстьДругиеТоварыЦифроваяМаркировка);
	ВидимостьТабличныхЧастей.Вставить("ТоварыЭкспортныйКонтроль", Объект.ЕстьТоварыЭК);
	
	Для каждого НастройкаВидимости Из ВидимостьТабличныхЧастей Цикл
		Если НастройкаВидимости.Значение = Ложь Тогда
			ТабличныеЧастиВыбора.Удалить(ТабличныеЧастиВыбора.НайтиПоЗначению(НастройкаВидимости.Ключ));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныеЧастиВыбора;
	
КонецФункции

&НаСервере
Процедура ПеренестиНаСервере(ИмяИсходнойТаблицы, ИмяТаблицы, ЭтоКопированиеСтроки = Ложь)
	
	ТекущиеДанные = Элементы[ИмяИсходнойТаблицы].ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ТекущиеДанные Цикл
		
		Строка = Объект[ИмяИсходнойТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ЭтоКопированиеСтроки Тогда
			Объект[ИмяИсходнойТаблицы].Удалить(Строка);
		КонецЕсли;
		
		Если ИмяИсходнойТаблицы = "ТабачнаяПродукция" Тогда
			ИсходноеКоличество = Строка.КоличествоПачек
		ИначеЕсли ИмяИсходнойТаблицы = "АлкогольнаяПродукцияКромеПива" Тогда
			ИсходноеКоличество = Строка.КоличествоБутылок
		ИначеЕсли ИмяИсходнойТаблицы = "ПивоПивныеНапитки" Тогда
			ИсходноеКоличество = Строка.КоличествоУпаковок;
		Иначе
			ИсходноеКоличество = Строка.Количество;
		КонецЕсли;
		
		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ,"НомерСтроки, Количество");

		Если ИмяТаблицы = "ТабачнаяПродукция" Тогда
			НоваяСтрока.КоличествоПачек = ИсходноеКоличество;
		ИначеЕсли ИмяТаблицы = "АлкогольнаяПродукцияКромеПива" Тогда
			НоваяСтрока.КоличествоБутылок = ИсходноеКоличество;
		ИначеЕсли ИмяТаблицы = "ПивоПивныеНапитки" Тогда
			Если НоваяСтрока.ЕдиницаИзмеренияКод = "112" Тогда
				НоваяСтрока.КоличествоУпаковок = ИсходноеКоличество;
				НоваяСтрока.Количество = ИсходноеКоличество;
			Иначе	
				НоваяСтрока.КоличествоУпаковок = ИсходноеКоличество;
			КонецЕсли;
		Иначе
			НоваяСтрока.Количество = ИсходноеКоличество;
		КонецЕсли;
		
		Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "ТоварыВС" ИЛИ ИмяТаблицы = "ТабачнаяПродукция"
			ИЛИ ИмяТаблицы = "ДанныеПоНефтепродуктам" ИЛИ ИмяТаблицы = "ДанныеПоБиотопливу"
			ИЛИ ИмяТаблицы = "ДругиеТоварыЦифроваяМаркировка" ИЛИ ИмяТаблицы = "ТоварыЭкспортныйКонтроль" Тогда
			НоваяСтрока.ЕдиницаИзмеренияКод = ПолучитьКодЕИ(НоваяСтрока.ЕдиницаИзмерения, НоваяСтрока.Товар);
		КонецЕсли;
		
		Если  ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "ТоварыВС" Тогда
			НоваяСтрока.ИсточникПроисхождения = ПредопределенноеЗначение("Справочник.ИсточникиПроисхождения.ПустаяСсылка");
			НоваяСтрока.ИдентификаторТовара = Неопределено;
			НоваяСтрока.ДополнительныйИдентификатор = Неопределено;
			НоваяСтрока.НомерЗаявленияВРамкахТС     = "";
			НоваяСтрока.НомерПозицииВДекларацииИлиЗаявлении = "";
		КонецЕсли;
		
		Если Объект.ТипСНТ <> Перечисления.ТипыСНТ.ВозвратТоваров И ИмяТаблицы <> "Товары" Тогда 
			НоваяСтрока.НомерСтрокиСНТ = НоваяСтрока.НомерСтроки; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ТипСНТ <> Перечисления.ТипыСНТ.ВозвратТоваров И ИмяИсходнойТаблицы <> "Товары" Тогда 
		Для Каждого Строка Из Объект[ИмяИсходнойТаблицы] Цикл
			Строка.НомерСтрокиСНТ = Строка.НомерСтроки;	
		КонецЦикла;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТЧПоГруппе(ИмяГруппы)
	
	СтруктураГрупп = Новый Структура;
	
	СтруктураГрупп.Вставить("ГруппаСтраницаТовары", "Товары");
	СтруктураГрупп.Вставить("Группа5", "ТабачнаяПродукция");
	СтруктураГрупп.Вставить("Группа7", "ДругиеТоварыЦифроваяМаркировка");
	СтруктураГрупп.Вставить("Группа8", "ДанныеПоБиотопливу");
	СтруктураГрупп.Вставить("Группа9", "ТоварыЭкспортныйКонтроль");
	СтруктураГрупп.Вставить("Группа10", "ДанныеПоНефтепродуктам");
	СтруктураГрупп.Вставить("Группа11", "ТоварыВС");

	Возврат СтруктураГрупп[ИмяГруппы];
	
КонецФункции

// Команда для ТЧ ТоврыВС, Товары, G6-G10
&НаКлиенте
Процедура ПеренестиТоварВТаблицу(Команда)
	
	ТекНаимГруппы = Элементы.ГруппаТоварыСтраницы.ТекущаяСтраница.Имя;
	ТабличныеЧасти = ТабличныеЧастиДокументаСНТ();
	ТабличнаяЧасть = ТабличныеЧасти.ВыбратьЭлемент("Перенести в таблицу", ТекущийЭлемент);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПеренестиНаСервере(ОпределитьТЧПоГруппе(ТекНаимГруппы), ТабличнаяЧасть.Значение);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЭтилСп(Команда)
	
	ТабличныеЧасти = ТабличныеЧастиДокументаСНТ();
	ТабличнаяЧасть = ТабличныеЧасти.ВыбратьЭлемент("Перенести в таблицу", ТекущийЭлемент);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПеренестиНаСервере("ЭтиловыйСпирт", ТабличнаяЧасть.Значение);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВино(Команда)
	
	ТабличныеЧасти = ТабличныеЧастиДокументаСНТ();
	ТабличнаяЧасть = ТабличныеЧасти.ВыбратьЭлемент("Перенести в таблицу", ТекущийЭлемент);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПеренестиНаСервере ("Виноматериал", ТабличнаяЧасть.Значение);	
	Иначе	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПиво(Команда)
	
	ТабличныеЧасти = ТабличныеЧастиДокументаСНТ();
	ТабличнаяЧасть = ТабличныеЧасти.ВыбратьЭлемент("Перенести в таблицу", ТекущийЭлемент);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПеренестиНаСервере ("ПивоПивныеНапитки", ТабличнаяЧасть.Значение);	
	Иначе	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДрАлкоголь(Команда)
	
	ТабличныеЧасти = ТабличныеЧастиДокументаСНТ();
	ТабличнаяЧасть = ТабличныеЧасти.ВыбратьЭлемент("Перенести в таблицу", ТекущийЭлемент);
	Если ТабличнаяЧасть <> Неопределено Тогда
		ПеренестиНаСервере ("АлкогольнаяПродукцияКромеПива", ТабличнаяЧасть.Значение);	
	Иначе	
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция КоэффициентАкцизаИзНоменклатурыНаСервере(Номенклатура)
	
	КоэффициентАкциза = СНТСерверПереопределяемый.КоэффициентАкцизаИзНоменклатуры(Номенклатура);
	
	Возврат КоэффициентАкциза;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсегоНДС   = Объект.ТоварыВС.Итог("СуммаНДС") + Объект.ЭтиловыйСпирт.Итог("СуммаНДС") + Объект.Виноматериал.Итог("СуммаНДС") + Объект.ПивоПивныеНапитки.Итог("СуммаНДС")
	+ Объект.АлкогольнаяпродукцияКромеПива.Итог("СуммаНДС") + Объект.ДанныеПоНефтепродуктам.Итог("СуммаНДС") + Объект.ДанныеПоБиотопливу.Итог("СуммаНДС") + Объект.ТабачнаяПродукция.Итог("СуммаНДС")
	+ Объект.ДругиеТоварыЦифроваяМаркировка.Итог("СуммаНДС") + Объект.ТоварыЭкспортныйКонтроль.Итог("СуммаНДС");
	
	Форма.ИтогиВсегоАкциз = Объект.ТоварыВС.Итог("СуммаАкциза") + Объект.ЭтиловыйСпирт.Итог("СуммаАкциза") + Объект.Виноматериал.Итог("СуммаАкциза") + Объект.ПивоПивныеНапитки.Итог("СуммаАкциза")
	+ Объект.АлкогольнаяпродукцияКромеПива.Итог("СуммаАкциза") + Объект.ДанныеПоНефтепродуктам.Итог("СуммаАкциза") + Объект.ДанныеПоБиотопливу.Итог("СуммаАкциза") + Объект.ТабачнаяПродукция.Итог("СуммаАкциза")
	+ Объект.ДругиеТоварыЦифроваяМаркировка.Итог("СуммаАкциза") + Объект.ТоварыЭкспортныйКонтроль.Итог("СуммаАкциза");
	
	
	Форма.ИтогиВсего      = Объект.ТоварыВС.Итог("Сумма") + Объект.ЭтиловыйСпирт.Итог("Сумма") + Объект.Виноматериал.Итог("Сумма") + Объект.ПивоПивныеНапитки.Итог("Сумма")
	+ Объект.АлкогольнаяпродукцияКромеПива.Итог("Сумма") + Объект.ДанныеПоНефтепродуктам.Итог("Сумма") + Объект.ДанныеПоБиотопливу.Итог("Сумма") + Объект.ТабачнаяПродукция.Итог("Сумма")
	+ Объект.ДругиеТоварыЦифроваяМаркировка.Итог("Сумма") + Объект.ТоварыЭкспортныйКонтроль.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, ТабличнаяЧасть) 
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		СуммаБезНалогов = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти[НаименованиеКоличества];
		
		СтавкаАкциза = ПолучитьСтавкуАкцизаНаКлиенте(СтрокаТабличнойЧасти);
		
		СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Коэффициент = КоэффициентАкцизаИзНоменклатурыНаСервере(СтрокаТабличнойЧасти.Товар);
		Если ТабличнаяЧасть = "ЭтиловыйСпирт" И (СтрокаТабличнойЧасти.Крепость >= 0 И СтавкаАкциза >= 0) Тогда
			
			Если Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2208" ИЛИ Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "3003" ИЛИ Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "3004" Тогда
				Если СтрокаТабличнойЧасти.Крепость = 0 И СтавкаАкциза <> 0 Тогда
					ТекстСообщения = НСтр("ru = 'Для расчёта суммы акциза необходимо заполнить поле ""Крепость"".'");
					Сообщить(ТекстСообщения);
				Иначе
					СтрокаТабличнойЧасти.СуммаАкциза = Окр(((СтавкаАкциза * СтрокаТабличнойЧасти.Крепость)/100) * СтрокаТабличнойЧасти[НаименованиеКоличества], 2);
				КонецЕсли;
			ИначеЕсли Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2207" Тогда
				СтрокаТабличнойЧасти.СуммаАкциза = Окр(СтавкаАкциза * СтрокаТабличнойЧасти[НаименованиеКоличества], 2);
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = "АлкогольнаяПродукцияКромеПива" И (СтрокаТабличнойЧасти.Крепость >= 0 И СтавкаАкциза >= 0) Тогда
			
			Если Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2204" ИЛИ Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2205" ИЛИ Лев(СтрокаТабличнойЧасти.КодТНВЭД, 6) = "220600" Тогда
				СтрокаТабличнойЧасти.СуммаАкциза = Окр(СтавкаАкциза * СтрокаТабличнойЧасти.Количество, 2); //Количество (в литрах)
			Иначе
				Если СтрокаТабличнойЧасти.Крепость = 0 И СтавкаАкциза <> 0 Тогда
					ТекстСообщения = НСтр("ru = 'Для расчёта суммы акциза необходимо заполнить поле ""Крепость"".'");
					Сообщить(ТекстСообщения);
				Иначе
					СтрокаТабличнойЧасти.СуммаАкциза = Окр(((СтавкаАкциза * СтрокаТабличнойЧасти.Крепость)/100) * СтрокаТабличнойЧасти.Количество, 2); //Количество (в литрах)
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = "ДанныеПоНефтепродуктам" Тогда
			СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТабличнойЧасти[НаименованиеКоличества] * СтавкаАкциза;
		ИначеЕсли ТабличнаяЧасть = "ТабачнаяПродукция" Тогда
			Если Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2402" Тогда
				СтрокаТабличнойЧасти.СуммаАкциза = Окр((СтавкаАкциза * СтрокаТабличнойЧасти.Количество)/1000, 2);
			ИначеЕсли Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "2403" ИЛИ Лев(СтрокаТабличнойЧасти.КодТНВЭД, 4) = "3824" Тогда
				СтрокаТабличнойЧасти.СуммаАкциза = Окр(СтавкаАкциза * СтрокаТабличнойЧасти.Количество, 2);
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.СуммаАкциза = СтрокаТабличнойЧасти[НаименованиеКоличества] * СтавкаАкциза;
		КонецЕсли;
		СтрокаТабличнойЧасти.СуммаБезНалогов = СуммаБезНалогов;
		СтрокаТабличнойЧасти.ОборотПоРеализации = СуммаБезНалогов + СтрокаТабличнойЧасти.СуммаАкциза;
		СтрокаТабличнойЧасти.СуммаНДС = Окр(СтрокаТабличнойЧасти.ОборотПоРеализации * 0.01 * СтавкаНДС, 2);
		СтрокаТабличнойЧасти.Сумма = Окр(СтрокаТабличнойЧасти.ОборотПоРеализации + СтрокаТабличнойЧасти.СуммаНДС, 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества) 
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[НаименованиеКоличества]) Тогда
			
			СуммаДляРасчетаНДС = СтрокаТабличнойЧасти.Сумма;
			СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
			СуммаБезНДС = 100 * СуммаДляРасчетаНДС / (100 + СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма - СуммаБезНДС;
			СтрокаТабличнойЧасти.ОборотПоРеализации = Окр(СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС, 2);
			
			СтрокаТабличнойЧасти.СуммаБезНалогов = СтрокаТабличнойЧасти.ОборотПоРеализации - СтрокаТабличнойЧасти.СуммаАкциза;
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.СуммаБезНалогов /СтрокаТабличнойЧасти[НаименованиеКоличества];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтавкуАкцизаНаКлиенте(СтрокаТабличнойЧасти)
	
	СтавкаАкцизаЧисло = СтрокаТабличнойЧасти.СтавкаАкцизаЧисло;
	
	ДополнитьСтавкуАкцизаНаСервере(СтрокаТабличнойЧасти.СтавкаАкциза, СтавкаАкцизаЧисло);
	
	Возврат СтавкаАкцизаЧисло;
	
КонецФункции

&НаСервере
Процедура ДополнитьСтавкуАкцизаНаСервере(СтавкаАкцизаСсылка, СтавкаАкцизаЧисло)
	
	СНТСерверПереопределяемый.ДополнитьСтавкуАкцизаИзСправочника(СтавкаАкцизаСсылка, СтавкаАкцизаЧисло);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтавкуНДС (СтавкаНДС)
	
	СтавкаНДСЧисло = СНТСерверПереопределяемый.ПолучитьСтавкуНДС(СтавкаНДС);
	
	Возврат СтавкаНДСЧисло;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьЗначениеБезНДС(СтрокаТабЧасти)
	
	СтрокаТабЧасти.СтавкаНДСЧисло = 0;
	СтрокаТабЧасти.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(СтрокаТабЧасти.БезНДС);

КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияТипа()
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	
	ЭтаФорма.Элементы.ДанныеПоБиотопливуТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.ЭтиловыйСпиртТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.ВиноматериалТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.ПивоПивныеНапиткиТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.АлкогольнаяпродукцияКромеПиваТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.ДанныеПоНефтепродуктамТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	ЭтаФорма.Элементы.ТабачнаяПродукцияТовар.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Товар = СтрокаТабличнойЧасти.Товар;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕИ(ЕдиницаИзмерения, Товар);
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура для всех ТЧ - ТоварыВС, Товары, G2-G10
&НаКлиенте
Процедура ТЧНДСПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДСЧисло = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина) Тогда
			СтрокаТабличнойЧасти.БезНДС = Истина;
		Иначе 
			СтрокаТабличнойЧасти.БезНДС = Ложь;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.Свойство("КоличествоБутылок") Тогда // G5
			НаименованиеКоличества = "КоличествоБутылок";
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("КоличествоВПачке") Тогда
			НаименованиеКоличества = "КоличествоВПачке";
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("КоличествоВКилограммах") Или СтрокаТабличнойЧасти.Свойство("КоличествоВМиллилитрах") Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВКилограммах) Тогда
				НаименованиеКоличества = "КоличествоВКилограммах";
			Иначе
				НаименованиеКоличества = "КоличествоВМиллилитрах";
			КонецЕсли;
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("КоличествоУпаковок") Тогда // G4
			НаименованиеКоличества = "КоличествоУпаковок";
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Количество") Тогда
			НаименованиеКоличества = "Количество";
		КонецЕсли;
		
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, ИмяТЧ);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура для всех ТЧ - ТоварыВС, Товары, G2-G10
&НаКлиенте
Процедура ТЧБезНДСПриИзменении(Элемент)
	
	ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
	СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
	ПолучитьЗначениеБезНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧАкцизПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		
		СтрокаТабличнойЧасти.СтавкаАкцизаЧисло = ПолучитьСтавкуАкцизаНаКлиенте(СтрокаТабличнойЧасти);
		
		Если СтрокаТабличнойЧасти.Свойство("КоличествоВПачке") Тогда //G8
			НаименованиеКоличества = "КоличествоВПачке";
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("КоличествоВКилограммах") Или СтрокаТабличнойЧасти.Свойство("КоличествоВМиллилитрах") Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВКилограммах) Тогда
				НаименованиеКоличества = "КоличествоВКилограммах";
			Иначе
				НаименованиеКоличества = "КоличествоВМиллилитрах";
			КонецЕсли;
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Количество") Тогда
			НаименованиеКоличества = "Количество";
		КонецЕсли;
		
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, ИмяТЧ);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.Товары.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.Товары.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДСЧисло = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина) Тогда
			СтрокаТабличнойЧасти.БезНДС = Истина;
		Иначе 
			СтрокаТабличнойЧасти.БезНДС = Ложь;
		КонецЕсли;
		НаименованиеКоличества = "Количество";
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.Товары.Имя);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ТоварыВС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСТоварПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСЕдиницаИзмеренияПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТоварыВС.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТоварыВС.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВССтавкаНДСПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
		СтрокаТабличнойЧасти.СтавкаНДСЧисло = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина) Тогда
			СтрокаТабличнойЧасти.БезНДС = Истина;
		Иначе 
			СтрокаТабличнойЧасти.БезНДС = Ложь;
		КонецЕсли;
		НаименованиеКоличества = "Количество";
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТоварыВС.Имя);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТоварыВС.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртПриИзменении(Элемент) // G2
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ЭтиловыйСпирт");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртКоличествоПриИзменении(Элемент) // G2
	
	СтрокаТабличнойЧасти = Элементы.ЭтиловыйСпирт.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ЭтиловыйСпирт.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртЦенаПриИзменении(Элемент) // G2
	
	СтрокаТабличнойЧасти = Элементы.ЭтиловыйСпирт.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ЭтиловыйСпирт.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртСуммаПриИзменении(Элемент) // G2
	
	СтрокаТабличнойЧасти = Элементы.ЭтиловыйСпирт.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртКрепостьПриИзменении(Элемент) //G2
	
	СтрокаТабличнойЧасти = Элементы.ЭтиловыйСпирт.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ЭтиловыйСпирт.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалПриИзменении(Элемент) // G3
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("Виноматериал");

КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалКоличествоВЛитрахПриИзменении(Элемент) // G3
	
	СтрокаТабличнойЧасти = Элементы.Виноматериал.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.Виноматериал.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалЦенаПриИзменении(Элемент) // G3
	
	СтрокаТабличнойЧасти = Элементы.Виноматериал.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.Виноматериал.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалСуммаПриИзменении(Элемент) // G3
	
	СтрокаТабличнойЧасти = Элементы.Виноматериал.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиПриИзменении(Элемент) // G4
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ПивоПивныеНапитки");

КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиЦенаПриИзменении(Элемент) // G4
	
	СтрокаТабличнойЧасти = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	НаименованиеКоличества = "КоличествоУпаковок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ПивоПивныеНапитки.Имя);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза)
		И Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ТЧАкцизПриИзменении(Элемент);
	КонецЕсли; 
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиСуммаПриИзменении(Элемент) // G4
	
	СтрокаТабличнойЧасти = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	НаименованиеКоличества = "КоличествоУпаковок";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиЕмкостьТарыПриИзменении(Элемент) // G4
	
	СтрокаТабличнойЧасти = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод <> "112" Тогда
		СтрокаТабличнойЧасти.Количество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВУпаковке), СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.КоличествоВУпаковке,
											СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза)
		И Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ТЧАкцизПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиКоличествоУпаковокПриИзменении(Элемент) // G4
	
	СтрокаТабличнойЧасти = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод <> "112" Тогда
		СтрокаТабличнойЧасти.Количество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВУпаковке), СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.КоличествоВУпаковке,
		СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок);
	ИначеЕсли СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = "112" Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоУпаковок;
	КонецЕсли;
	НаименованиеКоличества = "КоличествоУпаковок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ПивоПивныеНапитки.Имя);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза)
		И Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ТЧАкцизПриИзменении(Элемент);
	КонецЕсли; 
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиКоличествоВУпаковкеПриИзменении(Элемент) // G4
	
	СтрокаТабличнойЧасти = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод <> "112" Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВУпаковке) Тогда
			СтрокаТабличнойЧасти.Количество = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоВУпаковке), СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок * СтрокаТабличнойЧасти.КоличествоВУпаковке,
												СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоУпаковок);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкцизаЧисло) ИЛИ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза)
		И Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ТЧАкцизПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяпродукцияКромеПиваПриИзменении(Элемент) // G5
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("АлкогольнаяПродукцияКромеПива");

КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяпродукцияКромеПиваЦенаПриИзменении(Элемент) // G5
	
	СтрокаТабличнойЧасти = Элементы.АлкогольнаяпродукцияКромеПива.ТекущиеДанные;
	
	НаименованиеКоличества = "КоличествоБутылок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.АлкогольнаяпродукцияКромеПива.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяпродукцияКромеПиваСуммаПриИзменении(Элемент) // G5
	
	СтрокаТабличнойЧасти = Элементы.АлкогольнаяпродукцияКромеПива.ТекущиеДанные;
	НаименованиеКоличества = "КоличествоБутылок";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяпродукцияКромеПиваЕмкостьТарыПриИзменении(Элемент) // G5
	
	СтрокаТабличнойЧасти = Элементы.АлкогольнаяпродукцияКромеПива.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоБутылок;
	НаименованиеКоличества = "КоличествоБутылок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.АлкогольнаяпродукцияКромеПива.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяпродукцияКромеПиваКоличествоБутылокПриИзменении(Элемент) // G5
	
	СтрокаТабличнойЧасти = Элементы.АлкогольнаяпродукцияКромеПива.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.ЕмкостьТары * СтрокаТабличнойЧасти.КоличествоБутылок;
	НаименованиеКоличества = "КоличествоБутылок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.АлкогольнаяпродукцияКромеПива.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваКрепостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.АлкогольнаяпродукцияКромеПива.ТекущиеДанные;
	НаименованиеКоличества = "КоличествоБутылок";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.АлкогольнаяпродукцияКромеПива.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамПриИзменении(Элемент) // G6
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ДанныеПоНефтепродуктам");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамКоличествоПриИзменении(Элемент) // G6
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоНефтепродуктам.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДанныеПоНефтепродуктам.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамЦенаПриИзменении(Элемент) // G6
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоНефтепродуктам.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДанныеПоНефтепродуктам.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамСуммаПриИзменении(Элемент) // G6
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоНефтепродуктам.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамЕдиницаИзмеренияПриИзменении(Элемент) // G6
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Товар = СтрокаТабличнойЧасти.Товар;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕИ(ЕдиницаИзмерения, Товар);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияПриИзменении(Элемент) // G8
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ТабачнаяПродукция");

КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияЕдиницаИзмеренияПриИзменении(Элемент) // G8
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Товар = СтрокаТабличнойЧасти.Товар;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕИ(ЕдиницаИзмерения, Товар);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияЦенаПриИзменении(Элемент) // G8
	
	СтрокаТабличнойЧасти = Элементы.ТабачнаяПродукция.ТекущиеДанные;
	НаименованиеКоличества = "КоличествоПачек";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТабачнаяПродукция.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияКоличествоВПачкеПриИзменении(Элемент) // G8
	
	СтрокаТабличнойЧасти = Элементы.ТабачнаяПродукция.ТекущиеДанные;
	
	Если ЗначениеЗаполнено (СтрокаТабличнойЧасти.КоличествоВПачке) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоПачек) Тогда
		
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоВПачке * СтрокаТабличнойЧасти.КоличествоПачек;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияКоличествоПачекПриИзменении(Элемент) // G8
	
	СтрокаТабличнойЧасти = Элементы.ТабачнаяПродукция.ТекущиеДанные;
	
	Если ЗначениеЗаполнено (СтрокаТабличнойЧасти.КоличествоВПачке) И ЗначениеЗаполнено(СтрокаТабличнойЧасти.КоличествоПачек) Тогда
		
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоВПачке * СтрокаТабличнойЧасти.КоличествоПачек;
		НаименованиеКоличества = "КоличествоПачек";
		
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТабачнаяПродукция.Имя);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
		
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуПриИзменении(Элемент) // G7
	
	ОбновитьИтоги(ЭтаФорма);
	ИзменитьНомерСтрокиСНТ("ДанныеПоБиотопливу");

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуЦенаПриИзменении(Элемент) // G7
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоБиотопливу.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДанныеПоБиотопливу.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуКоличествоПриИзменении(Элемент) // G7
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоБиотопливу.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДанныеПоБиотопливу.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуЕдиницаИзмеренияПриИзменении(Элемент) // G7

	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		ЕдиницаИзмерения = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		Товар = СтрокаТабличнойЧасти.Товар;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕИ(ЕдиницаИзмерения, Товар);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДругиеТоварыЦифроваяМаркировкаПриИзменении(Элемент) //G9
	ИзменитьНомерСтрокиСНТ("ДругиеТоварыЦифроваяМаркировка");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольПриИзменении(Элемент) //G10
	ИзменитьНомерСтрокиСНТ("ТоварыЭкспортныйКонтроль");
КонецПроцедуры


#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеСНТНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И 
				Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") Тогда
			ВыбратьДокументОснование();
		Иначе
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Создать", НСтр("ru = 'Создать'"));
			Кнопки.Добавить("Выбрать", НСтр("ru = 'Выбрать'"));
			Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
			ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, НСтр("ru = 'Отразить документ в учете?'"), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьДокументОснование();
	ИначеЕсли РезультатВопроса = "Создать" Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	ВыбратьДокументОснование();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указано направление документа.'"));
		Возврат;
	КонецЕсли;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПустаяСсылка") 
		И Объект.Направление <> ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указано вид операции документа.'"));
		Возврат;
	КонецЕсли;
	ДокументыВыбора = СНТКлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляСНТ(Объект.Направление, Объект.ВидОперации);
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ДокументыВыбора", ДокументыВыбора);
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.СНТ.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	СНТКлиентПереопределяемый.ВыборДокументаОснованияВФормеСНТ(ЭтаФорма, ВыбранныйДокумент, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьДокументОснование(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Объект.ДокументОснование = Неопределено;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеСНТ = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеСНТ = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда  //++Аян_К++ 311022 №6306
			Для Каждого Стр Из ВыбранноеЗначение Цикл 
				ЗаполнитьТоварыИзПриобретенияТМЗ(Стр);
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И Объект.ДокументОснование <> ВыбранноеЗначение 
				И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаВыбораИзКлассификатора") = 0 Тогда
				
				ТекстВопроса = НСтр(
				"ru = 'Документ уже отражен в учете с помощью ""%СтарыйДокументОснование%"".
				|Отразить документ в учете с помощью выбранного документа?'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
				
				ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
				ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
				
			Иначе
				
				ИзменитьДокументОснование = Истина;
				
			КонецЕсли;
			
			Если ИзменитьДокументОснование Тогда
				Структура_СвязанныйСНТ = ПроверитьСвязанныйСНТ(ВыбранноеЗначение);
				Если Структура_СвязанныйСНТ = Неопределено Тогда
					//Если у выбранного документа-основания нет связанного СНТ, заполняем его без вопросов
					Объект.ДокументОснование = ВыбранноеЗначение;
					СформироватьПредставлениеДокументаОснования(ЭтаФорма);
					Модифицированность = Истина;				
				Иначе
					//Если связанный СНТ есть, предупреждаем об этом пользователя и даем возможность отказаться от выбора
					ТекстВопросаВыборОснования = НСтр(
					"ru = 'На основании документа ""%ДокументОснование%"" уже создан СНТ. 
					|Привязать текущий СНТ к выбранному документу без отсоединения ранее связанного СНТ?'");
					ТекстВопросаВыборОснования = СтрЗаменить(ТекстВопросаВыборОснования, "%ДокументОснование%", ВыбранноеЗначение);
					
					ПродолжитьЗаполнениеДокументаОснования = Новый ОписаниеОповещения("ПродолжитьЗаполнениеДокументаОснования", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
					ПоказатьВопрос(ПродолжитьЗаполнениеДокументаОснования, ТекстВопросаВыборОснования, РежимДиалогаВопрос.ОКОтмена);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнениеДокументаОснования(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
		ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
	Иначе
		СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(Объект.Ссылка);
		СНТКлиент.СоздатьПервичныйДокумент(Массив);
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		Номенклатура = Элементы[ИмяТЧ].ТекущиеДанные.Товар;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеНоменклатуры = ПолучитьСведенияОНоменклатуре(Номенклатура);
		Иначе
			ДанныеНоменклатуры = Новый Структура();
		КонецЕсли;
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
			ЗаполнитьЗначенияСвойств(Элементы[ИмяТЧ].ТекущиеДанные, ДанныеНоменклатуры,);
		Иначе
			//для входящих СНТ заполняем свойства, только если они не были заполнены ранее
			Для каждого СвойствоНоменклатуры Из ДанныеНоменклатуры Цикл
				Если Элементы[ИмяТЧ].ТекущиеДанные.Свойство(СвойствоНоменклатуры.Ключ) И 
					Не ЗначениеЗаполнено(Элементы[ИмяТЧ].ТекущиеДанные[СвойствоНоменклатуры.Ключ]) Тогда
					Элементы[ИмяТЧ].ТекущиеДанные[СвойствоНоменклатуры.Ключ] = СвойствоНоменклатуры.Значение;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
			// При изменении товара необходимо очистить Идентификатор товара в ИС ЭСФ, ИП и Идентификатор товара (ID).
			Элементы[ИмяТЧ].ТекущиеДанные.ИдентификаторТовара = Неопределено;
			Элементы[ИмяТЧ].ТекущиеДанные.ИсточникПроисхождения = ПредопределенноеЗначение("Справочник.ИсточникиПроисхождения.ПустаяСсылка");
			Элементы[ИмяТЧ].ТекущиеДанные.ДополнительныйИдентификатор = Неопределено;
			Элементы[ИмяТЧ].ТекущиеДанные.НомерЗаявленияВРамкахТС     = "";
			Элементы[ИмяТЧ].ТекущиеДанные.НомерПозицииВДекларацииИлиЗаявлении = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОНоменклатуре(Номенклатура)
	
	Возврат СНТСерверПереопределяемый.ПолучитьСведенияОНоменклатуре(Номенклатура);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Направление) Тогда
		ЗаполнитьЗначенияПоОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоОрганизации()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") Тогда
		
		Если ТипЗнч(Объект.Получатель) =  ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций()  Тогда			
			Возврат;
		КонецЕсли;
		
		Объект.Получатель = Объект.Организация;
		Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификатор, ПолучательНаименование");
		КонецЕсли;
		
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И Объект.ПоставщикНерезидент Тогда
		
		Если ТипЗнч(Объект.Получатель)  =  ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций()  Тогда
			Возврат;
		КонецЕсли;

		Объект.Получатель = Объект.Организация;
		Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификатор, ПолучательНаименование");
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(Объект.Поставщик) =  ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
			Возврат;
		КонецЕсли;

		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") Тогда
			Объект.Поставщик = Объект.Организация;
		Иначе
			Объект.Получатель = Объект.Организация;		
		КонецЕсли;
		
		Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификатор, ПоставщикНаименование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит) Экспорт
	
	Возврат СНТСерверПереопределяемый.ПолучитьРеквизитыОрганизацииКонтрагента(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Процедура СкладПолучательПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		Если ЗначениеЗаполнено(Объект.СкладПолучатель) Тогда
			РеквизитыОбъекта = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Объект.СкладПолучатель, "ИдентификаторСклада, Адрес");
			Объект.СкладДоставкиИдентификатор = РеквизитыОбъекта.ИдентификаторСклада;
			Объект.АдресДоставки = РеквизитыОбъекта.Адрес;
		Иначе
			Объект.СкладДоставкиИдентификатор = "";
			Объект.АдресДоставки = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)
	
	СкладПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладОтправкиПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
			РеквизитыОбъекта = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Объект.СкладОтправитель, "ИдентификаторСклада, Адрес");
			Объект.СкладОтправкиИдентификатор = РеквизитыОбъекта.ИдентификаторСклада;
			Объект.АдресОтправки = РеквизитыОбъекта.Адрес;
		Иначе
			Объект.СкладОтправкиИдентификатор = "";
			Объект.АдресОтправки = "";
		КонецЕсли;
	КонецЕсли;
	
	СформироватьТекстПодсказкиСПОтправителя();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправкиПриИзменении(Элемент)
	
	СкладОтправкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БезДоговораПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		БезДоговораПриИзмененииНаСервере();
		УстановитьВидимостьЭлементовДоговораПоставки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БезДоговораПриИзмененииНаСервере()
	
	Если Объект.БезДоговора Тогда
		Объект.ДоговорПоставкиНомер = "";
		Объект.ДоговорПоставкиДата = Дата(1,1,1);
	Иначе
		ЗаполнитьДанныеПоДоговору();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДоговораПоставки()
	
	Элементы.ДоговорПоставкиНомер.Видимость  = Не Объект.БезДоговора;
	Элементы.ДоговорПоставкиДата.Видимость = Не Объект.БезДоговора;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДоговору() Экспорт
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СоответсвиеИменРеквизитов = Новый Соответствие;
		СоответсвиеИменРеквизитов.Вставить("%ДоговорНомер", "");
		СоответсвиеИменРеквизитов.Вставить("%ДоговорДата", "");
		
		ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
		
		РеквизитДоговорНомер = СоответсвиеИменРеквизитов.Получить("%ДоговорНомер");
		РеквизитДоговорДата	 = СоответсвиеИменРеквизитов.Получить("%ДоговорДата");
		
		ТекстПолучаемыРеквизиты =  РеквизитДоговорНомер + ", " + РеквизитДоговорДата;
		
		РеквизитыДоговора = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Объект.ДоговорПоставки, ТекстПолучаемыРеквизиты);
		
		Объект.ДоговорПоставкиНомер = РеквизитыДоговора[РеквизитДоговорНомер];
		Объект.ДоговорПоставкиДата  = РеквизитыДоговора[РеквизитДоговорДата];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеревозчикПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Перевозчик, "Перевозчик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПеревозчикИдентификатор, ПеревозчикНаименование");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ПеревозчикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Грузоотправитель, "Грузоотправитель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ГрузоотправительИдентификатор, ГрузоотправительНаименование");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	ГрузоотправительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПолучательПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		Если ТипЗнч(Объект.Получатель) =  ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда 
			УказыватьРеквизитыГоловнойОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Получатель, "УказыватьРеквизитыГоловнойОрганизации") 
		Иначе
			УказыватьРеквизитыГоловнойОрганизации = Ложь;
		КонецЕсли;
		
		Если УказыватьРеквизитыГоловнойОрганизации = Истина Тогда
			ДанныеОрганизации  = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.Получатель);
			Объект.Организация = ?(ТипЗнч(ДанныеОрганизации) = Тип("Структура"), ДанныеОрганизации.Организация, ДанныеОрганизации);
			ДанныеПолучатель = Объект.Организация;
		Иначе
			ДанныеПолучатель = Объект.Получатель;
			УказыватьРеквизитыГоловнойОрганизации = Ложь;
		КонецЕсли;
		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(ДанныеПолучатель, "Получатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификатор, ПолучательНаименование, ПолучательНерезидент");
		
		//БИН СП заполняется БИН СП, если у СП установлен признак УказыватьРеквизитыГоловнойОрганизации
		Если УказыватьРеквизитыГоловнойОрганизации = Истина Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Получатель, "Получатель");
			Объект.ПолучательБИНСтруктурногоПодразделения = СтруктураДанных.ПолучательИдентификатор;
		Иначе
			Объект.ПолучательБИНСтруктурногоПодразделения = "";
		КонецЕсли;
		
		ЗаполнитьДанныеГрузополучателя(УказыватьРеквизитыГоловнойОрганизации);
	КонецЕсли;

	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") 
		ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") 
		И (Объект.ПоставщикРозничнаяРеализация И Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз"))) Тогда
		
		Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Организации") Тогда
			Объект.Организация = Объект.Получатель;
		ИначеЕсли ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
			ДанныеОрганизации = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.Получатель);
			Объект.Организация = ?(ТипЗнч(ДанныеОрганизации) = Тип("Структура"), ДанныеОрганизации.Организация, ДанныеОрганизации);
			Объект.ПолучательИдентификатор = ?(ТипЗнч(ДанныеОрганизации) = Тип("Структура"), ДанныеОрганизации.Идентификатор, "");
		КонецЕсли;
		
	КонецЕсли;
	
	СНТСерверПереопределяемый.УстановитьНаименованиеРозничныйПокупатель(Объект, "Получатель");
	
	Если ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций()
		И Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда
		//Если Поставщик равен подразделению, то очистим реквизит подразделение
		Объект.СтруктурноеПодразделение 		= ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения();
	КонецЕсли;
	
	Если Не ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
		Если Не Объект.Получатель = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.СтруктурноеПодразделениеПолучатель) Тогда 
			Объект.СтруктурноеПодразделениеПолучатель		= ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения();
		КонецЕсли;
	Иначе
		Объект.СтруктурноеПодразделениеПолучатель = Объект.Получатель;
	КонецЕсли;


	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПолучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		Если ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
			УказыватьРеквизитыГоловнойОрганизации 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Поставщик, "УказыватьРеквизитыГоловнойОрганизации") 
		Иначе
			УказыватьРеквизитыГоловнойОрганизации 	= Ложь;
		КонецЕсли;
		
		Если УказыватьРеквизитыГоловнойОрганизации = Истина Тогда
			ДанныеОрганизации  = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.Поставщик);
			Объект.Организация = ?(ТипЗнч(ДанныеОрганизации) = Тип("Структура"), ДанныеОрганизации.Организация, ДанныеОрганизации);;
			ДанныеПоставщика = Объект.Организация;
		Иначе
			ДанныеПоставщика = Объект.Поставщик;
			УказыватьРеквизитыГоловнойОрганизации = Ложь;
		КонецЕсли;
		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(ДанныеПоставщика, "Поставщик");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификатор, ПоставщикНаименование, ПоставщикНерезидент");
		
		//БИН СП заполняется БИН СП, если у СП установлен признак УказыватьРеквизитыГоловнойОрганизации
		Если УказыватьРеквизитыГоловнойОрганизации = Истина Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Поставщик, "Поставщик");
			Объект.ПоставщикБИНСтруктурногоПодразделения = СтруктураДанных.ПоставщикИдентификатор;
		Иначе
			Объект.ПоставщикБИНСтруктурногоПодразделения = "";
		КонецЕсли;
		
		ЗаполнитьДанныеГрузоотправителя(УказыватьРеквизитыГоловнойОрганизации);
		
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И Объект.ПоставщикНерезидент Тогда
		Если ТипЗнч(Объект.Получатель) = Тип("СправочникСсылка.Организации") Тогда
			Объект.Организация = Объект.Получатель;
		ИначеЕсли ТипЗнч(Объект.Получатель) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
			Объект.Организация       = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.Получатель);			
		КонецЕсли;
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") И НЕ Объект.ПоставщикНерезидент Тогда
		Если ТипЗнч(Объект.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
			Объект.Организация = Объект.Поставщик;
		КонецЕсли;
	КонецЕсли;
	  	
	СНТСерверПереопределяемый.УстановитьНаименованиеРозничныйПокупатель(Объект, "Получатель");
	
	Если ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций()
		И Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами Тогда
		//Если Поставщик равен подразделению, то очистим реквизит подразделение
		Объект.СтруктурноеПодразделение 		= ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения();
	КонецЕсли;
	
	Если Не ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций() Тогда
		Если Не Объект.Поставщик = СНТСерверПереопределяемый.ПолучитьОрганизациюПоПодразделению(Объект.СтруктурноеПодразделение) Тогда 
			Объект.СтруктурноеПодразделение 		= ВСКлиентСерверПереопределяемый.ПолучитьПустуюСсылкуПодразделения();
		КонецЕсли;
	Иначе
		Объект.СтруктурноеПодразделение = Объект.Поставщик;
	КонецЕсли;

	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОтправительПриИзменении(Элемент)
	СформироватьТекстПодсказкиСПОтправителя();
КонецПроцедуры

&НаСервере
Процедура ДоговорПоставкиПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтруктураДанных = ПолучитьРеквизитыДоговора(Объект.ДоговорПоставки, "ДоговорПоставки");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, 
		"ДоговорПоставкиНомер, ДоговорПоставкиДата, ДоговорПоставкиУсловияОплаты, ДоговорПоставкиУсловияПоставки");
		
		Объект.БезДоговора = НЕ (ЗначениеЗаполнено(Объект.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(Объект.ДоговорПоставкиДата));
		УстановитьВидимостьЭлементовДоговораПоставки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыДоговора(Ссылка, Реквизит)
	
	Возврат СНТСерверПереопределяемый.ПолучитьРеквизитыДоговора(Ссылка, Реквизит);
	
КонецФункции

&НаКлиенте
Процедура ДоговорПоставкиПриИзменении(Элемент)
	
	ДоговорПоставкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Грузополучатель, "Грузополучатель");
		ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ГрузополучательИдентификатор, ГрузополучательНаименование");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ГрузополучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	Если Объект.Направление = Перечисления.НаправленияСНТ.Исходящий Тогда
		
		Объект.Получатель = Объект.Поставщик;
		Объект.Контрагент = Объект.Поставщик;
		Объект.Поставщик = Объект.Организация;
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Ложь);
		
		Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
			Объект.ПолучательИдентификатор = Объект.ПоставщикИдентификатор;
			Объект.ПолучательНаименование  = Объект.ПоставщикНаименование;
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Организация, "Поставщик");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПоставщикИдентификатор, ПоставщикНаименование");
		КонецЕсли;
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияСНТ.Входящий Тогда
		
		Объект.Поставщик = Объект.Получатель;
		Объект.Контрагент = Объект.Получатель;
		Объект.Получатель = Объект.Организация;
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Истина);
		
		Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
			Объект.ПоставщикИдентификатор = Объект.ПолучательИдентификатор;
			Объект.ПоставщикНаименование  = Объект.ПолучательНаименование;
			СтруктураДанных = ПолучитьРеквизитыОрганизацииКонтрагента(Объект.Организация, "Получатель");
			ЗаполнитьЗначенияСвойств(Объект, СтруктураДанных, "ПолучательИдентификатор, ПолучательНаименование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныйСНТПриИзменении(Элемент)
	
	СвязанныйСНТПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СвязанныйСНТПриИзмененииНаСервере()
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Объект.РегистрационныйНомерСвязанногоСНТ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Объект.СвязанныйСНТ,"РегистрационныйНомерИСЭСФ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСклада(Склад, ИмяРеквизитаСклада) 
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка И ЗначениеЗаполнено(Склад) Тогда
		Если ИмяРеквизитаСклада = "СкладПолучатель" Тогда
			Объект.СкладДоставкиИдентификатор = Склад.ИдентификаторСклада;
			Объект.СкладПолучатель	= Склад.Наименование;
			Объект.АдресДоставки = Склад.Адрес;
		ИначеЕсли ИмяРеквизитаСклада = "СкладОтправки" Тогда
			Объект.СкладОтправкиИдентификатор = Склад.ИдентификаторСклада;
			Объект.СкладОтправитель = Склад.Наименование;
			Объект.АдресОтправки = Склад.Адрес;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВСКлиентПереопределяемый.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");

КонецПроцедуры

&НаКлиенте
Процедура КодСтраныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораКодСтраны = Новый Структура();
	ПараметрыВыбораКодСтраны.Вставить("ИмяЭлемента", Элемент.Имя);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("КодСтраныНачалоВыбораЗавершение", ЭтаФорма, ПараметрыВыбораКодСтраны);
	ИмяФормыВыбора = СНТКлиентПереопределяемый.ПолучитьИмяФормыВыбораКодСтраны();
	
	ПараметрыФормы = СНТКлиентПереопределяемый.ПараметрыФормыКлассификатораСтран();
	
	ОткрытьФорму(ИмяФормыВыбора,ПараметрыФормы,,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Процедура КодСтраныНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	КодСтраны = СНТСерверПереопределяемый.ПолучитьКодСтраныСНТ(Результат);
	
	Если Параметры.ИмяЭлемента = "ПоставщикКодСтраны" Тогда
		Объект.ПоставщикКодСтраны = КодСтраны; 
	ИначеЕсли Параметры.ИмяЭлемента = "КодСтраныОтправки" Тогда
		Объект.ПоставщикКодСтраныОтправки = КодСтраны; 
	ИначеЕсли Параметры.ИмяЭлемента = "ПолучательКодСтраны" Тогда
		Объект.ПолучательКодСтраны = КодСтраны;
	ИначеЕсли Параметры.ИмяЭлемента = "ПолучательКодСтраныДоставки" Тогда
		Объект.ПолучательКодСтраныДоставки = КодСтраны;
	ИначеЕсли Параметры.ИмяЭлемента = "ГрузоотправительКодСтраныОтправки" Тогда
		Объект.ГрузоотправительКодСтраныОтправки = КодСтраны;
	ИначеЕсли Параметры.ИмяЭлемента = "ГрузополучательКодСтраныОтправки" Тогда
		Объект.ГрузополучательКодСтраныОтправки = КодСтраны;
	КонецЕсли;	
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНерезидентПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		ЗаполнитьДанныеГрузоотправителя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГрузоотправителя(УказыватьРеквизитыОрганизацииСП = Ложь)
	
	Если ЗначениеЗаполнено(Объект.Поставщик) ИЛИ Объект.ПоставщикНерезидент Тогда
		Если Не УказыватьРеквизитыОрганизацииСП Тогда 			
			Объект.Грузоотправитель = Объект.Поставщик;
		Иначе
			Объект.Грузоотправитель = Объект.Организация;
		КонецЕсли;
		
		Объект.ГрузоотправительНаименование = Объект.ПоставщикНаименование;
		Объект.ГрузоотправительИдентификатор = Объект.ПоставщикИдентификатор;
		Объект.ГрузоотправительНерезидент = Объект.ПоставщикНерезидент;
		Объект.ГрузоотправительКодСтраныОтправки = Объект.ПоставщикКодСтраны;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеГрузополучателя(УказыватьРеквизитыОрганизацииСП = Ложь)
	
	Если ЗначениеЗаполнено(Объект.Получатель) И Не ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		Если Не УказыватьРеквизитыОрганизацииСП Тогда 			
			Объект.Грузополучатель= Объект.Получатель;
		Иначе
			Объект.Грузополучатель = Объект.Организация;
		КонецЕсли;
		Объект.ГрузополучательНаименование = Объект.ПолучательНаименование;
		Объект.ГрузополучательИдентификатор = Объект.ПолучательИдентификатор;
		Объект.ГрузополучательНерезидент = Объект.ПолучательНерезидент;
		Объект.ГрузополучательКодСтраныОтправки = Объект.ПолучательКодСтраны;		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Доступность элементов формы

&НаСервере
Процедура УстановитьДоступностьРеквизитов()
	
	МассивИменНедоступныхЭлементов = НовыйМассивИменНедоступныхЭлементов();
	МассивИменНедоступныхКоманд = НовыйМассивМассивИменНедоступныхКоманд();
	МассивКомандПП = НовыйМассивИменНедоступныхКомандПП();
	
	ПоказыватьКомандуПриИмпорте = ?(Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз"), Истина, Ложь);
	Для каждого ЭлементМассива Из МассивКомандПП Цикл
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "Видимость", ПоказыватьКомандуПриИмпорте);
	КонецЦикла;

	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Ложь);
		УстановитьСвойствоДоступность(МассивИменНедоступныхКоманд, Истина);
		УстановитьСвойствоДоступность(МассивКомандПП, Истина);
	Иначе
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Истина);
		УстановитьСвойствоДоступность(МассивИменНедоступныхКоманд, Ложь);
		УстановитьСвойствоДоступность(МассивКомандПП, Ложь);
	КонецЕсли;
	
	МассивЭлементовИП = НовыйМассивИменНедоступныхЭлементовИП();
	
	ДоступностьИсточников = (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") 
							И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз")
							И Объект.ТипСНТ <> ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров"))
							ИЛИ 
							(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий")
							И Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") 
							И НЕ (Объект.ПоставщикРозничнаяРеализация Или Объект.ПоставщикНерезидент Или Объект.ПоставщикФизическоеЛицо));
	
	Элементы.СкладОтправки.Видимость = ДоступностьИсточников;
	
	Для каждого ЭлементМассива Из МассивЭлементовИП Цикл
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "КнопкаВыбора", ДоступностьИсточников);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "КнопкаСоздания", ДоступностьИсточников);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "РедактированиеТекста", ДоступностьИсточников);
	КонецЦикла;
	
	МассивЭлементовИППолученных = НовыйМассивИменНедоступныхЭлементовИППолученных();
	
	Для каждого ЭлементМассива Из МассивЭлементовИППолученных Цикл
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "КнопкаВыбора", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "КнопкаСоздания", Ложь);
		СНТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементМассива, "РедактированиеТекста", Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементов()
	
	Массив = Новый Массив;
	
	// Раздел A. Общий раздел
	Массив.Добавить("РегистрационныйНомерИСЭСФ");
	Массив.Добавить("Дата");
	Массив.Добавить("НомерСНТ");
	Массив.Добавить("ДатаОтгрузкиТовара");
	Массив.Добавить("ПричинаСтрокой");
	Массив.Добавить("ДатаВыпискиНаБумажномНосителе");
	Массив.Добавить("РегистрационныйНомерСвязанногоСНТ");
	Массив.Добавить("ВидОперации");
	Массив.Добавить("ЕстьЭтиловыйСпирт");
	Массив.Добавить("ЕстьПивоПивныеНапитки");
	Массив.Добавить("ЕстьНефтепродукты");
	Массив.Добавить("ЕстьТабачныеИзделия");
	Массив.Добавить("ЕстьТоварыЭК");
	Массив.Добавить("ЕстьВиноматериал");
	Массив.Добавить("ЕстьАлкоголь");
	Массив.Добавить("ЕстьБиотопливо");
	Массив.Добавить("ЕстьДругиеТоварыЦифроваяМаркировка");
	Массив.Добавить("ВидВвоза");
	Массив.Добавить("ВидВывоза");
	Массив.Добавить("ИдентификаторТерриторииСЭЗ");
	
	// Раздел B. Поставщик
	Массив.Добавить("ПоставщикИдентификатор");
	Массив.Добавить("ПоставщикНерезидент");
	Массив.Добавить("ПоставщикНаименование");
	Массив.Добавить("ПоставщикБИНСтруктурногоПодразделения");
	Массив.Добавить("ПоставщикБИНРеорганизованногоЛица");
	Массив.Добавить("ПоставщикКодСтраны");
	Массив.Добавить("КодСтраныОтправки");
	Массив.Добавить("АдресОтправки");
	Массив.Добавить("СкладОтправкиИдентификатор");
	Массив.Добавить("ПоставщикАдвокат");
	Массив.Добавить("ПоставщикНотариус");
	Массив.Добавить("ПоставщикМедиатор");
	Массив.Добавить("ПоставщикЧастныйСудебныйИсполнитель");
	Массив.Добавить("ПоставщикФизическоеЛицо");
	Массив.Добавить("ПоставщикРозничнаяРеализация");
	Массив.Добавить("ПоставщикФармацевтическийПроизводитель");
	Массив.Добавить("ПоставщикЛизингополучатель");
	Массив.Добавить("ПоставщикЛизингодатель");
	Массив.Добавить("ПоставщикДоверитель");
	Массив.Добавить("ПоставщикКомитент");
	Массив.Добавить("ПоставщикКомиссионер");
	Массив.Добавить("ПоставщикУчастникСРП");
	Массив.Добавить("ПоставщикУчастникСовместнойДеятельности");
	Массив.Добавить("ПоставщикРозничныйРеализатор");
	
	// Раздел C. Получатель
	Массив.Добавить("ПолучательИдентификатор");
	Массив.Добавить("ПолучательНаименование");
	Массив.Добавить("ПолучательНерезидент");
	Массив.Добавить("ПолучательБИНСтруктурногоПодразделения");
	Массив.Добавить("ПолучательБИНРеорганизованногоЛица");
	Массив.Добавить("ПолучательКодСтраны");
	Массив.Добавить("ПолучательКодСтраныДоставки");
	Массив.Добавить("АдресДоставки");
	Массив.Добавить("СкладДоставкиИдентификатор");
	Массив.Добавить("ПолучательАдвокат");
	Массив.Добавить("ПолучательНотариус");
	Массив.Добавить("ПолучательМедиатор");
	Массив.Добавить("ПолучательЧастныйСудебныйИсполнитель");
	Массив.Добавить("ПолучательФизическоеЛицо");
	Массив.Добавить("ПолучательРозничнаяРеализация");
	Массив.Добавить("ПолучательФармацевтическийПроизводитель");
	Массив.Добавить("ПолучательЛизингополучатель");
	Массив.Добавить("ПолучательЛизингодатель");
	Массив.Добавить("ПолучательДоверитель");
	Массив.Добавить("ПолучательКомитент");
	Массив.Добавить("ПолучательКомиссионер");
	Массив.Добавить("ПолучательУчастникСРП");
	Массив.Добавить("ПолучательУчастникСовместнойДеятельности");
	Массив.Добавить("ПолучательРозничныйРеализатор");
	
	// Раздел D. Грузоотправитель
	Массив.Добавить("ГрузоотправительИдентификатор");
	Массив.Добавить("ГрузоотправительНаименование");
	Массив.Добавить("ГрузоотправительНерезидент");
	Массив.Добавить("ГрузоотправительКодСтраныОтправки");
	Массив.Добавить("ГрузоотправительДополнительныеСведения");

	Массив.Добавить("ГрузополучательИдентификатор");
	Массив.Добавить("ГрузополучательНаименование");
	Массив.Добавить("ГрузополучательНерезидент");
	Массив.Добавить("ГрузополучательКодСтраныОтправки");
	Массив.Добавить("ГрузополучательДополнительныеСведения");
	
	// Раздел E. Перевозка
	Массив.Добавить("ПеревозчикНерезидент");
	Массив.Добавить("ПеревозчикИдентификатор");
	Массив.Добавить("АвтомобильныйТранспорт");
	Массив.Добавить("НомерТС");
	Массив.Добавить("ГосномерПрицепа");
	Массив.Добавить("ЖелезнодорожныйТранспорт");
	Массив.Добавить("НомерВагона");
	Массив.Добавить("ВоздушныйТранспорт");
	Массив.Добавить("НомерБорта");
	Массив.Добавить("МорскойТранспорт");
	Массив.Добавить("НомерСудна");
	Массив.Добавить("Трубопровод");
	Массив.Добавить("Мультимодальный");
	Массив.Добавить("ЗВСТипВоздушногоСудна");
	Массив.Добавить("ЗВСРегистрационныйНомерБорта");
	Массив.Добавить("ЗВСНомерРейса");
	Массив.Добавить("ЗВСНомерРасходногоОрдераТребованиеЗаправки");
	
	// Раздел F. Договор (контракт)
	Массив.Добавить("БезДоговора");
	Массив.Добавить("ДоговорПоставкиНомер");
	Массив.Добавить("ДоговорПоставкиДата"); 
	Массив.Добавить("ДоговорПоставкиУсловияОплаты");
	Массив.Добавить("ДоговорПоставкиУсловияПоставки");
	Массив.Добавить("ДоговорВРамкахУСДПолучательНомер");
	Массив.Добавить("ДоговорВРамкахУСДПоставщикНомер");
	Массив.Добавить("ДоговорВРамкахУСДПоставщикДата");
	Массив.Добавить("ДоговорВРамкахУСДПолучательДата");
	
	// Раздел G. Товары
	Массив.Добавить("КурсВалюты");
	Массив.Добавить("ВалютаКод");
	
	// Товары
	Массив.Добавить("ТоварыНомерСтроки");
	Массив.Добавить("ТоварыПризнакПроисхождения");
	Массив.Добавить("ТоварыТоварНаименование");
	Массив.Добавить("ТоварыКодТНВЭД");
	Массив.Добавить("ТоварыЕдиницаИзмеренияКод");
	Массив.Добавить("ТоварыКоличество");
	Массив.Добавить("ТоварыЦена");
	Массив.Добавить("ТоварыСуммаБезНалогов");
	Массив.Добавить("ТоварыСтавкаАкцизаЧисло");
	Массив.Добавить("ТоварыСуммаАкциза");
	Массив.Добавить("ТоварыОборотПоРеализации");
	Массив.Добавить("ТоварыБезНДС");
	Массив.Добавить("ТоварыСтавкаНДСЧисло");
	Массив.Добавить("ТоварыСуммаНДС");
	Массив.Добавить("ТоварыСумма");
	Массив.Добавить("ТоварыИдентификаторТовара");
	Массив.Добавить("ТоварыНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ТоварыНомерЗаявленияВРамкахТС");
	//Массив.Добавить("ТоварыИсточникПроисхождения");
	
	// Товары ВС
	Массив.Добавить("ТоварыВСНомерСтроки");
	Массив.Добавить("ТоварыВСПризнакПроисхождения");
	Массив.Добавить("ТоварыВСТоварНаименование");
	Массив.Добавить("ТоварыВСКодТНВЭД");
	Массив.Добавить("ТоварыВСЕдиницаИзмеренияКод");
	Массив.Добавить("ТоварыВСКоличество");
	Массив.Добавить("ТоварыВСЦена");
	Массив.Добавить("ТоварыВССуммаБезНалогов");
	Массив.Добавить("ТоварыВССтавкаАкцизаЧисло");
	Массив.Добавить("ТоварыВССуммаАкциза");
	Массив.Добавить("ТоварыВСБезНДС");
	Массив.Добавить("ТоварыВССумма");
	Массив.Добавить("ТоварыВССуммаНДС");
	Массив.Добавить("ТоварыВССтавкаНДСЧисло");
	Массив.Добавить("ТоварыВСИдентификаторТовара");
	Массив.Добавить("ТоварыВСНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ТоварыВСНомерЗаявленияВРамкахТС");
	Массив.Добавить("ТоварыВСДополнительныйИдентификатор");
	Массив.Добавить("ТоварыВСGTIN");
	Массив.Добавить("ТоварыВСДополнительнаяИнформация");
	// Алкоголь
	Массив.Добавить("НомерЛицензииПоставщика");
	Массив.Добавить("АдресПоставщикаПоЛицензии");
	Массив.Добавить("НомерЛицензииПолучателя");
	Массив.Добавить("АдресПолучателяПоЛицензии");
	Массив.Добавить("КодОперацииG2");
	
	// Алкоголь. Этиловый спирт
	Массив.Добавить("ЭтиловыйСпиртНомерСтроки");
	Массив.Добавить("ЭтиловыйСпиртПризнакПроисхождения");
	Массив.Добавить("ЭтиловыйСпиртПинКод");
	Массив.Добавить("ЭтиловыйСпиртТоварНаименование");
	Массив.Добавить("ЭтиловыйСпиртКодТНВЭД");
	Массив.Добавить("ЭтиловыйСпиртКоличество");
	Массив.Добавить("ЭтиловыйСпиртЦена");
	Массив.Добавить("ЭтиловыйСпиртСуммаБезНалогов");
	Массив.Добавить("ЭтиловыйСпиртСтавкаАкцизаЧисло");
	Массив.Добавить("ЭтиловыйСпиртСуммаАкциза");
	Массив.Добавить("ЭтиловыйСпиртБезНДС");
	Массив.Добавить("ЭтиловыйСпиртСтавкаНДСЧисло");
	Массив.Добавить("ЭтиловыйСпиртСумма");
	Массив.Добавить("ЭтиловыйСпиртСуммаНДС");
	Массив.Добавить("ЭтиловыйСпиртНомерЗаявленияВРамкахТС");
	Массив.Добавить("ЭтиловыйСпиртНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ЭтиловыйСпиртИдентификаторТовара");
	Массив.Добавить("ЭтиловыйСпиртGTIN");
	Массив.Добавить("ЭтиловыйСпиртДополнительнаяИнформация");
	
	// Алкоголь. Виноматериал
	Массив.Добавить("ВиноматериалНомерСтроки");
	Массив.Добавить("ВиноматериалПризнакПроисхождения");
	Массив.Добавить("ВиноматериалПинКод");
	Массив.Добавить("ВиноматериалКодТНВЭД");
	Массив.Добавить("ВиноматериалКоличествоВЛитрах");
	Массив.Добавить("ВиноматериалЦена");
	Массив.Добавить("ВиноматериалСуммаБезНалогов");
	Массив.Добавить("ВиноматериалСтавкаАкцизаЧисло");
	Массив.Добавить("ВиноматериалСуммаАкциза");
	Массив.Добавить("ВиноматериалСуммаНДС");
	Массив.Добавить("ВиноматериалИдентификаторТовара");
	Массив.Добавить("ВиноматериалНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ВиноматериалНомерЗаявленияВРамкахТС");
	Массив.Добавить("ВиноматериалСумма");
	Массив.Добавить("ВиноматериалСтавкаНДСЧисло");
	Массив.Добавить("ВиноматериалБезНДС");
	Массив.Добавить("ВиноматериалБезНДС");
	Массив.Добавить("ВиноматериалТоварНаименование");
	Массив.Добавить("ВиноматериалGTIN");
	Массив.Добавить("ВиноматериалДополнительнаяИнформация");

	Массив.Добавить("КодОперацииG4");
	
	// Алкоголь. Пиво и пивные напитки
	Массив.Добавить("ПивоПивныеНапиткиНомерСтроки");
	Массив.Добавить("ПивоПивныеНапиткиПризнакПроисхождения");
	Массив.Добавить("ПивоПивныеНапиткиТоварНаименование");
	Массив.Добавить("ПивоПивныеНапиткиВидПродукта");	
	Массив.Добавить("ПивоПивныеНапиткиКодТНВЭД");
	Массив.Добавить("ПивоПивныеНапиткиКоличество");
	Массив.Добавить("ПивоПивныеНапиткиЕмкостьТары");
	Массив.Добавить("ПивоПивныеНапиткиКоличествоУпаковок");
	Массив.Добавить("ПивоПивныеНапиткиКоличествоВУпаковке");
	Массив.Добавить("ПивоПивныеНапиткиЦена");
	Массив.Добавить("ПивоПивныеНапиткиСуммаБезНалогов");	
	Массив.Добавить("ПивоПивныеНапиткиСтавкаАкцизаЧисло");
	Массив.Добавить("ПивоПивныеНапиткиСуммаАкциза");
	Массив.Добавить("ПивоПивныеНапиткиБезНДС");
	Массив.Добавить("ПивоПивныеНапиткиСтавкаНДСЧисло");	
	Массив.Добавить("ПивоПивныеНапиткиСуммаНДС");
	Массив.Добавить("ПивоПивныеНапиткиСумма");
	Массив.Добавить("ПивоПивныеНапиткиНомерЗаявленияВРамкахТС");
	Массив.Добавить("ПивоПивныеНапиткиНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ПивоПивныеНапиткиИдентификаторТовара");
	Массив.Добавить("ПивоПивныеНапиткиGTIN");
	Массив.Добавить("ПивоПивныеНапиткиДополнительнаяИнформация");
	
	Массив.Добавить("КодОперацииG5");
	
	// Алкоголь. Алкогольная продукция кроме пива
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСтавкаАкцизаЧисло");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСуммаБезНалогов");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваЦена");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваКоличество");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваКоличествоБутылок");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваЕмкостьТары");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваВидПродукта");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваКодТНВЭД");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваТоварНаименование");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваПинКод");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваПризнакПроисхождения");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваНомерСтроки");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСуммаАкциза");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваБезНДС");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСтавкаНДСЧисло");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСуммаНДС");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваСумма");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваНомерЗаявленияВРамкахТС");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваИдентификаторТовара");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваGTIN");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваДополнительнаяИнформация");
	
	// Нефтепродукты
	Массив.Добавить("КодОперацииG6");
	Массив.Добавить("КодОГДОтправкиG6");
	Массив.Добавить("ТипПоставщикаG6");
	Массив.Добавить("КодОГДДоставкиG6");
	
	Массив.Добавить("ДанныеПоНефтепродуктамНомерСтроки");
	Массив.Добавить("ДанныеПоНефтепродуктамПризнакПроисхождения");
	Массив.Добавить("ДанныеПоНефтепродуктамПинКод");
	Массив.Добавить("ДанныеПоНефтепродуктамТоварНаименование");
	Массив.Добавить("ДанныеПоНефтепродуктамКодТНВЭД");
	Массив.Добавить("ДанныеПоНефтепродуктамКоличество");
	Массив.Добавить("ДанныеПоНефтепродуктамЦена");
	Массив.Добавить("ДанныеПоНефтепродуктамСуммаБезНалогов");
	Массив.Добавить("ДанныеПоНефтепродуктамСтавкаАкцизаЧисло");
	Массив.Добавить("ДанныеПоНефтепродуктамСуммаАкциза");
	Массив.Добавить("ДанныеПоНефтепродуктамБезНДС");
	Массив.Добавить("ДанныеПоНефтепродуктамСтавкаНДСЧисло");
	Массив.Добавить("ДанныеПоНефтепродуктамСуммаНДС");
	Массив.Добавить("ДанныеПоНефтепродуктамСумма");
	Массив.Добавить("ДанныеПоНефтепродуктамНомерЗаявленияВРамкахТС");
	Массив.Добавить("ДанныеПоНефтепродуктамНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ДанныеПоНефтепродуктамИдентификаторТовара");
	Массив.Добавить("ДанныеПоНефтепродуктамДополнительнаяИнформация");
	Массив.Добавить("ДанныеПоНефтепродуктамЕдиницаИзмеренияКод");
	
	// Биотопливо
	Массив.Добавить("КодОперацииG7");
	Массив.Добавить("КодОГДОтправкиG7");
	Массив.Добавить("ТипПоставщикаG7");
	Массив.Добавить("КодОГДДоставкиG7");
	
	Массив.Добавить("ДанныеПоБиотопливуНомерСтроки");
	Массив.Добавить("ДанныеПоБиотопливуПризнакПроисхождения");
	Массив.Добавить("ДанныеПоБиотопливуТоварНаименование");
	Массив.Добавить("ДанныеПоБиотопливуКодТНВЭД");
	Массив.Добавить("ДанныеПоБиотопливуКодТНВЭД");
	Массив.Добавить("ДанныеПоБиотопливуКоличество");
	Массив.Добавить("ДанныеПоБиотопливуЦена");
	Массив.Добавить("ДанныеПоБиотопливуСуммаБезНалогов");
	Массив.Добавить("ДанныеПоБиотопливуСтавкаАкцизаЧисло");
	Массив.Добавить("ДанныеПоБиотопливуСуммаАкциза");
	Массив.Добавить("ДанныеПоБиотопливуБезНДС");
	Массив.Добавить("ДанныеПоБиотопливуСтавкаНДСЧисло");
	Массив.Добавить("ДанныеПоБиотопливуСуммаНДС");
	Массив.Добавить("ДанныеПоБиотопливуСумма");
	Массив.Добавить("ДанныеПоБиотопливуНомерЗаявленияВРамкахТС");
	Массив.Добавить("ДанныеПоБиотопливуНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ДанныеПоБиотопливуИдентификаторТовара");
	Массив.Добавить("ДанныеПоБиотопливуGTIN");
	Массив.Добавить("ДанныеПоБиотопливуДополнительнаяИнформация");
	Массив.Добавить("ДанныеПоБиотопливуЕдиницаИзмеренияКод");
	
	// Табачная продукция
	Массив.Добавить("КодОГДДоставкиG8");
	Массив.Добавить("КодОГДОтправкиG8");
	Массив.Добавить("КодОперацииG8");
	
	Массив.Добавить("ТабачнаяПродукцияНомерСтроки");
	Массив.Добавить("ТабачнаяПродукцияПризнакПроисхождения");
	Массив.Добавить("ТабачнаяПродукцияПинКод");
	Массив.Добавить("ТабачнаяПродукцияТоварНаименование");
	Массив.Добавить("ТабачнаяПродукцияКодТНВЭД");
	Массив.Добавить("ТабачнаяПродукцияЕдиницаИзмеренияКод");
	Массив.Добавить("ТабачнаяПродукцияКоличество");
	Массив.Добавить("ТабачнаяПродукцияКоличествоПачек");
	Массив.Добавить("ТабачнаяПродукцияКоличествоВПачке");
	Массив.Добавить("ТабачнаяПродукцияЦена");
	Массив.Добавить("ТабачнаяПродукцияСуммаБезНалогов");
	Массив.Добавить("ТабачнаяПродукцияСтавкаАкцизаЧисло");
	Массив.Добавить("ТабачнаяПродукцияСуммаАкциза");
	Массив.Добавить("ТабачнаяПродукцияБезНДС");
	Массив.Добавить("ТабачнаяПродукцияСтавкаНДСЧисло");
	Массив.Добавить("ТабачнаяПродукцияСуммаНДС");
	Массив.Добавить("ТабачнаяПродукцияСумма");
	Массив.Добавить("ТабачнаяПродукцияНомерЗаявленияВРамкахТС");
	Массив.Добавить("ТабачнаяПродукцияНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ТабачнаяПродукцияИдентификаторТовара");
	Массив.Добавить("ТабачнаяПродукцияGTIN");
	Массив.Добавить("ТабачнаяПродукцияДополнительнаяИнформация");
	
	// Другая продукция
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаНомерСтроки");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаПризнакПроисхождения");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаТоварНаименование");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаКодТНВЭД");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаЕдиницаИзмеренияКод");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаКоличество");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаЦена");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСуммаБезНалогов");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСтавкаАкцизаЧисло");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСуммаАкциза");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаБезНДС");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСтавкаНДСЧисло");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСумма");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаСуммаНДС");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаНомерЗаявленияВРамкахТС");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаИдентификаторТовара");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаGTIN");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаДополнительнаяИнформация");

	// Экспортный контроль
	Массив.Добавить("ТоварыЭкспортныйКонтрольНомерСтроки");
	Массив.Добавить("ТоварыЭкспортныйКонтрольПризнакПроисхождения");
	Массив.Добавить("ТоварыЭкспортныйКонтрольТоварНаименование");
	Массив.Добавить("ТоварыЭкспортныйКонтрольНомерЛицензии");
	Массив.Добавить("ТоварыЭкспортныйКонтрольДатаВыдачиЛицензии");
	Массив.Добавить("ТоварыЭкспортныйКонтрольДатаОкончанияЛицензии");
	Массив.Добавить("ТоварыЭкспортныйКонтрольКодТНВЭД");
	Массив.Добавить("ТоварыЭкспортныйКонтрольЕдиницаИзмеренияКод");
	Массив.Добавить("ТоварыЭкспортныйКонтрольКоличество");
	Массив.Добавить("ТоварыЭкспортныйКонтрольЦена");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСуммаБезНалогов");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСтавкаАкцизаЧисло");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСуммаАкциза");
	Массив.Добавить("ТоварыЭкспортныйКонтрольБезНДС");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСтавкаНДСЧисло");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСуммаНДС");
	Массив.Добавить("ТоварыЭкспортныйКонтрольСумма");
	Массив.Добавить("ТоварыЭкспортныйКонтрольНомерЗаявленияВРамкахТС");
	Массив.Добавить("ТоварыЭкспортныйКонтрольНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ТоварыЭкспортныйКонтрольИдентификаторТовара");
	Массив.Добавить("ТоварыЭкспортныйКонтрольДополнительнаяИнформация");
	
	// Раздел К. Данные о грузе
	Массив.Добавить("НомерОттискаПломбы");
	Массив.Добавить("ФИОВодителя");
	Массив.Добавить("ИИНВодителя");
	
	// Сведения о грузе
	Массив.Добавить("СведенияОГрузеНомерСтроки");
	Массив.Добавить("СведенияОГрузеНоменклатурныйНомер");
	Массив.Добавить("СведенияОГрузеДокументы");
	Массив.Добавить("СведенияОГрузеВидУпаковки");
	Массив.Добавить("СведенияОГрузеКоличествоМест");
	Массив.Добавить("СведенияОГрузеСпособОпределенияМассы");
	Массив.Добавить("СведенияОГрузеКодГруза");
	Массив.Добавить("СведенияОГрузеКлассГруза");
	Массив.Добавить("СведенияОГрузеМассаБрутто");
	Массив.Добавить("СведенияОГрузеМассаНетто");
	
	// Погрузочно-разгрузочные операции
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииНомерСтроки");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииОперация");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииИсполнитель");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииСпособПогрузки");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииКодСпособаПогрузки");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииВремяПрибытия");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииВремяУбытия");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииПростой");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииВремяПростоя");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииНаименование");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииПодписьОтветственногоЛица");
	Массив.Добавить("ПогрузочноРазгрузочныеОперацииТранспортныеУслуги");
	
	// Прочие сведения
	Массив.Добавить("ПрочиеСведенияНомерСтроки");
	Массив.Добавить("ПрочиеСведенияРасстояниеПоГруппамВсего");
	Массив.Добавить("ПрочиеСведенияРасстояниеПоГруппам1");
	Массив.Добавить("ПрочиеСведенияРасстояниеПоГруппамГород");
	Массив.Добавить("ПрочиеСведенияРасстояниеПоГруппам2");
	Массив.Добавить("ПрочиеСведенияРасстояниеПоГруппам3");
	Массив.Добавить("ПрочиеСведенияКодЭкспедиции");
	Массив.Добавить("ПрочиеСведенияЗаТранспортныеУслугиКлиент");
	Массив.Добавить("ПрочиеСведенияЗаТранспортныеУслугиВодитель");
	Массив.Добавить("ПрочиеСведенияПоправочныйКоэффициентВодитель");
	Массив.Добавить("ПрочиеСведенияПоправочныйКоэффициентОсновнойТариф");
	Массив.Добавить("ПрочиеСведенияШтраф");
	Массив.Добавить("ПрочиеСведенияОтметки");
	
	// Таксировка
	Массив.Добавить("ТаксировкаНомерСтроки");
	Массив.Добавить("ТаксировкаРасчетСтоимости");
	Массив.Добавить("ТаксировкаНедогруз");
	Массив.Добавить("ТаксировкаЗаТонны");
	Массив.Добавить("ТаксировкаЗаСпецТранспорт");
	Массив.Добавить("ТаксировкаЗаТранспортныеУслуги");
	Массив.Добавить("ТаксировкаПогрузочноРазгрузочныеРаботы");
	Массив.Добавить("ТаксировкаСверхнормативПогруз");
	Массив.Добавить("ТаксировкаСверхнормативРазгруз");
	Массив.Добавить("ТаксировкаСкидкаПростой");
	Массив.Добавить("ТаксировкаПрочиеДоплаты");
	Массив.Добавить("ТаксировкаВсего");
	Массив.Добавить("ТаксировкаТаксировка");
	
	// Раздел L. Отпуск товара
	Массив.Добавить("ОтпускПроизвел");
	Массив.Добавить("ЭЦПЮрЛицаОтпуск");
	Массив.Добавить("ЭЦПУполномоченногоПодписыватьСНТ");
	Массив.Добавить("ФИОВыписывающегоСНТ");
	Массив.Добавить("НомерДоверенностиОтпуск");
	Массив.Добавить("ДатаДоверенностиОтпуск");
	
	// Раздел М. Приемка товара
	Массив.Добавить("ПриемПроизвел");
	Массив.Добавить("ДатаПриема");
	Массив.Добавить("ЭЦПЮрЛицаПрием");
	Массив.Добавить("ЭЦПУполномоченногоПодтверждатьСНТ1");
	Массив.Добавить("ФИОПодтвердившегоСНТ");
	Массив.Добавить("НомерДоверенностиПриемка");
	Массив.Добавить("ДатаДоверенностиПриемка");
	
	// Раздел N. Отметки ОГД
	Массив.Добавить("ДатаДоверенностиПриемка1");
	Массив.Добавить("ПунктАвтомобильногоПропуска");
	Массив.Добавить("ФИОСотрудникаОГД");
	Массив.Добавить("ДатаВремяПересеченияГосударственнойГраницы");
	Массив.Добавить("МаркаАТСФакт");
	Массив.Добавить("ГосНомерАТСФакт");
	Массив.Добавить("ФИОВодителяФакт");
	Массив.Добавить("ИИНВодителяФакт");
	
	// Раздел О. Справочные сведения
	Массив.Добавить("КодОГДПоставщика");
	Массив.Добавить("КодОГДПолучателя");
	
	// Прочее
	Массив.Добавить("Статус");
	Массив.Добавить("ДатаРегистрацииИСЭСФ");
	Массив.Добавить("РегистрационныйНомерИСМПТ");
	Массив.Добавить("Идентификатор");
	Массив.Добавить("Направление");
	Массив.Добавить("ДатаОтзыва");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементовИП()
	
	Массив = Новый Массив;
	
	Массив.Добавить("ТоварыИсточникПроисхождения");
	Массив.Добавить("ТоварыВСИсточникПроисхождения");
	Массив.Добавить("ЭтиловыйСпиртИсточникПроисхождения");
	Массив.Добавить("ВиноматериалИсточникПроисхождения");
	Массив.Добавить("ПивоПивныеНапиткиИсточникПроисхождения");
	Массив.Добавить("ДанныеПоНефтепродуктамИсточникПроисхождения");
	Массив.Добавить("ДанныеПоБиотопливуИсточникПроисхождения");
	Массив.Добавить("ТабачнаяПродукцияИсточникПроисхождения");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаИсточникПроисхождения");
	Массив.Добавить("ТоварыЭкспортныйКонтрольИсточникПроисхождения");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементовИППолученных()
	
	Массив = Новый Массив;
	
	Массив.Добавить("ТоварыИсточникПроисхожденияПолучатель");
	Массив.Добавить("ТоварыВСИсточникПроисхожденияПолучатель");
	Массив.Добавить("ЭтиловыйСпиртИсточникПроисхожденияПолучатель");
	Массив.Добавить("ВиноматериалИсточникПроисхожденияПолучатель");
	Массив.Добавить("ПивоПивныеНапиткиИсточникПроисхожденияПолучатель");
	Массив.Добавить("ДанныеПоНефтепродуктамИсточникПроисхожденияПолучатель");
	Массив.Добавить("ДанныеПоБиотопливуИсточникПроисхожденияПолучатель");
	Массив.Добавить("ТабачнаяПродукцияИсточникПроисхожденияПолучатель");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаИсточникПроисхожденияПолучатель");
	Массив.Добавить("ТоварыЭкспортныйКонтрольИсточникПроисхожденияПолучатель");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция НовыйМассивМассивИменНедоступныхКоманд()
	
	Массив = Новый Массив;
	
	// Перенос между ТЧ
	Массив.Добавить("ТоварыВСПеренести");
	Массив.Добавить("ТоварыПеренести");
	Массив.Добавить("ЭтиловыйСпиртПеренести");
	Массив.Добавить("ВиноматериалПеренестиВино");
	Массив.Добавить("ПивоПивныеНапиткиПеренестиПиво");
	Массив.Добавить("АлкогольнаяпродукцияКромеПиваПеренестиДрАлкоголь");
	Массив.Добавить("ДанныеПоНефтепродуктамПеренестиНефть");
	Массив.Добавить("ДанныеПоБиотопливуПеренестиБиотопливо");
	Массив.Добавить("ПеренестиТабачнаяПродукцияНеМаркир");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаПеренестиТоварВТаблицу");
	Массив.Добавить("ТоварыЭкспортныйКонтрольПеренестиТоварВТаблицу");

	// Заполнение по источникам происхождения
	Массив.Добавить("ТоварыЗаполнитьИсточникиПроисхожденияТовары");
	Массив.Добавить("ТоварыВСЗаполнитьИсточникиПроисхожденияТоварыВС");
	
	Возврат Массив;                  
	
КонецФункции

&НаСервере
Функция НовыйМассивИменНедоступныхКомандПП() // Команды заполнение признака происхождения для импорта
	
	Массив = Новый Массив;
	 
	Массив.Добавить("ЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ТоварыЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ЭтиловыйСпиртЗаполнитьПризнакПроисхожденияЭтилСп");
	Массив.Добавить("ВиноматериалЗаполнитьПризнакПроисхожденияВино");
	Массив.Добавить("ПивоПивныеНапиткиЗаполнитьПризнакПроисхожденияПиво");
	Массив.Добавить("АлкогольнаяПродукцияКромеПиваЗаполнитьПризнакПроисхожденияДрАлкоголь");
	Массив.Добавить("ДанныеПоНефтепродуктамЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ДанныеПоБиотопливуЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ТабачнаяПродукцияЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ДругиеТоварыЦифроваяМаркировкаЗаполнитьПризнакПроисхождения");
	Массив.Добавить("ТоварыЭкспортныйКонтрольЗаполнитьПризнакПроисхождения");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПолучитьКодЕИ(ЕдиницаИзмерения, Товар)
	Возврат ВССерверПереопределяемый.ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения, Товар);
КонецФункции

&НаСервере
Процедура УстановитьСвойствоТолькоПросмотр(Знач МассивИменЭлементовФормы, Знач ТолькоПросмотр)
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотр;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДоступность(Знач МассивИменЭлементовФормы, Знач Доступность)
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизиты(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Ложь);
	Иначе
		ТекстВопроса = НСтр("ru = 'Разрешить редактирование реквизитов документа?'");
		РедактироватьНедоступныеРеквизитыЗавершение = Новый ОписаниеОповещения("РедактироватьНедоступныеРеквизитыЗавершение", ЭтаФорма);
		ПоказатьВопрос(РедактироватьНедоступныеРеквизитыЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьНедоступныеРеквизитыНаСервере(Знач НовоеЗначениеПометки)
	
	Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка = НовоеЗначениеПометки;
	УправлениеФормой();
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Ошибки.ТекущиеДанные;
	
	ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекущиеДанные.ТекстИБ,,ТекущиеДанные.ПолеИБ);
	
	// Активировать страницу на которой произошла ошибка.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#Иначе 
		//Для остальных в случае если поле сообщения пустое.
		Если ПустаяСтрока(ТекущиеДанные.ПолеИБ) И ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СостояниеСНТ

&НаСервере
Процедура УстановитьСостояниеСНТ(Объект)
	
	Объект.Состояние = СНТСервер.СостояниеСНТ(Объект);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	//Если ОбъектНаходитсяВОчередиОтправки Тогда
	
	//ПредставлениеСостояния = НСтр("ru = 'Документ помещен в очередь отправки...'");
	
	//	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
	
	Если Объект.Направление = Перечисления.НаправленияСНТ.Исходящий
		И Объект.Состояние = Перечисления.СостоянияСНТ.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС ЭСФ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияСНТ.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияСНТ.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияСНТ.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСНТ.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСНТ.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ИС ЭСФ, т.к. содержит ошибки'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСНТ.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияСНТ.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%, по причине: ""%Причина%""'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Причина%", СокрЛП(Объект.Причина));
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ ожидает идентификации товаров на ВС'");
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияСНТ.Сформирован
		И Объект.ПредоставленВБумажномВиде И Объект.Проведен Тогда
		ПредставлениеСостояния = НСтр("ru = 'Документ выписан в бумажном виде. Ожидает отправки на сервер ИС ЭСФ'");
	Иначе
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = СНТКлиентСервер.ЦветСостоянияСНТ(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий")
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.Сформирован") Тогда
		
		ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, НСтр("ru = 'Отправить получателю?'"), РежимДиалогаВопрос.ОКОтмена);

	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС") Тогда	
		
		ПолучитьРезультатИСЭСФЗаписьФормы = Новый ОписаниеОповещения("ПолучитьИдентификаторыТоваровЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ПолучитьРезультатИСЭСФЗаписьФормы, НСтр("ru = 'Получить идентификаторы товаров виртуального склада из ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыТоваровЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ПолучитьРезультатИСЭСФЗавершение = Новый ОписаниеОповещения("ПолучитьИдентификаторыТоваровЗавершение", ЭтаФорма);
			СНТКлиент.ВопросЗаписатьОбъектПередВыполнением(ПолучитьРезультатИСЭСФЗавершение);
		Иначе
			ПолучитьИдентификаторыТоваровЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторыТоваровЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если СНТКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивСНТ = Новый Массив;
			МассивСНТ.Добавить(Объект.Ссылка);
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ЗапускатьФоновоеЗадание", Ложь);
			СНТКлиент.ПолучитьИдентификаторыТоваровСНТИзВС(МассивСНТ, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение,, "Записать");
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивСНТ = Новый Массив;
			МассивСНТ.Добавить(Объект.Ссылка);
			СНТКлиент.ОтправитьИсходящиеСНТ(МассивСНТ, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныйСНТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
	Отбор = Новый Структура;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий")
		И Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") //Обычный возврат поставщику
		И НЕ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") //Не импорт
		И НЕ Объект.ПоставщикРозничнаяРеализация Тогда // Не возврат по рознице
		
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий"));
		Отбор.Вставить("Получатель", Объект.Организация);
		Отбор.Вставить("Поставщик", Объект.Контрагент);
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация") 
		И Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров")
		И Объект.ПоставщикРозничнаяРеализация Тогда //Возврат по рознице
		
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий"));
		Отбор.Вставить("ПолучательРозничнаяРеализация", Истина);
		Отбор.Вставить("Поставщик", Объект.Получатель);
		Отбор.Вставить("ТипСНТ", ПредопределенноеЗначение("Перечисление.ТипыСНТ.Первичная"));
		
	ИначеЕсли Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") 
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") Тогда //Возврат по импорту
		
		Отбор.Вставить("Направление", ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий"));
		Отбор.Вставить("Получатель", Объект.Организация);
		
	КонецЕсли;
	
	Если Отбор.Количество() <> 0 Тогда
		
		ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ.СНТ.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСтрокойПриИзменении(Элемент)
	
	Если ПричинаСтрокой = "0" Тогда
		Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПростойСистемы");
	ИначеЕсли ПричинаСтрокой = "1" Тогда
		Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.БлокированиеДоступа");
	ИначеЕсли ПричинаСтрокой = "2" Тогда
		Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ОтсутствиеТребованиеПоВыписке");
	Иначе
		Объект.ПричинаВыпискиНаБумажномНосителе = ПредопределенноеЗначение("Перечисление.ПричиныВыпискиСФНаБумаге.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЭСФНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивПараметр = Новый Массив;
	МассивПараметр.Добавить(ЭтаФорма.Параметры.Ключ);
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПредставлениеЭСФ) И ТипЗнч(ПредставлениеЭСФ)= Тип("ДокументСсылка.ЭСФ") Тогда 
		ПоказатьЗначение(,ПредставлениеЭСФ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательРозничнаяРеализацияПриИзменении(Элемент)
	
	Если Объект.ПолучательРозничнаяРеализация Тогда
		Объект.ПолучательНаименование = "Розничная реализация";
	Иначе 	
		Объект.ПолучательНаименование = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСвязанныйСНТ(ВыбранноеЗначение)
	Возврат СНТСервер.ПроверитьНаличиеСвязанногоСНТ(ВыбранноеЗначение, Истина);
КонецФункции

&НаСервере
Процедура СформироватьСписокВыбораПризнакаПроисхождения()
	
	ПредставленияПризнаков = Новый Массив();
	ПредставленияПризнаков.Добавить(НСтр("ru='1 - Товар, включенный в Перечень, ввезенный на территорию РК'"));
	ПредставленияПризнаков.Добавить(НСтр("ru='2 - Товар, не включенный в Перечень, ввезенный на территорию РК'"));
	ПредставленияПризнаков.Добавить(НСтр("ru='3 - Товар, включенный в Перечень, произведенный на территории РК'"));
	ПредставленияПризнаков.Добавить(НСтр("ru='4 - Товар, не включенный в Перечень, произведенный на территории РК'"));
	ПредставленияПризнаков.Добавить(НСтр("ru='5 - Товар, не относящийся к Признакам «1», «2», «3», «4»'"));
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Элементы.ТоварыПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ТоварыВСПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ЭтиловыйСпиртПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ВиноматериалПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ПивоПивныеНапиткиПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.АлкогольнаяпродукцияКромеПиваПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ДанныеПоБиотопливуПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ДанныеПоНефтепродуктамПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ТабачнаяПродукцияПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ДругиеТоварыЦифроваяМаркировкаПризнакПроисхождения);
	МассивТЧ.Добавить(Элементы.ТоварыЭкспортныйКонтрольПризнакПроисхождения);
	
	Для каждого ТЧ Из МассивТЧ Цикл
		ТЧ.РежимВыбораИзСписка = Истина;
		ТЧ.СписокВыбора.Очистить();
		ТЧ.СписокВыбора.Добавить("1", ПредставленияПризнаков[0]);
		ТЧ.СписокВыбора.Добавить("2", ПредставленияПризнаков[1]);
		ТЧ.СписокВыбора.Добавить("3", ПредставленияПризнаков[2]);
		ТЧ.СписокВыбора.Добавить("4", ПредставленияПризнаков[3]);
		ТЧ.СписокВыбора.Добавить("5", ПредставленияПризнаков[4]);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСписокТоваровНеПодлежащихУчетуНаВС()
	
	Если Параметры.Ключ.Пустая() ИЛИ НЕ Объект.Проведен 
		И (НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.Ввоз 
			ИЛИ (НЕ Объект.Направление = Перечисления.НаправленияСНТ.Входящий И НЕ Объект.ВидОперации = Перечисления.ВидыОперацийСНТ.Реализация))
		И НЕ Объект.Статус = Перечисления.СтатусыСНТ.Подтвержден Тогда
		ЕстьОстаткиТоваровНеВС = Ложь;
		Возврат;
	КонецЕсли;
	
	ТаблицаОстатковТоваровВСНеПодлежащихУчету = ПолучитьТаблицуТоваровНеВС();
		
	Если ТаблицаОстатковТоваровВСНеПодлежащихУчету.Количество() = 0 Тогда
		ЕстьОстаткиТоваровНеВС = Ложь;
		Возврат;
	Иначе
		ЕстьОстаткиТоваровНеВС = Истина;
		ПредставлениеТоварыНеПодлежащиеВС = НСтр("ru = 'Обнаружены товары, не подлежащие учету на ВС. Для списания товаров с ВС необходимо ввести ЭДВС!'");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуТоваровНеВС()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Склад", Объект.СкладПолучатель);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТекущийСНТ", Объект.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СНТТоварыВС.Товар КАК Номенклатура,
	               |	ЕстьNULL(СопоставленныеИсточникиПроисхождения.ИсточникПроисхожденияПослеСопоставления, СНТТоварыВС.ИсточникПроисхождения) КАК ИсточникПроисхождения
	               |ПОМЕСТИТЬ ТоварыВССНТ
	               |ИЗ
	               |	Документ.СНТ.ТоварыВС КАК СНТТоварыВС
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставленныеИсточникиПроисхождения КАК СопоставленныеИсточникиПроисхождения
                   |		ПО СНТТоварыВС.ИсточникПроисхождения = СопоставленныеИсточникиПроисхождения.ИсточникПроисхожденияДоСопоставления
 			       |ГДЕ 
				   |	СНТТоварыВС.ССылка = &ТекущийСНТ
				   |	И (СНТТоварыВС.ССылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Ввоз)
				   |	ИЛИ (СНТТоварыВС.ССылка.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияСНТ.Входящий)
				   |			И СНТТоварыВС.ССылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСНТ.Реализация)))
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТоварыНаВиртуальныхСкладахОстатки.Номенклатура,
	               |	ТоварыНаВиртуальныхСкладахОстатки.ЕдиницаИзмерения,
	               |	ТоварыНаВиртуальныхСкладахОстатки.ИсточникПроисхождения,
	               |	ЕСТЬNULL(СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ) КАК ПризнакУчетаНаВиртуальномСкладеГСВС,
	               |	СправочникИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе КАК ПризнакУчетаНаВиртуальномСкладе,
	               |	ТоварыНаВиртуальныхСкладахОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыНаВиртуальныхСкладах.Остатки(
	               |			,
	               |			Организация = &Организация
	               |				И Склад = &Склад
	               |				И (Номенклатура, ИсточникПроисхождения) В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						ТоварыВС.Номенклатура,
	               |						ТоварыВС.ИсточникПроисхождения
	               |					ИЗ
	               |						ТоварыВССНТ КАК ТоварыВС)) КАК ТоварыНаВиртуальныхСкладахОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВиртуальногоСкладаВРезерве.Остатки(
	               |				,
	               |				Организация = &Организация
	               |					И Склад = &Склад
	               |					И ДокументПартии = &ТекущийСнт
	               |					И (Номенклатура, ИсточникПроисхождения) В
	               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |							ТоварыВС.Номенклатура,
	               |							ТоварыВС.ИсточникПроисхождения
	               |						ИЗ
	               |							ТоварыВССНТ КАК ТоварыВС)) КАК ТоварыВиртуальногоСкладаВРезерве
	               |		ПО (ТоварыНаВиртуальныхСкладахОстатки.Организация = ТоварыНаВиртуальныхСкладахОстатки.Организация)
	               |			И ТоварыНаВиртуальныхСкладахОстатки.Склад = ТоварыВиртуальногоСкладаВРезерве.Склад
	               |			И ТоварыНаВиртуальныхСкладахОстатки.Номенклатура = ТоварыВиртуальногоСкладаВРезерве.Номенклатура
	               |			И ТоварыНаВиртуальныхСкладахОстатки.ИсточникПроисхождения = ТоварыВиртуальногоСкладаВРезерве.ИсточникПроисхождения
	               |			И ТоварыНаВиртуальныхСкладахОстатки.Организация = ТоварыВиртуальногоСкладаВРезерве.Организация
	               |			И ТоварыНаВиртуальныхСкладахОстатки.ДокументПартии = ТоварыВиртуальногоСкладаВРезерве.ДокументПартии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиПроисхождения КАК СправочникИсточникиПроисхождения
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОНоменклатуреГСВС.СрезПоследних КАК СведенияОНоменклатуреГСВССрезПоследних
	               |			ПО СправочникИсточникиПроисхождения.ГСВС.Ссылка = СведенияОНоменклатуреГСВССрезПоследних.НоменклатураГСВС.Ссылка
	               |		ПО ТоварыНаВиртуальныхСкладахОстатки.ИсточникПроисхождения = СправочникИсточникиПроисхождения.Ссылка
	               |			И ТоварыНаВиртуальныхСкладахОстатки.Номенклатура = СправочникИсточникиПроисхождения.Номенклатура
	               |ГДЕ
	               |	ЕСТЬNULL(ТоварыНаВиртуальныхСкладахОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВиртуальногоСкладаВРезерве.КоличествоОстаток, 0) > 0
	               |	И НЕ ЕСТЬNULL(СведенияОНоменклатуреГСВССрезПоследних.ПризнакУчетаНаВиртуальномСкладе, ЛОЖЬ)
	               |	И СправочникИсточникиПроисхождения.ПризнакУчетаНаВиртуальномСкладе";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаКлиенте
Процедура СкладПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделениеПолучатель) Тогда 
		ОтборОрганизация = Новый Массив;
		ОтборОрганизация.Добавить(Объект.Получатель);
		ОтборОрганизация.Добавить(Объект.СтруктурноеПодразделениеПолучатель);
	Иначе 
		ОтборОрганизация = Объект.Получатель;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз")Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		//СНТ по реализации
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация")
			И (Объект.ТипСНТ <> ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров")) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", ОтборОрганизация);
			
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСкладыКонтрагента.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		//СНТ на возврат: ЮЛ - ЮЛ
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация")
			И (Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") И НЕ (Объект.ПоставщикРозничнаяРеализация Или Объект.ПоставщикНерезидент Или Объект.ПоставщикФизическоеЛицо)) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Контрагент", ОтборОрганизация);
			
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);;
			
			ОткрытьФорму("Справочник.ВиртуальныеСкладыКонтрагента.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПустаяСсылка")
			ИЛИ Объект.ТипСНТ = ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами") Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	Иначе
		
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормыВыбора = Новый Структура("РежимВыбора", Истина);
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз")Тогда
			
			Если ЗначениеЗаполнено(Объект.СтруктурноеПодразделение) Тогда
				ОтборОрганизация = Новый Массив;
				ОтборОрганизация.Добавить(Объект.Поставщик);
				ОтборОрганизация.Добавить(Объект.СтруктурноеПодразделение);
			Иначе 
				ОтборОрганизация = Объект.Поставщик;
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами") Тогда 
			
			ОтправительЭтоПодразделение = ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций();
			Если ОтправительЭтоПодразделение Тогда
				УказыватьРеквизитыГоловнойОрганизации 	= ЗначениеРеквизитаОбъекта(Объект.Поставщик, "УказыватьРеквизитыГоловнойОрганизации") 
			Иначе
				УказыватьРеквизитыГоловнойОрганизации 	= Ложь;
			КонецЕсли;
			
			Если ОтправительЭтоПодразделение И УказыватьРеквизитыГоловнойОрганизации Тогда 
				ОтборОрганизация = Объект.Организация;
			ИначеЕсли ОтправительЭтоПодразделение И НЕ УказыватьРеквизитыГоловнойОрганизации Тогда 
				ОтборОрганизация = Объект.Поставщик;
			Иначе
				ОтборОрганизация = Новый Массив;
				ОтборОрганизация.Добавить(Объект.Поставщик);
				ОтборОрганизация.Добавить(Объект.СтруктурноеПодразделение);
			КонецЕсли;
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", ОтборОрганизация);
			ПараметрыФормыВыбора.Вставить("Отбор", Отбор);
			
			ОткрытьФорму("Справочник.ВиртуальныеСклады.ФормаВыбора", ПараметрыФормыВыбора, Элемент);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСвязанныйЭСФДляНовойСНТ()
	Возврат СНТСерверПереопределяемый.ПолучитьСсылкуНаЭСФПриВводеНовогоСНТ(Объект.ДокументОснование);
КонецФункции

&НаКлиенте
Процедура СтавкаАкцизаЧислоПриИзменении(Элемент)

	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		ИмяТЧ = ЭтаФорма.ТекущийЭлемент.Имя;
		
		СтрокаТабличнойЧасти = Элементы[ИмяТЧ].ТекущиеДанные;
		
		ТЧАкцизПриИзменении(Элемент);
		
		ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.СтавкаАкцизаЧислоПриИзменении(СтрокаТабличнойЧасти);
		
		Если ДанныеСтрокиАкцизы <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ДругиеТоварыЦифроваяМаркировкаКоличествоПриИзменении(Элемент) //G9
	
	СтрокаТабличнойЧасти = Элементы.ДругиеТоварыЦифроваяМаркировка.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДругиеТоварыЦифроваяМаркировка.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеТоварыЦифроваяМаркировкаЦенаПриИзменении(Элемент) //G9
	
	СтрокаТабличнойЧасти = Элементы.ДругиеТоварыЦифроваяМаркировка.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ДругиеТоварыЦифроваяМаркировка.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольКоличествоПриИзменении(Элемент) //G10
	
	СтрокаТабличнойЧасти = Элементы.ТоварыЭкспортныйКонтроль.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТоварыЭкспортныйКонтроль.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольЦенаПриИзменении(Элемент) //G10
	
	СтрокаТабличнойЧасти = Элементы.ТоварыЭкспортныйКонтроль.ТекущиеДанные;
	НаименованиеКоличества = "Количество";
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества, Элементы.ТоварыЭкспортныйКонтроль.Имя);
	
	ДанныеСтрокиАкцизы = СНТКлиентПереопределяемый.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НаименованиеКоличества);
	Если ДанныеСтрокиАкцизы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиАкцизы);
	КонецЕсли;

КонецПроцедуры

#Область ПризнакПроисхождения

&НаСервере
Функция ПроверитьНаличиеПризнакаПроисхождения(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка,
		|	Товары.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Товар КАК Товар,
		|	Товары.КодТНВЭД КАК КодТНВЭД,
		|	""ТоварыВС"" КАК ИмяТЧ
		|ПОМЕСТИТЬ вт_ТоварыСНТ
		|ИЗ
		|	Документ.СНТ.ТоварыВС КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ЭтиловыйСпирт""
		|ИЗ
		|	Документ.СНТ.ЭтиловыйСпирт КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""Виноматериал""
		|ИЗ
		|	Документ.СНТ.Виноматериал КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ПивоПивныеНапитки""
		|ИЗ
		|	Документ.СНТ.ПивоПивныеНапитки КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""АлкогольнаяПродукцияКромеПива""
		|ИЗ
		|	Документ.СНТ.АлкогольнаяПродукцияКромеПива КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ДанныеПоНефтепродуктам""
		|ИЗ
		|	Документ.СНТ.ДанныеПоНефтепродуктам КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ДанныеПоБиотопливу""
		|ИЗ
		|	Документ.СНТ.ДанныеПоБиотопливу КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ТабачнаяПродукция""
		|ИЗ
		|	Документ.СНТ.ТабачнаяПродукция КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ДругиеТоварыЦифроваяМаркировка""
		|ИЗ
		|	Документ.СНТ.ДругиеТоварыЦифроваяМаркировка КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.ПризнакПроисхождения,
		|	Товары.НомерСтроки,
		|	Товары.Товар,
		|	Товары.КодТНВЭД,
		|	""ТоварыЭкспортныйКонтроль""
		|ИЗ
		|	Документ.СНТ.ТоварыЭкспортныйКонтроль КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТоварыСНТ.Ссылка КАК Ссылка,
		|	вт_ТоварыСНТ.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_ТоварыСНТ.НомерСтроки КАК НомерСтроки,
		|	вт_ТоварыСНТ.Товар КАК Товар,
		|	вт_ТоварыСНТ.КодТНВЭД КАК КодТНВЭД,
		|	вт_ТоварыСНТ.ИмяТЧ КАК ИмяТЧ
		|ИЗ
		|	вт_ТоварыСНТ КАК вт_ТоварыСНТ
		|ГДЕ
		|	вт_ТоварыСНТ.ПризнакПроисхождения = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	вт_ТоварыСНТ.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТоварыСНТ.Ссылка КАК Ссылка,
		|	вт_ТоварыСНТ.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_ТоварыСНТ.НомерСтроки КАК НомерСтроки,
		|	вт_ТоварыСНТ.Товар КАК Товар,
		|	вт_ТоварыСНТ.КодТНВЭД КАК КодТНВЭД,
		|	вт_ТоварыСНТ.ИмяТЧ КАК ИмяТЧ
		|ИЗ
		|	вт_ТоварыСНТ КАК вт_ТоварыСНТ
		|ГДЕ
		|	вт_ТоварыСНТ.ПризнакПроисхождения <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_ТоварыСНТ.Ссылка КАК Ссылка,
		|	вт_ТоварыСНТ.ПризнакПроисхождения КАК ПризнакПроисхождения,
		|	вт_ТоварыСНТ.НомерСтроки КАК НомерСтроки,
		|	вт_ТоварыСНТ.Товар КАК Товар,
		|	вт_ТоварыСНТ.КодТНВЭД КАК КодТНВЭД,
		|	вт_ТоварыСНТ.ИмяТЧ КАК ИмяТЧ
		|ИЗ
		|	вт_ТоварыСНТ КАК вт_ТоварыСНТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	Результат = Запрос.ВыполнитьПакет();
	Пакеты = Результат.Количество();
	
	ДанныеДляЗаполненияПП = Новый Структура;
	ДанныеДляЗаполненияПП.Вставить("ТоварыНЕЗаполненымПП", Результат[Пакеты -3].Выгрузить());
	ДанныеДляЗаполненияПП.Вставить("ТоварыЗаполненымПП", Результат[Пакеты -2].Выгрузить());
	ДанныеДляЗаполненияПП.Вставить("ТоварыВсе", Результат[Пакеты -1].Выгрузить());
	
	ДанныеДляЗаполненияППВременноеХранилище = ПоместитьВоВременноеХранилище(ДанныеДляЗаполненияПП, УникальныйИдентификатор);
	
	КоличествоСтрокВПакетеИХранилище = Новый Структура;
	КоличествоСтрокВПакетеИХранилище.Вставить("Хранилище", ДанныеДляЗаполненияППВременноеХранилище);
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыНЕЗаполненымПП", ДанныеДляЗаполненияПП.ТоварыНЕЗаполненымПП.Количество());
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыЗаполненымПП", ДанныеДляЗаполненияПП.ТоварыЗаполненымПП.Количество());
	КоличествоСтрокВПакетеИХранилище.Вставить("КоличествоСтрокТоварыВсе", ДанныеДляЗаполненияПП.ТоварыВсе.Количество());

	Возврат КоличествоСтрокВПакетеИХранилище;

КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДляЗаполненияПП()

	ДанныеДляЗаполненияПП = ПроверитьНаличиеПризнакаПроисхождения(Объект.Ссылка);
	
	Если ДанныеДляЗаполненияПП.КоличествоСтрокТоварыЗаполненымПП > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Имеются товары с заполненным признаком происхождения. Желаете очистить заполненные признаки происхождения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриЗаполненииПП", ЭтотОбъект, ДанныеДляЗаполненияПП.Хранилище);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДанныеДляЗаполненияПП.Хранилище, Истина);
	КонецЕсли;

КонецПроцедуры

// Команда для ТЧ ТоврыВС, G6-G10
&НаКлиенте
Процедура ЗаполнитьПризнакПроисхождения(Команда)
	
	ТекНаимГруппы = Элементы.ГруппаТоварыСтраницы.ТекущаяСтраница.Имя;
	ТекущиеДанные = Элементы[ОпределитьТЧПоГруппе(ТекНаимГруппы)].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПП();
	Иначе
		ПолучитьДанныеДляЗаполненияПП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧМодифицированаЗаполнениеПП()
	
	ТекстВопроса = НСтр("ru = 'Нельзя заполнить ""Признак происхождения товара"" не записанного документа. Записать документ?'");
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписьПриЗаполненииПП", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписьПриЗаполненииПП(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ИначеЕсли Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ПолучитьДанныеДляЗаполненияПП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриЗаполненииПП(Результат, ДанныеХранилища) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДанныеХранилища, Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДанныеХранилища);
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакПроисхожденияДляСтрокТЧ(ДанныеХранилища, ЗаполнитьВсе = Ложь)
	
	Данные = ПолучитьИзВременногоХранилища(ДанныеХранилища);
	
	Если Данные <> Неопределено Тогда
		
		ТаблицаТоварыВсе = Данные.ТоварыВсе;
		ТаблицаТоварыНЕЗаполненымПП = Данные.ТоварыНЕЗаполненымПП;
		
		Если ЗаполнитьВсе Тогда
			СНТСервер.ЗаполнитьПустыеПризнакиПроисхождения(ТаблицаТоварыВсе, Объект);
		Иначе
			СНТСервер.ЗаполнитьПустыеПризнакиПроисхождения(ТаблицаТоварыНЕЗаполненымПП, Объект);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияЭтилСп(Команда) //G2
	
	ТекущиеДанные = Элементы.ЭтиловыйСпирт.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПП();
	Иначе
		ПолучитьДанныеДляЗаполненияПП();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияВино(Команда) //G3
	
	ТекущиеДанные = Элементы.Виноматериал.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПП();
	Иначе
		ПолучитьДанныеДляЗаполненияПП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияПиво(Команда) //G4
	
	ТекущиеДанные = Элементы.ПивоПивныеНапитки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПП();
	Иначе
		ПолучитьДанныеДляЗаполненияПП();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПризнакПроисхожденияДрАлкоголь(Команда) //G5
	
	ТекущиеДанные = Элементы.АлкогольнаяПродукцияКромеПива.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет данных для заполнения.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.Параметры.Ключ) ИЛИ ЭтаФорма.Модифицированность Тогда
		ТЧМодифицированаЗаполнениеПП();
	Иначе
		ПолучитьДанныеДляЗаполненияПП();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОчиститьЗаполненныеРеквизиты()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Ввоз") Тогда
		Объект.ВидПеремещения = Неопределено;
		Объект.ВидВывоза = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Вывоз") Тогда
		Объект.ВидВвоза = Неопределено;
		Объект.ВидПеремещения = Неопределено;
		Объект.ИдентификаторТерриторииСЭЗ = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Перемещение") Тогда
		Объект.ВидВвоза = Неопределено;
		Объект.ВидВывоза = Неопределено;
		Объект.ИдентификаторТерриторииСЭЗ = Неопределено;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация") Тогда
		Объект.ВидВвоза = Неопределено;
		Объект.ВидПеремещения = Неопределено;
		Объект.ВидВывоза = Неопределено;
		Объект.ИдентификаторТерриторииСЭЗ = Неопределено;
		
	КонецЕсли;

		
КонецПроцедуры

&НаКлиенте
Процедура ПредоставленВБумажномВидеПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПризнакУчетаНаВСИзИсточникаПроисхождения(ИсточникПроисхождения)
	
	Возврат ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ИсточникПроисхождения, "ПризнакУчетаНаВиртуальномСкладе");
	
КонецФункции


#Область СозданиеЭДВСКонвертацияМеждуРазнымиЕИ

&НаКлиенте
Процедура ПредставлениеЭДВСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//++ НЕ ЭСФ
	Если СписокЭДВС.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;	
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокЭДВС.ВыгрузитьЗначения())));
		
		ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаСписка", ПараметрыФормы,ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СписокЭДВС.Количество() = 1 Тогда	
		
		ПоказатьЗначение(,СписокЭДВС[0].Значение);
		
	Иначе
		
		ОформитьКонвертациюЕИЗавершение = Новый ОписаниеОповещения("ОформитьКонвертациюЕИЗавершение", ЭтаФорма);
		
		Если (НЕ Объект.Проведен) И (НЕ Объект.ПометкаУдаления) Тогда
			
			ТекстВопроса = НСтр("ru='ЭДВС с видом ""Детализация"" нельзя вводить на основании не проведенного документа! Провести документ?'");
			ПослеЗакрытияВопросаВводаНаОсновании = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВводаНаОсновании", ЭтаФорма);
			ПоказатьВопрос(ПослеЗакрытияВопросаВводаНаОсновании, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
			
		ИначеЕсли ЭтотОбъект.Модифицированность Тогда 
			ПослеЗакрытияВопросаВводаНаОсновании(КодВозвратаДиалога.Да, Параметры);
		Иначе
			ОформитьКонвертациюЕИЗавершение(КодВозвратаДиалога.ОК, Неопределено);

		КонецЕсли;
		

	КонецЕсли;	
	//-- НЕ ЭСФ	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВводаНаОсновании(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		Попытка
			// выполняем проведение документа
			ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение))
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Объект.Ссылка, , "Объект"); 
			Возврат;
		КонецПопытки;
				
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ОформитьКонвертациюЕИЗавершение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ ЭСФ

&НаКлиенте
Процедура ОформитьКонвертациюЕИЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
		
			ЗначенияЗаполнения = Новый Структура();
			ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
			ЗначенияЗаполнения.Вставить("ЭтоОформлениеКонвертацииЕИ", Истина);
			
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
			ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеЭДВС(Форма)
	СписокЭДВС = Форма.СписокЭДВС;
	Если СписокЭДВС.Количество() = 0 Тогда
		Форма.ПредставлениеЭДВС 					= НСтр("ru = 'Требуется оформить конвертацию между разными ед. изм.'");
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	ИначеЕсли СписокЭДВС.Количество() > 1 Тогда
		ТекстПредставления 							= НСтр("ru='Всего ЭДВС: (%1)'");
		ТекстПредставления 							= ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредставления, СписокЭДВС.Количество());
		Форма.ПредставлениеЭДВС 					= ТекстПредставления;
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе 
		ТекстПредставления 							= СписокЭДВС[0].Значение;
		Форма.ПредставлениеЭДВС 					= ТекстПредставления;
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеКоэффициентаПересчета(ИмяТабличнойЧасти = "",  ЕстьКоэффициентПересчета = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СНТТовары.НомерСтроки,
	|	СНТТовары.КоэффициентПересчета,
	|	СНТТовары.ЕдиницаИзмерения,
	|	СНТТовары.ЕдиницаИзмеренияХраненияОстатков
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК СНТТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНТТовары.НомерСтроки,
	|	СНТТовары.КоэффициентПересчета
	|ИЗ
	|	вт_Товары КАК СНТТовары
	|ГДЕ
	|	(СНТТовары.КоэффициентПересчета <> 0
	|	И СНТТовары.КоэффициентПересчета <> 1)
	|	ИЛИ
	|	(СНТТовары.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения
	|	И СНТТовары.ЕдиницаИзмеренияХраненияОстатков <> &ПустаяЕдиницаИзмерения
	|	И СНТТовары.ЕдиницаИзмерения <> СНТТовары.ЕдиницаИзмеренияХраненияОстатков)
	|";
	
	Запрос.УстановитьПараметр("Товары", Объект[ИмяТабличнойЧасти].Выгрузить());
	
	ЕдиницаИзмеренияПустаяСсылка = ЭСФСерверПереопределяемый.ПолучитьПустуюСсылкуЕдиницыИзмерения();
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ЕдиницаИзмеренияПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьКоэффициентПересчета = Не РезультатЗапроса.Пустой();
	
	Если ЕстьКоэффициентПересчета И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата) Тогда
		СписокЭДВС.ЗагрузитьЗначения(ПолучитьМассивЭДВСКонвертацийЕИ(Объект.Ссылка));
		СформироватьПредставлениеЭДВС(ЭтаФорма);
	Иначе
		СписокЭДВС.Очистить();
	КонецЕсли;	
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеЭДВС", "Видимость", Объект.Направление = Перечисления.НаправленияСНТ.Входящий И ЕстьКоэффициентПересчета И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата));	
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ПолучитьМассивЭДВСКонвертацийЕИ(ДокументЭСФ)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВС.Ссылка Как ЭДВС
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.ДокументОснование = &ДокументЭСФ
	|	И ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Детализация)
	|	И ЭлектронныйДокументВС.ВидДетализации = ЗНАЧЕНИЕ(Перечисление.ВидДетализации.КонвертацияМеждуЕИ)";
	
	Запрос.УстановитьПараметр("ДокументЭСФ",ДокументЭСФ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭДВС");
КонецФункции	

//-- НЕ ЭСФ

&НаКлиенте
Процедура ТоварыВСКоэффициентПересчетаПриИзменении(Элемент)
	//++ НЕ ЭСФ
	ПроверитьНаличиеКоэффициентаПересчета("ТоварыВС");
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	//++ НЕ ЭСФ
	ПроверитьНаличиеКоэффициентаПересчета("ТоварыВС");
	//-- НЕ ЭСФ	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЭтиловыйСпиртЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	//++ НЕ ЭСФ
	ПроверитьНаличиеКоэффициентаПересчета("ЭтиловыйСпирт");
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртКоэффициентПересчетаПриИзменении(Элемент)
	//++ НЕ ЭСФ
	ПроверитьНаличиеКоэффициентаПересчета("ЭтиловыйСпирт");
	//-- НЕ ЭСФ	
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("Виноматериал");
	
КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("Виноматериал");
	
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ПивоПивныеНапитки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ПивоПивныеНапитки");
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("АлкогольнаяПродукцияКромеПива");
	
КонецПроцедуры

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("АлкогольнаяПродукцияКромеПива");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДанныеПоНефтепродуктам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДанныеПоНефтепродуктам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДанныеПоБиотопливу");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДанныеПоБиотопливу");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ТабачнаяПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ТабачнаяПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеТоварыЦифроваяМаркировкаЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДругиеТоварыЦифроваяМаркировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеТоварыЦифроваяМаркировкаКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ДругиеТоварыЦифроваяМаркировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ТоварыЭкспортныйКонтроль");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета("ТоварыЭкспортныйКонтроль");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияТоваров(НоваяСтрока, НаименованиеТЧ)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы[НаименованиеТЧ].ТекущиеДанные;
		ТекущиеДанные.НомерСтрокиСНТ = ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ТоварыВС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтиловыйСпиртПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ЭтиловыйСпирт");

КонецПроцедуры

&НаКлиенте
Процедура ВиноматериалПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "Виноматериал");

КонецПроцедуры

&НаКлиенте
Процедура ПивоПивныеНапиткиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ПивоПивныеНапитки");
	
КонецПроцедуры 

&НаКлиенте
Процедура АлкогольнаяПродукцияКромеПиваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "АлкогольнаяПродукцияКромеПива");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоНефтепродуктамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ДанныеПоНефтепродуктам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоБиотопливуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ДанныеПоБиотопливу");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабачнаяПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ТабачнаяПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ДругиеТоварыЦифроваяМаркировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ДругиеТоварыЦифроваяМаркировка");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭкспортныйКонтрольПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТоваров(НоваяСтрока, "ТоварыЭкспортныйКонтроль");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЭДВС(Команда)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий") И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСНТ.Реализация") Тогда
		
		ПослеЗакрытияВопросаВводаЭДВС(КодВозвратаДиалога.Да, Параметры);
		
	Иначе	
		
		СНТСопоставлена = ПолучитьИнформациюОСопоставленииНаСервере();
		
		Если Не СНТСопоставлена Тогда
			
			ТекстВопроса = НСтр("ru='Документ ""СНТ"" не сопоставлен с ФНО 328.00, вводить ЭДВС рекомендуется после сопоставления! Ввести документ ЭДВС?'");
			ПослеЗакрытияВопросаВводаНаОсновании = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВводаЭДВС", ЭтаФорма);
			ПоказатьВопрос(ПослеЗакрытияВопросаВводаНаОсновании, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0); 
		Иначе
			ПослеЗакрытияВопросаВводаЭДВС(КодВозвратаДиалога.Да, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнформациюОСопоставленииНаСервере()
	
	ТаблицаСопоставленияИП = СНТСервер.ПолучитьТаблицуТоваровСопоставленныхИП(Объект.Ссылка);
	
	Если ТаблицаСопоставленияИП.Количество() = 0 Тогда
		СНТСопоставлена = Ложь;
	Иначе
		СНТСопоставлена = Истина;
	КонецЕсли;

	Возврат СНТСопоставлена;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаВводаЭДВС(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		МассивДляЭДВС = Новый Массив;
		МассивДляЭДВС.Добавить(Параметры.Ключ);
		
		ВСКлиент.ВыполнитьКомандуСоздатьЭДВС(МассивДляЭДВС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерСтрокиСНТ(НаименованиеТЧ)
	
	Если Объект.ТипСНТ <> ПредопределенноеЗначение("Перечисление.ТипыСНТ.ВозвратТоваров") Тогда
		Для Каждого Строка Из Объект[НаименованиеТЧ] Цикл
			Строка.НомерСтрокиСНТ = Строка.НомерСтроки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораВидовОпераций()
	
	Элементы.ВидОперации.СписокВыбора.Очистить();
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийСНТ.Реализация);
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийСНТ.Ввоз);
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийСНТ.Вывоз);
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийСНТ.Перемещение);
	Элементы.ВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийСНТ.ПеремещениеМеждуФилиалами);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстПодсказкиСПОтправителя()
	
	ОтправительЗаполнен = ЗначениеЗаполнено(Объект.Поставщик);
	ОтправительЭтоПодразделение = ТипЗнч(Объект.Поставщик) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций();
	
	Если ОтправительЭтоПодразделение Тогда
		УказыватьРеквизитыГоловнойОрганизации 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Поставщик, "УказыватьРеквизитыГоловнойОрганизации") 
	Иначе
		УказыватьРеквизитыГоловнойОрганизации 	= Ложь;
	КонецЕсли;
	
	СПЗаполнено 			= ЗначениеЗаполнено(Объект.СтруктурноеПодразделение);
	СкладОтправительЗаполнен = ЗначениеЗаполнено(Объект.СкладОтправитель);
	
	СкладСП = Ложь;
	Если Не ОтправительЭтоПодразделение И СкладОтправительЗаполнен Тогда
		СкладСП = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "Организация")) = ВСКлиентСерверПереопределяемый.ТипПодразделенияОрганизаций();
	КонецЕсли;
	
	ТекстПодсказки = "";
	
	Если ОтправительЗаполнен Тогда 
		
		Если НЕ ОтправительЭтоПодразделение И (НЕ СкладСП И СкладОтправительЗаполнен) Тогда 
			ТекстПодсказки = НСтр("ru='Отправка СНТ от организации Поставщика без указания информации по подразделению'");
		ИначеЕсли НЕ ОтправительЭтоПодразделение И НЕ СкладОтправительЗаполнен Тогда
			ТекстПодсказки = НСтр("ru='Отправка СНТ от организации Поставщика'")
		ИначеЕсли НЕ ОтправительЭтоПодразделение И СкладСП Тогда
			ТекстПодсказки = НСтр("ru='Отправка СНТ от головной организации с укзанием данных структурного подразделения.'");
		ИначеЕсли НЕ ОтправительЭтоПодразделение И СПЗаполнено Тогда
			ТекстПодсказки = НСтр("ru='Отправка СНТ от головной организации с укзанием данных структурного подразделения.'");
		ИначеЕсли ОтправительЭтоПодразделение И УказыватьРеквизитыГоловнойОрганизации Тогда
			ТекстПодсказки = НСтр("ru='Отправка СНТ от структурного подразделения с данными головной организации.'");
		ИначеЕсли ОтправительЭтоПодразделение И НЕ УказыватьРеквизитыГоловнойОрганизации Тогда
			ТекстПодсказки = НСтр("ru='Отправка СНТ от структурного подразделения с данными структурного подразделения.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПодсказкаВариантаОтправкиСНТ.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ОграничетьТипПоставщикаПолучателя()

	ОписаниеПоставщикПолучатель = СНТСерверПереопределяемый.ОпределитьТипПоставщикаПолучателя(Объект.ВидОперации);
	Элементы.Поставщик.ОграничениеТипа 	= ОписаниеПоставщикПолучатель;
	Элементы.Получатель.ОграничениеТипа = ОписаниеПоставщикПолучатель;
	Поставщик 	= ОписаниеПоставщикПолучатель.ПривестиЗначение(Поставщик);
	Получатель 	= ОписаниеПоставщикПолучатель.ПривестиЗначение(Получатель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, Реквизит)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
	
КонецФункции

&НаСервере
Процедура ПроверитьСписокТоваровНаПеремещениеЭДВС()
	
	Если Объект.Проведен И Объект.Направление = Перечисления.НаправленияСНТ.Входящий И Объект.Статус = Перечисления.СтатусыСНТ.Подтвержден
		И НЕ Объект.Состояние = Перечисления.СостоянияСНТ.ОжидаетИдентификацииТоваровНаВС 
		И ЗначениеЗаполнено(Объект.СкладПолучатель) И Объект.СкладПолучатель.ПризнакОприходования Тогда
		
		ЕстьТоварыНаПеремещениеЭДВС = Истина;
		
	Иначе
		
		ЕстьТоварыНаПеремещениеЭДВС = Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЭДВСНаПеремещение(Команда)
	
	СтруктураДляЭДВС = Новый Структура;
	СтруктураДляЭДВС.Вставить("ДокументСсылка", Параметры.Ключ);
	СтруктураДляЭДВС.Вставить("ЭтоВводНаПеремещениеИзВходящегоСНТ", Истина);
	
	ВСКлиент.ВыполнитьКомандуСоздатьЭДВС(СтруктураДляЭДВС);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеУведомлениеОСопоставленииДляСНТ(Форма)
	
	Если Объект.СтатусСопоставленияДляСНТ = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияДляСНТ.ОжидаетсяСопоставлениеИмпортёра") Тогда
		Элементы.СтатусСопоставленияДляСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	ИначеЕсли Объект.СтатусСопоставленияДляСНТ = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияДляСНТ.НеТребуетсяСопоставление") 
		ИЛИ Объект.СтатусСопоставленияДляСНТ = ПредопределенноеЗначение("Перечисление.СтатусыСопоставленияДляСНТ.ВыполненоСопоставлениеИмпортёром") Тогда 
		Элементы.СтатусСопоставленияДляСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветЗеленый();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте 
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры 

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры 

//------------------------------------------------------------------------------------------------------++Аян_К++ старт-----------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура кт_ПодборПриобретенияТМЗ(Команда) //++Аян_К++ 311022 №6306
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("Документ.СНТ.Форма.кт_ФормаВыбораОснования", ПараметрыФормы, ЭтотОбъект,,,,,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыИзПриобретенияТМЗ(ПриобретениеТМЗ) //++Аян_К++ 311022 №6306
	
	//Объект.ТоварыВС.Очистить();
	
	Для Каждого Стр Из ПриобретениеТМЗ.Товары Цикл
		НовСтр = Объект.ТоварыВС.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.Товар 				= Стр.Номенклатура;
		НовСтр.ТоварНаименование 	= Стр.Номенклатура.Наименование;
		НовСтр.ЕдиницаИзмерения 	= Стр.Номенклатура.ЕдиницаИзмерения;
		НовСтр.ЕдиницаИзмеренияКод 	= Стр.Номенклатура.ЕдиницаИзмерения.Код;
		НовСтр.КодТНВЭД 			= Стр.Номенклатура.КодТНВЭД;
	КонецЦикла;
	
КонецПроцедуры

//------------------------------------------------------------------------------------------------------++Аян_К++ финиш-----------------------------------------------------------------------------------------------------------