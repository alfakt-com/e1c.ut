#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АВРСерверПереопределяемый.ПриСозданииНаСервере(ЭтаФорма);
	
	Если (Параметры.Свойство("ТолькоПросмотр") И Параметры.ТолькоПросмотр = Истина)
		ИЛИ НЕ АВРСерверПереопределяемый.ДоступнаРольРедактированияАВР() Тогда 
		РежимТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка = Истина;
	КонецЕсли;
	
	УправлениеФормой();
	
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей();
		ЗаполнитьТаблицуОшибок(Объект.Ошибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	АВРСерверПереопределяемый.ПриЧтенииНаСервере(ТекущийОбъект, ЭтотОбъект);
	
	УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей();
	ПодготовитьФормуНаСервере();
	УправлениеФормой();
	
	ЗаполнитьТаблицуОшибок(ТекущийОбъект.Ошибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ РежимТолькоПросмотр Тогда                                          
		Если Объект.Ссылка.Пустая() Тогда
			// Установить признак модифицированности для нового,
			// чтобы при закрытии пользователю был задан вопрос.
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = РежимТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ТекущиеДанные.Поставщик = НовыйОбъект;
			Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.Контрагенты")
				ТекущиеДанные.Поставщик = НовыйОбъект.Ссылка;	
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Объект.Договор = НовыйОбъект;
		Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.ДоговорыКонтрагентов")
			Объект.Договор = НовыйОбъект.Ссылка;	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда		
		
		ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
		
		Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ТекущиеДанные.Номенклатура = НовыйОбъект;
			
		Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.<Имя>")
			
			ТекущиеДанные.Номенклатура = НовыйОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправлениеФормой();	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИзменитьДокументОснование = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Объект.ДокументОснование <> ВыбранноеЗначение Тогда
		
		ТекстВопроса = НСтр(
		"ru = 'Документ уже отражен в учете с помощью ""%СтарыйДокументОснование%"".
		|Отразить документ в учете с помощью выбранного документа?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйДокументОснование%", Объект.ДокументОснование);
		
		ИзменитьДокументОснованиеЗавершение = Новый ОписаниеОповещения("ИзменитьДокументОснованиеЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение));
		ПоказатьВопрос(ИзменитьДокументОснованиеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ИзменитьДокументОснование = Истина;
		
	КонецЕсли;
	
	Если ИзменитьДокументОснование Тогда
		Объект.ДокументОснование = ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = АВРКлиентСервер.ИмяСобытияЗаписьАВР() Тогда
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();	
		Иначе
			ЭтаФорма.Прочитать();	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДокументОснованиеПрежний <> Объект.ДокументОснование И НЕ Отказ
			И ЗначениеЗаполнено(ДокументОснованиеПрежний) Тогда
			
			Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
			Набор.Отбор.Основание.Установить(ДокументОснованиеПрежний);
			Набор.Прочитать();
			Набор.Очистить();
			
			Если АВРСерверПереопределяемый.ПроверитьОснованиеДляОформленияЭАВР(ДокументОснованиеПрежний) Тогда
				
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Организация = ДокументОснованиеПрежний.Организация;
				НоваяЗапись.Контрагент = ДокументОснованиеПрежний.Контрагент;
				НоваяЗапись.Основание = ДокументОснованиеПрежний.Ссылка;
				
			КонецЕсли;
			
			Набор.Записать(Истина);
			
		КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	КоличествоСтрок = Объект.Поставщики.Количество();
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") И КоличествоСтрок = 1 Тогда
		ОбработкаВыбораПоставщика(Объект.Организация, Элемент);	
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") И КоличествоСтрок = 1 И НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		ОбработкаВыбораПолучателя(Объект.Организация, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	
	Контрагент = Контрагент(Объект);
	ОрганизацияПодразделение = ОрганизацияПодразделение(Объект);
	
	//Заполнение соответствий имен реквизитов договора для отбора
	СоответсвиеИменРеквизитов = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СоответсвиеИменРеквизитов.Вставить("%ИмяРеквизитаВладелецДоговора", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияПодразделение) Тогда
		СоответсвиеИменРеквизитов.Вставить("%ИмяРеквизитаОрганизацияДоговора", "");
	КонецЕсли;
	
	ЭСФВызовСервера.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
		
	Если ЗначениеЗаполнено(Контрагент) Тогда			
		ИмяРеквизитаВладелецДоговора = СоответсвиеИменРеквизитов.Получить("%ИмяРеквизитаВладелецДоговора");
		
		Отбор.Вставить(ИмяРеквизитаВладелецДоговора, Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОрганизацияПодразделение) Тогда
		ИмяРеквизитаОрганизацияДоговора = СоответсвиеИменРеквизитов.Получить("%ИмяРеквизитаОрганизацияДоговора");
		
		Отбор.Вставить(ИмяРеквизитаОрганизацияДоговора, ОрганизацияПодразделение);
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элементы.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда	
		ЗаполнитьДанныеПоДоговору();		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеДоговораПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Направление = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаПоставщики = Элементы.Поставщики.ТекущиеДанные;
	ТекПоставщик = ТекущаяСтрокаПоставщики.Поставщик;
	
	ТекущаяСтрокаПолучатели = Элементы.Получатели.ТекущиеДанные;
	ТекПолучатель = ТекущаяСтрокаПолучатели.Получатель;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Истина);
	Иначе
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекПоставщик) ИЛИ ЗначениеЗаполнено(ТекПолучатель) Тогда
		ТекстВопроса = НСтр(
		"ru = 'Изменено направление документа. 
		|Скорректировать данные по поставщикам и получателям?'");
		
		ИзменениеНаправленияЗавершение = Новый ОписаниеОповещения("ИзменениеНаправленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ИзменениеНаправленияЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеНаправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрокаПоставщики = Элементы.Поставщики.ТекущиеДанные;
		ТекПоставщик = ТекущаяСтрокаПоставщики.Поставщик;
		
		ТекущаяСтрокаПолучатели = Элементы.Получатели.ТекущиеДанные;
		ТекПолучатель = ТекущаяСтрокаПолучатели.Получатель;
		
		Получатель = ТекПоставщик;
		ТекущаяСтрокаПолучатели.Получатель = Получатель;
		ЗаполнитьДанныеПолучателя(Получатель, ТекущаяСтрокаПолучатели, Истина); 
		
		Поставщик = ТекПолучатель;
		ТекущаяСтрокаПоставщики.Поставщик = Поставщик;
		ЗаполнитьДанныеПоставщика(Поставщик, ТекущаяСтрокаПоставщики, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеВУчете

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	ИначеЕсли РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ВыбратьДокументОснование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокументОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.ДокументОснование = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОткрыть(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(, Объект.ДокументОснование);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеВыбрать(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ВыбратьДокументОснование();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументОснование()
	
	ДокументыВыбора = АВРКлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАВР(Объект.Направление);
	
	Если ДокументыВыбора.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ДокументыВыбора", ДокументыВыбора); 
		Оповещение = Новый ОписаниеОповещения("ВыборДокументаОснованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
		ВыбранныйДокумент = ДокументыВыбора[0].Значение;
		ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
	Иначе
		Объект.ДокументОснование = "";   
		ПредставлениеДокументаОснования = НСтр("ru = 'Не подлежит отражению в учете'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено")  Тогда
		ИмяДокумента = ВыбранныйДокумент;
		ИмяФормыВыбора = "Документ." + ИмяДокумента + ".ФормаВыбора";  
		АВРКлиент.ОткрытьФормуВыбораДокументаОснования(ЭтаФорма, ИмяФормыВыбора);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОтсоединить(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Объект.ДокументОснование = Неопределено;
			СформироватьПредставлениеДокументаОснования(ЭтаФорма);
			Модифицированность = Истина;		
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеСоздать(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		Если НЕ ПроверитьЗаполнение() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как в документе незаполненные ссылочные реквизиты.'"));
			Возврат;
		Иначе
			Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
				СоздатьДокументОснованиеНаКлиентеПослеЗаписи = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеПослеЗаписи", ЭтаФорма);	
				ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(СоздатьДокументОснованиеНаКлиентеПослеЗаписи);
			Иначе
				СоздатьДокументОснованиеНаКлиентеПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеПослеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Документ уже отражен в учете: ""%ДокументОснование%"".
			|Создать новый документ-основание?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ДокументОснование%", Объект.ДокументОснование);
			
			СоздатьДокументОснованиеНаКлиентеЗавершение = Новый ОписаниеОповещения("СоздатьДокументОснованиеНаКлиентеЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьДокументОснованиеНаКлиентеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			СоздатьДокументОснованиеНаКлиентеЗавершение(КодВозвратаДиалога.ОК, Неопределено);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОснованиеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		// Записываем документ, иначе внесённые изменения не попадут в функцию "ЗаполнитьПоДокументуНаСервере"
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		ДокументыВыбора = АВРКлиентСерверПереопределяемый.ПолучитьСписокДокументовОснованияДляАВР(Объект.Направление);
		
		Если ДокументыВыбора.Количество() > 1 Тогда
			ПараметрыФормы = Новый Структура("ДокументыВыбора", ДокументыВыбора); 
			Оповещение = Новый ОписаниеОповещения("СозданиеДокументаОснованияЗавершение", ЭтотОбъект);
			ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаВыбораДокументаОснования", ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ДокументыВыбора.Количество() = 1 Тогда
			ВыбранныйДокумент= ДокументыВыбора[0].Значение;
			СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, Неопределено);
		Иначе
			Объект.ДокументОснование = "";
			ПредставлениеДокументаОснования = "Не подлежит отражению в учете"
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеДокументаОснованияЗавершение(ВыбранныйДокумент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйДокумент <> "" И ТипЗнч(ВыбранныйДокумент) <> Тип("Неопределено") Тогда
		ИмяДокумента = ВыбранныйДокумент;
		ДокументОснованиеСсылка = ЗаполнитьПоДокументуНаСервере(ИмяДокумента); 
		ПоказатьЗначение(, ДокументОснованиеСсылка);
		Объект.ДокументОснование = ДокументОснованиеСсылка;
		СформироватьПредставлениеДокументаОснования(ЭтаФорма);
		Модифицированность = Истина;
		// Записываем документ, т.к. получили ссылку из функции "ЗаполнитьПоДокументуНаСервере"
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоДокументуНаСервере(ИмяДокумента)
	
	Возврат АВРСерверПереопределяемый.ЗаполнитьДокументОснованиеПоДокументуАВР(Объект, ИмяДокумента);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийПоставщики

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПоставщика(ВыбранноеЗначение, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПоставщика(ВыбранноеЗначение, Элемент)
	
	Если АВРКлиентПереопределяемый.ЗаполнитьПараметрыВыбораПоставщикаПолучателяДляСП(ВыбранноеЗначение, Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Поставщики.ТекущиеДанные;
	Поставщик = ТекущаяСтрока.Поставщик;
	
	ТребуетсяЗаполнениеРеквизитовПоНаправлению = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий")
	ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") И НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
	РеквизитыПоставщикаЗаполнены = ПроверитьЗаполнениеРеквизитовВСтроке(ТекущаяСтрока, Новый Структура("Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации"));
		Если ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ Поставщик = ВыбранноеЗначение И РеквизитыПоставщикаЗаполнены Тогда
			ТекстВопроса = НСтр(
			"ru = 'Скорректировать реквизиты поставщика в документе?'");
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Поставщик", ВыбранноеЗначение); 
			
			ИзменениеПоставщикаЗавершение = Новый ОписаниеОповещения("ИзменениеПоставщикаЗавершение", ЭтаФорма, ДопПараметры);
			ПоказатьВопрос(ИзменениеПоставщикаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ РеквизитыПоставщикаЗаполнены Тогда
			ТекущаяСтрока = Элементы.Поставщики.ТекущиеДанные;
			Поставщик = ВыбранноеЗначение;
			ЗаполнитьДанныеПоставщика(Поставщик, ТекущаяСтрока);
		КонецЕсли;	
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПоставщикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Элементы.Поставщики.ТекущиеДанные;
		Поставщик = ДополнительныеПараметры.Поставщик;
		ЗаполнитьДанныеПоставщика(Поставщик, ТекущаяСтрока, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПоставщикПриИзменении(Элемент)
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПоставщикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПоставщика(ВыбранноеЗначение, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПокупатели

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПолучателя(ВыбранноеЗначение, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПолучателя(ВыбранноеЗначение, Элемент)
	
	Если АВРКлиентПереопределяемый.ЗаполнитьПараметрыВыбораПоставщикаПолучателяДляСП(ВыбранноеЗначение, Элемент) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Получатели.ТекущиеДанные;
	Получатель = ТекущаяСтрока.Получатель;
	
	ТребуетсяЗаполнениеРеквизитовПоНаправлению = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий")
	ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") И НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РеквизитыПолучателяЗаполнены = ПроверитьЗаполнениеРеквизитовВСтроке(ТекущаяСтрока, Новый Структура("Получатель, ПолучательНаименование, ПолучательИдентификатор, Адрес, КБе, ИИК, НаименованиеБанка, БИК"));	
		Если ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ Получатель = ВыбранноеЗначение И РеквизитыПолучателяЗаполнены Тогда
			ТекстВопроса = НСтр(
			"ru = 'Скорректировать реквизиты получателя в документе?'");
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Получатель", ВыбранноеЗначение);
			
			ИзменениеПолучателяЗавершение = Новый ОписаниеОповещения("ИзменениеПолучателяЗавершение", ЭтаФорма, ДопПараметры);
			ПоказатьВопрос(ИзменениеПолучателяЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ РеквизитыПолучателяЗаполнены Тогда
			ТекущаяСтрока = Элементы.Получатели.ТекущиеДанные;
			Получатель = ВыбранноеЗначение;
			ЗаполнитьДанныеПолучателя(Получатель, ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПолучателяЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Элементы.Получатели.ТекущиеДанные;
		Получатель = ДополнительныеПараметры.Получатель;
		ЗаполнитьДанныеПолучателя(Получатель, ТекущаяСтрока, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательПриИзменении(Элемент)
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПолучателя(ВыбранноеЗначение, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыУслуги

&НаКлиенте
Процедура ИзменениеРеквизитовУслуги(СтрокаТабличнойЧасти, Номенклатура)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтруктураДанных = ПолучитьРеквизитыНоменклатурыКПВЭД(Номенклатура);
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураДанных, "УслугаНаименование, ЕдиницаИзмерения, СтавкаНДС");
		ЕдиницаИзмерения =  СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование = ПолучитьНаименованиеЕдиницыИзмерения(ЕдиницаИзмерения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУслугаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	
	ТребуетсяЗаполнениеРеквизитовПоНаправлению = Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий")
	ИЛИ (Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") И НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РеквизитыНоменклатурыЗаполнены = ПроверитьЗаполнениеРеквизитовВСтроке(СтрокаТабличнойЧасти, Новый Структура("УслугаНаименование, ЕдиницаИзмерения, СтавкаНДС"));		
		
		Если ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ Номенклатура = ВыбранноеЗначение И РеквизитыНоменклатурыЗаполнены Тогда
			ТекстВопроса = НСтр(
			"ru = 'Скорректировать реквизиты выбранной услуги в документе?'");
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Номенклатура", ВыбранноеЗначение); 
			
			ИзменениеУслугиЗавершение = Новый ОписаниеОповещения("ИзменениеУслугиЗавершение", ЭтаФорма, ДопПараметры);
			ПоказатьВопрос(ИзменениеУслугиЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ИначеЕсли ТребуетсяЗаполнениеРеквизитовПоНаправлению И НЕ РеквизитыНоменклатурыЗаполнены Тогда
			ИзменениеРеквизитовУслуги(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеУслугиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		Номенклатура = ДополнительныеПараметры.Номенклатура;
		ИзменениеРеквизитовУслуги(СтрокаТабличнойЧасти, Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)	
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Объект.КодВалюты = ПолучитьКодВалютыНаСервере(Объект.Валюта);
		Объект.КурсВалюты = ПолучитьКурсВалютыНаСервере(Объект.Валюта, Объект.Дата);		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
		Если СтрокаТабличнойЧасти.СтавкаНДС = ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(Истина) Тогда
			СтрокаТабличнойЧасти.БезНДС = Истина;
		Иначе
			СтрокаТабличнойЧасти.БезНДС = Ложь;
		КонецЕсли;
		
		РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		СтрокаТабличнойЧасти	= Элементы.Услуги.ТекущиеДанные;
		ЕдиницаИзмерения		= СтрокаТабличнойЧасти.ЕдиницаИзмерения;
		
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияКод = ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование = ПолучитьНаименованиеЕдиницыИзмерения(ЕдиницаИзмерения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиБезНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СтавкаНДСЧисло = 0;
	СтрокаТабличнойЧасти.СтавкаНДС 		= ЭСФВызовСервераПовтИсп.ПолучитьПредопределенноеЗначениеСтавкиНДС(СтрокаТабличнойЧасти.БезНДС);
	
	РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Ошибки.ТекущиеДанные;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекущиеДанные.ТекстИБ;
	Сообщение.Поле = ТекущиеДанные.ПолеИБ;
	Сообщение.Сообщить();
	
	// Активировать страницу на которой произошла ошибка.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоставщикиРедактироватьСписком(Команда)
	УстановитьВозможностьРедактированияСписком("Поставщики");
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиРедактироватьСписком(Команда)
	УстановитьВозможностьРедактированияСписком("Получатели");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНайти(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		Контрагент = Контрагент(Объект);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
			
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ТекстВопроса = НСтр(
				"ru = 'Не удалось найти договор поставки в базе данных.
				|Создать новый договор поставки?'");
				
				СоздатьНовыйДоговорЗавершение = Новый ОписаниеОповещения("СоздатьНовыйДоговорЗавершение", ЭтаФорма);
				ПоказатьВопрос(СоздатьНовыйДоговорЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
				
				Объект.Договор = МассивДоговоров[0];
				
			Иначе // МассивДоговоров.Количество() > 1
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько договоров'"));
				ПараметрыФормы.Вставить("МассивЗначений", МассивДоговоров);
				
				ВыборДоговораИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборДоговораИзСпискаЗавершение", ЭтаФорма);
				ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборДоговораИзСпискаЗавершение);
				
			КонецЕсли;
			
		Иначе
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно найти договор поставки, так как не указан поставщик в разделе ""B. Поставщики"".'"));
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздать(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ДоговорСоздатьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЗаполнитьРеквизиты(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ИмяТаблицыКонтрагентов  = "";
		ИмяРеквизитаКонтрагента = "";
		ДополнительныеПараметры	= ДополнительныеПараметрыЗаполненияДоговора();
		
		Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента) Тогда
			
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				АВРКлиентПереопределяемый.ОткрытьЗаполненнуюФормуСтарогоДоговора(ЭтаФорма, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ДополнительныеПараметры);
			Иначе
				Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как договор поставки не заполнен.'"));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНайти(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПоставщикИдентификатор) Тогда
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Не заполнено значение поля ""ИИН, БИН"".'"));
			Возврат;
		КонецЕсли;
		
		МассивКонтрагентов = НайтиКонтрагентовПоИдентификатору(ТекущиеДанные.ПоставщикИдентификатор);
		
		Если МассивКонтрагентов.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Не удалось найти контрагента в базе данных.
			|Создать нового контрагента?'");
			
			СоздатьНовогоКонтрагентаЗавершение = Новый ОписаниеОповещения("СоздатьНовогоКонтрагентаЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьНовогоКонтрагентаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли МассивКонтрагентов.Количество() = 1 Тогда
			
			ТекущиеДанные.Поставщик = МассивКонтрагентов[0];
			
		Иначе // МассивКонтрагентов.Количество() > 1
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько контрагентов'"));
			ПараметрыФормы.Вставить("МассивЗначений", МассивКонтрагентов);
			
			ВыборКонтрагентаИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборКонтрагентаИзСпискаЗавершение", ЭтаФорма);
			ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборКонтрагентаИзСпискаЗавершение);
			
		КонецЕсли;
		
		Если НЕ МассивКонтрагентов.Количество() = 0 И НЕ МассивКонтрагентов.Количество() = 0 Тогда
			ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоставщикСоздатьНаКлиенте();
	КонецЕсли;
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПоставщик = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйПоставщик) Тогда
		
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Поставщик = ВыбранныйПоставщик;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздать(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ПоставщикСоздатьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздатьНаКлиенте()
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Идентификатор", ТекущиеДанные.ПоставщикИдентификатор);
		ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.ПоставщикНаименование);
		ДанныеЗаполнения.Вставить("СерияСвидетельстваПоНДС", ТекущиеДанные.СерияСвидетельстваПоНДС);
		ДанныеЗаполнения.Вставить("НомерСвидетельстваПоНДС", ТекущиеДанные.НомерСвидетельстваПоНДС);
		ДанныеЗаполнения.Вставить("КБе", ТекущиеДанные.КБе);
		
		ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(Объект.Ссылка);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментария);
		
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоКонтрагента(ДанныеЗаполнения, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗаполнитьРеквизиты(Команда)
	
	Если РежимТолькоПросмотр Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
				
				ТекстВопроса = НСтр(
				"ru = 'Данные поставщика будут перезаполнены по данным АВР.
				|Продолжить?'");
				
				ПерезаполнениеДанныхПоставщикаЗавершение = Новый ОписаниеОповещения("ПерезаполнениеДанныхПоставщикаЗавершение", ЭтаФорма);
				ПоказатьВопрос(ПерезаполнениеДанныхПоставщикаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			Иначе
				
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить, так как не заполнено поле ""Поставщик"".'"));
				
			КонецЕсли;
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеДанныхПоставщикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Элементы.Поставщики.ТекущаяСтрока;
		ПоставщикЗаполнитьРеквизитыНаСервере(ТекущаяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикЗаполнитьРеквизитыНаСервере(ПоставщикиИдентификаторСтроки)
	
	ПоставщикиСтрока = Объект.Поставщики.НайтиПоИдентификатору(ПоставщикиИдентификаторСтроки);
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ЗаполнитьРеквизитыКонтрагентаАВР(Объект, ПоставщикиСтрока);
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоДокументуОснованию(Команда)
	ПерезаполнитьПоДокументуОснованиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоДокументуОснованиюНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Сообщить(НСтр("ru = 'Невозможно перезаполнить по документу, так как основание не указано.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.Состояние = Перечисления.СостоянияАВР.Сформирован
		ИЛИ Объект.Состояние = Перечисления.СостоянияАВР.ОтклоненСервером) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно перезаполнить, так как электронный акт выполненных работ %Состояние%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", НРег(Объект.Состояние));
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ОбъектАВР = РеквизитФормыВЗначение("Объект");
	ЭСФСервер.ОчиститьОбъект(ОбъектАВР);
	АВРСервер.ЗаполнитьИсходящийАВР(Объект.ДокументОснование, ОбъектАВР);	
	ЗначениеВРеквизитФормы(ОбъектАВР, "Объект");
	
	Модифицированность = Истина;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСоздатьУслуги(Команда)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		АВРКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовойУслуги(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьРеквизитов()
	
	МассивИменНедоступныхЭлементов = НовыйМассивИменНедоступныхЭлементов();
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда										
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Ложь);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиКоманднаяПанель", "Доступность", Истина);
	Иначе
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Истина);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УслугиКоманднаяПанель", "Доступность", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоТолькоПросмотр(Знач МассивИменЭлементовФормы, Знач ТолькоПросмотр)
	
	Для каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотр;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьНедоступныеРеквизиты(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Ложь);
	Иначе
		ТекстВопроса = НСтр("ru = 'Разрешить редактирование реквизитов документа?'");
		РедактироватьНедоступныеРеквизитыЗавершение = Новый ОписаниеОповещения("РедактироватьНедоступныеРеквизитыЗавершение", ЭтаФорма);
		ПоказатьВопрос(РедактироватьНедоступныеРеквизитыЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РедактироватьНедоступныеРеквизитыНаСервере(Знач НовоеЗначениеПометки)
	
	Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка	= НовоеЗначениеПометки;	
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Доступность элементов формы

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементов()
	
	Массив = Новый Массив;
	
	//Раздел А. Общий раздел
	Массив.Добавить("РегистрационныйНомер");
	Массив.Добавить("Номер");
	Массив.Добавить("Дата");
	Массив.Добавить("ДатаВыполнения");
	
	//Раздел В. Исполнители (Поставщики)
	Массив.Добавить("ПоставщикиПоставщикИдентификатор1");
	Массив.Добавить("ПоставщикиБИНФилиала1");
	Массив.Добавить("ПоставщикНаименование");
	Массив.Добавить("ПоставщикАдрес");
	Массив.Добавить("ПоставщикиСерияСвидетельстваПоНДС1");
	Массив.Добавить("ПоставщикиНомерСвидетельстваПоНДС1");
	
	//Раздел С. Банковские реквизиты исполнителя (поставщика)
	Массив.Добавить("ПоставщикиБанковскийСчет");
	Массив.Добавить("ПоставщикКБе");
	Массив.Добавить("ПоставщикИИК");
	Массив.Добавить("ПоставщикБИК");
	Массив.Добавить("ПоставщикНаименованиеБанка");
	
	Массив.Добавить("ПоставщикДополнительныеСведения");
	Массив.Добавить("ПоставщикиТипРегистрации");
	
	//Раздел D. Заказчики (Получатели)
	Массив.Добавить("ПолучательИдентификатор");
	Массив.Добавить("ПолучательБИНФилиала");
	Массив.Добавить("ПолучательНаименование");
	Массив.Добавить("ПолучательАдрес");
	Массив.Добавить("ПолучательНерезидент");
	
	//Раздел Е. Банковские реквизиты заказчика (получателя)
	Массив.Добавить("ПолучательБанковскийСчет");
	Массив.Добавить("ПолучательКБе");
	Массив.Добавить("ПолучательИИК");
	Массив.Добавить("ПолучательБИК");
	Массив.Добавить("ПолучательНаименованиеБанка");
	
	Массив.Добавить("ПолучательДополнительныеСведения");
	Массив.Добавить("ПолучательТипРегистрации");
	
	//Раздел F. Договор (контракт)
	Массив.Добавить("НаличиеДоговора");
	Массив.Добавить("ДатаДоговора");
	Массив.Добавить("НомерДоговора");
	Массив.Добавить("РегистрационныйНомерДоговора");
	
	//Раздел G. Вып. работы (оказанные услуги)
	Массив.Добавить("КодВалюты");
	Массив.Добавить("КурсВалюты");
	//Табличная часть
	Массив.Добавить("УслугиНомерСтроки");
	Массив.Добавить("УслугиУслугаНаименование");
	Массив.Добавить("УслугиЕдиницаИзмеренияНаименование");
	Массив.Добавить("УслугиЕдиницаИзмеренияКод");
	Массив.Добавить("УслугиКоличество");
	Массив.Добавить("УслугиЦена");
	Массив.Добавить("УслугиСтоимостьБезУчетаКосвенныхНалогов");
	Массив.Добавить("УслугиРазмерОборота");
	Массив.Добавить("УслугиБезНДС");
	Массив.Добавить("УслугиСтавкаНДСЧисло");
	Массив.Добавить("УслугиСуммаНДС");
	Массив.Добавить("УслугиСтоимостьСУчетомКосвенныхНалогов");
	Массив.Добавить("УслугиДополнительныеСведения");
	
	//Раздел Н. Доп. сведения
	Массив.Добавить("ДополнительныеСведения");
	
	//Раздел I. Сведения по ЭЦП исполнителя (поставщика)
	Массив.Добавить("ЭЦППоставщика");
	Массив.Добавить("УполномоченныйСотрудник");
	Массив.Добавить("ТипПодписи");
	Массив.Добавить("ДатаПодписи");
	Массив.Добавить("ИнформацияОтправитель");
	
	//Раздел J. Сведения по ЭЦП заказчика (получателя)
	Массив.Добавить("ЭЦППолучателя");
	Массив.Добавить("УполномоченныйСотрудникПолучателя");
	Массив.Добавить("ТипПодписиПолучателя");
	Массив.Добавить("ДатаПодписиПолучателя");
	Массив.Добавить("ИнформацияПолучатель");
	
	//Раздел К. Статус
	Массив.Добавить("ДатаПринятияСтатуса");
	Массив.Добавить("СтатусАВР");
	
	//Прочие сведения
	Массив.Добавить("Направление");
	Массив.Добавить("Идентификатор");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.Ошибки.Видимость = ?(Объект.Ошибки.Количество() = 0, Ложь, Истина);
	УстановитьВидимостьЭлементовДоговора();
	СформироватьПредставлениеДокументаОснования(ЭтаФорма);
	СформироватьПредставлениеСостояния();
	УстановитьВидимостьКнопокИзмененияСтатуса();
	УстановитьДоступностьРеквизитов();
	// Установить видимость кнопок, зависящих только от направления.
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", "Видимость", Ложь);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновить" , "Видимость", Истина);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Истина);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Ложь);
	Иначе
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументОснованиеСоздать", "Видимость", Истина);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОбновить" , "Видимость", Истина);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Ложь);
		АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Истина);
	КонецЕсли;
	
	ДокументОснованиеПрежний = Объект.ДокументОснование;
	
	Элементы.СтруктурноеПодразделение.Видимость = ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Направление ) Тогда
			Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			КоличествоСтрок = Объект.Поставщики.Количество();
			Если КоличествоСтрок = 1 И НЕ ЗначениеЗаполнено(Объект.Поставщики[0].Поставщик) Тогда
				СтрокаПоставщики = Объект.Поставщики[0];
				СтруктураДанных = АВРСерверПереопределяемый.ПолучитьРеквизитыОрганизации(Объект.Организация, "Поставщик");
				ЗаполнитьЗначенияСвойств(СтрокаПоставщики, СтруктураДанных, "Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, БанковскийСчет, ИИК, НаименованиеБанка, БИК");
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	ПоставщикиПолучателиУстановитьТекущуюСтрокуИРежимРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДоговора()
	
	Элементы.Договор.Видимость  = НЕ Объект.БезДоговора;
	Элементы.ДатаДоговора.Видимость = НЕ Объект.БезДоговора;
	Элементы.НомерДоговора.Видимость =  НЕ Объект.БезДоговора;
	Элементы.ГруппаДоговорКомандноеМеню.Видимость = НЕ Объект.БезДоговора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокИзмененияСтатуса()
	
	СответвствиеСтатусов = АВРСервер.РазрешенныеДействияПоСтатусамАВР(Объект.Направление);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтозвать"				, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеОтзыв()][Объект.Статус]);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПодтвердить"			, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеПодтверждение()][Объект.Статус]);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонить"				, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеОтклонение()][Объект.Статус]);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРасторгнуть"			, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеРасторжение()][Объект.Статус]);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонитьРасторжение"	, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеОтклонениеРасторжения()][Объект.Статус]);
	АВРКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПодтвердитьРасторжение"	, "Видимость", СответвствиеСтатусов[АВРКлиентСервер.ДействиеПодтверждениеРасторжения()][Объект.Статус]);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком(ИмяТабличнойЧасти)
	
	Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка = НЕ Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка;
	
	КоличествоСтрок = Объект[ИмяТабличнойЧасти].Количество();
	
	Если НЕ Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка
		И Объект[ИмяТабличнойЧасти].Количество() > 1 Тогда
		
		ВопросУдалениеСтрокЗавершение = Новый ОписаниеОповещения("ВопросУдалениеСтрокЗавершение", ЭтаФорма, Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти));
		ПоказатьВопрос(ВопросУдалениеСтрокЗавершение, НСтр("ru = 'Все строки кроме первой будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		УстановитьТекущуюСтраницуРеквизитовПоставщиковПолучателей(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуРеквизитовПоставщиковПолучателей(ИмяТабличнойЧасти)
	
	Если Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка Тогда
		Элементы["Группа" + ИмяТабличнойЧасти + "Страницы"].ТекущаяСтраница = Элементы["Раздел" + ИмяТабличнойЧасти + "Списком"];
	Иначе
		Элементы["Группа" + ИмяТабличнойЧасти + "Страницы"].ТекущаяСтраница = Элементы["Раздел" + ИмяТабличнойЧасти + "ОднаСтрока"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикиПолучателиУстановитьТекущуюСтрокуИРежимРедактирования()
	
	УстановитьТекущуюСтрокуТабличнойЧасти("Поставщики");
	УстановитьРежимРедактированияТабличнойЧасти("Поставщики");
	
	УстановитьТекущуюСтрокуТабличнойЧасти("Получатели");	
	УстановитьРежимРедактированияТабличнойЧасти("Получатели");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();		
		Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = Объект[ИмяТабличнойЧасти][0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРедактированияТабличнойЧасти(ИмяТабличнойЧасти)
	
	ИмяКнопкиУправленияРежимом = ИмяТабличнойЧасти + "РедактироватьСписком";
	ИмяГруппыРаздела = "Группа" + ИмяТабличнойЧасти + "Страницы";
	ИмяСтраницыРаздела = "Раздел" + ИмяТабличнойЧасти;
	
	КоличествоСтрок = Объект[ИмяТабличнойЧасти].Количество();
	
	Элементы[ИмяКнопкиУправленияРежимом].Пометка = КоличествоСтрок > 1;
	
	Если Элементы[ИмяКнопкиУправленияРежимом].Пометка Тогда
		Элементы[ИмяГруппыРаздела].ТекущаяСтраница = Элементы[ИмяСтраницыРаздела + "Списком"];
	Иначе
		Элементы[ИмяГруппыРаздела].ТекущаяСтраница = Элементы[ИмяСтраницыРаздела + "ОднаСтрока"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДокументаОснования(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ДокументОснование) Тогда
		Форма.ПредставлениеДокументаОснования = Форма.Объект.ДокументОснование;
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеДокументаОснования = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОшибок(ИсточникДляЗаполненияТаблицыОшибок)
	
	Ошибки.Очистить();	
	
	ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	Для Каждого Ошибка Из ИсточникДляЗаполненияТаблицыОшибок Цикл
		
		ИнформацияОбОшибке = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, Ошибка.Текст, Ошибка.Поле);
		
		НоваяСтрока = Ошибки.Добавить();
		
		НоваяСтрока.ТекстИСЭСФ  = ИнформацияОбОшибке.ТекстИСЭСФ;
		НоваяСтрока.ПолеИСЭСФ   = ИнформацияОбОшибке.ПолеИСЭСФ;
		НоваяСтрока.ТекстИБ     = ИнформацияОбОшибке.ТекстИБ;
		НоваяСтрока.ПолеИБ      = ИнформацияОбОшибке.ПолеИБ;
		НоваяСтрока.ИмяСтраницы = ИнформацияОбОшибке.ИмяСтраницы;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Служебные процедуры по заполнению договора

&НаСервере
Процедура ЗаполнитьРеквизитДоговорПоставкиПоДаннымАВР()
	
	ПоказатьСообщение = Ложь;	
	МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
	
	Если МассивДоговоров.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда			
			Объект.Договор = Неопределено;
			ПоказатьСообщение = Истина;			
		КонецЕсли;
		
	ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
		
		Объект.Договор = МассивДоговоров[0];	
		
	Иначе // МассивДоговоров.Количество() > 1
		
		Если ЗначениеЗаполнено(Объект.Договор) Тогда			
			
			Если МассивДоговоров.Найти(Объект.Договор) = Неопределено Тогда
				
				Объект.Договор = Неопределено;
				ПоказатьСообщение = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказатьСообщение Тогда
		
		Контрагент = Контрагент(Объект);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Договор"" в разделе ""F. Договор (контракт)"" было очищено, так как указанный договор не принадлежал контрагенту ""[Контрагент]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Контрагент]", Контрагент);
		Иначе
			ТекстСообщения = НСтр("ru = 'Поле ""Договор поставки"" в разделе ""F. Договор (контракт)"" было очищено.'");
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Объект.ДоговорПоставки";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиДоговорыПоставкиНаСервере()
	
	МассивДоговоров = Новый Массив;
	
	СтрокаКонтрагент = СтрокаКонтрагент(Объект);
	ИмяТаблицыКонтрагента = ИмяТаблицыКонтрагента(Объект);
	
	ОрганизацияПодразделение = ОрганизацияПодразделение(Объект);
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
		МассивДоговоров = ОбработкаОбменЭСФ.НайтиДоговорыПоставкиПоДаннымАВР(Объект, СтрокаКонтрагент, ИмяТаблицыКонтрагента);
	КонецЕсли;
	
	Возврат МассивДоговоров;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоДоговору() Экспорт
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%ДоговорНомер", "");
	СоответсвиеИменРеквизитов.Вставить("%ДоговорДата", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	РеквизитДоговорНомер = СоответсвиеИменРеквизитов.Получить("%ДоговорНомер");
	РеквизитДоговорДата	 = СоответсвиеИменРеквизитов.Получить("%ДоговорДата");
	
	ТекстПолучаемыеРеквизиты =  РеквизитДоговорНомер + ", " + РеквизитДоговорДата;
	
	РеквизитыДоговора = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Объект.Договор, ТекстПолучаемыеРеквизиты);
	
	Объект.НомерДоговора = РеквизитыДоговора[РеквизитДоговорНомер];
	Объект.ДатаДоговора  = РеквизитыДоговора[РеквизитДоговорДата];
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздатьНаКлиенте()
	
	ИмяТаблицыКонтрагентов  = "";
	ИмяРеквизитаКонтрагента = "";	
	ДополнительныеПараметры	= ДополнительныеПараметрыЗаполненияДоговора();
	
	Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента) Тогда
		АВРКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоДоговора(ЭтаФорма, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента)
	
	ДанныеЗаполнены = Истина;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ИмяТаблицыКонтрагентов = "Поставщики";
		ИмяРеквизитаКонтрагента = "Поставщик";
	Иначе
		ИмяТаблицыКонтрагентов = "Получатели";
		ИмяРеквизитаКонтрагента = "Получатель";
	КонецЕсли;
	
	Если ИмяТаблицыКонтрагентов = "Поставщики" Тогда
		СинонимРаздела = НСтр("ru = 'B. Поставщики'");	
	Иначе
		СинонимРаздела = НСтр("ru = 'C. Получатели'");	
	КонецЕсли;
	
	// Проверить, что таблица контрагентов имеет хотя бы одну строку.
	Если Объект[ИмяТаблицыКонтрагентов].Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как в раздел ""[СинонимРаздела]"" является пустым.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
		Сообщить(ТекстСообщения);
		
		ДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
	// Проверить, что таблица все ссылки на контрагентов заполнены.
	Для Каждого СтрокаКонтрагент Из Объект[ИмяТаблицыКонтрагентов] Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКонтрагент[ИмяРеквизитаКонтрагента]) Тогда
			
			ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как в раздел ""[СинонимРаздела]"" не заполнено поле [ИмяРеквизитаКонтрагента].'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);	
			Сообщить(ТекстСообщения);
			
			ДанныеЗаполнены = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеПараметрыЗаполненияДоговора()
	
	ДополнительныеПараметры = Новый Структура;
	
	//Могут быть добавлены дополнительные параметры для создания договора
	Возврат ДополнительныеПараметры;
	
КонецФункции	

&НаКлиенте
Процедура СоздатьНовыйДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДоговорСоздатьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйДоговор = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйДоговор) Тогда
		Объект.Договор = ВыбранныйДоговор;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Служебные процедуры по заполнению поставщиков/получателей

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаКонтрагент(Знач Объект)
	
	СтрокаКонтрагент = Неопределено;
	
	ИмяТаблицыКонтрагента = ИмяТаблицыКонтрагента(Объект);
	
	Если Объект[ИмяТаблицыКонтрагента].Количество() > 0 Тогда
		СтрокаКонтрагент = Объект[ИмяТаблицыКонтрагента][0];
	КонецЕсли;
	
	Возврат СтрокаКонтрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Контрагент(Знач Объект)
	
	Контрагент = Неопределено;
	
	СтрокаКонтрагент = СтрокаКонтрагент(Объект);
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		
		Если СтрокаКонтрагент.Свойство("Поставщик") Тогда
			Контрагент = СтрокаКонтрагент.Поставщик;	
		Иначе
			Контрагент = СтрокаКонтрагент.Получатель;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыКонтрагента(Знач Объект)
	
	ИмяТаблицыКонтрагента = "";
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ИмяТаблицыКонтрагента = "Поставщики";
	Иначе
		ИмяТаблицыКонтрагента = "Получатели";	
	КонецЕсли;
	
	Возврат ИмяТаблицыКонтрагента;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель)  Экспорт
	
	Возврат АВРСерверПереопределяемый.ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель);
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель)  Экспорт
	
	Возврат АВРСерверПереопределяемый.ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеПолучателя(Получатель, ТекущаяСтрока, Замещать = Ложь)
	
	Если ЗначениеЗаполнено(Получатель) ИЛИ Замещать Тогда
		Если НЕ ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизации(Получатель, "Получатель");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураДанных, "Получатель, ПолучательНаименование, ПолучательИдентификатор, Адрес, КБе, ИИК, НаименованиеБанка, БИК");
			ТекущаяСтрока.Нерезидент = Ложь;
		Иначе
			СтруктураДанных = ПолучитьРеквизитыКонтрагента(Получатель, "Получатель");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураДанных, "Получатель, ПолучательНаименование, ПолучательИдентификатор, Адрес, КБе, ИИК, НаименованиеБанка, БИК");
			ТекущаяСтрока.Нерезидент = Нерезидент(Получатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоставщика(Поставщик, ТекущаяСтрока, Замещать = Ложь)
	
	Если ЗначениеЗаполнено(Поставщик) ИЛИ Замещать Тогда
		Если НЕ ТипЗнч(Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураДанных = ПолучитьРеквизитыОрганизации(Поставщик, "Поставщик");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураДанных, "Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
		Иначе
			СтруктураДанных = ПолучитьРеквизитыКонтрагента(Поставщик, "Поставщик");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураДанных, "Поставщик, ПоставщикНаименование, ПоставщикИдентификатор, Адрес, НомерСвидетельстваПоНДС, СерияСвидетельстваПоНДС, КБе, ИИК, НаименованиеБанка, БИК, ТипРегистрации");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Нерезидент(ПоставщикПолучатель)
	
	Возврат АВРСерверПереопределяемый.Нерезидент(ПоставщикПолучатель);
	
КонецФункции

&НаСервере
Функция НайтиКонтрагентовПоИдентификатору(Знач Идентификатор)
	
	МассивКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.%КонтрагентИНН = &Идентификатор";
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивКонтрагентов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивКонтрагентов;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОрганизацияПодразделение(Знач Объект)
	
	ОрганизацияПодразделение = Неопределено;
	
	СтрокаОрганизацияПодразделение = СтрокаОрганизацияПодразделение(Объект);
	
	Если СтрокаОрганизацияПодразделение <> Неопределено Тогда
		
		Если СтрокаОрганизацияПодразделение.Свойство("Поставщик") Тогда
			ОрганизацияПодразделение = СтрокаОрганизацияПодразделение.Поставщик;	
		Иначе
			ОрганизацияПодразделение = СтрокаОрганизацияПодразделение.Получатель;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОрганизацияПодразделение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыОрганизацииПодразделения(Знач Объект)
	
	ИмяТаблицыОрганизацииПодразделения = "";
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ИмяТаблицыОрганизацииПодразделения = "Получатели";
	Иначе
		ИмяТаблицыОрганизацииПодразделения = "Поставщики";	
	КонецЕсли;
	
	Возврат ИмяТаблицыОрганизацииПодразделения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОрганизацияПодразделение(Знач Объект)
	
	СтрокаОрганизацияПодразделение = Неопределено;
	
	ИмяТаблицыОрганизацииПодразделения = ИмяТаблицыОрганизацииПодразделения(Объект);
	
	Если Объект[ИмяТаблицыОрганизацииПодразделения].Количество() > 0 Тогда
		СтрокаОрганизацияПодразделение = Объект[ИмяТаблицыОрганизацииПодразделения][0];
	КонецЕсли;
	
	Возврат СтрокаОрганизацияПодразделение;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Служебные процедуры по заполнению услуг

Функция ПолучитьКодЕдиницыИзмерения(ЕдиницаИзмерения) 	
	
	КодЭСФ = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "КодЭСФ");
	
	Возврат КодЭСФ;
	
КонецФункции

Функция ПолучитьНаименованиеЕдиницыИзмерения(ЕдиницаИзмерения) 	
	
	НаименованиеЕдиницыИзмерения = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Наименование");
	
	Возврат НаименованиеЕдиницыИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодВалютыНаСервере(Валюта)
	
	КодВалюты = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Валюта,"БуквенныйКод");
	Возврат КодВалюты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Валюта, Дата)
	
	Возврат АВРСерверПереопределяемый.ПолучитьКурсВалюты(Валюта, Дата);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти) 
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтавкаНДС = ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СтавкаНДС = 0;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДСЧисло = СтавкаНДС;
		СтрокаТабличнойЧасти.СтоимостьБезУчетаКосвенныхНалогов = ?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Цена, СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.РазмерОборота = ?(СтрокаТабличнойЧасти.Количество = 0, СтрокаТабличнойЧасти.Цена, СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.РазмерОборота * (СтавкаНДС / 100);
		СтрокаТабличнойЧасти.СтоимостьСУчетомКосвенныхНалогов = СтрокаТабличнойЧасти.РазмерОборота + СтрокаТабличнойЧасти.СуммаНДС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьИтогиПоДокументу()
	
	Объект.ИтогоРазмерОборота = Объект.Услуги.Итог("РазмерОборота");
	Объект.ИтогоСтоимостьБезУчетаКосвенныхНалогов = Объект.Услуги.Итог("СтоимостьБезУчетаКосвенныхНалогов");
	Объект.ИтогоСуммаНДС = Объект.Услуги.Итог("СуммаНДС");
	Объект.ИтогоСтоимостьСУчетомКосвенныхНалогов = Объект.Услуги.Итог("СтоимостьСУчетомКосвенныхНалогов");
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	СтавкаНДСЧисло = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(СтавкаНДС,"Ставка");
	Возврат СтавкаНДСЧисло;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыНоменклатурыКПВЭД(Номенклатура)
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%ЕдиницаИзмерения", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	РеквизитЕдиницаИзмерения 	= СоответсвиеИменРеквизитов.Получить("%ЕдиницаИзмерения");
	РеквизитУслугаНаименование 	= "НаименованиеПолное";
	РеквизитСтавкаНДС	 	 	= "СтавкаНДС";
	
	ТекстПолучаемыеРеквизиты =  РеквизитЕдиницаИзмерения + ", " + РеквизитУслугаНаименование + ", " + РеквизитСтавкаНДС;
	
	РеквизитыНоменклатуры = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Номенклатура, ТекстПолучаемыеРеквизиты);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ЕдиницаИзмерения", РеквизитыНоменклатуры[РеквизитЕдиницаИзмерения]);
	СтруктураДанных.Вставить("УслугаНаименование", РеквизитыНоменклатуры[РеквизитУслугаНаименование]);
	СтруктураДанных.Вставить("СтавкаНДС", РеквизитыНоменклатуры[РеквизитСтавкаНДС]);
	
	Возврат СтруктураДанных;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЗаполнениеРеквизитовВСтроке(СтрокаДанных, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Ложь;
	
	Для каждого ТекРеквизит Из СтруктураРеквизитов Цикл
		Если ЗначениеЗаполнено(СтрокаДанных[ТекРеквизит.Ключ]) Тогда
			РеквизитыЗаполнены = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью "Статус"

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС ЭСФ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияЭСФ.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ИС ЭСФ, т.к. содержит ошибки'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%, по причине: ""%Причина%""'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Причина%", СокрЛП(Объект.Причина));
	Иначе
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = АВРКлиентСервер.ЦветСостоянияАВР(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораПоставщикаПолучателя(Элемент.Имя, "Покупатели");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПоставщикаПолучателя(ЭлементИмя, ИмяТаблицы)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭСФКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР());
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	Отказ = НЕ Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка;		
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	Отказ = НЕ Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ПараметрыВыбораНоменклатурыАВРНаСервере();
	
	АВРКлиентПереопределяемый.УслугаАВРНачалоВыбора(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораНоменклатурыАВРНаСервере()
	
	Возврат АВРСерверПереопределяемый.ПараметрыВыбораНоменклатурыАВРНаСервере();

КонецФункции

&НаСервере
Процедура УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей()
	
	ТипПоставщикПолучатель = Неопределено;
	
	Если Не ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ТипПоставщикПолучатель = Новый ОписаниеТипов("СправочникСсылка.Организации, СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	Если ТипПоставщикПолучатель <> Неопределено Тогда
		Элементы.Поставщик.ОграничениеТипа = ТипПоставщикПолучатель;	
		Элементы.Получатель.ОграничениеТипа = ТипПоставщикПолучатель;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

