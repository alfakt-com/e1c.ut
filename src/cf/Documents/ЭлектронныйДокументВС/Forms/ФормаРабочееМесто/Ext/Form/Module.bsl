
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ЗаполнитьШапку()
	
	Организация = ВССерверПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	СписокВыбора = Элементы.ВидДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ПервичныеДокументы.Тип.Типы() Цикл
		ОписаниеТипаСсылки = Новый ОписаниеТипов(ЗначениеВМассиве(Тип));
		СписокВыбора.Добавить(Тип, ОписаниеТипаСсылки);
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	ДатаОформления = ВСОбщегоНазначения.ТекущаяДатаПользователя();
	
	ПроводитьСозданныеДокументы = Ложь;
	
	ПараметрыЭДВС 		= ВССервер.ПолучитьПараметрыЭДВС();
	ЗначениеЦены 		= ПараметрыЭДВС.ЗначениеЦены;
	СпособЗаполненияЦены= ПараметрыЭДВС.СпособЗаполненияЦены;
	ТипЦены 			= ПараметрыЭДВС.ТипЦены;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьШапку();
	
	ПодготовитьФормуНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		
		Элементы.СписокЭлектронныйДокументВС.Обновить();
		
	ИначеЕсли ИмяСобытия = "ВС_ПроверятьОповещенияФоновогоЗадания"
		И ЭтаФорма.КлючУникальности = Источник Тогда
		
		ВСКлиентПереопределяемый.ОбработкаОповещенияВС_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаДокументовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ПоТипуЦены") Тогда
		Форма.Элементы.ТипЦены.Видимость 		= Истина;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Ложь; 
		Форма.ЗначениеЦены						= 0;
	ИначеЕсли Форма.СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособЗаполненияЦеныЭДВС.ФиксированнымЗначением") Тогда
		Форма.Элементы.ТипЦены.Видимость 		= Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Истина;
		Форма.ТипЦены							= Неопределено;
	Иначе
		Форма.Элементы.ТипЦены.Видимость 		= Ложь;
		Форма.Элементы.ЗначениеЦены.Видимость 	= Ложь; 
		Форма.ЗначениеЦены						= 0;
		Форма.ТипЦены							= Неопределено;
	КонецЕсли;	

	Форма.Элементы.НадписьСписокСозданныхЭДВС.Видимость = Форма.СписокЭДВС.Количество() <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияЦеныПриИзменении(Элемент)
	
	ПараметрыЭДВС 		= ВСВызовСервераПовтИсп.ПолучитьПараметрыЭДВС();
	ЗначениеЦены 		= ПараметрыЭДВС.ЗначениеЦены;
	ТипЦены 			= ПараметрыЭДВС.ТипЦены;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПровестиНаСервере(МассивДокументов)
	
	Для Каждого ЭлементМассив Из МассивДокументов Цикл
		ЭДВС = ЭлементМассив.ПолучитьОбъект();
		Попытка 
			ЭДВС.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'При проведении документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеНаСервере(МассивДокументов)
	
	Для Каждого ЭлементМассив Из МассивДокументов Цикл
		ЭДВС = ЭлементМассив.ПолучитьОбъект();
		Попытка 
			ЭДВС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ТекстСообщения = НСтр("ru = 'При отмене проведения документа ""%1"" произошла ошибка: %2'");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭДВС, ПодробноеПредставлениеОшибки);
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
    
	НачалоПериода 	= НачалоКвартала(ВСОбщегоНазначения.ТекущаяДатаПользователя());
	КонецПериода 	= КонецКвартала(ВСОбщегоНазначения.ТекущаяДатаПользователя());
	
	ОбновитьДанныеФормыНаСервере();																		   
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСписокДокументовКОформлению()
	
	//Устнавливаем отбор по периоду
	ГруппаОтбораПериода = 
		ВСКлиентСерверПереопределяемый.СоздатьГруппуЭлементовОтбора(
			ВСКлиентСерверПереопределяемый.ОтборДинамическогоСписка(СписокДокументовКОформлению).Элементы,
			"ГруппаОтбораПериода", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПериода,
		"ДатаДокумента", 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
		НачалоПериода,
		,
		Истина);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(ГруппаОтбораПериода,
		"ДатаДокумента",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
		КонецДня(КонецПериода),
		,
		Истина);
		
	//Устнавливаем отбор по Организация	
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКОформлению,	
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));			
		
	//Устнавливаем отбор по виду документа	
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКОформлению,	
		"ВидДокумента",
		ВидДокумента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ВидДокумента));			
	
	//Устнавливаем отбор по складу
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКОформлению,	
		"Склад",
		Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Склад));			
		
		
	//Устнавливаем отбор по статусу
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКОформлению,	
		"Статус",
		Перечисления.СтатусыОформленияДокументов.КОформлению,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСписокДокументовКПереоформлению()
	
	//Устнавливаем отбор по периоду
	ГруппаОтбораПериода = 
		ВСКлиентСерверПереопределяемый.СоздатьГруппуЭлементовОтбора(
			ВСКлиентСерверПереопределяемый.ОтборДинамическогоСписка(СписокДокументовКПереоформлению).Элементы,
			"ГруппаОтбораПериода", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПериода,
		"ДатаДокумента", 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
		НачалоПериода,
		,
		Истина);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(ГруппаОтбораПериода,
		"ДатаДокумента",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
		КонецДня(КонецПериода),
		,
		Истина);
		
	//Устнавливаем отбор по Организация	
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКПереоформлению,	
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация));			
		
	//Устнавливаем отбор по виду документа	
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКПереоформлению,	
		"ВидДокумента",
		ВидДокумента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ВидДокумента));			
	
	//Устнавливаем отбор по статусу
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовКПереоформлению,	
		"Статус",
		Перечисления.СтатусыОформленияДокументов.КПереоформлению,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатусыОформленияДокументов()
	
	ОбновитьДанныеСписокДокументовКОформлению();
	
	ОбновитьДанныеСписокДокументовКПереоформлению();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	
	//Устнавливаем отбор по периоду
	ГруппаОтбораПериода = 
		ВСКлиентСерверПереопределяемый.СоздатьГруппуЭлементовОтбора(
			ВСКлиентСерверПереопределяемый.ОтборДинамическогоСписка(СписокЭлектронныйДокументВС).Элементы,
			"ГруппаОтбораПериода", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(
		ГруппаОтбораПериода,
		"Дата", 
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
		НачалоПериода,
		,
		Истина);
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(ГруппаОтбораПериода,
		"Дата",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
		КонецДня(КонецПериода),
		,
		Истина);
		
	////Устнавливаем отбор по Организация	
	ГруппаОтбораОрганизация = 
		ВСКлиентСерверПереопределяемый.СоздатьГруппуЭлементовОтбора(
			ВСКлиентСерверПереопределяемый.ОтборДинамическогоСписка(СписокЭлектронныйДокументВС).Элементы,
			"ГруппаОтбораОрганизация", 
			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
		
	
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(
		ГруппаОтбораОрганизация,
		"Получатель", 
		ВидСравненияКомпоновкиДанных.Равно, 
		Организация,
		,
		ЗначениеЗаполнено(Организация));
		
	ВСКлиентСерверПереопределяемый.ДобавитьЭлементКомпоновки(
		ГруппаОтбораОрганизация,
		"Отправитель",
		ВидСравненияКомпоновкиДанных.Равно, 
		Организация,
		,
		ЗначениеЗаполнено(Организация));
	
	//Устнавливаем отбор по типу формы	
	ВСКлиентСерверПереопределяемый.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЭлектронныйДокументВС,	
		"ТипФормы",
		ТипФормы,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ТипФормы));			

	ОбновитьДанныеСтатусыОформленияДокументов();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	ЗаголовокОтчета = НСтр("ru='Документы к оформлению %1'");
	ЗаголовокОтчета = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, ВСКлиентСервер.ПолучитьПредставлениеПериода(Форма.НачалоПериода, Форма.КонецПериода));
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьДокументыНаСервере(ПараметрыСоздания)
	
	СписокЭДВС.ЗагрузитьЗначения(ЭСФСерверПовтИсп.ОбработкаОбменЭСФ().СоздатьСписокЭлектронныхДокументовВС(ПараметрыСоздания));
	Элементы.НадписьСписокСозданныхЭДВС.Видимость = СписокЭДВС.Количество() <> 0;

	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

&НаСервере
Процедура СнятьСОформленияНаСервере(Документ)
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	НаборЗаписей.Записать();

КонецПроцедуры

// Создает массив и помещает в него переданное значение.
Функция ЗначениеВМассиве(Значение) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Значение);
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы  

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКОформлению" Тогда
		ОбновитьДанныеСписокДокументовКОформлению();
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлению" Тогда
		ОбновитьДанныеСписокДокументовКПереоформлению();
	Иначе
		ОбновитьДанныеСписокДокументовКОформлению();
		ОбновитьДанныеСписокДокументовКПереоформлению();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", 
	ПараметрыВыбора, 
	Элементы.ВыбратьПериод, 
	, 
	, 
	, 
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьДокументы(Команда)
	
	СписокЭДВС.Очистить();
	Элементы.НадписьСписокСозданныхЭДВС.Видимость = СписокЭДВС.Количество() <> 0;
	
	Если Элементы.СписокДокументовКОформлению.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат
	КонецЕсли;	
		
	МассивДокументовПриход				= Новый Массив;
	МассивДокументовЭСФ					= Новый Массив;
	МассивДокументовРасходПриход		= Новый Массив;
	МассивДокументовРасход				= Новый Массив;
	
	МассивВидовДокументаПриход			= Новый Массив;
	МассивВидовДокументаЭСФ				= Новый Массив;
	МассивВидовДокументаРасходПриход	= Новый Массив;
	МассивВидовДокументаРасход			= Новый Массив;
	
	МассивСообщений 					= Новый Массив;
	МассивДокументовДляПереоформления 	= Новый Массив;
	МассивВидовПереоформляемыхДокументов= Новый Массив;
	
	МассивВидовДвижений					= Новый Массив;
	МассивВидовДвижений.Добавить("Приход");
	МассивВидовДвижений.Добавить("ЭСФ");
	МассивВидовДвижений.Добавить("РасходПриход");
	МассивВидовДвижений.Добавить("Расход");
	
	СоответсвиеДляОтбораПоСкладу 		= Новый Соответствие;
	
	СоответствиеТипДокументаВидДвижения = ВСКлиентСерверПереопределяемый.ПолучитьСоответствиеТипДокументаВидДвижения();
	
	СписокПервичныхДокументов			= Новый СписокЗначений;
	
	Для Каждого ИдентификаторСтроки Из Элементы.СписокДокументовКОформлению.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокДокументовКОформлению.ДанныеСтроки(ИдентификаторСтроки);	
		ТипДокумента = ТипЗнч(ДанныеСтроки.Документ);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ЭлектронныйДокументВС) 
				И СписокПервичныхДокументов.НайтиПоЗначению(ДанныеСтроки.Документ) = Неопределено Тогда
			СписокПервичныхДокументов.Добавить(ДанныеСтроки.Документ);
			Если МассивВидовПереоформляемыхДокументов.Найти(ТипДокумента) = Неопределено Тогда
				МассивВидовПереоформляемыхДокументов.Добавить(ТипДокумента);
			КонецЕсли;	
		КонецЕсли;	
		
		ВидДвижения = СоответствиеТипДокументаВидДвижения.Получить(ТипДокумента);
		Если ВидДвижения = Неопределено Тогда
			 Возврат;
		КонецЕсли;
		
		Если ВидДвижения = "Приход" Тогда
			МассивВидовДокумента 	= МассивВидовДокументаПриход;
			МассивДокументов		= МассивДокументовПриход;
		ИначеЕсли ВидДвижения = "ЭСФ" Тогда
			МассивВидовДокумента 	= МассивВидовДокументаЭСФ;
			МассивДокументов		= МассивДокументовЭСФ;
		ИначеЕсли ВидДвижения = "РасходПриход" Тогда
			МассивВидовДокумента 	= МассивВидовДокументаРасходПриход;
			МассивДокументов		= МассивДокументовРасходПриход;
		Иначе
			МассивВидовДокумента 	= МассивВидовДокументаРасход;
			МассивДокументов		= МассивДокументовРасход;
		КонецЕсли;	
		Если МассивВидовДокумента.Найти(ТипДокумента) = Неопределено Тогда
			МассивВидовДокумента.Добавить(ТипДокумента);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ЭлектронныйДокументВС) Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Документ);
			
			МассивСкладовДокумента = СоответсвиеДляОтбораПоСкладу.Получить(ДанныеСтроки.Документ);
			Если МассивСкладовДокумента = Неопределено Тогда
				МассивСкладовДокумента = Новый Массив;
			КонецЕсли;	
			МассивСкладовДокумента.Добавить(ДанныеСтроки.Склад);
			СоответсвиеДляОтбораПоСкладу.Вставить(ДанныеСтроки.Документ, МассивСкладовДокумента); 
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивДокументовЭСФ.Количество() > 0 Тогда
		ВСВызовСервера.ИсключитьЭСФНеОтраженныеВУчете(МассивДокументовЭСФ, Истина);
	КонецЕсли;	
	
	СоответсвиеМассивовДокументов = Новый Соответствие;
	СоответсвиеМассивовДокументов.Вставить("Приход"			, МассивДокументовПриход);
	СоответсвиеМассивовДокументов.Вставить("ЭСФ"			, МассивДокументовЭСФ);
	СоответсвиеМассивовДокументов.Вставить("РасходПриход"	, МассивДокументовРасходПриход);
	СоответсвиеМассивовДокументов.Вставить("Расход"			, МассивДокументовРасход);
	
	СоответсвиеМассивовВидовДокумента = Новый Соответствие;
	СоответсвиеМассивовВидовДокумента.Вставить("Приход"			, МассивВидовДокументаПриход);
	СоответсвиеМассивовВидовДокумента.Вставить("ЭСФ"			, МассивВидовДокументаЭСФ);
	СоответсвиеМассивовВидовДокумента.Вставить("РасходПриход"	, МассивВидовДокументаРасходПриход);
	СоответсвиеМассивовВидовДокумента.Вставить("Расход"			, МассивВидовДокументаРасход);
	
	ПараметрыСоздания = Новый Структура;
	
	ПараметрыСоздания.Вставить("СоответсвиеМассивовДокументов"		, СоответсвиеМассивовДокументов);
	ПараметрыСоздания.Вставить("СоответсвиеМассивовВидовДокумента"	, СоответсвиеМассивовВидовДокумента);
	ПараметрыСоздания.Вставить("МассивВидовДвижений"				, МассивВидовДвижений);
	
	Если ЗначениеЗаполнено(ДатаОформления) Тогда
		ПараметрыСоздания.Вставить("ДатаОформления"	, ДатаОформления);
	КонецЕсли;
	
	ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы" 	, ПроводитьСозданныеДокументы);
	ПараметрыСоздания.Вставить("ФормироватьСписокДокументов" 	, Истина);
	ПараметрыСоздания.Вставить("СоответсвиеДляОтбораПоСкладу"	, СоответсвиеДляОтбораПоСкладу);
	ПараметрыСоздания.Вставить("НеРазбиватьДокумент"			, Ложь);
	ПараметрыСоздания.Вставить("СпособЗаполненияЦены"			, СпособЗаполненияЦены);
	ПараметрыСоздания.Вставить("ТипЦены"						, ТипЦены);
	ПараметрыСоздания.Вставить("ЗначениеЦены"					, ЗначениеЦены);
	ПараметрыСоздания.Вставить("ДатаНачала"						, НачалоДня(НачалоПериода));
	ПараметрыСоздания.Вставить("ДатаОкончания"					, КонецДня(КонецПериода));
	
	ОформитьДокументыНаСервере(ПараметрыСоздания);
	
	Если СписокПервичныхДокументов.Количество() <> 0 Тогда
		СписокВидовПервичныхДокументов = Новый СписокЗначений;
		СписокВидовПервичныхДокументов.ЗагрузитьЗначения(МассивВидовПереоформляемыхДокументов);
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("СписокПервичныхДокументов"		, СписокПервичныхДокументов);
		ПараметрыСоздания.Вставить("СписокВидовПервичныхДокументов"	, СписокВидовПервичныхДокументов);
		ПараметрыСоздания.Вставить("ДатаОформления"				 	, ДатаОформления);
		ПараметрыСоздания.Вставить("НачалоПериода"				 	, НачалоПериода);
		ПараметрыСоздания.Вставить("КонецПериода"				 	, КонецПериода);
		ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	, ПроводитьСозданныеДокументы);
		ПараметрыСоздания.Вставить("ЗначениеЦены"				 	, ЗначениеЦены);
		ПараметрыСоздания.Вставить("ТипЦены"				 		, ТипЦены);
		ПараметрыСоздания.Вставить("СпособЗаполненияЦены"			, СпособЗаполненияЦены);
		
		ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаПереоформлениеДокументов", ПараметрыСоздания,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьДанныеСтатусыОформленияДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФормыПриИзменении(Элемент)
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СписокЭДВС.Очистить();
	Элементы.НадписьСписокСозданныхЭДВС.Видимость = СписокЭДВС.Количество() <> 0;
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовКОформлениюПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДокументовКОформлению.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "СписокДокументовКОформлениюДокумент" Тогда 
		Документ = ТекущиеДанные.Документ;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокДокументовКОформлениюЭлектронныйДокументВС" Тогда 	
		Документ = ТекущиеДанные.ЭлектронныйДокументВС;
	Иначе 
		Документ = Неопределено;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Документ) Тогда 
		ПоказатьЗначение(, Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовКПереоформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДокументовКПереоформлению.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлениюДокумент" Тогда 
		Документ = ТекущиеДанные.Документ;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлениюЭлектронныйДокументВС" Тогда 	
		Документ = ТекущиеДанные.ЭлектронныйДокументВС;
	Иначе 
		Документ = Неопределено;
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Документ) Тогда 
		ПоказатьЗначение(, Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовКПереоформлениюПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКОформлению" Тогда
		ИмяЭлементаСписка = "СписокДокументовКОформлению"
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлению" Тогда
		ИмяЭлементаСписка = "СписокДокументовКПереоформлению"	
	Иначе 
		Возврат;
	КонецЕсли;	
	
	МассивДокументов = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы[ИмяЭлементаСписка].ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы[ИмяЭлементаСписка].ДанныеСтроки(ИдентификаторСтроки);	
		Если ЗначениеЗаполнено(ДанныеСтроки.ЭлектронныйДокументВС) Тогда
			МассивДокументов.Добавить(ДанныеСтроки.ЭлектронныйДокументВС);
		КонецЕсли;	
	КонецЦикла;

	ПровестиНаСервере(МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведение(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКОформлению" Тогда
		ИмяЭлементаСписка = "СписокДокументовКОформлению"
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлению" Тогда
		ИмяЭлементаСписка = "СписокДокументовКПереоформлению"	
	Иначе 
		Возврат;
	КонецЕсли;	
	МассивДокументов = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из Элементы[ИмяЭлементаСписка].ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы[ИмяЭлементаСписка].ДанныеСтроки(ИдентификаторСтроки);	
		Если ЗначениеЗаполнено(ДанныеСтроки.ЭлектронныйДокументВС) Тогда
			МассивДокументов.Добавить(ДанныеСтроки.ЭлектронныйДокументВС);
		КонецЕсли;	
	КонецЦикла;
	
	ОтменитьПроведениеНаСервере(МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭлектронныйДокументВСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокЭлектронныйДокументВС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле.ГиперссылкаЯчейки Тогда
		Документ = ТекущиеДанные.ДокументОснование;
		Если ЗначениеЗаполнено(Документ) Тогда 
			ПоказатьЗначение(, Документ);
		КонецЕсли;	
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
	
	Если Элементы.СписокДокументовКПереоформлению.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат
	КонецЕсли;	
	
	МассивВидовПереоформляемыхДокументов= Новый Массив;
	МассивДокументовДляПереоформления 	= Новый Массив;
	СписокПервичныхДокументов			= Новый СписокЗначений;
	
	Для Каждого ИдентификаторСтроки Из Элементы.СписокДокументовКПереоформлению.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокДокументовКПереоформлению.ДанныеСтроки(ИдентификаторСтроки);	
		ТипДокумента = ТипЗнч(ДанныеСтроки.Документ);
		Если СписокПервичныхДокументов.НайтиПоЗначению(ДанныеСтроки.Документ) = Неопределено Тогда
			СписокПервичныхДокументов.Добавить(ДанныеСтроки.Документ);
			Если МассивВидовПереоформляемыхДокументов.Найти(ТипДокумента) = Неопределено Тогда
				МассивВидовПереоформляемыхДокументов.Добавить(ТипДокумента);
			КонецЕсли;	
		КонецЕсли;	
		
		МассивТипа = Новый Массив;
	КонецЦикла;
	
	Если СписокПервичныхДокументов.Количество() <> 0 Тогда
		СписокВидовПервичныхДокументов = Новый СписокЗначений;
		СписокВидовПервичныхДокументов.ЗагрузитьЗначения(МассивВидовПереоформляемыхДокументов);
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("СписокПервичныхДокументов"		, СписокПервичныхДокументов);
		ПараметрыСоздания.Вставить("СписокВидовПервичныхДокументов"	, СписокВидовПервичныхДокументов);
		ПараметрыСоздания.Вставить("ДатаОформления"				 	, ДатаОформления);
		ПараметрыСоздания.Вставить("НачалоПериода"				 	, НачалоПериода);
		ПараметрыСоздания.Вставить("КонецПериода"				 	, КонецПериода);
		ПараметрыСоздания.Вставить("ПроводитьСозданныеДокументы"	, ПроводитьСозданныеДокументы);
		ПараметрыСоздания.Вставить("ЗначениеЦены"				 	, ЗначениеЦены);
		ПараметрыСоздания.Вставить("ТипЦены"				 		, ТипЦены);
		ПараметрыСоздания.Вставить("СпособЗаполненияЦены"			, СпособЗаполненияЦены);
		
		ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаПереоформлениеДокументов", ПараметрыСоздания,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокСозданныхЭДВСНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокЭДВС.ВыгрузитьЗначения())));
	ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаСписка", ПараметрыФормы,ЭтаФорма, Истина,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСОформления(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ИмяЭлемента = "";
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКОформлению" Тогда
		ИмяЭлемента = "СписокДокументовКОформлению" ;
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлению" Тогда
		ИмяЭлемента = "СписокДокументовКПереоформлению" ;
	КонецЕсли;
	
	Если  ИмяЭлемента = "" ИЛИ Элементы[ИмяЭлемента].ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	Для Каждого ИдентификаторСтроки Из Элементы[ИмяЭлемента].ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы[ИмяЭлемента].ДанныеСтроки(ИдентификаторСтроки);	
		Документ = ДанныеСтроки.Документ;
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		СнятьСОформленияНаСервере(Документ);
	КонецЦикла;

	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКОформлению" Тогда
		ОбновитьДанныеСписокДокументовКОформлению();
	ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "СписокДокументовКПереоформлению" Тогда
		ОбновитьДанныеСписокДокументовКПереоформлению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти