#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭСФСерверПереопределяемый.ЭСФПриСозданииНаСервере(ЭтаФорма);
	
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		Элементы.СтруктурноеПодразделение.Видимость = Истина;
	КонецЕсли;
	
	//++ НЕ ЭСФ
	ИспользуетсяСНТ = ВССервер.ИспользоватьСНТ();
	Если Не ИспользуетсяСНТ Тогда
		Элементы.ПредставлениеСНТ.Видимость = Ложь;
		Элементы.ФормаПерезаполнитьПоСНТ.Видимость = Ложь;
	КонецЕсли;
	//-- НЕ ЭСФ
		
	Если Параметры.Свойство("ТолькоПросмотр") И Параметры.ТолькоПросмотр = Истина Тогда 
		РежимТолькоПросмотр = Истина;
		Элементы.Причина.Видимость = Истина;
	КонецЕсли;
	
	ВедетсяУчетПоТоварамОрганизацийНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата); 

	// в УПК нет 
	ВедетсяУчетПоТоварамОрганизацийБУ = ЭСФСерверПереопределяемый.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	ВыпискаБумажногоЭСФ = (ЗначениеЗаполнено(Объект.ДатаВыпискиНаБумажномНосителе) Или ЗначениеЗаполнено(Объект.ПричинаВыпискиНаБумажномНосителе));
	БезДоговора = НЕ (ЗначениеЗаполнено(Объект.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(Объект.ДоговорПоставкиДата));
	
	УправлениеФормой();
	
	ПоставщикиПолучателиУстановитьТекущуюСтрокуИРежимРедактирования();
		
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей();
		ЗаполнитьДопРеквизитыТаблицТоваровПоУчастникамСД();
		ЗаполнитьТаблицуОшибок(Объект.Ошибки);
		ЗаполнитьТекстПоступлениеТоваров();
		ЗаполнитьТекстПоступлениеУслугПрочихАктивов();
	КонецЕсли;
	
	
	ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
	ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
	
	Если Объект.Ссылка.Пустая() И ЭтаФорма.ВыпискаБумажногоЭСФ Тогда
		
		Элементы.ПричинаВыпискиНаБумажномНосителе.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	
	УстановитьВидимостьЭлементовГруппаПоступлениеТоваровУслуг();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Если ЭтаФорма.ТолькоПросмотр И Константы.ИспользоватьДатыЗапретаИзменения.Получить() Тогда
		Элементы.ФормаГруппаОтражение.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей();	
	ЗаполнитьДопРеквизитыТаблицТоваровПоУчастникамСД();
	ЗаполнитьТаблицуОшибок(ТекущийОбъект.Ошибки);
	ЗаполнитьТекстПоступлениеТоваров();
	ЗаполнитьТекстПоступлениеУслугПрочихАктивов();
	
	УправлениеФормой();
	
	УстановитьВидимостьЭлементовГруппаПоступлениеТоваровУслуг();
	
	ЭСФСерверПереопределяемый.ЭСФПриЧтенииНаСервере(ТекущийОбъект, ЭтаФорма);
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
		
	//++ НЕ ЭСФ
	
	НайтиЭДВСИЗаполнитьСсылкуНаСервере();
	
	//-- НЕ ЭСФ
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Контейнер = ЭСФКлиентСервер.КонтейнерМетодов();	
	Контейнер.ПриОткрытииФормы(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимТолькоПросмотр Тогда
		Если Объект.Ссылка.Пустая() Тогда
			// Установить признак модифицированности для нового,
			// чтобы при закрытии пользователю был задан вопрос.
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВСОбщегоНазначения.УстановитьЗаголовокФормыДокумента(, Объект.Ссылка, ЭтаФорма);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	НайденныеДокументыЭДВС = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЭлектронныйДокументВС") Тогда
		НайденныеДокументыЭДВС = ЭСФВызовСервера.НаличиеЭДВС(ВыбранноеЗначение);
	КонецЕсли;			
	
	Если ТипЗнч(ВыбранноеЗначение) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный()
		ИЛИ ТипЗнч(ВыбранноеЗначение) = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный() Тогда
		
		ОбработкаВыбораСчетаФактуры(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("КодСтроки") Тогда
			Если ИсточникВыбора.ИмяМакета = "ПФ_MXL_УсловияПоставки" Тогда
				
				Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
					Объект.ДоговорПоставкиУсловияПоставки = ВыбранноеЗначение;
					ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
				Иначе 
					Объект.ДоговорПоставкиУсловияПоставки				   = ВыбранноеЗначение.КодСтроки;
					Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = ВыбранноеЗначение.Наименование;
				КонецЕсли;
				
				Модифицированность = Истина;
				
			ИначеЕсли ИсточникВыбора.ИмяМакета = "ПФ_MXL_СпособыОтправления" Тогда
				
				Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда 
					Объект.СпособОтправленияПоКлассификатору = ВыбранноеЗначение;
					ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
				Иначе 
					Объект.СпособОтправленияПоКлассификатору				 = ВыбранноеЗначение.КодСтроки;
					Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = ВыбранноеЗначение.Наименование;
				КонецЕсли;
				
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	//++ НЕ ЭСФ	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СНТ") Тогда
		
		ОбработкаВыбораСНТ(ВыбранноеЗначение);
	//-- НЕ ЭСФ
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораСчетаФактуры(СчетФактура)
	
	ИзменитьСчетФактуру = Ложь;
	
	НайденныеДокументыЭДВС = ЭСФВызовСервера.НаличиеЭДВС(СчетФактура);
	
	Если ЗначениеЗаполнено(Объект.СчетФактура)
		И Объект.СчетФактура <> СчетФактура Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Документ уже отражен в учете с помощью ""%СтарыйСчетФактура%"".
			|Отразить документ в учете с помощью выбранного счета-фактуры?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйСчетФактура%", Объект.СчетФактура);
		
		ИзменитьСчетФактуруЗавершение = Новый ОписаниеОповещения("ИзменитьСчетФактуруЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", СчетФактура));
		ПоказатьВопрос(ИзменитьСчетФактуруЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	ИначеЕсли НайденныеДокументыЭДВС.Количество() > 0 Тогда	
			
			Для Каждого НайденныйДокумент Из НайденныедокументыЭДВС Цикл
				ТекстОшибки = НСтр("ru='На основании учетного документа уже введен %1. Рекомендуем отвязать ЭДВС от документа ""Приобретение товаров и услуг"", в противном случае образуются некорректные остатки!!!'");
				ТекстОшибки = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстОшибки, НайденныйДокумент);
				ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстОшибки);
			КонецЦикла;
	
	Иначе
		
		ИзменитьСчетФактуру = Истина;
		
	КонецЕсли;
	
	Если ИзменитьСчетФактуру Тогда
		Объект.СчетФактура = СчетФактура;
		СформироватьПредставлениеСчетаФактуры(ЭтаФорма);
		СформироватьПредставлениеОтзыва(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Модифицированность = Истина Тогда
		ЭтаФорма.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСчетФактуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.СчетФактура = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеСчетаФактуры(ЭтаФорма);
		СформироватьПредставлениеОтзыва(ЭтаФорма);
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ()
		ИЛИ ИмяСобытия = ЭСФКлиентСервер.ИмяСобытияЗаписьСторно() Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			УправлениеФормой();	
		Иначе
			ЭтаФорма.Прочитать();	
		КонецЕсли;
		
//++ НЕ ЭСФ
	ИначеЕсли ИмяСобытия = ВСКлиентСервер.ИмяСобытияЗаписьЭДВС() Тогда
		УправлениеФормой();
		НайтиЭДВСИЗаполнитьСсылкуНаСервере();
		
	ИначеЕсли ИмяСобытия = "ОтсоединениеСНТ" Тогда
		
		ОтвязатьЭСФВСНТ();
		Объект.СНТ = Неопределено;
		СформироватьПредставлениеСНТ(ЭтаФорма);
		Модифицированность = Истина;
		
	ИначеЕсли ИспользуетсяСНТ И ИмяСобытия = ВСКлиентСерверПереопределяемый.ИмяСобытияЗаписьСНТ() Тогда
		
		СформироватьПредставлениеСНТ(ЭтаФорма);
		Модифицированность = Истина;	
//-- НЕ ЭСФ

	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПриобретениеТоваровУслуг" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ЭСФ_СсылкаНаЭСФ")
			И Параметр.ЭСФ_СсылкаНаЭСФ = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
		Иначе
			ЗаполнитьТекстПоступлениеТоваров();
			УстановитьВидимостьЭлементовГруппаПоступлениеТоваровУслуг();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПриобретениеУслугПрочихАктивов" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ЭСФ_СсылкаНаЭСФ")
			И Параметр.ЭСФ_СсылкаНаЭСФ = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
		Иначе
			ЗаполнитьТекстПоступлениеУслугПрочихАктивов();
			УстановитьВидимостьЭлементовГруппаПоступлениеТоваровУслуг();
		КонецЕсли;
	КонецЕсли;

	Если (ИмяСобытия = "Запись_СчетФактураВыданный" ИЛИ ИмяСобытия = "Запись_СчетФактураПолученный")
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("АктуальныйЭСФ")
		И Параметр.АктуальныйЭСФ = Объект.Ссылка
		И Объект.СчетФактура <> Источник Тогда
		
		ОбработкаВыбораСчетаФактуры(Источник);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Отказ = РежимТолькоПросмотр;
	
	АктуальныйЭСФ = АктуальныйЭСФ(Объект.СчетФактура);
	Если АктуальныйЭСФ <> Неопределено И АктуальныйЭСФ <> Объект.Ссылка Тогда
		
		ПараметрыЗаписи.Вставить(ЭСФКлиентСервер.СделатьАктуальным(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СделатьАктуальным = ЭСФКлиентСервер.СделатьАктуальным();
	
	Если ПараметрыЗаписи.Свойство(СделатьАктуальным) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить(СделатьАктуальным, ПараметрыЗаписи[СделатьАктуальным]);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьЭСФ());
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Контрагенты") Тогда
				ТекущиеДанные.Поставщик = НовыйОбъект;
			Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.Контрагенты")
				ТекущиеДанные.Поставщик = НовыйОбъект.Ссылка;	
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ();
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СтандартнаяОбработка = Ложь;
				
		Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Объект.ДоговорПоставки = НовыйОбъект;
		Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.ДоговорыКонтрагентов")
			Объект.ДоговорПоставки = НовыйОбъект.Ссылка;	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда		
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ТекущиеДанные.Товар = НовыйОбъект;
			
		Иначе // ТипЗнч(НовыйОбъект) = Тип("СправочникОбъект.<Имя>")
			
			ТекущиеДанные.Товар = НовыйОбъект.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораСНТ(СНТ)
	
	//++ НЕ ЭСФ
	ИзменитьСНТ = Ложь;
		
	Если ЗначениеЗаполнено(Объект.СНТ)
		И Объект.СНТ <> СНТ Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Документ уже отражен в учете с помощью ""%СтарыйСНТ%"".
			|Отразить документ в учете с помощью выбранной СНТ?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СтарыйСНТ%", Объект.СНТ);
		
		ИзменитьСНТЗавершение = Новый ОписаниеОповещения("ИзменитьСНТЗавершение", ЭтаФорма, Новый Структура("ВыбранноеЗначение", СНТ));
		ПоказатьВопрос(ИзменитьСНТЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ИзменитьСНТ = Истина;
		
	КонецЕсли;
	
	Если ИзменитьСНТ Тогда
		Объект.СНТ = СНТ;
		СформироватьПредставлениеСНТ(ЭтаФорма);
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	
	//-- НЕ ЭСФ
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСНТЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ЭСФ
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Объект.СНТ = ДополнительныеПараметры.ВыбранноеЗначение;
		СформироватьПредставлениеСНТ(ЭтаФорма);
		Модифицированность = Истина;
		УправлениеФормой();
	КонецЕсли;
	//-- НЕ ЭСФ

КонецПроцедуры

&НаСервере
Процедура ОтвязатьЭСФВСНТ()
	//++ НЕ ЭСФ
	Если ЗначениеЗаполнено(Объект.СНТ) Тогда
		СНТ = Объект.СНТ.ПолучитьОбъект();
		Если СНТ.ДокументОснование = Объект.Ссылка Тогда
			СНТ.ДокументОснование = Неопределено;
		КонецЕсли;
		СНТ.Записать();
	КонецЕсли;
	//-- НЕ ЭСФ
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСсылкиНаСНТ()
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеСНТ", "Видимость", Объект.ОтражаетсяВВС);	
		
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Идентификатор) Тогда 
		ТекстСообщения = "";
		Элемент.ОтметкаНезаполненного = НЕ ЭСФКлиентСервер.ИдентификаторКорректен(Объект.Идентификатор, ТекстСообщения);
		Элемент.Подсказка 			  = ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Контрагент = Контрагент(Объект);
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СоответсвиеИменРеквизитов = Новый Соответствие;
		СоответсвиеИменРеквизитов.Вставить("%ИмяРеквизитаВладелецДоговора", "");
		
		ЭСФВызовСервера.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
		
		ИмяРеквизитаВладелецДоговора = СоответсвиеИменРеквизитов.Получить("%ИмяРеквизитаВладелецДоговора");
	
		Отбор.Вставить(ИмяРеквизитаВладелецДоговора, Контрагент);	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элементы.ДоговорПоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставкиПриИзменении(Элемент)
	
	ЗаполнитьДанныеПоДоговору();
	БезДоговора = НЕ (ЗначениеЗаполнено(Объект.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(Объект.ДоговорПоставкиДата));
	
	УстановитьВидимостьЭлементовДоговораПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	ВедетсяУчетПоТоварамОрганизацийБУ   = ЭСФСерверПереопределяемый.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	ВедетсяУчетПоТоварамОрганизацийНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура БезДоговораПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда
		БезДоговораПриИзмененииНаСервере();
	КонецЕсли;
	УстановитьВидимостьЭлементовДоговораПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоступлениеТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокПоступленияТоваровУслуг.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите документ'"));
		ПараметрыФормы.Вставить("МассивЗначений", СписокПоступленияТоваровУслуг.ВыгрузитьЗначения());
		
		ОткрытьФорму(
			"Обработка.ОбменЭСФ.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ЭтотОбъект,
			, , ,
			Новый ОписаниеОповещения("ТекстПоступлениеТоваровНажатиеПослеВыбораИзСписка", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ЗначениеЗаполнено(ПоступлениеТоваровУслуг) Тогда
		ПоказатьЗначение(, ПоступлениеТоваровУслуг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоступлениеТоваровНажатиеПослеВыбораИзСписка(ВыбранныйЭлемент, Контекст) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныйЭлемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ТекстПоступлениеУслугПрочихАктивовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокПоступленияУслугПрочихАктивов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выберите документ'"));
		ПараметрыФормы.Вставить("МассивЗначений", СписокПоступленияУслугПрочихАктивов.ВыгрузитьЗначения());
		
		ОткрытьФорму(
			"Обработка.ОбменЭСФ.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ЭтотОбъект,
			, , ,
			Новый ОписаниеОповещения("ТекстПоступлениеУслугПрочихАктивовНажатиеПослеВыбораИзСписка", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ЗначениеЗаполнено(ПоступлениеУслугПрочихАктивов) Тогда
		ПоказатьЗначение(, ПоступлениеУслугПрочихАктивов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПоступлениеУслугПрочихАктивовНажатиеПослеВыбораИзСписка(ВыбранныйЭлемент, Контекст) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьПоступлениеНажатие(Элемент)
	СоздатьПоступлениеНаОснованииЭСФ();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоздатьПоступлениеУслугПрочихАктивовНажатие(Элемент)
	СоздатьПоступлениеУслугПрочихАктивовНаОснованииЭСФ();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Ошибки.ТекущиеДанные;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекущиеДанные.ТекстИБ;
	Сообщение.Поле = ТекущиеДанные.ПолеИБ;
	Сообщение.Сообщить();
	
	// Активировать страницу на которой произошла ошибка.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяСтраницы) Тогда
			Страница = Элементы.Разделы.ПодчиненныеЭлементы.Найти(ТекущиеДанные.ИмяСтраницы);
			Если Страница <> Неопределено Тогда
				Элементы.Разделы.ТекущаяСтраница = Страница;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоставщики

&НаКлиенте
Процедура ПоставщикиПередУдалением(Элемент, Отказ)
	ЗапретитьИзменениеТаблицы(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ЗапретитьИзменениеТаблицы(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиПоставщикПриИзменении(Элемент)
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ(); 
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ(); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолучатели

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ЗапретитьИзменениеТаблицы(Отказ);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередУдалением(Элемент, Отказ)
	ЗапретитьИзменениеТаблицы(Отказ);	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ(); 
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПолучательПриИзменении(Элемент)
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ(); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыТовары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЗапретитьИзменениеТаблицы(Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ЗапретитьИзменениеТаблицы(Отказ);	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭСФКлиентПереопределяемый.ТоварыНомерГТДНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ТекстВопроса = НСтр(
		"ru = 'При изменении источника происхождения поля, зависящие от источника, будут перезаполнены.
        |Продолжить?'");

	ПерезаполнитьПоляИПЗавершение = Новый ОписаниеОповещения("ПерезаполнитьПоляИПЗавершение", ЭтаФорма);
	ПоказатьВопрос(ПерезаполнитьПоляИПЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоляИПЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПерезаполнитьПоляИПНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоляИПНаКлиенте() Экспорт
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	НомерГТД = СтрокаТабличнойЧасти.НомерГТД;
    СтруктураЗначенийИП = ПолучитьИсточникиИзНомераГТДНаСервере(НомерГТД);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтруктураЗначенийИП, "НомерЗаявленияВРамкахТС, НомерПозицииВДекларацииИлиЗаявлении, ПризнакПроисхождения, ТоварНаименованиеВРамкахТС, КодТНВЭД");
	
	Модифицированность = Истина; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИсточникПроисхождения = Неопределено;	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Прочие

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизиты(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Ложь);
	Иначе
		ТекстВопроса = НСтр("ru = 'Разрешить редактирование реквизитов документа?'");
		РедактироватьНедоступныеРеквизитыЗавершение = Новый ОписаниеОповещения("РедактироватьНедоступныеРеквизитыЗавершение", ЭтаФорма);
		ПоказатьВопрос(РедактироватьНедоступныеРеквизитыЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНедоступныеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РедактироватьНедоступныеРеквизитыНаСервере(Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РедактироватьНедоступныеРеквизитыНаСервере(Знач НовоеЗначениеПометки)
	
	Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка	= НовоеЗначениеПометки;
	
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСсылки(Команда)
	
	ТекстВопроса = НСтр(
		"ru = 'Все ссылки будут очищены и заполнены заново.
        |Продолжить?'");
		
	ПерезаполнитьСсылкиЗавершение = Новый ОписаниеОповещения("ПерезаполнитьСсылкиЗавершение", ЭтаФорма);
	ПоказатьВопрос(ПерезаполнитьСсылкиЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПерезаполнитьСсылкиНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСсылкиНаСервере()
	
	МассивЭСФ = Новый Массив;
	МассивЭСФ.Добавить(Объект);
	
	ЭСФСервер.ЗаполнитьСсылочныеРеквизитыДокументовЭСФ(Объект.Направление, МассивЭСФ);
	
	ЗаполнитьДопРеквизитыТаблицТоваровПоУчастникамСД();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоСчетуФактуре(Команда)	
	ПерезаполнитьПоСчетуФактуреНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоСчетуФактуреНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		Сообщить(НСтр("ru = 'Невозможно перезаполнить по счету-фактуре, так как счет-фактура не указан.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован
		ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно перезаполнить, так как электронный счет-фактура %Состояние%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", НРег(Объект.Состояние));
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ОбъектЭСФ = РеквизитФормыВЗначение("Объект");
	ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ);
	ЭСФСервер.ЗаполнитьИсходящийЭСФ(Объект.СчетФактура, ОбъектЭСФ);	
	ЗначениеВРеквизитФормы(ОбъектЭСФ, "Объект");
	
	ЗаполнитьДопРеквизитыТаблицТоваровПоУчастникамСД();	
	ПоставщикиПолучателиУстановитьТекущуюСтрокуИРежимРедактирования();	
	Модифицированность = Истина;
	БезДоговора = НЕ (ЗначениеЗаполнено(Объект.ДоговорПоставкиНомер) ИЛИ ЗначениеЗаполнено(Объект.ДоговорПоставкиДата));
	УстановитьВидимостьЭлементовДоговораПоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикиРедактироватьСписком(Команда)
	УстановитьВозможностьРедактированияСписком("Поставщики");
КонецПроцедуры

&НаКлиенте
Процедура ПокупателиРедактироватьСписком(Команда)
	УстановитьВозможностьРедактированияСписком("Получатели");
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТоварыПоПолучателям(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Если Объект.Получатели.Количество() <> 0 Тогда
			Если Объект.Получатели[0].УчастникСовместнойДеятельности 
				ИЛИ Объект.Получатели[0].УчастникСРП Тогда
				ПерезаполнитьТоварыПоПолучателямНаСервере();
			Иначе
				Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как в разделе ""C. Получатели"" нет участников совместной деятельности или участников СРП.'"));	
			КонецЕсли;
		Иначе
			Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как раздел ""C. Получатели"" - пустой.'"));	
		КонецЕсли;
	Иначе
		Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как не включен режим редактирования документа.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТоварыПоПолучателямНаСервере()
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ЗаполнитьТаблицуТоварыПоПолучателямПоТаблицеУчастниковСД(Объект.Получатели, Объект);
	ЗаполнитьДопРеквизитыОднойТаблицыТоваровПоУчастникамСД("ТоварыПоПолучателям");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТоварыПоПоставщикам(Команда)
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Если Объект.Поставщики.Количество() <> 0 Тогда
			Если Объект.Поставщики[0].УчастникСовместнойДеятельности 
				ИЛИ Объект.Поставщики[0].УчастникСРП Тогда
				ПерезаполнитьТоварыПоПоставщикамНаСервере();
			Иначе
				Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как в разделе ""B. Поставщики"" нет участников совместной деятельности или участников СРП.'"));	
			КонецЕсли;
		Иначе
			Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как раздел ""B. Поставщики"" - пустой.'"));	
		КонецЕсли;
	Иначе
		Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как не включен режим редактирования документа.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьТоварыПоПоставщикамНаСервере()
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ЗаполнитьТаблицуТоварыПоПоставщикамПоТаблицеУчастниковСД(Объект.Поставщики, Объект);
	ЗаполнитьДопРеквизитыОднойТаблицыТоваровПоУчастникамСД("ТоварыПоПоставщикам");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДолиУчастия(Команда)
	
	Если Объект.ТоварыПоПоставщикам.Количество() <> 0 Тогда
		
		ЗаполнитьДолиУчастияНаСервере();
		
	Иначе
		
		Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как таблица ""Товары по поставщикам"" раздела ""H. Участники СД"" - пустая.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолиУчастияНаСервере()
	
	Если Объект.Поставщики.Количество() <> 0 Тогда 
		
		Если Объект.Поставщики[0].УчастникСовместнойДеятельности Тогда
			
			ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
			УдалосьЗаполнитьДолиПоставщиков = ОбработкаОбменЭСФ.ЗаполнитьДолиУчастияПоставщиков(Объект);
			
			Если НЕ УдалосьЗаполнитьДолиПоставщиков Тогда
				Сообщить(ОбработкаОбменЭСФ.ТекстНеУдалосьЗаполнитьДолиУчастниковСД());
			КонецЕсли;
			
		Иначе
			
			Сообщить(НСтр("ru = 'Не удалось выполнить действие, так как поставщики не являются участниками совместной деятельности.'"));
			
		КонецЕсли;
		
	Иначе
		
		Сообщить(НСтр("ru = 'Не удалось выполнить действие, так как таблица поставщиков пустая.'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СчетФактура

&НаКлиенте
Процедура ОткрытьСчетФактуру(Команда)
	
	Если ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ПоказатьЗначение(, Объект.СчетФактура);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуру(Команда)
	СоздатьСчетФактуруНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюИСчетФактуру(Команда)
	СоздатьСчетФактуруНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруНаКлиенте(СоздаватьНакладную = Ложь)
	
	ЭСФКлиентУТ.ВыполнитьПроверкуЗаписиДокументов(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СоздатьСчетФактуруНаКлиентеПослеЗаписиДокумента", ЭтотОбъект, Новый Структура("СоздаватьНакладную", СоздаватьНакладную)));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруНаКлиентеПослеЗаписиДокумента(Результат, Контекст) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьСчетФактуру = Истина;
	ТекстВопроса = "";
	
	Если СоздатьСчетФактуру И НЕ СсылочныеРеквизитыДляСозданияСчетаФактурыЗаполнены() Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Документ имеет незаполненные ссылочные реквизиты.
			|Продолжить?'");
		
	КонецЕсли;

	Если СоздатьСчетФактуру И ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ТекстВопроса = НСтр(
			"ru = 'Документ уже отражен в учете: ""%СчетФактура%"".
			|Создать новый счет-фактуру?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СчетФактура%", Объект.СчетФактура);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьСчетФактуруНаКлиентеЗавершение", ЭтотОбъект, Контекст),
			ТекстВопроса,
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СоздатьСчетФактуруНаКлиентеФрагмент(СоздатьСчетФактуру, Контекст.СоздаватьНакладную);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруНаКлиентеФрагмент(СоздатьСчетФактуру, СоздатьНакладную) Экспорт
	
	Если СоздатьНакладную И СоздатьСчетФактуру Тогда
		Если Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Исправленный")
			ИЛИ Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
			
			ПараметрыФормы = Новый Структура("Основание, ЭСФ_СсылкаНаЭСФ, ЭСФ_СоздатьСчетФактуру, Дата", Объект.Ссылка, Объект.Ссылка, Истина, Объект.ДатаОборота);
			ОткрытьФорму("Документ.КорректировкаПриобретения.Форма.ФормаДокумента", ПараметрыФормы);
			
		Иначе
			ПараметрыФормы = Новый Структура("Основание, ЭСФ_СсылкаНаЭСФ, ЭСФ_СоздатьСчетФактуру, Дата", Объект.Ссылка, Объект.Ссылка, Истина, Объект.ДатаОборота);
			ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
	ИначеЕсли СоздатьСчетФактуру Тогда
		ПараметрыФормы = Новый Структура("Основание, ЭСФ_СсылкаНаЭСФ", Объект.Ссылка, Объект.Ссылка);
		ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДокументИмеетНезаполненныеСсылочныеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если ЗначениеЗаполнено(Объект.СчетФактура) Тогда
			
			ТекстВопроса = НСтр(
				"ru = 'Документ уже отражен в учете: ""%СчетФактура%"".
				|Создать новый счет-фактуру?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СчетФактура%", Объект.СчетФактура);
			
			СоздатьСчетФактуруНаКлиентеЗавершение = Новый ОписаниеОповещения("СоздатьСчетФактуруНаКлиентеЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьСчетФактуруНаКлиентеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			СоздатьСчетФактуруНаКлиентеЗавершение(КодВозвратаДиалога.ОК, Неопределено);	
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуруНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		СоздатьСчетФактуруНаКлиентеФрагмент(Истина, ДополнительныеПараметры.СоздаватьНакладную);
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетФактуру(Команда)
	ВыбратьСчетФактуруНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСчетФактуруНаКлиенте()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указано направление документа.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ТипСчетаФактуры = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураПолученный();
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		ТипСчетаФактуры = ЭСФКлиентСерверПереопределяемый.ТипДокументСсылкаСчетФактураВыданный();
	КонецЕсли;
	
	ЭСФКлиентПереопределяемый.ОткрытьФормуВыбораСчетаФактуры(ЭтаФорма, ТипСчетаФактуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетФактуру(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
		Возврат;
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
		ОбновитьСчетФактуруПослеЗаписи = Новый ОписаниеОповещения("ОбновитьСчетФактуруПослеЗаписи", ЭтаФорма);	
		ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ОбновитьСчетФактуруПослеЗаписи);
	Иначе
		ОбновитьСчетФактуруПослеЗаписи(КодВозвратаДиалога.ОК, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетФактуруПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			ТекстВопроса = НСтр("ru = 'Обновить ""%СчетФактура%"" на основании данного документа?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СчетФактура%", Объект.СчетФактура);
			ОбновитьСчетФактуруЗавершение = Новый ОписаниеОповещения("ОбновитьСчетФактуруЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОбновитьСчетФактуруЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетФактуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОбновитьСчетФактуруНаСервере();
		ЭСФКлиент.ОповеститьФормы(ЭСФКлиентСервер.ИмяСобытияЗаписьСчетаФактуры(), Объект.СчетФактура);	
		ПоказатьПредупреждение(, НСтр("ru = 'Счет-фактура успешно обновлен.'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетФактуруНаСервере()
	
	ОбъектСчетФактура = Объект.СчетФактура.ПолучитьОбъект();
	ЭСФСервер.ЗаполнитьСчетФактуруПолученный(Объект.Ссылка, ОбъектСчетФактура);
	ОбъектСчетФактура.ДополнительныеСвойства.Вставить("ОтключитьПроверкуИзменений");
	ОбъектСчетФактура.Записать();
	
	СформироватьПредставлениеСчетаФактуры(ЭтаФорма);
	СформироватьПредставлениеОтзыва(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОтсоединитьСчетФактуру(Команда)
	
	Если ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		Объект.СчетФактура = Неопределено;
		СформироватьПредставлениеСчетаФактуры(ЭтаФорма);
		СформироватьПредставлениеОтзыва(ЭтаФорма);
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ не отражен в учете.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Поставщик

&НаКлиенте
Процедура ПоставщикНайти(Команда)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПоставщикИдентификатор) Тогда
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Не заполнено значение поля ""ИИН, БИН"".'"));
		Возврат;
	КонецЕсли;
	
	МассивКонтрагентов = НайтиКонтрагентовПоИдентификатору(ТекущиеДанные.ПоставщикИдентификатор);
	
	Если МассивКонтрагентов.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр(
		"ru = 'Не удалось найти контрагента в базе данных.
		|Создать нового контрагента?'");
		
		СоздатьНовогоКонтрагентаЗавершение = Новый ОписаниеОповещения("СоздатьНовогоКонтрагентаЗавершение", ЭтаФорма);
		ПоказатьВопрос(СоздатьНовогоКонтрагентаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли МассивКонтрагентов.Количество() = 1 Тогда
		
		ТекущиеДанные.Поставщик = МассивКонтрагентов[0];
		
	Иначе // МассивКонтрагентов.Количество() > 1
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько контрагентов'"));
		ПараметрыФормы.Вставить("МассивЗначений", МассивКонтрагентов);
		
		ВыборКонтрагентаИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборКонтрагентаИзСпискаЗавершение", ЭтаФорма);
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборКонтрагентаИзСпискаЗавершение);
		
	КонецЕсли;
	
	Если НЕ МассивКонтрагентов.Количество() = 0 И НЕ МассивКонтрагентов.Количество() = 0 Тогда
		ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоставщикСоздатьНаКлиенте();
	КонецЕсли;

	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ();

КонецПроцедуры

&НаКлиенте
Процедура ВыборКонтрагентаИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйПоставщик = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйПоставщик) Тогда
		
		ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Поставщик = ВыбранныйПоставщик;
		
	КонецЕсли;

	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздать(Команда)
	
	ПоставщикСоздатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздатьНаКлиенте()
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Идентификатор", ТекущиеДанные.ПоставщикИдентификатор);
		ДанныеЗаполнения.Вставить("Наименование", ТекущиеДанные.ПоставщикНаименование);
		ДанныеЗаполнения.Вставить("СерияСвидетельстваПоНДС", ТекущиеДанные.СерияСвидетельстваПоНДС);
		ДанныеЗаполнения.Вставить("НомерСвидетельстваПоНДС", ТекущиеДанные.НомерСвидетельстваПоНДС);
		ДанныеЗаполнения.Вставить("КБе", ТекущиеДанные.КБе);
		ДанныеЗаполнения.Вставить("Адрес", ТекущиеДанные.Адрес);
		
		ТекстКомментария = ЭСФКлиентСервер.ТекстКомментарияСозданПоДаннымЭСФ(Объект.Ссылка);
		ДанныеЗаполнения.Вставить("Комментарий", ТекстКомментария);
		
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоКонтрагента(ДанныеЗаполнения, ЭтаФорма, Новый ОписаниеОповещения("ПоставщикСоздатьНаКлиентеПослеСоздания", ЭтотОбъект));
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикСоздатьНаКлиентеПослеСоздания(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПоставщикИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	МассивКонтрагентов = НайтиКонтрагентовПоИдентификатору(ТекущиеДанные.ПоставщикИдентификатор);
	
	Если МассивКонтрагентов.Количество() = 1 Тогда
		
		ТекущиеДанные.Поставщик = МассивКонтрагентов[0];
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикЗаполнитьРеквизиты(Команда)
	
	ТекущиеДанные = Элементы.Поставщики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Поставщик) Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Данные поставщика будут перезаполнены по данным ЭСФ.
			|Продолжить?'");
			
			ПерезаполнениеДанныхПоставщикаЗавершение = Новый ОписаниеОповещения("ПерезаполнениеДанныхПоставщикаЗавершение", ЭтаФорма);
			ПоказатьВопрос(ПерезаполнениеДанныхПоставщикаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно выполнить, так как не заполнено поле ""Поставщик"".'"));
			
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнениеДанныхПоставщикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущаяСтрока = Элементы.Поставщики.ТекущаяСтрока;
		ПоставщикЗаполнитьРеквизитыНаСервере(ТекущаяСтрока);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПоставщикЗаполнитьРеквизитыНаСервере(ПоставщикиИдентификаторСтроки)
	
	ПоставщикиСтрока = Объект.Поставщики.НайтиПоИдентификатору(ПоставщикиИдентификаторСтроки);
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ЗаполнитьРеквизитыКонтрагента(Объект, ПоставщикиСтрока);
	
	ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитДоговорПоставкиПоДаннымЭСФ()
	
	ПоказатьСообщение = Ложь;	
	МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
	
	Если МассивДоговоров.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда			
			Объект.ДоговорПоставки = Неопределено;
			ПоказатьСообщение = Истина;			
		КонецЕсли;
		
	ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
		
		Объект.ДоговорПоставки = МассивДоговоров[0];	
		
	Иначе // МассивДоговоров.Количество() > 1
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда			
			
			Если МассивДоговоров.Найти(Объект.ДоговорПоставки) = Неопределено Тогда
				
				Объект.ДоговорПоставки = Неопределено;
				ПоказатьСообщение = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказатьСообщение Тогда
		
		Контрагент = Контрагент(Объект);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""Договор поставки"" в разделе ""E. Условия поставки"" было очищено, так как указанный договор поставки не принадлежал контрагенту ""[Контрагент]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[Контрагент]", Контрагент);
		Иначе
			ТекстСообщения = НСтр("ru = 'Поле ""Договор поставки"" в разделе ""E. Условия поставки"" было очищено.'");
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "Объект.ДоговорПоставки";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Договор

&НаКлиенте
Процедура ДоговорНайти(Команда)
	
	Контрагент = Контрагент(Объект);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		МассивДоговоров = НайтиДоговорыПоставкиНаСервере();
		
		Если МассивДоговоров.Количество() = 0 Тогда
			
			ТекстВопроса = НСтр(
			"ru = 'Не удалось найти договор поставки в базе данных.
			|Создать новый договор поставки?'");
			
			СоздатьНовыйДоговорЗавершение = Новый ОписаниеОповещения("СоздатьНовыйДоговорЗавершение", ЭтаФорма);
			ПоказатьВопрос(СоздатьНовыйДоговорЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли МассивДоговоров.Количество() = 1 Тогда
			
			Объект.ДоговорПоставки = МассивДоговоров[0];
			
		Иначе // МассивДоговоров.Количество() > 1
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Найдено несколько договоров'"));
			ПараметрыФормы.Вставить("МассивЗначений", МассивДоговоров);
			
			ВыборДоговораИзСпискаЗавершение = Новый ОписаниеОповещения("ВыборДоговораИзСпискаЗавершение", ЭтаФорма);
			ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ВыборИзСписка", ПараметрыФормы,,,,, ВыборДоговораИзСпискаЗавершение);
			
		КонецЕсли;
		
	Иначе
		
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(НСтр("ru = 'Невозможно найти договор поставки, так как не указан поставщик в разделе ""B. Поставщики"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДоговорЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДоговорСоздатьНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйДоговор = РезультатЗакрытия;
	
	Если ЗначениеЗаполнено(ВыбранныйДоговор) Тогда
		Объект.ДоговорПоставки = ВыбранныйДоговор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздать(Команда)
	
	ДоговорСоздатьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция ДополнительныеПараметрыЗаполненияДоговора()
	
	ДополнительныеПараметры = Новый Структура;
	
	//++ НЕ ЭСФ
	
	Если ЗначениеЗаполнено(Объект.ПоверенныйПокупателяБИН) Тогда
		МассивКонтрагентов = НайтиКонтрагентовПоИдентификатору(Объект.ПоверенныйПоставщикаБИН);
		
		ПоверенныйОператор = ?(МассивКонтрагентов.Количество() = 0, Неопределено, МассивКонтрагентов[0]);
		
		ДополнительныеПараметры.Вставить("ПоверенныйОператор", ПоверенныйОператор);
	КонецЕсли;	
	
	//-- НЕ ЭСФ
	
	Возврат ДополнительныеПараметры;
	
КонецФункции	

&НаКлиенте
Процедура ДоговорСоздатьНаКлиенте()
	
	ИмяТаблицыКонтрагентов 	= "";
	ИмяРеквизитаКонтрагента = "";
	ДополнительныеПараметры	= ДополнительныеПараметрыЗаполненияДоговора();

	Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента) Тогда
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоДоговора(ЭтаФорма, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЗаполнитьРеквизиты(Команда)
	
	ИмяТаблицыКонтрагентов 	= "";
	ИмяРеквизитаКонтрагента = "";
	ДополнительныеПараметры	= ДополнительныеПараметрыЗаполненияДоговора();
	
	Если ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда
			ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуСтарогоДоговора(ЭтаФорма, ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента, ДополнительныеПараметры);
		Иначе
			Сообщить(НСтр("ru = 'Невозможно выполнить действие, так как договор поставки не заполнен.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляСозданияОбновленияДоговораЗаполнены(ИмяТаблицыКонтрагентов, ИмяРеквизитаКонтрагента)
	
	ДанныеЗаполнены = Истина;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ИмяТаблицыКонтрагентов = "Поставщики";
		ИмяРеквизитаКонтрагента = "Поставщик";
	Иначе
		ИмяТаблицыКонтрагентов = "Получатели";
		ИмяРеквизитаКонтрагента = "Получатель";
	КонецЕсли;
	
	Если ИмяТаблицыКонтрагентов = "Поставщики" Тогда
		СинонимРаздела = НСтр("ru = 'B. Поставщики'");	
	Иначе
		СинонимРаздела = НСтр("ru = 'C. Получатели'");	
	КонецЕсли;
	
	// Проверить, что таблица контрагентов имеет хотя бы одну строку.
	Если Объект[ИмяТаблицыКонтрагентов].Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как в раздел ""[СинонимРаздела]"" является пустым.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
		Сообщить(ТекстСообщения);
		
		ДанныеЗаполнены = Ложь;
		
	КонецЕсли;
	
	// Проверить, что таблица все ссылки на контрагентов заполнены.
	Для Каждого СтрокаКонтрагент Из Объект[ИмяТаблицыКонтрагентов] Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКонтрагент[ИмяРеквизитаКонтрагента]) Тогда
			
			ТекстСообщения = НСтр("ru = 'Невозможно выполнить действие, так как в раздел ""[СинонимРаздела]"" не заполнено поле [ИмяРеквизитаКонтрагента].'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[СинонимРаздела]", СинонимРаздела);	
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ИмяРеквизитаКонтрагента]", ИмяРеквизитаКонтрагента);	
			Сообщить(ТекстСообщения);
			
			ДанныеЗаполнены = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

#КонецОбласти

#Область Товары

&НаКлиенте
Процедура ТоварыСоздатьТовары(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
	Если ТекущиеДанные <> Неопределено Тогда			
		ЭСФКлиентПереопределяемый.ОткрытьЗаполненнуюФормуНовогоТовара(ЭтаФорма, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНайтиСоздатьОбновитьНомераГТД(Команда)
	
	Если ВедетсяУчетПоТоварамОрганизацийНаВС Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru = 'Перед заполнением источники происхождения в табличной части будут очищены. Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаИсчтониковТабличнойЧастиТовары", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Иначе 
			ЗаполнитьИсточникиПроисхожденияПоОстаткам();
		КонецЕсли;
		
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиПроисхожденияПоОстаткам(ОчищатьИсточники = Ложь)
	
	Если ОчищатьИсточники Тогда
		Для Каждого СтрокаТЧ ИЗ Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.ИсточникПроисхождения) Тогда
				СтрокаТЧ.ИсточникПроисхождения =  ВССерверПереопределяемый.ПолучитьПустоеЗначениеИсточниковПроисхождения();
			КонецЕсли;		
		КонецЦикла;	
	КонецЕсли;
	
	ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();
	ОбработкаОбменЭСФ.ЗаполнитьТоварыСУчетомИсточниковПроисхождения(Объект);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаИсчтониковТабличнойЧастиТовары(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
			
	ЗаполнитьИсточникиПроисхожденияПоОстаткам(Истина);

	
КонецПроцедуры

&НаСервере
Процедура ТоварыНайтиСоздатьОбновитьНомераГТДНаСервере(МассивИдентификаторовСтрок)
	// В УПК нет НомеровГТД БЭСФ
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// По ссылочному полю ед.измерения получаем данные о коде и наименовании.
	Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения) Тогда
		ДанныеЕдиницыИзмерения = ЭСФВызовСервера.ПолучитьДанныеЕдиницыИзмерения(Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения);	
	Иначе
		ДанныеЕдиницыИзмерения = ЭСФВызовСервера.ПолучитьДанныеЕдиницыИзмерения(Элементы.Товары.ТекущиеДанные.Товар);
	КонецЕсли;
	ЗаполнитьДанныеЕИ(ДанныеЕдиницыИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.ЕдиницаИзмерения = "";
	ДанныеЕдиницыИзмерения = ЭСФВызовСервера.ПолучитьДанныеЕдиницыИзмерения(Элементы.Товары.ТекущиеДанные.Товар);
	ЗаполнитьДанныеЕИ(ДанныеЕдиницыИзмерения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеЕИ(СтруктураРеквизитовЕдиницыИзмерения)
	
	Элементы.Товары.ТекущиеДанные.ЕдиницаИзмеренияНаименование = ?(ЗначениеЗаполнено(СтруктураРеквизитовЕдиницыИзмерения.Наименование),СтруктураРеквизитовЕдиницыИзмерения.Наименование,"");
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		Элементы.Товары.ТекущиеДанные.ЕдиницаИзмеренияКод = ?(ЗначениеЗаполнено(СтруктураРеквизитовЕдиницыИзмерения.Код),СтруктураРеквизитовЕдиницыИзмерения.Код,"") ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Доступность элементов формы

&НаСервере
Процедура УстановитьДоступностьРеквизитов()
	
	МассивИменНедоступныхЭлементов = НовыйМассивИменНедоступныхЭлементов();
	МассивИменЭлементовДополнительныеСведения = НовыйМассивИменЭлементовДополнительныеСведения();
	
	Если Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		
		ТолькоПросмотрРеквизитовЭСФ = НЕ ЭСФСерверПереопределяемый.ДоступнаРольБезусловногоРедактированияЭСФ()
										И ((Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
										И (Объект.Состояние = Перечисления.СостоянияЭСФ.ПринятСервером
										ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером
										ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю))
										ИЛИ (Объект.Направление = Перечисления.НаправленияЭСФ.Входящий
										И (Объект.Состояние = Перечисления.СостоянияЭСФ.ПринятОтПоставщика
										ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.Аннулирован
										ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.Отозван
										ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненПолучателем))
										ИЛИ ОбъектНаходитсяВОчередиОтправки);
								
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, ТолькоПросмотрРеквизитовЭСФ);
		УстановитьСвойствоТолькоПросмотр(МассивИменЭлементовДополнительныеСведения, ТолькоПросмотрРеквизитовЭСФ);
		Если ВедетсяУчетПоТоварамОрганизацийНаВС Тогда 
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", (Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий));
		Иначе
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", Ложь);
		КонецЕсли;
					
	Иначе
		
		УстановитьСвойствоТолькоПросмотр(МассивИменНедоступныхЭлементов, Истина);
		
		Если Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован
		 ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером Тогда
			
			ТолькоПросмотрДополнительныхСведений = Ложь;
			
		Иначе
			
			ТолькоПросмотрДополнительныхСведений = Истина;
			
		КонецЕсли;
		
		УстановитьСвойствоТолькоПросмотр(МассивИменЭлементовДополнительныеСведения, ТолькоПросмотрДополнительныхСведений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовыйМассивИменНедоступныхЭлементов()
	
	Массив = Новый Массив;
	
	// Раздел A. Общий раздел
	Массив.Добавить("РегистрационныйНомер");
	Массив.Добавить("Номер");	
	Массив.Добавить("Дата");
	Массив.Добавить("ДатаОборота");
	Массив.Добавить("Вид");
	Массив.Добавить("Причина");
	Массив.Добавить("СвязанныйЭСФНомер");
	Массив.Добавить("СвязанныйЭСФДата");
	Массив.Добавить("СвязанныйЭСФРегистрационныйНомер");
	Массив.Добавить("СвязанныйЭСФ");
	//реквизиты новой версии
	Массив.Добавить("ВыпискаБумажногоЭСФ");
	Массив.Добавить("ДатаВыпискиНаБумажномНосителе");
	Массив.Добавить("ПричинаВыпискиНаБумажномНосителе");
	Массив.Добавить("ВерсияБланкаЭСФ");
	
	
	// Раздел B. Поставщики (списком)
	Массив.Добавить("ПоставщикиНомерСтроки");
	Массив.Добавить("ПоставщикиПоставщикИдентификатор");
	Массив.Добавить("ПоставщикиПоставщикНаименование");
	Массив.Добавить("ПоставщикиСерияСвидетельстваПоНДС");
	Массив.Добавить("ПоставщикиНомерСвидетельстваПоНДС");
	Массив.Добавить("ПоставщикиАдрес");
	Массив.Добавить("ПоставщикиКБе");
	Массив.Добавить("ПоставщикиИИК");
	Массив.Добавить("ПоставщикиБИК");
	Массив.Добавить("ПоставщикиНаименованиеБанка");
	Массив.Добавить("ПоставщикиДокументПодтверждающийПоставкуНомер");
	Массив.Добавить("ПоставщикиДокументПодтверждающийПоставкуДата");
	Массив.Добавить("ПоставщикиКомитент");
	Массив.Добавить("ПоставщикиКомиссионер");
	Массив.Добавить("ПоставщикиЭкспедитор");
	Массив.Добавить("ПоставщикиЛизингодатель");
	Массив.Добавить("ПоставщикиУчастникСовместнойДеятельности");
	Массив.Добавить("ПоставщикиЭкспортерИлиУчастникСРП");
	//реквизиты новой версии
	Массив.Добавить("ПоставщикиУчастникСРП");
	Массив.Добавить("ПоставщикиЭкспортер");
	Массив.Добавить("ПоставщикиМеждународныйПеревозчик");
	Массив.Добавить("ПоставщикиДоверитель");
	Массив.Добавить("ПоставщикиБИНФилиала");
	Массив.Добавить("ПоставщикиБИНРеорганизованногоЛица");
	Массив.Добавить("ПоставщикиЯвляетсяСтруктурнымПодразделениемНерезидента");
	Массив.Добавить("ПоставщикиАдвокат");
	Массив.Добавить("ПоставщикиСудебныйИсполнитель");
	Массив.Добавить("ПоставщикиМедиатор");
	Массив.Добавить("ПоставщикиНотариус");

	
	// Раздел B. Поставщики (одна строка)	
	Массив.Добавить("ПоставщикИдентификатор");
	Массив.Добавить("ПоставщикНаименование");
	Массив.Добавить("ПоставщикАдрес");
	Массив.Добавить("ПоставщикСерияСвидетельстваПоНДС");
	Массив.Добавить("ПоставщикНомерСвидетельстваПоНДС");	
	Массив.Добавить("ПоставщикКБе");
	Массив.Добавить("ПоставщикИИК");
	Массив.Добавить("ПоставщикБИК");
	Массив.Добавить("ПоставщикНаименованиеБанка");
	Массив.Добавить("ПоставщикДокументПодтверждающийПоставкуНомер");
	Массив.Добавить("ПоставщикДокументПодтверждающийПоставкуДата");
	Массив.Добавить("ГруппаПоставщикКомитент");
	Массив.Добавить("ГруппаПоставщикКомиссионер");
	Массив.Добавить("ГруппаПоставщикЭкспедитор");
	Массив.Добавить("ГруппаПоставщикЛизингодатель");
	Массив.Добавить("ГруппаУчастникСД");
	Массив.Добавить("ГруппаПоставщикЭкспортерИлиУчастникСРП");
	//реквизиты новой версии
	Массив.Добавить("ГруппаПоставщикУчастникСРП");
	Массив.Добавить("ГруппаПоставщикЭкспортер");
	Массив.Добавить("ГруппаПоставщикМеждународныйПеревозчик");
	Массив.Добавить("ГруппаПоставщикДоверитель");
	Массив.Добавить("ПоставщикБИНФилиала");
	Массив.Добавить("ПоставщикБИНРеорганизованногоЛица");
	Массив.Добавить("ПоставщикЯвляетсяСтруктурнымПодразделениемНерезидента");
	Массив.Добавить("ГруппаПоставщикАдвокат");
	Массив.Добавить("ГруппаПоставщикСудебныйИсполнитель");
	Массив.Добавить("ГруппаПоставщикМедиатор");
	Массив.Добавить("ГруппаПоставщикНотариус");
		
	// Раздел C. Получатели (списком)
	Массив.Добавить("ПолучателиНомерСтроки");
	Массив.Добавить("ПолучателиПолучательИдентификатор");
	Массив.Добавить("ПолучателиПолучательНаименование");
	Массив.Добавить("ПолучателиСерияСвидетельстваПоНДС");
	Массив.Добавить("ПолучателиНомерСвидетельстваПоНДС");
	Массив.Добавить("ПолучателиАдрес");
	Массив.Добавить("ПолучателиКомитент");
	Массив.Добавить("ПолучателиКомиссионер");
	Массив.Добавить("ПолучателиЛизингодатель");
	Массив.Добавить("ПолучателиУчастникСовместнойДеятельности");
	Массив.Добавить("ПолучателиГосударственноеУчреждение");
	Массив.Добавить("ПолучателиНерезидент");
	//реквизиты новой версии
	Массив.Добавить("ПолучателиКодСтраны");
	Массив.Добавить("ПолучателиУчастникСРП");
	Массив.Добавить("ПолучателиНерезидентВерсия2");
	Массив.Добавить("ПолучателиРозничнаяРеализация");
	Массив.Добавить("ПолучателиДоверитель");
	Массив.Добавить("ПолучателиБИНФилиала");
	Массив.Добавить("ПолучателиБИНРеорганизованногоЛица");	
	Массив.Добавить("ПолучателиФизическоеЛицо");
	Массив.Добавить("ПолучателиАдвокат");
	Массив.Добавить("ПолучателиСудебныйИсполнитель");
	Массив.Добавить("ПолучателиМедиатор");
	Массив.Добавить("ПолучателиНотариус");
		
	// Раздел C. Получатели (одна строка)	
	Массив.Добавить("ПолучательИдентификатор");
	Массив.Добавить("ПолучательНаименование");
	Массив.Добавить("ПолучательСерияСвидетельстваПоНДС");
	Массив.Добавить("ПолучательНомерСвидетельстваПоНДС");
	Массив.Добавить("ПолучательАдрес");
	Массив.Добавить("ГруппаПолучательКомитент");
	Массив.Добавить("ГруппаПолучательКомиссионер");
	Массив.Добавить("ГруппаПолучательЛизингополучатель");
	Массив.Добавить("ГруппаПолучательУчастникСД");
	Массив.Добавить("ГруппаПолучательПолучательГосударственноеУчреждение");
	Массив.Добавить("ГруппаПолучательНерезидент");
	//реквизиты новой версии
	Массив.Добавить("ПолучательКодСтраны");
	Массив.Добавить("ГруппаПолучательУчастникСРП");
	Массив.Добавить("ГруппаПолучательДоверитель");
	Массив.Добавить("ГруппаПолучательРозничнаяРеализация");
	Массив.Добавить("ГруппаПолучательНерезидентВерсия2");
	Массив.Добавить("ПолучательБИНФилиала");
	Массив.Добавить("ПолучательБИНРеорганизованногоЛица");	
	Массив.Добавить("ГруппаПолучательРозничнаяРеализация");	
	Массив.Добавить("ГруппаПолучательАдвокат");
	Массив.Добавить("ГруппаПолучательСудебныйИсполнитель");
	Массив.Добавить("ГруппаПолучательМедиатор");
	Массив.Добавить("ГруппаПолучательНотариус");
	
	// Раздел D. Грузоотправитель
	Массив.Добавить("ГрузоотправительИдентификатор");
	Массив.Добавить("ГрузоотправительНаименование");
	Массив.Добавить("АдресОтправки");
	Массив.Добавить("ГрузополучательИдентификатор");
	Массив.Добавить("ГрузополучательНаименование");
	Массив.Добавить("АдресДоставки");
	//реквизиты новой версии
	Массив.Добавить("ГрузополучательКодСтраны");
	
	// Раздел E. Условия поставки
	Массив.Добавить("ДоговорПоставкиНомер");
	Массив.Добавить("ДоговорПоставкиДата");
	Массив.Добавить("ДоговорПоставкиУсловияОплаты");
	Массив.Добавить("ДоговорПоставкиСпособОтправления");
	Массив.Добавить("ДоверенностьНаПоставкуНомер");
	Массив.Добавить("ДоверенностьНаПоставкуДата");
	Массив.Добавить("ПунктНазначения");
	//реквизиты новой версии
	Массив.Добавить("СпособОтправленияПоКлассификатору");
	Массив.Добавить("ДоговорПоставкиУсловияПоставки");
	Массив.Добавить("БезДоговора");
	
	// F. Документы поставки - в новой версии
	Массив.Добавить("ДокументПодтверждающийПоставкуНомер");
	Массив.Добавить("ДокументПодтверждающийПоставкуДата");
	
	// Раздел F. Гос. учреждение	
	Массив.Добавить("ГосучреждениеИИК");
	Массив.Добавить("ГосучреждениеКодТоваров");
	Массив.Добавить("ГосучреждениеНазначениеПлатежа");
	Массив.Добавить("ГосучреждениеБИК");
	
	// Раздел C1. Гос. учреждение - в новой версии	
	Массив.Добавить("ГосучреждениеИИК1");
	Массив.Добавить("ГосучреждениеКодТоваров1");
	Массив.Добавить("ГосучреждениеНазначениеПлатежа1");
	Массив.Добавить("ГосучреждениеБИК1");
	
	// Раздел G. Товары	
	Массив.Добавить("ТоварыНомерСтроки");
	Массив.Добавить("ТоварыТоварНаименование");
	Массив.Добавить("ТоварыЕдиницаИзмеренияНаименование");
	Массив.Добавить("ТоварыЕдиницаИзмеренияКод");
	Массив.Добавить("ТоварыКоличество");
	Массив.Добавить("ТоварыЦена");
	Массив.Добавить("ТоварыСуммаБезНалогов");
	Массив.Добавить("ТоварыСтавкаАкцизаЧисло");
	Массив.Добавить("ТоварыСуммаАкциза");
	Массив.Добавить("ТоварыОборотПоРеализации");
	Массив.Добавить("ТоварыБезНДС");
	Массив.Добавить("ТоварыСтавкаНДСЧисло");
	Массив.Добавить("ТоварыСуммаНДС");
	Массив.Добавить("ТоварыСумма");
	Массив.Добавить("ТоварыКодТовара");
	Массив.Добавить("ТоварыНомерЗаявленияВРамкахТС");
	Массив.Добавить("ВалютаСтрока");
	Массив.Добавить("КурсВалюты");
	//реквизиты новой версии
	Массив.Добавить("ТоварыПризнакПроисхождения");
	Массив.Добавить("ТоварыТоварНаименованиеВРамкахТС");
	Массив.Добавить("ТоварыНомерПозицииВДекларацииИлиЗаявлении");
	Массив.Добавить("ТоварыИдентификаторТовара");
	
	Массив.Добавить("ТоварыДополнительныйИдентификатор");
	Массив.Добавить("ТоварыПризнакУчетаНаВиртуальномСкладе");
	Массив.Добавить("МестоРеализацииНеРК");
		
	// Раздел H. Участники СД.
	Массив.Добавить("ТоварыПоПоставщикам");
	Массив.Добавить("ТоварыПоПолучателям");
	
	// Раздел J. Сведения по ЭЦП
	Массив.Добавить("ЭЦП");
	Массив.Добавить("УполномоченныйСотрудник");
	Массив.Добавить("ТипПодписи");
	
	// Раздел I. Поверенный поставщика  - в новой версии
	Массив.Добавить("ПоверенныйПоставщикаНаименование");
	Массив.Добавить("ПоверенныйПоставщикаБИН");
	Массив.Добавить("ПоверенныйПоставщикаАдресМестонахождения");
	Массив.Добавить("ДоговорПорученияПоставщикаНомер");
	Массив.Добавить("ДоговорПорученияПоставщикаДата");	
	
	// Раздел J. Поверенный покупателя  - в новой версии
	Массив.Добавить("ПоверенныйПокупателяНаименование");
	Массив.Добавить("ПоверенныйПокупателяБИН");
	Массив.Добавить("ПоверенныйПокупателяАдресМестонахождения");
	Массив.Добавить("ДоговорПорученияПокупателяНомер");
	Массив.Добавить("ДоговорПорученияПокупателяДата");	
	
	// Прочие сведения
	Массив.Добавить("Идентификатор");
	Массив.Добавить("Направление");
	Массив.Добавить("Статус");
	Массив.Добавить("ПользовательскийСтатус");
	Массив.Добавить("Организация");
	Массив.Добавить("ФайлЭСФ");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция НовыйМассивИменЭлементовДополнительныеСведения()
	
	Массив = Новый Массив;
	
	Массив.Добавить("ДополнительныеСведения");
	Массив.Добавить("ПоставщикиДополнительныеСведения");	
	Массив.Добавить("ПоставщикДополнительныеСведения");	
    Массив.Добавить("ПолучателиДополнительныеСведения");
	Массив.Добавить("ПолучательДополнительныеСведения");
	Массив.Добавить("ТоварыДополнительныеДанные");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура УстановитьСвойствоТолькоПросмотр(Знач МассивИменЭлементовФормы, Знач ТолькоПросмотр)
	
	Для Каждого ИмяЭлемента Из МассивИменЭлементовФормы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда 
			Элементы[ИмяЭлемента].ТолькоПросмотр = ТолькоПросмотр;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретитьИзменениеТаблицы(Отказ)
	
	Если НЕ Элементы.ФормаРедактироватьНедоступныеРеквизиты.Пометка Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью "Статус"

&НаСервере
Процедура СформироватьПредставлениеСостояния()
	
	Если ОбъектНаходитсяВОчередиОтправки Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ помещен в очередь отправки...'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ готов к отправке получателю через ИС ЭСФ'");
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И (Объект.Состояние = Перечисления.СостоянияЭСФ.ПринятСервером
		ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю)Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ успешно принят сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ обрабатывается сервером ИС ЭСФ'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ отклонен сервером ИС ЭСФ, т.к. содержит ошибки'");
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.Отозван
		ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.Аннулирован Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%, по причине: ""%Причина%""'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Причина%", СокрЛП(Объект.Причина));
		
	ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОжидаетИдентификацииТоваровНаВС Тогда
		
		ПредставлениеСостояния = НСтр("ru = 'Документ ожидает идентификации товаров на ВС'");
		
	Иначе
		
		ПредставлениеСостояния = НСтр("ru = 'Документ %Состояние%'");
		ПредставлениеСостояния = СтрЗаменить(ПредставлениеСостояния, "%Состояние%", НРег(Объект.Состояние));
		
	КонецЕсли;
	
	Элементы.ПредставлениеСостояния.ЦветТекста = ЭСФКлиентСервер.ЦветСостоянияЭСФ(Объект.Состояние);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСостоянияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий")
		И Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.Сформирован")
		И НЕ ОбъектНаходитсяВОчередиОтправки Тогда
		
		Если ИспользоватьОбменЭСФЧерезAPI() Тогда
			
			ОтправитьПолучателюЗаписьФормы = Новый ОписаниеОповещения("ОтправитьПолучателюЗаписьФормы", ЭтаФорма);
			ПоказатьВопрос(ОтправитьПолучателюЗаписьФормы, НСтр("ru = 'Отправить получателю через ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ВыгрузитьДокументВXMLЗаписьФормы = Новый ОписаниеОповещения("ВыгрузитьДокументВXMLЗаписьФормы", ЭтаФорма);
			ПоказатьВопрос(ВыгрузитьДокументВXMLЗаписьФормы, НСтр("ru = 'Выгрузить документ в XML файл?'"), РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
		
	ИначеЕсли Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЭСФ.ОбрабатываетсяСервером") Тогда	
		
		ПолучитьРезультатИСЭСФЗаписьФормы = Новый ОписаниеОповещения("ПолучитьРезультатИСЭСФЗаписьФормы", ЭтаФорма);
		ПоказатьВопрос(ПолучитьРезультатИСЭСФЗаписьФормы, НСтр("ru = 'Получить результат обработки ИС ЭСФ?'"), РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ПоказатьПредупреждение(, ПредставлениеСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОтправитьПолучателюЗавершение = Новый ОписаниеОповещения("ОтправитьПолучателюЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ОтправитьПолучателюЗавершение,, "Записать");
		Иначе
			ОтправитьПолучателюЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучателюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭСФ = Новый Массив;
			МассивЭСФ.Добавить(Объект.Ссылка);
			ЭСФКлиент.ОтправитьИсходящиеЭСФ(МассивЭСФ, Новый Структура("ЗапускатьФоновоеЗадание", Ложь));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументВXMLЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ВыгрузитьДокументВXMLЗавершение = Новый ОписаниеОповещения("ВыгрузитьДокументВXMLЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ВыгрузитьДокументВXMLЗавершение);
		Иначе
			ВыгрузитьДокументВXMLЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументВXMLЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭСФ = Новый Массив;
			МассивЭСФ.Добавить(Объект.Ссылка);
			ЭСФКлиент.ВыгрузитьИсходящиеЭСФ(МассивЭСФ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатИСЭСФЗаписьФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ПолучитьРезультатИСЭСФЗавершение = Новый ОписаниеОповещения("ПолучитьРезультатИСЭСФЗавершение", ЭтаФорма);	
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ПолучитьРезультатИСЭСФЗавершение);
		Иначе
			ПолучитьРезультатИСЭСФЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРезультатИСЭСФЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
			МассивЭСФ = Новый Массив;
			МассивЭСФ.Добавить(Объект.Ссылка);
			ЭСФКлиент.ОбновитьСтатусыЭСФПоИдентификаторам(МассивЭСФ, Объект.Направление, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью "Отражен в учете"

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСчетаФактуры(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.СчетФактура) Тогда
		Форма.ПредставлениеСчетаФактуры = Форма.Объект.СчетФактура;
		Форма.Элементы.ПредставлениеСчетаФактуры.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеСчетаФактуры = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеСчетаФактуры.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСчетаФактурыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ПоказатьЗначение(, Объект.СчетФактура);
	ИначеЕсли ЭтаФорма.ТолькоПросмотр Тогда
		 ПоказатьПредупреждение(, НСтр("ru = 'Невозможно выполнить, так как документ открыт в режиме просмотра.'"));
	Иначе
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
			ВыбратьСчетФактуруНаКлиенте();
		Иначе
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("СоздатьПТУ", НСтр("ru = 'Создать накладную и счет-фактуру'"));
			Кнопки.Добавить("СоздатьСФ", НСтр("ru = 'Создать счет-фактуру'"));
			Кнопки.Добавить("Выбрать", НСтр("ru = 'Выбрать счет-фактуру'"));
			Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
			ОтразитьДокументВУчетеЗавершение = Новый ОписаниеОповещения("ОтразитьДокументВУчетеЗавершение", ЭтаФорма);
			ПоказатьВопрос(ОтразитьДокументВУчетеЗавершение, НСтр("ru = 'Отразить документ в учете?'"), Кнопки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьДокументВУчетеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Выбрать" Тогда
		ВыбратьСчетФактуруНаКлиенте();
	ИначеЕсли РезультатВопроса = "СоздатьСФ" Тогда
		СоздатьСчетФактуруНаКлиенте();
	ИначеЕсли РезультатВопроса = "СоздатьПТУ" Тогда
		СоздатьСчетФактуруНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью отзыва

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеОтзыва(Форма)
	
	Форма.ПредставлениеОтзыва = "";
	Форма.Элементы.ПредставлениеОтзыва.Видимость = Истина;
	
	Если НЕ ЭСФКлиентСерверПереопределяемый.ОтражатьОтзывВУчете() Тогда
		Форма.Элементы.ПредставлениеОтзыва.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.СчетФактура) Тогда
		Форма.Элементы.ПредставлениеОтзыва.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	МассивДанныхСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(Форма.Объект.СчетФактура);
	
	Количество = МассивДанныхСторнирований.Количество();
	
	Если Форма.Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") И Количество = 0 Тогда
		
		Форма.Элементы.ПредставлениеОтзыва.Видимость = Ложь;
		
	ИначеЕсли Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") И Количество = 0 Тогда
		
		Форма.ПредставлениеОтзыва = НСтр("ru = 'Отзыв не отражен в учете'");
		Форма.Элементы.ПредставлениеОтзыва.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();	
		
	ИначеЕсли Количество = 1 Тогда
		
		Форма.ПредставлениеОтзыва = МассивДанныхСторнирований[0].Ссылка;
		Форма.Элементы.ПредставлениеОтзыва.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
		
	ИначеЕсли Количество > 1 Тогда
		
		Форма.ПредставлениеОтзыва = НСтр("ru = 'Счет-фактура сторнирован %Количество% %Раз%'");
		Форма.ПредставлениеОтзыва = СтрЗаменить(Форма.ПредставлениеОтзыва, "%Количество%", Количество);
		Если Количество = 2 ИЛИ Количество = 3 ИЛИ Количество = 4 Тогда
			Форма.ПредставлениеОтзыва = СтрЗаменить(Форма.ПредставлениеОтзыва, "%Раз%", НСтр("ru = 'раза'"));
		Иначе
			Форма.ПредставлениеОтзыва = СтрЗаменить(Форма.ПредставлениеОтзыва, "%Раз%", НСтр("ru = 'раз'"));
		КонецЕсли;
		Форма.Элементы.ПредставлениеОтзыва.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
		
	КонецЕсли;
	
	Если Форма.Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСФ.Отозванный") И Количество <> 0 Тогда
		Форма.Элементы.ПредставлениеОтзыва.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтзываНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДанныхСторнирований = ЭСФВызовСервера.ДокументыСторнирующиеСчетФактуру(Объект.СчетФактура);

	Если МассивДанныхСторнирований.Количество() = 0 Тогда
		ЭСФКлиентПереопределяемый.ОткрытьФормуНовогоСторнирующегоДокумента(Объект.СчетФактура);
	ИначеЕсли МассивДанныхСторнирований.Количество() = 1 Тогда
		ПоказатьЗначение(, МассивДанныхСторнирований[0].Ссылка);
	ИначеЕсли МассивДанныхСторнирований.Количество() > 1 Тогда
		ЭСФКлиент.ОткрытьФормуСпискаСторнирований(Объект.СчетФактура);	
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование и работа с надписью "Отражен в учете СНТ"

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеСНТ(Форма)
	
	//++НЕ ЭСФ
	Если Форма.ПредставлениеСНТ <> "" И Форма.ПредставлениеСНТ <> НСтр("ru = 'Документ не отражен в учете'") И ЗначениеЗаполнено(Форма.Объект.СНТ) Тогда  
		Форма.ПредставлениеСНТ = Форма.ПредставлениеСНТ;
	ИначеЕсли ЗначениеЗаполнено(Форма.Объект.СНТ) Тогда
		Форма.ПредставлениеСНТ = Форма.Объект.СНТ;
		Форма.Элементы.ПредставлениеСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе
		Форма.ПредставлениеСНТ = НСтр("ru = 'Документ не отражен в учете'");
		Форма.Элементы.ПредставлениеСНТ.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	КонецЕсли;
	//--НЕ ЭСФ
КонецПроцедуры

//++НЕ ЭСФ
&НаКлиенте
Процедура ПредставлениеСНТНажатие(Элемент, СтандартнаяОбработка)
	
	Если ИспользуетсяСНТ Тогда
		
		Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") 
			И Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
			
			НаправлениеСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий");
		Иначе
			НаправлениеСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий");
		КонецЕсли; 
		
		
		СтандартнаяОбработка = Ложь;
		
		ДоступныеРоли = Новый Структура();
		Если ПроверитьРолиНаСервере("ДобавлениеИзменениеСНТ") Тогда
			ДоступныеРоли.Вставить("ДобавлениеИзменениеСНТ", Истина);
		КонецЕсли;
		Если ПроверитьРолиНаСервере("ЧтениеСНТ") Тогда
			ДоступныеРоли.Вставить("ЧтениеСНТ", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СНТ) Тогда 
			ВСКлиентПереопределяемый.ОткрытьСНТ(ЭтаФорма, Объект.СНТ, НаправлениеСНТ, ДоступныеРоли);
		Иначе
			Если ПроверитьРолиНаСервере("ДобавлениеИзменениеСНТ") Тогда
				ВыбратьСНТНаКлиенте();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьРолиНаСервере(Роль)
	
	Возврат Пользователи.РолиДоступны(Роль);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСНТНаКлиенте()
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.ПустаяСсылка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указано направление документа.'"));
		Возврат;
	КонецЕсли;
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий")
		И Объект.Вид = ПредопределенноеЗначение("Перечисление.ВидыЭСФ.Дополнительный") Тогда
		ТипСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий");
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ТипСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Входящий");
	ИначеЕсли Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий") Тогда
		ТипСНТ = ПредопределенноеЗначение("Перечисление.НаправленияСНТ.Исходящий");
	КонецЕсли;
	
	ВСКлиентПереопределяемый.ОткрытьФормуВыбораСНТ(ЭтаФорма, ТипСНТ);

КонецПроцедуры
//--НЕ ЭСФ	
///////////////////////////////////////////////////////////////////////////////
// Отображение реквизитов поставщиков и получателей

&НаСервере
Процедура ПоставщикиПолучателиУстановитьТекущуюСтрокуИРежимРедактирования()
	
	УстановитьТекущуюСтрокуТабличнойЧасти("Поставщики");
	УстановитьРежимРедактированияТабличнойЧасти("Поставщики");

	УстановитьТекущуюСтрокуТабличнойЧасти("Получатели");	
	УстановитьРежимРедактированияТабличнойЧасти("Получатели");
	
КонецПроцедуры

// Процедура позиционируется на первой строке табличной части.
// Если ТЧ пуста, то добавляет первую строку
&НаСервере
Процедура УстановитьТекущуюСтрокуТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если Объект[ИмяТабличнойЧасти].Количество() = 0 Тогда
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();		
		Элементы.Поставщики.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = Объект[ИмяТабличнойЧасти][0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

// Если ТЧ содержит только одну строку, то включаем режим редактирования для одной строки.
// Если строк несколько, то редактирование производится в табличной форме.
&НаСервере
Процедура УстановитьРежимРедактированияТабличнойЧасти(ИмяТабличнойЧасти)
	
	ИмяКнопкиУправленияРежимом = ИмяТабличнойЧасти + "РедактироватьСписком";
	ИмяГруппыРаздела = "Группа" + ИмяТабличнойЧасти + "Страницы";
	ИмяСтраницыРаздела = "Раздел" + ИмяТабличнойЧасти;
	
	КоличествоСтрок = Объект[ИмяТабличнойЧасти].Количество();
	
	Элементы[ИмяКнопкиУправленияРежимом].Пометка = КоличествоСтрок > 1;
	
	Если Элементы[ИмяКнопкиУправленияРежимом].Пометка Тогда
		Элементы[ИмяГруппыРаздела].ТекущаяСтраница = Элементы[ИмяСтраницыРаздела + "Списком"];
	Иначе
		Элементы[ИмяГруппыРаздела].ТекущаяСтраница = Элементы[ИмяСтраницыРаздела + "ОднаСтрока"];
	КонецЕсли;
	
	НастроитьВидимостьДвухПодменюПоставщик(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком(ИмяТабличнойЧасти)
	
	Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка = НЕ Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка;
	
	КоличествоСтрок = Объект[ИмяТабличнойЧасти].Количество();
	
	Если НЕ Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка
		  И Объект[ИмяТабличнойЧасти].Количество() > 1 Тогда
		  
		ВопросУдалениеСтрокЗавершение = Новый ОписаниеОповещения("ВопросУдалениеСтрокЗавершение", ЭтаФорма, Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти));
		ПоказатьВопрос(ВопросУдалениеСтрокЗавершение, НСтр("ru = 'Все строки кроме первой будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		УстановитьТекущуюСтраницуРеквизитовПоставщиковПолучателей(ИмяТабличнойЧасти);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалениеСтрокЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
	Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка = НЕ Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка = Истина;
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = Объект[ИмяТабличнойЧасти].Количество();
	
	Пока КоличествоСтрок > 1 Цикл
		Объект[ИмяТабличнойЧасти].Удалить(Объект[ИмяТабличнойЧасти][КоличествоСтрок - 1]);
		КоличествоСтрок = КоличествоСтрок - 1;
	КонецЦикла;
	
	Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = Объект[ИмяТабличнойЧасти][0].ПолучитьИдентификатор();
	УстановитьТекущуюСтраницуРеквизитовПоставщиковПолучателей(ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуРеквизитовПоставщиковПолучателей(ИмяТабличнойЧасти)
    
    Если Элементы[ИмяТабличнойЧасти + "РедактироватьСписком"].Пометка Тогда
        Элементы["Группа" + ИмяТабличнойЧасти + "Страницы"].ТекущаяСтраница = Элементы["Раздел" + ИмяТабличнойЧасти + "Списком"];
    Иначе
        Элементы["Группа" + ИмяТабличнойЧасти + "Страницы"].ТекущаяСтраница = Элементы["Раздел" + ИмяТабличнойЧасти + "ОднаСтрока"];
    КонецЕсли;

	НастроитьВидимостьДвухПодменюПоставщик(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Работа с таблицами ТоварыПоПоставщикам и ТоварыПоПолучателям

&НаСервере
Процедура ЗаполнитьДопРеквизитыТаблицТоваровПоУчастникамСД()
	
	ЗаполнитьДопРеквизитыОднойТаблицыТоваровПоУчастникамСД("ТоварыПоПоставщикам");
    ЗаполнитьДопРеквизитыОднойТаблицыТоваровПоУчастникамСД("ТоварыПоПолучателям");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопРеквизитыОднойТаблицыТоваровПоУчастникамСД(Знач ИмяТаблицы)
	
	Для Каждого СтрокаТоварыПоУчастникамСД Из Объект[ИмяТаблицы] Цикл
				
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить поля Товар, Цена, СтавкаАкциза, СтавкаНДС.
		
		// Найти строку товара по номеру товара.
		ПараметрыОтбора = Новый Структура("НомерСтроки", СтрокаТоварыПоУчастникамСД.НомерТовара);
		МассивСтрокТовары = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		// Заполнить поля Товар, Цена, СтавкаАкциза, СтавкаНДС.
		Если МассивСтрокТовары.Количество() <> 0 Тогда
			
			СтрокаТовары = МассивСтрокТовары[0];
			
			// Заполнить поле Товар.	
			Если ЗначениеЗаполнено(СтрокаТовары.Товар) Тогда
				Товар = СтрокаТовары.Товар;
			Иначе
				Товар = СтрокаТовары.ТоварНаименование
			КонецЕсли;	
			СтрокаТоварыПоУчастникамСД.Товар = Товар;
			
			// Заполнить поле Цена.
			СтрокаТоварыПоУчастникамСД.Цена = СтрокаТовары.Цена;
			
			// Заполнить поле СтавкаАкциза.
			Если ЗначениеЗаполнено(СтрокаТовары.СтавкаАкциза) Тогда
				СтавкаАкциза = СтрокаТовары.СтавкаАкциза;
			Иначе
				СтавкаАкциза = СтрокаТовары.СтавкаАкцизаЧисло
			КонецЕсли;	
			СтрокаТоварыПоУчастникамСД.СтавкаАкциза = СтавкаАкциза;
			
			// Заполнить поле СтавкаНДС.
			Если ЗначениеЗаполнено(СтрокаТовары.СтавкаНДС) Тогда
				СтавкаНДС = СтрокаТовары.СтавкаНДС;
			Иначе
				Если СтрокаТовары.БезНДС Тогда
					СтавкаНДС = НСтр("ru = 'Без НДС'");
				Иначе
					СтавкаНДС = "" + СтрокаТовары.СтавкаНДСЧисло + "%";
				КонецЕсли;
			КонецЕсли;	
			СтрокаТоварыПоУчастникамСД.СтавкаНДС = СтавкаНДС;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить поле Поставщик или Получатель.
		
		// Определить имя реквизита и таблицы в зависимости от заполняемой таблицы.
		Если ИмяТаблицы = "ТоварыПоПоставщикам" Тогда
			ПоставщикиПолучателиИмяРеквизита = "Поставщик";
			ПоставщикиПолучателиИмяТаблицы = "Поставщики";
		Иначе
			ПоставщикиПолучателиИмяРеквизита = "Получатель";
			ПоставщикиПолучателиИмяТаблицы = "Получатели";
		КонецЕсли;
		
		// Найти строку получателя или поставщика по ИНН/БИН.
		ПараметрыОтбора = Новый Структура(ПоставщикиПолучателиИмяРеквизита + "Идентификатор", СтрокаТоварыПоУчастникамСД.Идентификатор);
		МассивСтрокПоставщикиПолучатели = Объект[ПоставщикиПолучателиИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		
		// Заполнить поле Поставщик или Получатель.
		Если МассивСтрокПоставщикиПолучатели.Количество() <> 0 Тогда
			
			СтрокаПоставщикиПолучатели = МассивСтрокПоставщикиПолучатели[0];
			
			Если ЗначениеЗаполнено(СтрокаПоставщикиПолучатели[ПоставщикиПолучателиИмяРеквизита]) Тогда
				// Отобразить в поле ссылку.
				ПоставщикПолучатель = СтрокаПоставщикиПолучатели[ПоставщикиПолучателиИмяРеквизита];	
			Иначе
				// Отобразить в поле наименование.
				ПоставщикПолучатель = СтрокаПоставщикиПолучатели[ПоставщикиПолучателиИмяРеквизита + "Наименование"];	
			КонецЕсли;
			
			СтрокаТоварыПоУчастникамСД[ПоставщикиПолучателиИмяРеквизита] = ПоставщикПолучатель;
			
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Заполнение ссылочных полей ЭСФ

&НаСервере
Функция НайтиКонтрагентовПоИдентификатору(Знач Идентификатор)
	
	МассивКонтрагентов = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = ЛОЖЬ
	|	И Контрагенты.%КонтрагентИНН = &Идентификатор";
	
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%КонтрагентИНН", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивКонтрагентов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивКонтрагентов;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Контрагент(Знач Объект)
	
	Контрагент = Неопределено;
	
	СтрокаКонтрагент = СтрокаКонтрагент(Объект);
	
	Если СтрокаКонтрагент <> Неопределено Тогда
		
		Если СтрокаКонтрагент.Свойство("Поставщик") Тогда
			Контрагент = СтрокаКонтрагент.Поставщик;	
		Иначе
			Контрагент = СтрокаКонтрагент.Получатель;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаКонтрагент(Знач Объект)
	
	СтрокаКонтрагент = Неопределено;
	
	ИмяТаблицыКонтрагента = ИмяТаблицыКонтрагента(Объект);
	
	Если Объект[ИмяТаблицыКонтрагента].Количество() > 0 Тогда
		СтрокаКонтрагент = Объект[ИмяТаблицыКонтрагента][0];
	КонецЕсли;
	
	Возврат СтрокаКонтрагент;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыКонтрагента(Знач Объект)
	
	ИмяТаблицыКонтрагента = "";
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		ИмяТаблицыКонтрагента = "Поставщики";
	Иначе
		ИмяТаблицыКонтрагента = "Получатели";	
	КонецЕсли;
	
	Возврат ИмяТаблицыКонтрагента;
	
КонецФункции

&НаСервере
Функция НайтиДоговорыПоставкиНаСервере()
	
	МассивДоговоров = Новый Массив;
	
 	СтрокаКонтрагент = СтрокаКонтрагент(Объект);
	ИмяТаблицыКонтрагента = ИмяТаблицыКонтрагента(Объект);

	Если СтрокаКонтрагент <> Неопределено Тогда
		ОбработкаОбменЭСФ = ЭСФСерверПовтИсп.ОбработкаОбменЭСФ();	
		МассивДоговоров = ОбработкаОбменЭСФ.НайтиДоговорыПоставкиПоДаннымЭСФ(Объект, СтрокаКонтрагент, ИмяТаблицыКонтрагента);
	КонецЕсли;
	
	Возврат МассивДоговоров;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

&НаСервере
Процедура УправлениеФормой()
	
	// получим состояние очереди
	ВыборкаОчереди = РегистрыСведений.ОчередьОтправкиЭСФ.Выбрать(Новый Структура("ЭСФ", Объект.Ссылка));
	ОбъектНаходитсяВОчередиОтправки = ВыборкаОчереди.Следующий();

	СформироватьПредставлениеСостояния();
	
	ИзменитьКоманднуюПанельДокумента();	
	
	СформироватьПредставлениеСчетаФактуры(ЭтаФорма);
	СформироватьПредставлениеОтзыва(ЭтаФорма);
	СформироватьПредставлениеСНТ(ЭтаФорма);
	
	УстановитьДоступностьРеквизитов();
			
	Элементы.Ошибки.Видимость = ?(Объект.Ошибки.Количество() = 0, Ложь, Истина);
	
	Если Объект.Вид = Перечисления.ВидыЭСФ.Дополнительный И Объект.СвязанныйЭСФ.Пустая() Тогда
		Элементы.СвязанныйЭСФ.ОтметкаНезаполненного = Истина;
	Иначе
		Элементы.СвязанныйЭСФ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ЭтаФорма.РежимТолькоПросмотр Тогда 
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = НСтр("ru = 'Предварительный просмотр загружаемого электронного счета-фактуры'");
		ЭтаФорма.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		
		Элементы.ГруппаПредставлениеСчетаФактуры.Видимость = Ложь;
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
		// Скрыть ссылочные поля:
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СвязанныйЭСФ", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Поставщик", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикиПоставщик", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Получатель", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучателиПолучатель", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорПоставки", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Валюта", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыТовар", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЕдиницаИзмерения", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСтавкаАкциза", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыСтавкаНДС", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщикСписок", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Автор", "Видимость", Ложь);
		
		// Скрыть кнопки редактирования в списке.
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикиРедактироватьСписком", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПолучателиРедактироватьСписком", "Видимость", Ложь);
		
		// Скрыть кнопки заполнения ссылочных реквизитов.
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщикСписок", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюПоставщик", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюДоговорПоставки", "Видимость", Ложь);		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюТовары", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", Ложь);
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПодвал", "Видимость", Ложь);
		
	Иначе	
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", ВедетсяУчетПоТоварамОрганизацийБУ ИЛИ ВедетсяУчетПоТоварамОрганизацийНаВС);
		НастроитьВидимостьДвухПодменюПоставщик(ЭтаФорма);
		
		ВидимостьПоступлениеТоваровУслуг = 
			(Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий")
				И ЗначениеЗаполнено(Объект.СчетФактура) И НЕ ТипЗнч(Объект.СчетФактура) = Тип("ДокументСсылка.ЗаписьКнигиПокупок"));
		                                                                                     
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоступлениеТоваровУслуг", "Видимость", ВидимостьПоступлениеТоваровУслуг);
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюДоговорПоставки", "Видимость", Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));
		
		// Скрыть кнопки заполнения ссылочных реквизитов.
		ЕстьПравоЧтенияКонтрагентов    = ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты);
		ЕстьПравоИзмененияКонтрагентов = ПравоДоступа("Изменение", Метаданные.Справочники.Контрагенты);
		
		ЕстьПравоЧтенияДоговоров    = ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов);
		ЕстьПравоИзмененияДоговоров = ПравоДоступа("Изменение", Метаданные.Справочники.ДоговорыКонтрагентов);
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикНайти",            "Видимость", ЕстьПравоЧтенияКонтрагентов);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикСоздать",          "Видимость", ЕстьПравоИзмененияКонтрагентов);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикНайтиСписок",      "Видимость", ЕстьПравоЧтенияКонтрагентов);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоставщикСоздатьСписок",    "Видимость", ЕстьПравоИзмененияКонтрагентов);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорНайти",              "Видимость", ЕстьПравоЧтенияДоговоров);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорСоздать",            "Видимость", ЕстьПравоИзмененияДоговоров);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЗаполнитьРеквизиты", "Видимость", ЕстьПравоИзмененияДоговоров);
		
		ЕстьПравоИзмененияЭСФ = ПравоДоступа("Изменение", Метаданные.Документы.ЭСФ);
		ЕстьСНТ = ЗначениеЗаполнено(Объект.СНТ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураСоздать",          "Видимость", ЕстьПравоИзмененияЭСФ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураВыбрать",          "Видимость", ЕстьПравоИзмененияЭСФ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураОбновить",         "Видимость", ЕстьПравоИзмененияЭСФ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураОтсоединить",      "Видимость", ЕстьПравоИзмененияЭСФ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСчетуФактуре", "Видимость", ЕстьПравоИзмененияЭСФ И НЕ ЕстьСНТ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСНТ",          "Видимость", ЕстьПравоИзмененияЭСФ И ЕстьСНТ);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаполнитьСсылки",             "Видимость", ЕстьПравоИзмененияЭСФ);
		
	КонецЕсли;
	
	НастроитьВерсиюЭСФ(ЭтаФорма, Объект.ВерсияБланкаЭСФ);
	
	УстановитьВидимостьЭлементовДоговораПоставки();
	УстановитьВидимостьЭлементовБумажногоСФ();
	
	Если ВедетсяУчетПоТоварамОрганизацийНаВС Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНайтиСоздатьОбновитьНомераГТД", "Заголовок", "Заполнить источники происхождения");
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", (Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий));
	Иначе
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНайтиСоздатьОбновитьНомераГТД", "Заголовок", "Найти, создать, обновить");
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодменюНомераГТД", "Видимость", Ложь);
	КонецЕсли;
			
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНомерГТД", "Видимость", ВедетсяУчетПоТоварамОрганизацийБУ И НЕ ВедетсяУчетПоТоварамОрганизацийНаВС);	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникПроисхождения", "Видимость", ВедетсяУчетПоТоварамОрганизацийНаВС);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыИсточникПроисхождения", "ТолькоПросмотр", Объект.Направление = Перечисления.НаправленияЭСФ.Входящий);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", ВедетсяУчетПоТоварамОрганизацийНаВС);	
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыГруппа10"	 , "Видимость", Объект.Направление = Перечисления.НаправленияЭСФ.Входящий);	
	
	//++ НЕ ЭСФ
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОчиститьПредставлениеСНТ", "Видимость", ЗначениеЗаполнено(Объект.СНТ));	
	
	ПроверитьНаличиеКоэффициентаПересчета();	
	
	ВедетсяУчетПоТоварамНаВС = ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата);
	
	//Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий И ВедетсяУчетПоТоварамНаВС Тогда
	Если ВедетсяУчетПоТоварамНаВС
		И (Объект.Направление = Перечисления.НаправленияЭСФ.Входящий Или 
		(Объект.Направление = Перечисления.НаправленияЭСФ.Входящий И Объект.Вид = Перечисления.ВидыЭСФ.Дополнительный)) Тогда
		
		ЗапрещеноИзменятьСоставПорядокСтрок = ЗапрещеноИзменятьСоставСтрок();
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "ИзменятьПорядокСтрок", Не ЗапрещеноИзменятьСоставПорядокСтрок);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Товары", "ИзменятьСоставСтрок" , Не ЗапрещеноИзменятьСоставПорядокСтрок);
		
	КонецЕсли;
	
	Если Не (СтрНайти(Объект.ДокументПодтверждающийПоставкуНомер, "SNT") > 0) Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНомерИзСНТ", "Видимость", Ложь);
	КонецЕсли;
	
	//-- НЕ ЭСФ
	
	УстановитьВидимостьСсылкиНаСНТ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОшибок(ИсточникДляЗаполненияТаблицыОшибок)
	
	Ошибки.Очистить();	
	
	ТаблицаЛокализацииОшибок = ЭСФСерверПовтИсп.НоваяТаблицаОшибокИСЭСФ();
	
	Для Каждого Ошибка Из ИсточникДляЗаполненияТаблицыОшибок Цикл
		
		ИнформацияОбОшибке = ЭСФСервер.ИнформацияОбОшибкеБизнесЛогикиИСЭСФ(ТаблицаЛокализацииОшибок, Ошибка.Текст, Ошибка.Поле);
		
		НоваяСтрока = Ошибки.Добавить();
		
		НоваяСтрока.ТекстИСЭСФ  = ИнформацияОбОшибке.ТекстИСЭСФ;
		НоваяСтрока.ПолеИСЭСФ   = ИнформацияОбОшибке.ПолеИСЭСФ;
		НоваяСтрока.ТекстИБ     = ИнформацияОбОшибке.ТекстИБ;
		НоваяСтрока.ПолеИБ      = ИнформацияОбОшибке.ПолеИБ;
		НоваяСтрока.ИмяСтраницы = ИнформацияОбОшибке.ИмяСтраницы;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКоманднуюПанельДокумента()
	     
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI") Тогда
		
		// Установить видимость кнопок Отправить, Обновить, ЗаписатьИЗакрыть.
		Если ОбъектНаходитсяВОчередиОтправки Тогда
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "КнопкаПоУмолчанию", Ложь);
			
		ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован 
			ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером Тогда
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "КнопкаПоУмолчанию", Истина);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "КнопкаПоУмолчанию", Ложь);
			
		ИначеЕсли Объект.Состояние = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером Тогда
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "КнопкаПоУмолчанию", Истина);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "КнопкаПоУмолчанию", Ложь);
			
		Иначе
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтправить", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПолучитьРезультатОтправки", "КнопкаПоУмолчанию", Ложь);
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "КнопкаПоУмолчанию", Истина);
			
		КонецЕсли;
		
		// Установить видимость кнопки Отозвать.
		Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
			И (Объект.Состояние = Перечисления.СостоянияЭСФ.ПринятСервером
			ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ДоставленПолучателю) Тогда
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтозвать", "Видимость", Истина);
			
		Иначе
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтозвать", "Видимость", Ложь);
			
		КонецЕсли;
		
		// Установить видимость кнопки Экспортировать.
		Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортировать", "Видимость", Истина);
		Иначе
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортировать", "Видимость", Ложь);
		КонецЕсли;
		
		// Установить видимость кнопки Проверить.
		Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПроверить", "Видимость", Истина);
		Иначе
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПроверить", "Видимость", Ложь);
		КонецЕсли;
		
		// Установить видимость кнопки Отклонить.
		Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
			
			Если Объект.Статус = Перечисления.СтатусыЭСФ.Отозванный 
				ИЛИ Объект.Вид = Перечисления.ВидыЭСФ.Исправленный
				ИЛИ Объект.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда 
				
				ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонить", "Видимость", Истина);
			
			Иначе
				
				ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонить", "Видимость", Ложь);
				
			КонецЕсли;
				
		Иначе
			
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтклонить", "Видимость", Ложь);
			
		КонецЕсли;
		
	Иначе
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаОтозвать", "Видимость", Ложь);
		
		Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортировать", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортироватьПоУмолчанию", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортироватьПоУмолчанию", "КнопкаПоУмолчанию", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Ложь);
		Иначе
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортировать", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортироватьПоУмолчанию", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭкспортироватьПоУмолчанию", "КнопкаПоУмолчанию", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "КнопкаПоУмолчанию", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить видимость кнопок, зависящих только от направления.
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураСоздать", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураОбновить", "Видимость", Ложь);
		Если ЗначениеЗаполнено(Объект.СНТ) Тогда
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСчетуФактуре", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаполнитьСсылки", "Видимость", Ложь);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСНТ", "Видимость", Истина);
		Иначе
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСчетуФактуре", "Видимость", Истина);
			ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСНТ", "Видимость", Ложь);
		КонецЕсли;
	Иначе
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураСоздать", "Видимость", Истина);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСчетФактураОбновить", "Видимость", Истина);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСчетуФактуре", "Видимость", Ложь);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаПерезаполнитьПоСНТ", "Видимость", Ложь);
	КонецЕсли;
	
	//++ НЕ ЭСФ
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий И Объект.Вид = Перечисления.ВидыЭСФ.Дополнительный Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаДокументЭлектронныйДокументВССоздатьЭлектронныйДокументВС", "Видимость", Ложь);
	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий Тогда
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЭДВС", "Видимость", Ложь);
	КонецЕсли;
	//-- НЕ ЭСФ

КонецПроцедуры

&НаКлиенте
Функция СсылочныеРеквизитыДляСозданияСчетаФактурыЗаполнены()
	
	// В счете-фактуре полученном нет реквизитов Грузоотправитель и Грузополучатель,
	// поэтому заполнение данных реквизитов не проверяется.
	
	РеквизитыЗаполнены = Истина;
	
	// Поставщики.Поставщик
	Для Каждого СтрокаПоставщики Из Объект.Поставщики Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПоставщики.Поставщик) Тогда
			РеквизитыЗаполнены = Ложь;
			ТекстСообщения = НСтр("ru = 'Поле ""Поставщик ссылка"" не заполнено, в строке №%НомерCтроки%, в разделе ""Раздел B. Поставщики"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерCтроки%", СтрокаПоставщики.НомерСтроки);
			Сообщить(ТекстСообщения);
		КонецЕсли;		
	КонецЦикла;
	
	// Получатели.Получатель
	Для Каждого СтрокаПолучатели Из Объект.Получатели Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаПолучатели.Получатель) Тогда
			РеквизитыЗаполнены = Ложь;
			ТекстСообщения = НСтр("ru = 'Поле ""Получатель ссылка"" не заполнено, в строке №%НомерCтроки%, в разделе ""Раздел C. Получатели"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерCтроки%", СтрокаПоставщики.НомерСтроки);
			Сообщить(ТекстСообщения);
		КонецЕсли;		
	КонецЦикла;
			
	// ДоговорПоставки
	Если ЗначениеЗаполнено(Объект.ДоговорПоставкиНомер) 
		И ЗначениеЗаполнено(Объект.ДоговорПоставкиДата)
		И НЕ ЗначениеЗаполнено(Объект.ДоговорПоставки) Тогда
		РеквизитыЗаполнены = Ложь;
		Сообщить(НСтр("ru = 'Поле ""Договор поставки ссылка"" не заполнено, в разделе ""Раздел E. Условия поставки"".'"));
	КонецЕсли;

	// Валюта
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		РеквизитыЗаполнены = Ложь;
		Сообщить(НСтр("ru = 'Поле ""Валюта ссылка"" не заполнено, в разделе ""G. Товары"".'"));
	КонецЕсли;
	
	// Товары.Товар
	Для Каждого ТоварыСтрока Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТоварыСтрока.Товар) Тогда
			РеквизитыЗаполнены = Ложь;
			ТекстСообщения = НСтр("ru = 'Поле ""Товар ссылка"" не заполнено, в строке №%НомерСтроки%, в разделе ""G. Товары"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ТоварыСтрока.НомерСтроки);
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	// заполненность поля Ед. измерения игнорируем, тк в УПК единица измерения может быть не заполнена
	//// Товары.ЕдиницаИзмерения
	//Для Каждого ТоварыСтрока Из Объект.Товары Цикл
	//	Если НЕ ЗначениеЗаполнено(ТоварыСтрока.ЕдиницаИзмерения) Тогда
	//		РеквизитыЗаполнены = Ложь;
	//		ТекстСообщения = НСтр("ru = 'Поле ""Ед. изм. ссылка"" не заполнено, в строке №%НомерСтроки%, в разделе ""G. Товары"".'"); 
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ТоварыСтрока.НомерСтроки);
	//		Сообщить(ТекстСообщения);
	//	КонецЕсли;
	//КонецЦикла;
	
	// Товары.СтавкаАкциза
	Для Каждого ТоварыСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкцизаЧисло) И НЕ ЗначениеЗаполнено(ТоварыСтрока.СтавкаАкциза) Тогда
			РеквизитыЗаполнены = Ложь;
			ТекстСообщения = НСтр("ru = 'Поле ""Ставка акциза ссылка"" не заполнено, в строке №%НомерСтроки%, в разделе ""G. Товары"".'"); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ТоварыСтрока.НомерСтроки);
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;	
	
	// Товары.СтавкаНДС
	Для Каждого ТоварыСтрока Из Объект.Товары Цикл
		Если НЕ ЗначениеЗаполнено(ТоварыСтрока.СтавкаНДС) Тогда
			РеквизитыЗаполнены = Ложь;
			ТекстСообщения = НСтр("ru = 'Поле ""Ставка НДС ссылка"" не заполнено, в строке №%НомерСтроки%, в разделе ""G. Товары"".'"); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ТоварыСтрока.НомерСтроки);
			Сообщить(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

&НаСервереБезКонтекста
Функция АктуальныйЭСФ(СчетФактура)
	
	ДанныеАктуальногоЭСФ = ЭСФСервер.ДанныеАктуальногоЭСФ(СчетФактура);
	
	Если ДанныеАктуальногоЭСФ = Неопределено Тогда
		АктуальныйЭСФ = Неопределено;
	Иначе
		АктуальныйЭСФ = ДанныеАктуальногоЭСФ.ЭСФ;
	КонецЕсли;
	
	Возврат АктуальныйЭСФ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьОбменЭСФЧерезAPI()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭСФЧерезAPI");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьДвухПодменюПоставщик(Форма)
	
	ВидимостьПодменюПоставщикСписок = Ложь;
	ВидимостьПодменюПоставщик = Ложь;
	
	Если Форма.Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий") Тогда
		
		ВидимостьПодменюПоставщик = Истина И НЕ Форма.РежимТолькоПросмотр;
		
		Если Форма.Элементы.ГруппаПоставщикиСтраницы.ТекущаяСтраница = Форма.Элементы.РазделПоставщикиСписком Тогда
			ВидимостьПодменюПоставщикСписок = Истина И НЕ Форма.РежимТолькоПросмотр;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПодменюПоставщикСписок", "Видимость", ВидимостьПодменюПоставщикСписок);
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПодменюПоставщик", "Видимость", ВидимостьПодменюПоставщик);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияТиповДляПолейВыбораПоставщиковИПолучателей()
	
	// Создать типы для ограничений.
	ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Если ЭСФКлиентСерверПереопределяемый.ИспользуютсяСтруктурныеПодразделения() Тогда
		ТипСтруктурнаяЕдиница = Новый ОписаниеТипов("СправочникСсылка.Организации, СправочникСсылка.ПодразделенияОрганизаций");
	Иначе
		ТипСтруктурнаяЕдиница = Новый ОписаниеТипов("СправочникСсылка.Организации");
	КонецЕсли;
	
	// Объявить переменные для хранения типов поставщиков и получателей.
	ТипПоставщик = Неопределено;
	ТипПолучатель = Неопределено;	
	
	// Заполнить переменные для хранения типов поставщиков и получателей.
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		
		ТипПоставщик = ТипКонтрагент;
		ТипПолучатель = ТипСтруктурнаяЕдиница;
		
	Иначе // Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		
		ТипПоставщик = ТипСтруктурнаяЕдиница;
		ТипПолучатель = ТипКонтрагент;
		
	КонецЕсли;
	
	// Установить ограничения типов для поставщиков и получателей.
	Элементы.Поставщик.ОграничениеТипа = ТипПоставщик;
	Элементы.ПоставщикиПоставщик.ОграничениеТипа = ТипПоставщик;	
	Элементы.Получатель.ОграничениеТипа = ТипПолучатель;
	Элементы.ПолучателиПолучатель.ОграничениеТипа = ТипПолучатель;
	
	
	
КонецПроцедуры

&НаСервере
Процедура БезДоговораПриИзмененииНаСервере()
	
	Если БезДоговора Тогда
		Объект.ДоговорПоставкиНомер = "";
		Объект.ДоговорПоставкиДата = Дата(1,1,1);
	Иначе
		ЗаполнитьДанныеПоДоговору();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовДоговораПоставки()
	
	Элементы.ДоговорПоставкиНомер.Видимость  = Не БезДоговора;
	Элементы.ДоговорПоставкиДата.Видимость = Не БезДоговора;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДоговору() Экспорт
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%ДоговорНомер", "");
	СоответсвиеИменРеквизитов.Вставить("%ДоговорДата", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ТекстПолучаемыРеквизиты = СоответсвиеИменРеквизитов.Получить("%ДоговорНомер") + ", " + СоответсвиеИменРеквизитов.Получить("%ДоговорДата");
	
	РеквизитыДоговора = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(Объект.ДоговорПоставки, ТекстПолучаемыРеквизиты);
	
	Объект.ДоговорПоставкиНомер = РеквизитыДоговора.Номер;
	Объект.ДоговорПоставкиДата  = РеквизитыДоговора.Дата;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовГруппаПоступлениеТоваровУслуг()
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоступлениеТоваров", 			 "Видимость", ?(СписокПоступленияУслугПрочихАктивов.Количество() = 0, Истина, Ложь));
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоступлениеУслугПрочихАктивов", "Видимость", ?(СписокПоступленияТоваровУслуг.Количество() = 0, Истина, Ложь)); 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Отображение реквизитов поставщиков и получателей

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВерсиюЭСФ(Форма, ВерсияБланка)
	
	Версия = ?(ЗначениеЗаполнено(ВерсияБланка), ВерсияБланка, 1);
	
	Элементы = Форма.Элементы;
	
	//видимость элементов
	//версия 1
	СтруктураНевидимыхЭлементовВ1 = Новый Структура(
	"ДатаВыпискиНаБумажномНосителе, 
	|ПричинаВыпискиНаБумажномНосителе, 
	|ПоставщикУчастникСРП, 
	|ПоставщикЭкспортер,
	|ПоставщикМеждународныйПеревозчик,
	|ПоставщикДоверитель,
	|ПоставщикиУчастникСРП, 
	|ПоставщикиЭкспортер,
	|ПоставщикБИНФилиала,
	|ПоставщикБИНРеорганизованногоЛица,
	|ПоставщикиМеждународныйПеревозчик,
	|ПоставщикиДоверитель,
	|ПоставщикиБИНФилиала,
	|ПоставщикиБИНРеорганизованногоЛица,
	|ПолучательКодСтраны,
	|ПолучательУчастникСРП,
	|ПолучательДоверитель,
	|ПолучательРозничнаяРеализация,
	|ПолучательНерезидентВерсия2,
	|ПолучательФизическоеЛицо,
	|ПолучательБИНФилиала,
	|ПолучательБИНРеорганизованногоЛица,
	|ПолучателиКодСтраны,
	|ПолучателиУчастникСРП,
	|ПолучателиНерезидентВерсия2,
	|ПолучателиРозничнаяРеализация,
	|ПолучателиДоверитель,
	|ПолучателиБИНФилиала,
	|ПолучателиБИНРеорганизованногоЛица,
	|ПолучателиФизическоеЛицо,
	|ГрузополучательКодСтраны,
	|ГруппаСпособОтправления,
	|ГруппаУсловияПоставки,
	|РазделДокументыПоставки,
	|ТоварыПризнакПроисхождения,
	|ТоварыТоварНаименованиеВРамкахТС,
	|ТоварыНомерПозицииВДекларацииИлиЗаявлении,
	|ТоварыИдентификаторТовара,
	|ТоварыЕдиницаИзмеренияКод,
	|РазделПоверенныйПоставщика,
	|РазделПоверенныйПокупателя,
	|ВыпискаБумажногоЭСФ,
	|РазделC1
	|,
	|МестоРеализацииНеРК,
	|ПоставщикЯвляетсяСтруктурнымПодразделениемНерезидента,
	|ПоставщикиЯвляетсяСтруктурнымПодразделениемНерезидента");
		
	Для Каждого ЭлементСтруктуры Из СтруктураНевидимыхЭлементовВ1 Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			Элементы[ЭлементСтруктуры.Ключ].Видимость = (Версия <> 1);
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураНевидимыхЭлементовВ2 = Новый Структура(
	"ГруппаДокументПодтверждающийПоставку, 
	|ПоставщикЭкспортерИлиУчастникСРП, 
	|ПоставщикиЭкспортерИлиУчастникСРП,
	|ПолучательНерезидент,
	|ПолучателиНерезидент,
	|ДоговорПоставкиСпособОтправления,
	|РазделF");
	
	Для Каждого ЭлементСтруктуры Из СтруктураНевидимыхЭлементовВ2 Цикл
		Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
			Элементы[ЭлементСтруктуры.Ключ].Видимость = (Версия <> 2);
		КонецЕсли;	
	КонецЦикла;
	
	//заголовки элемеентов
	
	//версия 1
	СтруктураЗаголовковВерсия1 = Новый Структура;
	СтруктураЗаголовковВерсия1.Вставить("ГруппаБанковскиеРеквизитыПоставщика", "Банковские реквизиты поставщика");
	СтруктураЗаголовковВерсия1.Вставить("РазделE", "E. Условия поставки");
	СтруктураЗаголовковВерсия1.Вставить("Декорация5", "Раздел E. Условия поставки");
	
	СтруктураЗаголовковВерсия1.Вставить("РазделI", "I. Доп. сведения");
	СтруктураЗаголовковВерсия1.Вставить("ДекорацияРазделДопСведения", "Раздел I. Дополнительные сведения");
	
	СтруктураЗаголовковВерсия1.Вставить("РазделJ", "J. Сведения по ЭЦП");
	СтруктураЗаголовковВерсия1.Вставить("ДекорацияРазделСведенияЭЦП", "Раздел J. Сведения по ЭЦП");
	
	СтруктураЗаголовковВерсия1.Вставить("ТоварыНомерЗаявленияВРамкахТС", "№ заявления в рамках ТС или Декларации на товары");
	СтруктураЗаголовковВерсия1.Вставить("ТоварыНомерГТД", "Источник происхождения");
	
	
	//версия 2	
	СтруктураЗаголовковВерсия2 = Новый Структура;
	СтруктураЗаголовковВерсия2.Вставить("ГруппаБанковскиеРеквизитыПоставщика", "B1. Банковские реквизиты поставщика");
	СтруктураЗаголовковВерсия2.Вставить("РазделE", "E. Договор (контракт)");
	СтруктураЗаголовковВерсия2.Вставить("Декорация5", "Раздел E. Договор (контракт)");
	
	СтруктураЗаголовковВерсия2.Вставить("РазделI", "K. Доп. сведения");
	СтруктураЗаголовковВерсия2.Вставить("ДекорацияРазделДопСведения", "Раздел K. Дополнительные сведения");
	
	СтруктураЗаголовковВерсия2.Вставить("РазделJ", "L. Сведения по ЭЦП");
	СтруктураЗаголовковВерсия2.Вставить("ДекорацияРазделСведенияЭЦП", "Раздел L. Сведения по ЭЦП");

	СтруктураЗаголовковВерсия2.Вставить("ТоварыНомерЗаявленияВРамкахТС", "№ Декларации на товары, заявления в рамках ТС, СТ-1 или СТ-KZ");
	СтруктураЗаголовковВерсия2.Вставить("ТоварыНомерГТД", "Источник происхождения");
	
	Если Не ЗначениеЗаполнено(Версия) Или Версия = 1 Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураЗаголовковВерсия1 Цикл
			Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
				Элементы[ЭлементСтруктуры.Ключ].Заголовок = ЭлементСтруктуры.Значение;
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Для Каждого ЭлементСтруктуры Из СтруктураЗаголовковВерсия2 Цикл
			Если Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено Тогда
				Элементы[ЭлементСтруктуры.Ключ].Заголовок = ЭлементСтруктуры.Значение;
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	
	Форма.ВерсияЭСФ = ?(Версия = 1, "v1", "v2");
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияБланкаЭСФПриИзменении(Элемент)
	НастроитьВерсиюЭСФ(ЭтаФорма, Объект.ВерсияБланкаЭСФ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставкиУсловияПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбъекта", 		 "");
	СтруктураПараметров.Вставить("ИмяОбъекта", 		 "");
	СтруктураПараметров.Вставить("ИмяМакета",  		 "ПФ_MXL_УсловияПоставки");
	СтруктураПараметров.Вставить("ИмяСекции",  		 "Классификатор");
	СтруктураПараметров.Вставить("ТекущийКодСтроки", Объект.ДоговорПоставкиУсловияПоставки);
	СтруктураПараметров.Вставить("ПолучатьПолныеДанные", Истина);
	
	ЭСФКлиентПереопределяемый.ОткрытьФормуВыбораКлассификатора(СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбъекта", 		 "");
	СтруктураПараметров.Вставить("ИмяОбъекта", 		 "");
	СтруктураПараметров.Вставить("ИмяМакета",  		 "ПФ_MXL_СпособыОтправления");
	СтруктураПараметров.Вставить("ИмяСекции",  		 "Классификатор");
	СтруктураПараметров.Вставить("ТекущийКодСтроки", Объект.ДоговорПоставкиСпособОтправления);
	СтруктураПараметров.Вставить("ПолучатьПолныеДанные", Истина);
	
	ЭСФКлиентПереопределяемый.ОткрытьФормуВыбораКлассификатора(СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуПриИзменении(Элемент)
	ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПоставкиУсловияПоставкиПриИзменении(Элемент)
	ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеКодаКлассификатора(ИмяМакета) Экспорт
	
	Если ИмяМакета = "УсловияПоставки" Тогда
		
		Если ПустаяСтрока(Объект.ДоговорПоставкиУсловияПоставки) Тогда
			Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = "<не указано>";
		Иначе

			Если МакетКодовСтрокУсловийПоставки.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокУсловийПоставки = ПолучитьОбщийМакет("ПФ_MXL_УсловияПоставки");
			КонецЕсли;
			
			мОбластьСтрокУсловийПоставки = МакетКодовСтрокУсловийПоставки.Области.Найти("Классификатор");
			
			НаименованиеСтроки = ЭСФКлиентСерверПереопределяемый.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокУсловийПоставки, мОбластьСтрокУсловийПоставки, Объект.ДоговорПоставкиУсловияПоставки);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НСтр("ru ='строка с кодом " + СокрЛП(Объект.ДоговорПоставкиУсловияПоставки) + " не найдена.'");
			Иначе
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НаименованиеСтроки;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
	
	Если ИмяМакета = "СпособыОтправления" Тогда
		
		Если ПустаяСтрока(Объект.СпособОтправленияПоКлассификатору) Тогда
			Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = "<не указано>";
		Иначе
			
			Если МакетКодовСтрокСпособовОтправления.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокСпособовОтправления  =  ПолучитьОбщийМакет("ПФ_MXL_СпособыОтправления");
			КонецЕсли;
			
			мОбластьСтрокСпособовОтправления     = МакетКодовСтрокСпособовОтправления.Области.Найти("Классификатор");
			
			НаименованиеСтроки = ЭСФКлиентСерверПереопределяемый.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокСпособовОтправления, мОбластьСтрокСпособовОтправления, Объект.СпособОтправленияПоКлассификатору);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = НСтр("ru ='строка с кодом " + СокрЛП(Объект.СпособОтправленияПоКлассификатору) + " не найдена.'");
			Иначе
				Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = НаименованиеСтроки;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовБумажногоСФ() ЭКспорт
	
	Элементы.ГруппаСФБумажный.Видимость = ВыпискаБумажногоЭСФ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпискаБумажногоЭСФПриИзменении(Элемент)
	
	ВыпискаБумажногоЭСФПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВыпискаБумажногоЭСФПриИзмененииНаСервере()
	
	Объект.ДатаВыпискиНаБумажномНосителе = Дата(1,1,1);
	Объект.ПричинаВыпискиНаБумажномНосителе = Перечисления.ПричиныВыпискиСФНаБумаге.ПустаяСсылка();
	
	УстановитьВидимостьЭлементовБумажногоСФ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	                          
	ПараметрыВыбораИП = ВСКлиент.ПараметрыВыбораИсточникаПроисхождения(Объект, 
											Объект.Склад,
											Элементы.Товары.ТекущиеДанные,
											"Товар", 
											НЕ Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));	
	ВСКлиент.ИсточникПроисхожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ПараметрыВыбораИП);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ВедетсяУчетПоТоварамОрганизацийНаВС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТоварыИсточникПроисхождения" 
		И Элемент.ТекущийЭлемент.ТолькоПросмотр	Тогда 
		Источник = ТекущиеДанные.ИсточникПроисхождения;
		
		Если ЗначениеЗаполнено(Источник) Тогда 
			ПоказатьЗначение(, Источник);
		КонецЕсли; 		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
											
	Возврат ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);										
											
КонецФункции

//++ НЕ ЭСФ

&НаСервере
Функция ЗапрещеноИзменятьСоставСтрок() 
	
	СостояниеЭСФ = Объект.Состояние;
		
	ЗапретитьМенятьСоставСтрок = Ложь;
	
	
	Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий Тогда
		
		ТекстСообщения = НСтр("ru = 'Отключена возможность изменения порядка / количества строк во входящем ЭСФ.'");
				
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьИнфо", "Заголовок", ТекстСообщения);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", Истина);
		
		ЗапретитьМенятьсоставСтрок = Истина;
		
	ИначеЕсли Объект.Направление = Перечисления.НаправленияЭСФ.Исходящий
		И (СостояниеЭСФ = Перечисления.СостоянияЭСФ.ОбрабатываетсяСервером
		ИЛИ СостояниеЭСФ = Перечисления.СостоянияЭСФ.ОжидаетИдентификацииТоваровНаВС
		ИЛИ СостояниеЭСФ = Перечисления.СостоянияЭСФ.ПринятОтПоставщика
		ИЛИ СостояниеЭСФ = Перечисления.СостоянияЭСФ.ПринятСервером 
		ИЛИ СостояниеЭСФ = Перечисления.СостоянияЭСФ.ДоставленПолучателю) Тогда
		
		ТекстСообщения = НСтр("ru = 'Отключена возможность изменения порядка / количества строк ЭСФ в состоянии <%1>.'");
		ТекстСообщения = ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстСообщения, СостояниеЭСФ);  
		
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьИнфо", "Заголовок", ТекстСообщения);
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", Истина);
		
		ЗапретитьМенятьсоставСтрок = Истина;
	Иначе 
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НадписьИнфо", "Заголовок", "");
		ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИнформация", "Видимость", Ложь);
		
		ЗапретитьМенятьсоставСтрок = Ложь;		
	КонецЕсли;
		
	Возврат ЗапретитьМенятьСоставСтрок;
	
КонецФункции

//-- НЕ ЭСФ

// Создание поступления товаров и услуг

&НаСервере
Процедура ЗаполнитьТекстПоступлениеТоваров()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Ссылка,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Дата
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
	|	ПО
	|		Основания.ДокументОснование = ПоступлениеТоваровУслуг.Ссылка
	|ГДЕ
	|	Основания.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание", Объект.СчетФактура);
	Выборка = Запрос.Выполнить().Выбрать();
	ТекстПоступлениеТоваров = "";
	ПоступлениеТоваровУслуг = Неопределено;
	СписокПоступленияТоваровУслуг.Очистить();
	Пока Выборка.Следующий() Цикл
		ТекстПоступлениеТоваров = ПредставлениеПоступления(Выборка.Номер, Выборка.Дата);
		ПоступлениеТоваровУслуг = Выборка.Ссылка;
		СписокПоступленияТоваровУслуг.Добавить(Выборка.Ссылка, ТекстПоступлениеТоваров);
	КонецЦикла;
	
	Если СписокПоступленияТоваровУслуг.Количество() > 1 Тогда
		ТекстПоступлениеТоваров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поступления товаров и услуг (%1)'"), СписокПоступленияТоваровУслуг.Количество());
	КонецЕсли;
	
	Элементы.ТекстПоступлениеТоваров.Видимость = СписокПоступленияТоваровУслуг.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПоступления(Номер, Дата) Экспорт
	
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("Дата", Дата);
	СтруктураШапки.Вставить("Номер", Номер);
	
	Возврат НСтр("ru='Поступление товаров'") + ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(СтруктураШапки);
	
КонецФункции

&НаКлиенте
Процедура СоздатьПоступлениеНаОснованииЭСФ()
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Перед созданием поступления товаров и услуг необходимо связать электронный счет-фактуру с документом ""Счет-фактура полученный""'"));
	КонецЕсли;
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Товар", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
		ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Основание, ЭСФ_СсылкаНаЭСФ", Объект.Ссылка, Объект.Ссылка));
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В документе найдены строки с незаполненной номенклатурой в разделе G. ""Товары""'"),
			,
			"Объект.Товары");
		
	КонецЕсли;
	
КонецПроцедуры

// Создание поступления услуг и прочих активов
&НаСервере
Процедура ЗаполнитьТекстПоступлениеУслугПрочихАктивов()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеУслугПрочихАктивов.Ссылка,
	|	ПоступлениеУслугПрочихАктивов.Номер,
	|	ПоступлениеУслугПрочихАктивов.Дата
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученный.ДокументыОснования КАК Основания
	|	ПО
	|		Основания.ДокументОснование = ПоступлениеУслугПрочихАктивов.Ссылка
	|ГДЕ
	|	Основания.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание", Объект.СчетФактура);
	Выборка = Запрос.Выполнить().Выбрать();
	ТекстПоступлениеУслугПрочихАктивов = "";
	ПоступлениеУслугПрочихАктивов = Неопределено;
	СписокПоступленияУслугПрочихАктивов.Очистить();
	Пока Выборка.Следующий() Цикл
		ТекстПоступлениеУслугПрочихАктивов= ПредставлениеПоступленияУслугПрочихАктивов(Выборка.Номер, Выборка.Дата);
		ПоступлениеУслугПрочихАктивов = Выборка.Ссылка;
		СписокПоступленияУслугПрочихАктивов.Добавить(Выборка.Ссылка, ТекстПоступлениеУслугПрочихАктивов);
	КонецЦикла;
	
	Если СписокПоступленияУслугПрочихАктивов.Количество() > 1 Тогда
		ТекстПоступлениеУслугПрочихАктивов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Поступления услуг и прочих активов (%1)'"), СписокПоступленияУслугПрочихАктивов.Количество());
	КонецЕсли;
	
	Элементы.ТекстПоступлениеУслугПрочихАктивов.Видимость = СписокПоступленияУслугПрочихАктивов.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПоступленияУслугПрочихАктивов(Номер, Дата) Экспорт
	
	СтруктураШапки = Новый Структура;
	СтруктураШапки.Вставить("Дата", Дата);
	СтруктураШапки.Вставить("Номер", Номер);
	
	Возврат НСтр("ru='Поступление услуг и прочих активов'") + ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(СтруктураШапки);
	
КонецФункции

&НаКлиенте
Процедура СоздатьПоступлениеУслугПрочихАктивовНаОснованииЭСФ()
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетФактура) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Перед созданием поступления услуг и прочих активов необходимо связать электронный счет-фактуру с документом ""Счет-фактура полученный""'"));
	КонецЕсли;
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Товар", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка")));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
		ОткрытьФорму("Документ.ПриобретениеУслугПрочихАктивов.Форма.ФормаДокумента", Новый Структура("Основание, ЭСФ_СсылкаНаЭСФ", Объект.Ссылка, Объект.Ссылка));
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В документе найдены строки с незаполненной номенклатурой в разделе G. ""Товары""'"),
			,
			"Объект.Товары");
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

//++ НЕ ЭСФ

#Область СозданиеЭДВСКонвертацияМеждуРазнымиЕИ

&НаКлиенте
Процедура ПредставлениеЭДВСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокЭДВС.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;	
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Новый ФиксированныйМассив(СписокЭДВС.ВыгрузитьЗначения())));
		
		ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаСписка", ПараметрыФормы,ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СписокЭДВС.Количество() = 1 Тогда	
		
		ПоказатьЗначение(,СписокЭДВС[0].Значение);
		
	Иначе
		
		ОформитьКонвертациюЕИЗавершение = Новый ОписаниеОповещения("ОформитьКонвертациюЕИЗавершение", ЭтаФорма);
		
		Если Объект.Ссылка.Пустая() ИЛИ ЭтаФорма.Модифицированность Тогда
			ОформитьКонвертациюЕИЗавершение = Новый ОписаниеОповещения("ОформитьКонвертациюЕИЗавершение", ЭтаФорма);
			ЭСФКлиент.ВопросЗаписатьОбъектПередВыполнением(ОформитьКонвертациюЕИЗавершение);
		Иначе
			ОформитьКонвертациюЕИЗавершение(КодВозвратаДиалога.ОК, Неопределено);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКонвертациюЕИЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		Если ЭСФКлиент.ОбъектЗаписан(ЭтаФорма) Тогда
		
			ЗначенияЗаполнения = Новый Структура();
			ЗначенияЗаполнения.Вставить("ДокументОснование", Объект.Ссылка);
			ЗначенияЗаполнения.Вставить("ЭтоОформлениеКонвертацииЕИ", Истина);
			
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
			
			ОткрытьФорму("Документ.ЭлектронныйДокументВС.Форма.ФормаДокумента", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеЭДВС(Форма)
	СписокЭДВС = Форма.СписокЭДВС;
	Если СписокЭДВС.Количество() = 0 Тогда
		Форма.ПредставлениеЭДВС 					= НСтр("ru = 'Требуется оформить конвертацию между разными ед. изм.'");
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветКрасный();
	ИначеЕсли СписокЭДВС.Количество() > 1 Тогда
		ТекстПредставления 							= НСтр("ru='Всего ЭДВС: (%1)'");
		ТекстПредставления 							= ЭСФКлиентСерверПереопределяемый.ПодставитьПараметрыВСтроку(ТекстПредставления, СписокЭДВС.Количество());
		Форма.ПредставлениеЭДВС 					= ТекстПредставления;
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	Иначе 
		ТекстПредставления 							= СписокЭДВС[0].Значение;
		Форма.ПредставлениеЭДВС 					= ТекстПредставления;
		Форма.Элементы.ПредставлениеЭДВС.ЦветТекста = ЭСФКлиентСервер.ЦветСиний();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеКоэффициентаПересчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.КоэффициентПересчета,
	|	ЭСФТовары.ЕдиницаИзмерения,
	|	ЭСФТовары.ЕдиницаИзмеренияХраненияОстатков
	|ПОМЕСТИТЬ вт_Товары
	|ИЗ
	|	&Товары КАК ЭСФТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭСФТовары.НомерСтроки,
	|	ЭСФТовары.КоэффициентПересчета
	|ИЗ
	|	вт_Товары КАК ЭСФТовары
	|ГДЕ
	|	(ЭСФТовары.КоэффициентПересчета <> 0
	|	И ЭСФТовары.КоэффициентПересчета <> 1)
	|	ИЛИ
	|	(ЭСФТовары.ЕдиницаИзмерения <> &ПустаяЕдиницаИзмерения
	|	И ЭСФТовары.ЕдиницаИзмеренияХраненияОстатков <> &ПустаяЕдиницаИзмерения
	|	И ЭСФТовары.ЕдиницаИзмерения <> ЭСФТовары.ЕдиницаИзмеренияХраненияОстатков)
	|";
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
	ЕдиницаИзмеренияПустаяСсылка = ЭСФСерверПереопределяемый.ПолучитьПустуюСсылкуЕдиницыИзмерения();
	Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", ЕдиницаИзмеренияПустаяСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьКоэффициентПересчета = Не РезультатЗапроса.Пустой();
	
	Если ЕстьКоэффициентПересчета И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата) Тогда
		СписокЭДВС.ЗагрузитьЗначения(ПолучитьМассивЭДВСКонвертацийЕИ(Объект.Ссылка));
		СформироватьПредставлениеЭДВС(ЭтаФорма);
	Иначе
		СписокЭДВС.Очистить();
	КонецЕсли;	
	
	ЭСФКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПредставлениеЭДВС", "Видимость", Объект.Направление = Перечисления.НаправленияЭСФ.Входящий и ЕстьКоэффициентПересчета И ЭСФСервер.ВедетсяУчетПоТоварамНаВС(Объект.Дата));	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьМассивЭДВСКонвертацийЕИ(ДокументЭСФ)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВС.Ссылка Как ЭДВС
	|ИЗ
	|	Документ.ЭлектронныйДокументВС КАК ЭлектронныйДокументВС
	|ГДЕ
	|	ЭлектронныйДокументВС.ДокументОснование = &ДокументЭСФ
	|	И ЭлектронныйДокументВС.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыФормВС.Детализация)
	|	И ЭлектронныйДокументВС.ВидДетализации = ЗНАЧЕНИЕ(Перечисление.ВидДетализации.КонвертацияМеждуЕИ)";
	
	Запрос.УстановитьПараметр("ДокументЭСФ",ДокументЭСФ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭДВС");
КонецФункции	

&НаКлиенте
Процедура ТоварыКоэффициентПересчетаПриИзменении(Элемент)
	
	ПроверитьНаличиеКоэффициентаПересчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияХраненияОстатковПриИзменении(Элемент)
	//++ НЕ ЭСФ
	ПроверитьНаличиеКоэффициентаПересчета();
	//-- НЕ ЭСФ	
КонецПроцедуры

#КонецОбласти

//-- НЕ ЭСФ

&НаСервере
Процедура УстановитьПараметрыВыбораСкладаДляВходящегоЭСФ(Организация)

	Если Объект.Направление = Перечисления.НаправленияЭСФ.Входящий  Тогда
		
		СкладНераспределенныхТоваров = ВССервер.ПолучитьСкладНераспределенныхТоваровОрганизации(Организация);
		
		НовыйМассивПараметров = Новый Массив;
		НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", СкладНераспределенныхТоваров));
		Элементы.Склад.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИсточникПроисхожденияПриИзменении(Элемент)
	
	//++ НЕ ЭСФ
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ИсточникПроисхождения = СтрокаТабличнойЧасти.ИсточникПроисхождения;
    Дата = Объект.Дата;
	Склад = Объект.Склад;
	СтруктураЗначенийИП = ПолучитьИсточникПроисхожденияТовараНаСервере(Дата, ИсточникПроисхождения, Склад);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,СтруктураЗначенийИП,"НомерЗаявленияВРамкахТС, НомерПозицииВДекларацииИлиЗаявлении, ПризнакПроисхождения, ТоварНаименованиеВРамкахТС, ИдентификаторТовара, КодТНВЭД, ДополнительныйИдентификатор");
	//-- НЕ ЭСФ
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИсточникиИзНомераГТДНаСервере(НомерГТД)
	Возврат ЭСФСерверПереопределяемый.ПолучитьИсточникиИзНомераГТД(НомерГТД);
КонецФункции

//++ НЕ ЭСФ

&НаСервереБезКонтекста
Функция ПолучитьИсточникПроисхожденияТовараНаСервере(Дата,ИсточникПроисхождения,Склад)
	Возврат ВССерверПереопределяемый.ПолучитьДанныеИсточникаПроисхождения (Дата,ИсточникПроисхождения,Склад, Истина);
КонецФункции

#Область СсылкаНаЭДВС

&НаКлиенте
Процедура СсылкаНаЭДВСНажатие(Элемент)
	
	Если СписокВведенныхЭДВС.Количество() > 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСпискаДокументов",
			Новый Структура("СписокДокументов, Заголовок",
				СписокВведенныхЭДВС,
				НСтр("ru='Документы (%КоличествоДокументов%)'")
			),
			ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	ИначеЕсли СписокВведенныхЭДВС.Количество() = 1 Тогда
		ПоказатьЗначение( ,СписокВведенныхЭДВС[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиЭДВСИЗаполнитьСсылкуНаСервере()
	
	ВССерверПереопределяемый.НайтиЭДВСИЗаполнитьСсылку(Объект.Ссылка, Элементы.СсылкаНаЭДВС, СписокВведенныхЭДВС);
	
КонецПроцедуры

#КонецОбласти

//-- НЕ ЭСФ

&НаКлиенте
Процедура ПерезаполнитьПоСНТ(Команда)
	ПерезаполнитьПоСНТНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоСНТНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.СНТ) Тогда
		Сообщить(НСтр("ru = 'Невозможно перезаполнить по СНТ, так как СНТ не указан.'"), СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если НЕ (Объект.Состояние = Перечисления.СостоянияЭСФ.Сформирован ИЛИ Объект.Состояние = Перечисления.СостоянияЭСФ.ОтклоненСервером) Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно перезаполнить, так как электронный счет-фактура %Состояние%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", НРег(Объект.Состояние));
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	ОбъектЭСФ = РеквизитФормыВЗначение("Объект");
	ЭСФСервер.ОчиститьОбъект(ОбъектЭСФ, "Номер, Дата, СчетФактура");
	ЭСФСерверПереопределяемый.ЗаполнитьИсходящийЭСФИзСНТ(Объект.СНТ, ОбъектЭСФ);	
	ЗначениеВРеквизитФормы(ОбъектЭСФ, "Объект");
	
	Модифицированность = Истина;
	
КонецПроцедуры
