 ///Сергей "05.08.2020" +++Начало+++"Доп для Акций"
Перем СуммаДан Экспорт;
Перем СчетчикДан Экспорт;
Перем КратностьДан Экспорт;
Перем ПоУсловиюВозДан Экспорт; 
Перем СчетчикКрат Экспорт;
Перем УжедалиПодарок Экспорт;
Перем СчетчикТек Экспорт;
///Сергей "05.08.2020" ---Конец--- "Доп для Акций"


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ПрограммныйИнтерфейс

// Рассчитывает сумму неотмененных строк заказа
// 
// Параметры:
//	ТолькоЗалогЗаТару - Булево - признак залога за тару.
//
// Возвращаемое значение:
//	Число - сумма заменяющих строк.
//
Функция ПолучитьСуммуЗаказанныхСтрок(ТолькоЗалогЗаТару = Ложь) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И (((Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ (НЕ &ВернутьМногооборотнуюТару) ИЛИ &ТребуетсяЗалогЗаТару)
	|			И НЕ &ТолькоЗалогЗаТару)
	|		ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И &ВернутьМногооборотнуюТару
	|			И &ТребуетсяЗалогЗаТару
	|			И &ТолькоЗалогЗаТару))
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("ТолькоЗалогЗаТару", ТолькоЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаЗаказанныхСтрок = Выгрузка[0].СуммаСНДС;
	Возврат СуммаЗаказанныхСтрок;
	
КонецФункции

// Рассчитывает количество заказанных строк заказа
//
Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

// Заполняет табличную часть ЭтапыГрафикаОплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты(СуммаКорректировки = 0, ТолькоРаспределять = Ложь) Экспорт
	
	СуммаЗаказано       = ПолучитьСуммуЗаказанныхСтрок();
	СуммаЗалогаЗаТару   = ПолучитьСуммуЗаказанныхСтрок(Истина);
	
	Если СуммаЗаказано = 0 И СуммаЗалогаЗаТару = 0 Тогда
		ЭтапыГрафикаОплаты.Очистить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ТолькоРаспределять Тогда
		ЭтапыГрафикаОплаты.Очистить();
	Иначе
		СуммаЗаказано = СуммаЗаказано - СуммаЗалогаЗаТару;
	КонецЕсли;
	
	ГрафикСоглашенияЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение);
	ГрафикЗаполнен = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И ЗначениеЗаполнено(ГрафикОплаты);
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
		ЭтотОбъект,
		ГрафикСоглашенияЗаполнен,
		ГрафикЗаполнен,
		СуммаЗаказано,
		СуммаЗалогаЗаТару,,,ТолькоРаспределять);
		
	ЭтапыОплатыСервер.РаспределитьСуммуОтклоненияПоЭтапамГрафикаОплаты(
							ЭтотОбъект.ЭтапыГрафикаОплаты,
							СуммаКорректировки);
							
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
			ЭтотОбъект,
			Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки,
			ЖелаемаяДатаОтгрузки,
			СуммаЗаказано,
			СуммаЗалогаЗаТару,
			СуммаКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.ВалютаВзаиморасчетов;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	ЦенаВключаетНДС      		   = УсловияПродаж.ЦенаВключаетНДС;
	ВернутьМногооборотнуюТару 	   = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	ТребуетсяЗалогЗаТару 		   = УсловияПродаж.ТребуетсяЗалогЗаТару;
	НаправлениеДеятельности 	   = УсловияПродаж.НаправлениеДеятельности;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> ФормаОплаты;
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ИзмененаОрганизация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;

		Касса  = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
	Иначе
		ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокОплаты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки)
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала,Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	Иначе
		ЖелаемаяДатаОтгрузки = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", 
			Истина, 
			Соглашение,
			Документы.ЗаказКлиента.ПустаяСсылка()));
			
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
				(Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
			
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ПродажиСервер.ЗаполнитьЦены(
						Товары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, РасчитыватьНаборы, НалогообложениеНДС, ВозвращатьМногооборотнуюТару, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							Истина,
							НалогообложениеНДС,
							ВернутьМногооборотнуюТару,
							"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
						КонецЕсли;
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер,КонтактноеЛицо);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
	НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, Склад, Договор, НаправлениеДеятельности, Дата);
		
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоСоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, РасчитыватьНаборы, НалогообложениеНДС, ВозвращатьМногооборотнуюТару, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			Истина,
			НалогообложениеНДС,
			ВернутьМногооборотнуюТару,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)));
			
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
	НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, Склад, Договор, НаправлениеДеятельности, Дата);
		
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента);
	
	ЭтоЗаказСоСклада = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если ЭтоЗаказСоСклада Тогда
		ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Соглашение, Статус);
		СтруктураДействий = Новый Структура();
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);

	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	Если (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или Не ВернутьМногооборотнуюТару)
		И ТребуетсяЗалогЗаТару Тогда
		ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
	СуммаВозвратнойТары = ПолучитьСуммуВозвратнойТары();
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		Или ГрафикИсполненияВДоговоре Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		Если Не ТребуетсяЗалогЗаТару Тогда
			Для Каждого ЭтапОплаты Из ЭтапыГрафикаОплаты Цикл
				ЭтапОплаты.СуммаЗалогаЗаТару = 0;
			КонецЦикла;
		КонецЕсли;
		
		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Тогда
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если Товары.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
				ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
				ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Товары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
	Иначе
		ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиВТаблице(ДатаОтгрузки, Товары, "ДатаОтгрузки");
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента));
	
	ШаблонНазначения = Документы.ЗаказКлиента.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(Назначение, ШаблонНазначения, ЭтотОбъект, "НаправлениеДеятельности", Отказ);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	Иначе
		ИдентификаторПлатежа = Неопределено;
	КонецЕсли; 
	
	//Начало: МК Баубериков - 23.09.2020
	Если Дата >= Дата(2020,9,25) и СпособДоставки<>Перечисления.СпособыДоставки.Самовывоз тогда
		Если ПустаяСтрока(АдресДоставки) тогда
			Отказ=Истина;
			Сообщить("Заполните адрес доставки");
		КонецЕсли;
		Если ПустаяСтрока(НомерТелефонаКлиентаДляДоставки) тогда
			Отказ=Истина;
			Сообщить("Заполните телефон клиента");
		КонецЕсли;
		Если ЗонаДоставки.Пустая() тогда
			Отказ=Истина;
			Сообщить("Заполните зону доставки");
		КонецЕсли;
		//Начало: МК Баубериков - 09.12.2020
		Если НЕ ЗначениеЗаполнено(ВремяДоставкиС) тогда
			Отказ=Истина;
			Сообщить("Заполните время доставки С");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВремяДоставкиПо) тогда
			Отказ=Истина;
			Сообщить("Заполните время доставки ПО");
		КонецЕсли;
        //Конец: МК Баубериков - 09.12.2020		
	КонецЕсли;
	//Конец: МК Баубериков - 23.09.2020
	
	//Начало: МК Баубериков - 16.11.2020
	Если Дата >= Дата(2020,11,23) и Договор.Подразделение.Пустая() тогда
		Отказ=Истина;
		Сообщить("Заполните подразделение в договоре");
	КонецЕсли;
	//Конец: МК Баубериков - 16.11.2020

	
	//ТТ
	пСкидкиРассчитаны = ЭтотОбъект.СкидкиРассчитаны;
	ЭтотОбъект.СкидкиРассчитаны = Истина;
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	ЭтотОбъект.СкидкиРассчитаны = пСкидкиРассчитаны;
	
	//++Тишбаев О.М. перенести в расширение
	Если Не ЭтоНовый() Тогда
		Если Строка(ПараметрыСеанса.ТекущийПользователь.УникальныйИдентификатор()) <> "c9c605c3-fbc4-11ea-9483-00155d8aa801" Тогда
			Если ЭтотОбъект.Контрагент <> Ссылка.Контрагент И ПараметрыСеанса.ТекущийПользователь <> Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор("c9c605c3-fbc4-11ea-9483-00155d8aa801")) Тогда 
				Отказ = Истина;
				Сообщить("Нарушение прав доступа.
				|Попытка сменить контрагента: " + Ссылка.Контрагент + " на контрагента: " + ЭтотОбъект.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//++   
	
	//++Халыкова А. старт 27.12.2021
	УстановитьОграничениеДатыОтгрузки(Отказ);
	//++ финиш 27.12.2021   
	
	//++Аян_К++ 110322 срочная задача от ЕЮ старт
	Отказ = Альфа_КТ.ПроверитьВТБ_Банк(БанковскийСчет);
	//++Аян_К++ 110322 срочная задача от ЕЮ финиш
	
	//++Аян_К++ 080422 старт
	Если ЭтоНовый() Тогда
		//УстановитьЗапретыДляБанков(Отказ);
	КонецЕсли;
	//++Аян_К++ 080422 финиш
	
	//++Аян_К++ 190422 старт
	Если НЕ ЗначениеЗаполнено(ТипОбъектаДизайнер)  Тогда
		Сообщить("Укажите тип объекта", СтатусСообщения.ОченьВажное);	
	КонецЕсли;
	//++Аян_К++ 190422 финиш
	
	//++Аян_К++ 250422 старт
	Если ЗначениеЗаполнено(кт_ПромоКод) Тогда
		ПроверитьПромоКод(Отказ);
	КонецЕсли;
	//++Аян_К++ 250422 финиш
	
КонецПроцедуры

Процедура УстановитьЗапретыДляБанков(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_ЗапрещенныеБанки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.кт_ЗапрещенныеБанки КАК кт_ЗапрещенныеБанки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.БанковскиеСчета = БанковскийСчет Тогда
			Отказ = Истина;
			Сообщить("Выбран не верный банковский счет!", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

//++Халыкова А. старт 27.12.2021
Процедура УстановитьОграничениеДатыОтгрузки(Отказ)
	
	Если Склад = Справочники.Склады.НайтиПоНаименованию("Альфа Логистик WMS") Или Склад = Справочники.Склады.НайтиПоНаименованию("Алматы Логистик WMS") Тогда
		Если ЖелаемаяДатаОтгрузки >= Константы.ДатаИнвентаризацииС.Получить() И ЖелаемаяДатаОтгрузки <= Константы.ДатаИнвентаризацииПо.Получить() Тогда
			Отказ = Истина;
			Сообщить("Укажите дату отгрузки не входящую в период инвентаризации. Срок проведения инвентаризации с 03.01.2022 по 07.01.2022", СтатусСообщения.ОченьВажное);
		КонецЕсли;
		
		Если ЖелаемаяДатаОтгрузки >= Константы.ДатаОграниченияЗаказовНаДоставкуС.Получить() И ЖелаемаяДатаОтгрузки <= Константы.ДатаОграниченияЗаказовНаДоставкуПо.Получить() Тогда
			Если ПолучитьКоличествоСамовывозДоставка(Перечисления.СпособыДоставки.Самовывоз) >= Константы.ОграничениеКолЗаказовВДеньНаСамовывоз.Получить() Тогда
				Отаказ = Истина;
				Сообщить("Укажите другую дату отгрузки. С 08.01.2021 по 12.01.2021 ограничение на количество заказов в день: на доставку – 150, самовывоз - 100", СтатусСообщения.ОченьВажное);
			ИначеЕсли ПолучитьКоличествоСамовывозДоставка(Перечисления.СпособыДоставки.ДоКлиента) >= Константы.ОграничениеКолЗаказовВДеньНаДоставку.Получить() Тогда
				Отаказ = Истина;
				Сообщить("Укажите другую дату отгрузки. С 08.01.2021 по 12.01.2021 ограничение на количество заказов в день: на доставку – 150, самовывоз - 100", СтатусСообщения.ОченьВажное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоСамовывозДоставка(СпособДоставки)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Дата >= &ДатаНачало
		|	И ЗаказКлиента.Дата <= &ДатаОкончание
		|	И ЗаказКлиента.СпособДоставки = &СпособДоставки";
	
	Запрос.УстановитьПараметр("ДатаНачало", НачалоДня(ЖелаемаяДатаОтгрузки));
	Запрос.УстановитьПараметр("ДатаОкончание", КонецДня(ЖелаемаяДатаОтгрузки));
	Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КолЗаказов = 0;
	Если Выборка.Следующий() Тогда
		КолЗаказов = Выборка.Ссылка;
	КонецЕсли;

	Возврат КолЗаказов;
	
КонецФункции
	//++Халыкова А. финиш 27.12.2021
	
Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	ШаблонНазначения = Документы.ЗаказКлиента.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение,
												ШаблонНазначения,
												ЭтотОбъект,
												Партнер,
												УчетНДСУТ.ВидДеятельностиПоНалогообложениюНДС(НалогообложениеНДС));

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаданиеТорговомуПредставителю") Тогда
		ЗаполнитьДокументНаОснованииЗаданияТорговомуПредставителю(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПредзаказКлиента") Тогда
		ЗаполнитьДокументНаОснованииПредзаказКлиента(ДанныеЗаполнения);		
	КонецЕсли;
	
	ИнициализироватьУсловияПродаж();
	ИнициализироватьДокумент(ДанныеЗаполнения);
    ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
    ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Товары, Ложь);
	
	Если Не ЗначениеЗаполнено(ПорядокОплаты) Тогда
		ВалютаОплаты              = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ФормаОплаты, БанковскийСчет, Касса);
		ПорядокОплаты             = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта,НалогообложениеНДС,ВалютаОплаты);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Организация, Склад, Договор, НаправлениеДеятельности, Дата);
	КонецЕсли;
		
	Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ЭтотОбъект,Отказ,"Товары");

	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")
		И ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаСогласования",
			,
			Отказ);
		
	КонецЕсли;
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено");
	
	МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаОтгрузки",
			,
			Отказ);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями И 
		ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата)
		И НЕ ВсеСтрокиОтменены Тогда
	
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ);

	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");
	
	СоответствиеКодовСтрок = Новый Соответствие;
	ДатаОтгрузкиОбязательна = Ложь;
	ШаблонТекста = НСтр("ru='Не заполнена колонка ""Дата отгрузки"" в строке %НомерСтроки% списка ""Товары""'");
	ИзЗаказов = Перечисления.ВариантыОбеспечения.ИзЗаказов;
	СоСклада  = Перечисления.ВариантыОбеспечения.СоСклада;
	Отгрузить  = Перечисления.ВариантыОбеспечения.Отгрузить;
	ОтгрузитьОбособленно  = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно;
	ВариантНеТребуется = Перечисления.ВариантыОбеспечения.НеТребуется;
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		АдресОшибки = " " + НСтр("ru='в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
		
		СтрокаТовары = Товары[ТекИндекс];
		ДатаОтгрузкиВСтрокеОбязательна = Не СтрокаТовары.Отменено
											И СтрокаТовары.ВариантОбеспечения <> ВариантНеТребуется
											И (Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
												ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
												ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт
												ИЛИ (Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован
													И (СтрокаТовары.ВариантОбеспечения = ИзЗаказов
														ИЛИ СтрокаТовары.ВариантОбеспечения = СоСклада
														ИЛИ СтрокаТовары.ВариантОбеспечения = ОтгрузитьОбособленно
														ИЛИ СтрокаТовары.ВариантОбеспечения = Отгрузить)));
		
		Если ДатаОтгрузкиВСтрокеОбязательна И Не НеОтгружатьЧастями И Не ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Тогда
			
			ТекстОшибки   = СтрЗаменить(ШаблонТекста, "%НомерСтроки%", СтрокаТовары.НомерСтроки);
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "ДатаОтгрузки");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТабЧасти,, Отказ);

		КонецЕсли;
		ДатаОтгрузкиОбязательна = ДатаОтгрузкиОбязательна Или ДатаОтгрузкиВСтрокеОбязательна;
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов")
			И Товары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ);
			
		КонецЕсли;
		
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями 
			И ЗначениеЗаполнено(Товары[ТекИндекс].ДатаОтгрузки) 
			И Товары[ТекИндекс].ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ);
			
		КонецЕсли;
		
		ЗаказыСервер.ПроверитьДублиКодовСтрокВТаблице(ЭтотОбъект,
			СтрокаТовары.КодСтроки,
			СтрокаТовары.НомерСтроки,
			СоответствиеКодовСтрок,
			Отказ);
		
	КонецЦикла;
	
	Если ДатаОтгрузкиОбязательна И НеОтгружатьЧастями И Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Дата отгрузки"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ДатаОтгрузки", , Отказ);
		
	КонецЕсли;
	
	ПорядокРасчетовПоДокументу = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	ГрафикИсполненияВДоговоре = Ложь;
	Если ПорядокРасчетовПоДокументу = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Договор) Тогда
		ГрафикИсполненияВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ЗаданГрафикИсполнения");
	КонецЕсли;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПорядокРасчетовПоДокументу <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Не ГрафикИсполненияВДоговоре Тогда
		
		СуммаЗаказанныхСтрок = ПолучитьСуммуЗаказанныхСтрок();
		СуммаЗалоговойТары = ПолучитьСуммуЗаказанныхСтрок(Истина);
		
		ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(
			ЭтотОбъект,
			СуммаЗаказанныхСтрок,
			СуммаЗалоговойТары,
			Истина,
			Отказ,
			Истина);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Соглашение) ИЛИ НЕ ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
	СуммаВозвратнойТары = ПолучитьСуммуВозвратнойТары();
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
	Если Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		
		ПродажиСервер.ПроверитьЗапретОтгрузки(Партнер, Отказ);
		
	КонецЕсли;
																							
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//Ербол-начало
	//Если НЕ Альфа_КТ.ПолучитьСтатусОтгрузкиВМС(Ссылка) Тогда
	//	Сообщить("Документ нужно выгрузить в ВМС!");
	//	Отказ = Истина;
	//КонецЕсли;
	//Ербол-финиш
	
	//++Халыкова А. старт 27.12.2021
	Если НЕ Альфа_КТ.ПроверитьДоступ("ДоверенностьВыданная", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата()) Тогда
		//++Тишбаев О.М.
		Отказ = Документы.ЗаказКлиента.ПроверитьЗадолженностьКонтрагентаПоЗаказам(Ссылка, ДополнительныеСвойства.РежимЗаписи);
		//++
	КонецЕсли;	
	//++Халыкова А. 27.12.2021 ++ конец

	///Сергей 07.08.2020 +++
	Если Не ЗначениеЗаполнено(bon_ДатаПроведенияПервДляБон) Тогда
		bon_ДатаПроведенияПервДляБон = Дата;
		Записать();
	КонецЕсли;
	///Сергей 07.08.2020 ---
	
	//Апаев_О Начало [16.07.2022] - "Доработка подарков акции"
	//НайтиПодарки = Товары.НайтиСтроки(Новый Структура("Подарок", Истина));
	//Если НайтиПодарки.Количество()>1 Тогда
	//	Отказ = Истина;
	//	Сообщить("В строке товары указано более 1 подарка, проведение запрещено");
	//КонецЕсли;
	
	ПоискДублейТоваров();
	//Апаев_О Окончание [16.07.2022]
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаказКлиента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);

	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	bon_БонуснаяПрограммаСервер.ДвиженияПоВыданнымПодаркам(ДополнительныеСвойства, Движения, Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПродажиСервер.ВыполнитьКонтрольЗаказаПослеПроведения(Ссылка, Отказ);
	
	///Сергей 03.08.2020 +++
	Если Не Отказ Тогда
		ДвиженияПоСчетчикуПокупок(); 	
		///Сергей "01.08.2020" +++Начало+++ Срабатывание Условий "Доп для Акций"
		Если ЗначениеЗаполнено(bon_БонусныйСчет) и bon_БонусыВыданыПоСчетчику = Ложь Тогда
			СрабатываниеУсловий(ЭтотОбъект);  ///Сергей "01.08.2020" Срабатывание Условий "Доп для Акций"
		КонецЕсли;
		///Сергей "01.08.2020" ---Конец--- Срабатывание Условий "Доп для Акций"	
		
		
		///Сергей "17.08.2020" +++Начало+++ Списываем примененные бонусы
		Если ЗначениеЗаполнено(bon_БонусныйСчет) и bon_ПартииБонусовИст.Количество() > 0 Тогда
			bon_БонуснаяПрограммаСервер.ДвиженияБонусовПоПартиямРасходОстаток(ЭтотОбъект, Отказ);	
		КонецЕсли;
		///Сергей "17.08.2020" ---Конец--- Списываем примененные бонусы

	КонецЕсли;
	///Сергей 03.08.2020 ---
	
	//++АК_Даулет++ 081221 старт
	Если ЗначениеЗаполнено(ПодарочныйСертификат) Тогда
		СформироватьЗаписьИсторияПодарочныхСертификатов();
	КонецЕсли;
	//++АК_Даулет++ 081221 финиш
	
КонецПроцедуры

//++АК_Даулет++ 081221 старт
Процедура СформироватьЗаписьИсторияПодарочныхСертификатов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПодарочныхСертификатовСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних КАК ИсторияПодарочныхСертификатовСрезПоследних
		|ГДЕ
		|	ИсторияПодарочныхСертификатовСрезПоследних.ПодарочныйСертификат = &ПодарочныйСертификат";
	
	Запрос.УстановитьПараметр("ПодарочныйСертификат", ПодарочныйСертификат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		РеализацияПодарочныхСертификатов = Выборка.Регистратор;
	Иначе
		РеализацияПодарочныхСертификатов = Документы.РеализацияПодарочныхСертификатов.ПустаяСсылка();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	ИсторияПодарочныхСертификатов = РегистрыСведений.ИсторияПодарочныхСертификатов.СоздатьНаборЗаписей();
	
	ИсторияПодарочныхСертификатов.Отбор.Регистратор.Установить(РеализацияПодарочныхСертификатов);
	ИсторияПодарочныхСертификатов.Отбор.Регистратор.Использование = Истина;
	ИсторияПодарочныхСертификатов.Прочитать();
	
	данные = ИсторияПодарочныхСертификатов.Добавить();
	данные.ПодарочныйСертификат = ПодарочныйСертификат;
	данные.Период = ТекущаяДата();    
	данные.Активность = Истина;
	данные.Регистратор = РеализацияПодарочныхСертификатов;
	данные.Статус = Перечисления.СтатусыПодарочныхСертификатов.ПолностьюПогашен;
	ИсторияПодарочныхСертификатов.Записать();
	
КонецПроцедуры
//++АК_Даулет++ 081221 финиш

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(Ссылка, Отказ, Истина);	
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус                 = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	ЖелаемаяДатаОтгрузки   = Дата(1,1,1);
	ДатаОтгрузки           = Дата(1,1,1);
	ДатаСогласования       = Дата(1,1,1);
	МаксимальныйКодСтроки  = 0;
	МаксимальныйКлючСтроки = 0;
	Согласован             = Ложь;
	ДокументОснование      = Неопределено;
	НомерПоДаннымКлиента   = "";
	ДатаПоДаннымКлиента    = Дата(1,1,1);
	Назначение             = Неопределено;
	ИдентификаторПлатежа   = Неопределено;
	
	ОчиститьДанныеПоБонусам();
	
	Товары.Очистить(); ///Сергей 17.08.2020 +++ (Для того чтобы при добавление строки срабатывал условие по ключу строки)

	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Статус") = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И ЗначениеЗаполнено(Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
		Если УсловияПродаж.СтатусСоглашения <> Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Тогда
			Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
				ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(
					ТекущаяДатаСеанса(),
					Перечисления.Периодичность.День,
					УсловияПродаж.СрокПоставки) + 1;
			КонецЕсли;
		Иначе
			Соглашение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.КодСтроки      = 0;
		СтрокаТЧ.ДатаОтгрузки   = Дата(1,1,1);
		СтрокаТЧ.Отменено = Ложь;
		СтрокаТЧ.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
		
	КонецЦикла;
	
	ЭтотОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", Истина,,Истина);
	
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.СуммаНДС = 0;
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
	//Начало: МК Баубериков А - 22.07.2020
	Менеджер = Справочники.Пользователи.ПустаяСсылка();
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	//Окончание: МК Баубериков А - 22.07.2020
	
	//Начало: МК Баубериков А - 03.12.2020
	АдресДоставки = "";
	//Окончание: МК Баубериков А - 03.12.2020
	
КонецПроцедуры

Процедура ОчиститьДанныеПоБонусам()
	
	bon_БонусныйСчет 				= Справочники.bon_НоминальныеОбъекты.ПустаяСсылка();	
	bon_Телефон 					= "";
	bon_АкцииПоСчетчику 			= Ложь;
	bon_ПоКратности 				= Ложь;
	bon_ПоСчетчику 					= Ложь;	
	bon_ПоложениеСчетчика 			= 0;
	bon_СуммаБонусов 				= 0;
	bon_СчетчикКрат 				= 0;
	bon_ДатаПроведенияПервДляБон 	= Дата(1,1,1);
	bon_БонусыВыданыПоСчетчику 		= Ложь;
	bon_БонусПартНачис.Очистить();
	bon_ПартииБонусовИст.Очистить();
	bon_ТабПартий.Очистить();
	bon_ТаблицаВыдАкцийпоСчетчику.Очистить();
	bon_ПодаркиВыданные.Очистить();
	
КонецПроцедуры

Процедура ПроверитьПромоКод(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.кт_ПромоКод = &кт_ПромоКод";
	
	Запрос.УстановитьПараметр("кт_ПромоКод", кт_ПромоКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПромо = РезультатЗапроса.Выбрать();
	
	Если ВыборкаПромо.Следующий() Тогда
		Если ВыборкаПромо.Ссылка <> Ссылка Тогда
			Сообщить("Промо:" + кт_ПромоКод + " недействительный или не найдено, обратитесь в HelpDesk");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	ПродажиСервер.ПроверитьВозможностьВводаНаОснованииПартнераКлиента(Партнер);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СделкиСКлиентами.Ссылка КАК Сделка,
		|	СделкиСКлиентами.Партнер КАК Партнер,
		|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
		|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
		|		ПО (СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Основание");
		
	Запрос.УстановитьПараметр("Основание",Основание);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ЗаполнитьУсловияПродажПоСоглашению();
		Иначе
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка         КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер        КАК Партнер,
		|	СоглашениеСКлиентом.КонтактноеЛицо КАК КонтактноеЛицо,
		|
		|	СоглашениеСКлиентом.Статус      КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое,
		|	СоглашениеСКлиентом.НаправлениеДеятельности КАК НаправлениеДеятельности
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
		|");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоСоглашению();

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(Знач Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КоммерческоеПредложениеКлиенту.Ссылка КАК ДокументОснование,
		|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
		|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
		|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
		|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
		|	КоммерческоеПредложениеКлиенту.СрокПоставки КАК СрокПоставки,
		|	КоммерческоеПредложениеКлиенту.ГрафикОплаты КАК ГрафикОплаты,
		|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
		|	КоммерческоеПредложениеКлиенту.Соглашение КАК Соглашение,
		|	КоммерческоеПредложениеКлиенту.Соглашение.ПорядокОплаты КАК ПорядокОплаты,
		|	КоммерческоеПредложениеКлиенту.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	КоммерческоеПредложениеКлиенту.НалогообложениеНДС КАК НалогообложениеНДС,
		|	КоммерческоеПредложениеКлиенту.ФормаОплаты КАК ФормаОплаты,
		|	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	КоммерческоеПредложениеКлиенту.Склад КАК Склад,
		|	КоммерческоеПредложениеКлиенту.Статус КАК СтатусДокумента,
		|	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
		|	КоммерческоеПредложениеКлиенту.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		|	КоммерческоеПредложениеКлиенту.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	КоммерческоеПредложениеКлиенту.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	КоммерческоеПредложениеКлиенту.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	(НЕ КоммерческоеПредложениеКлиенту.Проведен) КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	КоммерческоеПредложениеКлиенту.СпособДоставки КАК СпособДоставки,
		|	КоммерческоеПредложениеКлиенту.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		КлючСвязи КАК КлючСвязи,
		|		НоменклатураНабора КАК НоменклатураНабора,
		|		ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатурыПолное,
		|		Характеристика КАК Характеристика,
		|		Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
		|		Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Количество КАК Количество,
		|		ВидЦены КАК ВидЦены,
		|		Цена КАК Цена,
		|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаСНДС КАК СуммаСНДС,
		|		Сумма КАК Сумма,
		|		Активность КАК Активность,
		|		ВЫБОР
		|			КОГДА КоммерческоеПредложениеКлиенту.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|					ИЛИ КоммерческоеПредложениеКлиенту.Склад.ЭтоГруппа
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ КоммерческоеПредложениеКлиенту.Склад
		|		КОНЕЦ КАК Склад
		|	) КАК Товары,
		|	КоммерческоеПредложениеКлиенту.СкидкиНаценки.(
		|		КлючСвязи КАК КлючСвязи,
		|		СкидкаНаценка КАК СкидкаНаценка,
		|		Сумма КАК Сумма
		|	) КАК СкидкиНаценки,
		|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Ссылка = &Основание");

	Запрос.УстановитьПараметр("Основание",Основание);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.СтатусДокумента,
		Выборка.ЕстьОшибкиПроведен,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ДатаНачала = ?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Выборка.СрокПоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")Тогда
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, Выборка.СрокПоставки) + 1;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);
	
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	ТаблицаТовары = ТаблицаТовары.Скопировать(ПараметрыОтбора);
	ТаблицаТовары.Сортировать("НомерСтроки Возр");
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			НоваяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ТекСтрока.НаименованиеНоменклатурыПолное, 
				ТекСтрока.НаименованиеХарактеристикиПолное);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеСтрокиДляУдаления = Новый Соответствие;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	СкидкиНаценки.Загрузить(Выборка.СкидкиНаценки.Выгрузить());
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЭтотОбъект, СтруктураПараметры);
	СкидкиРассчитаны = Истина;
	
	СуммаЗаказанныхСтрок = ПолучитьСуммуЗаказанныхСтрок();
	СуммаЗалоговойТары = ПолучитьСуммуЗаказанныхСтрок(Истина);
			
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
			ЭтотОбъект,
			СуммаЗаказанныхСтрок - СуммаЗалоговойТары,
			СуммаЗалоговойТары,
			Ложь);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаданияТорговомуПредставителю(Знач Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеТорговомуПредставителю.Ссылка КАК ДокументОснование,
		|	ЗаданиеТорговомуПредставителю.Организация КАК Организация,
		|	ЗаданиеТорговомуПредставителю.Партнер КАК Партнер,
		|	ЗаданиеТорговомуПредставителю.Контрагент КАК Контрагент,
		|	ЗаданиеТорговомуПредставителю.Договор КАК Договор,
		|	ЗаданиеТорговомуПредставителю.Соглашение КАК Соглашение,
		|	ЗаданиеТорговомуПредставителю.Соглашение.ПорядокОплаты КАК ПорядокОплаты,
		|	ЗаданиеТорговомуПредставителю.Валюта КАК Валюта,
		|	ЗаданиеТорговомуПредставителю.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаданиеТорговомуПредставителю.ГрафикОплаты КАК ГрафикОплаты,
		|	ЗаданиеТорговомуПредставителю.Склад КАК Склад,
		|	ЗаданиеТорговомуПредставителю.ФормаОплаты КАК ФормаОплаты,
		|	ЗаданиеТорговомуПредставителю.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ЗаданиеТорговомуПредставителю.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
		|	ЗаданиеТорговомуПредставителю.Статус КАК СтатусДокумента,
		|	ЗаданиеТорговомуПредставителю.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаданиеТорговомуПредставителю.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаданиеТорговомуПредставителю.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		|	ЗаданиеТорговомуПредставителю.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ЗаданиеТорговомуПредставителю.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаданиеТорговомуПредставителю.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	ВЫБОР
		|		КОГДА ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаданиеТорговомуПредставителю.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		ВидЦены КАК ВидЦены,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаСНДС КАК СуммаСНДС,
		|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|		ПричинаОтмены КАК ПричинаОтмены,
		|		Содержание КАК Содержание,
		|		ВЫБОР
		|			КОГДА ЗаданиеТорговомуПредставителю.Товары.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Отменено,
		|		ВЫБОР
		|			КОГДА ЗаданиеТорговомуПредставителю.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаданиеТорговомуПредставителю.Склад
		|		КОНЕЦ КАК Склад
		|	) КАК Товары,
		|	ЗаданиеТорговомуПредставителю.ЭтапыГрафикаОплаты.(
		|		ВариантОплаты КАК ВариантОплаты,
		|		ДатаПлатежа КАК ДатаПлатежа,
		|		ПроцентПлатежа КАК ПроцентПлатежа,
		|		СуммаПлатежа КАК СуммаПлатежа,
		|		ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
		|		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК ЭтапыГрафикаОплаты
		|ИЗ
		|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
		|ГДЕ
		|	ЗаданиеТорговомуПредставителю.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;
	
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Количество",0);
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	
	// Найдем и удалим из таблицы строки с нулевым количеством
	НулевыеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ТекЭлемент Из НулевыеСтроки Цикл
		ТаблицаТовары.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Товары.Загрузить(ТаблицаТовары);

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЭтотОбъект, СтруктураПараметры);
	СкидкиРассчитаны = Истина;
	
	ТаблицаЭтаповОплаты = Выборка.ЭтапыГрафикаОплаты.Выгрузить();
	
	СуммаЗаказанныхСтрок = ПолучитьСуммуЗаказанныхСтрок();
	СуммаЗалоговойТары = ПолучитьСуммуЗаказанныхСтрок(Истина);
	
	// Если в задании заполнены этапы графиков оплаты - скопируем их
	Если ТаблицаЭтаповОплаты.Количество() > 0 Тогда
		ЭтапыГрафикаОплаты.Загрузить(ТаблицаЭтаповОплаты);
	ИначеЕсли ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
			ЭтотОбъект,
			СуммаЗаказанныхСтрок - СуммаЗалоговойТары,
			СуммаЗалоговойТары,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ПродажиСервер.ПроверитьВозможностьВводаНаОснованииПартнераКлиента(Партнер);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		Контрагент, , 
		БанковскийСчетКонтрагента);
		
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    	= Организация;
	СтруктураПараметров.ФормаОплаты 	= ФормаОплаты;
	СтруктураПараметров.Касса 			= Касса;
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад,
		ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	Приоритет                 = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	НеОтгружатьЧастями        = Истина;
	ПорядокРасчетов           = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		Статус                    = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента") Тогда
			ДатаОтгрузки = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		Статус                    = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли; 
	
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Соглашение, Статус);
	СтруктураДействий = Новый Структура();
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, Неопределено);

КонецПроцедуры

Процедура ИнициализироватьУсловияПродаж()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И Не ЗначениеЗаполнено(ДокументОснование) Тогда
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыКлиентов);
		Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, 
	// чтобы проверить возможность резервирования серий.
	
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента).ИспользоватьСерииНоменклатуры Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьИзменениеХозяйственнойОперации(Отказ)
	
	Если Не ЭтоНовый() И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.СуммаРасход КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,Период,
		|		ЗаказКлиента = &Ссылка
		|	) КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.ЗаказКлиента КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.Ссылка = &Ссылка
		|		И ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|ГДЕ
		|	РасчетыСКлиентами.СуммаРасход > 0
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ клиента оплачен. Нельзя устанавливать операцию %1'"),
				ХозяйственнаяОперация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ХозяйственнаяОперация",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуВозвратнойТары()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И &ВернутьМногооборотнуюТару
	|	И НЕ &ТребуетсяЗалогЗаТару
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаВозвратнойТарыЗаказанныхСтрок = Выгрузка[0].СуммаСНДС;
	Возврат СуммаВозвратнойТарыЗаказанныхСтрок;
	
КонецФункции

//Апаев_О Начало [16.07.2022] - "Доработка подарков акции"
Процедура ПоискДублейТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.Номенклатура КАК Номенклатура,
	|	ВТ_Итог.Количество КАК Количество
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.Количество > 1";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "Номенклатура"));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Проведение запрещено по причине:");
		
		Выборка = Результат.Выбрать();	
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В товарах обнаружено несколько строк с номенклатурой " + Выборка.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
//Апаев_О Окончание [16.07.2022]

#КонецОбласти

Процедура ЗаполнитьДокументНаОснованииПредзаказКлиента (Знач ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);	
	ТоварыС = ДанныеЗаполнения.Товары;
	Для каждого ТоварыИсточник из ТоварыС цикл 	
		ТоварыПриемник = ЭтотОбъект.Товары;
		НС = ТоварыПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ТоварыИсточник);	
	КонецЦикла;		
	ЭтотОбъект.УстановитьНовыйНомер();
	ЭтотОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка; 
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

///Сергей +++
#Область Бонусы_Клиентов

///Движение по регистру "ма_СчетчикПокупок"
Процедура ДвиженияПоСчетчикуПокупок();
	
	Движения.bon_СчетчикПокупок.Очистить();
	Движение = Движения.bon_СчетчикПокупок.Добавить();
	Движение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
	Движение.Период 				= Дата;
	Движение.Организация 			= Организация;
	Движение.Подразделение 			= Подразделение;
	Если ЗначениеЗаполнено(bon_Телефон) Тогда 
		БонСчет = bon_Телефон;
	Иначе 
		БонСчет = "Нету";
	КонецЕсли;
	Движение.БонусныйСчет 			= БонСчет;
	Движение.bon_НоминальныеОбъекты = bon_БонусныйСчет;
	Движение.Счетчик 				= Число(1);
	Движение.СуммаДокумента 		= СуммаДокумента;
	Движение.ДокументПродажи 		= Ссылка;
	Движения.bon_СчетчикПокупок.Записать();	
	
КонецПроцедуры


///Сергей "01.08.2020" +++Начало+++ Срабатывание Условий "Доп для Акций"
Процедура СрабатываниеУсловий(ФормаДокумента) Экспорт 
	
	//bon_БонусПартНачис.Очистить();
	//bon_ПодаркиВыданные.Очистить();
	//bon_ТаблицаВыдАкцийпоСчетчику.Очистить();
	
	ЭтотОбъект.bon_АкцииПоСчетчику   = Ложь;
	ЭтотОбъект.bon_ПоКратности 		 = Ложь;
	ЭтотОбъект.bon_ПоСчетчику 		 = Ложь;
	ЭтотОбъект.bon_ПоложениеСчетчика = Число(0);
	ЭтотОбъект.bon_СуммаБонусов 	 = Число(0);
	ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ЗапросОтб = Новый Запрос;
	ЗапросОтб.Текст = 
	"ВЫБРАТЬ
	|	bon_УсловиеСчетчикаКратности.Регистратор,
	|	bon_УсловиеСчетчикаКратности.НомерСтроки,
	|	bon_УсловиеСчетчикаКратности.Активность,
	|	bon_УсловиеСчетчикаКратности.Организация,
	|	bon_УсловиеСчетчикаКратности.ПодразделениеОрганизации,
	|	bon_УсловиеСчетчикаКратности.МаркетинговаяАкция,
	|	bon_УсловиеСчетчикаКратности.Сумма,
	|	bon_УсловиеСчетчикаКратности.ЗначениеИскомСчетчик,
	|	bon_УсловиеСчетчикаКратности.Кратность,
	|	bon_УсловиеСчетчикаКратности.КолКратности,
	|	bon_УсловиеСчетчикаКратности.ПериодДействияНачало,
	|	bon_УсловиеСчетчикаКратности.ПериодДействияКонец,
	|	bon_УсловиеСчетчикаКратности.УсловиеСуммы,
	|	bon_УсловиеСчетчикаКратности.УсловиеСчетчика,
	|	bon_УсловиеСчетчикаКратности.ПоКратности,
	|	bon_УсловиеСчетчикаКратности.ПоСчетчику,
	|	bon_УсловиеСчетчикаКратности.ПоСумме,
	|	bon_УсловиеСчетчикаКратности.ПоУсловиюВоз,
	|	bon_УсловиеСчетчикаКратности.ПроцентВоз
	|ИЗ
	|	РегистрСведений.bon_УсловиеСчетчикаКратности КАК bon_УсловиеСчетчикаКратности
	|ГДЕ
	|	bon_УсловиеСчетчикаКратности.ПодразделениеОрганизации = &ПодразделениеОрганизации";
	ЗапросОтб.УстановитьПараметр("ПодразделениеОрганизации", Подразделение); 
	РезультатЗапросаОтб = ЗапросОтб.Выполнить();	
	ВыборкаДетальныеЗаписиОтб = РезультатЗапросаОтб.Выбрать();
	//Таблица для заполнение подарков
	ТЗ = новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("МаркетинговаяАкция",Новый ОписаниеТипов("ДокументСсылка.bon_МакетинговыеАкции"));
	ТЗ.Колонки.Добавить("ПериодДействияНачало",Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("ПериодДействияКонец",Новый ОписаниеТипов("Дата"));
	КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
	ТЗ.Колонки.Добавить("КлючСтрокиПрименения",Новый ОписаниеТипов("Строка",,КвалификаторыСтроки));
	ТЗ.Колонки.Добавить("КлючСтроки",Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Магазин",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));                           
	ТЗ.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Номенклатура",Новый  ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗ.Колонки.Добавить("ПодразделениеОрганизации",Новый  ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТЗ.Колонки.Добавить("Регистратор",Новый  ОписаниеТипов("ДокументСсылка.bon_МакетинговыеАкции"));
	Пока ВыборкаДетальныеЗаписиОтб.Следующий() Цикл
		Если ((bon_ДатаПроведенияПервДляБон >= ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало) И (bon_ДатаПроведенияПервДляБон <= ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец)) Тогда 
			///Проверка на уже выданного по бонусному счету
			УжедалиПодарок = Ложь;
			//ПроверкаПовторений(ВыборкаДетальныеЗаписиОтб,УжедалиПодарок);	
			Если УжедалиПодарок = Ложь Тогда 
				СчетчикТек = Число(0);
				СчетчикКрат = Число(0);
				СчетчикПоСумм = Число(0);
				ПоСум = Ложь;
				ПоКрат = Ложь;
				СуммаДанИстКрат = Ложь;
				
				//ПоложениеСчетчика
				СчетчикПолож = Число(0);
				СчетчикВсего = Число(0);
				ПоложениеСчетчика(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикВсего);
				
				//Проверка На сумму
				СуммаДан = Ложь;
				Если ВыборкаДетальныеЗаписиОтб.ПоСумме = Истина Тогда
					ПоСум = Истина;
					ПоСумме(ВыборкаДетальныеЗаписиОтб,СуммаДан,СуммаДанИстКрат,ПоСум,ПоКрат);	
				Иначе 
					ПоСуммеЛож(ВыборкаДетальныеЗаписиОтб,СуммаДан,СчетчикДан,КратностьДан);
				КонецЕсли;
				
				Если ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Ложь и ВыборкаДетальныеЗаписиОтб.ПоСумме = Истина и ВыборкаДетальныеЗаписиОтб.ПоКратности = Ложь Тогда 
					ТокПОСумм(ВыборкаДетальныеЗаписиОтб,СчетчикПоСумм);
					СчетчикПолож = СчетчикПоСумм;
				КонецЕсли;
				
				//Проверка По Счетчику
				СчетчикДан = Ложь;
				Если ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Истина и ВыборкаДетальныеЗаписиОтб.ПоСумме = Ложь и ВыборкаДетальныеЗаписиОтб.ПоКратности = Ложь Тогда
					ПоСчетчикуТолько(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикДан,СчетчикТек);
				ИначеЕсли ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Истина и ВыборкаДетальныеЗаписиОтб.ПоСумме = Истина и ВыборкаДетальныеЗаписиОтб.ПоКратности = Ложь Тогда 
					ПоСчетчикуИСумме(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикДан,СчетчикТек);	  
				КонецЕсли;
				
				//Проверка По Кратности
				КратностьДан = Ложь;
				Если ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Ложь и ВыборкаДетальныеЗаписиОтб.ПоСумме = Ложь и ВыборкаДетальныеЗаписиОтб.ПоКратности = Истина Тогда
					СчетчикКрат = Число(0);
					СчетчикТек = СчетчикПолож; 
					ПоКратности(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикКрат,КратностьДан,СчетчикТек);	
				ИначеЕсли  ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Ложь и ВыборкаДетальныеЗаписиОтб.ПоСумме = Истина и ВыборкаДетальныеЗаписиОтб.ПоКратности = Истина Тогда
					СчетчикКрат = Число(0);
					ПоКрат = Истина;
					ПоСум = Ложь;
					ПоСумме(ВыборкаДетальныеЗаписиОтб,СуммаДан,СуммаДанИстКрат,ПоСум,ПоКрат);
					Если СуммаДанИстКрат Тогда
						ПоКратностиИСуммеКрат(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикКрат,КратностьДан,СчетчикТек);
					КонецЕсли;
				КонецЕсли;
				
				///+++Начало+++
				//По Условию Вознаграждения
				ПоУсловиюВозДан = Ложь;
				Если СуммаДан = Истина и СчетчикДан = Истина или СуммаДан = Истина и КратностьДан = Истина Тогда 
					Если ВыборкаДетальныеЗаписиОтб.ПоУсловиюВоз = Истина Тогда 
						ПоУсловиюВозДан = Истина;
						//		Для Каждого ОбТав Из ЭтотОбъект.Товары Цикл 
						//			ОбТав.ма_СуммаНакапливаемогоНоминала = Число(0);
						//		КонецЦикла;
						//		ма_БонусыПоНакопительнымКартам.Очистить();
						//		ЭтотОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				///---Конец---
				
				//Обработка результата
				Если СчетчикДан = Истина и СуммаДан = Истина и КратностьДан = Ложь и ПоУсловиюВозДан = Ложь Тогда 
					СчетчикПолож = СчетчикТек;
					ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан);
				ИначеЕсли КратностьДан = Истина и СуммаДан = Истина и СчетчикДан = Ложь и ПоУсловиюВозДан = Ложь Тогда 
					ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан);
				//ИначеЕсли СчетчикДан = Истина и СуммаДан = Истина и КратностьДан = Истина и ПоУсловиюВозДан = Ложь Тогда  
				//	ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан);
					//Условие по Сумме только (Временно убераем)
				ИначеЕсли ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Ложь и СуммаДан = Истина и ВыборкаДетальныеЗаписиОтб.ПоКратности = Ложь и ПоУсловиюВозДан = Ложь Тогда  
						ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан);
					//По Условию Вознаграждения  ///Сергей "06.08.2020"
				ИначеЕсли КратностьДан = Истина и СуммаДан = Истина и СчетчикДан = Ложь и ПоУсловиюВозДан = Истина Тогда  
					ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан); 
				ИначеЕсли КратностьДан = Ложь и СуммаДан = Истина и СчетчикДан = Истина и ПоУсловиюВозДан = Истина Тогда  
					ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан); 	
				КонецЕсли;
				
				Если КратностьДан = Истина Тогда
					ЭтотОбъект.bon_ПоКратности = Истина;
				КонецЕсли;
				
				Если СчетчикДан = Истина Тогда
					ЭтотОбъект.bon_ПоСчетчику = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	//Отработка Результата
	Если ТЗ.Количество()>0 Тогда
		СуммаБонДарим = Число(0);
		
		Для Каждого СтТЗ Из ТЗ Цикл 
			///Фиксированая сумма Бонусов
			Если СтТЗ.МаркетинговаяАкция.ТипЦенности = Перечисления.bon_ТипЦенности.ФиксированныеБонусы Тогда				 
				НовСт = bon_БонусПартНачис.Добавить();
				НовСт.Партия 				= ЭтотОбъект.Ссылка;
				НовСт.Дата 					= bon_ДатаПроведенияПервДляБон;
				НовСт.bon_НоминальныйОбъект = bon_БонусныйСчет;
				НовСт.Номенклатура 			= СтТЗ.Номенклатура;
				НовСт.КлючПримВыдано 		= СтТЗ.КлючСтроки;
				Если ЗначениеЗаполнено(СтТЗ.МаркетинговаяАкция.ХарактеристикаБонусов) Тогда
					НовСт.ХарактеристикаБонуса 	= СтТЗ.МаркетинговаяАкция.ХарактеристикаБонусов;	
				Иначе 
					НовСт.ХарактеристикаБонуса 	= Справочники.bon_ХарактеристикиБонусов.АкционныеБонусы;	
				КонецЕсли;
				
				Характ  = НовСт.ХарактеристикаБонуса; 
				Если Характ.ПоДате = Ложь Тогда
					Если Характ.ВремяЖизниБуфера = Число(0) Тогда
						НовСт.Буфер 	= Число(0);
						НовСт.Остаток 	= СтТЗ.МаркетинговаяАкция.БонусыФикс;	
					Иначе 
						НовСт.Буфер 	= СтТЗ.МаркетинговаяАкция.БонусыФикс;
						НовСт.Остаток 	= Число(0);	
					КонецЕсли;
				Иначе 
					Если Характ.ДатаПереводаИзБуферавОстаток = '00010101' Тогда 
						НовСт.Буфер 	= Число(0);
						НовСт.Остаток 	= СтТЗ.МаркетинговаяАкция.БонусыФикс;	
					Иначе 
						НовСт.Буфер 	= СтТЗ.МаркетинговаяАкция.БонусыФикс;
						НовСт.Остаток 	= Число(0);		
					КонецЕсли;					
				КонецЕсли;
				НовСт.Содержание 			= Строка("Выдано по: "+Строка(СтТЗ.МаркетинговаяАкция));
				
				СуммаБонДарим = СуммаБонДарим + СтТЗ.МаркетинговаяАкция.БонусыФикс;
			КонецЕсли;
			                                        
			///Подарой на продажу
			Если СтТЗ.МаркетинговаяАкция.ТипЦенности = Перечисления.bon_ТипЦенности.Подарок Тогда	
				НовыйПодарок = ЭтотОбъект.bon_ПодаркиВыданные.Добавить();
				НовыйПодарок.КлючСтрокиПрименения 				= "Товары_"+СтТЗ.КлючСтроки;
				НовыйПодарок.МаркетинговаяАкция 				= СтТЗ.МаркетинговаяАкция;
				НовыйПодарок.Стоимость 							= 0;
				НовыйПодарок.КлючСтроки 						= СтТЗ.КлючСтроки; 
				//НовыйПодарок.НомерВарианта 						= СтрокаАкции.НомерВарианта;
				//НовыйПодарок.НомерЦенности 						= СтрокаАкции.НомерЦенности;
				НовыйПодарок.НоменклатураНАКоторуюВыданПодарок 	= СтТЗ.МаркетинговаяАкция.ПредоставляемаяЦенностьПодарок[0];
				
				ЭтотОбъект.bon_АкцииПоСчетчику = Истина;
				ЭтотОбъект.bon_ПоСчетчику = Истина;
			КонецЕсли;
			
			///Процент бонусов от всего заказа
			Если СтТЗ.МаркетинговаяАкция.ТипЦенности = Перечисления.bon_ТипЦенности.ПроцентБонусов Тогда
				НовСт = bon_БонусПартНачис.Добавить();
				НовСт.Партия 				= ЭтотОбъект.Ссылка;
				НовСт.Дата 					= bon_ДатаПроведенияПервДляБон;
				НовСт.bon_НоминальныйОбъект 	= bon_БонусныйСчет;
				НовСт.Номенклатура 			= СтТЗ.Номенклатура;
				НовСт.КлючПримВыдано 		= СтТЗ.КлючСтроки;
				Если ЗначениеЗаполнено(СтТЗ.МаркетинговаяАкция.ХарактеристикаБонусов) Тогда
					НовСт.ХарактеристикаБонуса 	= СтТЗ.МаркетинговаяАкция.ХарактеристикаБонусов;	
				Иначе 
					НовСт.ХарактеристикаБонуса 	= Справочники.bon_ХарактеристикиБонусов.АкционныеБонусы;	
				КонецЕсли;
				
				Процент  = СтТЗ.МаркетинговаяАкция.ПроцентБонусов;
				СуммаПродажи = Товары.Итог("Сумма");
				СуммаБон = Окр((СуммаПродажи / 100 * Процент),0);
				
				Характ  = НовСт.ХарактеристикаБонуса; 
				Если Характ.ПоДате = Ложь Тогда
					Если Характ.ВремяЖизниБуфера = Число(0) Тогда
						НовСт.Буфер 	= Число(0);
						НовСт.Остаток 	= СуммаБон;	
					Иначе 
						НовСт.Буфер 	= СуммаБон;
						НовСт.Остаток 	= Число(0);	
					КонецЕсли;
				Иначе 
					Если Характ.ДатаПереводаИзБуферавОстаток = '00010101' Тогда 
						НовСт.Буфер 	= Число(0);
						НовСт.Остаток 	= СуммаБон;	
					Иначе 
						НовСт.Буфер 	= СуммаБон;
						НовСт.Остаток 	= Число(0);		
					КонецЕсли;					
				КонецЕсли;
				НовСт.Содержание 			= Строка("Выдано по: "+Строка(СтТЗ.МаркетинговаяАкция));	
				
				СуммаБонДарим = СуммаБонДарим + СуммаБон;
			КонецЕсли;
						
		КонецЦикла;
		
		
		
		ЭтотОбъект.bon_АкцииПоСчетчику 			= Истина;
		ЭтотОбъект.bon_ПоложениеСчетчика 		= СчетчикПолож;
		ЭтотОбъект.bon_СчетчикКрат 				= СчетчикКрат;
		ЭтотОбъект.bon_СуммаБонусов 	 		= СуммаБонДарим;
		ЭтотОбъект.bon_БонусыВыданыПоСчетчику 	= Истина;
		ЭтотОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

	///Запись Результата Выданных Акций по Счетчику или по Кратности
	Если bon_ТаблицаВыдАкцийпоСчетчику.Количество() > 0 Тогда 
		Для Каждого Выдпод из bon_ТаблицаВыдАкцийпоСчетчику Цикл 
			МенеджерЗаписи  = РегистрыСведений.bon_РезультатСработыванияПоСчетчику.СоздатьМенеджерЗаписи();			
			МенеджерЗаписи.Подразделение 		= Выдпод.Подразделение;
			МенеджерЗаписи.МаркетинговаяАкция 	= Выдпод.МаркетинговаяАкция;
			МенеджерЗаписи.Документ 			= Выдпод.Документ;
			МенеджерЗаписи.ПоложСчетчика 		= Выдпод.ПоложСчетчика;
			МенеджерЗаписи.Счетчик 				= Выдпод.Счетчик;
			МенеджерЗаписи.Кратность 			= Выдпод.Кратность;
			МенеджерЗаписи.ДатаЗаписи 			= Выдпод.ДатаЗаписи;
			МенеджерЗаписи.ПоКратности 			= Выдпод.ПоКратности;
			МенеджерЗаписи.ПоСчетчику 			= Выдпод.ПоСчетчику;
			МенеджерЗаписи.ПоСумме 				= Выдпод.ПоСумме;
			МенеджерЗаписи.ПоУсловиюВоз 		= Выдпод.ПоУсловиюВозДан; 
			МенеджерЗаписи.Записать();
		КонецЦикла;                                                    
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУсловийСчетчикаКратностиСуммы(ТЗ,ВыборкаДетальныеЗаписиОтб,СчетчикДан,КратностьДан,СуммаДан,СчетчикПолож,СчетчикКрат,СчетчикВсего,ПоУсловиюВозДан)
	//Таб-1 Виртуальная таблица
	НоваяСтрока = ТЗ.Добавить();
	НоваяСтрока.МаркетинговаяАкция 		= ВыборкаДетальныеЗаписиОтб.Регистратор;
	НоваяСтрока.ПериодДействияНачало 	= ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало; 
	НоваяСтрока.ПериодДействияКонец 	= ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец; 							
	НоваяСтрока.Магазин 				= ВыборкаДетальныеЗаписиОтб.ПодразделениеОрганизации;
	НоваяСтрока.Регистратор 			= ВыборкаДетальныеЗаписиОтб.Регистратор;
	НоваяСтрока.Номенклатура 			= Товары[0].Номенклатура;
	НоваяСтрока.КлючСтрокиПрименения 	= "Товары_"+ Товары[0].КлючСтроки;
	НоваяСтрока.Цена 					= Товары[0].Цена;
	НоваяСтрока.КлючСтроки              = Товары[0].КлючСтроки;
	
	//Заполнение bon_ТаблицаВыдАкцийпоСчетчику
	НоваяЗапись = bon_ТаблицаВыдАкцийпоСчетчику.Добавить();
	НоваяЗапись.Подразделение 		= Подразделение;
	НоваяЗапись.МаркетинговаяАкция 	= ВыборкаДетальныеЗаписиОтб.Регистратор; 
	НоваяЗапись.Документ 			= Ссылка;	
	НоваяЗапись.ПоложСчетчика 		= СчетчикВсего;
	НоваяЗапись.Счетчик 			= СчетчикПолож;
	НоваяЗапись.Кратность 			= СчетчикКрат;
	НоваяЗапись.ДатаЗаписи 			= bon_ДатаПроведенияПервДляБон; 
	НоваяЗапись.ПоКратности 		= КратностьДан; 
	НоваяЗапись.ПоСчетчику 			= СчетчикДан; 
	НоваяЗапись.ПоСумме 			= СуммаДан;
	НоваяЗапись.ТипЦенности 		= ВыборкаДетальныеЗаписиОтб.Регистратор.ТипЦенности;
	НоваяЗапись.ПоУсловиюВозДан 	= ПоУсловиюВозДан;  
КонецПроцедуры

Функция ПоложениеСчетчика(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикВсего) 
	ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
	ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
	ЗапросПров1 = Новый Запрос;
	ЗапросПров1.Текст =
	"ВЫБРАТЬ
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикОборот) КАК СчетчикОборот,
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикПриход) КАК СчетчикПриход
	|ИЗ
	|	РегистрНакопления.bon_СчетчикПокупок.Обороты(&НачПер, &КонПер, , ) КАК bon_СчетчикПокупокОбороты
	|ГДЕ
	|	bon_СчетчикПокупокОбороты.Подразделение В(&Подразделение)";
	ЗапросПров1.УстановитьПараметр("Подразделение", ВыборкаДетальныеЗаписиОтб.Регистратор.ДействующиеСтруктурныеЕдиницы.ВыгрузитьКолонку("ПодразделениеОрганизации")); 
	ЗапросПров1.УстановитьПараметр("НачПер", ДатаНач);
	ЗапросПров1.УстановитьПараметр("КонПер", ДатаКон);
	РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
	Если РезПров1.Количество() > 0 тогда						
		СчетчикПолож = РезПров1[0].СчетчикОборот;						
	КонецЕсли;
	
	ДатаНач1 = '00010101000000';
	ЗапросПров2 = Новый Запрос;
	ЗапросПров2.Текст =
	"ВЫБРАТЬ
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикОборот) КАК СчетчикОборот,
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикПриход) КАК СчетчикПриход
	|ИЗ
	|	РегистрНакопления.bon_СчетчикПокупок.Обороты(&НачПер, &КонПер, , ) КАК bon_СчетчикПокупокОбороты
	|ГДЕ
	|	bon_СчетчикПокупокОбороты.Подразделение В(&Подразделение)";
	ЗапросПров2.УстановитьПараметр("Подразделение", ВыборкаДетальныеЗаписиОтб.Регистратор.ДействующиеСтруктурныеЕдиницы.ВыгрузитьКолонку("ПодразделениеОрганизации")); 
	ЗапросПров2.УстановитьПараметр("НачПер", ДатаНач1);
	ЗапросПров2.УстановитьПараметр("КонПер", Дата);
	РезПров2 = ЗапросПров2.Выполнить().Выгрузить();
	Если РезПров2.Количество() > 0 тогда						
		СчетчикВсего = РезПров2[0].СчетчикОборот;						
	КонецЕсли;	
	
КонецФункции

Функция ПоСумме(ВыборкаДетальныеЗаписиОтб,СуммаДан,СуммаДанИстКрат,ПоСум,ПоКрат) 
	Если ПоСум = Истина Тогда 
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">=" тогда 
			Если СуммаДокумента >= ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">" тогда
			Если СуммаДокумента > ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "=" тогда
			Если СуммаДокумента = ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<>" тогда
			Если СуммаДокумента <> ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<=" тогда
			Если СуммаДокумента <= ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<" тогда
			Если СуммаДокумента < ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДан = Истина;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПоКрат = Истина Тогда 
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">=" тогда 
			Если СуммаДокумента >= ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">" тогда
			Если СуммаДокумента > ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "=" тогда
			Если СуммаДокумента = ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<>" тогда
			Если СуммаДокумента <> ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<=" тогда
			Если СуммаДокумента <= ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<" тогда
			Если СуммаДокумента < ВыборкаДетальныеЗаписиОтб.Сумма Тогда 
				СуммаДанИстКрат = Истина;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПоСуммеЛож(ВыборкаДетальныеЗаписиОтб,СуммаДан,СчетчикДан,КратностьДан) 
	Если ВыборкаДетальныеЗаписиОтб.ПоСчетчику = Истина или ВыборкаДетальныеЗаписиОтб.ПоКратности = Истина Тогда   
		Если СуммаДокумента > Число(0) Тогда 
			СуммаДан = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПоСчетчикуТолько(ВыборкаДетальныеЗаписиОтб,Счетчик,СчетчикДан,СчетчикТек)
	ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
	ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
	СчетчикТек = Число(0);
	ЗапросПров1 = Новый Запрос;
	ЗапросПров1.Текст =
	"ВЫБРАТЬ
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикОборот) КАК СчетчикОборот,
	|	СУММА(bon_СчетчикПокупокОбороты.СчетчикПриход) КАК СчетчикПриход
	|ИЗ
	|	РегистрНакопления.bon_СчетчикПокупок.Обороты(&Нач, &Кон, , ) КАК bon_СчетчикПокупокОбороты
	|ГДЕ
	|	bon_СчетчикПокупокОбороты.Подразделение В(&Подразделение)";
	ЗапросПров1.УстановитьПараметр("Подразделение", ВыборкаДетальныеЗаписиОтб.Регистратор.ДействующиеСтруктурныеЕдиницы.ВыгрузитьКолонку("ПодразделениеОрганизации")); 
	ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
	ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
	РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
	Если РезПров1.Количество() > 0 тогда						
		СчетчикТек = РезПров1[0].СчетчикОборот;						
	КонецЕсли;
	Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
		Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;			
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
		Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;	
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
		Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;	
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
		Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;	
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
		Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;	
		КонецЕсли;		
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
		Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
			СчетчикДан = Истина;	
		КонецЕсли;
	КонецЕсли;	
КонецФункции

Функция ПоСчетчикуИСумме(ВыборкаДетальныеЗаписиОтб,Счетчик,СчетчикДан,СчетчикТек)
		
	ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
	ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
	СчетчикТек = Число(0);
	СумДок = ВыборкаДетальныеЗаписиОтб.Сумма;
	
	Если ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">=" тогда 
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;		
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента > &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента = &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<>" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента <> &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);  
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента <= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента < &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
		Если ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">=" тогда
			Если СчетчикТек >= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;			
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = ">" тогда
			Если СчетчикТек > ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "=" тогда
			Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<>" тогда
			Если СчетчикТек <> ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<=" тогда
			Если СчетчикТек <= ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;		
		ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСчетчика = "<" тогда
			Если СчетчикТек < ВыборкаДетальныеЗаписиОтб.ЗначениеИскомСчетчик Тогда 
				СчетчикДан = Истина;	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
КонецФункции

Функция ТокПОСумм(ВыборкаДетальныеЗаписиОтб,СчетчикПоСумм)
	ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
	ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
	СчетчикТек = Число(0);
	СумДок = ВыборкаДетальныеЗаписиОтб.Сумма;
	
	Если ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">=" тогда 
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента > &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);  
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента = &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<>" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента <> &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента <= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента < &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикПоСумм = РезПров1.Количество();						
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПоКратности(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикКрат,КратностьДан,СчетчикТек)
	Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.Кратность Тогда 
		КратностьДан = Истина;
		СчетчикКрат = СчетчикТек; 
		СчетчикПолож = Число(1);
	ИначеЕсли СчетчикТек > ВыборкаДетальныеЗаписиОтб.Кратность Тогда 
		МаркАкц = ВыборкаДетальныеЗаписиОтб.МаркетинговаяАкция; 
		НачМаркАкц = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
		КонМаркАкц = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
		ЗапросПоиск = Новый Запрос;
		ЗапросПоиск.Текст =
		"ВЫБРАТЬ
		|	bon_РезультатСработыванияПоСчетчику.Подразделение,
		|	bon_РезультатСработыванияПоСчетчику.МаркетинговаяАкция,
		|	bon_РезультатСработыванияПоСчетчику.Документ,
		|	bon_РезультатСработыванияПоСчетчику.ПоложСчетчика,
		|	bon_РезультатСработыванияПоСчетчику.Счетчик,
		|	bon_РезультатСработыванияПоСчетчику.Кратность,
		|	bon_РезультатСработыванияПоСчетчику.ДатаЗаписи,
		|	bon_РезультатСработыванияПоСчетчику.ПоКратности,
		|	bon_РезультатСработыванияПоСчетчику.ПоСчетчику
		|ИЗ
		|	РегистрСведений.bon_РезультатСработыванияПоСчетчику КАК bon_РезультатСработыванияПоСчетчику
		|ГДЕ
		|	bon_РезультатСработыванияПоСчетчику.Подразделение = &Подразделение
		|	И bon_РезультатСработыванияПоСчетчику.МаркетинговаяАкция = &МаркетинговаяАкция
		|	И bon_РезультатСработыванияПоСчетчику.ДатаЗаписи МЕЖДУ &НачПер И &КонПер
		|	И bon_РезультатСработыванияПоСчетчику.ПоКратности = &ПоКратности";
		ЗапросПоиск.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПоиск.УстановитьПараметр("МаркетинговаяАкция", МаркАкц);
		ЗапросПоиск.УстановитьПараметр("НачПер", НачМаркАкц);
		ЗапросПоиск.УстановитьПараметр("КонПер", КонМаркАкц);		
		ЗапросПоиск.УстановитьПараметр("ПоКратности", Истина);
		РезПоиск = ЗапросПоиск.Выполнить().Выгрузить();
		Если РезПоиск.Количество() < ВыборкаДетальныеЗаписиОтб.КолКратности тогда
			КолПовт = РезПоиск.Количество() + Число(1);
			Крат = ВыборкаДетальныеЗаписиОтб.Кратность*КолПовт; 
			Если СчетчикТек = Крат Тогда 
				КратностьДан = Истина;
				СчетчикКрат = СчетчикТек;
				СчетчикПолож = КолПовт;
			КонецЕсли; 
			//Нашли	
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Функция ПоКратностиИСуммеКрат(ВыборкаДетальныеЗаписиОтб,СчетчикПолож,СчетчикКрат,КратностьДан,СчетчикТек)
	ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
	ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
	СчетчикТек = Число(0);
	СумДок = ВыборкаДетальныеЗаписиОтб.Сумма;
	ВидДвиж = ВидДвиженияНакопления.Приход;
	Если ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">=" тогда 
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";	
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли; 
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = ">" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<>" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение); 
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<=" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
	ИначеЕсли ВыборкаДетальныеЗаписиОтб.УсловиеСуммы = "<" тогда
		ЗапросПров1 = Новый Запрос;
		ЗапросПров1.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.СуммаДокумента,
		|	bon_СчетчикПокупок.Период,
		|	bon_СчетчикПокупок.Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки,
		|	bon_СчетчикПокупок.Активность,
		|	bon_СчетчикПокупок.ВидДвижения,
		|	bon_СчетчикПокупок.ДокументПродажи,
		|	bon_СчетчикПокупок.Организация,
		|	bon_СчетчикПокупок.Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик,
		|	bon_СчетчикПокупок.СуммаДокумента КАК СуммаДокумента1,
		|	bon_СчетчикПокупок.МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.СуммаДокумента >= &СуммаДокумента
		|	И bon_СчетчикПокупок.Подразделение = &Подразделение
		|	И bon_СчетчикПокупок.Период МЕЖДУ &Нач И &Кон
		|	И bon_СчетчикПокупок.ВидДвижения = &ВидДвижения";
		ЗапросПров1.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПров1.УстановитьПараметр("Нач", ДатаНач);
		ЗапросПров1.УстановитьПараметр("Кон", ДатаКон);
		ЗапросПров1.УстановитьПараметр("СуммаДокумента", СумДок);
		ЗапросПров1.УстановитьПараметр("ВидДвижения", ВидДвиж);
		РезПров1 = ЗапросПров1.Выполнить().Выгрузить();
		Если РезПров1.Количество() > 0 тогда						
			СчетчикТек = РезПров1.Количество();						
		КонецЕсли;
	КонецЕсли;
	
	Если СчетчикТек = ВыборкаДетальныеЗаписиОтб.Кратность Тогда 
		КратностьДан = Истина;
		СчетчикКрат = СчетчикТек; 
		СчетчикПолож = Число(1);
	ИначеЕсли СчетчикТек > ВыборкаДетальныеЗаписиОтб.Кратность Тогда 
		МаркАкц = ВыборкаДетальныеЗаписиОтб.МаркетинговаяАкция; 
		НачМаркАкц = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
		КонМаркАкц = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
		ЗапросПоиск = Новый Запрос;
		ЗапросПоиск.Текст =
		"ВЫБРАТЬ
		|	bon_РезультатСработыванияПоСчетчику.Подразделение,
		|	bon_РезультатСработыванияПоСчетчику.МаркетинговаяАкция,
		|	bon_РезультатСработыванияПоСчетчику.Документ,
		|	bon_РезультатСработыванияПоСчетчику.ПоложСчетчика,
		|	bon_РезультатСработыванияПоСчетчику.Счетчик,
		|	bon_РезультатСработыванияПоСчетчику.Кратность,
		|	bon_РезультатСработыванияПоСчетчику.ДатаЗаписи,
		|	bon_РезультатСработыванияПоСчетчику.ПоКратности,
		|	bon_РезультатСработыванияПоСчетчику.ПоСчетчику
		|ИЗ
		|	РегистрСведений.bon_РезультатСработыванияПоСчетчику КАК bon_РезультатСработыванияПоСчетчику
		|ГДЕ
		|	bon_РезультатСработыванияПоСчетчику.Подразделение = &Подразделение
		|	И bon_РезультатСработыванияПоСчетчику.МаркетинговаяАкция = &МаркетинговаяАкция
		|	И bon_РезультатСработыванияПоСчетчику.ДатаЗаписи МЕЖДУ &НачПер И &КонПер
		|	И bon_РезультатСработыванияПоСчетчику.ПоКратности = &ПоКратности";
		ЗапросПоиск.УстановитьПараметр("Подразделение", Подразделение);
		ЗапросПоиск.УстановитьПараметр("МаркетинговаяАкция", МаркАкц);
		ЗапросПоиск.УстановитьПараметр("НачПер", НачМаркАкц);
		ЗапросПоиск.УстановитьПараметр("КонПер", КонМаркАкц);		
		ЗапросПоиск.УстановитьПараметр("ПоКратности", Истина);
		РезПоиск = ЗапросПоиск.Выполнить().Выгрузить();
		Если РезПоиск.Количество() < ВыборкаДетальныеЗаписиОтб.КолКратности тогда
			КолПовт = РезПоиск.Количество() + Число(1);
			Крат = ВыборкаДетальныеЗаписиОтб.Кратность*КолПовт; 
			Если СчетчикТек = Крат Тогда 
				КратностьДан = Истина;
				СчетчикПолож = КолПовт;
				СчетчикКрат = СчетчикТек; 
			КонецЕсли; 
			//Нашли	
		КонецЕсли;	
	КонецЕсли;
КонецФункции

Процедура ПроверкаПовторений(ВыборкаДетальныеЗаписиОтб,УжедалиПодарок) Экспорт 
	Если ЗначениеЗаполнено(bon_БонусныйСчет) Тогда 
		ДатаНач = ВыборкаДетальныеЗаписиОтб.ПериодДействияНачало;
		ДатаКон = ВыборкаДетальныеЗаписиОтб.ПериодДействияКонец;
		ЗапросДублей = Новый Запрос;
		ЗапросДублей.Текст =
		"ВЫБРАТЬ
		|	bon_СчетчикПокупок.Период КАК Период,
		|	bon_СчетчикПокупок.Регистратор КАК Регистратор,
		|	bon_СчетчикПокупок.НомерСтроки КАК НомерСтроки,
		|	bon_СчетчикПокупок.Активность КАК Активность,
		|	bon_СчетчикПокупок.ВидДвижения КАК ВидДвижения,
		|	bon_СчетчикПокупок.Организация КАК Организация,
		|	bon_СчетчикПокупок.Подразделение КАК Подразделение,
		|	bon_СчетчикПокупок.БонусныйСчет КАК БонусныйСчет,
		|	bon_СчетчикПокупок.Счетчик КАК Счетчик,
		|	bon_СчетчикПокупок.МоментВремени КАК МоментВремени
		|ИЗ
		|	РегистрНакопления.bon_СчетчикПокупок КАК bon_СчетчикПокупок
		|ГДЕ
		|	bon_СчетчикПокупок.Период МЕЖДУ &НачПер И &КонПер
		|	И bon_СчетчикПокупок.bon_НоминальныеОбъекты = &bon_НоминальныеОбъекты";
		ЗапросДублей.УстановитьПараметр("bon_НоминальныеОбъекты", bon_БонусныйСчет);
		ЗапросДублей.УстановитьПараметр("НачПер", ДатаНач);
		ЗапросДублей.УстановитьПараметр("КонПер", ДатаКон);
		РезДуб = ЗапросДублей.Выполнить().Выгрузить();
		Если РезДуб.Количество() > 1 тогда						
			УжедалиПодарок = Истина;						
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
///Сергей "01.08.2020" ---Конец--- Срабатывание Условий  "Доп для Акций"

#КонецОбласти
///Сергей ---
