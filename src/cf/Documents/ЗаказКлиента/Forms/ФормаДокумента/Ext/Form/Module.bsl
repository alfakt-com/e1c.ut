//ЦС Владимир
&НаКлиенте
Перем СуммаСохр;
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания


///Сергей 17.08.2020 +++
&НаКлиенте
Перем КодПодтверждения;  
&НаКлиенте
Перем ДатаСмсСообщения;
///Сергей 17.08.2020 ---

#КонецОбласти
 
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// sw begin
	// Швецов Тимур, 16.09.2018
	//Если Объект.Ссылка.Проведен И Не РольДоступна("ПолныеПрава") Тогда
	//	//Или РольДоступна("swРазрешитьПерепроведениеЗаказовКлиентов")) 
	//	ЭтаФорма.ТолькоПросмотр = Истина;
	//КонецЕсли;
	// sw end
	
	//ТТ
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = Константы.СкладПоУмолчанию.Получить();//Склад по умолчанию	
		КонецЕсли;
		//Желаемая дата по умолчанию
		Объект.ЖелаемаяДатаОтгрузки = КонецДня(ТекущаяДата())+1;
		Объект.ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
		//Для счетчика
		//Объект.bon_БонусныйСчет = Справочники.bon_НоминальныеОбъекты.НайтиПоНаименованию("По умолчанию (Для счетчика)");
	КонецЕсли;
	
	Если ДоступНаУдалениеТоваров() Тогда //Отказ
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыНоменклатура.Доступность = Ложь;	
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыКоличествоУпаковок.Доступность = Ложь;	
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыВариантОбеспечения.Доступность = Ложь;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыОтмененоПричиныОтменыНеИспользуются.Доступность = Ложь;
		Элементы.Товары.ПодчиненныеЭлементы.ТоварыГруппаОтмена.Доступность = Ложь;
		Элементы.ГруппаОбеспечение.Доступность = Ложь;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      Или ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.ЗаказКлиента);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		//Начало: МК Баубериков А - 03.12.2020
		//Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		//	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
		//КонецЕсли;
		//Конец: МК Баубериков А - 03.12.2020
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	ПродажиСервер.УстановитьОтметкуНезаполненногоДоговора(Элементы, "Договор");
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ПравоНаЧтениеВидаЦены = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.ВидЦены);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Элементы.ДекорацияДатаОтгрузки.Видимость = ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента И Объект.НеОтгружатьЧастями;
	
	Элементы.ТоварыГруппаОтмена.Видимость                        = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	Элементы.ТоварыОтмененоПричиныОтменыНеИспользуются.Видимость = Не ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	Перечисления.СтатусыЗаказовКлиентов.ЗаполнитьСписокВыбора(Элементы.Статус.СписокВыбора, Объект.Статус);
	
	Элементы.ЗакрытьЗаказ.Доступность = ПравоДоступа("Изменение",Метаданные.Документы.ЗаказКлиента);
	
	//МК Жакупов К. Доступ к изменению "Менеджера" и "Подразделение"
	ДоступностьРоли = РольДоступность("Доступ к изменению менеджера и подразделения (Роль)");
	Элементы.Менеджер.Доступность = ДоступностьРоли;
	Элементы.Подразделение.Доступность = ДоступностьРоли;
	
	// Нет смысла показывать пользователю информацию о расчете скидок, к которым нет доступа.
	Элементы.ГруппаТоварыИнформацияОСкидках.Доступность      = ПравоДоступа("Просмотр", Метаданные.Справочники.СкидкиНаценки);
	Элементы.ТоварыНазначитьАвтоматическиеСкидки.Доступность = ПравоДоступа("Просмотр", Метаданные.Справочники.СкидкиНаценки);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументССылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	Если Объект.Ссылка.Пустая() тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПредзаказКлиента") тогда
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект.ДокументОснование, "Менеджер") Тогда
				Объект.Менеджер = Объект.ДокументОснование.Менеджер;
				Объект.Подразделение = Объект.ДокументОснование.Менеджер.Подразделение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//Окончание: МК Баубериков А - 11.05.2020
	
	НеВыполнятьПроверкуПередЗаписью = Истина;
	
	//++Халыкова.А.А. 10.12.2021 страт
	Элементы.Номер.Доступность = Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаНомер", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	//++Халыкова.А.А. 10.12.2021 финиш
	
	Элементы.ОтказОтПодарка.Доступность = Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаОтказотПодарка", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
	
	//++2_К++ 07.02.22 старт
	Если Объект.Проведен Тогда
		Элементы.Партнер.Доступность 				= Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаНомер", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
		Элементы.ТоварыНоменклатура.Доступность 	= Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаНомер", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	КонецЕсли;
	//++Аян_К++ 07.02.22 старт
	
	//++Аян_К++ 300522 старт
	Если Объект.Ссылка.Пустая() тогда 
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	//++Аян_К++ 300522 финиш
	
КонецПроцедуры


//Начало: МК Баубериков А - 11.05.2020
&НаСервере
Функция ВыгруженВВМС(Ссылка)
	
	Выгружен = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Infor_ИсторияСтатусовВМС.Объект КАК Объект,
	|	Infor_ИсторияСтатусовВМС.СтатусОбъекта КАК СтатусОбъекта
	|ИЗ
	|	РегистрСведений.Infor_ИсторияСтатусовВМС КАК Infor_ИсторияСтатусовВМС
	|ГДЕ
	|	Infor_ИсторияСтатусовВМС.Объект = &Объект
	|	И Infor_ИсторияСтатусовВМС.СтатусОбъекта = &СтатусОбъекта";
	Запрос.УстановитьПараметр("Объект",Ссылка);
	Запрос.УстановитьПараметр("СтатусОбъекта","Создано внешне");
	тзРез = Запрос.Выполнить().Выгрузить();
	
	Если тзРез.Количество()>0 тогда
		Выгружен = Истина;
	КонецЕсли;
	
	Возврат Выгружен;
	
КонецФункции
//Окончание: МК Баубериков А - 11.05.2020

&НаСервере
Функция РольДоступность(РольПоль)
	
	ПользТек = ПользователиКлиентСервер.ТекущийПользователь();
	Возврат bon_БонуснаяПрограммаСервер.ПроверкаДоступа(ПользТек, РольПоль);
	
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	//++Аян_К++ 210422 старт
	Если ЗначениеЗаполнено(Объект.Дизайнер) И Не ЗначениеЗаполнено(Объект.ТипОбъектаДизайнер) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("Укажите тип объекта");
		Сообщение.Поле = "объект.ТипОбъектаДизайнер";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	//++Аян_К++ 210422 финиш
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//ТТ
	Если НЕ ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) и НеВыполнятьПроверкуПередЗаписью Тогда
		Сообщить("Желаемая дата отгрузки не заполнено!");
		Отказ = Истина;
	КонецЕсли;
	
	//Доступ на самовывоз день в день
	Если Не Отказ и НеВыполнятьПроверкуПередЗаписью Тогда
		Отказ = НЕ ПроверкаДоступаНаСамовывоз();
	КонецЕсли;
	
	//Лимиты на день по складу
	Если ДЕНЬ(ТекущаяДата()) = Дата(2021, 10, 3) Или ДЕНЬ(ТекущаяДата()) = Дата(2021, 10, 17) Тогда
		Сообщить("Лимит на " + Формат(Объект.ЖелаемаяДатаОтгрузки, "ДЛФ=ДД") + " закончен!
				|Выберите другую дату.");
		Отказ = Истина;
	КонецЕсли;
		
	//Если Не Отказ И НеВыполнятьПроверкуПередЗаписью Тогда
	//	СтрОтвет = ПроверкаЛимитаНаСклад(Объект.ЖелаемаяДатаОтгрузки);
	//	ТекстСообщения = "";
	//	Для Каждого ТекОтвет из СтрОтвет Цикл
	//		Если ТекОтвет.Значение <> 99999 Тогда
	//			Если ТекОтвет.Значение <= 0 Тогда
	//				Сообщить("Лимит "+ТекОтвет.Ключ+" на "+Формат(Объект.ЖелаемаяДатаОтгрузки, "ДЛФ=ДД")+" закончен!
	//						|Выберите другую дату.");
	//				Отказ = Истина;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;	
	//КонецЕсли;
	
	//Проверка по графику работы склада
	Если Не Отказ и НеВыполнятьПроверкуПередЗаписью Тогда
		Отказ = ПроверитьГрафикРаботы();
	КонецЕсли;
	
	//Апаев_О Начало [16.07.2022] - "Доработка подарков акции"
	//Раскоменченно для работы механизма, было закомментировано.
	
	Если НЕ Объект.ОтказОтПодарка Тогда
		МаркетинговаяАкция = ПроверкаДоступностиПодарка();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	НайденныеПодарки = Объект.Товары.НайтиСтроки(Новый Структура("Подарок", Истина));
	Если МаркетинговаяАкция <> Неопределено Тогда		
		Если НайденныеПодарки.Количество() = 0 Тогда
			ПараметрыФормы.Вставить("Склад", Объект.Склад);
			ПараметрыФормы.Вставить("МаркетинговаяАкция", МаркетинговаяАкция);			
			Объект.МаркетинговаяАкция = МаркетинговаяАкция;
			ОткрытьФорму("Обработка.bon_ВыПолучилиПодарок.Форма.ДаримПодарок", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
			Элементы.Товары.Обновить();
			Отказ = Истина;
		Иначе
			Если Объект.МаркетинговаяАкция <> МаркетинговаяАкция Тогда
				Объект.МаркетинговаяАкция = ПредопределенноеЗначение("Документ.bon_МакетинговыеАкции.ПустаяСсылка");
				Для Каждого НайдСтрока Из НайденныеПодарки Цикл
					Объект.Товары.Удалить(НайдСтрока);
				КонецЦикла;
				ПараметрыФормы.Вставить("Склад", Объект.Склад);
				ПараметрыФормы.Вставить("МаркетинговаяАкция", МаркетинговаяАкция);			
				Объект.МаркетинговаяАкция = МаркетинговаяАкция;
				ОткрытьФорму("Обработка.bon_ВыПолучилиПодарок.Форма.ДаримПодарок", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
				Элементы.Товары.Обновить();
				Отказ = Истина;
			КонецЕсли;				
		КонецЕсли;
		
	Иначе
		Объект.МаркетинговаяАкция = ПредопределенноеЗначение("Документ.bon_МакетинговыеАкции.ПустаяСсылка");
		Для Каждого НайдСтрока Из НайденныеПодарки Цикл
			Объект.Товары.Удалить(НайдСтрока);
		КонецЦикла;
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Подарок", Ложь);
		Элементы.Товары.Обновить();
	КонецЕсли;
	//Апаев_О Окончание [16.07.2022]
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, проверим рассчитанность скидок и корректность графика оплаты по заказу.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Товары",
			"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			
		//ПересчетАвтоматическихСкидокСервер(); ///Сергей 04.11.2020
		//ТоварыПроцентАвтоСкидки();            ///Сергей 04.11.2020
		Элементы.Склад.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
		И НЕ (ГрафикИсполненияВДоговоре
		И Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")) Тогда
		
		СуммаЭтаповОплаты       = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		СуммаЗалогаПоЭтапам     = Объект.ЭтапыГрафикаОплаты.Итог("СуммаЗалогаЗаТару");
		СуммаОтклоненияПоЭтапам = Объект.ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров");
		
		СуммаОтклоненияПоОплате = ?(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам = 0,
		                            0,
		                            Окр(СуммаОтклоненияПоЭтапам * СуммаЭтаповОплаты 
		                                /(СуммаЭтаповОплаты+СуммаЗалогаПоЭтапам),2));
		
		КоличествоЭтапов        = Объект.ЭтапыГрафикаОплаты.Количество();
		
		Если СуммаЗаказано = 0 И СуммаЗалогаЗаТару = 0 И КоличествоЭтапов > 0 Тогда
			Объект.ЭтапыГрафикаОплаты.Очистить();
		ИначеЕсли СуммаЗаказано - СуммаОтклоненияПоОплате <> СуммаЭтаповОплаты
			ИЛИ СуммаЗалогаЗаТару-(СуммаОтклоненияПоЭтапам - СуммаОтклоненияПоОплате) <> СуммаЗалогаПоЭтапам Тогда
			
			ГрафикСоглашенияЗаполнен = ИспользоватьСоглашенияСКлиентами
				И ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
			ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
			
			Если КоличествоЭтапов = 0 Тогда
				Если Не (ГрафикЗаполнен Или ГрафикСоглашенияЗаполнен) Тогда
				
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
						Объект,
						ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
						Объект.ЖелаемаяДатаОтгрузки,
						СуммаЗаказано,
						СуммаЗалогаЗаТару);
						
				Иначе
					ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен);
				КонецЕсли;
			Иначе
				
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
					Объект.ЭтапыГрафикаОплаты,
					СуммаЗаказано,
					СуммаЗалогаЗаТару);
				
			КонецЕсли;
			
			ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
			
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		
		МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
		Если ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаОтгрузки Тогда
			Объект.ЖелаемаяДатаОтгрузки = МаксДатаАванса;
			ПродажиКлиент.ОповеститьОПерезаполненииЖелаемойДатыОтгрузки();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_ЗаказКлиента", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	///Сергей 07.08.2020 +++
	Если Объект.bon_АкцииПоСчетчику = Истина  Тогда 
		Если Объект.bon_ПоКратности = Истина Тогда	
			Форма = ПолучитьФорму("Обработка.bon_ВыПолучилиПодарок.Форма.СотыйПокупатель");
			Форма.Объект.НомПобедит = Объект.bon_СчетчикКрат;
			Форма.Открыть();	
		КонецЕсли;
		
		Если Объект.bon_ПоСчетчику = Истина Тогда
			Форма = ПолучитьФорму("Обработка.bon_ВыПолучилиПодарок.Форма.ДаримБонусы");
			Форма.Объект.НомПобедит = Объект.bon_СуммаБонусов;
			Форма.Открыть();			
		КонецЕсли;	
	КонецЕсли;
	///Сергей 07.08.2020 ---
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка) 
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполненияИзФайла"  И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("ИмяСобытия, Параметр", ИмяСобытия, Параметр)), Параметр.КартаЛояльности);
        Возврат;
	КонецЕсли;
	
	// Подсистема "ОбменСКонтрагентами".
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.ДекорацияСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Перем АдресНабораВоВременномХранилище, ПараметрыНабора, ПараметрыОткрытия;
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
        И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
        Если Объект.Согласован Тогда
            Объект.Согласован = Ложь;
        КонецЕсли;
        ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
        УстановитьВидимостьЗапретаОтгрузкиПартнеру();
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
   КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор" 
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        ПараметрыНабора = Новый Структура;
        ПараметрыНабора.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыНабора.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыНабора.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыНабора);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
        ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
        ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
        ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	///Сергей 30.05.2021 +++ Проверка на доступ к датам
	Если Не ПроверкаДоступа("New: Доступ к датам в документах продажи (Роль)") Тогда
		Элементы.Дата.ТолькоПросмотр = Истина;
		Если Объект.Проведен Тогда
			Элементы.ЖелаемаяДатаОтгрузки.ТолькоПросмотр = Истина;
			Элементы.НеОтгружатьЧастями.ТолькоПросмотр = Истина;
			Элементы.ДатаОтгрузки.ТолькоПросмотр = Истина;
			Если Объект.ЭтапыГрафикаОплаты.Количество() > 0 тогда
				Попытка
				Для Каждого СтрОп Из Объект.ЭтапыГрафикаОплаты Цикл 
					СтрОп.Блок = Истина;	
				КонецЦикла;
				Исключение
				КонецПопытки;
			КонецЕсли;
		Иначе 
			Если Объект.ЭтапыГрафикаОплаты.Количество() > 0 тогда
				Попытка
				Для Каждого СтрОп Из Объект.ЭтапыГрафикаОплаты Цикл 
					СтрОп.Блок = Ложь;	
				КонецЦикла;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	///Сергей 30.05.2021 --- Проверка на доступ к дата
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	//Вывести надпись по лимитам
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		ПолучитьЛимитыОтгрузок(Объект.ЖелаемаяДатаОтгрузки);
	Иначе
		ПолучитьЛимитыОтгрузок(Объект.Дата + 24*60*60);
	КонецЕсли;
	
	//ЦС Владимир
	Если НЕ ПроверитьРоль() тогда
		Элементы.Бонус.Видимость = Ложь;
		Элементы.ЦС_Группа.Видимость = Ложь; 
		Элементы.ЦС_Бонус.Видимость = Ложь; 
	иначе			
		Если Объект.ЦС_Бонус тогда
			Элементы.Бонус.Видимость = Истина;
			Элементы.ЦС_Группа.Видимость = Истина;
		иначе
			Элементы.Бонус.Видимость = Ложь;
			Элементы.ЦС_Группа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	//
	
	
	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	///Сергей 20.08.2020 +++
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
		Элементы.Бонусы_КлиентуПоиск.Доступность = Ложь;
		
		///Сергей 28.08.2020 +++ Расчет бонусов
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
		///Сергей 28.08.2020 --- Расчет бонусов	
		
		ЕстьРеалка = Ложь;
		//ЕстьРеалка = ПроверкаНаСозданиеРеалки(); ///Нужно создать роль на доступ к чтению документов связаных с Заказам Клиента
		Если ЕстьРеалка Тогда
			Элементы.Товары.ТолькоПросмотр = Истина;	
		КонецЕсли;
	Иначе 
		Элементы.ФормаПровестиИЗакрыть.Видимость = Истина;	
		Элементы.Бонусы_КлиентуПоиск.Доступность = Истина;
	КонецЕсли;
	///Сергей 20.08.2020 ---
	
	Если Объект.bon_РеферальнаяСистема тогда
		Элементы.Бонусы_КлиентуПоРеф.Видимость = Истина;
		Элементы.КНачислениюПоРеферальному.Видимость = Истина;
		Элементы.bon_БонусПартНачисРеф.Видимость = Истина;
		Элементы.ИтогоБонусовРеф.Заголовок = Объект.bon_БонусПартНачисРеф.Итог("Буфер") + Объект.bon_БонусПартНачисРеф.Итог("Остаток");
	Иначе 
		Элементы.Бонусы_КлиентуПоРеф.Видимость = Ложь;
		Элементы.КНачислениюПоРеферальному.Видимость = Ложь;
		Элементы.bon_БонусПартНачисРеф.Видимость = Ложь;
	КонецЕсли;
	
	///Сергей 17.09.2020 +++
	Попытка
		РольПров = Строка("Администратор по Бонусам (Роль)");
		Если ПроверкаДоступа(РольПров) Тогда
			Элементы.Товары.ПодчиненныеЭлементы.ТоварыКлючСтроки.ТолькоПросмотр = Ложь;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	///Сергей 17.09.2020 ---
	
	////Временно 21.10.2020
	///Сергей 16.10.2020 +++
	//Если Объект.bon_БонусыИспользовали тогда
	//	Элементы.Товары.ТолькоПросмотр = Истина;
	//	Элементы.ТоварыГруппаЗаполнить.Доступность = Ложь;
	//	Элементы.ГруппаОбеспечение.Доступность = Ложь;
	//	Элементы.ГруппаЦеныСкидки.Доступность = Ложь;     
	//	Элементы.ГруппаТоварыПодобратьТовары.Доступность = Ложь;
	//	Элементы.ТоварыСкопироватьСтроки.Доступность = Ложь;
	//	Элементы.ТоварыВставитьСтроки.Доступность = Ложь;
	//	Элементы.ТоварыРазбитьСтроку.Доступность = Ложь;
	//	Элементы.ТоварыСоставНабора.Доступность = Ложь;
	//КонецЕсли;
	///Сергей 16.10.2020 ---
	
	///Сергей 20.05.2021 +++
	Попытка
		РольПров = Строка("New: Доступ к ручным скидкам в заказе (Роль)");
		Если ПроверкаДоступа(РольПров) Тогда
			Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр = Ложь;
			Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = Ложь;
		Иначе 
			Элементы.Товары.ПодчиненныеЭлементы.ТоварыСуммаРучнойСкидки.ТолькоПросмотр = Истина;
			Элементы.Товары.ПодчиненныеЭлементы.ТоварыПроцентРучнойСкидки.ТолькоПросмотр = Истина;	
		КонецЕсли;
	Исключение
	КонецПопытки;
	///Сергей 20.05.2021 ---
	
	
	//++АК_Даулет++ 081221 старт
	Если НЕ ЗначениеЗаполнено(Объект.ПодарочныйСертификат) Тогда
		ДоступновтьСертификата()
	КонецЕсли;
	//++АК_Даулет++ 081221 финиш
	
	ПроверитьДоступностьДоговораКОнтрагента();//++Аян_К++ 210422
	
	//++Аян_К++ 210422 старт
	Если ПолучитьДоступЗаписьДизайнера() Тогда
		Элементы.Дизайнер.Доступность = (ДобавитьМесяц(НачалоМесяца(Объект.Дата), 1) + 1296000) > ТекущаяДата();
	КонецЕсли;
	//++Аян_К++ 210422
	
	//Кт Начало Апаев_О [20.10.2022] - Задача № 6290
	Если ПолучитьДоступЗаписьДизайнера() Тогда
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт") Тогда
			Элементы.Дизайнер.Доступность = (КонецДня(Объект.Дата + 86400) > ТекущаяДата());	
		КонецЕсли;
	КонецЕсли;
	//Кт Окончание Апаев_О [20.10.2022]
	
	//++Аян_К++ 260722 старт
	Если Объект.Проведен Тогда
		Элементы.Склад.Доступность = ПолучитьДоступЗаписьСклад();
	КонецЕсли;
	//++Аян_К++ 260722 финиш
	
	//++Аян_К++ 130922 старт
	Элементы.ГруппаЦеныСкидки.Видимость = ПроверитьДоступКВнешнемуФайлу();
	//++Аян_К++ 130922 финиш
	
	// Шолпан-красавица 13102022 №6216 старт 
	Элементы.ТоварыЗаполнитьНДС0.Видимость = ПроверитьДоступностьЗаполненияНДС();
	// Шолпан-красавица 13102022 №6216 финиш	

	//++Аян_К++ 201022 №6304 Старт
	//Элементы.ТоварыВидЦены.Доступность = РольДоступность("Доступ к произвольной цене (Роль)");
	//++Аян_К++ 201022 №6304 Финиш
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки =  Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Событие.ОбработкаВыбора");

	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда

		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
				
			ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
			МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
		
		ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.bon_ВыПолучилиПодарок.Форма.ДаримПодарок" Тогда
		
		Если ВыбранноеЗначение = Истина Тогда
			Объект.ОтказОтПодарка = Истина;
		Иначе
			
			//Апаев_О Начало [16.07.2022] - "Доработка подарков акции"
			Для каждого Подарок Из ВыбранноеЗначение Цикл
				ДобавитьПодарок(Подарок);
			КонецЦикла;
			//Апаев_О Окончание [16.07.2022]
			
		КонецЕсли;
	    
	КонецЕсли;
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция ПроверитьРоль()
	Возврат	РольДоступна("ЦС_Бонус"); 
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ЗаполнитьГруппуФинУчета();
	
	ОбновитьОграничениеЗадолженности();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Договор, Объект.НаправлениеДеятельности, Объект.Дата);
	
	НалогообложениеНДСПриИзмененииСервер(Неопределено);

	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор,"ПорядокОплаты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	///Сергей 03.06.2021 +++ (Проверка доступа к контрагенту)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = ПроверкаДоступаКпартнеру(Объект.Партнер);
	КонецЕсли;	
	///Сергей 03.06.2021 ---
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		//ЦС Владимир
		Объект.ЦС_СкидкаДляПартнера = 0;
		//
		Возврат;
	КонецЕсли;

	ПриИзмененииПартнераСервер();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	///Сергей 01.09.2020 +++
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда 
		Если ПроверкаНаФизЛицо(Объект.Партнер) Тогда
			Элементы.Бонусы_Клиенту.Доступность = Истина;
			//ОчиститьБонусныйСчетКоманда();
			ЗаполнитьБонусныйСчетклиента();
		Иначе 
			Элементы.Бонусы_Клиенту.Доступность = Ложь;
			ОчиститьБонусныйСчетКомандаЮрлиц();
		КонецЕсли;	
	КонецЕсли;	
	///Сергей 01.09.2020 ---
	
	Элементы.Бонусы_Клиенту.Доступность = Истина; //++Аян_К++ 070422
	
	Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"); //++Аян_К++ 160522
	
	ПроверитьДоступностьДоговораКОнтрагента();//++Аян_К++ 210422
	
	ПроверитьДоступностьЧастноеЛицо();//++Аян_К++ 230522
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		
	Иначе
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	///Сергей 03.06.2021 +++ (Проверка доступа к контрагенту)
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ПроверкаДоступаККонтрагенты(Объект.Контрагент);
	КонецЕсли;	
	///Сергей 03.06.2021 ---
	
	КонтрагентПриИзмененииСервер();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
	///Сергей 01.09.2020 +++
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		Если ПроверкаНаФизЛицо(Объект.Контрагент) Тогда
			Элементы.Бонусы_Клиенту.Доступность = Истина;
			//ОчиститьБонусныйСчетКоманда();
		Иначе 
			Элементы.Бонусы_Клиенту.Доступность = Ложь;
			ОчиститьБонусныйСчетКомандаЮрлиц();
		КонецЕсли;	
	КонецЕсли;	
	///Сергей 01.09.2020 ---
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		ПродажиСервер.ПартнерПриИзменении(Объект);
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	Если Объект.Согласован
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;

	СтатусПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПриИзмененииВалютыСервер(
			Объект.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента));
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
	ЗаполнитьПорядокОплатыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
	ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса Тогда
	
		ПересчитыватьЦены = Истина;
		ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	
		Если ПересчитыватьЦены Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПриИзмененииСкладаСервер();
	
	Если ПроверитьУценкуДоступ() Тогда
		РасчитатьУченку();//++Аян_К++ 170522
	КонецЕсли;

	ПроверитьДоступностьСклад();//++Аян_К++ 240522
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	//Начало: Баубериков А - 23.07.2020
	УстановитьПодразделение();
	//Конец: Баубериков А - 23.07.2020
	
КонецПроцедуры

//Начало: Баубериков А - 23.07.2020
&НаСервере
Процедура УстановитьПодразделение()
	
	Объект.Подразделение = Объект.Менеджер.Подразделение;

КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(Неопределено, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяЗалогЗаТаруПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНажатие(Элемент, СтандартнаяОбработка)
	
	ПродажиКлиент.СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНазначенияПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КодыНазначенияПлатежей");
	ПараметрыФормы.Вставить("ИмяСекции", "Классификатор");
	ПараметрыФормы.Вставить("ПолучатьПолныеДанные", Ложь);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзКлассификатора", ПараметрыФормы, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбменСКонтрагентамиКлиент.ОткрытьДеревоЭД(Объект.Ссылка);
	
КонецПроцедуры
//Конец: Баубериков А - 23.07.2020


//ТТ
&НаСервере
Функция ПроверкаДоступаНаСамовывоз()
	Если ЗначениеЗаполнено(Объект.Склад) и Объект.Склад.ВидСклада = Перечисления.ВидыСкладов.Основной Тогда
		Если Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
			Если НачалоДня(Объект.ДатаОтгрузки) = НачалоДня(Объект.Дата) ИЛИ НачалоДня(Объект.ЖелаемаяДатаОтгрузки) = НачалоДня(Объект.Дата) Тогда
				Если НЕ ЗначениеЗаполнено(Объект.Подразделение)	Тогда
					Сообщить("Необходимо указать подразделение!");
					Возврат Ложь;
				Иначе
					Если ЗначениеЗаполнено(Объект.Подразделение.ВидПодразделения) Тогда
						Если НЕ Объект.Подразделение.ВидПодразделения.СамовывозРазрешен Тогда
							Сообщить("Самовывоз день в день для указанного подразделения запрещен!");
							Возврат Ложь;
						КонецЕсли;
					Иначе
						Сообщить("Самовывоз день в день для указанного подразделения запрещен!");
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//проверка лимиты на склад
Функция ПроверкаЛимитаНаСклад(ДатаПроверки,ВидПроверки = Неопределено)
	УстановитьПривилегированныйРежим(Истина);
	СтрОтвет = Новый Соответствие;
	СтрОтвет.Вставить("Общий",99999);
	Если Объект.Склад.ЛимитОтгрузок = 0 Тогда
		Возврат СтрОтвет;
	КонецЕсли;
	Если ДатаПроверки < НачалоДня(ТекущаяДата()) Тогда
		Возврат СтрОтвет;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Ссылка), 0) КАК КоличествоЗаказов,
	               |	ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ЛимитОтгрузок КАК Лимит,
	               |	""Общий"" КАК ВидЛимита
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка.Проведен
	               |	И НАЧАЛОПЕРИОДА(ЗаказКлиента.ЖелаемаяДатаОтгрузки, ДЕНЬ) = &ДатаПроверки
	               |	И ЗаказКлиента.Склад = &Склад
	               |	И ЗаказКлиента.Ссылка <> &Заказ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Ссылка), 0),
	               |	ЕСТЬNULL(СкладыЛимиты.Лимит, 99999),
	               |	ЗаказКлиента.СпособДоставки
	               |ИЗ
	               |	Документ.ЗаказКлиента КАК ЗаказКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.Лимиты КАК СкладыЛимиты
	               |		ПО ЗаказКлиента.Склад = СкладыЛимиты.Ссылка
	               |			И ЗаказКлиента.СпособДоставки = СкладыЛимиты.СпсособДоставки
	               |ГДЕ
	               |	ЗаказКлиента.Ссылка.Проведен
	               |	И НАЧАЛОПЕРИОДА(ЗаказКлиента.ЖелаемаяДатаОтгрузки, ДЕНЬ) = &ДатаПроверки
	               |	И ЗаказКлиента.Склад = &Склад
	               |	И ЗаказКлиента.СпособДоставки = &СпособДоставки
	               |	И ЗаказКлиента.Ссылка <> &Заказ
				   //|	И ВЫБОР
				   //|			КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
				   //|				ТОГДА НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ЗаказКлиента.ЖелаемаяДатаОтгрузки, ДЕНЬ) // Только самовывозы день в день, остальные пропускаем
				   //|			ИНАЧЕ ИСТИНА
				   //|		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКлиента.СпособДоставки,
	               |	ЕСТЬNULL(СкладыЛимиты.Лимит, 99999)";
	Запрос.УстановитьПараметр("Склад",Объект.Склад);
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаПроверки",НачалоДня(ДатаПроверки));
	Запрос.УстановитьПараметр("СпособДоставки",Объект.СпособДоставки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат СтрОтвет;
	Иначе
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(ВидПроверки) Тогда
				Если ВидПроверки <> СокрЛП(Выборка.ВидЛимита) Тогда Продолжить;
				КонецЕсли;
			КонецЕсли;
			Остаток = Выборка.Лимит - Выборка.КоличествоЗаказов;
			СтрОтвет.Вставить(СокрЛП(Выборка.ВидЛимита),Остаток);
		КонецЦикла;
	КонецЕсли;
	Возврат СтрОтвет;
КонецФункции

//Получить лимиты на 3 дня
Процедура ПолучитьЛимитыОтгрузок(ДатаПроверки)
	Стр1 = ПроверкаЛимитаНаСклад(ДатаПроверки,"Общий");	
	Стр2 = ПроверкаЛимитаНаСклад(ДатаПроверки+24*60*60,"Общий");	
	Стр3 = ПроверкаЛимитаНаСклад(ДатаПроверки+24*60*60*2,"Общий");
	Остаток1 = Стр1.Получить("Общий");	
	Остаток2 = Стр2.Получить("Общий");	
	Остаток3 = Стр3.Получить("Общий");
	Если Остаток1 = 99999 Тогда
		ТекстНадписи = "";
	Иначе
		ТекстНадписи = "Остатки лимита отгрузок: "+Остаток1+"";
		ТекстНадписи = ТекстНадписи+" | "+Остаток2;
		ТекстНадписи = ТекстНадписи+" | "+Остаток3;
	КонецЕсли;
	Элементы.ЛимитыНаДаты.Заголовок = ТекстНадписи;
КонецПроцедуры

//Проверка по графику работы склада
Функция ПроверитьГрафикРаботы(ЭтоВыгрузка=Ложь)
	Если ЗначениеЗаполнено(Объект.Ссылка) и НЕ ЭтоВыгрузка Тогда //НЕ Новый
		//Првоерки если записанный документ меняется на сегодняшний день		
		Если Объект.ЖелаемаяДатаОтгрузки = Объект.Ссылка.ЖелаемаяДатаОтгрузки и Объект.СпособДоставки = Объект.Ссылка.СпособДоставки Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(Объект.ЖелаемаяДатаОтгрузки) > НачалоДня(ТекущаяДата()) и Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда 
		Возврат Ложь;			
	ИначеЕсли НачалоДня(Объект.ЖелаемаяДатаОтгрузки) > НачалоДня(ТекущаяДата()+24*60*60) и Объект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда 
		Возврат Ложь;			
	КонецЕсли;
	ДеньНедели = ДеньНедели(ТекущаяДата());
	НормаОтгрузки = Объект.Склад.НормаВремениНаОбработку; //Часов на обработку заказа
	НашелСтроку = Объект.Склад.ГрафикРаботы.Найти(ДеньНедели,"ДеньНедели");
	Если НормаОтгрузки <> 0 и НашелСтроку <> Неопределено Тогда
		МаксВремя = НашелСтроку.ВремяЗакрытия - НормаОтгрузки*60*60;
		МаксВремяВМинутах = Час(МаксВремя)*60 + Минута(МаксВремя);
		ТекВремяВМинутах = Час(ТекущаяДата())*60 + Минута(ТекущаяДата());
		Если ТекВремяВМинутах > МаксВремяВМинутах Тогда
			Сообщить("По графику работы склада, данный заказ не может быть обработан сегодня. Поменяйте дату отгрузки!");
			Возврат Истина; //Отказ
		Иначе
			Возврат Ложь; //Отказ
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь; //Отказ
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Элемент.НаправлениеДеятельности.ПриИзменении");
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.Элементы.Товары.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыВариантОбеспечения И Не ТолькоПросмотр Тогда

		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
					ЭтаФорма, УникальныйИдентификатор);
					
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Товары'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	///Сергей 13.10.2020 +++ расчитываем автоматически	
	//ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
	//	Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	
	//	Если НЕ Объект.СкидкиРассчитаны Тогда
	//		СтруктураПараметры = Новый Структура;
	//		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	//		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	//		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	//		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	//		
	//		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	//		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
	//			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
	//		РассчитатьСкидкиБезПримененияКОбъекту();
	//	КонецЕсли;
	//	
	//	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	//	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	///Сергей 13.10.2020 --- расчитываем автоматически	
	
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
			ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрОповещения.Вставить("ФормаВладелец",        УникальныйИдентификатор);
			
			Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
		
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	КонецЕсли;
	
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;	
	Если ПравоНаЧтениеВидаЦены = Ложь Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
		Объект.Ссылка,
		ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ПроцентРучнойСкидки"),);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущиеДанные, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	///Сергей 28.05.2021 +++
	Если Объект.Дата >= ДатаКонтроля() или Объект.Дата = '00010101' Тогда
		ПроверитьНаКонтрольРучнойСкидки(ТекущиеДанные); 
	КонецЕсли;
	///Сергей 28.05.2021 ---

	//Произвольная цена только по доступу.   Убрал ++Аян_К++ 261022 №6304
	//Если НЕ ПроверитьНаПроизвольнуюЦену(ТекущиеДанные.ВидЦены) Тогда
	//	ТекущиеДанные.ВидЦены = ПолучитьРозничнуюЦену();
	//КонецЕсли;	
	//
	//////Сергей 23.05.2021 +++
	//ТекПольз = ПользователиКлиентСервер.ТекущийПользователь();
	//ТипЦенПоДоступу = ПроверитьНаДоступКТипуЦен(ТекПольз);
	//Если ТипЦенПоДоступу <> Неопределено Тогда
	//	ТекущиеДанные.ВидЦены = ТипЦенПоДоступу;
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыВидЦены.ТолькоПросмотр = Истина;
	//Иначе 
	//	Элементы.Товары.ПодчиненныеЭлементы.ТоварыВидЦены.ТолькоПросмотр = Ложь;
	//КонецЕсли;
	////Сергей 23.05.2021 ---

	///Сергей 16.11.2020 +++ Устанавливаем статус отгрузить на Услугу
	Если ТекущиеДанные.ТипНоменклатуры = ПолучитьТимНомУслуга() Тогда
		ТекущиеДанные.ВариантОбеспечения = ПолучитьВариантОбеспеченияОтгрузка();		
	КонецЕсли;
	///Сергей 16.11.2020 --- Устанавливаем статус отгрузить на Услугу
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ТоварыКешТекущейСтроки);
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОтгрузки) И Объект.НеОтгружатьЧастями
			И (КешСтроки = Неопределено Или КешСтроки.ДатаОтгрузки <> ТекущиеДанные.ДатаОтгрузки) Тогда
			ПриИзмененииДатыОтгрузкиВТабЧасти(); // вызов сервера.
		КонецЕсли;
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
	ПроверкаНаСпецЦену(ТекущиеДанные);  ///Сергей 13.10.2020 +++
	
	///Сергей 30.07.2020 +++ ""Установка КлючСтроки""
	Если не Элемент.ТекущиеДанные = Неопределено Тогда 
		Если НоваяСтрока Тогда
			УстановитьКодСтроки(Объект, "Товары");	
		КонецЕсли;
	КонецЕсли;
	///Сергей 30.07.2020 --- ""Установка КлючСтроки""
	                                                                  
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПриИзменениеРучСкидки(); ///Сергей 03.09.2020 +++ Расчет бонусов
	ПроверкаНаРеферальнуюСистемуКл(); ///Сергей 17.09.2020 +++ Расчет бонусов  по Рефиральной
	ПроверкаНаСпецЦену(ТекущиеДанные);///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
	
	//++АК_Даулет++ 021221 старт
	Если НЕ ЗначениеЗаполнено(Объект.ПодарочныйСертификат) Тогда
		ДоступновтьСертификата();
	Иначе
		Если ПолучитьСуммуДляСертификата() >= 100000 Тогда
			СделатьСкидкуПоСертификату(Объект.ПодарочныйСертификат);
		Иначе
			 Объект.ПодарочныйСертификат = ПредопределенноеЗначение("Справочник.ПодарочныеСертификаты.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	//++АК_Даулет++ 021221 финиш
	
	Если ПроверитьУценкуДоступ() Тогда
		РасчитатьУченку();//++Аян_К++ 170522
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступновтьСертификата()
	
	//++АК_Даулет++ 031221 старт
	//Если ПолучитьСуммуДляСертификата() >= 100000 Тогда
	Если ПолучитьСуммуДляСертификата() >= 200000 Тогда
		Элементы.ПодарочныйСертификат.Доступность = Истина;
	Иначе
		Элементы.ПодарочныйСертификат.Доступность = Ложь;
	КонецЕсли;
	//++АК_Даулет++ 031221 финиш

КонецПроцедуры

///Сергей 30.07.2020 +++ ""Установка КлючСтроки""
&НаКлиенте
Процедура УстановитьКодСтроки(Объект,
							ИмяТабличнойЧасти,
							РеквизитМаксимальныйКодСтроки = "МаксимальныйКлючСтроки",
							ИмяРеквизитаТЧ = "КлючСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда	
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];	
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл	
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары[ИмяРеквизитаТЧ] = ТекущийКод;	
		КонецЦикла;	
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;	
	КонецЕсли;
	
КонецПроцедуры
///Сергей 30.07.2020 --- ""Установка КлючСтроки""

&НаСервере
Функция РасчитатьБонусыКлинтау() Экспорт
	
	Объект.bon_БонусПартНачис.Очистить();
	
	Если bon_БонуснаяПрограммаСервер.ПроверкаНаРазрешенияВыдочиБонусов(Объект.Подразделение) тогда  
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл  
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) и СтрокаТаблицы.Сумма > 0 Тогда 
				bon_БонуснаяПрограммаСервер.РассчитатьСуммуКНакоплению(СтрокаТаблицы, Объект, "Товары"); 
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ОчиститьБонусыНеАкт();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчетРеф) Тогда
		РасчитатьБонусыКлинтауРев();
		Элементы.ИтогоБонусовРеф.Заголовок = Объект.bon_БонусПартНачисРеф.Итог("Буфер") + Объект.bon_БонусПартНачисРеф.Итог("Остаток");
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Товары");
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	
	//ТТ
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Отказ = ДоступНаУдалениеТоваров(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

//ТТ
Функция ДоступНаУдалениеТоваров(Номенклатура = Неопределено)
	Отказ = Ложь;
	Если ЗначениеЗаполнено(Номенклатура) и НЕ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		Возврат Отказ;
	КонецЕсли;
	Если НЕ ПроверкаДоступа("Мк разрешить редактирование выгруженных ВWMSДокументов (Роль)") Тогда
		//Закрыть редактирование товары, если документ был выгружен в WMS
		Если Infor_Интеграция._ОбъектВыгружен(Объект.Ссылка) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Отказ;
КонецФункции

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ТоварыКешТекущейСтроки, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
		
	///Сергей 28.08.2020 +++ Расчет бонусов
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
	КонецЕсли;
	///Сергей 28.08.2020 --- Расчет бонусов

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Элементы.Товары.ТекущиеДанные.Содержание",
		НСтр("ru='Содержание услуги'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
	Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	ЭтаФорма.ИмяФормы, "Товары"));
	
	//Начало: МК Баубериков А - 18.08.2020
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");      
	//Конец: МК Баубериков А - 18.08.2020	
	
	//++ Тишбаев О.М. по просьбе Бухгалтерии (Коцур)
	СтруктураДействий.Вставить("СтавкаНДС0", Новый Структура("Договор, Контрагент", Объект.Договор, Объект.Контрагент));
	//--
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	// sw begin
	// Швецов Тимур, 11.10.2018
	swОбработкаТабличнойЧастиКлиент.ПодровнятьКоличествоВСтроке(ТекущаяСтрока);
	// sw end
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	
	//ЦС Владимир
	РозничнаяЦена       = ПолучитьРозничнуюЦену();
	
	Если ТекущаяСтрока.ВидЦены = ПолучитьОПТЦену() Тогда  //++Аян_К++ 201022 №6304
		Если ПолучитьДоступВидуЦен(ТекущаяСтрока.ВидЦены) Тогда
			Сообщить("""ОПТ"" тип цен можно использовать только при роли ""Доступ к ОПТ цене""!");
			ТекущаяСтрока.ВидЦены = РозничнаяЦена;
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка") Тогда
		Если  НЕ РольДоступность("Доступ к произвольной цене (Роль)") Тогда 
			Сообщить("""Произвольный"" тип цен можно использовать только при роли ""Доступ к произвольной цене""!");
			ТекущаяСтрока.ВидЦены = РозничнаяЦена;
		КонецЕсли;
	КонецЕсли;
	
	ДатаДок = Объект.Дата;
	ТипЦенТС = ТекущаяСтрока.ВидЦены;
	СтруктураРеквизитов = ПолучитьПересчет(ТипЦенТС, ДатаДок);	
	
	Если СтруктураРеквизитов <> Неопределено тогда	
		ТекущийКурс = СтруктураРеквизитов.КурсНаДату;
		КоэффициентКонвертации = СтруктураРеквизитов.КоэффициентКонверация;
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена + (ТекущаяСтрока.Цена * КоэффициентКонвертации/100);	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
			СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
		КонецЕсли;
	
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	//ЦС Владимир
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	
	СтруктураДействий.Вставить("ЭтоЗаказ"); 								///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПодразделениеЗаказ", Объект.Подразделение); ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПроверкаНаСпеццену");                       ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"   

	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Функция ПроверитьНаПроизвольнуюЦену(ТоварыВидЦены)
	
	Если НЕ РольДоступность("Доступ к произвольной цене (Роль)") И ТоварыВидЦены = Справочники.ВидыЦен.ПустаяСсылка() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция  ПолучитьРозничнуюЦену()
	Возврат Справочники.ВидыЦен.НайтиПоНаименованию("Розничная");
КонецФункции

&НаСервере
Функция  ПолучитьПроизвольнуюЦену()
	Возврат Справочники.ВидыЦен.НайтиПоНаименованию("произвольная");
КонецФункции

///Сергей 23.05.2021 +++
&НаСервере
Функция  ПроверитьНаДоступКТипуЦен(ТекПольз)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	new_ДоступПотльзователейКТипамЦен.ВидЦены КАК ВидЦены
	               |ИЗ
	               |	РегистрСведений.new_ДоступПотльзователейКТипамЦен КАК new_ДоступПотльзователейКТипамЦен
	               |ГДЕ
	               |	new_ДоступПотльзователейКТипамЦен.Пользователи = &Пользователи";
	Запрос.УстановитьПараметр("Пользователи", ТекПольз);
	РезДан = Запрос.Выполнить().Выгрузить();
	
	Если РезДан.Количество() > 0 Тогда
		Возврат РезДан[0].ВидЦены;
	Иначе 	
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
///Сергей 23.05.2021 ---

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	//++АК_Даулет++ 081221 старт
	Если ПолучитьСуммуДляСертификата() >= 100000 Тогда
		СделатьСкидкуПоСертификату(Объект.ПодарочныйСертификат);
	КонецЕсли;
	//++АК_Даулет++ 081221 финиш
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Объект.Дата >= ДатаКонтроля() или Объект.Дата = '00010101' Тогда
		ПроверитьНаКонтрольРучнойСкидки(ТекущаяСтрока); ///28.05.2021 +++
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
		// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);   
	
	ПроверкаНаСпецЦену(ТекущаяСтрока);  ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен" 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	///28.05.2021 +++
	Если Объект.Дата >= ДатаКонтроля() или Объект.Дата = '00010101' Тогда
		ПроцДо = ТекущаяСтрока.ПроцентРучнойСкидки;
		ПроверитьНаКонтрольРучнойСкидки(ТекущаяСтрока); 
		После = ТекущаяСтрока.ПроцентРучнойСкидки;
		Если ПроцДо <> После Тогда 
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			// sw begin
			// Швецов Тимур, 05.02.2019
			Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
				СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
			КонецЕсли;
			// sw end
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	///28.05.2021 ---
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПроверкаНаСпецЦену(ТекущаяСтрока);  ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен" 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

&НаСервере
Функция УстановитьРежим()
УстановитьПривилегированныйРежим(Истина);		
КонецФункции


&НаСервере
Функция ПолучитьПересчет(ТипЦенТС, ДатаДок);
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЦенТС.ЦС_Пересчет = Истина тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|ГДЕ
		|	КурсыВалютСрезПоследних.Валюта = &Валюта";
		
		Запрос.УстановитьПараметр("Валюта", ТипЦенТС.ВалютаЦены);
		Запрос.УстановитьПараметр("Дата", ДатаДок);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КурсНаДату = ВыборкаДетальныеЗаписи.Курс;
		КонецЦикла;
		
		КоэффициентКонверация = Константы.ЦС_КоэффициентКонверация.Получить();
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("КурсНаДату", КурсНаДату);
		СтруктураРеквизитов.Вставить("КоэффициентКонверация", КоэффициентКонверация);	
		
		Возврат СтруктураРеквизитов
	иначе
		Возврат Неопределено;		
	КонецЕсли;	
КонецФункции
///Сергей 30.07.2020 --- ""Установка КлючСтроки""

///Сергей 19.08.2020 +++ ""Установка КлючСтроки""
&НаСервере
Процедура УстановитьКодСтрокиСерв(Объект,
							ИмяТабличнойЧасти,
							РеквизитМаксимальныйКодСтроки = "МаксимальныйКлючСтроки",
							ИмяРеквизитаТЧ = "КлючСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаТЧ, 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда	
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];	
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл	
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары[ИмяРеквизитаТЧ] = ТекущийКод;	
		КонецЦикла;	
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Обеспечение

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Поля.Удалить("Подразделение");

	Если ОбеспечениеКлиент.ПроверитьЗаполнение(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		//++Аян_К++ №5974 310822 старт
		Если ПроверитьИсключениеНаОтгрузку() Тогда
			ПроверитьДоступностьОтгрузки(ПараметрыФормы);
		КонецЕсли;
		//++Аян_К++ №5974 310822 финиш
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказКлиента.Форма.ФормаДокумента.СостояниеОбеспечения");
	
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(Команда)

	МассивВыделенныхСтрок = Элементы.Товары.ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() > 0 Тогда
		ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
		
		ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки'"), ЧастиДаты.Дата, Оповещение);
		
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		МинимальныйСтатус = НСтр("ru = 'К выполнению'");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован") Тогда
		МинимальныйСтатус = НСтр("ru = 'К выполнению'");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, НСтр("ru='Товары'"), Элементы.Товары.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;

	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПричинаОтмены = Результат;
    Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
        Возврат;
    КонецЕсли;
    
    ОтменитьВыделенныеСтрокиФрагмент(ПричинаОтмены);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиФрагмент(Знач ПричинаОтмены)
    
    Перем ВыделенныеСтроки, СтруктураДействий;
    
    СтруктураДействий = Новый Структура();
    СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
    СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
    СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
        Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
    
    ВыделенныеСтроки = ДополнитьДоПолногоНабора();
    
    ПродажиКлиент.ОтменитьВыделенныеСтроки(
    Объект.Товары,
    ВыделенныеСтроки,
    ПричинаОтмены,
    СтруктураДействий);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
    РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
    
    ПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
    
    ОтменитьВыделенныеСтрокиНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтроки(Команда)

	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, НСтр("ru='Товары'"), Элементы.Товары.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		ПроверятьОстатки = Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда
		
		ПроверятьОстатки = Истина;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ОткрытьФорму("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОтменитьНепоставленныеСтрокиЗавершение", ЭтотОбъект, Новый Структура("ПроверятьОстатки", ПроверятьОстатки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        Возврат;
	КонецЕсли;
	
	ОтменитьНепоставленныеСтрокиФрагмент(ПричинаОтмены, ПроверятьОстатки);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПроверятьОстатки = ДополнительныеПараметры.ПроверятьОстатки;
    
    
    ПричинаОтмены = Результат;
    Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
        Возврат;
    КонецЕсли;
    
    ОтменитьНепоставленныеСтрокиФрагмент(ПричинаОтмены, ПроверятьОстатки);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтрокиФрагмент(Знач ПричинаОтмены, Знач ПроверятьОстатки)
    
    Перем КоличествоСтрокОтменено;
    
    КоличествоСтрокОтменено = ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
    
    Если КоличествоСтрокОтменено = 0 Тогда
        
        ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
        
    Иначе
        
        РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
        ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказКлиента.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заказ клиента'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",               Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация",              Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",          Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",       Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",                  ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение",                              Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                           Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения",              Истина);
	
	ПараметрыФормы.Вставить("ВариантыОбеспечения",    ВариантыОбеспечения);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, НСтр("ru='Товары'"), ВыделенныеСтроки) Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСкладВВыделенныхСтрокахЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтрокахЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад = Результат;
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки",
		ЗависимыеРеквизиты(), "КоличествоУпаковок");
		
	Если ТаблицаФормы.ТекущиеДанные <> Неопределено Тогда
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТаблицаФормы.ТекущиеДанные);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтруктураПересчетаСуммы", СтруктураПересчетаСуммы);
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, ТекущаяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы, НоваяСтрока);
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(ДополнительныеПараметры.СтруктураПересчетаСуммы);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураСообщений()
	
	Возврат СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(СтруктураСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("БанковскийСчет",                 Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("НазначениеПлатежа",              Объект.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НомерЗаказа", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер));
	СтруктураПараметров.Вставить("ДатаЗаказа",                     Формат(Объект.Дата, "ДЛФ = D"));
	СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов",      ПараметрыВыбораРеквизитов);
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.РеквизитыПечати", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	Если ПроверитьДоступКВнешнемуФайлу() Тогда  //++Аян_К++ 110522 старт
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
		ПараметрыФормы.Вставить("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
		ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
			ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		КонецЕсли;
		
		ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	//ПересчетАвтоматическихСкидокСервер(); ///Сергей 04.11.2020
	//ТоварыПроцентАвтоСкидки();            ///Сергей 04.11.2020
	//Записать();
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	СтруктураЗакрытия.Вставить("ТаблицаТоваровРасход",         ПоместитьВоВременноеХранилищеНаСервере("Товары", Новый УникальныйИдентификатор));
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия",
	             СтруктураЗакрытия, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьЗаказФрагмент", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи",ОписаниеОповещения);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	//ПересчетАвтоматическихСкидокСервер(); ///Сергей 05.11.2020
	//ТоварыПроцентАвтоСкидки();            ///Сергей 05.11.2020
	//Записать();

	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	//ПересчетАвтоматическихСкидокСервер(); ///Сергей 05.11.2020
	//ТоварыПроцентАвтоСкидки();            ///Сергей 05.11.2020
	//Записать();

	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление обеспечения.
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,"ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыДатаОтгрузки", "ДатаОтгрузки", "Товары", "ДатаОтгрузкиОбязательна");

	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ТоварыСклад", "Склад", "Товары", "СкладОбязателен");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "Склад", "Склад", "", "СкладОбязателен");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаАвтоматическойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПроцентРучнойСкидки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСуммаРучнойСкидки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	УчетНДСУТ.УстановитьУсловноеОформлениеСуммНДС(ЭтаФорма);
	
	//

	УчетНДСУТ.УстановитьУсловноеОформлениеСтавкиНДС(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСодержания(ЭтаФорма);

	//
	
	ПараметрыУстановки = МногооборотнаяТараСервер.ПараметрыУстановкиУсловногоОформленияДляСтрокСМногооборотнойТарой();
	
	ПараметрыУстановки.Форма                 = ЭтаФорма;
	ПараметрыУстановки.ЭтоПоступление        = Истина;
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(ПараметрыУстановки);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма, "СерииВсегдаВТЧТовары");

	//

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Приоритеты.Ссылка КАК Приоритет,
	|	Приоритеты.Цвет   КАК Цвет
	|ИЗ
	|	Справочник.Приоритеты КАК Приоритеты");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Элемент = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Приоритет.Имя);

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Приоритет");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Выборка.Приоритет;

			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Выборка.Цвет.Получить());
			
		КонецЦикла;
		
	КонецЕсли;

	//

	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
	//
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Товары,
		Элементы.ТоварыОтменено.Имя,
		Элементы.ТоварыПричинаОтмены.Имя,
		Элементы.ТоварыЦена.Имя,
		Элементы.ТоварыСумма.Имя);
		
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
			
КонецПроцедуры

#Область Обеспечение

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован, Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Товары.ТекущаяСтрока,
		Объект,
		Объект.Товары,
		ПутиКДанным,
		ПараметрыЗаполнения);

	// В строках ТЧ нет поля Назначения, поэтому оно копируется из шапки документа.
	// Необходимо очистить поле Назначение для тех строк, где выбран не обособленный вариант обеспечения.
	Для Каждого Строка Из Результат.ТаблицаНевыделенныеСтроки Цикл
		Если Не (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда
			Строка.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.Поля.Удалить("Подразделение");
		
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
			Объект, Объект.Товары, Элементы.Товары.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Товары", НСтр("ru = 'Товары'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Объект.Склад);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	ПараметрыФормы.Вставить("ВыборТолькоСерии",                  Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);

	// Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Товары, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован, "ЗаказыКлиентов");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса",
		Объект.Товары.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Товары.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий, ЗависимыеРеквизиты());

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	

	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "Товары", НСтр("ru = 'Товары'")));
	КонецЕсли;
	
	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий, ЗависимыеРеквизиты());
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	Если ВыбранноеЗначение.ОтгружатьЧастями Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий, ЗависимыеРеквизиты());

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат ТекстОповещения;

КонецФункции

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ЕстьТоварыКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
	
	Если ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать.
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен Тогда
		ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыОтгрузки

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()

	Элементы.ТоварыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	Элементы.ЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок)

	ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", ДатаОтгрузки, МассивВыделенныхСтрок);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОтгрузкиВТабЧасти()
	
	Если Объект.НеОтгружатьЧастями Тогда
		МаксимальнаяДата = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Товары, "ДатаОтгрузки", '00010101');
		Объект.ДатаОтгрузки = ?(ЗначениеЗаполнено(МаксимальнаяДата), МаксимальнаяДата, Объект.ДатаОтгрузки);
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииСервер()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Товары, "ДатаОтгрузки", '00010101');
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Товары, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();

КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ПриИзмененииСкладаСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	//ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер"); //ТТ Чтобы не сбивать способ доставки
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	ПродажиСервер.ПартнерПриИзменении(Объект);
	
	РассылкиИОповещенияКлиентам.УстановитьВидимостьПодпискиНаОповещенияВОбъекте(
		Элементы.ГруппаПодпискаНаОповещения,
		Объект.Партнер,
		ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));
		
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	//Если Объект.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда   //++Аян_К++ 070422 старт
		Альфа_КТ.УстановитьДоговорКонтрагента(Объект);
	//КонецЕсли;                    //++Аян_К++ 070422 финиш
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;

	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоСоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ПриИзмененииСкладаСервер();
	
	НекорректнаяДатаОплаты = Объект.ЭтапыГрафикаОплаты.Количество() = 0 ИЛИ Объект.ЭтапыГрафикаОплаты.Получить(0).ДатаПлатежа < Объект.Дата;
	
	ЗаполнитьЭтапыОплатыСервер(
		ИспользоватьСоглашенияСКлиентами И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
		ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И (ГрафикОплаты <> Объект.ГрафикОплаты ИЛИ НекорректнаяДатаОплаты));
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, , Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	УстановитьВидимостьОпераций();
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	ЗаполнитьГруппуФинУчета();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ОбновитьФорму = Ложь;
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
	Если ОбновитьФорму Тогда
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	КонецЕсли;
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Объект.Соглашение, Объект.Статус);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(Объект, СуммаЗаказано, СуммаЗалогаЗаТару);
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
	ЗаполнитьПорядокОплатыПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Договор, Объект.НаправлениеДеятельности, Объект.Дата);
		НалогообложениеНДСПриИзмененииСервер();
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, , Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Договор, Объект.НаправлениеДеятельности, Объект.Дата);
	НалогообложениеНДСПриИзмененииСервер();
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Объект.Соглашение, Объект.Статус);
	Если Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		
		СтруктураДействий = Новый Структура();
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде=Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
		
		Если Объект.ТребуетсяЗалогЗаТару Тогда
			Объект.ТребуетсяЗалогЗаТару = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(Истина);
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;

	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.НалогообложениеНДС(Объект.Организация, Объект.Склад, Объект.Договор, Объект.НаправлениеДеятельности, Объект.Дата);
	НалогообложениеНДСПриИзмененииСервер();
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены, СрокПоставки");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;

	Объект.СкидкиРассчитаны = Истина;
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("ТолькоДляАктивныхСтрок", Ложь);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		Отказ = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		///Сергей 06.11.2020
		//Если Объект.Товары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
		//	СкидкиИзменились = Истина;
		//КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	//ТТ+
	ПользТек = ПользователиКлиентСервер.ТекущийПользователь();
	РольПров = Строка("Доступ к произвольной цене (Роль)");
	ПроизвольныйДоступен = Ложь;
	Если bon_БонуснаяПрограммаСервер.ПроверкаДоступа(ПользТек, РольПров) Тогда
		ПроизвольныйДоступен = Истина;
	КонецЕсли;
	//ТТ-
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, Склад, ДатаОтгрузки, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки, ВариантОбеспечения, Серия");
		
		///Сергей 28.05.2021 +++
		Если Объект.Дата >= ДатаКонтроля() или Объект.Дата = '00010101' Тогда
			ПроверитьНаКонтрольРучнойСкидкиСерв(ТекущаяСтрока); 
		КонецЕсли;
		///Сергей 28.05.2021 ---
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) и Не ПроизвольныйДоступен Тогда
			ТекущаяСтрока.ВидЦены = Константы.НормативныйВидЦен.Получить(); //ТТ. Убираем произвольный вид цен
		КонецЕсли;
		
		УстановитьКодСтрокиСерв(Объект, "Товары");  ///19.08.2020 Сергей +++
		
		///Сергей 16.11.2020 +++ Устанавливаем статус отгрузить на Услугу
		Если ТекущаяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;		
		КонецЕсли;
		///Сергей 16.11.2020 --- Устанавливаем статус отгрузить на Услугу
		
		
		// sw begin
		// Швецов Тимур, 11.10.2018
		swОбработкаТабличнойЧастиСервер.ПодровнятьКоличествоВСтроке(ТекущаяСтрока);
		// sw end
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
		
			ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
			
			Если ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
				
				СтруктураДействий.Вставить("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки",
					ОбеспечениеКлиентСервер.СтруктураЗаполненияВариантаОбеспечения(Объект, СтрокаТовара.ДатаОтгрузки));
				
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
				
		КонецЕсли;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

		ПроверкаНаСпецЦенуСервер(ТекущаяСтрока);  ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен" 
		
	КонецЦикла;
		
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	///Сергей 28.08.2020 +++ Расчет бонусов
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
	КонецЕсли;
	///Сергей 28.08.2020 --- Расчет бонусов

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Склад"" не заполнено'"), Объект.Ссылка, "Объект.Склад",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.РассчитыватьНаборы                     = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	КэшированныеЗначения.ОбработанныеСтроки.Очистить();
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;

	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
		
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры",НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("Строки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ПустойБуферОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Соглашение" Тогда
		СоглашениеПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ХозяйственнаяОперация" Тогда
		ХозяйственнаяОперацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТребуетсяЗалогЗаТару" Тогда
		ТребуетсяЗалогЗаТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыНоменклатура" Тогда
		ТоварыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыХарактеристика" Тогда
		ТоварыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыКоличествоУпаковок" Тогда
		ТоварыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыУпаковка" Тогда
		ТоварыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыВидЦены" Тогда
		ТоварыВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыЦена" Тогда
		ТоварыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСтавкаНДС" Тогда
		ТоварыСтавкаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыПроцентРучнойСкидки" Тогда
		ТоварыПроцентРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаРучнойСкидки" Тогда
		ТоварыСуммаРучнойСкидкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСумма" Тогда
		ТоварыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСуммаНДС" Тогда
		ТоварыСуммаНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСерия" Тогда
		ТоварыСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыСклад" Тогда
		ТоварыСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыОтмененоПричиныОтменыНеИспользуются" Тогда
		ТоварыОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ТоварыОтменено" Тогда
		ТоварыОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЖелаемаяДатаОтгрузки" Тогда
		ЖелаемаяДатаОтгрузкиПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "ОткрытьПодбор" Тогда
		ОткрытьПодбор(Команда);
	ИначеЕсли Команда.Имя = "ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "ПоискПоШтрихкоду" Тогда
		ПоискПоШтрихкодуВыполнить(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьДанныеИзТСД" Тогда
		ЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьСкладВВыделенныхСтроках" Тогда
		ЗаполнитьСкладВВыделенныхСтроках(Команда);
	ИначеЕсли Команда.Имя = "ЗагрузитьИзВнешнегоФайла" Тогда
		ЗагрузитьИзВнешнегоФайла(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныПоСоглашению" Тогда
		АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда);
	ИначеЕсли Команда.Имя = "ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен" Тогда
		ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда);
	ИначеЕсли Команда.Имя = "СчитатьКартуЛояльности" Тогда
		СчитатьКартуЛояльности(Команда);
	ИначеЕсли Команда.Имя = "РассчитатьСкидкиНаценки" Тогда
		РассчитатьСкидкиНаценки(Команда);
	ИначеЕсли Команда.Имя = "ОтменитьРучныеСкидки" Тогда
		ОтменитьРучныеСкидки(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидку" Тогда
		НазначитьРучнуюСкидку(Команда);
	ИначеЕсли Команда.Имя = "НазначитьРучнуюСкидкуВыделенныхСтрок" Тогда
		НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда);
	ИначеЕсли Команда.Имя = "НазначитьАвтоматическиеСкидки" Тогда
		НазначитьАвтоматическиеСкидки(Команда);
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		СоставНабора(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередУдалением(Элемент, Отказ);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.Имя = "Товары" Тогда
		ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	Если Не Объект.ВернутьМногооборотнуюТару Тогда
		Объект.ТребуетсяЗалогЗаТару = Ложь;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
											
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВариантОформленияПродажи",
											Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары,ПараметрыЗаполненияРеквизитов);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЖелаемаяДатаОтгрузки()

	МаксДатаАванса = ПродажиСервер.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
	ЖелаемаяДатаОтгрузкиСписокВыбора = Элементы.ЖелаемаяДатаОтгрузки.СписокВыбора;
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = "%МаксДатаАванса%";
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		ЖелаемаяДатаОтгрузкиСписокВыбора.Очистить();
		ЖелаемаяДатаОтгрузкиСписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
	КонецЕсли;

КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	Элементы.Статус.Видимость = ИспользоватьСтатусы;
	Элементы.ЗакрытьЗаказ.Видимость = ИспользоватьСтатусы;
	
	ВалютаДокумента = Объект.Валюта;
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь , Ложь);
	
	УстановитьПараметрыВыбораТоварыСклад();
	
	ИспользоватьСоглашенияСКлиентами                  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьОтгрузкуБезПереходаПраваСобственности = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
	ИспользоватьУпрощеннуюСхемуОплаты                 = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	ИспользоватьГрафикиОплаты                         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьНесколькоОрганизаций                  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНаправленияДеятельности               = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения	= ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента						= ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;

	УстановитьВидимостьОпераций();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	ОбновитьСостояниеСервер();
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	Элементы.ТоварыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	ЗаполнитьСписокВыбораЖелаемаяДатаОтгрузки();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	Элементы.Организация.Видимость = ИспользоватьНесколькоОрганизаций;

	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	УстановитьВидимостьОбеспечения();
	Элементы.ТоварыЗаполнитьОбеспечение.Доступность = Не ТолькоПросмотр;

	РассылкиИОповещенияКлиентам.УстановитьВидимостьПодпискиНаОповещенияВОбъекте(
		Элементы.ГруппаПодпискаНаОповещения,
		Объект.Партнер,
		ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));
		
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСостояниеЭДО", "Видимость", ИспользоватьСтатусы, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Объект.Соглашение, Объект.Статус);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Товары");
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;

	Форма.СуммаЗаказаноСЗалоговойТарой = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено"),
		КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары"));
	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаЗалогаЗаТару = ?(Форма.Объект.ТребуетсяЗалогЗаТару,(КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено"))
			- (КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары")),0);
	Форма.СуммаНДСЗаказано  = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено"),
		КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары"));
	Форма.СуммаАвтоСкидки   = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидки") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтменено"),
		КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары"));
	Форма.СуммаРучнойСкидки = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено"),
		КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары"));
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("СуммаСНДСОтменено"),
		КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары"));
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = ?(Форма.Объект.ТребуетсяЗалогЗаТару,
		КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено"),
		КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары"));
	
	Если СуммаЗаказано > 0 
		И (СуммаЗаказано + Форма.СуммаСкидки) <> 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки"));
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки"));
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа
				+ ?(Форма.Объект.ТребуетсяЗалогЗаТару, ТекСтрока.СуммаЗалогаЗаТару, 0);
		КонецЕсли;
	КонецЦикла;
	
	СуммаВсегоПоЭтапам = Форма.СуммаАвансаДоОбеспечения + Форма.СуммаПредоплатыДоОтгрузки + Форма.СуммаКредитаПослеОтгрузки;
	Если СуммаВсегоПоЭтапам <> 0 Тогда
		Форма.ПроцентАвансаДоОбеспечения  = (Форма.СуммаАвансаДоОбеспечения/СуммаВсегоПоЭтапам)*100;
		Форма.ПроцентПредоплатыДоОтгрузки = (Форма.СуммаПредоплатыДоОтгрузки/СуммаВсегоПоЭтапам)*100;;
		Форма.ПроцентКредитаПослеОтгрузки = (Форма.СуммаКредитаПослеОтгрузки/СуммаВсегоПоЭтапам)*100;
	КонецЕсли;
	
	// Выбор странцицы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
	Иначе
		
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	//Начало: МК Баубериков А - 18.08.2020
	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	СтруктураДействий.Вставить("ПересчитатьВесОбъем");      
	//Конец: МК Баубериков А - 18.08.2020	
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиНаСервере()

	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
		И ИспользоватьНаправленияДеятельности	Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта);
	КонецЕсли;													
															
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ЗаполнитьГруппуФинУчета();
		ОбновитьФорму = Ложь;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, Ложь, , ОбновитьФорму);
		Если ОбновитьФорму Тогда
			УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		КонецЕсли;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
		ЗаполнитьПорядокОплатыПоУмолчанию();
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован И ИспользоватьСтатусы Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли (Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован И Не ИспользоватьСтатусы) 
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке 
		ИЛИ Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
		
			УстановитьПодписку = Объект.Согласован;
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ДатаСогласования");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыВидЦены");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСумма");
	МассивЭлементов.Добавить("ТоварыСуммаНДС");
	МассивЭлементов.Добавить("ТоварыСодержание");
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением;ТоварыДатаОтгрузки");
	
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	МассивЭлементов.Добавить("ТоварыСоставНабора");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("СчитатьКартуЛояльностиКлиент");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("ДекорацияОтступТребуетсяЗалогЗаТару");
	МассивЭлементов.Добавить("ДекорацияЗаголовокОплата");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("Расчеты");
	МассивЭлементов.Добавить("ЗачетОплатыФорма");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	Элементы.Расчеты.Видимость = Не ЭтоПередачаНаКомиссию;
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	УчетНДСУТ.ЗаполнитьСписокВыбораНалогообложенияПродажи(
		Элементы.НалогообложениеНДС, 
		Объект.ХозяйственнаяОперация,
		Объект.НалогообложениеНДС,
		Ложь);
	
	УстановитьВидимостьПоляПартнер();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Функция ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	СтруктураКорректировки = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировки.ДокументОбъект               = Объект;
	СтруктураКорректировки.ПричинаОтмены                = ПричинаОтмены;
	СтруктураКорректировки.ПроверятьОстатки             = ПроверятьОстатки;
	СтруктураКорректировки.ОтменитьНеотработанныеСтроки = Истина;
	
	СтруктураРезультата = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировки);
	КоличествоОтмененныхСтрок = СтруктураРезультата.КоличествоСтрок;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказКлиента.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	Элементы.Состояние.Гиперссылка = ПравоДоступа("Просмотр", Метаданные.Отчеты.СостояниеВыполненияДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору'");
	Иначе
		Расчеты = НСтр("ru='Оплачено по заказу'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
	Элементы.Расчеты.Видимость = Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И ИспользоватьСтатусы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		
		ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
		ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
		ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
		
		ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
			ЭтаФорма,
			ЗначенияРеквизитов,
			ВыбранноеЗначение,
			"ОбработкаВыбораПодборНаКлиентеПослеВопроса",
			Объект.Товары.Количество() > 0);
		
	Иначе
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ПроверитьУценкуДоступ() Тогда
		РасчитатьУченку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиентеПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ДополнительныеПараметры);
	
	Если ПроверитьУценкуДоступ() Тогда
		РасчитатьУченку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(Знач Оповещение, КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("СчитанаКартаЛояльностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в документ контрагента ""%1"" и соглашение ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в документ контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в документ соглашение ""%2""?'");
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("Оповещение", Оповещение);
				ДополнительныеПараметры.Вставить("КартаЛояльности", КартаЛояльности);
				ДополнительныеПараметры.Вставить("ДанныеКартыЛояльности", ДанныеКартыЛояльности);
				ПоказатьВопрос(
					Новый ОписаниеОповещения("СчитанаКартаЛояльностиВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение),
					РежимДиалогаВопрос.ДаНет);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = ДополнительныеПараметры.КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДополнительныеПараметры.ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",             ТолькоПросмотр);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",     СуммаЗаказано);
	ПараметрыФормы.Вставить("СуммаЗалогаПоДокументу",     СуммаЗалогаЗаТару);
	ПараметрыФормы.Вставить("СуммаОтклоненияПоДокументу", Объект.ЭтапыГрафикаОплаты.Итог("СуммаОтклоненияМерныхТоваров"));
	ПараметрыФормы.Вставить("СуммаДопустимогоОтклоненияПоДокументу",
		ПолучитьСуммуДопустимогоОтклоненияПредоплатыПоДокументу());
	ПараметрыФормы.Вставить("ТребуетсяЗалогЗаТару",       Объект.ВернутьМногооборотнуюТару И Объект.ТребуетсяЗалогЗаТару);
	ПараметрыФормы.Вставить("ГрафикОплаты",               Объект.ГрафикОплаты);
	Если ПроверитьПравоНаЧтениеСоглашения() Тогда
		ПараметрыФормы.Вставить("Соглашение",             Объект.Соглашение);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",       Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Дата",                       Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                     Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",     Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",    УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",  ПоместитьВоВременноеХранилищеНаСервере("ЭтапыГрафикаОплаты"));
	ПараметрыФормы.Вставить("ФормаОплаты",                Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                      Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",             Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Организация",                Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов",  ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("ИдентификаторПлатежа",       Объект.ИдентификаторПлатежа);
	ПараметрыФормы.Вставить("ПорядокРасчетов",            Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",   ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("ЭтоЗаказ",                   Истина);
	ПараметрыФормы.Вставить("Ключ",                       Объект.Ссылка);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",    Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("ГрафикИсполненияВДоговоре",  ГрафикИсполненияВДоговоре);
	ПараметрыФормы.Вставить("ПорядокОплаты",              Объект.ПорядокОплаты);
	ПараметрыФормы.Вставить("ВалютаВзаиморасчетов",       Объект.Валюта);

	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Если Объект.ФормаОплаты <> ПараметрыОплаты.ФормаОплаты Тогда
			Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		
		ОтразитьИзмененияЭтаповОплаты(ПараметрыОплаты);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере(ИмяТЧ,Идентификатор = "")
	
	Возврат ПоместитьВоВременноеХранилище(Объект[ИМЯТЧ].Выгрузить(),Идентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗаполнитьСписокВыбораЖелаемаяДатаОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен)
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
		Объект,
		ГрафикСоглашенияЗаполнен,
		ГрафикЗаполнен,
		СуммаЗаказано,
		СуммаЗалогаЗаТару);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравоНаЧтениеСоглашения()
	
	Возврат ПравоДоступа("Просмотр",Метаданные.Документы.ЗаказКлиента.Реквизиты.Соглашение);
	
КонецФункции

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
		
		ЗаполнитьЭтапыОплатыСервер(
			ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение),
			ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты);
		
	КонецЕсли;
	
	УстановитьВидимостьОпераций();
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов()
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Истина);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Истина);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("ТребуетсяЗалогЗаТару");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Форма.Элементы,
		МассивЭлементов,
		"Доступность",
		Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	// sw begin
	// Швецов Тимур, 05.02.2019
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействийИзмененныеСтроки.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	// sw end
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействийИзмененныеСтроки.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействийИзмененныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийДобавленныеСтроки.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействийДобавленныеСтроки.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,Склад,ДатаОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки,
		КэшированныеЗначения);
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДубликатыЗависимыхРеквизитов()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Элементы.ТоварыСостояниеОбеспечения.Видимость = ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспечения);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров,,"КодСтроки");
		Если Объект.НеОтгружатьЧастями Тогда
			СтрокаТЧТовары.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		///Сергей 28.05.2021 +++
		Если Объект.Дата >= ДатаКонтроля() или Объект.Дата = '00010101' Тогда
			ПроверитьНаКонтрольРучнойСкидкиСерв(СтрокаТЧТовары); 
		КонецЕсли;
		///Сергей 28.05.2021 ---
		
		ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
		УстановитьКодСтрокиСерв(Объект, "Товары");  ///24.08.2020 Сергей +++
		
		///Сергей 16.11.2020 +++ Устанавливаем статус отгрузить на Услугу
		Если СтрокаТоваров.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			СтрокаТоваров.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;		
		КонецЕсли;
		///Сергей 16.11.2020 --- Устанавливаем статус отгрузить на Услугу

		ПроверкаНаСпецЦенуСервер(СтрокаТЧТовары);  ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен" 		
	КонецЦикла;
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПриИзмененииДатыОтгрузкиВТабЧасти();
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	///Сергей 28.08.2020 +++ Расчет бонусов
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
	КонецЕсли;
	///Сергей 28.08.2020 --- Расчет бонусов

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ПроверитьЗаполнениеРеквизитов("Партнер") Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	Если ПроверитьЗаполнениеРеквизитов("Договор") Тогда 
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРеквизитов(ИмяРеквизита)
	
	Если Объект[ИмяРеквизита].Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
     	Сообщение.Поле = "Объект." + ИмяРеквизита;
     	Сообщение.Текст = "Поле """ + ИмяРеквизита + """ не заполнено";
     	Сообщение.Сообщить();
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодпискуНаОповещения(Команда)
	
	РассылкиИОповещенияКлиентамКлиент.НастроитьПодпискуНаОповещенияИзОбъекта(
		Объект.Партнер,
		ПредопределенноеЗначение("Перечисление.ТипыСобытийОповещений.ИзменениеСостоянияЗаказа"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ИспользоватьСоглашенияСКлиентами Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = ИспользоватьОтгрузкуБезПереходаПраваСобственности;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ВозможнаРеализацияБезПереходаПраваСобственности = Ложь;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ВозможнаРеализацияБезПереходаПраваСобственности = 
			ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Объект.Соглашение, "ВозможнаРеализацияБезПереходаПраваСобственности");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если Элементы.Найти("ХозяйственнаяОперация") <> Неопределено  Тогда
	
		Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
			
			ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;			
			
		КонецЕсли;          
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(
			Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);

		Если Не ВозможнаРеализацияБезПереходаПраваСобственности Тогда
			
			Если ЭлементСписка <> Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;	
								
		Иначе	
			
			Если ЭлементСписка = Неопределено Тогда
				Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(
					Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности);
			КонецЕсли;
			
		КонецЕсли;	
			
		Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад()
	
	Элементы.ТоварыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ТоварыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуФинУчета()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокОплатыПоУмолчанию()
	
	ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Объект.ФормаОплаты, Объект.БанковскийСчет, Объект.Касса);
	
	Объект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаДокумента,
																									Объект.НалогообложениеНДС,
																									ВалютаОплаты);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	ЗаполнитьЗначенияСвойств(СтруктураКорректировкиСтрокЗаказа, СтруктураДополнительныхПараметров);
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	
	СтруктураКорректировкиСтрокЗаказа.ДокументОбъект   = ДокументПродажи;
	СтруктураКорректировкиСтрокЗаказа.ПроверятьОстатки = 
		Не (ДокументПродажи.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
	СтруктураРезультата = ПродажиСервер.СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
	Если СтруктураРезультата.КоличествоСтрок <> 0 ИЛИ СтруктураРезультата.СуммаКорректировки > 0 Тогда
		
		СуммаЗаказано       = ДокументПродажи.ПолучитьСуммуЗаказанныхСтрок();
		СуммаЗалогаЗаТару   = ДокументПродажи.ПолучитьСуммуЗаказанныхСтрок(Истина);
		СуммаЗаказаноКРаспределению = СуммаЗаказано - СуммаЗалогаЗаТару;
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(
			ДокументПродажи,
			Ложь,
			Ложь,
			СуммаЗаказаноКРаспределению,
			СуммаЗалогаЗаТару,,,Истина);
		
		ЭтапыОплатыСервер.РаспределитьСуммуОтклоненияПоЭтапамГрафикаОплаты(
							ДокументПродажи.ЭтапыГрафикаОплаты,
							СтруктураРезультата.СуммаКорректировки);
		
	КонецЕсли;
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ДокументПродажи.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ПараметрыЗаполнения,
													ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьДубликатыЗависимыхРеквизитов();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодарок(ВыбранноеЗначение);
	Подарок = Объект.Товары.Добавить();
	Подарок.Номенклатура = ВыбранноеЗначение;
	Подарок.КоличествоУпаковок = 1;
	Подарок.Количество = 1;
	Подарок.ВидЦены = ПолучитьПроизвольнуюЦену();
	Подарок.Цена = 10;
	Подарок.Подарок = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Подарок, СтруктураДействий, КэшированныеЗначения);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ЭтаФорма.ОбновитьОтображениеДанных(Элементы.Товары);
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаСервере
Функция ДополнитьДоПолногоНабора()
	
	ТабличнаяЧасть = Объект.Товары;
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(ТабличнаяЧасть, МассивСтрок);
	
	Результат = Новый Массив;
	Для Каждого СтрокаТЧ Из МассивСтрок Цикл
		Результат.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентРучнойСкидки");
			Колонки.Добавить("СуммаРучнойСкидки");
		КонецЕсли;
		Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
			Колонки.Добавить("ПроцентАвтоматическойСкидки");
			Колонки.Добавить("СуммаАвтоматическойСкидки");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		Колонки.Добавить("ПричинаОтмены");
	КонецЕсли;
	
	Колонки.Добавить("Отменено");
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	// Склад будет вставлен позже
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("ПараметрыУказанияСерий", ПараметрыУказанияСерий));
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПоместитьОбработанныеСтрокиВКэшированныеЗначения");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	ОбеспечениеСервер.РассчитатьДатуОтгрузкиВСтрокахТабличнойЧасти(КэшированныеЗначения.ОбработанныеСтроки, Объект, Объект.Товары);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьПоляПартнер()
	
	ВидимостьКЛ = Элементы.СчитатьКартуЛояльностиКлиент.Видимость;
	Если ВидимостьКЛ Тогда
		ВидимостьКЛ = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	КонецЕсли;
	
	Элементы.ПартнерБезКЛ.Видимость = НЕ ВидимостьКЛ;
	Элементы.Партнер.Видимость      = ВидимостьКЛ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммуДопустимогоОтклоненияПредоплатыПоДокументу()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС    КАК СуммаСНДС
	|ПОМЕСТИТЬ ВТТоварыЗаказа
	|ИЗ &ТоварыЗаказа КАК Товары
	|;
	|///////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(Товары.СуммаСНДС * &ДопустимоеОтклонениеМерныхТоваров/100 КАК ЧИСЛО(15,2))) КАК Сумма
	|ИЗ ВТТоварыЗаказа КАК Товары
	|ГДЕ Товары.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)";
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	Запрос.УстановитьПараметр("ТоварыЗаказа",Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Контрагент, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияЭтаповОплаты(ПараметрыОплаты)
	
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Объект.Согласован           = Ложь;
	Объект.Касса                = ПараметрыОплаты.Касса;
	Объект.БанковскийСчет       = ПараметрыОплаты.БанковскийСчет;
	Объект.ГрафикОплаты         = ПараметрыОплаты.ГрафикОплаты;
	Объект.ЖелаемаяДатаОтгрузки = ПараметрыОплаты.ЖелаемаяДатаОтгрузки;
	Объект.ПорядокОплаты        = ПараметрыОплаты.ПорядокОплаты;
	
	Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
		Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
		ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
	КонецЕсли;
	
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#Область ПодсистемаЭлектронныедокументы

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЦСВладимир

&НаСервере
Функция ВернутьКонстанту()
 Возврат Справочники.ВидыЦен.ПустаяСсылка();
КонецФункции

#КонецОбласти

#Область Infor
&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядкеНовый(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	ПутиКДанным = Новый Соответствие; //Описание особенностей формы
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки"); // дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	ПараметрыДокумента.Вставить("ГруппаСкладов", Объект.Склад);
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыКлиентов);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Товары.ВыделенныеСтроки,
		Объект,
		Объект.Товары,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	

	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(Таблица, "Товары", НСтр("ru = 'Товары'")));
		Возврат Ложь;
	КонецЕсли;
	
	//ТТ+
	ОшибкиСписок = Ложь;
	//ТТ-
	Для Каждого СтрЗаказа Из Таблица Цикл
		Если СтрЗаказа.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.СоСклада
			и СтрЗаказа.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			Идентификатор = СтрЗаказа.Идентификатор;
			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
			ОшибкиСписок = Истина; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("По товару " + СтрокаТовары.Номенклатура + " на складе " + СтрЗаказа.Склад + " превышение свободного остатка на " + СтрЗаказа.Количество + " " + СтрокаТовары.Упаковка);
		КонецЕсли;				
	КонецЦикла;
	
	Если ОшибкиСписок Тогда
		Возврат Ложь;
	КонецЕсли;
		
	
	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказКлиента.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий, ЗависимыеРеквизиты());
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОповещения);	
		
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат Истина;	
КонецФункции

&НаСервере
Функция ЭтоУслуга(Номенклатура)
	Возврат Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;	
КонецФункции

&НаКлиенте
Процедура Infor_ВыгрузитьВВМС_Резервирование(Команда)
	//ТТ
	//Если Модифицированность Тогда
	//	Сообщить("Документ был изменен. Перед выгрузкой необходимо записать документ!");
	//	Возврат;
	//КонецЕсли;
	
	//ТТ
	Если ПроверитьГрафикРаботы(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	swПроверитьЗадолженностьКонтрагента(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПереченьВариантов = Новый Массив();
	ПереченьВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	ПереченьВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
	ПереченьВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));

	ВыбранноеЗначение = Новый Структура("ПереченьВариантов, ЗаполнятьЦелымиУпаковками");
	ВыбранноеЗначение.ПереченьВариантов = ПереченьВариантов;
	ВыбранноеЗначение.ЗаполнятьЦелымиУпаковками = Ложь;
	
	Элементы.Товары.ВыделенныеСтроки.Очистить();
	Для Каждого Строка Из Объект.Товары Цикл
		Если Не ЭтоУслуга(Строка.Номенклатура) Тогда
			Элементы.Товары.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьСообщения();
	Детали = ЗаполнитьОбеспечениеВУстановленномПорядкеНовый(ВыбранноеЗначение);
	Если Детали Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказ зарезервирован.");
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Записать();					
		Infor_Интеграция.ОбработкаКоманды(Объект.Ссылка);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заказ не зарезервирован.");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Объект не выгружен.");
	КонецЕсли;			
КонецПроцедуры

#КонецОбласти

#Область Бонусы_Клиентов

&НаКлиенте
Процедура ДобавитьБонусныйСчет(Команда)
	
	ОчиститьБонусныйСчетКомандаЮрлиц();
			
	НомерСчета = "";
	
	Если ВвестиСтроку(НомерСчета, "Введите Номер телефона (без 8 или +7):", 10) Тогда
		НомерСчета = СокрЛП(НомерСчета);
			
		///Проверка на заполнение номера
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Возврат;
		ИначеЕсли СтрДлина(НомерСчета) < 10 Тогда
			Предупреждение("Некорректный номер!");
			Возврат
		КонецЕсли;
		
		///Проверка чтобы были только "Цифры"
		Цифры = "0123456789";
		СтрКоличество = СтрДлина(НомерСчета);
		Для Счетчик = 1 По СтрКоличество Цикл
			Если Найти(Цифры,Сред(НомерСчета,Счетчик,1)) = 0 Тогда
				Предупреждение("Некорректный номер!");
				Возврат;
			КонецЕсли;
		КонецЦикла;
		///Проверка на первую цыфору чтобы бала "7"
		Если Число(Сред(НомерСчета,1,1)) <> 7 Тогда
			Предупреждение("Некорректный номер!");
			Возврат;	
		КонецЕсли;
		
		Если ВРег(НомерСчета) <> НомерСчета Тогда
			Предупреждение("Некорректный номер!");
			Возврат;
		КонецЕсли;
		
		Резу = ПоискНоменальногоИДержателя(НомерСчета);
		
		ДержательСчет 			= Резу[1];
		НоминальныйОбъектСчета 	= Резу[0];
		ЗапретНаИспользование 	= Резу[2];
		Если Не ЗначениеЗаполнено(НоминальныйОбъектСчета) и Не ЗначениеЗаполнено(ДержательСчет) Тогда
			Предупреждение("Возможно бонусный счет по указанному номеру не зарегестрированн!");
			Возврат;			
		КонецЕсли;
		
		Если ЗапретНаИспользование = Истина Тогда 
			Предупреждение("Данный Номенальный Объект запрещен к использованию!");
			Возврат;	
		КонецЕсли;
		
		Объект.bon_БонусныйСчет = НоминальныйОбъектСчета;
		Объект.bon_Телефон		= НомерСчета;
		
	КонецЕсли;
	
		ПриДобавленииБонусногосчета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатокБонусов()
	
	ТабВрем = bon_БонуснаяПрограммаСервер.ПолучитьДоступныйНоминалОбъекта(Объект.bon_БонусныйСчет); 
	
	ТабВрем.Сортировать("ДнейДоСписания Возр, Партия убыв");
	Объект.Товары.Сортировать("Сумма убыв");
	ИтогоСум = Число(0);
	Для Каждого ТовСт Из Объект.Товары Цикл 
		
		Если ТовСт.Сумма - 1 = 0 Тогда
			Продолжить;
		КонецЕсли;
		//скидки на услуги не распространяются
		Если ТовСт.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
			Продолжить;				                                      
		КонецЕсли;
		
		МаксСуммБОн = ТовСт.Сумма - Число(1);
		Для Каждого ПолучДвиж Из ТабВрем Цикл 
			Если МаксСуммБОн > 0 и ПолучДвиж.Остаток > 0 Тогда
				Если ПолучДвиж.ХарактеристикиБонусов <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда
					Если ПоискОграничПоХар(ТовСт, ПолучДвиж) Тогда
						ИтогоСум = ИтогоСум + ДобСтмч_ТабПартий(ПолучДвиж, МаксСуммБОн, ТабВрем, ТовСт);
					КонецЕсли;								
				Иначе 
					ИтогоСум = ИтогоСум + ДобСтмч_ТабПартий(ПолучДвиж, МаксСуммБОн, ТабВрем, ТовСт);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;						
	КонецЦикла;
	ДоступныйНоминал = ИтогоСум;
	
	
КонецПроцедуры

&НаСервере
Функция  ДобСтмч_ТабПартий(ПолучДвиж, МаксСуммБОн, ТабВрем, ТовСт)
	
	СуммБон = Число(0);
	
	НовСт = Объект.bon_ТабПартий.Добавить();
	НовСт.НоминальныйОбъект 		= ПолучДвиж.НоминальныйОбъект;
	НовСт.Партия                    = ПолучДвиж.Партия;
	Если МаксСуммБОн > ПолучДвиж.Остаток Тогда
		НовСт.Остаток               = ПолучДвиж.Остаток;
		НовСт.СаммаДляМарк          = ПолучДвиж.Остаток;
	Иначе
		НовСт.Остаток               = МаксСуммБОн;
		НовСт.СаммаДляМарк          = МаксСуммБОн;
	КонецЕсли;
	НовСт.ХарактеристикиБонусов     = ПолучДвиж.ХарактеристикиБонусов;
	НовСт.Номенклатура              = ПолучДвиж.Номенклатура;
	НовСт.ВремяЖизниОстатков        = ПолучДвиж.ВремяЖизниОстатков;
	НовСт.ДнейДоСписания            = ПолучДвиж.ДнейДоСписания;
	НовСт.КлючПримВыдано            = ПолучДвиж.КлючПримВыдано;
	
	НовСт.КлючМожПрим            	= ТовСт.КлючСтроки;
	НовСт.НомМожПрим            	= ТовСт.Номенклатура;
	НовСт.СумТовДляМарк            	= ТовСт.Сумма;
	НовСт.КоличествоПрод            = ТовСт.Количество;

	
	МаксСуммБОн = МаксСуммБОн - НовСт.Остаток;
	СуммБон  		                = НовСт.Остаток;
	Для Каждого ПерСТ Из ТабВрем Цикл 
		Если НовСт.Партия =  ПерСТ.Партия и 
			НовСт.ХарактеристикиБонусов =  ПерСТ.ХарактеристикиБонусов и 
			НовСт.Номенклатура =  ПерСТ.Номенклатура и 
			НовСт.ВремяЖизниОстатков =  ПерСТ.ВремяЖизниОстатков и 
			НовСт.КлючПримВыдано =  ПерСТ.КлючПримВыдано Тогда
			ПерСТ.Остаток = ПерСТ.Остаток - НовСт.Остаток;
		КонецЕсли;	
	КонецЦикла;		
	Возврат СуммБон;
	
КонецФункции

&НаСервере
Функция ПоискОграничПоХар(ТовСт, ПолучДвиж)
	
	Рез = Ложь;
	Совпад = Число(0);
	
	ПоискОгран = Новый Запрос;
	ПоискОгран.Текст = 
	"ВЫБРАТЬ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Номенклотура,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоНоменклотуре,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоГруппе,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ПоЦенГруппе,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.НомГруппа,
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.ЦенГруппа
	|ИЗ
	|	РегистрСведений.bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре КАК bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре
	|ГДЕ
	|	bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Списывать = ИСТИНА
	|	И bon_Наст_Нач_и_Спис_Бонусов_ПоНоменклотуре.Характеристика = &Характеристика";
	ПоискОгран.УстановитьПараметр("Характеристика", ПолучДвиж.ХарактеристикиБонусов); 
	РезуПоиск = ПоискОгран.Выполнить().Выгрузить();
	Если РезуПоиск.Количество() > 0 Тогда
		Для Каждого Перебор Из РезуПоиск Цикл 
			Если Перебор.ПоНоменклотуре = Истина Тогда
				Если Перебор.Номенклотура = ТовСт.Номенклатура Тогда
					Совпад = Совпад + Число(1);	
				КонецЕсли;				
			ИначеЕсли Перебор.ПоГруппе = Истина и Перебор.ПоЦенГруппе = Ложь Тогда
				Если Перебор.НомГруппа = ТовСт.Номенклатура.НоменклатурнаяГруппа Тогда
					Совпад = Совпад + Число(1);	
				КонецЕсли;					
			ИначеЕсли Перебор.ПоГруппе = Ложь и Перебор.ПоЦенГруппе = Истина Тогда
				Если Перебор.ЦенГруппа = ТовСт.Номенклатура.ЦеноваяГруппа Тогда
					Совпад = Совпад + Число(1);	
				КонецЕсли;					
			ИначеЕсли Перебор.ПоГруппе = Ложь и Перебор.ПоЦенГруппе = Истина Тогда
				Если Перебор.НомГруппа = ТовСт.Номенклатура.НоменклатурнаяГруппа Тогда
					Если Перебор.ЦенГруппа = ТовСт.Номенклатура.ЦеноваяГруппа Тогда
						Совпад = Совпад + Число(1);
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;	
		КонецЦикла;
	ИначеЕсли РезуПоиск.Количество() = 0 Тогда
		Исключ = bon_БонуснаяПрограммаСервер.ПроверкаНаИсключениеСпис(ПолучДвиж.ХарактеристикиБонусов, ТовСт.Номенклатура);  
		Если Не Исключ тогда
			Рез = Истина;
		Иначе 
			Рез = Ложь;	
		КонецЕсли;
	КонецЕсли;		
	
	Если Совпад > Число(0) Тогда
		Исключ = bon_БонуснаяПрограммаСервер.ПроверкаНаИсключениеСпис(ПолучДвиж.ХарактеристикиБонусов, ТовСт.Номенклатура);  
		Если Не Исключ тогда
			Рез = Истина;
		Иначе 
			Рез = Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;	
	
КонецФункции
	
&НаСервере
Функция ПоискНоменальногоИДержателя(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	bon_ТелефоныНомОбъектов.Сотовый КАК Сотовый,
	               |	bon_ТелефоныНомОбъектов.bon_НоминальныеОбъекты КАК bon_НоминальныеОбъекты,
	               |	bon_ТелефоныНомОбъектов.Контрагенты КАК Контрагенты
	               |ИЗ
	               |	РегистрСведений.bon_ТелефоныНомОбъектов КАК bon_ТелефоныНомОбъектов
	               |ГДЕ
	               |	bon_ТелефоныНомОбъектов.Сотовый = &Сотовый";
	Запрос.УстановитьПараметр("Сотовый", НомерСчета);
	
	Резул = Запрос.Выполнить().Выгрузить();
	
	Массив = Новый Массив(3);
	Если Резул.Количество() > 0 Тогда
		Массив[0] = Резул[0].bon_НоминальныеОбъекты.Ссылка;
		Массив[1] = Резул[0].Контрагенты;
		Массив[2] = Резул[0].bon_НоминальныеОбъекты.ЗапретНаИспользование;
		Возврат Массив;
	Иначе 
		Массив[0] = Справочники.bon_НоминальныеОбъекты.ПустаяСсылка();
		Массив[1] = Справочники.Контрагенты.ПустаяСсылка();
		Массив[2] = Ложь;
		Возврат Массив;		
	КонецЕсли;   	
		
КонецФункции

&НаКлиенте
Процедура ПроверкаОстатка(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		Возврат;	
	КонецЕсли;
	
	Если Объект.Товары = 0 Тогда
		Сообщить("Таблица Товары пуста!!!");
		Возврат;
	КонецЕсли;
	
	Объект.bon_ТабПартий.Очистить();
	ДоступныйНоминал = ДоступнаяСуммаБонусов();
	Объект.bon_ТабПартий.Очистить();
	
	Предупреждение("Доступно бонусов: "+ДоступныйНоминал);
	
	//Форма = ПолучитьФорму("ОбщаяФорма.bon_ИнфоБонуснаяКарта");
	//форма.БонуснаяКарта = Объект.bon_БонусныйСчет;
	//Результат = Форма.ОткрытьМодально(); 
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияБонусногоСчета(Команда)
	
	Форма = ПолучитьФорму("Обработка.bon_РегистрацияБонусногоСчетаКлиента.Форма.ФормаРег");
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура bon_ОчиститьБонусныйСчет(Команда)
	
	//ОчиститьБонусныйСчетКоманда();
	ОчиститьБонусныйСчетКомандаЮрлиц();

КонецПроцедуры

&НаКлиенте
Процедура bon_СписатьБонусы(Команда)
	
	Если Строка(Объект.Ссылка) = "" Тогда
		Предупреждение("Запишите Документ!");	
		Возврат;	
	КонецЕсли;
	
	Если ПроверкаНаСозданиеРеалки() Тогда
		Предупреждение("На основание уже имеется Реализация, списать не ВОЗМОЖНО");	
		Возврат;
	КонецЕсли;
	
	РольПров = Строка("Bon: Списание бонусов (Роль)");
	Если Не ПроверкаДоступа(РольПров) Тогда
		Предупреждение("У Вас нет доступа на Списания Бонусов");
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() = 0 Тогда
		Предупреждение("В Заказе нету товаров!!!");
		Возврат
	КонецЕсли;	
	
	Если Объект.bon_БонусныйСчет.Пустая() Тогда
		Предупреждение("Не выбран бонусный счет");                
		Возврат
	КонецЕсли;
	
	Если Не ПроверкаНаРегистрацию(Объект.bon_БонусныйСчет) Тогда
		Предупреждение("Бонусный счет не зарегистрирован!!!");                
		Возврат
	КонецЕсли;
	
	Если не Объект.bon_РежимТолькоНакопления Тогда
		Предупреждение("SMS Авторизация не требуется. Только начисление!");
		Возврат
	КонецЕсли;
	
	Если пустаяСтрока(bon_КодПодтверждения) Тогда
		МобильныйНомер = Объект.bon_Телефон;
		Если не лев("+7"+МобильныйНомер, 3) = "+77" ТОгда
			Предупреждение("Внимание некорректный номер - " + МобильныйНомер);
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(КодПодтверждения) ТОгда
			КодПодтверждения = смсТрафик.ПолучитьКодПодтверждения();
		Иначе
			Если Вопрос("Код подтверждения уже сформирован. Повторить отправку?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет ТОгда
				ПроверитьКодПодтверждения();
				Возврат;
			КонецЕСли;
		КонецЕсли;	
		Если (ТекущаяДата() - ДатаСмсСообщения) >= 60 Тогда
			КодКарты = СтрЗАменить("+7"+МобильныйНомер,";","");
			КодКарты = СтрЗАменить(КодКарты,"?","");
			Дост=Число(3);
			МобильныйНомерСМС = "7"+МобильныйНомер;
			СтруктураОтвета = смсТрафик.ОтправитьСМССообщениеПоНомеру(МобильныйНомерСМС, "Код подверждения, для списания бонусов с карты № "+КодКарты+" : "+КодПодтверждения, Дост);
			Если не СтруктураОтвета.результат ТОгда
				Предупреждение(СтруктураОтвета.Описание);
				КодПодтверждения = "";
				Возврат;
			КонецЕсли;
			Предупреждение(СтруктураОтвета.Описание+Символы.ПС +"дождитесь SMS сообщения на мобильный номер "+МобильныйНомер+". и нажмите ОК");
			ДатаСмсСообщения = ТекущаяДата();
			ПроверитьКодПодтверждения();
		Иначе
			Предупреждение("Повторная отправка возможна через 60 сек");
		КонецЕсли;	
	Иначе		
		Если Вопрос("SMS Авторизация уже произведена! Пересчитать по новой?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.ДА ТОгда	
			ПриИзменениеРучСкидки();
			ПолучитьДанныеПобонусамОстатки();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверкаДоступа(РольПров)
	
	ПользТек = ПользователиКлиентСервер.ТекущийПользователь();
	Возврат bon_БонуснаяПрограммаСервер.ПроверкаДоступа(ПользТек, РольПров); 
	
КонецФункции

&НаКлиенте
Функция ПроверитьКодПодтверждения()
	
	ВремКодПодтвержения = "";
	ВвестиСтроку(ВремКодПодтвержения,"Введите код подтвеждения без пробелов",6);
	Если не ПустаяСтрока(ВремКодПодтвержения) ТОгда
		Если ВремКодПодтвержения = КодПодтверждения Тогда
			bon_КодПодтверждения = КодПодтверждения;
			ПолучитьДанныеПобонусамОстатки();
		Иначе
			Предупреждение("Некорректный код подверждения");
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеПобонусамОстатки()
		
	Если Объект.bon_РежимТолькоНакопления и пустаяСтрока(bon_КодПодтверждения) ТОгда
		Если пустаяСтрока(bon_КодПодтверждения) ТОгда
			Предупреждение("Использование накопленных бонусов возможно после SMS авторизации!");
		Иначе
			Предупреждение("Нельзя применять бонусы без наличия бонусной карты!");
		КонецЕсли;
		Объект.bon_БонусыИспользовали = Ложь;
		Возврат;
	КонецЕсли;
		
	Объект.bon_ПартииБонусовИст.Очистить();
	Объект.bon_ТабПартий.Очистить();
	
	///11.09.2020 +++
	///Очистить принятые бонусы\\\
	Для Каждого СтрТов Из Объект.Товары Цикл 
		СтрТов.bon_СуммаБонусовВыдано = 0;
		ОтнятьСумБон = СтрТов.bon_СуммаБонусовПринято;
		Если СтрТов.bon_СуммаБонусовПринято > 0 Тогда 
			СтрТов.bon_СуммаБонусовПринято = 0;
			СтрТов.СуммаРучнойСкидки =  СтрТов.СуммаРучнойСкидки - ОтнятьСумБон;
			РасчитатьСуммуРуснойСкидкиБонусовЮр(СтрТов.КлючСтроки, СтрТов.СуммаРучнойСкидки);
		КонецЕсли;
	КонецЦикла;
	///11.09.2020 ---

	ДоступныйНоминал = ДоступнаяСуммаБонусов();

	Если ДоступныйНоминал <= 0 Тогда	
		Предупреждение("Нет доступных Бонусов!");
		Объект.bon_БонусыИспользовали = Ложь;
		Возврат;	
	КонецЕсли;
	
	ПрименяемыйНоминал = Окр((Объект.Товары.Итог("Сумма") - Число(1)) * 0.1); //ПрименяемыйНоминал = ДоступныйНоминал;
	
	Если ВвестиЧисло(ПрименяемыйНоминал, "Укажите используемый размер бонуса") Тогда
		
		Если ПрименяемыйНоминал <= 0 ИЛИ ПрименяемыйНоминал > ДоступныйНоминал ИЛИ ПрименяемыйНоминал > Окр((Объект.Товары.Итог("Сумма") - Число(1)) * 0.1) Тогда
			Сообщить("Указан некорректный размер бонуса!", СтатусСообщения.Внимание);
			Объект.bon_БонусыИспользовали = Ложь; /// Сергей 16.10.2020 +++
			Возврат;	
		КонецЕсли;
		
		МаксимальноВозможныйРазмерБонуса = Макс(Объект.Товары.Итог("Сумма") - Объект.Товары.Количество(), 0);
		
		Если ПрименяемыйНоминал > МаксимальноВозможныйРазмерБонуса Тогда
			Сообщить("Максимально допустимый размер бонуса в данном чеке " + МаксимальноВозможныйРазмерБонуса + "!", СтатусСообщения.Внимание);
			Объект.bon_БонусыИспользовали = Ложь; /// Сергей 16.10.2020 +++
			Возврат;	
		КонецЕсли;
		
		СуппаПрим = ПрименяемыйНоминал;
		Объект.bon_БонусыИспользовали = Истина;
		
		Объект.bon_ТабПартий.Сортировать("СумТовДляМарк убыв, ДнейДоСписания Возр, Партия убыв");
		Для Каждого ПримБон Из Объект.bon_ТабПартий Цикл 
			СуммаЗап = Число(0);
			Если ПримБон.СаммаДляМарк > 0 Тогда 
				Если СуппаПрим > 0 Тогда
					Если Объект.bon_ПартииБонусовИст.Количество() = Число(0) Тогда 
						стрТЧ = Объект.bon_ПартииБонусовИст.Добавить();
						
						СуммаСп = Число(0);
						Если СуппаПрим > ПримБон.СаммаДляМарк Тогда
							стрТЧ.Сумма = ПримБон.СаммаДляМарк;	
						Иначе 
							стрТЧ.Сумма = СуппаПрим;
						КонецЕсли;
						СуммаЗап = стрТЧ.Сумма;
						
						стрТЧ.ДатаНачисления 			= ТекущаяДата(); 
						стрТЧ.ВидБонусов				= ПолучитьВладельца(ПримБон.НоминальныйОбъект);
						стрТЧ.НакопительнаяПрограмма 	= ПримБон.НоминальныйОбъект;
						стрТЧ.КлючСвязи 				= ПримБон.КлючМожПрим;
						стрТЧ.Номенклатура 				= ПримБон.НомМожПрим;
						стрТЧ.ХарактеристикиБонусов 	= ПримБон.ХарактеристикиБонусов;	
						стрТЧ.Партия 					= ПримБон.Партия;
						стрТЧ.НомПартии 				= ПримБон.Номенклатура;
						стрТЧ.КлючПримВыдано 			= ПримБон.КлючПримВыдано;
						стрТЧ.КоличествоПрод 			= ПримБон.КоличествоПрод;
						
						СуппаПрим = СуппаПрим-стрТЧ.Сумма; 
						ПримБон.СаммаДляМарк = ПримБон.СаммаДляМарк - стрТЧ.Сумма;
					Иначе
						ЕстСовп = Ложь;
						Для Каждого Пров Из Объект.bon_ПартииБонусовИст Цикл 
							Если Пров.ХарактеристикиБонусов = ПримБон.ХарактеристикиБонусов и
								Пров.КлючСвязи 				= ПримБон.КлючМожПрим и
								Пров.КлючПримВыдано 		= ПримБон.КлючПримВыдано и
								Пров.Номенклатура 			= ПримБон.НомМожПрим и 
								Пров.ВидБонусов				= ПолучитьВладельца(ПримБон.НоминальныйОбъект)и 
								Пров.Партия 				= ПримБон.Партия Тогда
								СуммаСп = Число(0);
								Если СуппаПрим > ПримБон.СаммаДляМарк Тогда
									Пров.Сумма = Пров.Сумма + ПримБон.СаммаДляМарк;	
									СуммаСп = ПримБон.СаммаДляМарк;
									СуммаЗап = ПримБон.СаммаДляМарк;
								Иначе 
									Пров.Сумма = Пров.Сумма + СуппаПрим;
									СуммаСп = СуппаПрим;
									СуммаЗап = СуппаПрим;
								КонецЕсли;
								СуппаПрим = СуппаПрим-ПримБон.СаммаДляМарк;
								ПримБон.СаммаДляМарк = ПримБон.СаммаДляМарк-СуммаСп;
								ЕстСовп = Истина;		
							КонецЕсли;						
						КонецЦикла;
						
						Если ЕстСовп = Ложь Тогда 
							стрТЧ = Объект.bon_ПартииБонусовИст.Добавить();
							
							стрТЧ.ДатаНачисления 			= ТекущаяДата(); 
							стрТЧ.ВидБонусов				= ПолучитьВладельца(ПримБон.НоминальныйОбъект);
							стрТЧ.НакопительнаяПрограмма 	= ПримБон.НоминальныйОбъект;
							
							
							стрТЧ.КлючСвязи 				= ПримБон.КлючМожПрим;
							стрТЧ.Номенклатура 				= ПримБон.НомМожПрим;
							стрТЧ.ХарактеристикиБонусов 	= ПримБон.ХарактеристикиБонусов;
							стрТЧ.Партия 					= ПримБон.Партия;
							стрТЧ.НомПартии 				= ПримБон.Номенклатура;
							стрТЧ.КлючПримВыдано 			= ПримБон.КлючПримВыдано;
							стрТЧ.КоличествоПрод 			= ПримБон.КоличествоПрод;
							
							Если СуппаПрим > ПримБон.СаммаДляМарк Тогда
								стрТЧ.Сумма = ПримБон.СаммаДляМарк;
							Иначе 
								стрТЧ.Сумма = СуппаПрим;	
							КонецЕсли;
							
							
							СуммаЗап = стрТЧ.Сумма;
							СуппаПрим = СуппаПрим-стрТЧ.Сумма;
							ПримБон.СаммаДляМарк = ПримБон.СаммаДляМарк - стрТЧ.Сумма;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;                                                         
			КонецЕсли;
		КонецЦикла;				
	КонецЕсли; 
	
	Если Объект.bon_ПартииБонусовИст.Количество() > 0 Тогда
		ТабПринВирт.Очистить();
		Для Каждого Стр из Объект.bon_ПартииБонусовИст Цикл 
			Если ТабПринВирт.Количество() = 0 Тогда
				НовСтр = ТабПринВирт.Добавить();
				НовСтр.Номенклатура			= Стр.Номенклатура;
				НовСтр.КлючСтроки           = Стр.КлючСвязи;
				НовСтр.СуммаБонусовПрим     = Стр.Сумма;
			Иначе 
				ЕстьСовпад = Ложь;
				Для Каждого СтрЗап Из ТабПринВирт Цикл 
					Если СтрЗап.Номенклатура = Стр.Номенклатура и СтрЗап.КлючСтроки = Стр.КлючСвязи тогда
						СтрЗап.СуммаБонусовПрим = СтрЗап.СуммаБонусовПрим + Стр.Сумма;
						ЕстьСовпад = Истина;
					КонецЕсли;					
				КонецЦикла;
				Если Не ЕстьСовпад тогда
					НовСтр = ТабПринВирт.Добавить();
					НовСтр.Номенклатура			= Стр.Номенклатура;
					НовСтр.КлючСтроки           = Стр.КлючСвязи;
					НовСтр.СуммаБонусовПрим     = Стр.Сумма;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из ТабПринВирт Цикл 
			Для Каждого СтрТов из Объект.Товары Цикл 
				Если Стр.КлючСтроки = СтрТов.КлючСтроки и Стр.Номенклатура = СтрТов.Номенклатура тогда
					СтрТов.СуммаРучнойСкидки =  СтрТов.СуммаРучнойСкидки + Стр.СуммаБонусовПрим;
					РасчитатьСуммуРуснойСкидкиБонусов(Стр.КлючСтроки, Стр.СуммаБонусовПрим);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступнаяСуммаБонусов() 
	
	ТабВрем = bon_БонуснаяПрограммаСервер.ПолучитьДоступныйНоминалОбъекта(Объект.bon_БонусныйСчет); 
	
	ТабВрем.Сортировать("ДнейДоСписания Возр, Партия убыв");
	Объект.Товары.Сортировать("Сумма убыв");
	ИтогоСум = Число(0);
	Для Каждого ТовСт Из Объект.Товары Цикл 
		
		Если ТовСт.Сумма - 1 = 0 Тогда
			Продолжить;
		КонецЕсли;
		//скидки на услуги не распространяются
		Если ТовСт.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар Тогда
			Продолжить;				                                      
		КонецЕсли;
		
		МаксСуммБОн = ТовСт.Сумма - Число(1);
		Для Каждого ПолучДвиж Из ТабВрем Цикл 
			Если МаксСуммБОн > 0 и ПолучДвиж.Остаток > 0 Тогда
				Если ПолучДвиж.ХарактеристикиБонусов <> Справочники.bon_ХарактеристикиБонусов.Стандартные Тогда
					Если ПоискОграничПоХар(ТовСт, ПолучДвиж) Тогда
						ИтогоСум = ИтогоСум + ДобСтмч_ТабПартий(ПолучДвиж, МаксСуммБОн, ТабВрем, ТовСт);
					КонецЕсли;								
				Иначе 
					ИтогоСум = ИтогоСум + ДобСтмч_ТабПартий(ПолучДвиж, МаксСуммБОн, ТабВрем, ТовСт);
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;						
	КонецЦикла;
	Возврат ИтогоСум;

	
КонецФункции

&НаСервере
Функция ПолучитьВладельца(Ном)
	
	Возврат Ном.Владелец;
	
КонецФункции

&НаКлиенте
Процедура РасчитатьСуммуРуснойСкидкиБонусов(КлючСтроки, СуммаБон)
	
	Для Каждого Стор Из Объект.Товары Цикл 
		Если Стор.КлючСтроки = КлючСтроки тогда 	
			
			Стор.bon_СуммаБонусовПринято = СуммаБон;
			ТекущаяСтрока = Стор;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			// sw begin
			// Швецов Тимур, 05.02.2019
			Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
				СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
			КонецЕсли;
			// sw end
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуРуснойСкидкиБонусовЮр(КлючСтроки, СуммаБон)
	
	Для Каждого Стор Из Объект.Товары Цикл 
		Если Стор.КлючСтроки = КлючСтроки тогда 	
			
			Стор.bon_СуммаБонусовПринято = 0;
			ТекущаяСтрока = Стор;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			// sw begin
			// Швецов Тимур, 05.02.2019
			Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
				СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
			КонецЕсли;
			// sw end
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКомментарий(Команда)
	
	Объект.Комментарий = Строка(Объект.СпособДоставки)+"; "+Объект.НомерТелефонаКлиентаДляДоставки + "; "+ Объект.НомерТелефонаКлиента
	+"; "+ Объект.АдресДоставки+"; "+ Объект.ДополнительнаяИнформацияПоДоставке + Объект.ОсобыеУсловияПеревозкиОписание;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаСозданиеРеалки()
	
	Рез = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеДокументы.Ссылка КАК Ссылка
	               |ИЗ
	               |	КритерийОтбора.СвязанныеДокументы(&Заказ) КАК СвязанныеДокументы
	               |ГДЕ
	               |	СвязанныеДокументы.Ссылка.Проведен = Истина";
	Запрос.УстановитьПараметр("Заказ",Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Рез = Истина;
			Возврат Рез;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ЖелаемаяДатаОтгрузкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		
		//ТТ
		Если НЕ ПроверитьДатуЗапрета() Тогда
			Объект.ЖелаемаяДатаОтгрузки = Дата(1,1,1);
			Сообщить("Выбранная дата запрещена для отгрузки. Выберите другую дату!");
			Возврат;
		КонецЕсли;
		
		//Вывод надписи о лимитах отгрузки
		ПолучитьЛимитыОтгрузок(Объект.ЖелаемаяДатаОтгрузки);
		
		Объект.НеОтгружатьЧастями = Истина;
		Объект.ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьДатуЗапрета()
	Возврат ЦС_ОбщийМодуль.ПроверитьДатуЗапрета(Объект.Склад,Объект.ЖелаемаяДатаОтгрузки);	
КонецФункции


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	//ТТ+ Првоерка на доступность редактирование товаров
	//Начало: МК Баубериков А - 03.12.2020
	Если Элементы.Товары.ТекущиеДанные<>Неопределено тогда
		Элементы.ГруппаОбеспечение.Доступность = НЕ ДоступНаУдалениеТоваров(Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	//конец: МК Баубериков А - 03.12.2020
	//ТТ-
КонецПроцедуры

&НаСервере
Процедура ОчиститьБонусыНеАкт()
	
	Объект.bon_БонусПартНачис.Очистить();
	
	Для Каждого СтрТов Из Объект.Товары Цикл 
		СтрТов.bon_СуммаБонусовВыдано = 0;		
	КонецЦикла;
	
	Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	ОчиститьБонусыНеАкт();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
	ПриИзменениеРучСкидки();///Сергей 03.09.2020 +++ Расчет бонусов
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаФизЛицо(Партнер)
	
	Если Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо тогда
		Возврат Истина;
	Иначе 
		Возврат	Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьБонусныйСчетКоманда()
	
	Объект.bon_БонусныйСчет = "";
	Объект.bon_Телефон		= "";
	Объект.bon_БонусПартНачис.Очистить();	
	Объект.bon_ПартииБонусовИст.Очистить();
	Объект.bon_ТабПартий.Очистить();
	Объект.bon_ТаблицаВыдАкцийпоСчетчику.Очистить();
	Объект.bon_ПодаркиВыданные.Очистить();

	Объект.bon_АкцииПоСчетчику	= Ложь;
	Объект.bon_ПоКратности	= Ложь;
	Объект.bon_ПоСчетчику	= Ложь;
	Объект.bon_ПоложениеСчетчика	= "";
	Объект.bon_СуммаБонусов	= "";
	Объект.bon_СчетчикКрат	= "";
	Объект.bon_БонусыВыданыПоСчетчику	= Ложь;
	ОчиститьБонусыНеАкт();
	
	Объект.bon_БонусыИспользовали = Ложь; /// Сергей 16.10.2020 +++
	
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
	Иначе 
		Элементы.ФормаПровестиИЗакрыть.Видимость = Истина;	
	КонецЕсли;	
	
	Для Каждого СтрТов Из Объект.Товары Цикл 
		СтрТов.bon_СуммаБонусовВыдано = 0;
		ОтнятьСумБон = СтрТов.bon_СуммаБонусовПринято; 
		СтрТов.bon_СуммаБонусовПринято = 0;
		СтрТов.СуммаРучнойСкидки =  0;
		РасчитатьСуммуРуснойСкидкиБонусов(СтрТов.КлючСтроки, СтрТов.bon_СуммаБонусовПринято);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБонусныйСчетКомандаЮрлиц()
	
	Объект.bon_БонусныйСчет = "";
	Объект.bon_Телефон		= "";
	Объект.bon_БонусПартНачис.Очистить();	
	Объект.bon_ПартииБонусовИст.Очистить();
	Объект.bon_ТабПартий.Очистить();
	Объект.bon_ТаблицаВыдАкцийпоСчетчику.Очистить();
	Объект.bon_ПодаркиВыданные.Очистить();

	Объект.bon_АкцииПоСчетчику	= Ложь;
	Объект.bon_ПоКратности	= Ложь;
	Объект.bon_ПоСчетчику	= Ложь;
	Объект.bon_ПоложениеСчетчика	= "";
	Объект.bon_СуммаБонусов	= "";
	Объект.bon_СчетчикКрат	= "";
	Объект.bon_БонусыВыданыПоСчетчику	= Ложь;
	ОчиститьБонусыНеАкт();
	ОчиститьБонРефер();
	Объект.bon_БонусыИспользовали = Ложь; /// Сергей 16.10.2020 +++
	
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;
	Иначе 
		Элементы.ФормаПровестиИЗакрыть.Видимость = Истина;	
	КонецЕсли;	
	
	Для Каждого СтрТов Из Объект.Товары Цикл 
		СтрТов.bon_СуммаБонусовВыдано = 0;
		ОтнятьСумБон = СтрТов.bon_СуммаБонусовПринято;
		Если  СтрТов.bon_СуммаБонусовПринято > 0 Тогда 
			СтрТов.bon_СуммаБонусовПринято = 0;
			СтрТов.СуммаРучнойСкидки =  СтрТов.СуммаРучнойСкидки - ОтнятьСумБон;
			РасчитатьСуммуРуснойСкидкиБонусовЮр(СтрТов.КлючСтроки, СтрТов.СуммаРучнойСкидки);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменениеРучСкидки()
	
	///Сергей 03.09.2020 +++ Расчет бонусов
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда		
		Объект.bon_ТабПартий.Очистить();
		Объект.bon_ПартииБонусовИст.Очистить();
		Для Каждого СтрТов Из Объект.Товары Цикл 
			ОтнятьСумБон = 0;
			Если СтрТов.bon_СуммаБонусовПринято > 0 Тогда
				СтрТов.bon_СуммаБонусовВыдано = 0;
				ОтнятьСумБон = СтрТов.bon_СуммаБонусовПринято;
				СтрТов.bon_СуммаБонусовПринято = 0;
				СтрТов.СуммаРучнойСкидки = СтрТов.СуммаРучнойСкидки - ОтнятьСумБон;
				РасчитатьСуммуРуснойСкидкиБонусов(СтрТов.КлючСтроки, СтрТов.bon_СуммаБонусовПринято);	
			КонецЕсли;
		КонецЦикла;	
		
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
	КонецЕсли;
	///Сергей 03.09.2020 --- Расчет бонусов
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаРегистрацию(БонусныйСчет) 
	
	ДатаФорм = Объект.bon_ДатаПроведенияПервДляБон;
	ДатаФорм = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_СведенияОНоминальныхОбъектахСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.bon_СведенияОНоминальныхОбъектах.СрезПоследних(&Дата, НоминальныйОбъект = &НоминальныйОбъект) КАК bon_СведенияОНоминальныхОбъектахСрезПоследних";
	Запрос.УстановитьПараметр("НоминальныйОбъект", БонусныйСчет);
	Запрос.УстановитьПараметр("Дата", ДатаФорм);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Если Рез.Количество() > 0 Тогда
		Если ТипЗнч(Рез[0].Регистратор.Ссылка) = Тип("ДокументСсылка.bon_РегистрацияНоминальныхОбъектов") Тогда
			Возврат Истина;	
		Иначе 
			Возврат Ложь;	
		КонецЕсли;	
	Иначе 
		Возврат Ложь;	
	КонецЕсли;
		
КонецФункции

//Начало: МК Баубериков А - 16.09.2020
&НаКлиенте
Процедура ВыбратьНаКарте(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Координаты", ПолучитьКоординатыПодразделения());
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаВыбораАдресаНаКарте",ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("УстановитьАдресЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоординатыПодразделения()
	
	Координаты = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект",ПараметрыСеанса.ТекущийПользователь.Подразделение);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","Координаты"));
	тзРез = Запрос.Выполнить().Выгрузить();
	
	Если тзРез.Количество()>0 тогда
		Координаты = тзРез[0].Значение;
	КонецЕсли;
	
	Возврат Координаты;	
	
КонецФункции


&НаКлиенте
Процедура УстановитьАдресЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат<>Неопределено тогда
		Объект.АдресДоставки = Результат.Адрес;
		Объект.АдресДоставки = СтрЗаменить(Результат.Адрес,ПолучитьЛокацию(Объект.ЗонаДоставки),"");
		Этаформа.Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры
//Конец: МК Баубериков А - 16.09.2020

&НаСервере
Функция ПолучитьЛокацию(ЗонаДоставки)
	
	Возврат ЗонаДоставки.Локация;
	
КонецФункции


&НаКлиенте
Процедура ПриДобавленииБонусногосчета()
	
	Объект.bon_БонусПартНачис.Очистить();
	Объект.bon_ТабПартий.Очистить();
	Объект.bon_ПартииБонусовИст.Очистить();
	Объект.bon_ТаблицаВыдАкцийпоСчетчику.Очистить();
	Объект.bon_ПодаркиВыданные.Очистить();	
	Объект.bon_РежимТолькоНакопления = Истина;
	
	///Проверяем бонусный счет равен данному контрагенту или нет
	БонусныйСтетЭтогоКонтрагентаИлиНет();
		
	Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет) Тогда	
		УстановитьКодСтроки(Объект, "Товары"); ///28.09.2020 +++	
		Элементы.ФормаПровестиИЗакрыть.Видимость = Ложь;	
		///Сергей 01.09.2020 +++ Расчет бонусов
		РасчитатьБонусыКлинтау();
		Элементы.ИтогоБонусов.Заголовок = Объект.Товары.Итог("bon_СуммаБонусовВыдано");
		///Сергей 01.09.2020 --- Расчет бонусов
		
		///Проверка на действующие реферальную акцию
		ПроверкаНаРеферальнуюСистемуКл();
	Иначе 
		Элементы.ФормаПровестиИЗакрыть.Видимость = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБонусныйСчетклиента()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Дан = ПоискБонусногоСчетаПоКонтрагенту();
	КонецЕсли;
	
	Если Дан <> Неопределено тогда
		ОчиститьБонусныйСчетКомандаЮрлиц();
		НомОбъект 	= Дан[0];
		КолРер 		= Дан[1];
		ТелБон		= Дан[2];
		
		Если КолРер = Число(1) Тогда 
			Объект.bon_БонусныйСчет = НомОбъект; 
			Объект.bon_Телефон		= ТелБон;
			ПриДобавленииБонусногосчета(); 
		ИначеЕсли КолРер > Число(1) Тогда
			Предупреждение("Больше одного бонусного счета! Уточните у Клиента номер бонусного счета!");
		Иначе 
			Предупреждение("У данного Контрагента нету бонусного счета!!! Предложите клиенту завести его!");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БонусныйСтетЭтогоКонтрагентаИлиНет ()
	
	Соответ = БонусныйРавенКонтрагенту();
	
	Если Не Соответ тогда
		ОчиститьБонусныйСчетКомандаЮрлиц();
		Предупреждение("Бонусный счет не соответсвует контрагенту!!!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоискБонусногоСчетаПоКонтрагенту()
	
	ЗапТел = Новый Запрос;
	ЗапТел.Текст = "ВЫБРАТЬ
	               |	bon_ТелефоныНомОбъектов.Сотовый КАК Сотовый
	               |ИЗ
	               |	РегистрСведений.bon_ТелефоныНомОбъектов КАК bon_ТелефоныНомОбъектов
	               |ГДЕ
	               |	bon_ТелефоныНомОбъектов.Контрагенты = &Контрагенты
	               |	И bon_ТелефоныНомОбъектов.Основной = ИСТИНА";
	ЗапТел.УстановитьПараметр("Контрагенты", Объект.Контрагент);
	РезТел = ЗапТел.Выполнить().Выгрузить();
	
	Если РезТел.Количество() = 1 тогда
		Тел = РезТел[0].Сотовый;	
	Иначе 
		Тел = "";	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	bon_НоминальныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.bon_НоминальныеОбъекты КАК bon_НоминальныеОбъекты
	|ГДЕ
	|	bon_НоминальныеОбъекты.Держатель = &Держатель";
	Запрос.УстановитьПараметр("Держатель", Объект.Контрагент);
	
	Рез = Запрос.Выполнить().Выгрузить();
	
	Массив = Новый Массив(3);
	Если Рез.Количество() = 1  Тогда
		Массив[0] = Рез[0].Ссылка;
		Массив[1] = Число(1);
		Массив[2] = Тел;
		Возврат Массив;
	ИначеЕсли Рез.Количество() > 1  Тогда	
		Массив[0] = Справочники.bon_НоминальныеОбъекты.ПустаяСсылка();
		Массив[1] = Рез.Количество();
		Массив[2] = Тел;
		Возврат Массив;
	Иначе 
		Массив[0] = Справочники.bon_НоминальныеОбъекты.ПустаяСсылка();
		Массив[1] = Число(0);
		Массив[2] = Тел;
		Возврат Массив;		
	КонецЕсли;  
		
КонецФункции

&НаСервере
Функция БонусныйРавенКонтрагенту()
	///Времено так как есть дубли по контрагентам!!!
	Возврат Истина;	
	
	//Если ЗначениеЗаполнено(Объект.bon_БонусныйСчет.Держатель) Тогда
	//	Если Объект.bon_БонусныйСчет.Держатель <> Объект.Контрагент Тогда
	//		Возврат Ложь;
	//	Иначе 
	//		Возврат Истина;		
	//	КонецЕсли;
	//Иначе 
	//	Возврат Истина;	
	//КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Бонусы_Клиентов_Реферальная_Система

&НаКлиенте
Процедура ОткудаВыОНасУзналиПриИзменении(Элемент)
	ПроверкаНаРеферальнуюСистемуКл();	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаРеферальнуюСистемуКл()
	
	ДанОтЗнак = Объект.ОткудаВыОНасУзнали;
	
	Если ЗначениеОтЗнакомых(ДанОтЗнак) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.bon_БонусныйСчетРеф) и Объект.bon_РеферальнаяСистема = Ложь Тогда
			
			///Задаем дату использования
			Если Объект.bon_ДатаПроведенияПервДляБон <> '00010101' Тогда
				ИспользДата = Объект.bon_ДатаПроведенияПервДляБон;
			Иначе 
				ИспользДата = Объект.Дата;	
			КонецЕсли;
			
			Если ИспользДата = '00010101' или Формат(ИспользДата, "ДЛФ=В") = Строка("0:00:00") Тогда
				ИспользДата = ТекущаяДата();	
			КонецЕсли;
			
			///Проверяем на действующию Реферальную Акцию
			Если ПроверкаНаДействующиеРеферал(ИспользДата) Тогда
				Предупреждение("Имеется активная 'Реферальная Акция'!!!");	
				Элементы.Бонусы_КлиентуПоРеф.Видимость = Истина;
				Элементы.КНачислениюПоРеферальному.Видимость = Истина;
				Элементы.bon_БонусПартНачисРеф.Видимость = Истина;
			Иначе 
				Элементы.Бонусы_КлиентуПоРеф.Видимость = Ложь;
				Элементы.КНачислениюПоРеферальному.Видимость = Ложь;
				Элементы.bon_БонусПартНачисРеф.Видимость = Ложь;
				Объект.bon_БонусПартНачисРеф.Очистить();
				ОчиститьБонРефер();
				Возврат;	
			КонецЕсли;
			
			///Проверка на заполнение основного бонусного счета клиента
			Если Не ЗначениеЗаполнено(Объект.bon_БонусныйСчет) тогда
				Предупреждение("Заполните Бонусный счет клиента!!!");
				ОчиститьБонРефер();
				Возврат;
			КонецЕсли;
			
			///Проверка на заполнения товара
			Если Объект.Товары.Количество() = 0 тогда
				Предупреждение("Не заполнена Номенклатура");
				ОчиститьБонРефер();
				Возврат;
			КонецЕсли;
			
			Отказ = Ложь;
			ДобавитьБонусныйСчетРефер(Отказ);
			
			Если Отказ тогда
				ОчиститьБонРефер();
				Возврат;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.bon_БонусныйСчетРеф) Тогда 
				РасчитатьБонусыКлинтауРев();
				Объект.bon_РеферальнаяСистема = Истина;
				Элементы.ИтогоБонусовРеф.Заголовок = Объект.bon_БонусПартНачисРеф.Итог("Буфер") + Объект.bon_БонусПартНачисРеф.Итог("Остаток");
			КонецЕсли;
			
			//ыававыа
		ИначеЕсли ЗначениеЗаполнено(Объект.bon_БонусныйСчетРеф) и Объект.bon_РеферальнаяСистема = Истина Тогда
			РасчитатьБонусыКлинтауРев();
			Элементы.ИтогоБонусовРеф.Заголовок = Объект.bon_БонусПартНачисРеф.Итог("Буфер") + Объект.bon_БонусПартНачисРеф.Итог("Остаток");	
		Иначе 
			ОчиститьБонРефер();	
		КонецЕсли; ///Проверка на заполнение данных ---
	Иначе 
		ОчиститьБонРефер();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБонусныйСчетРефер(Отказ)
	
	НомерСчета = "";
	
	Если ВвестиСтроку(НомерСчета, "Введите Номер телефона знакомого (без 8 или +7):", 10) Тогда
		НомерСчета = СокрЛП(НомерСчета);
		
		///Проверка на заполнение номера
		Если Не ЗначениеЗаполнено(НомерСчета) Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли СтрДлина(НомерСчета) <> 10 Тогда
			Предупреждение("Некорректный номер!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		///Проверка чтобы были только "Цифры"
		Цифры = "0123456789";
		СтрКоличество = СтрДлина(НомерСчета);
		Для Счетчик = 1 По СтрКоличество Цикл
			Если Найти(Цифры,Сред(НомерСчета,Счетчик,1)) = 0 Тогда
				Предупреждение("Некорректный номер!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		///Проверка на первую цыфору чтобы бала "7"
		Если Число(Сред(НомерСчета,1,1)) <> 7 Тогда
			Предупреждение("Некорректный номер!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
		
		Если ВРег(НомерСчета) <> НомерСчета Тогда
			Предупреждение("Некорректный номер!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Резу = ПоискНоменальногоИДержателя(НомерСчета);
		
		ДержательСчет 			= Резу[1];
		НоминальныйОбъектСчета 	= Резу[0];
		ЗапретНаИспользование 	= Резу[2];
		Если Не ЗначениеЗаполнено(НоминальныйОбъектСчета) и Не ЗначениеЗаполнено(ДержательСчет) Тогда
			Предупреждение("Возможно бонусный счет по указанному номеру не зарегестрированн!");
			Отказ = Истина;
			Возврат;			
		КонецЕсли;
		
		Если ЗапретНаИспользование = Истина Тогда 
			Предупреждение("Данный Номенальный Объект запрещен к использованию!");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
		
		Если НоминальныйОбъектСчета <> Объект.bon_БонусныйСчет и НомерСчета <> Объект.bon_Телефон Тогда
			Объект.bon_БонусныйСчетРеф  = НоминальныйОбъектСчета;
			Объект.bon_ТелефонРеф		= НомерСчета;
			Отказ = Ложь;
		Иначе 
			Предупреждение("Нельза указать свой Бонусный счет!!!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе 
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБонРефер()
	
	Объект.bon_БонусныйСчетРеф = "";
	Объект.bon_ТелефонРеф	   = "";
	Объект.bon_РеферальнаяСистема = Ложь;
	Элементы.Бонусы_КлиентуПоРеф.Видимость = Ложь;
	Элементы.КНачислениюПоРеферальному.Видимость = Ложь;
	Элементы.bon_БонусПартНачисРеф.Видимость = Ложь;
	Объект.bon_БонусПартНачисРеф.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаДействующиеРеферал(ИспользДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	bon_НастройкаБонусов.ВидНастройки КАК ВидНастройки,
	|	bon_НастройкаБонусов.Подразделение КАК Подразделение,
	|	bon_НастройкаБонусов.ДатаНач КАК ДатаНач,
	|	bon_НастройкаБонусов.ДатаКон КАК ДатаКон,
	|	bon_НастройкаБонусов.ХарактеристикаБонусов КАК ХарактеристикаБонусов
	|ИЗ
	|	РегистрСведений.bon_НастройкаБонусов КАК bon_НастройкаБонусов
	|ГДЕ
	|	bon_НастройкаБонусов.ВидНастройки = &ВидНастройки
	|	И bon_НастройкаБонусов.Подразделение = &Подразделение
	|	И bon_НастройкаБонусов.ДатаНач <= &ДатаНач
	|	И bon_НастройкаБонусов.ДатаКон >= &ДатаКон
	|	И bon_НастройкаБонусов.Активен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	bon_НастройкаБонусов.Приоритет";
	Запрос.УстановитьПараметр("ВидНастройки", Перечисления.bon_Выды_Настроек.Реферальная);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("ДатаНач", ИспользДата);
	Запрос.УстановитьПараметр("ДатаКон", ИспользДата);
	
	Результ = Запрос.Выполнить().Выгрузить();
	
	Если Результ.Количество() = 0 Тогда
		Возврат Ложь;			
	Иначе
		ЗапросРеа = Новый Запрос;
		ЗапросРеа.Текст =
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Дата МЕЖДУ &Нач И &Кон
		|	И ЗаказКлиента.bon_БонусныйСчет = &bon_БонусныйСчет
		|	И ЗаказКлиента.Проведен = ИСТИНА
		|	И ЗаказКлиента.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказКлиента.bon_РеферальнаяСистема = ИСТИНА";
		ЗапросРеа.УстановитьПараметр("Нач", Результ[0].ДатаНач);
		ЗапросРеа.УстановитьПараметр("Кон", Результ[0].ДатаКон);
		ЗапросРеа.УстановитьПараметр("bon_БонусныйСчет", Объект.bon_БонусныйСчет);
		РезультРеа = ЗапросРеа.Выполнить().Выгрузить();

		Если РезультРеа.Количество() = 0 Тогда
			Возврат Истина;
		Иначе 
			Сообщить("По данному бонусному счету уже выдовались бонусы по 'Реферальной Акции'");
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначениеОтЗнакомых(ДанОтЗнак)
	Возврат ДанОтЗнак = Справочники.ЦС_Опрос.НайтиПоКоду("000000010");
КонецФункции

&НаСервере
Функция РасчитатьБонусыКлинтауРев() Экспорт
	
	Объект.bon_БонусПартНачисРеф.Очистить();
	
	Если bon_БонуснаяПрограммаСервер.ПроверкаНаРазрешенияВыдочиБонусов(Объект.Подразделение) тогда  
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл  
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) и СтрокаТаблицы.Сумма > 0 Тогда 
				bon_БонуснаяПрограммаСервер.РассчитатьСуммуКНакоплениюРеф(СтрокаТаблицы, Объект, "Товары"); 
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ОчиститьБонусыНеАкт();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Расчет_Скидок_Спец_Цен
//Клиенте////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПроверкаНаСпецЦену(ТекущаяСтрока)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЭтоЗаказ"); 								///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПодразделениеЗаказ", Объект.Подразделение); ///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПроверкаНаСпеццену");                       ///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"   
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПересчетАвтоматическихСкидокСервер();
	ТоварыПроцентАвтоСкидки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, Имяреквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции


//Сервере////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПроверкаНаСпецЦенуСервер(ТекущаяСтрока)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	КонецЕсли;

	СтруктураДействий.Вставить("ЭтоЗаказ"); 								///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПодразделениеЗаказ", Объект.Подразделение); ///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"
	СтруктураДействий.Вставить("ПроверкаНаСпеццену");                       ///Сергей 07.10.2020 +++ Расчет "Скидок", "Спеччен"   
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	new_МаркетинговыеАктивности.ПересчетАвтоматическихСкидокСервер(Объект);
	ТоварыПроцентАвтоСкидки();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПроцентАвтоСкидки()
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрТов Из Объект.Товары Цикл 
		Если СтрТов.ПроцентАвтоматическойСкидки > 0 тогда
			
			ТекущаяСтрока = СтрТов;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
				СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПересчетАвтоматическихСкидокСервер()
	
	new_МаркетинговыеАктивности.ПересчетАвтоматическихСкидокСервер(Объект);
	
КонецПроцедуры

//ТТ
Процедура swПроверитьЗадолженностьКонтрагента(Отказ)
	Если ПроверкаДоступа("Разрешить продажу товаров в долг (Роль)") Тогда
		Возврат;
	КонецЕсли;
	НастройкиКонтроляЗадолженности = swОбщегоНазначения.ПолучитьНастройкиКонтроляЗадолженности(Объект.Партнер, Объект.Валюта, Объект.Дата);
	Если НастройкиКонтроляЗадолженности.НеКонтролироватьЗадолженность Тогда
		Возврат;
	КонецЕсли;
	СуммаВзаиморасчетов = ПолучитьСуммуВзаиморасчетовПоТЧ();
	СуммаДолга = 0;
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ЕСТЬNULL(СУММА(Данные.Приход), 0) КАК Приход,
	        |	ЕСТЬNULL(СУММА(Данные.Расход), 0) КАК Расход
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		Данные.СуммаПриход КАК Приход,
	        |		Данные.СуммаРасход КАК Расход
	        |	ИЗ
	        |		РегистрНакопления.РасчетыСКлиентами.Обороты(
	        |				,
	        |				,
	        |				Регистратор,
	        |				АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	        |					И Валюта = &ВалютаВзаиморасчетов) КАК Данные
	        |	ГДЕ
	        |		НЕ Данные.Регистратор = &Ссылка
	        |	
	        |	ОБЪЕДИНИТЬ ВСЕ
	        |	
	        |	ВЫБРАТЬ
	        |		Данные.СуммаПриход,
	        |		Данные.СуммаРасход
	        |	ИЗ
	        |		РегистрНакопления.РасчетыСПоставщиками.Обороты(
	        |				,
	        |				,
	        |				Регистратор,
	        |				АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	        |					И Валюта = &ВалютаВзаиморасчетов) КАК Данные
	        |	ГДЕ
	        |		НЕ Данные.Регистратор = &Ссылка) КАК Данные";
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.Валюта);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаДолга = СуммаДолга + Выборка.Приход - Выборка.Расход;
	КонецЦикла;
	Если СуммаДолга + СуммаВзаиморасчетов > НастройкиКонтроляЗадолженности.РазрешеннаяСуммаЗадолженности Тогда
		ТекстОшибки = НСтр("ru='Долг клиента в валюте " + Объект.Валюта + " составляет " + Формат(СуммаДолга, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + ", по текущему документу он увеличится на " + Формат(СуммаВзаиморасчетов, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + ", в сумме это больше, чем разрешенная задолженность " + Формат(НастройкиКонтроляЗадолженности.РазрешеннаяСуммаЗадолженности, "ЧЦ=18; ЧДЦ=2; ЧН=0,00") + "'");
		ТекстОшибки = ТекстОшибки + НСтр("ru=', документ не может быть выгружен в WMS!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
КонецПроцедуры // sw end

Функция ПолучитьСуммуВзаиморасчетовПоТЧ() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Сумма КАК СуммаВзаиморасчетов
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаВзаиморасчетов),0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ НЕ &ВернутьМногооборотнуюТару
	|	ИЛИ &ТребуетсяЗалогЗаТару
	|");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(Новый Структура("Отменено",Ложь),"Номенклатура,Сумма"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", Объект.ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", Объект.ТребуетсяЗалогЗаТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаИтого = Выгрузка[0].СуммаВзаиморасчетов;
	Возврат СуммаИтого;
	
КонецФункции



#КонецОбласти

///Сергей 16.11.2020 +++ Устанавливаем статус отгрузить на Услугу
&НаСервере
Функция ПолучитьВариантОбеспеченияОтгрузка()
	Возврат Перечисления.ВариантыОбеспечения.Отгрузить;	
КонецФункции

&НаСервере
Функция ПолучитьТимНомУслуга()
	Возврат Перечисления.ТипыНоменклатуры.Услуга;
КонецФункции

///Сергей 16.11.2020 --- Устанавливаем статус отгрузить на Услугу

&НаКлиенте
Процедура ПериодДоставкиПриИзменении(Элемент)
	
	Если Объект.ПериодДоставки=ПредопределенноеЗначение("Перечисление.ПериодДоставки.ДоОбеда") тогда
		Объект.ВремяДоставкиС = '00010101100000';
		Объект.ВремяДоставкиПо = '00010101140000';
	ИначеЕсли Объект.ПериодДоставки=ПредопределенноеЗначение("Перечисление.ПериодДоставки.ПослеОбеда") тогда
		Объект.ВремяДоставкиС = '00010101140000';
		Объект.ВремяДоставкиПо = '00010101200000';
	Иначе
		Объект.ВремяДоставкиС = '00010101000000';
		Объект.ВремяДоставкиПо = '00010101000000';
	КонецЕсли;       
	
КонецПроцедуры

&НаКлиенте
Процедура swУсловияОплатыПриИзменении(Элемент)
	
	//Для каждого ТекущаяСтрока из Объект.Товары цикл
	//	
	//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	//	
	//	СтруктураДействий = Новый Структура;
	//	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	//	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	//	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	//	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	//	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	//	Иначе
	//		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	//	КонецЕсли;
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//	СтруктураДействий.Вставить("ПересчитатьСумму");
	//	// sw begin
	//	// Швецов Тимур, 05.02.2019
	//	Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
	//		СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
	//	КонецЕсли;
	//	// sw end
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	//	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	//	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	//	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	//	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Объект.ЖелаемаяДатаОтгрузки);
	//	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	//	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
	//	Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	//	
	//	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
	//	ЭтаФорма.ИмяФормы, "Товары"));
	//	
	//	//Начало: МК Баубериков А - 18.08.2020	
	//	СтруктураДействий.Вставить("ЗаполнитьВесУпаковки",Новый Структура("Номенклатура, Упаковка", "ВесУпаковки"));
	//	СтруктураДействий.Вставить("ЗаполнитьОбъемУпаковки",Новый Структура("Номенклатура, Упаковка", "ОбъемУпаковки"));
	//	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияВеса",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияВеса"));
	//	СтруктураДействий.Вставить("ЗаполнитьЕдиницуИзмеренияОбъема",Новый Структура("Номенклатура, Упаковка", "ЕдиницаИзмеренияОбъема"));
	//	СтруктураДействий.Вставить("ПересчитатьВесУпаковкиОбъемУпаковки");  
	//	//Конец: МК Баубериков А - 18.08.2020	
	//	
	//	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Товары, ДатаОтгрузкиОбязательна, СкладОбязателен);
	//	
	//	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	//	
	//	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	//КонецЦикла;
	
КонецПроцедуры

///Сергей 28.05.2021 --- Контроль ПроцентаРучной скидки
&НаКлиенте
Процедура ПроверитьНаКонтрольРучнойСкидки(ТекущаяСтрока); 
	
	МаксПроц = ПроверкаНаПользователяКонтроль(ТекущаяСтрока.ВидЦены);
	
	Если ТекущаяСтрока.ПроцентРучнойСкидки > МаксПроц Тогда
		ТекущаяСтрока.ПроцентРучнойСкидки = МаксПроц;
		Сообщить("Максимальный % ручной скидки для пользователя: '"+ ПользователиКлиентСервер.ТекущийПользователь()+ "', состовляет: "+МаксПроц+"%"); 	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаКонтрольРучнойСкидкиСерв(ТекущаяСтрока); 
	
	МаксПроц = ПроверкаНаПользователяКонтроль(ТекущаяСтрока.ВидЦены);
	
	Если ТекущаяСтрока.ПроцентРучнойСкидки > МаксПроц Тогда
		ТекущаяСтрока.ПроцентРучнойСкидки = МаксПроц;
		Сообщить("Максимальный % ручной скидки для пользователя: '"+ ПользователиКлиентСервер.ТекущийПользователь()+ "', состовляет: "+МаксПроц+"%"); 	
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Функция ПроверкаНаПользователяКонтроль(ВидЦены)
	
	ТекПольз = ПользователиКлиентСервер.ТекущийПользователь();
	МаксПроц = Число(0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	new_РучныеСкидкиКонтроль.МаксПроцСкидки КАК МаксПроцСкидки
	               |ИЗ
	               |	РегистрСведений.new_РучныеСкидкиКонтроль КАК new_РучныеСкидкиКонтроль
	               |ГДЕ
	               |	new_РучныеСкидкиКонтроль.Активно = ИСТИНА
	               |	И new_РучныеСкидкиКонтроль.Пользователь = &Пользователь
	               |	И new_РучныеСкидкиКонтроль.ТипЦены = &ТипЦены";
	Запрос.УстановитьПараметр("Пользователь", ТекПольз);
	Запрос.УстановитьПараметр("ТипЦены", ВидЦены);
	РезЗапр = Запрос.Выполнить().Выгрузить();
	
	Если РезЗапр.Количество() > 0 Тогда
		МаксПроц = РезЗапр[0].МаксПроцСкидки;
		Возврат МаксПроц;
	Иначе 
		Возврат МаксПроц;		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДатаКонтроля()
	Возврат Константы.new_ДатаКонтроляРучныхСкидок.Получить();	
КонецФункции
///Сергей 28.05.2021 --- Контроль ПроцентаРучной скидки

///Сергей 03.06.2021 +++
Функция ПроверкаДоступаКПартнеру(Партнер)
	
	ТекПольз = ПользователиКлиентСервер.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	new_ЗапретВыбораКлиентаТочетно.Партнер КАК Партнер
	                |ИЗ
	                |	РегистрСведений.new_ЗапретВыбораКлиентаТочетно КАК new_ЗапретВыбораКлиентаТочетно
	                |ГДЕ
	                |	new_ЗапретВыбораКлиентаТочетно.Пользователь = &Пользователь
	                |	И new_ЗапретВыбораКлиентаТочетно.Партнер = &Партнер";
	Запрос.УстановитьПараметр("Пользователь", ТекПольз);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Сообщить("Вым не доступен: "+Партнер+", -- для выбора!!!");
		Возврат Справочники.Партнеры.ПустаяСсылка();
	Иначе 
		Возврат Партнер;	
	КонецЕсли;

КонецФункции

Функция ПроверкаДоступаККонтрагенты(Контрагент)
	
	ТекПольз = ПользователиКлиентСервер.ТекущийПользователь();
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	new_ЗапретВыбораКлиентаТочетно.Контрагент КАК Контрагент
	                |ИЗ
	                |	РегистрСведений.new_ЗапретВыбораКлиентаТочетно КАК new_ЗапретВыбораКлиентаТочетно
	                |ГДЕ
	                |	new_ЗапретВыбораКлиентаТочетно.Пользователь = &Пользователь
	                |	И new_ЗапретВыбораКлиентаТочетно.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Пользователь", ТекПольз);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Сообщить("Вым не доступен: "+Контрагент+", -- для выбора!!!");
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе 
		Возврат Контрагент;	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ЗадолженностьКлиентаПоЗаказам(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Сообщить("Документ не записан.");
		Возврат;
	КонецЕсли;
	
	ДокументРезультат = ЗадолженностьКлиентаПоЗаказамНаСервере();
	ДокументРезультат.Показать();

КонецПроцедуры


&НаСервере
Функция ЗадолженностьКлиентаПоЗаказамНаСервере()
	
	Схема = Документы.ЗаказКлиента.ПолучитьМакет("Макет");
	Настройки = Схема.НастройкиПоУмолчанию;		
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();		
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	
	ПараметрДок = Новый ПараметрКомпоновкиДанных("Организация");		
	ЗначениеПараметраДок = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДок);
	ЗначениеПараметраДок.Значение = Объект.Организация;
	ЗначениеПараметраДок.Использование = Истина;
	Настройки = КомпоновщикНастроек.Настройки;
	
	ПараметрДок = Новый ПараметрКомпоновкиДанных("Контрагент");		
	ЗначениеПараметраДок = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДок);
	ЗначениеПараметраДок.Значение = Объект.Контрагент;
	ЗначениеПараметраДок.Использование = Истина;
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	Возврат ДокументРезультат
	
КонецФункции

///Сергей 03.06.2021 ---

//++АК_Даулет++ 041221 старт
Функция ПолучитьСуммуДляСертификата()
	
	СуммаДляСертивиката = 0;
	
	Для Каждого Стр Из Объект.Товары Цикл
		//Если ПроверитьВходитВгруппу(Стр.Номенклатура) Тогда
			СуммаДляСертивиката = СуммаДляСертивиката + Стр.Сумма;
		//КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаДляСертивиката;
	
КонецФункции

Функция ПроверитьВходитВгруппу(Номенклатура)
	
	СтрТовары = Новый Массив;
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00010700"));
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00006983"));
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00006984"));
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000014487"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Товары)
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Наименование ПОДОБНО ""% ss %""
		|	И Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Запрос.УстановитьПараметр("Товары", СтрТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПодарочныйСертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПолучитьСуммуСертификата(ВыбранноеЗначение) = 100000 Тогда  //++Аян_К++ доработал по новой акции
		Если Объект.Товары.Итог("Сумма") >= 2000000 Тогда
			СделатьСкидкуПоСертификату(ВыбранноеЗначение);
		Иначе
			Сообщить("Сертификат с номиналом 100 000 выдается на покупку более 2 000 000 тенге");
			ВыбранноеЗначение           = ПредопределенноеЗначение("Справочник.ПодарочныеСертификаты.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли ПолучитьСуммуСертификата(ВыбранноеЗначение) = 20000 Тогда  //++Аян_К++ доработал по новой акции
		Если Объект.Товары.Итог("Сумма") > 400000 Тогда
			СделатьСкидкуПоСертификату(ВыбранноеЗначение);
		Иначе
			Сообщить("Сертификат с номиналом 20 000 выдается на покупку более 400 000 тенге");
			ВыбранноеЗначение           = ПредопределенноеЗначение("Справочник.ПодарочныеСертификаты.ПустаяСсылка");
		КонецЕсли;
	ИначеЕсли ПолучитьСуммуСертификата(ВыбранноеЗначение) = 10000 Тогда
		Если Объект.Товары.Итог("Сумма") > 200000 Тогда
			СделатьСкидкуПоСертификату(ВыбранноеЗначение);
		Иначе
			Сообщить("Сертификат с номиналом 10 000 выдается на покупку более 200 000 тенге");
			ВыбранноеЗначение           = ПредопределенноеЗначение("Справочник.ПодарочныеСертификаты.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьСкидкуПоСертификату(ВыбранноеЗначение)
	//Айнур 01.02.2022
	СуммаСертификата = ПолучитьСуммуСертификата(ВыбранноеЗначение);
	//**
	Если ПроверитьСертификат(ВыбранноеЗначение) Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Для Каждого Стр Из Объект.Товары Цикл
				Если Стр.Сумма > ПолучитьСуммуСертификата(ВыбранноеЗначение) Тогда
					Стр.Сумма = Стр.Сумма - СуммаСертификата;
					Стр.СуммаРучнойСкидки = СуммаСертификата;
					Если Объект.СуммаДокумента > 0 Тогда
						Объект.СуммаДокумента = Объект.СуммаДокумента - СуммаСертификата;
					КонецЕсли;
					Стр.СуммаСНДС = Стр.СуммаСНДС - СуммаСертификата;
					Стр.СуммаСНДСБезВозвратнойТары = Стр.СуммаСНДСБезВозвратнойТары - СуммаСертификата;
					Элементы.ПодарочныйСертификат.Доступность = Ложь;
					СуммаЗаказаноСЗалоговойТарой = СуммаЗаказаноСЗалоговойТарой - СуммаСертификата;
					//Записать();
					
					//Айнур 01.02.2022
						ТекущаяСтрока = Стр;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						
						ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
						
						РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма); 
					//Конец 
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Сообщить(Строка(ВыбранноеЗначение) + " не актевирован!");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСертификат(Сертификат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияПодарочныхСертификатовСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ИсторияПодарочныхСертификатов.СрезПоследних(&Период, ) КАК ИсторияПодарочныхСертификатовСрезПоследних
		|ГДЕ
		|	ИсторияПодарочныхСертификатовСрезПоследних.ПодарочныйСертификат = &ПодарочныйСертификат
		|	И ИсторияПодарочныхСертификатовСрезПоследних.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ПодарочныйСертификат", Сертификат);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПодарочныхСертификатов.Активирован);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
///Сергей 03.06.2021 ---

//++ Тишбаев О.М.
//Мега костыль удалим наверное или нет устал бороться сами исправляйте
&НаКлиенте
Процедура ТоварыСтавкаНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолучитьСтавкуНДС(Объект.Договор, ДанныеВыбора);	
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура ПолучитьСтавкуНДС(Договор, ДанныеВыбора)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Договор.СтавкаНДС = Справочники.СтавкиНДС.НДС0 Тогда
		ДанныеВыбора.Добавить(Справочники.СтавкиНДС.НДС0);
	Иначе
		ДанныеВыбора.Добавить(Справочники.СтавкиНДС.НДС12);
	КонецЕсли;
		
КонецПроцедуры
//++АК_Даулет++ 041221 финиш	

//Айнур 01.02.2022
Функция ПолучитьСуммуСертификата(Сертификат)
	Возврат Сертификат.Владелец.Номинал;	
КонецФункции
//**

// Айнур 05.22
&НаСервере
Функция ПроверкаДоступностиПодарка()
	ЗапросПоАкциям = Новый Запрос;
	ЗапросПоАкциям.Текст = 
	"ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Сумма КАК Сумма,
	|	ВТ.new_ЭтоСпецЦена КАК СпецЦена,
	|	ВТ.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ Товары1
	|ИЗ
	|	&ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары1.Номенклатура КАК Номенклатура,
	|	Товары1.Сумма КАК Сумма,
	|	Товары1.СпецЦена КАК СпецЦена
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Товары1 КАК Товары1
	|ГДЕ
	|	Товары1.ВидЦены = &ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Подразделение
	|ИЗ
	|	Документ.bon_МакетинговыеАкции.ДействующиеСтруктурныеЕдиницы КАК bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы
	|ГДЕ
	|	bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|	И bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.Проведен
	|	И &ТекДата МЕЖДУ bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.ПериодДействияНачало И bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.ПериодДействияКонец
	|	И bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.bon_УсловиеМаркентиговойАктивности.ПоСчетчикуИКрастности)
	|	И bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.ТипЦенности = ЗНАЧЕНИЕ(Перечисление.bon_ТипЦенности.Подарок)
	|	И bon_МакетинговыеАкцииДействующиеСтруктурныеЕдиницы.Ссылка.ПоСумме
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	bon_МакетинговыеАкцииТоварыДляОтбора.Номенклатура КАК Номенклатура,
	|	bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка КАК Ссылка,
	|	bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.УчитыватьСпецЦену КАК УчитыватьСпецЦену
	|ПОМЕСТИТЬ Акции
	|ИЗ
	|	Документ.bon_МакетинговыеАкции.ТоварыДляОтбора КАК bon_МакетинговыеАкцииТоварыДляОтбора
	|ГДЕ
	|	bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.Проведен
	|	И &ТекДата МЕЖДУ bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.ПериодДействияНачало И bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.ПериодДействияКонец
	|	И bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.bon_УсловиеМаркентиговойАктивности.ПоСчетчикуИКрастности)
	|	И bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.ТипЦенности = ЗНАЧЕНИЕ(Перечисление.bon_ТипЦенности.Подарок)
	|	И bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка.ПоСумме
	|	И bon_МакетинговыеАкцииТоварыДляОтбора.Номенклатура В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура КАК Номенклатура
	|			ИЗ
	|				Товары КАК Товары)
	|	И bon_МакетинговыеАкцииТоварыДляОтбора.Ссылка В
	|			(ВЫБРАТЬ
	|				Подразделение.Ссылка КАК Ссылка
	|			ИЗ
	|				Подразделение КАК Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	Акции.Ссылка КАК МаркетинговыеАкции,
	|	Акции.Ссылка.Сумма КАК СуммаАкции,
	|	Акции.Ссылка.УсловиеСуммы КАК УсловиеАкции,
	|	Акции.УчитыватьСпецЦену КАК УчитыватьСпецЦену,
	|	Товары.СпецЦена КАК СпецЦена
	|ПОМЕСТИТЬ Товары2
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Акции КАК Акции
	|		ПО Товары.Номенклатура = Акции.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Акции.Ссылка,
	|	Акции.Ссылка.Сумма,
	|	Акции.Ссылка.УсловиеСуммы,
	|	Акции.УчитыватьСпецЦену,
	|	Товары.СпецЦена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары2.Сумма КАК Сумма,
	|	Товары2.МаркетинговыеАкции КАК МаркетинговыеАкции,
	|	Товары2.СуммаАкции КАК СуммаАкции,
	|	Товары2.УсловиеАкции КАК УсловиеАкции,
	|	ВЫБОР
	|		КОГДА Товары2.УсловиеАкции = "">""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) > Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА Товары2.УсловиеАкции = "">=""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) >= Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА Товары2.УсловиеАкции = ""<""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) < Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА Товары2.УсловиеАкции = ""<=""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) <= Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА Товары2.УсловиеАкции = ""=""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) = Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА Товары2.УсловиеАкции = ""<>""
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(Товары2.Сумма, 0) <> Товары2.СуммаАкции
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НуженПодарок
	|ПОМЕСТИТЬ Товары3
	|ИЗ
	|	Товары2 КАК Товары2
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Товары2.УчитыватьСпецЦену
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ Товары2.СпецЦена
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Товары3.Сумма КАК Сумма,
	|	Товары3.МаркетинговыеАкции КАК МаркетинговыеАкции,
	|	Товары3.СуммаАкции КАК СуммаАкции,
	|	Товары3.УсловиеАкции КАК УсловиеАкции,
	|	Товары3.НуженПодарок КАК НуженПодарок
	|ИЗ
	|	Товары3 КАК Товары3
	|ГДЕ
	|	Товары3.НуженПодарок
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаАкции УБЫВ";

	ЗапросПоАкциям.УстановитьПараметр("ТекДата", ?(Объект.Дата = Неопределено, ТекущаяДата(), Объект.Дата));
    ЗапросПоАкциям.УстановитьПараметр("ВТ", Объект.Товары.Выгрузить());
	ЗапросПоАкциям.УстановитьПараметр("ПодразделениеОрганизации", Объект.Подразделение);
	ЗапросПоАкциям.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Розничная"));
	ВыборкаПодарка = ЗапросПоАкциям.Выполнить().Выбрать();
	
	Если ВыборкаПодарка.Следующий() Тогда
		Возврат ВыборкаПодарка.МаркетинговыеАкции;
	КонецЕсли;
КонецФункции

//-----------------------------------------------------------------------++Аян_К++ старт-----------------------------------------------------------------------------
Функция РассчитатьПромоКодНаСервере()
	
	ПроцентСкидки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.кт_ПромоКод = &кт_ПромоКод";
	
	Запрос.УстановитьПараметр("кт_ПромоКод", Объект.кт_ПромоКод);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПромо = РезультатЗапроса.Выбрать();
	
	Если ВыборкаПромо.Следующий() Тогда
		Сообщить("Промо:" + Объект.кт_ПромоКод + " недействительный или не найдено, обратитесь в HelpDesk " + Строка(ВыборкаПромо.Ссылка));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_ПромоКод.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.кт_ПромоКод КАК кт_ПромоКод
		|ГДЕ
		|	кт_ПромоКод.ПромоКод = &ПромоКод";
		
		Запрос.УстановитьПараметр("ПромоКод", Объект.кт_ПромоКод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка.Номинал;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПроцентСкидки;
	
КонецФункции

Функция ПроверитьНоменклатуруНаПромоКод(Номенклатура)
	
	СтрТовары = Новый Массив;
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00010700"));
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00006983"));
	СтрТовары.Добавить(Справочники.Номенклатура.НайтиПоКоду("02-00006984"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&Товары)
		|	И НЕ Номенклатура.ЭтоГруппа
		|	И НЕ Номенклатура.Наименование ПОДОБНО ""% ss %""
		|	И Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Запрос.УстановитьПараметр("Товары", СтрТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РассчитатьПромоКод(Команда) 
	
	ПроцентСкидки = РассчитатьПромоКодНаСервере();
	
	Если ЗначениеЗаполнено(ПроцентСкидки) Тогда
		Для Каждого Стр Из Объект.Товары Цикл
			Если ПроверитьНоменклатуруНаПромоКод(Стр.Номенклатура) Тогда
				Стр.ПроцентРучнойСкидки 		= ПроцентСкидки;
				Стр.СуммаРучнойСкидки   		= Стр.Цена * ПроцентСкидки / 100;
				Стр.СуммаСНДС           		= Стр.СуммаСНДС - Стр.СуммаРучнойСкидки;
				Стр.Сумма               		= Стр.Сумма - Стр.СуммаРучнойСкидки;
				Стр.СуммаСНДСБезВозвратнойТары 	= Стр.СуммаСНДСБезВозвратнойТары - Стр.СуммаРучнойСкидки;
				//Стр.СуммаДокумента				= Стр.СуммаСНДС;				
				
				СтруктураПересчетаСуммы 		= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				
				СтруктураДействий.Вставить("ЭтоЗаказ"); 								///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
				СтруктураДействий.Вставить("ПодразделениеЗаказ", Объект.Подразделение); ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
				СтруктураДействий.Вставить("ПроверкаНаСпеццену");                       ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"   
				
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Стр, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЦикла;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры  //++Аян_К++ 110522 финиш

&НаКлиенте
Процедура РасчитатьУченку()
	
	Если ПроверитьСкладУченки() Тогда
		
		ЦенаУченки = ?(УзнатьСотрудника(), 5000, 5500);
		Для Каждого Стр Из Объект.Товары Цикл
			Если ПроверитьНоменклатуруНаУценку(Стр.Номенклатура) Тогда
				Стр.Цена                        = ЦенаУченки;
				Стр.ПроцентРучнойСкидки 		= 0;
				Стр.СуммаРучнойСкидки   		= 0;
				Стр.СуммаСНДС           		= Стр.Цена * Стр.Количество;
				Стр.Сумма               		= Стр.Цена * Стр.Количество;
				Стр.СуммаСНДСБезВозвратнойТары 	= Стр.Цена * Стр.Количество;
				//Стр.СуммаДокумента				= Стр.СуммаСНДС;				
				
				СтруктураПересчетаСуммы 		= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				
				СтруктураДействий.Вставить("ЭтоЗаказ"); 								///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
				СтруктураДействий.Вставить("ПодразделениеЗаказ", Объект.Подразделение); ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"
				СтруктураДействий.Вставить("ПроверкаНаСпеццену");                       ///Сергей 13.10.2020 +++ Расчет "Скидок", "Спеччен"   
				
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
				
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Стр, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЦикла;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСкладУченки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Наименование ПОДОБНО ""%UCENKA%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СкладУценки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Если Объект.Склад = Выборка.Ссылка Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СкладУценки;

КонецФункции

Функция ПроверитьУценкуДоступ()
	
	Возврат НЕ Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаТоварыУценка", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Функция ПроверитьНоменклатуруНаУценку(Номенклатура)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	кт_ТоварыНаУценке.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.кт_ТоварыНаУценке КАК кт_ТоварыНаУценке
	|ГДЕ
	|	кт_ТоварыНаУценке.Номенклатура = &Номенклатура
	|	И НЕ кт_ТоварыНаУценке.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция УзнатьСотрудника()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", "%"+ Объект.Партнер.Наименование + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПользователь = РезультатЗапроса.Выбрать();
	
	Если ВыборкаПользователь.Следующий() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаПользователь.ФизическоеЛицо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДоступностьДоговораКОнтрагента()
	
	//++Аян_К++ 070422 старт
	Если ПолучитьДоступЗаписьДоговораКонтрагентов() Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда 
			//Если ПроверкаНаФизЛицо(Объект.Партнер) Тогда
				Элементы.Договор.Доступность = Ложь;
			//Иначе 
			//	Элементы.Договор.Доступность = Истина;
			//КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	//++Аян_К++ 070422 финиш
	
КонецПроцедуры

Функция ПолучитьДоступЗаписьДоговораКонтрагентов()
	
	Возврат НЕ Альфа_КТ.ПроверитьДоступ("ЗаписьДоговораКонтрагентов", ПользователиКлиентСервер.ТекущийПользователь(), ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Функция ПолучитьДоступЗаписьДизайнера()
	
	Возврат НЕ Альфа_КТ.ПроверитьДоступ("ЗаписьДизайнеров", ПользователиКлиентСервер.ТекущийПользователь(), ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Функция ПолучитьДоступЗаписьСклад()
	
	Возврат Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаЗаписьСклада", ПользователиКлиентСервер.ТекущийПользователь(), ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Функция ПолучитьДоступРедактирования()
	
	Возврат НЕ Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаНомер", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Функция ПроверитьДоступКВнешнемуФайлу() //++Аян_К++ 110522 старт
	
	Возврат Альфа_КТ.ПроверитьДоступ("ЗагрузкаИзВнешнегоФайла", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
КонецФункции  //++Аян_К++ 110522 финиш

Процедура ПроверитьДоступностьЧастноеЛицо()
	
	Если Объект.Партнер = Справочники.Партнеры.НайтиПоКоду("02-00032908") Или Объект.Партнер = Справочники.Партнеры.НайтиПоКоду("02-00067206") Тогда //Пришлось так сделать по задаче №4840 не судите строго
		Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		Сообщить("Частное лицо выбирать невозможно", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Если НЕ Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаЧастноеЛицо", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата()) Тогда
		Если ПроверитьПартнераНаУценку() Тогда
			Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
			Сообщить("Частное лицо могут выбирать только ревизоры", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПартнераНаУценку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_ЧастноеЛицоНаУценке.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.кт_ЧастноеЛицоНаУценке КАК кт_ЧастноеЛицоНаУценке
		|ГДЕ
		|	кт_ЧастноеЛицоНаУценке.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьДоступностьСклад()
	
	Если НЕ Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаСклад", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата()) Тогда
		Если ПроверитьСкладНаУценку() Тогда
			Объект.Склад = Справочники.Склады.ПустаяСсылка();
			Сообщить("Склад не доступен для выбора, обратитесь в HelpDesk", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСкладНаУценку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_СкладНаУценке.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.кт_СкладНаУценке КАК кт_СкладНаУценке
		|ГДЕ
		|	кт_СкладНаУценке.Склад = &Склад
		|	И НЕ кт_СкладНаУценке.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтказОтПодаркаПриИзменении(Элемент)
	НайденныеПодарки = Объект.Товары.НайтиСтроки(Новый Структура("Подарок", Истина));
	Для Каждого НайдСтрока Из НайденныеПодарки Цикл
		Объект.Товары.Удалить(НайдСтрока);
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьИсключениеНаОтгрузку()
	
	Возврат НЕ Альфа_КТ.ПроверитьДоступ("ИсключениеНаОтгрузку", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
КонецФункции

Процедура ПроверитьДоступностьОтгрузки(ПараметрыФормы)
	
	Если ПроверитьСкладОтгрузки() Тогда
		НайденныйЭлемент = ПараметрыФормы.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.Отгрузить);
		ПараметрыФормы.СписокВыбора.Удалить(НайденныйЭлемент);
		НайденныйЭлемент = ПараметрыФормы.СписокВыбора.НайтиПоЗначению(Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно);
		ПараметрыФормы.СписокВыбора.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСкладОтгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	кт_НеОтгружаемыеСклады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.кт_НеОтгружаемыеСклады КАК кт_НеОтгружаемыеСклады
		|ГДЕ
		|	кт_НеОтгружаемыеСклады.Склад = &Склад
		|	И НЕ кт_НеОтгружаемыеСклады.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

	
КонецФункции

&НаСервере
Функция  ПолучитьОПТЦену()
	Возврат Справочники.ВидыЦен.НайтиПоНаименованию("ОПТ");
КонецФункции

Функция ПолучитьДоступВидуЦен(ВидЦены)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	new_ДоступПотльзователейКТипамЦен.Пользователи КАК Пользователи,
		|	new_ДоступПотльзователейКТипамЦен.ВидЦены КАК ВидЦены
		|ИЗ
		|	РегистрСведений.new_ДоступПотльзователейКТипамЦен КАК new_ДоступПотльзователейКТипамЦен
		|ГДЕ
		|	new_ДоступПотльзователейКТипамЦен.Пользователи = &Пользователи
		|	И new_ДоступПотльзователейКТипамЦен.ВидЦены = &ВидЦены";
	
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	Запрос.УстановитьПараметр("Пользователи", ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции


//-------------------------------------------------------------------------++Аян_К++ финиш---------------------------------------------------------------------------


//Шолпан-красавица старт 131022 №6216
&НаКлиенте
Процедура ЗаполнитьНДС0(Команда)
	
	Для каждого Стр Из Объект.Товары Цикл
		Стр.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.НДС0");	
		
		
		ТекущаяСтрока = Стр;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		// sw begin
		// Швецов Тимур, 05.02.2019
		Если Объект.swУсловияОплаты = ПредопределенноеЗначение("Перечисление.swУсловияОплаты.НаличныйРасчет") тогда
			СтруктураДействий.Вставить("swОкруглятьСуммуДоЦелого");
		КонецЕсли;
		// sw end
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		//++АК_Даулет++ 081221 старт
		Если ПолучитьСуммуДляСертификата() >= 100000 Тогда
			СделатьСкидкуПоСертификату(Объект.ПодарочныйСертификат);
		КонецЕсли;
	КонецЦикла;

	
	
КонецПроцедуры


Функция ПроверитьДоступностьЗаполненияНДС()
	
	Возврат Альфа_КТ.ПроверитьДоступ("ЗаказКлиентаНДС0", ПараметрыСеанса.ТекущийПользователь, ТекущаяДата(), ТекущаяДата());
	
КонецФункции


//Шолпан-красавица финиш 131022 №6216
//**
КодПодтверждения = "";
ДатаСмсСообщения = НачалоДня(ТекущаяДата());
