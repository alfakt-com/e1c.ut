
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбрезатьИсториюОбменов 	 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ОбрезатьИсториюОбменов");
	ЧислоДнейХраненияИстории = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","ЧислоДнейХраненияИстории");
	РежимОтладки 			 = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Логирование","РежимОтладки");
	
	ЧислоДнейХраненияИстории = ?(ЗначениеЗаполнено(ЧислоДнейХраненияИстории), ЧислоДнейХраненияИстории, 7);
	ОбрезатьИсториюОбменов   = ?(ЗначениеЗаполнено(ОбрезатьИсториюОбменов), ОбрезатьИсториюОбменов, Истина);
	
	РежимОтладки 			 = ?(ЗначениеЗаполнено(РежимОтладки), РежимОтладки, Ложь);
	
	НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремени = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("РежимРеальногоВремени","НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремени");
	
	РасписаниеИспользуется 	 = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Б24_ЗаданиеСинхронизацииДанных).Использование;
	РасписаниеРегламентногоЗадания 	= РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Б24_ЗаданиеСинхронизацииДанных).Расписание;	
	
	ВыгрузкаПечатныхФормВБитрикс24 	= Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("ВыгрузкаПечатныхФорм", "ВыгрузкаПечатныхФормВБитрикс24");
	ВестиРеестрПечатныхФорм			= Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("ВыгрузкаПечатныхФорм", "ВестиРеестрПечатныхФорм");
	
	ТипДокументаЗаказа = Б24_ОбщегоНазначенияСервер.ПолучитьЗначениеХранилищаНастроек("Заказы","ТипДокументаЗаказа");
	ТипДокументаЗаказа = ?(ЗначениеЗаполнено(ТипДокументаЗаказа), ТипДокументаЗаказа, "Сделка");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНадписьРасписанияОбмена();
	
	Если РасписаниеИспользуется тогда
		Элементы.НастроитьРасписаниеОбмена.Доступность = Истина;	
	Иначе
		Элементы.НастроитьРасписаниеОбмена.Доступность = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ДобавлениеМодуляНаНачальнуюСтраницу

&НаКлиенте
Процедура ДобавитьМодульНаНачальнуюСтраницу(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Добавить в левую колонку?", РежимДиалогаВопрос.ДаНет, 0); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
		ДобавитьМодульВНачальнуюСтраницу("Лево");
	Иначе
		ДобавитьМодульВНачальнуюСтраницу("Право");
	КонецЕсли;

	ОбновитьИнтерфейс();

КонецПроцедуры

&НаСервере
Процедура ДобавитьМодульВНачальнуюСтраницу(Колонка)
	Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ДобавитьМодульВНачальнуюСтраницу(Колонка);
	
КонецПроцедуры

#КонецОбласти


#Область УстановкиПоЛогированию

&НаКлиенте
Процедура  СохранениеИнформацииОЛогированииКлиент(Элемент)
	СохранениеИнформацииОЛогированииСервер();
КонецПроцедуры

&НаСервере
Процедура СохранениеИнформацииОЛогированииСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("ОбрезатьИсториюОбменов"	 , ОбрезатьИсториюОбменов);
	Результат.Вставить("ЧислоДнейХраненияИстории", ЧислоДнейХраненияИстории);
	Результат.Вставить("РежимОтладки"			 , РежимОтладки);
	
	Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("Логирование", Результат)
	
КонецПроцедуры

#КонецОбласти


#Область УстановкиПоРежимуРеальногоВремени

&НаКлиенте
Процедура НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремениПриИзмененииКлиент(Элемент)
	НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремениПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремениПриИзмененииСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремени"	 , НастройкаСинхронизацииДляЗагрузкиВРежимеРеальногоВремени);
	                                                                                                                                                       
	Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("РежимРеальногоВремени", Результат)
	
КонецПроцедуры

#КонецОбласти


#Область УстановкиПоРежимуПоРасписанию

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	
	ВыполнитьНастройкуРасписанияОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если Типзнч(РасписаниеРегламентногоЗадания)<>Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьИзменятьРасписание", ЭтотОбъект);
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменятьРасписание(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = РасписаниеЗадания;
	
	ОбновлениеРасписания(Истина);
	
	УстановитьНадписьРасписанияОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеРасписания(ИспользованиеРасписание)
	
	Если Типзнч(РасписаниеРегламентногоЗадания)<>Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	РеглЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.Б24_ЗаданиеСинхронизацииДанных);
	РеглЗадание.Расписание 		= РасписаниеРегламентногоЗадания; 	
	РеглЗадание.Использование 	= ИспользованиеРасписание;
	РеглЗадание.Записать();	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьЗаписьОДополнительнойОбработкеДляРасписания()
	
	ВерсияОбработки = "1.0"; 
	
	НаименованиеОбъекта = "Выполнение синхронизации с Битрикс24 по расписанию";
	Публикация 			= Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеОбъекта);
	Запрос.УстановитьПараметр("Публикация"	, Публикация);
	Запрос.УстановитьПараметр("Версия"		, ВерсияОбработки);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ДополнительныеОтчетыИОбработки.Наименование = &Наименование
	|	И ДополнительныеОтчетыИОбработки.Публикация = &Публикация
	|	И ДополнительныеОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ
	|	И ДополнительныеОтчетыИОбработки.Версия = &Версия";
	
	ВыполненныйЗапрос = Запрос.Выполнить();
	
	ЗаписьСОбработкой = Неопределено;
	
	Если НЕ ВыполненныйЗапрос.Пустой() тогда
		ТзнДанных = ВыполненныйЗапрос.Выгрузить();
		ЗаписьСОбработкой = ТзнДанных[0].Ссылка;
	Иначе
		                   
		МакетСОбработкой = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("ОбработкаУстановкиРасписания");
		
		НоваяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		
		НоваяОбработка.Наименование = НаименованиеОбъекта;
		НоваяОбработка.Публикация	= Публикация;
		НоваяОбработка.БезопасныйРежим = Ложь;
		НоваяОбработка.Вид 			= Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
		НоваяОбработка.Версия       = ВерсияОбработки;
		НоваяОбработка.ИмяОбъекта	= "БитриксВыполнениеСинхронизацииПоРасписанию";
		НоваяОбработка.ИмяФайла		= "БитриксВыполнениеСинхронизацииПоРасписанию.epf";
		НоваяОбработка.РежимСовместимостиРазрешений = Перечисления.РежимыСовместимостиРазрешенийДополнительныхОтчетовИОбработок.Версия_2_2_2; 
		НоваяОбработка.Информация	= "Обработка выполняет синхронизацию с Битрикс24 по расписанию";
		НоваяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(МакетСОбработкой);
		
		
		НоваяКоманда = НоваяОбработка.Команды.Добавить();
		НоваяКоманда.Идентификатор = "ОткрытьГлобально";
		НоваяКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		НоваяКоманда.Представление = НаименованиеОбъекта;
		НоваяКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор;
		НоваяОбработка.Записать();
		
		ЗаписьСОбработкой = НоваяОбработка.Ссылка;
		
	КонецЕсли;
	
	Возврат ЗаписьСОбработкой; 
	
КонецФункции

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегламентноеЗадание()
	
	ЗаписьСОбработкой = ПолучитьЗаписьОДополнительнойОбработкеДляРасписания();
	
	Если ЗаписьСОбработкой = Неопределено тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если ЗаписьСОбработкой.Команды.количество()= 0 тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ТекРегламентноеЗадание = ЗаписьСОбработкой.Команды[0].РегламентноеЗаданиеGUID;
	
	Возврат ТекРегламентноеЗадание; 
	
КонецФункции

&НаКлиенте
Процедура РасписаниеИспользуетсяПриИзменении(Элемент)
	
	Если РасписаниеИспользуется тогда
		Элементы.НастроитьРасписаниеОбмена.Доступность = Истина;	
	Иначе
		Элементы.НастроитьРасписаниеОбмена.Доступность = Ложь;	
	КонецЕсли;
	
	ОбновлениеРасписания(РасписаниеИспользуется);
	
	СохранениеИнформацииОСинхронизацииПоРасписанию();
	
КонецПроцедуры

&НаСервере
Процедура СохранениеИнформацииОСинхронизацииПоРасписанию()
	
	Результат = Новый Структура;
	Результат.Вставить("РасписаниеИспользуется", РасписаниеИспользуется);
	
	Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("СинхронизацияПоРасписанию", Результат)
	
КонецПроцедуры

#КонецОбласти


#Область УстановкиПоВыгрузкеПечатныхФорм

&НаКлиенте
Процедура ВыгрузкаПечетныхФормВБитрикс24ПриИзменении(Элемент)
	
	СохранениеИнформацииОВыгрузкеПечетныхФормСервер();
	
	НужноПерезапускать = ДобавитьОбновитьРасширениеПечатныхФорм();
	
	Если НужноПерезапускать = Истина тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПерезапуске", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, "Расширение для печатных форм было установлено/обновлено. Изменения будут приняты после перазапуска клиента. Перезапустить?", РежимДиалогаВопрос.ДаНет, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОбновитьРасширениеПечатныхФорм()
	
	НужноПерезапускать = Ложь;	
	
	Если ВыгрузкаПечатныхФормВБитрикс24 = Истина тогда
		
		НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", "Б24_ПечатныеФормы"));
		
		Если НайденныеРасширения.Количество() = 0 тогда
			
			ОписаниеЗащитыОтОпасныхДействий  = Новый ОписаниеЗащитыОтОпасныхДействий;
			ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			
			ИмяФайла = ПолучитьИмяВременногоФайла("cfe");
			Макет = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьМакет("РасширениеПечатныхФорм");
			Макет.Записать(ИмяФайла);

			
			НовоеРасширение = РасширенияКонфигурации.Создать();
			НовоеРасширение.БезопасныйРежим 		= Ложь;
			НовоеРасширение.Активно 				= Истина;
			НовоеРасширение.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
			НовоеРасширение.Записать(Новый ДвоичныеДанные(ИмяФайла));
			
			УдалитьФайлы(ИмяФайла);
			
			НужноПерезапускать = Истина;
			
		Иначе
				
			Расширение = НайденныеРасширения[0];
			Расширение.Активно = Истина;;
			Расширение.Записать();
			
			НужноПерезапускать = Истина;
			
		КонецЕсли;
		
	Иначе
		
		НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", "Б24_ПечатныеФормы"));
		Если НайденныеРасширения.Количество() > 0 тогда
			Расширение = НайденныеРасширения[0];
			Расширение.Активно = Ложь;;
			Расширение.Записать();
			
			НужноПерезапускать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НужноПерезапускать;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПерезапуске(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ЗавершитьРаботуСистемы(Ложь,Истина)

КонецПроцедуры


&НаКлиенте
Процедура ВестиРеестрПечатныхФормПриИзменении(Элемент)
	СохранениеИнформацииОВыгрузкеПечетныхФормСервер();
КонецПроцедуры

&НаСервере
Процедура СохранениеИнформацииОВыгрузкеПечетныхФормСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("ВыгрузкаПечатныхФормВБитрикс24"	, ВыгрузкаПечатныхФормВБитрикс24);
	Результат.Вставить("ВестиРеестрПечатныхФорм"	 	, ВестиРеестрПечатныхФорм);
	
	Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("ВыгрузкаПечатныхФорм", Результат);
	
КонецПроцедуры

#КонецОбласти


#Область УстановкиПоВыгрузкеПечатныхФорм

&НаКлиенте
Процедура ТипДокументаЗаказаПриИзменении(Элемент)
	СохранениеИнформацииОЗаказахСервер();
КонецПроцедуры

&НаСервере
Процедура СохранениеИнформацииОЗаказахСервер()
	
	Результат = Новый Структура;
	Результат.Вставить("ТипДокументаЗаказа"	 , ТипДокументаЗаказа);
	
	Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек("Заказы", Результат)
	
КонецПроцедуры

#КонецОбласти

