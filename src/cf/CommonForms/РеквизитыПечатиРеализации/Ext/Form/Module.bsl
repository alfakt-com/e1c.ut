
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,"ЗакрыватьПриВыборе,ЗакрыватьПриЗакрытииВладельца,КлючНазначенияИспользования, ТаблицаОснованийДляПечати");
	
	Если ТолькоПросмотр Тогда
		
		СтруктураПараметров = ИзменяемыеРеквизиты(Параметры);
		МассивЭлементов = Новый Массив();
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			МассивЭлементов.Добавить(ЭлементСтруктуры.Ключ);
		КонецЦикла;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	Если Параметры.ТипОбъекта <> "РеализацияТоваровУслуг" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаПодписанияГЗ", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаДокументаГЗ", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерДокументаГЗ", "Видимость", Ложь);
	КонецЕсли;	
	
	Если Параметры.ТипОбъекта <> "РеализацияТоваровУслуг"
		И Параметры.ТипОбъекта <> "КорректировкаРеализации" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаУсловияОплатыИДоставка", "Видимость", Ложь);
	Иначе
		ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
		ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
	КонецЕсли;
	
	
	Если Параметры.НеПоказыватьРеквизиты <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, Параметры.НеПоказыватьРеквизиты, "Видимость", Ложь);
	КонецЕсли;
	
	
	Если Параметры.ТипОбъекта = "ВозвратТоваровМеждуОрганизациями"
		Или Параметры.ТипОбъекта = "ПередачаТоваровМеждуОрганизациями" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетОрганизацииПолучателя", "Видимость", Параметры.РасчетыЧерезОрганизацию);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БанковскийСчетКонтрагента", "Видимость", Не Параметры.РасчетыЧерезОрганизацию);
	Иначе
		Если ЗначениеЗаполнено(Параметры.ТаблицаОснованийДляПечати) Тогда 
			ТаблицаОснованийДляПечати.Загрузить(Параметры.ТаблицаОснованийДляПечати.Выгрузить());
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		И Не РеализацияПоЗаказам
		И (Параметры.ТипОбъекта = "РеализацияТоваровУслуг" 
			Или Параметры.ТипОбъекта = "ПередачаСырьяПереработчику")
		Или Параметры.ТипОбъекта = "ВозвратТоваровПоставщику"
		Или Параметры.ТипОбъекта = "ВыкупВозвратнойТарыКлиентом" Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресДоставки", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтступПечатьЛево", "Видимость", Ложь);
	КонецЕсли;
	
	Если Параметры.ТипОбъекта = "АктВыполненныхРабот" Тогда
		Заголовок = НСтр("ru = 'Реквизиты печати'");
		
		Элементы.Грузополучатель.Видимость = Ложь;
		Элементы.БанковскийСчетГрузополучателя.Видимость = Ложь;
		Элементы.АдресДоставки.Видимость = Ложь;
		Элементы.ДоверенностьНомер.Видимость = Ложь;
		Элементы.ДоверенностьДата.Видимость = Ложь;
		Элементы.ДоверенностьВыдана.Видимость = Ложь;
		Элементы.ДоверенностьЛицо.Видимость = Ложь;
		Элементы.Грузоотправитель.Видимость = Ложь;
		Элементы.БанковскийСчетГрузоотправителя.Видимость = Ложь;
		Элементы.Отпустил.Видимость = Ложь;
		Элементы.ОтпустилДолжность.Видимость = Ложь;
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОснование();
	ПродажиСервер.ЗаполнитьСписокВыбораАдреса(Элементы.АдресДоставки, Партнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуПринудительно Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не СохранитьПараметры Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Реквизиты печати реализации товаров и услуг были изменены. Закрыть форму без сохранения реквизитов?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "НеЗакрывать" Тогда
		СохранитьПараметры = Ложь;
	ИначеЕсли ОтветНаВопрос = "Закрыть" Тогда
		ЗакрытьФормуПринудительно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если СохранитьПараметры Тогда
		
		СтруктураПараметров = ИзменяемыеРеквизиты(ЭтаФорма);
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("КодСтроки") Тогда
			Если ИсточникВыбора.ИмяМакета = "ПФ_MXL_УсловияПоставки" Тогда
				УсловияПоставки				   = ВыбранноеЗначение.КодСтроки;
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = ВыбранноеЗначение.Наименование;
				Модифицированность = Истина;
			ИначеЕсли ИсточникВыбора.ИмяМакета = "ПФ_MXL_СпособыОтправления" Тогда
				СпособОтправленияПоКлассификатору				 = ВыбранноеЗначение.КодСтроки;
				Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = ВыбранноеЗначение.Наименование;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если ИсточникВыбора.ИмяМакета = "ПФ_MXL_УсловияПоставки" Тогда
			УсловияПоставки = ВыбранноеЗначение;
			ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
			Модифицированность = Истина;
		ИначеЕсли ИсточникВыбора.ИмяМакета = "ПФ_MXL_СпособыОтправления" Тогда
			СпособОтправленияПоКлассификатору = ВыбранноеЗначение;
			ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектОснование) Тогда
		ОснованиеИзменено = (СокрЛП(Основание) <> СокрЛП(ОбъектОснование));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснование = Основание;
	
	ВыбранныеОснования = ТаблицаОснованийДляПечати.НайтиСтроки(Новый Структура("Основание", СокрЛП(Основание)));
	Если ВыбранныеОснования.Количество() > 0 Тогда
		ВыбранноеОснование = ВыбранныеОснования.Получить(0);
		ОснованиеНомер = ВыбранноеОснование.ОснованиеНомер;
		ОснованиеДата  = ВыбранноеОснование.ОснованиеДата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНомерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеНомер)Тогда
		ОснованиеИзменено = (СокрЛП(ОснованиеНомер) <> СокрЛП(ОбъектОснованиеНомер));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеНомер = ОснованиеНомер;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеДатаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОбъектОснованиеДата) Тогда
		ОснованиеИзменено = (СокрЛП(ОснованиеДата) <> СокрЛП(ОбъектОснованиеДата));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	ОбъектОснованиеДата = ОснованиеДата;
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Грузоотправитель) Тогда
		БанковскийСчетГрузоотправителя = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Грузоотправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		БанковскийСчетГрузополучателя = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Грузополучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуПриИзменении(Элемент)
	ОбновитьПредставлениеКодаКлассификатора("СпособыОтправления");
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправленияПоКлассификаторуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяМакета",  		 "ПФ_MXL_СпособыОтправления");
	СтруктураПараметров.Вставить("ИмяСекции",  		 "Классификатор");
	СтруктураПараметров.Вставить("ТекущийКодСтроки", СпособОтправленияПоКлассификатору);
	СтруктураПараметров.Вставить("ПолучатьПолныеДанные", Истина);
	
	ЭСФКлиентПереопределяемый.ОткрытьФормуВыбораКлассификатора(СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиПриИзменении(Элемент)
	ОбновитьПредставлениеКодаКлассификатора("УсловияПоставки");
КонецПроцедуры

&НаКлиенте
Процедура УсловияПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяМакета",  		 "ПФ_MXL_УсловияПоставки");
	СтруктураПараметров.Вставить("ИмяСекции",  		 "Классификатор");
	СтруктураПараметров.Вставить("ТекущийКодСтроки", УсловияПоставки);
	СтруктураПараметров.Вставить("ПолучатьПолныеДанные", Истина);
	
	ЭСФКлиентПереопределяемый.ОткрытьФормуВыбораКлассификатора(СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ТолькоПросмотр Тогда
		СохранитьПараметры = Истина;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ИзменяемыеРеквизиты(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Источник.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Источник.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Источник.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Источник.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", Источник.БанковскийСчетОрганизацииПолучателя);
	СтруктураПараметров.Вставить("Грузоотправитель",               Источник.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Источник.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Источник.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Источник.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Источник.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Источник.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Основание",                      Источник.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",                  Источник.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",                 Источник.ОснованиеНомер);
	СтруктураПараметров.Вставить("Отпустил",                       Источник.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Источник.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Руководитель",                   Источник.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Источник.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Источник.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("НомерДокументаГЗ",       		   Источник.НомерДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаДокументаГЗ",       		   Источник.ДатаДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаПодписанияГЗ",       		   Источник.ДатаПодписанияГЗ);
	СтруктураПараметров.Вставить("УсловияПоставки",       		   Источник.УсловияПоставки);
	СтруктураПараметров.Вставить("СпособОтправленияПоКлассификатору",  Источник.СпособОтправленияПоКлассификатору);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораОснование()
	
	Для Каждого СтрокаТаблицы Из ТаблицаОснованийДляПечати Цикл 
		Элементы.Основание.СписокВыбора.Добавить(СтрокаТаблицы.Основание);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеНомер) Тогда
			Элементы.ОснованиеНомер.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеДата) Тогда
			Элементы.ОснованиеДата.СписокВыбора.Добавить(СтрокаТаблицы.ОснованиеДата,Формат(СтрокаТаблицы.ОснованиеДата,"ДЛФ=D"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеКодаКлассификатора(ИмяМакета) Экспорт
	
	Если ИмяМакета = "УсловияПоставки" Тогда
		
		Если ПустаяСтрока(УсловияПоставки) Тогда
			Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = "<не указано>";
		Иначе

			Если МакетКодовСтрокУсловийПоставки.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокУсловийПоставки = ПолучитьОбщийМакет("ПФ_MXL_УсловияПоставки");
			КонецЕсли;
			
			мОбластьСтрокУсловийПоставки = МакетКодовСтрокУсловийПоставки.Области.Найти("Классификатор");
			
			НаименованиеСтроки = ЭСФКлиентСерверПереопределяемый.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокУсловийПоставки, мОбластьСтрокУсловийПоставки, УсловияПоставки);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НСтр("ru ='строка с кодом " + СокрЛП(УсловияПоставки) + " не найдена.'");
			Иначе
				Элементы.ДекорацияРасшифровкаУсловияПоставки.Заголовок = НаименованиеСтроки;
			КонецЕсли;
		КонецЕсли;	
				
	КонецЕсли;
	
	Если ИмяМакета = "СпособыОтправления" Тогда
		
		Если ПустаяСтрока(СпособОтправленияПоКлассификатору) Тогда
			Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = "<не указано>";
		Иначе
			
			Если МакетКодовСтрокСпособовОтправления.ВысотаТаблицы = 0 Тогда
				МакетКодовСтрокСпособовОтправления  =  ПолучитьОбщийМакет("ПФ_MXL_СпособыОтправления");
			КонецЕсли;
			
			мОбластьСтрокСпособовОтправления     = МакетКодовСтрокСпособовОтправления.Области.Найти("Классификатор");
			
			НаименованиеСтроки = ЭСФКлиентСерверПереопределяемый.ПолучитьНаименованиеСтрокиКлассификатораПоКоду(МакетКодовСтрокСпособовОтправления, мОбластьСтрокСпособовОтправления, СпособОтправленияПоКлассификатору);
			Если ПустаяСтрока(НаименованиеСтроки) Тогда
				Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = НСтр("ru ='строка с кодом " + СокрЛП(СпособОтправленияПоКлассификатору) + " не найдена.'");
			Иначе
				Элементы.ДекорацияРасшифровкаСпособОтправления.Заголовок = НаименованиеСтроки;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
